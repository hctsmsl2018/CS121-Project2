



GitLab












Menu




Projects
Groups
Snippets


















/








Help







Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab












Menu




Projects
Groups
Snippets


















/








Help







Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab












Menu




Projects
Groups
Snippets



GitLab






GitLab




Menu




Projects
Groups
Snippets




Menu


Projects
Groups
Snippets















/








Help







Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in
















/














/








Help







Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help



Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab




Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

9ce26e5d















Commit
9ce26e5d


authored
Jul 17, 2015
by


Johannes Lerch



Browse files




changing nested resolver trees to graphs + test cases







parent
83cffedc













Changes
9




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/AccessPath.java








View file @ 9ce26e5d






......@@ -270,4 +270,8 @@ public class AccessPath<T> {









 public T getFirstAccess() {










 return accesses[0];










 }





















 Set<T> getExclusions() {










 return exclusions;










 }










}














src/heros/fieldsens/CallEdgeResolver.java








View file @ 9ce26e5d






......@@ -22,14 +22,9 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field









 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 super(analyzer, analyzer.getAccessPath(), parent, debugger);










 }





















 @Override










 protected AccessPath<Field> getResolvedAccessPath() {










 return analyzer.getAccessPath();










 }










 










 @Override










 protected AccessPath<Field> getAccessPathOf(CallEdge<Field, Fact, Stmt, Method> inc) {










 return inc.getCalleeSourceFact().getAccessPath();



......














src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ 9ce26e5d






......@@ -18,7 +18,6 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {





















 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;



......@@ -31,11 +30,10 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, Debugger<Field, Fact, Stmt, Method> debugger, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }










 



......@@ -59,7 +57,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 @Override










 protected void processIncomingPotentialPrefix(final WrappedFact<Field, Fact, Stmt, Method> fact) {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccessPath);










 fact.getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 



......@@ -88,12 +86,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver




















 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 public Stmt getJoinStmt() {



......














src/heros/fieldsens/ResolverTemplate.java








View file @ 9ce26e5d






......@@ -27,13 +27,24 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> allResolversInExclHierarchy;










 protected AccessPath<Field> resolvedAccessPath;










 protected Debugger<Field, Fact, Stmt, Method> debugger;





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, Debugger<Field, Fact, Stmt, Method> debugger) {










 AccessPath<Field> resolvedAccessPath,










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, 










 Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer);










 this.resolvedAccessPath = resolvedAccessPath;










 this.parent = parent;










 this.debugger = debugger;










 if(parent == null || resolvedAccessPath.getExclusions().isEmpty()) {










 allResolversInExclHierarchy = Maps.newHashMap();










 }










 else {










 allResolversInExclHierarchy = parent.allResolversInExclHierarchy;










 }










 debugger.newResolver(analyzer, this);










 }










 



......@@ -53,12 +64,10 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 recursionLock = false;










 }










 










 protected abstract AccessPath<Field> getResolvedAccessPath();










 










 protected abstract AccessPath<Field> getAccessPathOf(Incoming inc);










 










 public void addIncoming(Incoming inc) {










 if(getResolvedAccessPath().isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(resolvedAccessPath.isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge: "+inc);










 if(!incomingEdges.add(inc))










 return;



......@@ -71,7 +80,7 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 










 processIncomingGuaranteedPrefix(inc);










 }










 else if(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 else if(getAccessPathOf(inc).isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 processIncomingPotentialPrefix(inc);










 }










 }



......@@ -83,25 +92,32 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(getResolvedAccessPath()) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(getResolvedAccessPath());










 if(constraint.canBeAppliedTo(resolvedAccessPath) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(resolvedAccessPath);










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = getOrCreateNestedResolver(newAccPath);










 assert nestedResolver.getResolvedAccessPath().equals(constraint.applyToAccessPath(getResolvedAccessPath()));










 assert nestedResolver.resolvedAccessPath.equals(constraint.applyToAccessPath(resolvedAccessPath));










 nestedResolver.registerCallback(callback);










 }










 }





















 protected ResolverTemplate<Field, Fact, Stmt, Method, Incoming> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 if(getResolvedAccessPath().equals(newAccPath))










 if(resolvedAccessPath.equals(newAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(newAccPath)) {










 assert getResolvedAccessPath().getDeltaTo(newAccPath).accesses.length <= 1;










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = createNestedResolver(newAccPath);










 nestedResolvers.put(newAccPath, nestedResolver);










 










 for(Incoming inc : incomingEdges) {










 nestedResolver.addIncoming(inc);










 assert resolvedAccessPath.getDeltaTo(newAccPath).accesses.length <= 1;










 if(allResolversInExclHierarchy.containsKey(newAccPath)) {










 return allResolversInExclHierarchy.get(newAccPath);










 }










 else {










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver = createNestedResolver(newAccPath);










 if(!resolvedAccessPath.getExclusions().isEmpty() || !newAccPath.getExclusions().isEmpty())










 allResolversInExclHierarchy.put(newAccPath, nestedResolver);










 nestedResolvers.put(newAccPath, nestedResolver);










 for(Incoming inc : Lists.newLinkedList(incomingEdges)) {










 nestedResolver.addIncoming(inc);










 }










 return nestedResolver;










 }










 }










 return nestedResolvers.get(newAccPath);



......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ 9ce26e5d






......@@ -20,7 +20,6 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {





















 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;



......@@ -33,22 +32,16 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }










 










 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 protected AccessPath<Field> getAccessPathOf(ReturnEdge<Field, Fact, Stmt, Method> inc) {



......@@ -106,7 +99,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPath());










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(resolvedAccessPath);










 assert delta.accesses.length <= 1;










 retEdge.incResolver.resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {














......@@ -116,7 +109,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 ReturnSiteResolver.this.interest(((ZeroCallEdgeResolver<Field, Fact, Stmt, Method>) resolver).










 copyWithAnalyzer(ReturnSiteResolver.this.analyzer));










 } else {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(resolvedAccessPath)));










 ReturnSiteResolver.this.interest(ReturnSiteResolver.this);










 }










 }



......@@ -135,10 +128,10 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 return;










 










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(inc);










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(resolvedAccessPath.isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest(this);










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 } else if(currAccPath.isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }










 }



......@@ -147,7 +140,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 if(isNullOrCallEdgeResolver(retEdge.resolverAtCaller)) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(resolvedAccessPath)), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));



......














src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ 9ce26e5d






......@@ -42,7 +42,7 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes




















 @Override










 public String toString() {










 return "0-Resolver"+super.toString();










 return "[0-Resolver"+super.toString()+"]";










 }










 










 @Override



......














test/heros/fieldsens/ControlFlowJoinResolverTest.java








View file @ 9ce26e5d






......@@ -126,7 +126,7 @@ public class ControlFlowJoinResolverTest {









 @Override










 public boolean matches(Object argument) {










 ControlFlowJoinResolver resolver = (ControlFlowJoinResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 }










 }










}














test/heros/fieldsens/FieldSensitiveIFDSSolverTest.java








View file @ 9ce26e5d






......@@ -1193,4 +1193,72 @@ public class FieldSensitiveIFDSSolverTest {









 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void intraproceduralStateExplosionInline0Resolver() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void intraproceduralStateExplosion() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("x"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void nestedResolversShouldFormAGraph() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("f"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b1").succ("b2"),










 normalStmt("b1", flow("1", overwriteField("x"), "1")).succ("c"),










 normalStmt("b2", flow("1", overwriteField("y"), "1")).succ("c"),










 normalStmt("c", flow(2, "1", "1")).succ("d1").succ("d2"),










 normalStmt("d1", flow(2, "1", overwriteField("x"), "1")).succ("e"),










 normalStmt("d2", flow(2, "1", overwriteField("y"), "1")).succ("e"),










 normalStmt("e", flow(3, "1", "1")).succ("f"));










 










 helper.runSolver(false, "m_a");










 }










}














test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ 9ce26e5d






......@@ -300,7 +300,7 @@ public class ReturnSiteResolverTest {









 @Override










 public boolean matches(Object argument) {










 ReturnSiteResolver resolver = (ReturnSiteResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getReturnSite().equals(returnSite);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getReturnSite().equals(returnSite);










 }










 }










}
















Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

9ce26e5d















Commit
9ce26e5d


authored
Jul 17, 2015
by


Johannes Lerch



Browse files




changing nested resolver trees to graphs + test cases







parent
83cffedc













Changes
9




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/AccessPath.java








View file @ 9ce26e5d






......@@ -270,4 +270,8 @@ public class AccessPath<T> {









 public T getFirstAccess() {










 return accesses[0];










 }





















 Set<T> getExclusions() {










 return exclusions;










 }










}














src/heros/fieldsens/CallEdgeResolver.java








View file @ 9ce26e5d






......@@ -22,14 +22,9 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field









 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 super(analyzer, analyzer.getAccessPath(), parent, debugger);










 }





















 @Override










 protected AccessPath<Field> getResolvedAccessPath() {










 return analyzer.getAccessPath();










 }










 










 @Override










 protected AccessPath<Field> getAccessPathOf(CallEdge<Field, Fact, Stmt, Method> inc) {










 return inc.getCalleeSourceFact().getAccessPath();



......














src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ 9ce26e5d






......@@ -18,7 +18,6 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {





















 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;



......@@ -31,11 +30,10 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, Debugger<Field, Fact, Stmt, Method> debugger, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }










 



......@@ -59,7 +57,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 @Override










 protected void processIncomingPotentialPrefix(final WrappedFact<Field, Fact, Stmt, Method> fact) {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccessPath);










 fact.getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 



......@@ -88,12 +86,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver




















 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 public Stmt getJoinStmt() {



......














src/heros/fieldsens/ResolverTemplate.java








View file @ 9ce26e5d






......@@ -27,13 +27,24 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> allResolversInExclHierarchy;










 protected AccessPath<Field> resolvedAccessPath;










 protected Debugger<Field, Fact, Stmt, Method> debugger;





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, Debugger<Field, Fact, Stmt, Method> debugger) {










 AccessPath<Field> resolvedAccessPath,










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, 










 Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer);










 this.resolvedAccessPath = resolvedAccessPath;










 this.parent = parent;










 this.debugger = debugger;










 if(parent == null || resolvedAccessPath.getExclusions().isEmpty()) {










 allResolversInExclHierarchy = Maps.newHashMap();










 }










 else {










 allResolversInExclHierarchy = parent.allResolversInExclHierarchy;










 }










 debugger.newResolver(analyzer, this);










 }










 



......@@ -53,12 +64,10 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 recursionLock = false;










 }










 










 protected abstract AccessPath<Field> getResolvedAccessPath();










 










 protected abstract AccessPath<Field> getAccessPathOf(Incoming inc);










 










 public void addIncoming(Incoming inc) {










 if(getResolvedAccessPath().isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(resolvedAccessPath.isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge: "+inc);










 if(!incomingEdges.add(inc))










 return;



......@@ -71,7 +80,7 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 










 processIncomingGuaranteedPrefix(inc);










 }










 else if(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 else if(getAccessPathOf(inc).isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 processIncomingPotentialPrefix(inc);










 }










 }



......@@ -83,25 +92,32 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(getResolvedAccessPath()) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(getResolvedAccessPath());










 if(constraint.canBeAppliedTo(resolvedAccessPath) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(resolvedAccessPath);










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = getOrCreateNestedResolver(newAccPath);










 assert nestedResolver.getResolvedAccessPath().equals(constraint.applyToAccessPath(getResolvedAccessPath()));










 assert nestedResolver.resolvedAccessPath.equals(constraint.applyToAccessPath(resolvedAccessPath));










 nestedResolver.registerCallback(callback);










 }










 }





















 protected ResolverTemplate<Field, Fact, Stmt, Method, Incoming> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 if(getResolvedAccessPath().equals(newAccPath))










 if(resolvedAccessPath.equals(newAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(newAccPath)) {










 assert getResolvedAccessPath().getDeltaTo(newAccPath).accesses.length <= 1;










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = createNestedResolver(newAccPath);










 nestedResolvers.put(newAccPath, nestedResolver);










 










 for(Incoming inc : incomingEdges) {










 nestedResolver.addIncoming(inc);










 assert resolvedAccessPath.getDeltaTo(newAccPath).accesses.length <= 1;










 if(allResolversInExclHierarchy.containsKey(newAccPath)) {










 return allResolversInExclHierarchy.get(newAccPath);










 }










 else {










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver = createNestedResolver(newAccPath);










 if(!resolvedAccessPath.getExclusions().isEmpty() || !newAccPath.getExclusions().isEmpty())










 allResolversInExclHierarchy.put(newAccPath, nestedResolver);










 nestedResolvers.put(newAccPath, nestedResolver);










 for(Incoming inc : Lists.newLinkedList(incomingEdges)) {










 nestedResolver.addIncoming(inc);










 }










 return nestedResolver;










 }










 }










 return nestedResolvers.get(newAccPath);



......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ 9ce26e5d






......@@ -20,7 +20,6 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {





















 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;



......@@ -33,22 +32,16 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }










 










 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 protected AccessPath<Field> getAccessPathOf(ReturnEdge<Field, Fact, Stmt, Method> inc) {



......@@ -106,7 +99,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPath());










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(resolvedAccessPath);










 assert delta.accesses.length <= 1;










 retEdge.incResolver.resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {














......@@ -116,7 +109,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 ReturnSiteResolver.this.interest(((ZeroCallEdgeResolver<Field, Fact, Stmt, Method>) resolver).










 copyWithAnalyzer(ReturnSiteResolver.this.analyzer));










 } else {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(resolvedAccessPath)));










 ReturnSiteResolver.this.interest(ReturnSiteResolver.this);










 }










 }



......@@ -135,10 +128,10 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 return;










 










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(inc);










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(resolvedAccessPath.isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest(this);










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 } else if(currAccPath.isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }










 }



......@@ -147,7 +140,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 if(isNullOrCallEdgeResolver(retEdge.resolverAtCaller)) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(resolvedAccessPath)), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));



......














src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ 9ce26e5d






......@@ -42,7 +42,7 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes




















 @Override










 public String toString() {










 return "0-Resolver"+super.toString();










 return "[0-Resolver"+super.toString()+"]";










 }










 










 @Override



......














test/heros/fieldsens/ControlFlowJoinResolverTest.java








View file @ 9ce26e5d






......@@ -126,7 +126,7 @@ public class ControlFlowJoinResolverTest {









 @Override










 public boolean matches(Object argument) {










 ControlFlowJoinResolver resolver = (ControlFlowJoinResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 }










 }










}














test/heros/fieldsens/FieldSensitiveIFDSSolverTest.java








View file @ 9ce26e5d






......@@ -1193,4 +1193,72 @@ public class FieldSensitiveIFDSSolverTest {









 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void intraproceduralStateExplosionInline0Resolver() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void intraproceduralStateExplosion() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("x"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void nestedResolversShouldFormAGraph() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("f"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b1").succ("b2"),










 normalStmt("b1", flow("1", overwriteField("x"), "1")).succ("c"),










 normalStmt("b2", flow("1", overwriteField("y"), "1")).succ("c"),










 normalStmt("c", flow(2, "1", "1")).succ("d1").succ("d2"),










 normalStmt("d1", flow(2, "1", overwriteField("x"), "1")).succ("e"),










 normalStmt("d2", flow(2, "1", overwriteField("y"), "1")).succ("e"),










 normalStmt("e", flow(3, "1", "1")).succ("f"));










 










 helper.runSolver(false, "m_a");










 }










}














test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ 9ce26e5d






......@@ -300,7 +300,7 @@ public class ReturnSiteResolverTest {









 @Override










 public boolean matches(Object argument) {










 ReturnSiteResolver resolver = (ReturnSiteResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getReturnSite().equals(returnSite);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getReturnSite().equals(returnSite);










 }










 }










}
















Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

9ce26e5d







Open sidebar



Joshua Garcia heros
Commits

9ce26e5d




Open sidebar

Joshua Garcia heros
Commits

9ce26e5d


Joshua GarciaherosherosCommits
9ce26e5d








Commit
9ce26e5d


authored
Jul 17, 2015
by


Johannes Lerch



Browse files




changing nested resolver trees to graphs + test cases







parent
83cffedc













Changes
9




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/AccessPath.java








View file @ 9ce26e5d






......@@ -270,4 +270,8 @@ public class AccessPath<T> {









 public T getFirstAccess() {










 return accesses[0];










 }





















 Set<T> getExclusions() {










 return exclusions;










 }










}














src/heros/fieldsens/CallEdgeResolver.java








View file @ 9ce26e5d






......@@ -22,14 +22,9 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field









 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 super(analyzer, analyzer.getAccessPath(), parent, debugger);










 }





















 @Override










 protected AccessPath<Field> getResolvedAccessPath() {










 return analyzer.getAccessPath();










 }










 










 @Override










 protected AccessPath<Field> getAccessPathOf(CallEdge<Field, Fact, Stmt, Method> inc) {










 return inc.getCalleeSourceFact().getAccessPath();



......














src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ 9ce26e5d






......@@ -18,7 +18,6 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {





















 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;



......@@ -31,11 +30,10 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, Debugger<Field, Fact, Stmt, Method> debugger, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }










 



......@@ -59,7 +57,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 @Override










 protected void processIncomingPotentialPrefix(final WrappedFact<Field, Fact, Stmt, Method> fact) {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccessPath);










 fact.getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 



......@@ -88,12 +86,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver




















 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 public Stmt getJoinStmt() {



......














src/heros/fieldsens/ResolverTemplate.java








View file @ 9ce26e5d






......@@ -27,13 +27,24 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> allResolversInExclHierarchy;










 protected AccessPath<Field> resolvedAccessPath;










 protected Debugger<Field, Fact, Stmt, Method> debugger;





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, Debugger<Field, Fact, Stmt, Method> debugger) {










 AccessPath<Field> resolvedAccessPath,










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, 










 Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer);










 this.resolvedAccessPath = resolvedAccessPath;










 this.parent = parent;










 this.debugger = debugger;










 if(parent == null || resolvedAccessPath.getExclusions().isEmpty()) {










 allResolversInExclHierarchy = Maps.newHashMap();










 }










 else {










 allResolversInExclHierarchy = parent.allResolversInExclHierarchy;










 }










 debugger.newResolver(analyzer, this);










 }










 



......@@ -53,12 +64,10 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 recursionLock = false;










 }










 










 protected abstract AccessPath<Field> getResolvedAccessPath();










 










 protected abstract AccessPath<Field> getAccessPathOf(Incoming inc);










 










 public void addIncoming(Incoming inc) {










 if(getResolvedAccessPath().isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(resolvedAccessPath.isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge: "+inc);










 if(!incomingEdges.add(inc))










 return;



......@@ -71,7 +80,7 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 










 processIncomingGuaranteedPrefix(inc);










 }










 else if(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 else if(getAccessPathOf(inc).isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 processIncomingPotentialPrefix(inc);










 }










 }



......@@ -83,25 +92,32 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(getResolvedAccessPath()) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(getResolvedAccessPath());










 if(constraint.canBeAppliedTo(resolvedAccessPath) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(resolvedAccessPath);










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = getOrCreateNestedResolver(newAccPath);










 assert nestedResolver.getResolvedAccessPath().equals(constraint.applyToAccessPath(getResolvedAccessPath()));










 assert nestedResolver.resolvedAccessPath.equals(constraint.applyToAccessPath(resolvedAccessPath));










 nestedResolver.registerCallback(callback);










 }










 }





















 protected ResolverTemplate<Field, Fact, Stmt, Method, Incoming> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 if(getResolvedAccessPath().equals(newAccPath))










 if(resolvedAccessPath.equals(newAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(newAccPath)) {










 assert getResolvedAccessPath().getDeltaTo(newAccPath).accesses.length <= 1;










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = createNestedResolver(newAccPath);










 nestedResolvers.put(newAccPath, nestedResolver);










 










 for(Incoming inc : incomingEdges) {










 nestedResolver.addIncoming(inc);










 assert resolvedAccessPath.getDeltaTo(newAccPath).accesses.length <= 1;










 if(allResolversInExclHierarchy.containsKey(newAccPath)) {










 return allResolversInExclHierarchy.get(newAccPath);










 }










 else {










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver = createNestedResolver(newAccPath);










 if(!resolvedAccessPath.getExclusions().isEmpty() || !newAccPath.getExclusions().isEmpty())










 allResolversInExclHierarchy.put(newAccPath, nestedResolver);










 nestedResolvers.put(newAccPath, nestedResolver);










 for(Incoming inc : Lists.newLinkedList(incomingEdges)) {










 nestedResolver.addIncoming(inc);










 }










 return nestedResolver;










 }










 }










 return nestedResolvers.get(newAccPath);



......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ 9ce26e5d






......@@ -20,7 +20,6 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {





















 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;



......@@ -33,22 +32,16 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }










 










 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 protected AccessPath<Field> getAccessPathOf(ReturnEdge<Field, Fact, Stmt, Method> inc) {



......@@ -106,7 +99,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPath());










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(resolvedAccessPath);










 assert delta.accesses.length <= 1;










 retEdge.incResolver.resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {














......@@ -116,7 +109,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 ReturnSiteResolver.this.interest(((ZeroCallEdgeResolver<Field, Fact, Stmt, Method>) resolver).










 copyWithAnalyzer(ReturnSiteResolver.this.analyzer));










 } else {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(resolvedAccessPath)));










 ReturnSiteResolver.this.interest(ReturnSiteResolver.this);










 }










 }



......@@ -135,10 +128,10 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 return;










 










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(inc);










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(resolvedAccessPath.isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest(this);










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 } else if(currAccPath.isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }










 }



......@@ -147,7 +140,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 if(isNullOrCallEdgeResolver(retEdge.resolverAtCaller)) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(resolvedAccessPath)), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));



......














src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ 9ce26e5d






......@@ -42,7 +42,7 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes




















 @Override










 public String toString() {










 return "0-Resolver"+super.toString();










 return "[0-Resolver"+super.toString()+"]";










 }










 










 @Override



......














test/heros/fieldsens/ControlFlowJoinResolverTest.java








View file @ 9ce26e5d






......@@ -126,7 +126,7 @@ public class ControlFlowJoinResolverTest {









 @Override










 public boolean matches(Object argument) {










 ControlFlowJoinResolver resolver = (ControlFlowJoinResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 }










 }










}














test/heros/fieldsens/FieldSensitiveIFDSSolverTest.java








View file @ 9ce26e5d






......@@ -1193,4 +1193,72 @@ public class FieldSensitiveIFDSSolverTest {









 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void intraproceduralStateExplosionInline0Resolver() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void intraproceduralStateExplosion() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("x"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void nestedResolversShouldFormAGraph() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("f"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b1").succ("b2"),










 normalStmt("b1", flow("1", overwriteField("x"), "1")).succ("c"),










 normalStmt("b2", flow("1", overwriteField("y"), "1")).succ("c"),










 normalStmt("c", flow(2, "1", "1")).succ("d1").succ("d2"),










 normalStmt("d1", flow(2, "1", overwriteField("x"), "1")).succ("e"),










 normalStmt("d2", flow(2, "1", overwriteField("y"), "1")).succ("e"),










 normalStmt("e", flow(3, "1", "1")).succ("f"));










 










 helper.runSolver(false, "m_a");










 }










}














test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ 9ce26e5d






......@@ -300,7 +300,7 @@ public class ReturnSiteResolverTest {









 @Override










 public boolean matches(Object argument) {










 ReturnSiteResolver resolver = (ReturnSiteResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getReturnSite().equals(returnSite);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getReturnSite().equals(returnSite);










 }










 }










}
















Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
9ce26e5d


authored
Jul 17, 2015
by


Johannes Lerch



Browse files




changing nested resolver trees to graphs + test cases







parent
83cffedc













Changes
9




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/AccessPath.java








View file @ 9ce26e5d






......@@ -270,4 +270,8 @@ public class AccessPath<T> {









 public T getFirstAccess() {










 return accesses[0];










 }





















 Set<T> getExclusions() {










 return exclusions;










 }










}














src/heros/fieldsens/CallEdgeResolver.java








View file @ 9ce26e5d






......@@ -22,14 +22,9 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field









 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 super(analyzer, analyzer.getAccessPath(), parent, debugger);










 }





















 @Override










 protected AccessPath<Field> getResolvedAccessPath() {










 return analyzer.getAccessPath();










 }










 










 @Override










 protected AccessPath<Field> getAccessPathOf(CallEdge<Field, Fact, Stmt, Method> inc) {










 return inc.getCalleeSourceFact().getAccessPath();



......














src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ 9ce26e5d






......@@ -18,7 +18,6 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {





















 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;



......@@ -31,11 +30,10 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, Debugger<Field, Fact, Stmt, Method> debugger, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }










 



......@@ -59,7 +57,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 @Override










 protected void processIncomingPotentialPrefix(final WrappedFact<Field, Fact, Stmt, Method> fact) {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccessPath);










 fact.getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 



......@@ -88,12 +86,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver




















 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 public Stmt getJoinStmt() {



......














src/heros/fieldsens/ResolverTemplate.java








View file @ 9ce26e5d






......@@ -27,13 +27,24 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> allResolversInExclHierarchy;










 protected AccessPath<Field> resolvedAccessPath;










 protected Debugger<Field, Fact, Stmt, Method> debugger;





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, Debugger<Field, Fact, Stmt, Method> debugger) {










 AccessPath<Field> resolvedAccessPath,










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, 










 Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer);










 this.resolvedAccessPath = resolvedAccessPath;










 this.parent = parent;










 this.debugger = debugger;










 if(parent == null || resolvedAccessPath.getExclusions().isEmpty()) {










 allResolversInExclHierarchy = Maps.newHashMap();










 }










 else {










 allResolversInExclHierarchy = parent.allResolversInExclHierarchy;










 }










 debugger.newResolver(analyzer, this);










 }










 



......@@ -53,12 +64,10 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 recursionLock = false;










 }










 










 protected abstract AccessPath<Field> getResolvedAccessPath();










 










 protected abstract AccessPath<Field> getAccessPathOf(Incoming inc);










 










 public void addIncoming(Incoming inc) {










 if(getResolvedAccessPath().isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(resolvedAccessPath.isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge: "+inc);










 if(!incomingEdges.add(inc))










 return;



......@@ -71,7 +80,7 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 










 processIncomingGuaranteedPrefix(inc);










 }










 else if(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 else if(getAccessPathOf(inc).isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 processIncomingPotentialPrefix(inc);










 }










 }



......@@ -83,25 +92,32 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(getResolvedAccessPath()) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(getResolvedAccessPath());










 if(constraint.canBeAppliedTo(resolvedAccessPath) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(resolvedAccessPath);










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = getOrCreateNestedResolver(newAccPath);










 assert nestedResolver.getResolvedAccessPath().equals(constraint.applyToAccessPath(getResolvedAccessPath()));










 assert nestedResolver.resolvedAccessPath.equals(constraint.applyToAccessPath(resolvedAccessPath));










 nestedResolver.registerCallback(callback);










 }










 }





















 protected ResolverTemplate<Field, Fact, Stmt, Method, Incoming> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 if(getResolvedAccessPath().equals(newAccPath))










 if(resolvedAccessPath.equals(newAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(newAccPath)) {










 assert getResolvedAccessPath().getDeltaTo(newAccPath).accesses.length <= 1;










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = createNestedResolver(newAccPath);










 nestedResolvers.put(newAccPath, nestedResolver);










 










 for(Incoming inc : incomingEdges) {










 nestedResolver.addIncoming(inc);










 assert resolvedAccessPath.getDeltaTo(newAccPath).accesses.length <= 1;










 if(allResolversInExclHierarchy.containsKey(newAccPath)) {










 return allResolversInExclHierarchy.get(newAccPath);










 }










 else {










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver = createNestedResolver(newAccPath);










 if(!resolvedAccessPath.getExclusions().isEmpty() || !newAccPath.getExclusions().isEmpty())










 allResolversInExclHierarchy.put(newAccPath, nestedResolver);










 nestedResolvers.put(newAccPath, nestedResolver);










 for(Incoming inc : Lists.newLinkedList(incomingEdges)) {










 nestedResolver.addIncoming(inc);










 }










 return nestedResolver;










 }










 }










 return nestedResolvers.get(newAccPath);



......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ 9ce26e5d






......@@ -20,7 +20,6 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {





















 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;



......@@ -33,22 +32,16 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }










 










 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 protected AccessPath<Field> getAccessPathOf(ReturnEdge<Field, Fact, Stmt, Method> inc) {



......@@ -106,7 +99,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPath());










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(resolvedAccessPath);










 assert delta.accesses.length <= 1;










 retEdge.incResolver.resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {














......@@ -116,7 +109,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 ReturnSiteResolver.this.interest(((ZeroCallEdgeResolver<Field, Fact, Stmt, Method>) resolver).










 copyWithAnalyzer(ReturnSiteResolver.this.analyzer));










 } else {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(resolvedAccessPath)));










 ReturnSiteResolver.this.interest(ReturnSiteResolver.this);










 }










 }



......@@ -135,10 +128,10 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 return;










 










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(inc);










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(resolvedAccessPath.isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest(this);










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 } else if(currAccPath.isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }










 }



......@@ -147,7 +140,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 if(isNullOrCallEdgeResolver(retEdge.resolverAtCaller)) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(resolvedAccessPath)), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));



......














src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ 9ce26e5d






......@@ -42,7 +42,7 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes




















 @Override










 public String toString() {










 return "0-Resolver"+super.toString();










 return "[0-Resolver"+super.toString()+"]";










 }










 










 @Override



......














test/heros/fieldsens/ControlFlowJoinResolverTest.java








View file @ 9ce26e5d






......@@ -126,7 +126,7 @@ public class ControlFlowJoinResolverTest {









 @Override










 public boolean matches(Object argument) {










 ControlFlowJoinResolver resolver = (ControlFlowJoinResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 }










 }










}














test/heros/fieldsens/FieldSensitiveIFDSSolverTest.java








View file @ 9ce26e5d






......@@ -1193,4 +1193,72 @@ public class FieldSensitiveIFDSSolverTest {









 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void intraproceduralStateExplosionInline0Resolver() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void intraproceduralStateExplosion() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("x"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void nestedResolversShouldFormAGraph() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("f"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b1").succ("b2"),










 normalStmt("b1", flow("1", overwriteField("x"), "1")).succ("c"),










 normalStmt("b2", flow("1", overwriteField("y"), "1")).succ("c"),










 normalStmt("c", flow(2, "1", "1")).succ("d1").succ("d2"),










 normalStmt("d1", flow(2, "1", overwriteField("x"), "1")).succ("e"),










 normalStmt("d2", flow(2, "1", overwriteField("y"), "1")).succ("e"),










 normalStmt("e", flow(3, "1", "1")).succ("f"));










 










 helper.runSolver(false, "m_a");










 }










}














test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ 9ce26e5d






......@@ -300,7 +300,7 @@ public class ReturnSiteResolverTest {









 @Override










 public boolean matches(Object argument) {










 ReturnSiteResolver resolver = (ReturnSiteResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getReturnSite().equals(returnSite);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getReturnSite().equals(returnSite);










 }










 }










}
















Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
9ce26e5d


authored
Jul 17, 2015
by


Johannes Lerch



Browse files



Commit
9ce26e5d


authored
Jul 17, 2015
by


Johannes Lerch

9ce26e5dauthoredbyJohannes Lerch

changing nested resolver trees to graphs + test cases






parent
83cffedc
















parent
83cffedc





parent












Changes
9
9


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/fieldsens/AccessPath.java








View file @ 9ce26e5d






......@@ -270,4 +270,8 @@ public class AccessPath<T> {









 public T getFirstAccess() {










 return accesses[0];










 }





















 Set<T> getExclusions() {










 return exclusions;










 }










}














src/heros/fieldsens/CallEdgeResolver.java








View file @ 9ce26e5d






......@@ -22,14 +22,9 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field









 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 super(analyzer, analyzer.getAccessPath(), parent, debugger);










 }





















 @Override










 protected AccessPath<Field> getResolvedAccessPath() {










 return analyzer.getAccessPath();










 }










 










 @Override










 protected AccessPath<Field> getAccessPathOf(CallEdge<Field, Fact, Stmt, Method> inc) {










 return inc.getCalleeSourceFact().getAccessPath();



......














src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ 9ce26e5d






......@@ -18,7 +18,6 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {





















 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;



......@@ -31,11 +30,10 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, Debugger<Field, Fact, Stmt, Method> debugger, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }










 



......@@ -59,7 +57,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 @Override










 protected void processIncomingPotentialPrefix(final WrappedFact<Field, Fact, Stmt, Method> fact) {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccessPath);










 fact.getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 



......@@ -88,12 +86,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver




















 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 public Stmt getJoinStmt() {



......














src/heros/fieldsens/ResolverTemplate.java








View file @ 9ce26e5d






......@@ -27,13 +27,24 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> allResolversInExclHierarchy;










 protected AccessPath<Field> resolvedAccessPath;










 protected Debugger<Field, Fact, Stmt, Method> debugger;





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, Debugger<Field, Fact, Stmt, Method> debugger) {










 AccessPath<Field> resolvedAccessPath,










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, 










 Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer);










 this.resolvedAccessPath = resolvedAccessPath;










 this.parent = parent;










 this.debugger = debugger;










 if(parent == null || resolvedAccessPath.getExclusions().isEmpty()) {










 allResolversInExclHierarchy = Maps.newHashMap();










 }










 else {










 allResolversInExclHierarchy = parent.allResolversInExclHierarchy;










 }










 debugger.newResolver(analyzer, this);










 }










 



......@@ -53,12 +64,10 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 recursionLock = false;










 }










 










 protected abstract AccessPath<Field> getResolvedAccessPath();










 










 protected abstract AccessPath<Field> getAccessPathOf(Incoming inc);










 










 public void addIncoming(Incoming inc) {










 if(getResolvedAccessPath().isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(resolvedAccessPath.isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge: "+inc);










 if(!incomingEdges.add(inc))










 return;



......@@ -71,7 +80,7 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 










 processIncomingGuaranteedPrefix(inc);










 }










 else if(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 else if(getAccessPathOf(inc).isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 processIncomingPotentialPrefix(inc);










 }










 }



......@@ -83,25 +92,32 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(getResolvedAccessPath()) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(getResolvedAccessPath());










 if(constraint.canBeAppliedTo(resolvedAccessPath) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(resolvedAccessPath);










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = getOrCreateNestedResolver(newAccPath);










 assert nestedResolver.getResolvedAccessPath().equals(constraint.applyToAccessPath(getResolvedAccessPath()));










 assert nestedResolver.resolvedAccessPath.equals(constraint.applyToAccessPath(resolvedAccessPath));










 nestedResolver.registerCallback(callback);










 }










 }





















 protected ResolverTemplate<Field, Fact, Stmt, Method, Incoming> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 if(getResolvedAccessPath().equals(newAccPath))










 if(resolvedAccessPath.equals(newAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(newAccPath)) {










 assert getResolvedAccessPath().getDeltaTo(newAccPath).accesses.length <= 1;










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = createNestedResolver(newAccPath);










 nestedResolvers.put(newAccPath, nestedResolver);










 










 for(Incoming inc : incomingEdges) {










 nestedResolver.addIncoming(inc);










 assert resolvedAccessPath.getDeltaTo(newAccPath).accesses.length <= 1;










 if(allResolversInExclHierarchy.containsKey(newAccPath)) {










 return allResolversInExclHierarchy.get(newAccPath);










 }










 else {










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver = createNestedResolver(newAccPath);










 if(!resolvedAccessPath.getExclusions().isEmpty() || !newAccPath.getExclusions().isEmpty())










 allResolversInExclHierarchy.put(newAccPath, nestedResolver);










 nestedResolvers.put(newAccPath, nestedResolver);










 for(Incoming inc : Lists.newLinkedList(incomingEdges)) {










 nestedResolver.addIncoming(inc);










 }










 return nestedResolver;










 }










 }










 return nestedResolvers.get(newAccPath);



......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ 9ce26e5d






......@@ -20,7 +20,6 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {





















 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;



......@@ -33,22 +32,16 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }










 










 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 protected AccessPath<Field> getAccessPathOf(ReturnEdge<Field, Fact, Stmt, Method> inc) {



......@@ -106,7 +99,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPath());










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(resolvedAccessPath);










 assert delta.accesses.length <= 1;










 retEdge.incResolver.resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {














......@@ -116,7 +109,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 ReturnSiteResolver.this.interest(((ZeroCallEdgeResolver<Field, Fact, Stmt, Method>) resolver).










 copyWithAnalyzer(ReturnSiteResolver.this.analyzer));










 } else {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(resolvedAccessPath)));










 ReturnSiteResolver.this.interest(ReturnSiteResolver.this);










 }










 }



......@@ -135,10 +128,10 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 return;










 










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(inc);










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(resolvedAccessPath.isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest(this);










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 } else if(currAccPath.isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }










 }



......@@ -147,7 +140,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 if(isNullOrCallEdgeResolver(retEdge.resolverAtCaller)) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(resolvedAccessPath)), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));



......














src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ 9ce26e5d






......@@ -42,7 +42,7 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes




















 @Override










 public String toString() {










 return "0-Resolver"+super.toString();










 return "[0-Resolver"+super.toString()+"]";










 }










 










 @Override



......














test/heros/fieldsens/ControlFlowJoinResolverTest.java








View file @ 9ce26e5d






......@@ -126,7 +126,7 @@ public class ControlFlowJoinResolverTest {









 @Override










 public boolean matches(Object argument) {










 ControlFlowJoinResolver resolver = (ControlFlowJoinResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 }










 }










}














test/heros/fieldsens/FieldSensitiveIFDSSolverTest.java








View file @ 9ce26e5d






......@@ -1193,4 +1193,72 @@ public class FieldSensitiveIFDSSolverTest {









 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void intraproceduralStateExplosionInline0Resolver() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void intraproceduralStateExplosion() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("x"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void nestedResolversShouldFormAGraph() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("f"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b1").succ("b2"),










 normalStmt("b1", flow("1", overwriteField("x"), "1")).succ("c"),










 normalStmt("b2", flow("1", overwriteField("y"), "1")).succ("c"),










 normalStmt("c", flow(2, "1", "1")).succ("d1").succ("d2"),










 normalStmt("d1", flow(2, "1", overwriteField("x"), "1")).succ("e"),










 normalStmt("d2", flow(2, "1", overwriteField("y"), "1")).succ("e"),










 normalStmt("e", flow(3, "1", "1")).succ("f"));










 










 helper.runSolver(false, "m_a");










 }










}














test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ 9ce26e5d






......@@ -300,7 +300,7 @@ public class ReturnSiteResolverTest {









 @Override










 public boolean matches(Object argument) {










 ReturnSiteResolver resolver = (ReturnSiteResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getReturnSite().equals(returnSite);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getReturnSite().equals(returnSite);










 }










 }










}














src/heros/fieldsens/AccessPath.java








View file @ 9ce26e5d






......@@ -270,4 +270,8 @@ public class AccessPath<T> {









 public T getFirstAccess() {










 return accesses[0];










 }





















 Set<T> getExclusions() {










 return exclusions;










 }










}












src/heros/fieldsens/AccessPath.java








View file @ 9ce26e5d








src/heros/fieldsens/AccessPath.java










View file @ 9ce26e5d


9ce26e5d



......@@ -270,4 +270,8 @@ public class AccessPath<T> {









 public T getFirstAccess() {










 return accesses[0];










 }





















 Set<T> getExclusions() {










 return exclusions;










 }










}






......@@ -270,4 +270,8 @@ public class AccessPath<T> {









 public T getFirstAccess() {










 return accesses[0];










 }





















 Set<T> getExclusions() {










 return exclusions;










 }










}


 public T getFirstAccess() {publicTgetFirstAccess(){ return accesses[0];returnaccesses[0]; }} Set<T> getExclusions() {Set<T>getExclusions(){ return exclusions;returnexclusions; }}}}








src/heros/fieldsens/CallEdgeResolver.java








View file @ 9ce26e5d






......@@ -22,14 +22,9 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field









 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 super(analyzer, analyzer.getAccessPath(), parent, debugger);










 }





















 @Override










 protected AccessPath<Field> getResolvedAccessPath() {










 return analyzer.getAccessPath();










 }










 










 @Override










 protected AccessPath<Field> getAccessPathOf(CallEdge<Field, Fact, Stmt, Method> inc) {










 return inc.getCalleeSourceFact().getAccessPath();



......












src/heros/fieldsens/CallEdgeResolver.java








View file @ 9ce26e5d








src/heros/fieldsens/CallEdgeResolver.java










View file @ 9ce26e5d


9ce26e5d



......@@ -22,14 +22,9 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field









 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 super(analyzer, analyzer.getAccessPath(), parent, debugger);










 }





















 @Override










 protected AccessPath<Field> getResolvedAccessPath() {










 return analyzer.getAccessPath();










 }










 










 @Override










 protected AccessPath<Field> getAccessPathOf(CallEdge<Field, Fact, Stmt, Method> inc) {










 return inc.getCalleeSourceFact().getAccessPath();



......






......@@ -22,14 +22,9 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field









 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 super(analyzer, analyzer.getAccessPath(), parent, debugger);










 }





















 @Override










 protected AccessPath<Field> getResolvedAccessPath() {










 return analyzer.getAccessPath();










 }










 










 @Override










 protected AccessPath<Field> getAccessPathOf(CallEdge<Field, Fact, Stmt, Method> inc) {










 return inc.getCalleeSourceFact().getAccessPath();



......


 }}  public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {publicCallEdgeResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,Debugger<Field,Fact,Stmt,Method>debugger,CallEdgeResolver<Field,Fact,Stmt,Method>parent){ super(analyzer, parent, debugger);super(analyzer,parent,debugger); super(analyzer, analyzer.getAccessPath(), parent, debugger);super(analyzer,analyzeranalyzer..getAccessPathgetAccessPath(),(), parent,debugger); }} @Override@Override protected AccessPath<Field> getResolvedAccessPath() {protectedAccessPath<Field>getResolvedAccessPath(){ return analyzer.getAccessPath();returnanalyzer.getAccessPath(); }}  @Override@Override protected AccessPath<Field> getAccessPathOf(CallEdge<Field, Fact, Stmt, Method> inc) {protectedAccessPath<Field>getAccessPathOf(CallEdge<Field,Fact,Stmt,Method>inc){ return inc.getCalleeSourceFact().getAccessPath();returninc.getCalleeSourceFact().getAccessPath();








src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ 9ce26e5d






......@@ -18,7 +18,6 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {





















 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;



......@@ -31,11 +30,10 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, Debugger<Field, Fact, Stmt, Method> debugger, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }










 



......@@ -59,7 +57,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 @Override










 protected void processIncomingPotentialPrefix(final WrappedFact<Field, Fact, Stmt, Method> fact) {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccessPath);










 fact.getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 



......@@ -88,12 +86,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver




















 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 public Stmt getJoinStmt() {



......












src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ 9ce26e5d








src/heros/fieldsens/ControlFlowJoinResolver.java










View file @ 9ce26e5d


9ce26e5d



......@@ -18,7 +18,6 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {





















 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;



......@@ -31,11 +30,10 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, Debugger<Field, Fact, Stmt, Method> debugger, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }










 



......@@ -59,7 +57,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 @Override










 protected void processIncomingPotentialPrefix(final WrappedFact<Field, Fact, Stmt, Method> fact) {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccessPath);










 fact.getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 



......@@ -88,12 +86,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver




















 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 public Stmt getJoinStmt() {



......






......@@ -18,7 +18,6 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {





















 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;



......@@ -31,11 +30,10 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, Debugger<Field, Fact, Stmt, Method> debugger, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }










 



......@@ -59,7 +57,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 @Override










 protected void processIncomingPotentialPrefix(final WrappedFact<Field, Fact, Stmt, Method> fact) {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccessPath);










 fact.getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 



......@@ -88,12 +86,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver




















 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 public Stmt getJoinStmt() {



......


public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {publicclassControlFlowJoinResolver<Field,Fact,Stmt,Method>extendsResolverTemplate<Field,Fact,Stmt,Method,WrappedFact<Field,Fact,Stmt,Method>>{ private Stmt joinStmt;privateStmtjoinStmt; private AccessPath<Field> resolvedAccPath;privateAccessPath<Field>resolvedAccPath; private boolean propagated = false;privatebooleanpropagated=false; private Fact sourceFact;privateFactsourceFact; private FactMergeHandler<Fact> factMergeHandler;privateFactMergeHandler<Fact>factMergeHandler;  private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, privateControlFlowJoinResolver(FactMergeHandler<Fact>factMergeHandler,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer, Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, Debugger<Field, Fact, Stmt, Method> debugger, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {StmtjoinStmt,FactsourceFact,AccessPath<Field>resolvedAccPath,Debugger<Field,Fact,Stmt,Method>debugger,ControlFlowJoinResolver<Field,Fact,Stmt,Method>parent){ super(analyzer, parent, debugger);super(analyzer,parent,debugger); super(analyzer, resolvedAccPath, parent, debugger);super(analyzer,resolvedAccPathresolvedAccPath,, parent,debugger); this.factMergeHandler = factMergeHandler;this.factMergeHandler=factMergeHandler; this.joinStmt = joinStmt;this.joinStmt=joinStmt; this.sourceFact = sourceFact;this.sourceFact=sourceFact; this.resolvedAccPath = resolvedAccPath;this.resolvedAccPath=resolvedAccPath; propagated=true;propagated=true; }}  @Override@Override protected void processIncomingPotentialPrefix(final WrappedFact<Field, Fact, Stmt, Method> fact) {protectedvoidprocessIncomingPotentialPrefix(finalWrappedFact<Field,Fact,Stmt,Method>fact){ lock();lock(); Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);Delta<Field>delta=fact.getAccessPath().getDeltaTo(resolvedAccPath); Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccessPath);Delta<Field>delta=fact.getAccessPath().getDeltaTo(resolvedAccessPathess); fact.getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {fact.getResolver().resolve(newDeltaConstraint<Field>(delta),newInterestCallback<Field,Fact,Stmt,Method>(){ @Override@Override public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, publicvoidinterest(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer, @Override@Override public String toString() {publicStringtoString(){ return "<"+resolvedAccPath+":"+joinStmt+" in "+analyzer.getMethod()+">";return"<"+resolvedAccPath+":"+joinStmt+" in "+analyzer.getMethod()+">"; }} @Override@Override public AccessPath<Field> getResolvedAccessPath() {publicAccessPath<Field>getResolvedAccessPath(){ return resolvedAccPath;returnresolvedAccPath; return "<"+resolvedAccessPath+":"+joinStmt+" in "+analyzer.getMethod()+">";return"<"+resolvedAccessPath+":"+joinStmt+" in "+analyzer.getMethod()+">"; }} public Stmt getJoinStmt() {publicStmtgetJoinStmt(){








src/heros/fieldsens/ResolverTemplate.java








View file @ 9ce26e5d






......@@ -27,13 +27,24 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> allResolversInExclHierarchy;










 protected AccessPath<Field> resolvedAccessPath;










 protected Debugger<Field, Fact, Stmt, Method> debugger;





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, Debugger<Field, Fact, Stmt, Method> debugger) {










 AccessPath<Field> resolvedAccessPath,










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, 










 Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer);










 this.resolvedAccessPath = resolvedAccessPath;










 this.parent = parent;










 this.debugger = debugger;










 if(parent == null || resolvedAccessPath.getExclusions().isEmpty()) {










 allResolversInExclHierarchy = Maps.newHashMap();










 }










 else {










 allResolversInExclHierarchy = parent.allResolversInExclHierarchy;










 }










 debugger.newResolver(analyzer, this);










 }










 



......@@ -53,12 +64,10 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 recursionLock = false;










 }










 










 protected abstract AccessPath<Field> getResolvedAccessPath();










 










 protected abstract AccessPath<Field> getAccessPathOf(Incoming inc);










 










 public void addIncoming(Incoming inc) {










 if(getResolvedAccessPath().isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(resolvedAccessPath.isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge: "+inc);










 if(!incomingEdges.add(inc))










 return;



......@@ -71,7 +80,7 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 










 processIncomingGuaranteedPrefix(inc);










 }










 else if(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 else if(getAccessPathOf(inc).isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 processIncomingPotentialPrefix(inc);










 }










 }



......@@ -83,25 +92,32 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(getResolvedAccessPath()) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(getResolvedAccessPath());










 if(constraint.canBeAppliedTo(resolvedAccessPath) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(resolvedAccessPath);










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = getOrCreateNestedResolver(newAccPath);










 assert nestedResolver.getResolvedAccessPath().equals(constraint.applyToAccessPath(getResolvedAccessPath()));










 assert nestedResolver.resolvedAccessPath.equals(constraint.applyToAccessPath(resolvedAccessPath));










 nestedResolver.registerCallback(callback);










 }










 }





















 protected ResolverTemplate<Field, Fact, Stmt, Method, Incoming> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 if(getResolvedAccessPath().equals(newAccPath))










 if(resolvedAccessPath.equals(newAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(newAccPath)) {










 assert getResolvedAccessPath().getDeltaTo(newAccPath).accesses.length <= 1;










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = createNestedResolver(newAccPath);










 nestedResolvers.put(newAccPath, nestedResolver);










 










 for(Incoming inc : incomingEdges) {










 nestedResolver.addIncoming(inc);










 assert resolvedAccessPath.getDeltaTo(newAccPath).accesses.length <= 1;










 if(allResolversInExclHierarchy.containsKey(newAccPath)) {










 return allResolversInExclHierarchy.get(newAccPath);










 }










 else {










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver = createNestedResolver(newAccPath);










 if(!resolvedAccessPath.getExclusions().isEmpty() || !newAccPath.getExclusions().isEmpty())










 allResolversInExclHierarchy.put(newAccPath, nestedResolver);










 nestedResolvers.put(newAccPath, nestedResolver);










 for(Incoming inc : Lists.newLinkedList(incomingEdges)) {










 nestedResolver.addIncoming(inc);










 }










 return nestedResolver;










 }










 }










 return nestedResolvers.get(newAccPath);



......












src/heros/fieldsens/ResolverTemplate.java








View file @ 9ce26e5d








src/heros/fieldsens/ResolverTemplate.java










View file @ 9ce26e5d


9ce26e5d



......@@ -27,13 +27,24 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> allResolversInExclHierarchy;










 protected AccessPath<Field> resolvedAccessPath;










 protected Debugger<Field, Fact, Stmt, Method> debugger;





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, Debugger<Field, Fact, Stmt, Method> debugger) {










 AccessPath<Field> resolvedAccessPath,










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, 










 Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer);










 this.resolvedAccessPath = resolvedAccessPath;










 this.parent = parent;










 this.debugger = debugger;










 if(parent == null || resolvedAccessPath.getExclusions().isEmpty()) {










 allResolversInExclHierarchy = Maps.newHashMap();










 }










 else {










 allResolversInExclHierarchy = parent.allResolversInExclHierarchy;










 }










 debugger.newResolver(analyzer, this);










 }










 



......@@ -53,12 +64,10 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 recursionLock = false;










 }










 










 protected abstract AccessPath<Field> getResolvedAccessPath();










 










 protected abstract AccessPath<Field> getAccessPathOf(Incoming inc);










 










 public void addIncoming(Incoming inc) {










 if(getResolvedAccessPath().isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(resolvedAccessPath.isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge: "+inc);










 if(!incomingEdges.add(inc))










 return;



......@@ -71,7 +80,7 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 










 processIncomingGuaranteedPrefix(inc);










 }










 else if(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 else if(getAccessPathOf(inc).isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 processIncomingPotentialPrefix(inc);










 }










 }



......@@ -83,25 +92,32 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(getResolvedAccessPath()) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(getResolvedAccessPath());










 if(constraint.canBeAppliedTo(resolvedAccessPath) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(resolvedAccessPath);










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = getOrCreateNestedResolver(newAccPath);










 assert nestedResolver.getResolvedAccessPath().equals(constraint.applyToAccessPath(getResolvedAccessPath()));










 assert nestedResolver.resolvedAccessPath.equals(constraint.applyToAccessPath(resolvedAccessPath));










 nestedResolver.registerCallback(callback);










 }










 }





















 protected ResolverTemplate<Field, Fact, Stmt, Method, Incoming> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 if(getResolvedAccessPath().equals(newAccPath))










 if(resolvedAccessPath.equals(newAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(newAccPath)) {










 assert getResolvedAccessPath().getDeltaTo(newAccPath).accesses.length <= 1;










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = createNestedResolver(newAccPath);










 nestedResolvers.put(newAccPath, nestedResolver);










 










 for(Incoming inc : incomingEdges) {










 nestedResolver.addIncoming(inc);










 assert resolvedAccessPath.getDeltaTo(newAccPath).accesses.length <= 1;










 if(allResolversInExclHierarchy.containsKey(newAccPath)) {










 return allResolversInExclHierarchy.get(newAccPath);










 }










 else {










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver = createNestedResolver(newAccPath);










 if(!resolvedAccessPath.getExclusions().isEmpty() || !newAccPath.getExclusions().isEmpty())










 allResolversInExclHierarchy.put(newAccPath, nestedResolver);










 nestedResolvers.put(newAccPath, nestedResolver);










 for(Incoming inc : Lists.newLinkedList(incomingEdges)) {










 nestedResolver.addIncoming(inc);










 }










 return nestedResolver;










 }










 }










 return nestedResolvers.get(newAccPath);



......






......@@ -27,13 +27,24 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> allResolversInExclHierarchy;










 protected AccessPath<Field> resolvedAccessPath;










 protected Debugger<Field, Fact, Stmt, Method> debugger;





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, Debugger<Field, Fact, Stmt, Method> debugger) {










 AccessPath<Field> resolvedAccessPath,










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, 










 Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer);










 this.resolvedAccessPath = resolvedAccessPath;










 this.parent = parent;










 this.debugger = debugger;










 if(parent == null || resolvedAccessPath.getExclusions().isEmpty()) {










 allResolversInExclHierarchy = Maps.newHashMap();










 }










 else {










 allResolversInExclHierarchy = parent.allResolversInExclHierarchy;










 }










 debugger.newResolver(analyzer, this);










 }










 



......@@ -53,12 +64,10 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 recursionLock = false;










 }










 










 protected abstract AccessPath<Field> getResolvedAccessPath();










 










 protected abstract AccessPath<Field> getAccessPathOf(Incoming inc);










 










 public void addIncoming(Incoming inc) {










 if(getResolvedAccessPath().isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(resolvedAccessPath.isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge: "+inc);










 if(!incomingEdges.add(inc))










 return;



......@@ -71,7 +80,7 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 










 processIncomingGuaranteedPrefix(inc);










 }










 else if(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 else if(getAccessPathOf(inc).isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 processIncomingPotentialPrefix(inc);










 }










 }



......@@ -83,25 +92,32 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(getResolvedAccessPath()) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(getResolvedAccessPath());










 if(constraint.canBeAppliedTo(resolvedAccessPath) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(resolvedAccessPath);










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = getOrCreateNestedResolver(newAccPath);










 assert nestedResolver.getResolvedAccessPath().equals(constraint.applyToAccessPath(getResolvedAccessPath()));










 assert nestedResolver.resolvedAccessPath.equals(constraint.applyToAccessPath(resolvedAccessPath));










 nestedResolver.registerCallback(callback);










 }










 }





















 protected ResolverTemplate<Field, Fact, Stmt, Method, Incoming> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 if(getResolvedAccessPath().equals(newAccPath))










 if(resolvedAccessPath.equals(newAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(newAccPath)) {










 assert getResolvedAccessPath().getDeltaTo(newAccPath).accesses.length <= 1;










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = createNestedResolver(newAccPath);










 nestedResolvers.put(newAccPath, nestedResolver);










 










 for(Incoming inc : incomingEdges) {










 nestedResolver.addIncoming(inc);










 assert resolvedAccessPath.getDeltaTo(newAccPath).accesses.length <= 1;










 if(allResolversInExclHierarchy.containsKey(newAccPath)) {










 return allResolversInExclHierarchy.get(newAccPath);










 }










 else {










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver = createNestedResolver(newAccPath);










 if(!resolvedAccessPath.getExclusions().isEmpty() || !newAccPath.getExclusions().isEmpty())










 allResolversInExclHierarchy.put(newAccPath, nestedResolver);










 nestedResolvers.put(newAccPath, nestedResolver);










 for(Incoming inc : Lists.newLinkedList(incomingEdges)) {










 nestedResolver.addIncoming(inc);










 }










 return nestedResolver;










 }










 }










 return nestedResolvers.get(newAccPath);



......


 protected Set<Incoming> incomingEdges = Sets.newHashSet();protectedSet<Incoming>incomingEdges=Sets.newHashSet(); private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;privateResolverTemplate<Field,Fact,Stmt,Method,Incoming>parent; private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();privateMap<AccessPath<Field>,ResolverTemplate<Field,Fact,Stmt,Method,Incoming>>nestedResolvers=Maps.newHashMap(); private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> allResolversInExclHierarchy;privateMap<AccessPath<Field>,ResolverTemplate<Field,Fact,Stmt,Method,Incoming>>allResolversInExclHierarchy; protected AccessPath<Field> resolvedAccessPath;protectedAccessPath<Field>resolvedAccessPath; protected Debugger<Field, Fact, Stmt, Method> debugger;protectedDebugger<Field,Fact,Stmt,Method>debugger; public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, publicResolverTemplate(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer, ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, Debugger<Field, Fact, Stmt, Method> debugger) {ResolverTemplate<Field,Fact,Stmt,Method,Incoming>parent,Debugger<Field,Fact,Stmt,Method>debugger){ AccessPath<Field> resolvedAccessPath,AccessPath<Field>resolvedAccessPath, ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, ResolverTemplate<Field,Fact,Stmt,Method,Incoming>parent, Debugger<Field, Fact, Stmt, Method> debugger) {Debugger<Field,Fact,Stmt,Method>debugger){ super(analyzer);super(analyzer); this.resolvedAccessPath = resolvedAccessPath;this.resolvedAccessPath=resolvedAccessPath; this.parent = parent;this.parent=parent; this.debugger = debugger;this.debugger=debugger; if(parent == null || resolvedAccessPath.getExclusions().isEmpty()) {if(parent==null||resolvedAccessPath.getExclusions().isEmpty()){ allResolversInExclHierarchy = Maps.newHashMap();allResolversInExclHierarchy=Maps.newHashMap(); }} else {else{ allResolversInExclHierarchy = parent.allResolversInExclHierarchy;allResolversInExclHierarchy=parent.allResolversInExclHierarchy; }} debugger.newResolver(analyzer, this);debugger.newResolver(analyzer,this); }}  recursionLock = false;recursionLock=false; }}  protected abstract AccessPath<Field> getResolvedAccessPath();protectedabstractAccessPath<Field>getResolvedAccessPath();  protected abstract AccessPath<Field> getAccessPathOf(Incoming inc);protectedabstractAccessPath<Field>getAccessPathOf(Incominginc);  public void addIncoming(Incoming inc) {publicvoidaddIncoming(Incominginc){ if(getResolvedAccessPath().isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {if(getResolvedAccessPathgetR().()isPrefixOf(getAccessPathOf(inc))==PrefixTestResult.GUARANTEED_PREFIX){ if(resolvedAccessPath.isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {if(resolvedAccessPathr.isPrefixOf(getAccessPathOf(inc))==PrefixTestResult.GUARANTEED_PREFIX){ log("Incoming Edge: "+inc);log("Incoming Edge: "+inc); if(!incomingEdges.add(inc))if(!incomingEdges.add(inc)) return;return;  processIncomingGuaranteedPrefix(inc);processIncomingGuaranteedPrefix(inc); }} else if(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {elseif(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPathgetR()).()atLeast(PrefixTestResult.POTENTIAL_PREFIX)){ else if(getAccessPathOf(inc).isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {elseif(getAccessPathOf(inc).isPrefixOf(resolvedAccessPathr).atLeast(PrefixTestResult.POTENTIAL_PREFIX)){ processIncomingPotentialPrefix(inc);processIncomingPotentialPrefix(inc); }} }} @Override@Override public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {publicvoidresolve(Constraint<Field>constraint,InterestCallback<Field,Fact,Stmt,Method>callback){ log("Resolve: "+constraint);log("Resolve: "+constraint); if(constraint.canBeAppliedTo(getResolvedAccessPath()) && !isLocked()) {if(constraint.canBeAppliedTo(getResolvedAccessPathgetR())()&&!isLocked()){ AccessPath<Field> newAccPath = constraint.applyToAccessPath(getResolvedAccessPath());AccessPath<Field>newAccPath=constraint.applyToAccessPath(getResolvedAccessPathgetR());() if(constraint.canBeAppliedTo(resolvedAccessPath) && !isLocked()) {if(constraint.canBeAppliedTo(resolvedAccessPathr)&&!isLocked()){ AccessPath<Field> newAccPath = constraint.applyToAccessPath(resolvedAccessPath);AccessPath<Field>newAccPath=constraint.applyToAccessPath(resolvedAccessPathr); ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = getOrCreateNestedResolver(newAccPath);ResolverTemplate<Field,Fact,Stmt,Method,Incoming>nestedResolver=getOrCreateNestedResolver(newAccPath); assert nestedResolver.getResolvedAccessPath().equals(constraint.applyToAccessPath(getResolvedAccessPath()));assertnestedResolver.getResolvedAccessPathgetR().()equals(constraint.applyToAccessPath(getResolvedAccessPathgetR()));() assert nestedResolver.resolvedAccessPath.equals(constraint.applyToAccessPath(resolvedAccessPath));assertnestedResolver.resolvedAccessPathr.equals(constraint.applyToAccessPath(resolvedAccessPathr)); nestedResolver.registerCallback(callback);nestedResolver.registerCallback(callback); }} }} protected ResolverTemplate<Field, Fact, Stmt, Method, Incoming> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {protectedResolverTemplate<Field,Fact,Stmt,Method,Incoming>getOrCreateNestedResolver(AccessPath<Field>newAccPath){ if(getResolvedAccessPath().equals(newAccPath))if(getResolvedAccessPathgetR().()equals(newAccPath)) if(resolvedAccessPath.equals(newAccPath))if(resolvedAccessPathr.equals(newAccPath)) return this;returnthis;  if(!nestedResolvers.containsKey(newAccPath)) {if(!nestedResolvers.containsKey(newAccPath)){ assert getResolvedAccessPath().getDeltaTo(newAccPath).accesses.length <= 1;assertgetResolvedAccessPath().getDeltaTo(newAccPath).accesses.length<=1; ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = createNestedResolver(newAccPath);ResolverTemplate<Field,Fact,Stmt,Method,Incoming>nestedResolver=createNestedResolver(newAccPath); nestedResolvers.put(newAccPath, nestedResolver);nestedResolvers.put(newAccPath,nestedResolver);  for(Incoming inc : incomingEdges) {for(Incominginc:incomingEdges){ nestedResolver.addIncoming(inc);nestedResolver.addIncoming(inc); assert resolvedAccessPath.getDeltaTo(newAccPath).accesses.length <= 1;assertresolvedAccessPath.getDeltaTo(newAccPath).accesses.length<=1; if(allResolversInExclHierarchy.containsKey(newAccPath)) {if(allResolversInExclHierarchy.containsKey(newAccPath)){ return allResolversInExclHierarchy.get(newAccPath);returnallResolversInExclHierarchy.get(newAccPath); }} else {else{ ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver = createNestedResolver(newAccPath);ResolverTemplate<Field,Fact,Stmt,Method,Incoming>nestedResolver=createNestedResolver(newAccPath); if(!resolvedAccessPath.getExclusions().isEmpty() || !newAccPath.getExclusions().isEmpty())if(!resolvedAccessPath.getExclusions().isEmpty()||!newAccPath.getExclusions().isEmpty()) allResolversInExclHierarchy.put(newAccPath, nestedResolver);allResolversInExclHierarchy.put(newAccPath,nestedResolver); nestedResolvers.put(newAccPath, nestedResolver);nestedResolvers.put(newAccPath,nestedResolver); for(Incoming inc : Lists.newLinkedList(incomingEdges)) {for(Incominginc:Lists.newLinkedList(incomingEdges)){ nestedResolver.addIncoming(inc);nestedResolver.addIncoming(inc); }} return nestedResolver;returnnestedResolver; }} }} return nestedResolvers.get(newAccPath);returnnestedResolvers.get(newAccPath);








src/heros/fieldsens/ReturnSiteResolver.java








View file @ 9ce26e5d






......@@ -20,7 +20,6 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {





















 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;



......@@ -33,22 +32,16 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }










 










 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 protected AccessPath<Field> getAccessPathOf(ReturnEdge<Field, Fact, Stmt, Method> inc) {



......@@ -106,7 +99,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPath());










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(resolvedAccessPath);










 assert delta.accesses.length <= 1;










 retEdge.incResolver.resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {














......@@ -116,7 +109,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 ReturnSiteResolver.this.interest(((ZeroCallEdgeResolver<Field, Fact, Stmt, Method>) resolver).










 copyWithAnalyzer(ReturnSiteResolver.this.analyzer));










 } else {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(resolvedAccessPath)));










 ReturnSiteResolver.this.interest(ReturnSiteResolver.this);










 }










 }



......@@ -135,10 +128,10 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 return;










 










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(inc);










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(resolvedAccessPath.isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest(this);










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 } else if(currAccPath.isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }










 }



......@@ -147,7 +140,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 if(isNullOrCallEdgeResolver(retEdge.resolverAtCaller)) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(resolvedAccessPath)), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));



......












src/heros/fieldsens/ReturnSiteResolver.java








View file @ 9ce26e5d








src/heros/fieldsens/ReturnSiteResolver.java










View file @ 9ce26e5d


9ce26e5d



......@@ -20,7 +20,6 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {





















 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;



......@@ -33,22 +32,16 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }










 










 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 protected AccessPath<Field> getAccessPathOf(ReturnEdge<Field, Fact, Stmt, Method> inc) {



......@@ -106,7 +99,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPath());










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(resolvedAccessPath);










 assert delta.accesses.length <= 1;










 retEdge.incResolver.resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {














......@@ -116,7 +109,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 ReturnSiteResolver.this.interest(((ZeroCallEdgeResolver<Field, Fact, Stmt, Method>) resolver).










 copyWithAnalyzer(ReturnSiteResolver.this.analyzer));










 } else {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(resolvedAccessPath)));










 ReturnSiteResolver.this.interest(ReturnSiteResolver.this);










 }










 }



......@@ -135,10 +128,10 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 return;










 










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(inc);










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(resolvedAccessPath.isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest(this);










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 } else if(currAccPath.isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }










 }



......@@ -147,7 +140,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 if(isNullOrCallEdgeResolver(retEdge.resolverAtCaller)) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(resolvedAccessPath)), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));



......






......@@ -20,7 +20,6 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {





















 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;



......@@ -33,22 +32,16 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }










 










 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 protected AccessPath<Field> getAccessPathOf(ReturnEdge<Field, Fact, Stmt, Method> inc) {



......@@ -106,7 +99,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPath());










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(resolvedAccessPath);










 assert delta.accesses.length <= 1;










 retEdge.incResolver.resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {














......@@ -116,7 +109,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 ReturnSiteResolver.this.interest(((ZeroCallEdgeResolver<Field, Fact, Stmt, Method>) resolver).










 copyWithAnalyzer(ReturnSiteResolver.this.analyzer));










 } else {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(resolvedAccessPath)));










 ReturnSiteResolver.this.interest(ReturnSiteResolver.this);










 }










 }



......@@ -135,10 +128,10 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 return;










 










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(inc);










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(resolvedAccessPath.isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest(this);










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 } else if(currAccPath.isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }










 }



......@@ -147,7 +140,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 if(isNullOrCallEdgeResolver(retEdge.resolverAtCaller)) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(resolvedAccessPath)), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));



......


public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {publicclassReturnSiteResolver<Field,Fact,Stmt,Method>extendsResolverTemplate<Field,Fact,Stmt,Method,ReturnEdge<Field,Fact,Stmt,Method>>{ private Stmt returnSite;privateStmtreturnSite; private AccessPath<Field> resolvedAccPath;privateAccessPath<Field>resolvedAccPath; private boolean propagated = false;privatebooleanpropagated=false; private Fact sourceFact;privateFactsourceFact; private FactMergeHandler<Fact> factMergeHandler;privateFactMergeHandler<Fact>factMergeHandler; private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, privateReturnSiteResolver(FactMergeHandler<Fact>factMergeHandler,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtreturnSite, Fact sourceFact, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {FactsourceFact,Debugger<Field,Fact,Stmt,Method>debugger,AccessPath<Field>resolvedAccPath,ReturnSiteResolver<Field,Fact,Stmt,Method>parent){ super(analyzer, parent, debugger);super(analyzer,parent,debugger); super(analyzer, resolvedAccPath, parent, debugger);super(analyzer,resolvedAccPathresolvedAccPath,, parent,debugger); this.factMergeHandler = factMergeHandler;this.factMergeHandler=factMergeHandler; this.returnSite = returnSite;this.returnSite=returnSite; this.sourceFact = sourceFact;this.sourceFact=sourceFact; this.resolvedAccPath = resolvedAccPath;this.resolvedAccPath=resolvedAccPath; propagated=true;propagated=true; }}  @Override@Override public String toString() {publicStringtoString(){ return "<"+resolvedAccPath+":"+returnSite+" in "+analyzer.getMethod()+">";return"<"+resolvedAccPath+":"+returnSite+" in "+analyzer.getMethod()+">"; }}  @Override@Override public AccessPath<Field> getResolvedAccessPath() {publicAccessPath<Field>getResolvedAccessPath(){ return resolvedAccPath;returnresolvedAccPath; return "<"+resolvedAccessPath+":"+returnSite+" in "+analyzer.getMethod()+">";return"<"+resolvedAccessPath+":"+returnSite+" in "+analyzer.getMethod()+">"; }}  protected AccessPath<Field> getAccessPathOf(ReturnEdge<Field, Fact, Stmt, Method> inc) {protectedAccessPath<Field>getAccessPathOf(ReturnEdge<Field,Fact,Stmt,Method>inc){ resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge); } else {}else{ //resolve via incoming facts resolver//resolve via incoming facts resolver Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPath());Delta<Field>delta=retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPathgetR());() Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(resolvedAccessPath);Delta<Field>delta=retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(resolvedAccessPathr); assert delta.accesses.length <= 1;assertdelta.accesses.length<=1; retEdge.incResolver.resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {retEdge.incResolver.resolve(newDeltaConstraint<Field>(delta),newInterestCallback<Field,Fact,Stmt,Method>(){ ReturnSiteResolver.this.interest(((ZeroCallEdgeResolver<Field, Fact, Stmt, Method>) resolver).ReturnSiteResolver.this.interest(((ZeroCallEdgeResolver<Field,Fact,Stmt,Method>)resolver). copyWithAnalyzer(ReturnSiteResolver.this.analyzer));copyWithAnalyzer(ReturnSiteResolver.this.analyzer)); } else {}else{ incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));incomingEdges.add(retEdge.copyWithIncomingResolver(resolver,retEdge.incAccessPath.getDeltaTo(getResolvedAccessPathgetR())));() incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(resolvedAccessPath)));incomingEdges.add(retEdge.copyWithIncomingResolver(resolver,retEdge.incAccessPath.getDeltaTo(resolvedAccessPathr))); ReturnSiteResolver.this.interest(ReturnSiteResolver.this);ReturnSiteResolver.this.interest(ReturnSiteResolver.this); }} }} return;return;  final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(inc);finalAccessPath<Field>currAccPath=retEdge.callDelta.applyTo(inc); if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {if(getResolvedAccessPathgetR().()isPrefixOf(currAccPath)==PrefixTestResult.GUARANTEED_PREFIX){ if(resolvedAccessPath.isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {if(resolvedAccessPathr.isPrefixOf(currAccPath)==PrefixTestResult.GUARANTEED_PREFIX){ incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));incomingEdges.add(retEdge.copyWithIncomingResolver(null,retEdge.usedAccessPathOfIncResolver)); interest(this);interest(this); } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {}elseif(currAccPath.isPrefixOf(getResolvedAccessPathgetR()).()atLeast(PrefixTestResult.POTENTIAL_PREFIX)){ } else if(currAccPath.isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {}elseif(currAccPath.isPrefixOf(resolvedAccessPathr).atLeast(PrefixTestResult.POTENTIAL_PREFIX)){ resolveViaCallSiteResolver(retEdge, currAccPath);resolveViaCallSiteResolver(retEdge,currAccPath); }} }} if(isNullOrCallEdgeResolver(retEdge.resolverAtCaller)) {if(isNullOrCallEdgeResolver(retEdge.resolverAtCaller)){ canBeResolvedEmpty();canBeResolvedEmpty(); } else {}else{ retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {retEdge.resolverAtCaller.resolve(newDeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPathgetR())),()newInterestCallback<Field,Fact,Stmt,Method>(){ retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(resolvedAccessPath)), new InterestCallback<Field, Fact, Stmt, Method>() {retEdge.resolverAtCaller.resolve(newDeltaConstraint<Field>(currAccPath.getDeltaTo(resolvedAccessPathr)),newInterestCallback<Field,Fact,Stmt,Method>(){ @Override@Override public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {publicvoidinterest(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,Resolver<Field,Fact,Stmt,Method>resolver){//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));








src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ 9ce26e5d






......@@ -42,7 +42,7 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes




















 @Override










 public String toString() {










 return "0-Resolver"+super.toString();










 return "[0-Resolver"+super.toString()+"]";










 }










 










 @Override



......












src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ 9ce26e5d








src/heros/fieldsens/ZeroCallEdgeResolver.java










View file @ 9ce26e5d


9ce26e5d



......@@ -42,7 +42,7 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes




















 @Override










 public String toString() {










 return "0-Resolver"+super.toString();










 return "[0-Resolver"+super.toString()+"]";










 }










 










 @Override



......






......@@ -42,7 +42,7 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes




















 @Override










 public String toString() {










 return "0-Resolver"+super.toString();










 return "[0-Resolver"+super.toString()+"]";










 }










 










 @Override



......


 @Override@Override public String toString() {publicStringtoString(){ return "0-Resolver"+super.toString();return"0-Resolver"+super.toString(); return "[0-Resolver"+super.toString()+"]";return"[0-Resolver"[+super.toString()++"]""]"; }}  @Override@Override








test/heros/fieldsens/ControlFlowJoinResolverTest.java








View file @ 9ce26e5d






......@@ -126,7 +126,7 @@ public class ControlFlowJoinResolverTest {









 @Override










 public boolean matches(Object argument) {










 ControlFlowJoinResolver resolver = (ControlFlowJoinResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 }










 }










}












test/heros/fieldsens/ControlFlowJoinResolverTest.java








View file @ 9ce26e5d








test/heros/fieldsens/ControlFlowJoinResolverTest.java










View file @ 9ce26e5d


9ce26e5d



......@@ -126,7 +126,7 @@ public class ControlFlowJoinResolverTest {









 @Override










 public boolean matches(Object argument) {










 ControlFlowJoinResolver resolver = (ControlFlowJoinResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 }










 }










}






......@@ -126,7 +126,7 @@ public class ControlFlowJoinResolverTest {









 @Override










 public boolean matches(Object argument) {










 ControlFlowJoinResolver resolver = (ControlFlowJoinResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 }










 }










}


 @Override@Override public boolean matches(Object argument) {publicbooleanmatches(Objectargument){ ControlFlowJoinResolver resolver = (ControlFlowJoinResolver) argument;ControlFlowJoinResolverresolver=(ControlFlowJoinResolver)argument; return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getJoinStmt().equals(joinStmt);returnresolver.isInterestGiven()&&resolver.getResolvedAccessPathgetR().()equals(accPath)&&resolver.getJoinStmt().equals(joinStmt); return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getJoinStmt().equals(joinStmt);returnresolver.isInterestGiven()&&resolver.resolvedAccessPathr.equals(accPath)&&resolver.getJoinStmt().equals(joinStmt); }} }}}}








test/heros/fieldsens/FieldSensitiveIFDSSolverTest.java








View file @ 9ce26e5d






......@@ -1193,4 +1193,72 @@ public class FieldSensitiveIFDSSolverTest {









 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void intraproceduralStateExplosionInline0Resolver() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void intraproceduralStateExplosion() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("x"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void nestedResolversShouldFormAGraph() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("f"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b1").succ("b2"),










 normalStmt("b1", flow("1", overwriteField("x"), "1")).succ("c"),










 normalStmt("b2", flow("1", overwriteField("y"), "1")).succ("c"),










 normalStmt("c", flow(2, "1", "1")).succ("d1").succ("d2"),










 normalStmt("d1", flow(2, "1", overwriteField("x"), "1")).succ("e"),










 normalStmt("d2", flow(2, "1", overwriteField("y"), "1")).succ("e"),










 normalStmt("e", flow(3, "1", "1")).succ("f"));










 










 helper.runSolver(false, "m_a");










 }










}












test/heros/fieldsens/FieldSensitiveIFDSSolverTest.java








View file @ 9ce26e5d








test/heros/fieldsens/FieldSensitiveIFDSSolverTest.java










View file @ 9ce26e5d


9ce26e5d



......@@ -1193,4 +1193,72 @@ public class FieldSensitiveIFDSSolverTest {









 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void intraproceduralStateExplosionInline0Resolver() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void intraproceduralStateExplosion() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("x"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void nestedResolversShouldFormAGraph() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("f"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b1").succ("b2"),










 normalStmt("b1", flow("1", overwriteField("x"), "1")).succ("c"),










 normalStmt("b2", flow("1", overwriteField("y"), "1")).succ("c"),










 normalStmt("c", flow(2, "1", "1")).succ("d1").succ("d2"),










 normalStmt("d1", flow(2, "1", overwriteField("x"), "1")).succ("e"),










 normalStmt("d2", flow(2, "1", overwriteField("y"), "1")).succ("e"),










 normalStmt("e", flow(3, "1", "1")).succ("f"));










 










 helper.runSolver(false, "m_a");










 }










}






......@@ -1193,4 +1193,72 @@ public class FieldSensitiveIFDSSolverTest {









 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void intraproceduralStateExplosionInline0Resolver() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void intraproceduralStateExplosion() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("x"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void nestedResolversShouldFormAGraph() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("f"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b1").succ("b2"),










 normalStmt("b1", flow("1", overwriteField("x"), "1")).succ("c"),










 normalStmt("b2", flow("1", overwriteField("y"), "1")).succ("c"),










 normalStmt("c", flow(2, "1", "1")).succ("d1").succ("d2"),










 normalStmt("d1", flow(2, "1", overwriteField("x"), "1")).succ("e"),










 normalStmt("d2", flow(2, "1", overwriteField("y"), "1")).succ("e"),










 normalStmt("e", flow(3, "1", "1")).succ("f"));










 










 helper.runSolver(false, "m_a");










 }










}


  helper.runSolver(false, "a");helper.runSolver(false,"a"); }}  @Test@Test public void intraproceduralStateExplosionInline0Resolver() {publicvoidintraproceduralStateExplosionInline0Resolver(){ helper.method("main",helper.method("main", startPoints("m_a"),startPoints("m_a"), normalStmt("m_a", flow("0", "1")).succ("m_b"),normalStmt("m_a",flow("0","1")).succ("m_b"), callSite("m_b").calls("foo", flow("1", "1")));callSite("m_b").calls("foo",flow("1","1")));  helper.method("foo",helper.method("foo", startPoints("a"),startPoints("a"), normalStmt("a", flow("1", "1")).succ("b"),normalStmt("a",flow("1","1")).succ("b"), normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),normalStmt("b",flow("1","1")).succ("c1").succ("c2"), normalStmt("c1", flow("1", "1")).succ("d"),normalStmt("c1",flow("1","1")).succ("d"), normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),normalStmt("c2",flow("1",overwriteField("f"),"1")).succ("d"), normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),normalStmt("d",flow(2,"1","1")).succ("e1").succ("e2"), normalStmt("e1", flow(2, "1", "1")).succ("f"),normalStmt("e1",flow(2,"1","1")).succ("f"), normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),normalStmt("e2",flow(2,"1",overwriteField("g"),"1")).succ("f"), normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),normalStmt("f",flow(4,"1","1")).succ("g1").succ("g2"), normalStmt("g1", flow(4, "1", "1")).succ("h"),normalStmt("g1",flow(4,"1","1")).succ("h"), normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),normalStmt("g2",flow(4,"1",overwriteField("h"),"1")).succ("h"), normalStmt("h", flow(8, "1", "1")).succ("i"));normalStmt("h",flow(8,"1","1")).succ("i"));  helper.runSolver(false, "m_a");helper.runSolver(false,"m_a"); }}  @Test@Test public void intraproceduralStateExplosion() {publicvoidintraproceduralStateExplosion(){ helper.method("main",helper.method("main", startPoints("m_a"),startPoints("m_a"), normalStmt("m_a", flow("0", "1")).succ("m_b"),normalStmt("m_a",flow("0","1")).succ("m_b"), callSite("m_b").calls("foo", flow("1", prependField("x"), "1")));callSite("m_b").calls("foo",flow("1",prependField("x"),"1")));  helper.method("foo",helper.method("foo", startPoints("a"),startPoints("a"), normalStmt("a", flow("1", "1")).succ("b"),normalStmt("a",flow("1","1")).succ("b"), normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),normalStmt("b",flow("1","1")).succ("c1").succ("c2"), normalStmt("c1", flow("1", "1")).succ("d"),normalStmt("c1",flow("1","1")).succ("d"), normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),normalStmt("c2",flow("1",overwriteField("f"),"1")).succ("d"), normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),normalStmt("d",flow(2,"1","1")).succ("e1").succ("e2"), normalStmt("e1", flow(2, "1", "1")).succ("f"),normalStmt("e1",flow(2,"1","1")).succ("f"), normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),normalStmt("e2",flow(2,"1",overwriteField("g"),"1")).succ("f"), normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),normalStmt("f",flow(4,"1","1")).succ("g1").succ("g2"), normalStmt("g1", flow(4, "1", "1")).succ("h"),normalStmt("g1",flow(4,"1","1")).succ("h"), normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),normalStmt("g2",flow(4,"1",overwriteField("h"),"1")).succ("h"), normalStmt("h", flow(8, "1", "1")).succ("i"));normalStmt("h",flow(8,"1","1")).succ("i"));  helper.runSolver(false, "m_a");helper.runSolver(false,"m_a"); }}  @Test@Test public void nestedResolversShouldFormAGraph() {publicvoidnestedResolversShouldFormAGraph(){ helper.method("main",helper.method("main", startPoints("m_a"),startPoints("m_a"), normalStmt("m_a", flow("0", "1")).succ("m_b"),normalStmt("m_a",flow("0","1")).succ("m_b"), callSite("m_b").calls("foo", flow("1", prependField("f"), "1")));callSite("m_b").calls("foo",flow("1",prependField("f"),"1")));  helper.method("foo",helper.method("foo", startPoints("a"),startPoints("a"), normalStmt("a", flow("1", "1")).succ("b1").succ("b2"),normalStmt("a",flow("1","1")).succ("b1").succ("b2"), normalStmt("b1", flow("1", overwriteField("x"), "1")).succ("c"),normalStmt("b1",flow("1",overwriteField("x"),"1")).succ("c"), normalStmt("b2", flow("1", overwriteField("y"), "1")).succ("c"),normalStmt("b2",flow("1",overwriteField("y"),"1")).succ("c"), normalStmt("c", flow(2, "1", "1")).succ("d1").succ("d2"),normalStmt("c",flow(2,"1","1")).succ("d1").succ("d2"), normalStmt("d1", flow(2, "1", overwriteField("x"), "1")).succ("e"),normalStmt("d1",flow(2,"1",overwriteField("x"),"1")).succ("e"), normalStmt("d2", flow(2, "1", overwriteField("y"), "1")).succ("e"),normalStmt("d2",flow(2,"1",overwriteField("y"),"1")).succ("e"), normalStmt("e", flow(3, "1", "1")).succ("f"));normalStmt("e",flow(3,"1","1")).succ("f"));  helper.runSolver(false, "m_a");helper.runSolver(false,"m_a"); }}}}








test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ 9ce26e5d






......@@ -300,7 +300,7 @@ public class ReturnSiteResolverTest {









 @Override










 public boolean matches(Object argument) {










 ReturnSiteResolver resolver = (ReturnSiteResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getReturnSite().equals(returnSite);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getReturnSite().equals(returnSite);










 }










 }










}












test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ 9ce26e5d








test/heros/fieldsens/ReturnSiteResolverTest.java










View file @ 9ce26e5d


9ce26e5d



......@@ -300,7 +300,7 @@ public class ReturnSiteResolverTest {









 @Override










 public boolean matches(Object argument) {










 ReturnSiteResolver resolver = (ReturnSiteResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getReturnSite().equals(returnSite);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getReturnSite().equals(returnSite);










 }










 }










}






......@@ -300,7 +300,7 @@ public class ReturnSiteResolverTest {









 @Override










 public boolean matches(Object argument) {










 ReturnSiteResolver resolver = (ReturnSiteResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getReturnSite().equals(returnSite);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getReturnSite().equals(returnSite);










 }










 }










}


 @Override@Override public boolean matches(Object argument) {publicbooleanmatches(Objectargument){ ReturnSiteResolver resolver = (ReturnSiteResolver) argument;ReturnSiteResolverresolver=(ReturnSiteResolver)argument; return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getReturnSite().equals(returnSite);returnresolver.isInterestGiven()&&resolver.getResolvedAccessPathgetR().()equals(accPath)&&resolver.getReturnSite().equals(returnSite); return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getReturnSite().equals(returnSite);returnresolver.isInterestGiven()&&resolver.resolvedAccessPathr.equals(accPath)&&resolver.getReturnSite().equals(returnSite); }} }}}}









Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview






















Write



Preview











































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel












Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel




Supports Markdown





0%










Try again


or


attach a new file


.




Attach a file




Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Attach a file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






