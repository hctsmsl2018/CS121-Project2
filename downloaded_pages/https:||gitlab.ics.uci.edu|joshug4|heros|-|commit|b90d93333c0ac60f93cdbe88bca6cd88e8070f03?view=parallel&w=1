



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

b90d9333















Commit
b90d9333


authored
Oct 28, 2013
by


Eric Bodden



Browse files




Merge branch 'develop' of https://github.com/Sable/heros into develop







parents
864f77c6
3cad6e8e













Changes
3




Show whitespace changes

Inline
Side-by-side















src/heros/solver/CountLatch.java








View file @ b90d9333








...@@ -36,6 +36,7 @@ public class CountLatch {
...@@ -36,6 +36,7 @@ public class CountLatch {






 setState(0);





 setState(0);







 }





 }























 @Override







 protected int tryAcquireShared(int acquires) {





 protected int tryAcquireShared(int acquires) {







 return (getState() == 0) ? 1 : -1;





 return (getState() == 0) ? 1 : -1;







 }





 }



...@@ -50,6 +51,7 @@ public class CountLatch {
...@@ -50,6 +51,7 @@ public class CountLatch {






 }





 }







 }





 }























 @Override







 protected boolean tryReleaseShared(int releases) {





 protected boolean tryReleaseShared(int releases) {







 // Decrement count; signal when transition to zero





 // Decrement count; signal when transition to zero







 for (;;) {





 for (;;) {



......















src/heros/solver/CountingThreadPoolExecutor.java








View file @ b90d9333








...@@ -11,15 +11,21 @@
...@@ -11,15 +11,21 @@






package heros.solver;





package heros.solver;





















import java.util.concurrent.BlockingQueue;





import java.util.concurrent.BlockingQueue;









import java.util.concurrent.RejectedExecutionException;







import java.util.concurrent.ThreadPoolExecutor;





import java.util.concurrent.ThreadPoolExecutor;







import java.util.concurrent.TimeUnit;





import java.util.concurrent.TimeUnit;























import org.slf4j.Logger;









import org.slf4j.LoggerFactory;

















/**





/**







 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned





 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned







 * tasks to allow clients to await their completion. 





 * tasks to allow clients to await their completion. 







 */





 */







public class CountingThreadPoolExecutor extends ThreadPoolExecutor {





public class CountingThreadPoolExecutor extends ThreadPoolExecutor {







 





 









 protected static final Logger logger = LoggerFactory.getLogger(IDESolver.class);

















 protected final CountLatch numRunningTasks = new CountLatch(0);





 protected final CountLatch numRunningTasks = new CountLatch(0);







 





 







 protected Throwable exception = null;





 protected Throwable exception = null;



...@@ -31,15 +37,23 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -31,15 +37,23 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 @Override





 @Override







 public void execute(Runnable command) {





 public void execute(Runnable command) {









 try {







 numRunningTasks.increment();





 numRunningTasks.increment();







 super.execute(command);





 super.execute(command);







 }





 }









 catch (RejectedExecutionException ex) {









 // If we were unable to submit the task, we may not count it!









 numRunningTasks.decrement();









 }









 }







 





 







 @Override





 @Override







 protected void afterExecute(Runnable r, Throwable t) {





 protected void afterExecute(Runnable r, Throwable t) {







 numRunningTasks.decrement();





 numRunningTasks.decrement();







 if(t!=null) {





 if(t!=null) {







 exception = t;





 exception = t;









 logger.error("Worker thread execution failed: " + t.getMessage(), t);









 







 shutdownNow();





 shutdownNow();







 numRunningTasks.resetAndInterrupt();





 numRunningTasks.resetAndInterrupt();







 }





 }



......















src/heros/solver/IDESolver.java








View file @ b90d9333








...@@ -259,6 +259,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -259,6 +259,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






     * @param edge the edge to process





     * @param edge the edge to process







     */





     */







 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){





 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){









 // If the executor has been killed, there is little point









 // in submitting new tasks









 if (executor.isTerminating())









 return;







 executor.execute(new PathEdgeProcessingTask(edge));





 executor.execute(new PathEdgeProcessingTask(edge));







 propagationCount++;





 propagationCount++;







 }





 }



...@@ -268,6 +272,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -268,6 +272,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






     * @param vpt





     * @param vpt







     */





     */







 private void scheduleValueProcessing(ValuePropagationTask vpt){





 private void scheduleValueProcessing(ValuePropagationTask vpt){









 // If the executor has been killed, there is little point









 // in submitting new tasks









 if (executor.isTerminating())









 return;







 executor.execute(vpt);





 executor.execute(vpt);







 }





 }







 





 



...@@ -276,6 +284,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -276,6 +284,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






     * @param task





     * @param task







     */





     */







 private void scheduleValueComputationTask(ValueComputationTask task) {





 private void scheduleValueComputationTask(ValueComputationTask task) {









 // If the executor has been killed, there is little point









 // in submitting new tasks









 if (executor.isTerminating())









 return;







 executor.execute(task);





 executor.execute(task);







 }





 }







 





 



...@@ -321,7 +333,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -321,7 +333,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 addIncoming(sP,d3,n,d2);





 addIncoming(sP,d3,n,d2);







 //line 15.2, copy to avoid concurrent modification exceptions by other threads





 //line 15.2, copy to avoid concurrent modification exceptions by other threads







 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));





 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));







 assert !jumpFn.reverseLookup(n, d2).isEmpty();









 }





 }







 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez



...@@ -395,7 +406,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -395,7 +406,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 





 







 //for each of the method's start points, determine incoming calls





 //for each of the method's start points, determine incoming calls







 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);





 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);







 Set<Entry<N,Set<D>>> inc = new HashSet<Map.Entry<N,Set<D>>>();





 Map<N,Set<D>> inc = new HashMap<N,Set<D>>();







 for(N sP: startPointsOf) {





 for(N sP: startPointsOf) {







 //line 21.1 of Naeem/Lhotak/Rodriguez





 //line 21.1 of Naeem/Lhotak/Rodriguez







 





 



...@@ -403,13 +414,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -403,13 +414,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 synchronized (incoming) {





 synchronized (incoming) {







 addEndSummary(sP, d1, n, d2, f);





 addEndSummary(sP, d1, n, d2, f);







 //copy to avoid concurrent modification exceptions by other threads





 //copy to avoid concurrent modification exceptions by other threads







 inc.addAll(incoming(d1, sP));





 for (Entry<N, Set<D>> entry : incoming(d1, sP).entrySet())









 inc.put(entry.getKey(), new HashSet<D>(entry.getValue()));







 }





 }







 }





 }







 





 







 //for each incoming call edge already processed





 //for each incoming call edge already processed







 //(see processCall(..))





 //(see processCall(..))







 for (Entry<N,Set<D>> entry: inc) {





 for (Entry<N,Set<D>> entry: inc.entrySet()) {







 //line 22





 //line 22







 N c = entry.getKey();





 N c = entry.getKey();







 //for each return site





 //for each return site



...@@ -428,6 +440,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -428,6 +440,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);





 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);







 //for each jump function coming into the call, propagate to return site using the composed function





 //for each jump function coming into the call, propagate to return site using the composed function









 synchronized (jumpFn) { // some other thread might change jumpFn on the way







 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {





 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {







 EdgeFunction<V> f3 = valAndFunc.getValue();





 EdgeFunction<V> f3 = valAndFunc.getValue();







 if(!f3.equalTo(allTop)) {





 if(!f3.equalTo(allTop)) {



...@@ -439,6 +452,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -439,6 +452,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 }





 }







 }





 }









 }







 





 







 //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow





 //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow







 //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only





 //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only



...@@ -691,13 +705,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -691,13 +705,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 summaries.put(eP,d2,f);





 summaries.put(eP,d2,f);







 } 





 } 







 





 







 private Set<Entry<N, Set<D>>> incoming(D d1, N sP) {





 private Map<N, Set<D>> incoming(D d1, N sP) {









 synchronized (incoming) {







 Map<N, Set<D>> map = incoming.get(sP, d1);





 Map<N, Set<D>> map = incoming.get(sP, d1);







 if(map==null) return Collections.emptySet();





 if(map==null) return Collections.emptyMap();







 return map.entrySet(); 





 return map;









 }







 }





 }







 





 







 protected void addIncoming(N sP, D d3, N n, D d2) {





 protected void addIncoming(N sP, D d3, N n, D d2) {









 synchronized (incoming) {







 Map<N, Set<D>> summaries = incoming.get(sP, d3);





 Map<N, Set<D>> summaries = incoming.get(sP, d3);







 if(summaries==null) {





 if(summaries==null) {







 summaries = new HashMap<N, Set<D>>();





 summaries = new HashMap<N, Set<D>>();



...@@ -710,6 +727,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -710,6 +727,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 set.add(d2);





 set.add(d2);







 }





 }









 } 







 





 







 /**





 /**







	 * Returns the V-type result for the given value at the given statement.





	 * Returns the V-type result for the given value at the given statement.



......

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

b90d9333















Commit
b90d9333


authored
Oct 28, 2013
by


Eric Bodden



Browse files




Merge branch 'develop' of https://github.com/Sable/heros into develop







parents
864f77c6
3cad6e8e













Changes
3




Show whitespace changes

Inline
Side-by-side















src/heros/solver/CountLatch.java








View file @ b90d9333








...@@ -36,6 +36,7 @@ public class CountLatch {
...@@ -36,6 +36,7 @@ public class CountLatch {






 setState(0);





 setState(0);







 }





 }























 @Override







 protected int tryAcquireShared(int acquires) {





 protected int tryAcquireShared(int acquires) {







 return (getState() == 0) ? 1 : -1;





 return (getState() == 0) ? 1 : -1;







 }





 }



...@@ -50,6 +51,7 @@ public class CountLatch {
...@@ -50,6 +51,7 @@ public class CountLatch {






 }





 }







 }





 }























 @Override







 protected boolean tryReleaseShared(int releases) {





 protected boolean tryReleaseShared(int releases) {







 // Decrement count; signal when transition to zero





 // Decrement count; signal when transition to zero







 for (;;) {





 for (;;) {



......















src/heros/solver/CountingThreadPoolExecutor.java








View file @ b90d9333








...@@ -11,15 +11,21 @@
...@@ -11,15 +11,21 @@






package heros.solver;





package heros.solver;





















import java.util.concurrent.BlockingQueue;





import java.util.concurrent.BlockingQueue;









import java.util.concurrent.RejectedExecutionException;







import java.util.concurrent.ThreadPoolExecutor;





import java.util.concurrent.ThreadPoolExecutor;







import java.util.concurrent.TimeUnit;





import java.util.concurrent.TimeUnit;























import org.slf4j.Logger;









import org.slf4j.LoggerFactory;

















/**





/**







 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned





 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned







 * tasks to allow clients to await their completion. 





 * tasks to allow clients to await their completion. 







 */





 */







public class CountingThreadPoolExecutor extends ThreadPoolExecutor {





public class CountingThreadPoolExecutor extends ThreadPoolExecutor {







 





 









 protected static final Logger logger = LoggerFactory.getLogger(IDESolver.class);

















 protected final CountLatch numRunningTasks = new CountLatch(0);





 protected final CountLatch numRunningTasks = new CountLatch(0);







 





 







 protected Throwable exception = null;





 protected Throwable exception = null;



...@@ -31,15 +37,23 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -31,15 +37,23 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 @Override





 @Override







 public void execute(Runnable command) {





 public void execute(Runnable command) {









 try {







 numRunningTasks.increment();





 numRunningTasks.increment();







 super.execute(command);





 super.execute(command);







 }





 }









 catch (RejectedExecutionException ex) {









 // If we were unable to submit the task, we may not count it!









 numRunningTasks.decrement();









 }









 }







 





 







 @Override





 @Override







 protected void afterExecute(Runnable r, Throwable t) {





 protected void afterExecute(Runnable r, Throwable t) {







 numRunningTasks.decrement();





 numRunningTasks.decrement();







 if(t!=null) {





 if(t!=null) {







 exception = t;





 exception = t;









 logger.error("Worker thread execution failed: " + t.getMessage(), t);









 







 shutdownNow();





 shutdownNow();







 numRunningTasks.resetAndInterrupt();





 numRunningTasks.resetAndInterrupt();







 }





 }



......















src/heros/solver/IDESolver.java








View file @ b90d9333








...@@ -259,6 +259,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -259,6 +259,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






     * @param edge the edge to process





     * @param edge the edge to process







     */





     */







 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){





 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){









 // If the executor has been killed, there is little point









 // in submitting new tasks









 if (executor.isTerminating())









 return;







 executor.execute(new PathEdgeProcessingTask(edge));





 executor.execute(new PathEdgeProcessingTask(edge));







 propagationCount++;





 propagationCount++;







 }





 }



...@@ -268,6 +272,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -268,6 +272,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






     * @param vpt





     * @param vpt







     */





     */







 private void scheduleValueProcessing(ValuePropagationTask vpt){





 private void scheduleValueProcessing(ValuePropagationTask vpt){









 // If the executor has been killed, there is little point









 // in submitting new tasks









 if (executor.isTerminating())









 return;







 executor.execute(vpt);





 executor.execute(vpt);







 }





 }







 





 



...@@ -276,6 +284,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -276,6 +284,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






     * @param task





     * @param task







     */





     */







 private void scheduleValueComputationTask(ValueComputationTask task) {





 private void scheduleValueComputationTask(ValueComputationTask task) {









 // If the executor has been killed, there is little point









 // in submitting new tasks









 if (executor.isTerminating())









 return;







 executor.execute(task);





 executor.execute(task);







 }





 }







 





 



...@@ -321,7 +333,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -321,7 +333,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 addIncoming(sP,d3,n,d2);





 addIncoming(sP,d3,n,d2);







 //line 15.2, copy to avoid concurrent modification exceptions by other threads





 //line 15.2, copy to avoid concurrent modification exceptions by other threads







 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));





 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));







 assert !jumpFn.reverseLookup(n, d2).isEmpty();









 }





 }







 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez



...@@ -395,7 +406,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -395,7 +406,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 





 







 //for each of the method's start points, determine incoming calls





 //for each of the method's start points, determine incoming calls







 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);





 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);







 Set<Entry<N,Set<D>>> inc = new HashSet<Map.Entry<N,Set<D>>>();





 Map<N,Set<D>> inc = new HashMap<N,Set<D>>();







 for(N sP: startPointsOf) {





 for(N sP: startPointsOf) {







 //line 21.1 of Naeem/Lhotak/Rodriguez





 //line 21.1 of Naeem/Lhotak/Rodriguez







 





 



...@@ -403,13 +414,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -403,13 +414,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 synchronized (incoming) {





 synchronized (incoming) {







 addEndSummary(sP, d1, n, d2, f);





 addEndSummary(sP, d1, n, d2, f);







 //copy to avoid concurrent modification exceptions by other threads





 //copy to avoid concurrent modification exceptions by other threads







 inc.addAll(incoming(d1, sP));





 for (Entry<N, Set<D>> entry : incoming(d1, sP).entrySet())









 inc.put(entry.getKey(), new HashSet<D>(entry.getValue()));







 }





 }







 }





 }







 





 







 //for each incoming call edge already processed





 //for each incoming call edge already processed







 //(see processCall(..))





 //(see processCall(..))







 for (Entry<N,Set<D>> entry: inc) {





 for (Entry<N,Set<D>> entry: inc.entrySet()) {







 //line 22





 //line 22







 N c = entry.getKey();





 N c = entry.getKey();







 //for each return site





 //for each return site



...@@ -428,6 +440,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -428,6 +440,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);





 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);







 //for each jump function coming into the call, propagate to return site using the composed function





 //for each jump function coming into the call, propagate to return site using the composed function









 synchronized (jumpFn) { // some other thread might change jumpFn on the way







 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {





 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {







 EdgeFunction<V> f3 = valAndFunc.getValue();





 EdgeFunction<V> f3 = valAndFunc.getValue();







 if(!f3.equalTo(allTop)) {





 if(!f3.equalTo(allTop)) {



...@@ -439,6 +452,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -439,6 +452,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 }





 }







 }





 }









 }







 





 







 //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow





 //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow







 //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only





 //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only



...@@ -691,13 +705,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -691,13 +705,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 summaries.put(eP,d2,f);





 summaries.put(eP,d2,f);







 } 





 } 







 





 







 private Set<Entry<N, Set<D>>> incoming(D d1, N sP) {





 private Map<N, Set<D>> incoming(D d1, N sP) {









 synchronized (incoming) {







 Map<N, Set<D>> map = incoming.get(sP, d1);





 Map<N, Set<D>> map = incoming.get(sP, d1);







 if(map==null) return Collections.emptySet();





 if(map==null) return Collections.emptyMap();







 return map.entrySet(); 





 return map;









 }







 }





 }







 





 







 protected void addIncoming(N sP, D d3, N n, D d2) {





 protected void addIncoming(N sP, D d3, N n, D d2) {









 synchronized (incoming) {







 Map<N, Set<D>> summaries = incoming.get(sP, d3);





 Map<N, Set<D>> summaries = incoming.get(sP, d3);







 if(summaries==null) {





 if(summaries==null) {







 summaries = new HashMap<N, Set<D>>();





 summaries = new HashMap<N, Set<D>>();



...@@ -710,6 +727,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -710,6 +727,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 set.add(d2);





 set.add(d2);







 }





 }









 } 







 





 







 /**





 /**







	 * Returns the V-type result for the given value at the given statement.





	 * Returns the V-type result for the given value at the given statement.



......

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

b90d9333







Open sidebar



Joshua Garcia heros
Commits

b90d9333




Open sidebar

Joshua Garcia heros
Commits

b90d9333


Joshua GarciaherosherosCommits
b90d9333








Commit
b90d9333


authored
Oct 28, 2013
by


Eric Bodden



Browse files




Merge branch 'develop' of https://github.com/Sable/heros into develop







parents
864f77c6
3cad6e8e













Changes
3




Show whitespace changes

Inline
Side-by-side















src/heros/solver/CountLatch.java








View file @ b90d9333








...@@ -36,6 +36,7 @@ public class CountLatch {
...@@ -36,6 +36,7 @@ public class CountLatch {






 setState(0);





 setState(0);







 }





 }























 @Override







 protected int tryAcquireShared(int acquires) {





 protected int tryAcquireShared(int acquires) {







 return (getState() == 0) ? 1 : -1;





 return (getState() == 0) ? 1 : -1;







 }





 }



...@@ -50,6 +51,7 @@ public class CountLatch {
...@@ -50,6 +51,7 @@ public class CountLatch {






 }





 }







 }





 }























 @Override







 protected boolean tryReleaseShared(int releases) {





 protected boolean tryReleaseShared(int releases) {







 // Decrement count; signal when transition to zero





 // Decrement count; signal when transition to zero







 for (;;) {





 for (;;) {



......















src/heros/solver/CountingThreadPoolExecutor.java








View file @ b90d9333








...@@ -11,15 +11,21 @@
...@@ -11,15 +11,21 @@






package heros.solver;





package heros.solver;





















import java.util.concurrent.BlockingQueue;





import java.util.concurrent.BlockingQueue;









import java.util.concurrent.RejectedExecutionException;







import java.util.concurrent.ThreadPoolExecutor;





import java.util.concurrent.ThreadPoolExecutor;







import java.util.concurrent.TimeUnit;





import java.util.concurrent.TimeUnit;























import org.slf4j.Logger;









import org.slf4j.LoggerFactory;

















/**





/**







 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned





 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned







 * tasks to allow clients to await their completion. 





 * tasks to allow clients to await their completion. 







 */





 */







public class CountingThreadPoolExecutor extends ThreadPoolExecutor {





public class CountingThreadPoolExecutor extends ThreadPoolExecutor {







 





 









 protected static final Logger logger = LoggerFactory.getLogger(IDESolver.class);

















 protected final CountLatch numRunningTasks = new CountLatch(0);





 protected final CountLatch numRunningTasks = new CountLatch(0);







 





 







 protected Throwable exception = null;





 protected Throwable exception = null;



...@@ -31,15 +37,23 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -31,15 +37,23 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 @Override





 @Override







 public void execute(Runnable command) {





 public void execute(Runnable command) {









 try {







 numRunningTasks.increment();





 numRunningTasks.increment();







 super.execute(command);





 super.execute(command);







 }





 }









 catch (RejectedExecutionException ex) {









 // If we were unable to submit the task, we may not count it!









 numRunningTasks.decrement();









 }









 }







 





 







 @Override





 @Override







 protected void afterExecute(Runnable r, Throwable t) {





 protected void afterExecute(Runnable r, Throwable t) {







 numRunningTasks.decrement();





 numRunningTasks.decrement();







 if(t!=null) {





 if(t!=null) {







 exception = t;





 exception = t;









 logger.error("Worker thread execution failed: " + t.getMessage(), t);









 







 shutdownNow();





 shutdownNow();







 numRunningTasks.resetAndInterrupt();





 numRunningTasks.resetAndInterrupt();







 }





 }



......















src/heros/solver/IDESolver.java








View file @ b90d9333








...@@ -259,6 +259,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -259,6 +259,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






     * @param edge the edge to process





     * @param edge the edge to process







     */





     */







 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){





 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){









 // If the executor has been killed, there is little point









 // in submitting new tasks









 if (executor.isTerminating())









 return;







 executor.execute(new PathEdgeProcessingTask(edge));





 executor.execute(new PathEdgeProcessingTask(edge));







 propagationCount++;





 propagationCount++;







 }





 }



...@@ -268,6 +272,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -268,6 +272,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






     * @param vpt





     * @param vpt







     */





     */







 private void scheduleValueProcessing(ValuePropagationTask vpt){





 private void scheduleValueProcessing(ValuePropagationTask vpt){









 // If the executor has been killed, there is little point









 // in submitting new tasks









 if (executor.isTerminating())









 return;







 executor.execute(vpt);





 executor.execute(vpt);







 }





 }







 





 



...@@ -276,6 +284,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -276,6 +284,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






     * @param task





     * @param task







     */





     */







 private void scheduleValueComputationTask(ValueComputationTask task) {





 private void scheduleValueComputationTask(ValueComputationTask task) {









 // If the executor has been killed, there is little point









 // in submitting new tasks









 if (executor.isTerminating())









 return;







 executor.execute(task);





 executor.execute(task);







 }





 }







 





 



...@@ -321,7 +333,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -321,7 +333,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 addIncoming(sP,d3,n,d2);





 addIncoming(sP,d3,n,d2);







 //line 15.2, copy to avoid concurrent modification exceptions by other threads





 //line 15.2, copy to avoid concurrent modification exceptions by other threads







 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));





 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));







 assert !jumpFn.reverseLookup(n, d2).isEmpty();









 }





 }







 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez



...@@ -395,7 +406,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -395,7 +406,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 





 







 //for each of the method's start points, determine incoming calls





 //for each of the method's start points, determine incoming calls







 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);





 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);







 Set<Entry<N,Set<D>>> inc = new HashSet<Map.Entry<N,Set<D>>>();





 Map<N,Set<D>> inc = new HashMap<N,Set<D>>();







 for(N sP: startPointsOf) {





 for(N sP: startPointsOf) {







 //line 21.1 of Naeem/Lhotak/Rodriguez





 //line 21.1 of Naeem/Lhotak/Rodriguez







 





 



...@@ -403,13 +414,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -403,13 +414,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 synchronized (incoming) {





 synchronized (incoming) {







 addEndSummary(sP, d1, n, d2, f);





 addEndSummary(sP, d1, n, d2, f);







 //copy to avoid concurrent modification exceptions by other threads





 //copy to avoid concurrent modification exceptions by other threads







 inc.addAll(incoming(d1, sP));





 for (Entry<N, Set<D>> entry : incoming(d1, sP).entrySet())









 inc.put(entry.getKey(), new HashSet<D>(entry.getValue()));







 }





 }







 }





 }







 





 







 //for each incoming call edge already processed





 //for each incoming call edge already processed







 //(see processCall(..))





 //(see processCall(..))







 for (Entry<N,Set<D>> entry: inc) {





 for (Entry<N,Set<D>> entry: inc.entrySet()) {







 //line 22





 //line 22







 N c = entry.getKey();





 N c = entry.getKey();







 //for each return site





 //for each return site



...@@ -428,6 +440,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -428,6 +440,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);





 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);







 //for each jump function coming into the call, propagate to return site using the composed function





 //for each jump function coming into the call, propagate to return site using the composed function









 synchronized (jumpFn) { // some other thread might change jumpFn on the way







 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {





 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {







 EdgeFunction<V> f3 = valAndFunc.getValue();





 EdgeFunction<V> f3 = valAndFunc.getValue();







 if(!f3.equalTo(allTop)) {





 if(!f3.equalTo(allTop)) {



...@@ -439,6 +452,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -439,6 +452,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 }





 }







 }





 }









 }







 





 







 //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow





 //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow







 //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only





 //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only



...@@ -691,13 +705,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -691,13 +705,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 summaries.put(eP,d2,f);





 summaries.put(eP,d2,f);







 } 





 } 







 





 







 private Set<Entry<N, Set<D>>> incoming(D d1, N sP) {





 private Map<N, Set<D>> incoming(D d1, N sP) {









 synchronized (incoming) {







 Map<N, Set<D>> map = incoming.get(sP, d1);





 Map<N, Set<D>> map = incoming.get(sP, d1);







 if(map==null) return Collections.emptySet();





 if(map==null) return Collections.emptyMap();







 return map.entrySet(); 





 return map;









 }







 }





 }







 





 







 protected void addIncoming(N sP, D d3, N n, D d2) {





 protected void addIncoming(N sP, D d3, N n, D d2) {









 synchronized (incoming) {







 Map<N, Set<D>> summaries = incoming.get(sP, d3);





 Map<N, Set<D>> summaries = incoming.get(sP, d3);







 if(summaries==null) {





 if(summaries==null) {







 summaries = new HashMap<N, Set<D>>();





 summaries = new HashMap<N, Set<D>>();



...@@ -710,6 +727,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -710,6 +727,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 set.add(d2);





 set.add(d2);







 }





 }









 } 







 





 







 /**





 /**







	 * Returns the V-type result for the given value at the given statement.





	 * Returns the V-type result for the given value at the given statement.



......

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
b90d9333


authored
Oct 28, 2013
by


Eric Bodden



Browse files




Merge branch 'develop' of https://github.com/Sable/heros into develop







parents
864f77c6
3cad6e8e













Changes
3




Show whitespace changes

Inline
Side-by-side















src/heros/solver/CountLatch.java








View file @ b90d9333








...@@ -36,6 +36,7 @@ public class CountLatch {
...@@ -36,6 +36,7 @@ public class CountLatch {






 setState(0);





 setState(0);







 }





 }























 @Override







 protected int tryAcquireShared(int acquires) {





 protected int tryAcquireShared(int acquires) {







 return (getState() == 0) ? 1 : -1;





 return (getState() == 0) ? 1 : -1;







 }





 }



...@@ -50,6 +51,7 @@ public class CountLatch {
...@@ -50,6 +51,7 @@ public class CountLatch {






 }





 }







 }





 }























 @Override







 protected boolean tryReleaseShared(int releases) {





 protected boolean tryReleaseShared(int releases) {







 // Decrement count; signal when transition to zero





 // Decrement count; signal when transition to zero







 for (;;) {





 for (;;) {



......















src/heros/solver/CountingThreadPoolExecutor.java








View file @ b90d9333








...@@ -11,15 +11,21 @@
...@@ -11,15 +11,21 @@






package heros.solver;





package heros.solver;





















import java.util.concurrent.BlockingQueue;





import java.util.concurrent.BlockingQueue;









import java.util.concurrent.RejectedExecutionException;







import java.util.concurrent.ThreadPoolExecutor;





import java.util.concurrent.ThreadPoolExecutor;







import java.util.concurrent.TimeUnit;





import java.util.concurrent.TimeUnit;























import org.slf4j.Logger;









import org.slf4j.LoggerFactory;

















/**





/**







 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned





 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned







 * tasks to allow clients to await their completion. 





 * tasks to allow clients to await their completion. 







 */





 */







public class CountingThreadPoolExecutor extends ThreadPoolExecutor {





public class CountingThreadPoolExecutor extends ThreadPoolExecutor {







 





 









 protected static final Logger logger = LoggerFactory.getLogger(IDESolver.class);

















 protected final CountLatch numRunningTasks = new CountLatch(0);





 protected final CountLatch numRunningTasks = new CountLatch(0);







 





 







 protected Throwable exception = null;





 protected Throwable exception = null;



...@@ -31,15 +37,23 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -31,15 +37,23 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 @Override





 @Override







 public void execute(Runnable command) {





 public void execute(Runnable command) {









 try {







 numRunningTasks.increment();





 numRunningTasks.increment();







 super.execute(command);





 super.execute(command);







 }





 }









 catch (RejectedExecutionException ex) {









 // If we were unable to submit the task, we may not count it!









 numRunningTasks.decrement();









 }









 }







 





 







 @Override





 @Override







 protected void afterExecute(Runnable r, Throwable t) {





 protected void afterExecute(Runnable r, Throwable t) {







 numRunningTasks.decrement();





 numRunningTasks.decrement();







 if(t!=null) {





 if(t!=null) {







 exception = t;





 exception = t;









 logger.error("Worker thread execution failed: " + t.getMessage(), t);









 







 shutdownNow();





 shutdownNow();







 numRunningTasks.resetAndInterrupt();





 numRunningTasks.resetAndInterrupt();







 }





 }



......















src/heros/solver/IDESolver.java








View file @ b90d9333








...@@ -259,6 +259,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -259,6 +259,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






     * @param edge the edge to process





     * @param edge the edge to process







     */





     */







 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){





 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){









 // If the executor has been killed, there is little point









 // in submitting new tasks









 if (executor.isTerminating())









 return;







 executor.execute(new PathEdgeProcessingTask(edge));





 executor.execute(new PathEdgeProcessingTask(edge));







 propagationCount++;





 propagationCount++;







 }





 }



...@@ -268,6 +272,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -268,6 +272,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






     * @param vpt





     * @param vpt







     */





     */







 private void scheduleValueProcessing(ValuePropagationTask vpt){





 private void scheduleValueProcessing(ValuePropagationTask vpt){









 // If the executor has been killed, there is little point









 // in submitting new tasks









 if (executor.isTerminating())









 return;







 executor.execute(vpt);





 executor.execute(vpt);







 }





 }







 





 



...@@ -276,6 +284,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -276,6 +284,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






     * @param task





     * @param task







     */





     */







 private void scheduleValueComputationTask(ValueComputationTask task) {





 private void scheduleValueComputationTask(ValueComputationTask task) {









 // If the executor has been killed, there is little point









 // in submitting new tasks









 if (executor.isTerminating())









 return;







 executor.execute(task);





 executor.execute(task);







 }





 }







 





 



...@@ -321,7 +333,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -321,7 +333,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 addIncoming(sP,d3,n,d2);





 addIncoming(sP,d3,n,d2);







 //line 15.2, copy to avoid concurrent modification exceptions by other threads





 //line 15.2, copy to avoid concurrent modification exceptions by other threads







 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));





 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));







 assert !jumpFn.reverseLookup(n, d2).isEmpty();









 }





 }







 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez



...@@ -395,7 +406,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -395,7 +406,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 





 







 //for each of the method's start points, determine incoming calls





 //for each of the method's start points, determine incoming calls







 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);





 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);







 Set<Entry<N,Set<D>>> inc = new HashSet<Map.Entry<N,Set<D>>>();





 Map<N,Set<D>> inc = new HashMap<N,Set<D>>();







 for(N sP: startPointsOf) {





 for(N sP: startPointsOf) {







 //line 21.1 of Naeem/Lhotak/Rodriguez





 //line 21.1 of Naeem/Lhotak/Rodriguez







 





 



...@@ -403,13 +414,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -403,13 +414,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 synchronized (incoming) {





 synchronized (incoming) {







 addEndSummary(sP, d1, n, d2, f);





 addEndSummary(sP, d1, n, d2, f);







 //copy to avoid concurrent modification exceptions by other threads





 //copy to avoid concurrent modification exceptions by other threads







 inc.addAll(incoming(d1, sP));





 for (Entry<N, Set<D>> entry : incoming(d1, sP).entrySet())









 inc.put(entry.getKey(), new HashSet<D>(entry.getValue()));







 }





 }







 }





 }







 





 







 //for each incoming call edge already processed





 //for each incoming call edge already processed







 //(see processCall(..))





 //(see processCall(..))







 for (Entry<N,Set<D>> entry: inc) {





 for (Entry<N,Set<D>> entry: inc.entrySet()) {







 //line 22





 //line 22







 N c = entry.getKey();





 N c = entry.getKey();







 //for each return site





 //for each return site



...@@ -428,6 +440,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -428,6 +440,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);





 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);







 //for each jump function coming into the call, propagate to return site using the composed function





 //for each jump function coming into the call, propagate to return site using the composed function









 synchronized (jumpFn) { // some other thread might change jumpFn on the way







 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {





 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {







 EdgeFunction<V> f3 = valAndFunc.getValue();





 EdgeFunction<V> f3 = valAndFunc.getValue();







 if(!f3.equalTo(allTop)) {





 if(!f3.equalTo(allTop)) {



...@@ -439,6 +452,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -439,6 +452,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 }





 }







 }





 }









 }







 





 







 //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow





 //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow







 //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only





 //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only



...@@ -691,13 +705,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -691,13 +705,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 summaries.put(eP,d2,f);





 summaries.put(eP,d2,f);







 } 





 } 







 





 







 private Set<Entry<N, Set<D>>> incoming(D d1, N sP) {





 private Map<N, Set<D>> incoming(D d1, N sP) {









 synchronized (incoming) {







 Map<N, Set<D>> map = incoming.get(sP, d1);





 Map<N, Set<D>> map = incoming.get(sP, d1);







 if(map==null) return Collections.emptySet();





 if(map==null) return Collections.emptyMap();







 return map.entrySet(); 





 return map;









 }







 }





 }







 





 







 protected void addIncoming(N sP, D d3, N n, D d2) {





 protected void addIncoming(N sP, D d3, N n, D d2) {









 synchronized (incoming) {







 Map<N, Set<D>> summaries = incoming.get(sP, d3);





 Map<N, Set<D>> summaries = incoming.get(sP, d3);







 if(summaries==null) {





 if(summaries==null) {







 summaries = new HashMap<N, Set<D>>();





 summaries = new HashMap<N, Set<D>>();



...@@ -710,6 +727,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -710,6 +727,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 set.add(d2);





 set.add(d2);







 }





 }









 } 







 





 







 /**





 /**







	 * Returns the V-type result for the given value at the given statement.





	 * Returns the V-type result for the given value at the given statement.



......

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
b90d9333


authored
Oct 28, 2013
by


Eric Bodden



Browse files



Commit
b90d9333


authored
Oct 28, 2013
by


Eric Bodden

b90d9333authoredbyEric Bodden

Merge branch 'develop' of https://github.com/Sable/heros into develop






parents
864f77c6
3cad6e8e
















parents
864f77c6
3cad6e8e





parents












Changes
3
3


Show whitespace changes

Inline
Side-by-side






Show whitespace changes

Inline
Side-by-side




Show whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/solver/CountLatch.java








View file @ b90d9333








...@@ -36,6 +36,7 @@ public class CountLatch {
...@@ -36,6 +36,7 @@ public class CountLatch {






 setState(0);





 setState(0);







 }





 }























 @Override







 protected int tryAcquireShared(int acquires) {





 protected int tryAcquireShared(int acquires) {







 return (getState() == 0) ? 1 : -1;





 return (getState() == 0) ? 1 : -1;







 }





 }



...@@ -50,6 +51,7 @@ public class CountLatch {
...@@ -50,6 +51,7 @@ public class CountLatch {






 }





 }







 }





 }























 @Override







 protected boolean tryReleaseShared(int releases) {





 protected boolean tryReleaseShared(int releases) {







 // Decrement count; signal when transition to zero





 // Decrement count; signal when transition to zero







 for (;;) {





 for (;;) {



......















src/heros/solver/CountingThreadPoolExecutor.java








View file @ b90d9333








...@@ -11,15 +11,21 @@
...@@ -11,15 +11,21 @@






package heros.solver;





package heros.solver;





















import java.util.concurrent.BlockingQueue;





import java.util.concurrent.BlockingQueue;









import java.util.concurrent.RejectedExecutionException;







import java.util.concurrent.ThreadPoolExecutor;





import java.util.concurrent.ThreadPoolExecutor;







import java.util.concurrent.TimeUnit;





import java.util.concurrent.TimeUnit;























import org.slf4j.Logger;









import org.slf4j.LoggerFactory;

















/**





/**







 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned





 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned







 * tasks to allow clients to await their completion. 





 * tasks to allow clients to await their completion. 







 */





 */







public class CountingThreadPoolExecutor extends ThreadPoolExecutor {





public class CountingThreadPoolExecutor extends ThreadPoolExecutor {







 





 









 protected static final Logger logger = LoggerFactory.getLogger(IDESolver.class);

















 protected final CountLatch numRunningTasks = new CountLatch(0);





 protected final CountLatch numRunningTasks = new CountLatch(0);







 





 







 protected Throwable exception = null;





 protected Throwable exception = null;



...@@ -31,15 +37,23 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -31,15 +37,23 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 @Override





 @Override







 public void execute(Runnable command) {





 public void execute(Runnable command) {









 try {







 numRunningTasks.increment();





 numRunningTasks.increment();







 super.execute(command);





 super.execute(command);







 }





 }









 catch (RejectedExecutionException ex) {









 // If we were unable to submit the task, we may not count it!









 numRunningTasks.decrement();









 }









 }







 





 







 @Override





 @Override







 protected void afterExecute(Runnable r, Throwable t) {





 protected void afterExecute(Runnable r, Throwable t) {







 numRunningTasks.decrement();





 numRunningTasks.decrement();







 if(t!=null) {





 if(t!=null) {







 exception = t;





 exception = t;









 logger.error("Worker thread execution failed: " + t.getMessage(), t);









 







 shutdownNow();





 shutdownNow();







 numRunningTasks.resetAndInterrupt();





 numRunningTasks.resetAndInterrupt();







 }





 }



......















src/heros/solver/IDESolver.java








View file @ b90d9333








...@@ -259,6 +259,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -259,6 +259,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






     * @param edge the edge to process





     * @param edge the edge to process







     */





     */







 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){





 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){









 // If the executor has been killed, there is little point









 // in submitting new tasks









 if (executor.isTerminating())









 return;







 executor.execute(new PathEdgeProcessingTask(edge));





 executor.execute(new PathEdgeProcessingTask(edge));







 propagationCount++;





 propagationCount++;







 }





 }



...@@ -268,6 +272,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -268,6 +272,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






     * @param vpt





     * @param vpt







     */





     */







 private void scheduleValueProcessing(ValuePropagationTask vpt){





 private void scheduleValueProcessing(ValuePropagationTask vpt){









 // If the executor has been killed, there is little point









 // in submitting new tasks









 if (executor.isTerminating())









 return;







 executor.execute(vpt);





 executor.execute(vpt);







 }





 }







 





 



...@@ -276,6 +284,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -276,6 +284,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






     * @param task





     * @param task







     */





     */







 private void scheduleValueComputationTask(ValueComputationTask task) {





 private void scheduleValueComputationTask(ValueComputationTask task) {









 // If the executor has been killed, there is little point









 // in submitting new tasks









 if (executor.isTerminating())









 return;







 executor.execute(task);





 executor.execute(task);







 }





 }







 





 



...@@ -321,7 +333,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -321,7 +333,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 addIncoming(sP,d3,n,d2);





 addIncoming(sP,d3,n,d2);







 //line 15.2, copy to avoid concurrent modification exceptions by other threads





 //line 15.2, copy to avoid concurrent modification exceptions by other threads







 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));





 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));







 assert !jumpFn.reverseLookup(n, d2).isEmpty();









 }





 }







 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez



...@@ -395,7 +406,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -395,7 +406,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 





 







 //for each of the method's start points, determine incoming calls





 //for each of the method's start points, determine incoming calls







 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);





 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);







 Set<Entry<N,Set<D>>> inc = new HashSet<Map.Entry<N,Set<D>>>();





 Map<N,Set<D>> inc = new HashMap<N,Set<D>>();







 for(N sP: startPointsOf) {





 for(N sP: startPointsOf) {







 //line 21.1 of Naeem/Lhotak/Rodriguez





 //line 21.1 of Naeem/Lhotak/Rodriguez







 





 



...@@ -403,13 +414,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -403,13 +414,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 synchronized (incoming) {





 synchronized (incoming) {







 addEndSummary(sP, d1, n, d2, f);





 addEndSummary(sP, d1, n, d2, f);







 //copy to avoid concurrent modification exceptions by other threads





 //copy to avoid concurrent modification exceptions by other threads







 inc.addAll(incoming(d1, sP));





 for (Entry<N, Set<D>> entry : incoming(d1, sP).entrySet())









 inc.put(entry.getKey(), new HashSet<D>(entry.getValue()));







 }





 }







 }





 }







 





 







 //for each incoming call edge already processed





 //for each incoming call edge already processed







 //(see processCall(..))





 //(see processCall(..))







 for (Entry<N,Set<D>> entry: inc) {





 for (Entry<N,Set<D>> entry: inc.entrySet()) {







 //line 22





 //line 22







 N c = entry.getKey();





 N c = entry.getKey();







 //for each return site





 //for each return site



...@@ -428,6 +440,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -428,6 +440,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);





 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);







 //for each jump function coming into the call, propagate to return site using the composed function





 //for each jump function coming into the call, propagate to return site using the composed function









 synchronized (jumpFn) { // some other thread might change jumpFn on the way







 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {





 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {







 EdgeFunction<V> f3 = valAndFunc.getValue();





 EdgeFunction<V> f3 = valAndFunc.getValue();







 if(!f3.equalTo(allTop)) {





 if(!f3.equalTo(allTop)) {



...@@ -439,6 +452,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -439,6 +452,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 }





 }







 }





 }









 }







 





 







 //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow





 //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow







 //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only





 //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only



...@@ -691,13 +705,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -691,13 +705,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 summaries.put(eP,d2,f);





 summaries.put(eP,d2,f);







 } 





 } 







 





 







 private Set<Entry<N, Set<D>>> incoming(D d1, N sP) {





 private Map<N, Set<D>> incoming(D d1, N sP) {









 synchronized (incoming) {







 Map<N, Set<D>> map = incoming.get(sP, d1);





 Map<N, Set<D>> map = incoming.get(sP, d1);







 if(map==null) return Collections.emptySet();





 if(map==null) return Collections.emptyMap();







 return map.entrySet(); 





 return map;









 }







 }





 }







 





 







 protected void addIncoming(N sP, D d3, N n, D d2) {





 protected void addIncoming(N sP, D d3, N n, D d2) {









 synchronized (incoming) {







 Map<N, Set<D>> summaries = incoming.get(sP, d3);





 Map<N, Set<D>> summaries = incoming.get(sP, d3);







 if(summaries==null) {





 if(summaries==null) {







 summaries = new HashMap<N, Set<D>>();





 summaries = new HashMap<N, Set<D>>();



...@@ -710,6 +727,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -710,6 +727,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 set.add(d2);





 set.add(d2);







 }





 }









 } 







 





 







 /**





 /**







	 * Returns the V-type result for the given value at the given statement.





	 * Returns the V-type result for the given value at the given statement.



......















src/heros/solver/CountLatch.java








View file @ b90d9333








...@@ -36,6 +36,7 @@ public class CountLatch {
...@@ -36,6 +36,7 @@ public class CountLatch {






 setState(0);





 setState(0);







 }





 }























 @Override







 protected int tryAcquireShared(int acquires) {





 protected int tryAcquireShared(int acquires) {







 return (getState() == 0) ? 1 : -1;





 return (getState() == 0) ? 1 : -1;







 }





 }



...@@ -50,6 +51,7 @@ public class CountLatch {
...@@ -50,6 +51,7 @@ public class CountLatch {






 }





 }







 }





 }























 @Override







 protected boolean tryReleaseShared(int releases) {





 protected boolean tryReleaseShared(int releases) {







 // Decrement count; signal when transition to zero





 // Decrement count; signal when transition to zero







 for (;;) {





 for (;;) {



......













src/heros/solver/CountLatch.java








View file @ b90d9333








src/heros/solver/CountLatch.java










View file @ b90d9333


b90d9333





...@@ -36,6 +36,7 @@ public class CountLatch {
...@@ -36,6 +36,7 @@ public class CountLatch {






 setState(0);





 setState(0);







 }





 }























 @Override







 protected int tryAcquireShared(int acquires) {





 protected int tryAcquireShared(int acquires) {







 return (getState() == 0) ? 1 : -1;





 return (getState() == 0) ? 1 : -1;







 }





 }



...@@ -50,6 +51,7 @@ public class CountLatch {
...@@ -50,6 +51,7 @@ public class CountLatch {






 }





 }







 }





 }























 @Override







 protected boolean tryReleaseShared(int releases) {





 protected boolean tryReleaseShared(int releases) {







 // Decrement count; signal when transition to zero





 // Decrement count; signal when transition to zero







 for (;;) {





 for (;;) {



......









...@@ -36,6 +36,7 @@ public class CountLatch {
...@@ -36,6 +36,7 @@ public class CountLatch {






 setState(0);





 setState(0);







 }





 }























 @Override







 protected int tryAcquireShared(int acquires) {





 protected int tryAcquireShared(int acquires) {







 return (getState() == 0) ? 1 : -1;





 return (getState() == 0) ? 1 : -1;







 }





 }



...@@ -50,6 +51,7 @@ public class CountLatch {
...@@ -50,6 +51,7 @@ public class CountLatch {






 }





 }







 }





 }























 @Override







 protected boolean tryReleaseShared(int releases) {





 protected boolean tryReleaseShared(int releases) {







 // Decrement count; signal when transition to zero





 // Decrement count; signal when transition to zero







 for (;;) {





 for (;;) {



......






...@@ -36,6 +36,7 @@ public class CountLatch {
...@@ -36,6 +36,7 @@ public class CountLatch {






 setState(0);





 setState(0);







 }





 }























 @Override







 protected int tryAcquireShared(int acquires) {





 protected int tryAcquireShared(int acquires) {







 return (getState() == 0) ? 1 : -1;





 return (getState() == 0) ? 1 : -1;







 }





 }



...@@ -50,6 +51,7 @@ public class CountLatch {
...@@ -50,6 +51,7 @@ public class CountLatch {






 }





 }







 }





 }























 @Override







 protected boolean tryReleaseShared(int releases) {





 protected boolean tryReleaseShared(int releases) {







 // Decrement count; signal when transition to zero





 // Decrement count; signal when transition to zero







 for (;;) {





 for (;;) {



......


 setState(0);setState(0); setState(0);setState(0); }} }} @Override@Override protected int tryAcquireShared(int acquires) {protectedinttryAcquireShared(intacquires){ protected int tryAcquireShared(int acquires) {protectedinttryAcquireShared(intacquires){ return (getState() == 0) ? 1 : -1;return(getState()==0)?1:-1; return (getState() == 0) ? 1 : -1;return(getState()==0)?1:-1; }} }} }} }} }} }} @Override@Override protected boolean tryReleaseShared(int releases) {protectedbooleantryReleaseShared(intreleases){ protected boolean tryReleaseShared(int releases) {protectedbooleantryReleaseShared(intreleases){ // Decrement count; signal when transition to zero// Decrement count; signal when transition to zero // Decrement count; signal when transition to zero// Decrement count; signal when transition to zero for (;;) {for(;;){ for (;;) {for(;;){








src/heros/solver/CountingThreadPoolExecutor.java








View file @ b90d9333








...@@ -11,15 +11,21 @@
...@@ -11,15 +11,21 @@






package heros.solver;





package heros.solver;





















import java.util.concurrent.BlockingQueue;





import java.util.concurrent.BlockingQueue;









import java.util.concurrent.RejectedExecutionException;







import java.util.concurrent.ThreadPoolExecutor;





import java.util.concurrent.ThreadPoolExecutor;







import java.util.concurrent.TimeUnit;





import java.util.concurrent.TimeUnit;























import org.slf4j.Logger;









import org.slf4j.LoggerFactory;

















/**





/**







 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned





 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned







 * tasks to allow clients to await their completion. 





 * tasks to allow clients to await their completion. 







 */





 */







public class CountingThreadPoolExecutor extends ThreadPoolExecutor {





public class CountingThreadPoolExecutor extends ThreadPoolExecutor {







 





 









 protected static final Logger logger = LoggerFactory.getLogger(IDESolver.class);

















 protected final CountLatch numRunningTasks = new CountLatch(0);





 protected final CountLatch numRunningTasks = new CountLatch(0);







 





 







 protected Throwable exception = null;





 protected Throwable exception = null;



...@@ -31,15 +37,23 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -31,15 +37,23 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 @Override





 @Override







 public void execute(Runnable command) {





 public void execute(Runnable command) {









 try {







 numRunningTasks.increment();





 numRunningTasks.increment();







 super.execute(command);





 super.execute(command);







 }





 }









 catch (RejectedExecutionException ex) {









 // If we were unable to submit the task, we may not count it!









 numRunningTasks.decrement();









 }









 }







 





 







 @Override





 @Override







 protected void afterExecute(Runnable r, Throwable t) {





 protected void afterExecute(Runnable r, Throwable t) {







 numRunningTasks.decrement();





 numRunningTasks.decrement();







 if(t!=null) {





 if(t!=null) {







 exception = t;





 exception = t;









 logger.error("Worker thread execution failed: " + t.getMessage(), t);









 







 shutdownNow();





 shutdownNow();







 numRunningTasks.resetAndInterrupt();





 numRunningTasks.resetAndInterrupt();







 }





 }



......













src/heros/solver/CountingThreadPoolExecutor.java








View file @ b90d9333








src/heros/solver/CountingThreadPoolExecutor.java










View file @ b90d9333


b90d9333





...@@ -11,15 +11,21 @@
...@@ -11,15 +11,21 @@






package heros.solver;





package heros.solver;





















import java.util.concurrent.BlockingQueue;





import java.util.concurrent.BlockingQueue;









import java.util.concurrent.RejectedExecutionException;







import java.util.concurrent.ThreadPoolExecutor;





import java.util.concurrent.ThreadPoolExecutor;







import java.util.concurrent.TimeUnit;





import java.util.concurrent.TimeUnit;























import org.slf4j.Logger;









import org.slf4j.LoggerFactory;

















/**





/**







 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned





 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned







 * tasks to allow clients to await their completion. 





 * tasks to allow clients to await their completion. 







 */





 */







public class CountingThreadPoolExecutor extends ThreadPoolExecutor {





public class CountingThreadPoolExecutor extends ThreadPoolExecutor {







 





 









 protected static final Logger logger = LoggerFactory.getLogger(IDESolver.class);

















 protected final CountLatch numRunningTasks = new CountLatch(0);





 protected final CountLatch numRunningTasks = new CountLatch(0);







 





 







 protected Throwable exception = null;





 protected Throwable exception = null;



...@@ -31,15 +37,23 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -31,15 +37,23 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 @Override





 @Override







 public void execute(Runnable command) {





 public void execute(Runnable command) {









 try {







 numRunningTasks.increment();





 numRunningTasks.increment();







 super.execute(command);





 super.execute(command);







 }





 }









 catch (RejectedExecutionException ex) {









 // If we were unable to submit the task, we may not count it!









 numRunningTasks.decrement();









 }









 }







 





 







 @Override





 @Override







 protected void afterExecute(Runnable r, Throwable t) {





 protected void afterExecute(Runnable r, Throwable t) {







 numRunningTasks.decrement();





 numRunningTasks.decrement();







 if(t!=null) {





 if(t!=null) {







 exception = t;





 exception = t;









 logger.error("Worker thread execution failed: " + t.getMessage(), t);









 







 shutdownNow();





 shutdownNow();







 numRunningTasks.resetAndInterrupt();





 numRunningTasks.resetAndInterrupt();







 }





 }



......









...@@ -11,15 +11,21 @@
...@@ -11,15 +11,21 @@






package heros.solver;





package heros.solver;





















import java.util.concurrent.BlockingQueue;





import java.util.concurrent.BlockingQueue;









import java.util.concurrent.RejectedExecutionException;







import java.util.concurrent.ThreadPoolExecutor;





import java.util.concurrent.ThreadPoolExecutor;







import java.util.concurrent.TimeUnit;





import java.util.concurrent.TimeUnit;























import org.slf4j.Logger;









import org.slf4j.LoggerFactory;

















/**





/**







 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned





 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned







 * tasks to allow clients to await their completion. 





 * tasks to allow clients to await their completion. 







 */





 */







public class CountingThreadPoolExecutor extends ThreadPoolExecutor {





public class CountingThreadPoolExecutor extends ThreadPoolExecutor {







 





 









 protected static final Logger logger = LoggerFactory.getLogger(IDESolver.class);

















 protected final CountLatch numRunningTasks = new CountLatch(0);





 protected final CountLatch numRunningTasks = new CountLatch(0);







 





 







 protected Throwable exception = null;





 protected Throwable exception = null;



...@@ -31,15 +37,23 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -31,15 +37,23 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 @Override





 @Override







 public void execute(Runnable command) {





 public void execute(Runnable command) {









 try {







 numRunningTasks.increment();





 numRunningTasks.increment();







 super.execute(command);





 super.execute(command);







 }





 }









 catch (RejectedExecutionException ex) {









 // If we were unable to submit the task, we may not count it!









 numRunningTasks.decrement();









 }









 }







 





 







 @Override





 @Override







 protected void afterExecute(Runnable r, Throwable t) {





 protected void afterExecute(Runnable r, Throwable t) {







 numRunningTasks.decrement();





 numRunningTasks.decrement();







 if(t!=null) {





 if(t!=null) {







 exception = t;





 exception = t;









 logger.error("Worker thread execution failed: " + t.getMessage(), t);









 







 shutdownNow();





 shutdownNow();







 numRunningTasks.resetAndInterrupt();





 numRunningTasks.resetAndInterrupt();







 }





 }



......






...@@ -11,15 +11,21 @@
...@@ -11,15 +11,21 @@






package heros.solver;





package heros.solver;





















import java.util.concurrent.BlockingQueue;





import java.util.concurrent.BlockingQueue;









import java.util.concurrent.RejectedExecutionException;







import java.util.concurrent.ThreadPoolExecutor;





import java.util.concurrent.ThreadPoolExecutor;







import java.util.concurrent.TimeUnit;





import java.util.concurrent.TimeUnit;























import org.slf4j.Logger;









import org.slf4j.LoggerFactory;

















/**





/**







 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned





 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned







 * tasks to allow clients to await their completion. 





 * tasks to allow clients to await their completion. 







 */





 */







public class CountingThreadPoolExecutor extends ThreadPoolExecutor {





public class CountingThreadPoolExecutor extends ThreadPoolExecutor {







 





 









 protected static final Logger logger = LoggerFactory.getLogger(IDESolver.class);

















 protected final CountLatch numRunningTasks = new CountLatch(0);





 protected final CountLatch numRunningTasks = new CountLatch(0);







 





 







 protected Throwable exception = null;





 protected Throwable exception = null;



...@@ -31,15 +37,23 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -31,15 +37,23 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 @Override





 @Override







 public void execute(Runnable command) {





 public void execute(Runnable command) {









 try {







 numRunningTasks.increment();





 numRunningTasks.increment();







 super.execute(command);





 super.execute(command);







 }





 }









 catch (RejectedExecutionException ex) {









 // If we were unable to submit the task, we may not count it!









 numRunningTasks.decrement();









 }









 }







 





 







 @Override





 @Override







 protected void afterExecute(Runnable r, Throwable t) {





 protected void afterExecute(Runnable r, Throwable t) {







 numRunningTasks.decrement();





 numRunningTasks.decrement();







 if(t!=null) {





 if(t!=null) {







 exception = t;





 exception = t;









 logger.error("Worker thread execution failed: " + t.getMessage(), t);









 







 shutdownNow();





 shutdownNow();







 numRunningTasks.resetAndInterrupt();





 numRunningTasks.resetAndInterrupt();







 }





 }



......


package heros.solver;packageheros.solver;package heros.solver;packageheros.solver;import java.util.concurrent.BlockingQueue;importjava.util.concurrent.BlockingQueue;import java.util.concurrent.BlockingQueue;importjava.util.concurrent.BlockingQueue;import java.util.concurrent.RejectedExecutionException;importjava.util.concurrent.RejectedExecutionException;import java.util.concurrent.ThreadPoolExecutor;importjava.util.concurrent.ThreadPoolExecutor;import java.util.concurrent.ThreadPoolExecutor;importjava.util.concurrent.ThreadPoolExecutor;import java.util.concurrent.TimeUnit;importjava.util.concurrent.TimeUnit;import java.util.concurrent.TimeUnit;importjava.util.concurrent.TimeUnit;import org.slf4j.Logger;importorg.slf4j.Logger;import org.slf4j.LoggerFactory;importorg.slf4j.LoggerFactory;/**/**/**/** * A {@link ThreadPoolExecutor} which keeps track of the number of spawned * A {@link ThreadPoolExecutor} which keeps track of the number of spawned * A {@link ThreadPoolExecutor} which keeps track of the number of spawned * A {@link ThreadPoolExecutor} which keeps track of the number of spawned * tasks to allow clients to await their completion.  * tasks to allow clients to await their completion.  * tasks to allow clients to await their completion.  * tasks to allow clients to await their completion.  */ */ */ */public class CountingThreadPoolExecutor extends ThreadPoolExecutor {publicclassCountingThreadPoolExecutorextendsThreadPoolExecutor{public class CountingThreadPoolExecutor extends ThreadPoolExecutor {publicclassCountingThreadPoolExecutorextendsThreadPoolExecutor{   protected static final Logger logger = LoggerFactory.getLogger(IDESolver.class);protectedstaticfinalLoggerlogger=LoggerFactory.getLogger(IDESolver.class); protected final CountLatch numRunningTasks = new CountLatch(0);protectedfinalCountLatchnumRunningTasks=newCountLatch(0); protected final CountLatch numRunningTasks = new CountLatch(0);protectedfinalCountLatchnumRunningTasks=newCountLatch(0);   protected Throwable exception = null;protectedThrowableexception=null; protected Throwable exception = null;protectedThrowableexception=null; @Override@Override @Override@Override public void execute(Runnable command) {publicvoidexecute(Runnablecommand){ public void execute(Runnable command) {publicvoidexecute(Runnablecommand){ try {try{ numRunningTasks.increment();numRunningTasks.increment(); numRunningTasks.increment();numRunningTasks.increment(); super.execute(command);super.execute(command); super.execute(command);super.execute(command); }} }} catch (RejectedExecutionException ex) {catch(RejectedExecutionExceptionex){ // If we were unable to submit the task, we may not count it!// If we were unable to submit the task, we may not count it! numRunningTasks.decrement();numRunningTasks.decrement(); }} }}   @Override@Override @Override@Override protected void afterExecute(Runnable r, Throwable t) {protectedvoidafterExecute(Runnabler,Throwablet){ protected void afterExecute(Runnable r, Throwable t) {protectedvoidafterExecute(Runnabler,Throwablet){ numRunningTasks.decrement();numRunningTasks.decrement(); numRunningTasks.decrement();numRunningTasks.decrement(); if(t!=null) {if(t!=null){ if(t!=null) {if(t!=null){ exception = t;exception=t; exception = t;exception=t; logger.error("Worker thread execution failed: " + t.getMessage(), t);logger.error("Worker thread execution failed: "+t.getMessage(),t);  shutdownNow();shutdownNow(); shutdownNow();shutdownNow(); numRunningTasks.resetAndInterrupt();numRunningTasks.resetAndInterrupt(); numRunningTasks.resetAndInterrupt();numRunningTasks.resetAndInterrupt(); }} }}








src/heros/solver/IDESolver.java








View file @ b90d9333








...@@ -259,6 +259,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -259,6 +259,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






     * @param edge the edge to process





     * @param edge the edge to process







     */





     */







 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){





 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){









 // If the executor has been killed, there is little point









 // in submitting new tasks









 if (executor.isTerminating())









 return;







 executor.execute(new PathEdgeProcessingTask(edge));





 executor.execute(new PathEdgeProcessingTask(edge));







 propagationCount++;





 propagationCount++;







 }





 }



...@@ -268,6 +272,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -268,6 +272,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






     * @param vpt





     * @param vpt







     */





     */







 private void scheduleValueProcessing(ValuePropagationTask vpt){





 private void scheduleValueProcessing(ValuePropagationTask vpt){









 // If the executor has been killed, there is little point









 // in submitting new tasks









 if (executor.isTerminating())









 return;







 executor.execute(vpt);





 executor.execute(vpt);







 }





 }







 





 



...@@ -276,6 +284,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -276,6 +284,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






     * @param task





     * @param task







     */





     */







 private void scheduleValueComputationTask(ValueComputationTask task) {





 private void scheduleValueComputationTask(ValueComputationTask task) {









 // If the executor has been killed, there is little point









 // in submitting new tasks









 if (executor.isTerminating())









 return;







 executor.execute(task);





 executor.execute(task);







 }





 }







 





 



...@@ -321,7 +333,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -321,7 +333,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 addIncoming(sP,d3,n,d2);





 addIncoming(sP,d3,n,d2);







 //line 15.2, copy to avoid concurrent modification exceptions by other threads





 //line 15.2, copy to avoid concurrent modification exceptions by other threads







 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));





 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));







 assert !jumpFn.reverseLookup(n, d2).isEmpty();









 }





 }







 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez



...@@ -395,7 +406,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -395,7 +406,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 





 







 //for each of the method's start points, determine incoming calls





 //for each of the method's start points, determine incoming calls







 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);





 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);







 Set<Entry<N,Set<D>>> inc = new HashSet<Map.Entry<N,Set<D>>>();





 Map<N,Set<D>> inc = new HashMap<N,Set<D>>();







 for(N sP: startPointsOf) {





 for(N sP: startPointsOf) {







 //line 21.1 of Naeem/Lhotak/Rodriguez





 //line 21.1 of Naeem/Lhotak/Rodriguez







 





 



...@@ -403,13 +414,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -403,13 +414,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 synchronized (incoming) {





 synchronized (incoming) {







 addEndSummary(sP, d1, n, d2, f);





 addEndSummary(sP, d1, n, d2, f);







 //copy to avoid concurrent modification exceptions by other threads





 //copy to avoid concurrent modification exceptions by other threads







 inc.addAll(incoming(d1, sP));





 for (Entry<N, Set<D>> entry : incoming(d1, sP).entrySet())









 inc.put(entry.getKey(), new HashSet<D>(entry.getValue()));







 }





 }







 }





 }







 





 







 //for each incoming call edge already processed





 //for each incoming call edge already processed







 //(see processCall(..))





 //(see processCall(..))







 for (Entry<N,Set<D>> entry: inc) {





 for (Entry<N,Set<D>> entry: inc.entrySet()) {







 //line 22





 //line 22







 N c = entry.getKey();





 N c = entry.getKey();







 //for each return site





 //for each return site



...@@ -428,6 +440,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -428,6 +440,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);





 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);







 //for each jump function coming into the call, propagate to return site using the composed function





 //for each jump function coming into the call, propagate to return site using the composed function









 synchronized (jumpFn) { // some other thread might change jumpFn on the way







 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {





 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {







 EdgeFunction<V> f3 = valAndFunc.getValue();





 EdgeFunction<V> f3 = valAndFunc.getValue();







 if(!f3.equalTo(allTop)) {





 if(!f3.equalTo(allTop)) {



...@@ -439,6 +452,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -439,6 +452,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 }





 }







 }





 }









 }







 





 







 //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow





 //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow







 //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only





 //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only



...@@ -691,13 +705,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -691,13 +705,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 summaries.put(eP,d2,f);





 summaries.put(eP,d2,f);







 } 





 } 







 





 







 private Set<Entry<N, Set<D>>> incoming(D d1, N sP) {





 private Map<N, Set<D>> incoming(D d1, N sP) {









 synchronized (incoming) {







 Map<N, Set<D>> map = incoming.get(sP, d1);





 Map<N, Set<D>> map = incoming.get(sP, d1);







 if(map==null) return Collections.emptySet();





 if(map==null) return Collections.emptyMap();







 return map.entrySet(); 





 return map;









 }







 }





 }







 





 







 protected void addIncoming(N sP, D d3, N n, D d2) {





 protected void addIncoming(N sP, D d3, N n, D d2) {









 synchronized (incoming) {







 Map<N, Set<D>> summaries = incoming.get(sP, d3);





 Map<N, Set<D>> summaries = incoming.get(sP, d3);







 if(summaries==null) {





 if(summaries==null) {







 summaries = new HashMap<N, Set<D>>();





 summaries = new HashMap<N, Set<D>>();



...@@ -710,6 +727,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -710,6 +727,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 set.add(d2);





 set.add(d2);







 }





 }









 } 







 





 







 /**





 /**







	 * Returns the V-type result for the given value at the given statement.





	 * Returns the V-type result for the given value at the given statement.



......













src/heros/solver/IDESolver.java








View file @ b90d9333








src/heros/solver/IDESolver.java










View file @ b90d9333


b90d9333





...@@ -259,6 +259,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -259,6 +259,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






     * @param edge the edge to process





     * @param edge the edge to process







     */





     */







 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){





 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){









 // If the executor has been killed, there is little point









 // in submitting new tasks









 if (executor.isTerminating())









 return;







 executor.execute(new PathEdgeProcessingTask(edge));





 executor.execute(new PathEdgeProcessingTask(edge));







 propagationCount++;





 propagationCount++;







 }





 }



...@@ -268,6 +272,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -268,6 +272,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






     * @param vpt





     * @param vpt







     */





     */







 private void scheduleValueProcessing(ValuePropagationTask vpt){





 private void scheduleValueProcessing(ValuePropagationTask vpt){









 // If the executor has been killed, there is little point









 // in submitting new tasks









 if (executor.isTerminating())









 return;







 executor.execute(vpt);





 executor.execute(vpt);







 }





 }







 





 



...@@ -276,6 +284,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -276,6 +284,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






     * @param task





     * @param task







     */





     */







 private void scheduleValueComputationTask(ValueComputationTask task) {





 private void scheduleValueComputationTask(ValueComputationTask task) {









 // If the executor has been killed, there is little point









 // in submitting new tasks









 if (executor.isTerminating())









 return;







 executor.execute(task);





 executor.execute(task);







 }





 }







 





 



...@@ -321,7 +333,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -321,7 +333,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 addIncoming(sP,d3,n,d2);





 addIncoming(sP,d3,n,d2);







 //line 15.2, copy to avoid concurrent modification exceptions by other threads





 //line 15.2, copy to avoid concurrent modification exceptions by other threads







 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));





 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));







 assert !jumpFn.reverseLookup(n, d2).isEmpty();









 }





 }







 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez



...@@ -395,7 +406,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -395,7 +406,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 





 







 //for each of the method's start points, determine incoming calls





 //for each of the method's start points, determine incoming calls







 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);





 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);







 Set<Entry<N,Set<D>>> inc = new HashSet<Map.Entry<N,Set<D>>>();





 Map<N,Set<D>> inc = new HashMap<N,Set<D>>();







 for(N sP: startPointsOf) {





 for(N sP: startPointsOf) {







 //line 21.1 of Naeem/Lhotak/Rodriguez





 //line 21.1 of Naeem/Lhotak/Rodriguez







 





 



...@@ -403,13 +414,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -403,13 +414,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 synchronized (incoming) {





 synchronized (incoming) {







 addEndSummary(sP, d1, n, d2, f);





 addEndSummary(sP, d1, n, d2, f);







 //copy to avoid concurrent modification exceptions by other threads





 //copy to avoid concurrent modification exceptions by other threads







 inc.addAll(incoming(d1, sP));





 for (Entry<N, Set<D>> entry : incoming(d1, sP).entrySet())









 inc.put(entry.getKey(), new HashSet<D>(entry.getValue()));







 }





 }







 }





 }







 





 







 //for each incoming call edge already processed





 //for each incoming call edge already processed







 //(see processCall(..))





 //(see processCall(..))







 for (Entry<N,Set<D>> entry: inc) {





 for (Entry<N,Set<D>> entry: inc.entrySet()) {







 //line 22





 //line 22







 N c = entry.getKey();





 N c = entry.getKey();







 //for each return site





 //for each return site



...@@ -428,6 +440,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -428,6 +440,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);





 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);







 //for each jump function coming into the call, propagate to return site using the composed function





 //for each jump function coming into the call, propagate to return site using the composed function









 synchronized (jumpFn) { // some other thread might change jumpFn on the way







 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {





 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {







 EdgeFunction<V> f3 = valAndFunc.getValue();





 EdgeFunction<V> f3 = valAndFunc.getValue();







 if(!f3.equalTo(allTop)) {





 if(!f3.equalTo(allTop)) {



...@@ -439,6 +452,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -439,6 +452,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 }





 }







 }





 }









 }







 





 







 //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow





 //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow







 //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only





 //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only



...@@ -691,13 +705,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -691,13 +705,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 summaries.put(eP,d2,f);





 summaries.put(eP,d2,f);







 } 





 } 







 





 







 private Set<Entry<N, Set<D>>> incoming(D d1, N sP) {





 private Map<N, Set<D>> incoming(D d1, N sP) {









 synchronized (incoming) {







 Map<N, Set<D>> map = incoming.get(sP, d1);





 Map<N, Set<D>> map = incoming.get(sP, d1);







 if(map==null) return Collections.emptySet();





 if(map==null) return Collections.emptyMap();







 return map.entrySet(); 





 return map;









 }







 }





 }







 





 







 protected void addIncoming(N sP, D d3, N n, D d2) {





 protected void addIncoming(N sP, D d3, N n, D d2) {









 synchronized (incoming) {







 Map<N, Set<D>> summaries = incoming.get(sP, d3);





 Map<N, Set<D>> summaries = incoming.get(sP, d3);







 if(summaries==null) {





 if(summaries==null) {







 summaries = new HashMap<N, Set<D>>();





 summaries = new HashMap<N, Set<D>>();



...@@ -710,6 +727,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -710,6 +727,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 set.add(d2);





 set.add(d2);







 }





 }









 } 







 





 







 /**





 /**







	 * Returns the V-type result for the given value at the given statement.





	 * Returns the V-type result for the given value at the given statement.



......









...@@ -259,6 +259,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -259,6 +259,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






     * @param edge the edge to process





     * @param edge the edge to process







     */





     */







 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){





 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){









 // If the executor has been killed, there is little point









 // in submitting new tasks









 if (executor.isTerminating())









 return;







 executor.execute(new PathEdgeProcessingTask(edge));





 executor.execute(new PathEdgeProcessingTask(edge));







 propagationCount++;





 propagationCount++;







 }





 }



...@@ -268,6 +272,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -268,6 +272,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






     * @param vpt





     * @param vpt







     */





     */







 private void scheduleValueProcessing(ValuePropagationTask vpt){





 private void scheduleValueProcessing(ValuePropagationTask vpt){









 // If the executor has been killed, there is little point









 // in submitting new tasks









 if (executor.isTerminating())









 return;







 executor.execute(vpt);





 executor.execute(vpt);







 }





 }







 





 



...@@ -276,6 +284,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -276,6 +284,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






     * @param task





     * @param task







     */





     */







 private void scheduleValueComputationTask(ValueComputationTask task) {





 private void scheduleValueComputationTask(ValueComputationTask task) {









 // If the executor has been killed, there is little point









 // in submitting new tasks









 if (executor.isTerminating())









 return;







 executor.execute(task);





 executor.execute(task);







 }





 }







 





 



...@@ -321,7 +333,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -321,7 +333,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 addIncoming(sP,d3,n,d2);





 addIncoming(sP,d3,n,d2);







 //line 15.2, copy to avoid concurrent modification exceptions by other threads





 //line 15.2, copy to avoid concurrent modification exceptions by other threads







 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));





 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));







 assert !jumpFn.reverseLookup(n, d2).isEmpty();









 }





 }







 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez



...@@ -395,7 +406,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -395,7 +406,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 





 







 //for each of the method's start points, determine incoming calls





 //for each of the method's start points, determine incoming calls







 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);





 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);







 Set<Entry<N,Set<D>>> inc = new HashSet<Map.Entry<N,Set<D>>>();





 Map<N,Set<D>> inc = new HashMap<N,Set<D>>();







 for(N sP: startPointsOf) {





 for(N sP: startPointsOf) {







 //line 21.1 of Naeem/Lhotak/Rodriguez





 //line 21.1 of Naeem/Lhotak/Rodriguez







 





 



...@@ -403,13 +414,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -403,13 +414,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 synchronized (incoming) {





 synchronized (incoming) {







 addEndSummary(sP, d1, n, d2, f);





 addEndSummary(sP, d1, n, d2, f);







 //copy to avoid concurrent modification exceptions by other threads





 //copy to avoid concurrent modification exceptions by other threads







 inc.addAll(incoming(d1, sP));





 for (Entry<N, Set<D>> entry : incoming(d1, sP).entrySet())









 inc.put(entry.getKey(), new HashSet<D>(entry.getValue()));







 }





 }







 }





 }







 





 







 //for each incoming call edge already processed





 //for each incoming call edge already processed







 //(see processCall(..))





 //(see processCall(..))







 for (Entry<N,Set<D>> entry: inc) {





 for (Entry<N,Set<D>> entry: inc.entrySet()) {







 //line 22





 //line 22







 N c = entry.getKey();





 N c = entry.getKey();







 //for each return site





 //for each return site



...@@ -428,6 +440,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -428,6 +440,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);





 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);







 //for each jump function coming into the call, propagate to return site using the composed function





 //for each jump function coming into the call, propagate to return site using the composed function









 synchronized (jumpFn) { // some other thread might change jumpFn on the way







 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {





 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {







 EdgeFunction<V> f3 = valAndFunc.getValue();





 EdgeFunction<V> f3 = valAndFunc.getValue();







 if(!f3.equalTo(allTop)) {





 if(!f3.equalTo(allTop)) {



...@@ -439,6 +452,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -439,6 +452,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 }





 }







 }





 }









 }







 





 







 //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow





 //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow







 //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only





 //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only



...@@ -691,13 +705,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -691,13 +705,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 summaries.put(eP,d2,f);





 summaries.put(eP,d2,f);







 } 





 } 







 





 







 private Set<Entry<N, Set<D>>> incoming(D d1, N sP) {





 private Map<N, Set<D>> incoming(D d1, N sP) {









 synchronized (incoming) {







 Map<N, Set<D>> map = incoming.get(sP, d1);





 Map<N, Set<D>> map = incoming.get(sP, d1);







 if(map==null) return Collections.emptySet();





 if(map==null) return Collections.emptyMap();







 return map.entrySet(); 





 return map;









 }







 }





 }







 





 







 protected void addIncoming(N sP, D d3, N n, D d2) {





 protected void addIncoming(N sP, D d3, N n, D d2) {









 synchronized (incoming) {







 Map<N, Set<D>> summaries = incoming.get(sP, d3);





 Map<N, Set<D>> summaries = incoming.get(sP, d3);







 if(summaries==null) {





 if(summaries==null) {







 summaries = new HashMap<N, Set<D>>();





 summaries = new HashMap<N, Set<D>>();



...@@ -710,6 +727,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -710,6 +727,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 set.add(d2);





 set.add(d2);







 }





 }









 } 







 





 







 /**





 /**







	 * Returns the V-type result for the given value at the given statement.





	 * Returns the V-type result for the given value at the given statement.



......






...@@ -259,6 +259,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -259,6 +259,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






     * @param edge the edge to process





     * @param edge the edge to process







     */





     */







 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){





 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){









 // If the executor has been killed, there is little point









 // in submitting new tasks









 if (executor.isTerminating())









 return;







 executor.execute(new PathEdgeProcessingTask(edge));





 executor.execute(new PathEdgeProcessingTask(edge));







 propagationCount++;





 propagationCount++;







 }





 }



...@@ -268,6 +272,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -268,6 +272,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






     * @param vpt





     * @param vpt







     */





     */







 private void scheduleValueProcessing(ValuePropagationTask vpt){





 private void scheduleValueProcessing(ValuePropagationTask vpt){









 // If the executor has been killed, there is little point









 // in submitting new tasks









 if (executor.isTerminating())









 return;







 executor.execute(vpt);





 executor.execute(vpt);







 }





 }







 





 



...@@ -276,6 +284,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -276,6 +284,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






     * @param task





     * @param task







     */





     */







 private void scheduleValueComputationTask(ValueComputationTask task) {





 private void scheduleValueComputationTask(ValueComputationTask task) {









 // If the executor has been killed, there is little point









 // in submitting new tasks









 if (executor.isTerminating())









 return;







 executor.execute(task);





 executor.execute(task);







 }





 }







 





 



...@@ -321,7 +333,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -321,7 +333,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 addIncoming(sP,d3,n,d2);





 addIncoming(sP,d3,n,d2);







 //line 15.2, copy to avoid concurrent modification exceptions by other threads





 //line 15.2, copy to avoid concurrent modification exceptions by other threads







 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));





 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));







 assert !jumpFn.reverseLookup(n, d2).isEmpty();









 }





 }







 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez



...@@ -395,7 +406,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -395,7 +406,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 





 







 //for each of the method's start points, determine incoming calls





 //for each of the method's start points, determine incoming calls







 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);





 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);







 Set<Entry<N,Set<D>>> inc = new HashSet<Map.Entry<N,Set<D>>>();





 Map<N,Set<D>> inc = new HashMap<N,Set<D>>();







 for(N sP: startPointsOf) {





 for(N sP: startPointsOf) {







 //line 21.1 of Naeem/Lhotak/Rodriguez





 //line 21.1 of Naeem/Lhotak/Rodriguez







 





 



...@@ -403,13 +414,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -403,13 +414,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 synchronized (incoming) {





 synchronized (incoming) {







 addEndSummary(sP, d1, n, d2, f);





 addEndSummary(sP, d1, n, d2, f);







 //copy to avoid concurrent modification exceptions by other threads





 //copy to avoid concurrent modification exceptions by other threads







 inc.addAll(incoming(d1, sP));





 for (Entry<N, Set<D>> entry : incoming(d1, sP).entrySet())









 inc.put(entry.getKey(), new HashSet<D>(entry.getValue()));







 }





 }







 }





 }







 





 







 //for each incoming call edge already processed





 //for each incoming call edge already processed







 //(see processCall(..))





 //(see processCall(..))







 for (Entry<N,Set<D>> entry: inc) {





 for (Entry<N,Set<D>> entry: inc.entrySet()) {







 //line 22





 //line 22







 N c = entry.getKey();





 N c = entry.getKey();







 //for each return site





 //for each return site



...@@ -428,6 +440,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -428,6 +440,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);





 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);







 //for each jump function coming into the call, propagate to return site using the composed function





 //for each jump function coming into the call, propagate to return site using the composed function









 synchronized (jumpFn) { // some other thread might change jumpFn on the way







 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {





 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {







 EdgeFunction<V> f3 = valAndFunc.getValue();





 EdgeFunction<V> f3 = valAndFunc.getValue();







 if(!f3.equalTo(allTop)) {





 if(!f3.equalTo(allTop)) {



...@@ -439,6 +452,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -439,6 +452,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 }





 }







 }





 }









 }







 





 







 //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow





 //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow







 //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only





 //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only



...@@ -691,13 +705,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -691,13 +705,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 summaries.put(eP,d2,f);





 summaries.put(eP,d2,f);







 } 





 } 







 





 







 private Set<Entry<N, Set<D>>> incoming(D d1, N sP) {





 private Map<N, Set<D>> incoming(D d1, N sP) {









 synchronized (incoming) {







 Map<N, Set<D>> map = incoming.get(sP, d1);





 Map<N, Set<D>> map = incoming.get(sP, d1);







 if(map==null) return Collections.emptySet();





 if(map==null) return Collections.emptyMap();







 return map.entrySet(); 





 return map;









 }







 }





 }







 





 







 protected void addIncoming(N sP, D d3, N n, D d2) {





 protected void addIncoming(N sP, D d3, N n, D d2) {









 synchronized (incoming) {







 Map<N, Set<D>> summaries = incoming.get(sP, d3);





 Map<N, Set<D>> summaries = incoming.get(sP, d3);







 if(summaries==null) {





 if(summaries==null) {







 summaries = new HashMap<N, Set<D>>();





 summaries = new HashMap<N, Set<D>>();



...@@ -710,6 +727,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -710,6 +727,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 set.add(d2);





 set.add(d2);







 }





 }









 } 







 





 







 /**





 /**







	 * Returns the V-type result for the given value at the given statement.





	 * Returns the V-type result for the given value at the given statement.



......


     * @param edge the edge to process     * @param edge the edge to process     * @param edge the edge to process     * @param edge the edge to process     */     */     */     */ protected void scheduleEdgeProcessing(PathEdge<N,D> edge){protectedvoidscheduleEdgeProcessing(PathEdge<N,D>edge){ protected void scheduleEdgeProcessing(PathEdge<N,D> edge){protectedvoidscheduleEdgeProcessing(PathEdge<N,D>edge){ // If the executor has been killed, there is little point// If the executor has been killed, there is little point // in submitting new tasks// in submitting new tasks if (executor.isTerminating())if(executor.isTerminating()) return;return; executor.execute(new PathEdgeProcessingTask(edge));executor.execute(newPathEdgeProcessingTask(edge)); executor.execute(new PathEdgeProcessingTask(edge));executor.execute(newPathEdgeProcessingTask(edge)); propagationCount++;propagationCount++; propagationCount++;propagationCount++; }} }}     * @param vpt     * @param vpt     * @param vpt     * @param vpt     */     */     */     */ private void scheduleValueProcessing(ValuePropagationTask vpt){privatevoidscheduleValueProcessing(ValuePropagationTaskvpt){ private void scheduleValueProcessing(ValuePropagationTask vpt){privatevoidscheduleValueProcessing(ValuePropagationTaskvpt){ // If the executor has been killed, there is little point// If the executor has been killed, there is little point // in submitting new tasks// in submitting new tasks if (executor.isTerminating())if(executor.isTerminating()) return;return; executor.execute(vpt);executor.execute(vpt); executor.execute(vpt);executor.execute(vpt); }} }}       * @param task     * @param task     * @param task     * @param task     */     */     */     */ private void scheduleValueComputationTask(ValueComputationTask task) {privatevoidscheduleValueComputationTask(ValueComputationTasktask){ private void scheduleValueComputationTask(ValueComputationTask task) {privatevoidscheduleValueComputationTask(ValueComputationTasktask){ // If the executor has been killed, there is little point// If the executor has been killed, there is little point // in submitting new tasks// in submitting new tasks if (executor.isTerminating())if(executor.isTerminating()) return;return; executor.execute(task);executor.execute(task); executor.execute(task);executor.execute(task); }} }}   addIncoming(sP,d3,n,d2);addIncoming(sP,d3,n,d2); addIncoming(sP,d3,n,d2);addIncoming(sP,d3,n,d2); //line 15.2, copy to avoid concurrent modification exceptions by other threads//line 15.2, copy to avoid concurrent modification exceptions by other threads //line 15.2, copy to avoid concurrent modification exceptions by other threads//line 15.2, copy to avoid concurrent modification exceptions by other threads endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));endSumm=newHashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP,d3)); endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));endSumm=newHashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP,d3)); assert !jumpFn.reverseLookup(n, d2).isEmpty();assert!jumpFn.reverseLookup(n,d2).isEmpty(); }} }}   //still line 15.2 of Naeem/Lhotak/Rodriguez//still line 15.2 of Naeem/Lhotak/Rodriguez //still line 15.2 of Naeem/Lhotak/Rodriguez//still line 15.2 of Naeem/Lhotak/Rodriguez   //for each of the method's start points, determine incoming calls//for each of the method's start points, determine incoming calls //for each of the method's start points, determine incoming calls//for each of the method's start points, determine incoming calls Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);Set<N>startPointsOf=icfg.getStartPointsOf(methodThatNeedsSummary); Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);Set<N>startPointsOf=icfg.getStartPointsOf(methodThatNeedsSummary); Set<Entry<N,Set<D>>> inc = new HashSet<Map.Entry<N,Set<D>>>();SetSet<<EntryEntry<N,Set<D>>>>inc=newHashSetSet<<MapMap..EntryEntry<N,Set<D>>>();> Map<N,Set<D>> inc = new HashMap<N,Set<D>>();MapMap<N,Set<D>>inc=newHashMapMap<N,Set<D>>(); for(N sP: startPointsOf) {for(NsP:startPointsOf){ for(N sP: startPointsOf) {for(NsP:startPointsOf){ //line 21.1 of Naeem/Lhotak/Rodriguez//line 21.1 of Naeem/Lhotak/Rodriguez //line 21.1 of Naeem/Lhotak/Rodriguez//line 21.1 of Naeem/Lhotak/Rodriguez   synchronized (incoming) {synchronized(incoming){ synchronized (incoming) {synchronized(incoming){ addEndSummary(sP, d1, n, d2, f);addEndSummary(sP,d1,n,d2,f); addEndSummary(sP, d1, n, d2, f);addEndSummary(sP,d1,n,d2,f); //copy to avoid concurrent modification exceptions by other threads//copy to avoid concurrent modification exceptions by other threads //copy to avoid concurrent modification exceptions by other threads//copy to avoid concurrent modification exceptions by other threads inc.addAll(incoming(d1, sP));inc.addAll(incoming(d1,sP)); for (Entry<N, Set<D>> entry : incoming(d1, sP).entrySet())for(Entry<N,Set<D>>entry:incoming(d1,sP).entrySet()) inc.put(entry.getKey(), new HashSet<D>(entry.getValue()));inc.put(entry.getKey(),newHashSet<D>(entry.getValue())); }} }} }} }}   //for each incoming call edge already processed//for each incoming call edge already processed //for each incoming call edge already processed//for each incoming call edge already processed //(see processCall(..))//(see processCall(..)) //(see processCall(..))//(see processCall(..)) for (Entry<N,Set<D>> entry: inc) {for(Entry<N,Set<D>>entry:inc){ for (Entry<N,Set<D>> entry: inc.entrySet()) {for(Entry<N,Set<D>>entry:inc..entrySetentrySet())(){ //line 22//line 22 //line 22//line 22 N c = entry.getKey();Nc=entry.getKey(); N c = entry.getKey();Nc=entry.getKey(); //for each return site//for each return site //for each return site//for each return site EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);EdgeFunction<V>f5=edgeFunctions.getReturnEdgeFunction(c,icfg.getMethodOf(n),n,d2,retSiteC,d5); EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);EdgeFunction<V>f5=edgeFunctions.getReturnEdgeFunction(c,icfg.getMethodOf(n),n,d2,retSiteC,d5); EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);EdgeFunction<V>fPrime=f4.composeWith(f).composeWith(f5); EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);EdgeFunction<V>fPrime=f4.composeWith(f).composeWith(f5); //for each jump function coming into the call, propagate to return site using the composed function//for each jump function coming into the call, propagate to return site using the composed function //for each jump function coming into the call, propagate to return site using the composed function//for each jump function coming into the call, propagate to return site using the composed function synchronized (jumpFn) { // some other thread might change jumpFn on the waysynchronized(jumpFn){// some other thread might change jumpFn on the way for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {for(Map.Entry<D,EdgeFunction<V>>valAndFunc:jumpFn.reverseLookup(c,d4).entrySet()){ for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {for(Map.Entry<D,EdgeFunction<V>>valAndFunc:jumpFn.reverseLookup(c,d4).entrySet()){ EdgeFunction<V> f3 = valAndFunc.getValue();EdgeFunction<V>f3=valAndFunc.getValue(); EdgeFunction<V> f3 = valAndFunc.getValue();EdgeFunction<V>f3=valAndFunc.getValue(); if(!f3.equalTo(allTop)) {if(!f3.equalTo(allTop)){ if(!f3.equalTo(allTop)) {if(!f3.equalTo(allTop)){ }} }} }} }} }} }} }}   //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow//handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow//handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only//note: we propagate that way only values that originate from ZERO, as conditionally generated values should only //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only//note: we propagate that way only values that originate from ZERO, as conditionally generated values should only summaries.put(eP,d2,f);summaries.put(eP,d2,f); summaries.put(eP,d2,f);summaries.put(eP,d2,f); } } } }   private Set<Entry<N, Set<D>>> incoming(D d1, N sP) {privateSet<Entry<N,Set<D>>>incoming(Dd1,NsP){ private Map<N, Set<D>> incoming(D d1, N sP) {privateMap<N,Set<D>>incoming(Dd1,NsP){ synchronized (incoming) {synchronized(incoming){ Map<N, Set<D>> map = incoming.get(sP, d1);Map<N,Set<D>>map=incoming.get(sP,d1); Map<N, Set<D>> map = incoming.get(sP, d1);Map<N,Set<D>>map=incoming.get(sP,d1); if(map==null) return Collections.emptySet();if(map==null)returnCollections.emptySet(); if(map==null) return Collections.emptyMap();if(map==null)returnCollections.emptyMap(); return map.entrySet(); returnmap.entrySet(); return map;returnmap; }} }} }}   protected void addIncoming(N sP, D d3, N n, D d2) {protectedvoidaddIncoming(NsP,Dd3,Nn,Dd2){ protected void addIncoming(N sP, D d3, N n, D d2) {protectedvoidaddIncoming(NsP,Dd3,Nn,Dd2){ synchronized (incoming) {synchronized(incoming){ Map<N, Set<D>> summaries = incoming.get(sP, d3);Map<N,Set<D>>summaries=incoming.get(sP,d3); Map<N, Set<D>> summaries = incoming.get(sP, d3);Map<N,Set<D>>summaries=incoming.get(sP,d3); if(summaries==null) {if(summaries==null){ if(summaries==null) {if(summaries==null){ summaries = new HashMap<N, Set<D>>();summaries=newHashMap<N,Set<D>>(); summaries = new HashMap<N, Set<D>>();summaries=newHashMap<N,Set<D>>(); }} }} set.add(d2);set.add(d2); set.add(d2);set.add(d2); }} }} } }   /**/** /**/**	 * Returns the V-type result for the given value at the given statement.	 * Returns the V-type result for the given value at the given statement.	 * Returns the V-type result for the given value at the given statement.	 * Returns the V-type result for the given value at the given statement.









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






