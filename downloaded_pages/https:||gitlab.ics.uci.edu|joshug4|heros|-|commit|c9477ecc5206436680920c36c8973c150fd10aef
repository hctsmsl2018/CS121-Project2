



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

c9477ecc















Commit
c9477ecc


authored
Jan 15, 2014
by


Steven Arzt



Browse files




Merge branch 'develop' of github.com:Sable/heros into develop







parents
0b0c5ba4
f21c884a













Changes
9




Hide whitespace changes

Inline
Side-by-side















build.xml








View file @ c9477ecc






......@@ -16,6 +16,8 @@









 </manifest>










 <fileset dir="bin"/>










 <zipfileset src="${guava.jar}"/>










 <zipfileset src="${slf4j-api.jar}"/>










 <zipfileset src="${slf4j-simple.jar}"/>










 </jar>










 </target>














......@@ -33,8 +35,8 @@









 >










 <classpath>










 <pathelement location="${guava.jar}"/>










 <pathelement location="slf4j-api-1.7.5.jar"/>










 <pathelement location="slf4j-simple-1.7.5.jar"/>










 <pathelement location="${slf4j-api.jar}"/>










 <pathelement location="${slf4j-simple.jar}"/>










 </classpath>










 <src path="src"/>










 </javac>



......














src/heros/TwoElementSet.java



0 â†’ 100644







View file @ c9477ecc













/*******************************************************************************










 * Copyright (c) 2013 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.AbstractSet;










import java.util.Iterator;










import java.util.NoSuchElementException;





















/**










 * An unmodifiable set holding exactly two elements. Particularly useful within flow functions.










 *










 * @param <E>










 * @see FlowFunction










 */










public class TwoElementSet<E> extends AbstractSet<E> {










 










 protected final E first, second;










 










 public TwoElementSet(E first, E second) {










 this.first = first;










 this.second = second;










 } 










 










 public static <E> TwoElementSet<E> twoElementSet(E first, E second) {










 return new TwoElementSet<E>(first, second);










 }










 










 @Override










 public Iterator<E> iterator() {










 return new Iterator<E>() { 










 int elementsRead = 0;










 










 @Override










 public boolean hasNext() {










 return elementsRead<2;










 }





















 @Override










 public E next() {










 switch(elementsRead) {










 case 0:










 elementsRead++;










 return first;










 case 1:










 elementsRead++;










 return second;










 default:










 throw new NoSuchElementException(); 










 }










 }





















 @Override










 public void remove() {










 throw new UnsupportedOperationException();










 }










 };










 }





















 @Override










 public int size() {










 return 2;










 } 










}














src/heros/flowfunc/Gen.java








View file @ c9477ecc






......@@ -10,10 +10,10 @@









 ******************************************************************************/










package heros.flowfunc;





















import static heros.TwoElementSet.twoElementSet;










import static java.util.Collections.singleton;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;

























......@@ -36,12 +36,9 @@ public class Gen<D> implements FlowFunction<D> {




















 public Set<D> computeTargets(D source) {










 if(source==zeroValue) {










 HashSet<D> res = new HashSet<D>();










 res.add(source);










 res.add(genValue);










 return res;










 return twoElementSet(source, genValue);










 } else










 return Collections.singleton(source);










 return singleton(source);










 }










 










}














src/heros/flowfunc/Identity.java








View file @ c9477ecc






......@@ -10,9 +10,9 @@









 ******************************************************************************/










package heros.flowfunc;





















import static java.util.Collections.singleton;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.Set;

























......@@ -25,7 +25,7 @@ public class Identity<D> implements FlowFunction<D> {









 private Identity(){} //use v() instead





















 public Set<D> computeTargets(D source) {










 return Collections.singleton(source);










 return singleton(source);










 }





















 @SuppressWarnings("unchecked")



......














src/heros/flowfunc/Kill.java








View file @ c9477ecc






......@@ -10,9 +10,10 @@









 ******************************************************************************/










package heros.flowfunc;





















import static java.util.Collections.emptySet;










import static java.util.Collections.singleton;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.Set;

























......@@ -33,9 +34,9 @@ public class Kill<D> implements FlowFunction<D> {




















 public Set<D> computeTargets(D source) {










 if(source==killValue) {










 return Collections.emptySet();










 return emptySet();










 } else










 return Collections.singleton(source);










 return singleton(source);










 }










 










}














src/heros/flowfunc/KillAll.java








View file @ c9477ecc






......@@ -10,9 +10,9 @@









 ******************************************************************************/










package heros.flowfunc;





















import static java.util.Collections.emptySet;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.Set;

























......@@ -31,7 +31,7 @@ public class KillAll<D> implements FlowFunction<D> {









 private KillAll(){} //use v() instead





















 public Set<D> computeTargets(D source) {










 return Collections.emptySet();










 return emptySet();










 }










 










 @SuppressWarnings("unchecked")



......














src/heros/flowfunc/Transfer.java








View file @ c9477ecc






......@@ -10,10 +10,10 @@









 ******************************************************************************/










package heros.flowfunc;





















import static heros.TwoElementSet.twoElementSet;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;

























......@@ -30,10 +30,7 @@ public class Transfer<D> implements FlowFunction<D> {




















 public Set<D> computeTargets(D source) {










 if(source==fromValue) {










 HashSet<D> res = new HashSet<D>();










 res.add(source);










 res.add(toValue);










 return res;










 return twoElementSet(source, toValue);










 } else if(source==toValue) {










 return Collections.emptySet();










 } else {



......














src/heros/flowfunc/Union.java








View file @ c9477ecc






......@@ -10,14 +10,13 @@









 ******************************************************************************/










package heros.flowfunc;





















import static com.google.common.collect.Sets.newHashSet;










import heros.FlowFunction;





















import java.util.ArrayList;










import java.util.List;










import java.util.Set;





















import com.google.common.collect.Sets;
































/**










 * Represents the union of a set of flow functions.



......@@ -31,7 +30,7 @@ public class Union<D> implements FlowFunction<D> {









 } 





















 public Set<D> computeTargets(D source) {










 Set<D> res = Sets.newHashSet();










 Set<D> res = newHashSet();










 for (FlowFunction<D> func : funcs) {










 res.addAll(func.computeTargets(source));










 }



......














src/heros/solver/IDESolver.java








View file @ c9477ecc






......@@ -578,7 +578,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 if(targetVal!=zeroValue) {










 logger.trace("EDGE: <{},{}> -> <{},{}> - {}", icfg.getMethodOf(target), sourceVal, target, targetVal, fPrime );





















 }










 }










 }



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

c9477ecc















Commit
c9477ecc


authored
Jan 15, 2014
by


Steven Arzt



Browse files




Merge branch 'develop' of github.com:Sable/heros into develop







parents
0b0c5ba4
f21c884a













Changes
9




Hide whitespace changes

Inline
Side-by-side















build.xml








View file @ c9477ecc






......@@ -16,6 +16,8 @@









 </manifest>










 <fileset dir="bin"/>










 <zipfileset src="${guava.jar}"/>










 <zipfileset src="${slf4j-api.jar}"/>










 <zipfileset src="${slf4j-simple.jar}"/>










 </jar>










 </target>














......@@ -33,8 +35,8 @@









 >










 <classpath>










 <pathelement location="${guava.jar}"/>










 <pathelement location="slf4j-api-1.7.5.jar"/>










 <pathelement location="slf4j-simple-1.7.5.jar"/>










 <pathelement location="${slf4j-api.jar}"/>










 <pathelement location="${slf4j-simple.jar}"/>










 </classpath>










 <src path="src"/>










 </javac>



......














src/heros/TwoElementSet.java



0 â†’ 100644







View file @ c9477ecc













/*******************************************************************************










 * Copyright (c) 2013 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.AbstractSet;










import java.util.Iterator;










import java.util.NoSuchElementException;





















/**










 * An unmodifiable set holding exactly two elements. Particularly useful within flow functions.










 *










 * @param <E>










 * @see FlowFunction










 */










public class TwoElementSet<E> extends AbstractSet<E> {










 










 protected final E first, second;










 










 public TwoElementSet(E first, E second) {










 this.first = first;










 this.second = second;










 } 










 










 public static <E> TwoElementSet<E> twoElementSet(E first, E second) {










 return new TwoElementSet<E>(first, second);










 }










 










 @Override










 public Iterator<E> iterator() {










 return new Iterator<E>() { 










 int elementsRead = 0;










 










 @Override










 public boolean hasNext() {










 return elementsRead<2;










 }





















 @Override










 public E next() {










 switch(elementsRead) {










 case 0:










 elementsRead++;










 return first;










 case 1:










 elementsRead++;










 return second;










 default:










 throw new NoSuchElementException(); 










 }










 }





















 @Override










 public void remove() {










 throw new UnsupportedOperationException();










 }










 };










 }





















 @Override










 public int size() {










 return 2;










 } 










}














src/heros/flowfunc/Gen.java








View file @ c9477ecc






......@@ -10,10 +10,10 @@









 ******************************************************************************/










package heros.flowfunc;





















import static heros.TwoElementSet.twoElementSet;










import static java.util.Collections.singleton;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;

























......@@ -36,12 +36,9 @@ public class Gen<D> implements FlowFunction<D> {




















 public Set<D> computeTargets(D source) {










 if(source==zeroValue) {










 HashSet<D> res = new HashSet<D>();










 res.add(source);










 res.add(genValue);










 return res;










 return twoElementSet(source, genValue);










 } else










 return Collections.singleton(source);










 return singleton(source);










 }










 










}














src/heros/flowfunc/Identity.java








View file @ c9477ecc






......@@ -10,9 +10,9 @@









 ******************************************************************************/










package heros.flowfunc;





















import static java.util.Collections.singleton;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.Set;

























......@@ -25,7 +25,7 @@ public class Identity<D> implements FlowFunction<D> {









 private Identity(){} //use v() instead





















 public Set<D> computeTargets(D source) {










 return Collections.singleton(source);










 return singleton(source);










 }





















 @SuppressWarnings("unchecked")



......














src/heros/flowfunc/Kill.java








View file @ c9477ecc






......@@ -10,9 +10,10 @@









 ******************************************************************************/










package heros.flowfunc;





















import static java.util.Collections.emptySet;










import static java.util.Collections.singleton;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.Set;

























......@@ -33,9 +34,9 @@ public class Kill<D> implements FlowFunction<D> {




















 public Set<D> computeTargets(D source) {










 if(source==killValue) {










 return Collections.emptySet();










 return emptySet();










 } else










 return Collections.singleton(source);










 return singleton(source);










 }










 










}














src/heros/flowfunc/KillAll.java








View file @ c9477ecc






......@@ -10,9 +10,9 @@









 ******************************************************************************/










package heros.flowfunc;





















import static java.util.Collections.emptySet;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.Set;

























......@@ -31,7 +31,7 @@ public class KillAll<D> implements FlowFunction<D> {









 private KillAll(){} //use v() instead





















 public Set<D> computeTargets(D source) {










 return Collections.emptySet();










 return emptySet();










 }










 










 @SuppressWarnings("unchecked")



......














src/heros/flowfunc/Transfer.java








View file @ c9477ecc






......@@ -10,10 +10,10 @@









 ******************************************************************************/










package heros.flowfunc;





















import static heros.TwoElementSet.twoElementSet;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;

























......@@ -30,10 +30,7 @@ public class Transfer<D> implements FlowFunction<D> {




















 public Set<D> computeTargets(D source) {










 if(source==fromValue) {










 HashSet<D> res = new HashSet<D>();










 res.add(source);










 res.add(toValue);










 return res;










 return twoElementSet(source, toValue);










 } else if(source==toValue) {










 return Collections.emptySet();










 } else {



......














src/heros/flowfunc/Union.java








View file @ c9477ecc






......@@ -10,14 +10,13 @@









 ******************************************************************************/










package heros.flowfunc;





















import static com.google.common.collect.Sets.newHashSet;










import heros.FlowFunction;





















import java.util.ArrayList;










import java.util.List;










import java.util.Set;





















import com.google.common.collect.Sets;
































/**










 * Represents the union of a set of flow functions.



......@@ -31,7 +30,7 @@ public class Union<D> implements FlowFunction<D> {









 } 





















 public Set<D> computeTargets(D source) {










 Set<D> res = Sets.newHashSet();










 Set<D> res = newHashSet();










 for (FlowFunction<D> func : funcs) {










 res.addAll(func.computeTargets(source));










 }



......














src/heros/solver/IDESolver.java








View file @ c9477ecc






......@@ -578,7 +578,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 if(targetVal!=zeroValue) {










 logger.trace("EDGE: <{},{}> -> <{},{}> - {}", icfg.getMethodOf(target), sourceVal, target, targetVal, fPrime );





















 }










 }










 }



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

c9477ecc







Open sidebar



Joshua Garcia heros
Commits

c9477ecc




Open sidebar

Joshua Garcia heros
Commits

c9477ecc


Joshua GarciaherosherosCommits
c9477ecc








Commit
c9477ecc


authored
Jan 15, 2014
by


Steven Arzt



Browse files




Merge branch 'develop' of github.com:Sable/heros into develop







parents
0b0c5ba4
f21c884a













Changes
9




Hide whitespace changes

Inline
Side-by-side















build.xml








View file @ c9477ecc






......@@ -16,6 +16,8 @@









 </manifest>










 <fileset dir="bin"/>










 <zipfileset src="${guava.jar}"/>










 <zipfileset src="${slf4j-api.jar}"/>










 <zipfileset src="${slf4j-simple.jar}"/>










 </jar>










 </target>














......@@ -33,8 +35,8 @@









 >










 <classpath>










 <pathelement location="${guava.jar}"/>










 <pathelement location="slf4j-api-1.7.5.jar"/>










 <pathelement location="slf4j-simple-1.7.5.jar"/>










 <pathelement location="${slf4j-api.jar}"/>










 <pathelement location="${slf4j-simple.jar}"/>










 </classpath>










 <src path="src"/>










 </javac>



......














src/heros/TwoElementSet.java



0 â†’ 100644







View file @ c9477ecc













/*******************************************************************************










 * Copyright (c) 2013 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.AbstractSet;










import java.util.Iterator;










import java.util.NoSuchElementException;





















/**










 * An unmodifiable set holding exactly two elements. Particularly useful within flow functions.










 *










 * @param <E>










 * @see FlowFunction










 */










public class TwoElementSet<E> extends AbstractSet<E> {










 










 protected final E first, second;










 










 public TwoElementSet(E first, E second) {










 this.first = first;










 this.second = second;










 } 










 










 public static <E> TwoElementSet<E> twoElementSet(E first, E second) {










 return new TwoElementSet<E>(first, second);










 }










 










 @Override










 public Iterator<E> iterator() {










 return new Iterator<E>() { 










 int elementsRead = 0;










 










 @Override










 public boolean hasNext() {










 return elementsRead<2;










 }





















 @Override










 public E next() {










 switch(elementsRead) {










 case 0:










 elementsRead++;










 return first;










 case 1:










 elementsRead++;










 return second;










 default:










 throw new NoSuchElementException(); 










 }










 }





















 @Override










 public void remove() {










 throw new UnsupportedOperationException();










 }










 };










 }





















 @Override










 public int size() {










 return 2;










 } 










}














src/heros/flowfunc/Gen.java








View file @ c9477ecc






......@@ -10,10 +10,10 @@









 ******************************************************************************/










package heros.flowfunc;





















import static heros.TwoElementSet.twoElementSet;










import static java.util.Collections.singleton;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;

























......@@ -36,12 +36,9 @@ public class Gen<D> implements FlowFunction<D> {




















 public Set<D> computeTargets(D source) {










 if(source==zeroValue) {










 HashSet<D> res = new HashSet<D>();










 res.add(source);










 res.add(genValue);










 return res;










 return twoElementSet(source, genValue);










 } else










 return Collections.singleton(source);










 return singleton(source);










 }










 










}














src/heros/flowfunc/Identity.java








View file @ c9477ecc






......@@ -10,9 +10,9 @@









 ******************************************************************************/










package heros.flowfunc;





















import static java.util.Collections.singleton;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.Set;

























......@@ -25,7 +25,7 @@ public class Identity<D> implements FlowFunction<D> {









 private Identity(){} //use v() instead





















 public Set<D> computeTargets(D source) {










 return Collections.singleton(source);










 return singleton(source);










 }





















 @SuppressWarnings("unchecked")



......














src/heros/flowfunc/Kill.java








View file @ c9477ecc






......@@ -10,9 +10,10 @@









 ******************************************************************************/










package heros.flowfunc;





















import static java.util.Collections.emptySet;










import static java.util.Collections.singleton;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.Set;

























......@@ -33,9 +34,9 @@ public class Kill<D> implements FlowFunction<D> {




















 public Set<D> computeTargets(D source) {










 if(source==killValue) {










 return Collections.emptySet();










 return emptySet();










 } else










 return Collections.singleton(source);










 return singleton(source);










 }










 










}














src/heros/flowfunc/KillAll.java








View file @ c9477ecc






......@@ -10,9 +10,9 @@









 ******************************************************************************/










package heros.flowfunc;





















import static java.util.Collections.emptySet;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.Set;

























......@@ -31,7 +31,7 @@ public class KillAll<D> implements FlowFunction<D> {









 private KillAll(){} //use v() instead





















 public Set<D> computeTargets(D source) {










 return Collections.emptySet();










 return emptySet();










 }










 










 @SuppressWarnings("unchecked")



......














src/heros/flowfunc/Transfer.java








View file @ c9477ecc






......@@ -10,10 +10,10 @@









 ******************************************************************************/










package heros.flowfunc;





















import static heros.TwoElementSet.twoElementSet;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;

























......@@ -30,10 +30,7 @@ public class Transfer<D> implements FlowFunction<D> {




















 public Set<D> computeTargets(D source) {










 if(source==fromValue) {










 HashSet<D> res = new HashSet<D>();










 res.add(source);










 res.add(toValue);










 return res;










 return twoElementSet(source, toValue);










 } else if(source==toValue) {










 return Collections.emptySet();










 } else {



......














src/heros/flowfunc/Union.java








View file @ c9477ecc






......@@ -10,14 +10,13 @@









 ******************************************************************************/










package heros.flowfunc;





















import static com.google.common.collect.Sets.newHashSet;










import heros.FlowFunction;





















import java.util.ArrayList;










import java.util.List;










import java.util.Set;





















import com.google.common.collect.Sets;
































/**










 * Represents the union of a set of flow functions.



......@@ -31,7 +30,7 @@ public class Union<D> implements FlowFunction<D> {









 } 





















 public Set<D> computeTargets(D source) {










 Set<D> res = Sets.newHashSet();










 Set<D> res = newHashSet();










 for (FlowFunction<D> func : funcs) {










 res.addAll(func.computeTargets(source));










 }



......














src/heros/solver/IDESolver.java








View file @ c9477ecc






......@@ -578,7 +578,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 if(targetVal!=zeroValue) {










 logger.trace("EDGE: <{},{}> -> <{},{}> - {}", icfg.getMethodOf(target), sourceVal, target, targetVal, fPrime );





















 }










 }










 }



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
c9477ecc


authored
Jan 15, 2014
by


Steven Arzt



Browse files




Merge branch 'develop' of github.com:Sable/heros into develop







parents
0b0c5ba4
f21c884a













Changes
9




Hide whitespace changes

Inline
Side-by-side















build.xml








View file @ c9477ecc






......@@ -16,6 +16,8 @@









 </manifest>










 <fileset dir="bin"/>










 <zipfileset src="${guava.jar}"/>










 <zipfileset src="${slf4j-api.jar}"/>










 <zipfileset src="${slf4j-simple.jar}"/>










 </jar>










 </target>














......@@ -33,8 +35,8 @@









 >










 <classpath>










 <pathelement location="${guava.jar}"/>










 <pathelement location="slf4j-api-1.7.5.jar"/>










 <pathelement location="slf4j-simple-1.7.5.jar"/>










 <pathelement location="${slf4j-api.jar}"/>










 <pathelement location="${slf4j-simple.jar}"/>










 </classpath>










 <src path="src"/>










 </javac>



......














src/heros/TwoElementSet.java



0 â†’ 100644







View file @ c9477ecc













/*******************************************************************************










 * Copyright (c) 2013 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.AbstractSet;










import java.util.Iterator;










import java.util.NoSuchElementException;





















/**










 * An unmodifiable set holding exactly two elements. Particularly useful within flow functions.










 *










 * @param <E>










 * @see FlowFunction










 */










public class TwoElementSet<E> extends AbstractSet<E> {










 










 protected final E first, second;










 










 public TwoElementSet(E first, E second) {










 this.first = first;










 this.second = second;










 } 










 










 public static <E> TwoElementSet<E> twoElementSet(E first, E second) {










 return new TwoElementSet<E>(first, second);










 }










 










 @Override










 public Iterator<E> iterator() {










 return new Iterator<E>() { 










 int elementsRead = 0;










 










 @Override










 public boolean hasNext() {










 return elementsRead<2;










 }





















 @Override










 public E next() {










 switch(elementsRead) {










 case 0:










 elementsRead++;










 return first;










 case 1:










 elementsRead++;










 return second;










 default:










 throw new NoSuchElementException(); 










 }










 }





















 @Override










 public void remove() {










 throw new UnsupportedOperationException();










 }










 };










 }





















 @Override










 public int size() {










 return 2;










 } 










}














src/heros/flowfunc/Gen.java








View file @ c9477ecc






......@@ -10,10 +10,10 @@









 ******************************************************************************/










package heros.flowfunc;





















import static heros.TwoElementSet.twoElementSet;










import static java.util.Collections.singleton;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;

























......@@ -36,12 +36,9 @@ public class Gen<D> implements FlowFunction<D> {




















 public Set<D> computeTargets(D source) {










 if(source==zeroValue) {










 HashSet<D> res = new HashSet<D>();










 res.add(source);










 res.add(genValue);










 return res;










 return twoElementSet(source, genValue);










 } else










 return Collections.singleton(source);










 return singleton(source);










 }










 










}














src/heros/flowfunc/Identity.java








View file @ c9477ecc






......@@ -10,9 +10,9 @@









 ******************************************************************************/










package heros.flowfunc;





















import static java.util.Collections.singleton;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.Set;

























......@@ -25,7 +25,7 @@ public class Identity<D> implements FlowFunction<D> {









 private Identity(){} //use v() instead





















 public Set<D> computeTargets(D source) {










 return Collections.singleton(source);










 return singleton(source);










 }





















 @SuppressWarnings("unchecked")



......














src/heros/flowfunc/Kill.java








View file @ c9477ecc






......@@ -10,9 +10,10 @@









 ******************************************************************************/










package heros.flowfunc;





















import static java.util.Collections.emptySet;










import static java.util.Collections.singleton;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.Set;

























......@@ -33,9 +34,9 @@ public class Kill<D> implements FlowFunction<D> {




















 public Set<D> computeTargets(D source) {










 if(source==killValue) {










 return Collections.emptySet();










 return emptySet();










 } else










 return Collections.singleton(source);










 return singleton(source);










 }










 










}














src/heros/flowfunc/KillAll.java








View file @ c9477ecc






......@@ -10,9 +10,9 @@









 ******************************************************************************/










package heros.flowfunc;





















import static java.util.Collections.emptySet;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.Set;

























......@@ -31,7 +31,7 @@ public class KillAll<D> implements FlowFunction<D> {









 private KillAll(){} //use v() instead





















 public Set<D> computeTargets(D source) {










 return Collections.emptySet();










 return emptySet();










 }










 










 @SuppressWarnings("unchecked")



......














src/heros/flowfunc/Transfer.java








View file @ c9477ecc






......@@ -10,10 +10,10 @@









 ******************************************************************************/










package heros.flowfunc;





















import static heros.TwoElementSet.twoElementSet;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;

























......@@ -30,10 +30,7 @@ public class Transfer<D> implements FlowFunction<D> {




















 public Set<D> computeTargets(D source) {










 if(source==fromValue) {










 HashSet<D> res = new HashSet<D>();










 res.add(source);










 res.add(toValue);










 return res;










 return twoElementSet(source, toValue);










 } else if(source==toValue) {










 return Collections.emptySet();










 } else {



......














src/heros/flowfunc/Union.java








View file @ c9477ecc






......@@ -10,14 +10,13 @@









 ******************************************************************************/










package heros.flowfunc;





















import static com.google.common.collect.Sets.newHashSet;










import heros.FlowFunction;





















import java.util.ArrayList;










import java.util.List;










import java.util.Set;





















import com.google.common.collect.Sets;
































/**










 * Represents the union of a set of flow functions.



......@@ -31,7 +30,7 @@ public class Union<D> implements FlowFunction<D> {









 } 





















 public Set<D> computeTargets(D source) {










 Set<D> res = Sets.newHashSet();










 Set<D> res = newHashSet();










 for (FlowFunction<D> func : funcs) {










 res.addAll(func.computeTargets(source));










 }



......














src/heros/solver/IDESolver.java








View file @ c9477ecc






......@@ -578,7 +578,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 if(targetVal!=zeroValue) {










 logger.trace("EDGE: <{},{}> -> <{},{}> - {}", icfg.getMethodOf(target), sourceVal, target, targetVal, fPrime );





















 }










 }










 }



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
c9477ecc


authored
Jan 15, 2014
by


Steven Arzt



Browse files



Commit
c9477ecc


authored
Jan 15, 2014
by


Steven Arzt

c9477eccauthoredbySteven Arzt

Merge branch 'develop' of github.com:Sable/heros into develop






parents
0b0c5ba4
f21c884a
















parents
0b0c5ba4
f21c884a





parents












Changes
9
9


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










build.xml








View file @ c9477ecc






......@@ -16,6 +16,8 @@









 </manifest>










 <fileset dir="bin"/>










 <zipfileset src="${guava.jar}"/>










 <zipfileset src="${slf4j-api.jar}"/>










 <zipfileset src="${slf4j-simple.jar}"/>










 </jar>










 </target>














......@@ -33,8 +35,8 @@









 >










 <classpath>










 <pathelement location="${guava.jar}"/>










 <pathelement location="slf4j-api-1.7.5.jar"/>










 <pathelement location="slf4j-simple-1.7.5.jar"/>










 <pathelement location="${slf4j-api.jar}"/>










 <pathelement location="${slf4j-simple.jar}"/>










 </classpath>










 <src path="src"/>










 </javac>



......














src/heros/TwoElementSet.java



0 â†’ 100644







View file @ c9477ecc













/*******************************************************************************










 * Copyright (c) 2013 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.AbstractSet;










import java.util.Iterator;










import java.util.NoSuchElementException;





















/**










 * An unmodifiable set holding exactly two elements. Particularly useful within flow functions.










 *










 * @param <E>










 * @see FlowFunction










 */










public class TwoElementSet<E> extends AbstractSet<E> {










 










 protected final E first, second;










 










 public TwoElementSet(E first, E second) {










 this.first = first;










 this.second = second;










 } 










 










 public static <E> TwoElementSet<E> twoElementSet(E first, E second) {










 return new TwoElementSet<E>(first, second);










 }










 










 @Override










 public Iterator<E> iterator() {










 return new Iterator<E>() { 










 int elementsRead = 0;










 










 @Override










 public boolean hasNext() {










 return elementsRead<2;










 }





















 @Override










 public E next() {










 switch(elementsRead) {










 case 0:










 elementsRead++;










 return first;










 case 1:










 elementsRead++;










 return second;










 default:










 throw new NoSuchElementException(); 










 }










 }





















 @Override










 public void remove() {










 throw new UnsupportedOperationException();










 }










 };










 }





















 @Override










 public int size() {










 return 2;










 } 










}














src/heros/flowfunc/Gen.java








View file @ c9477ecc






......@@ -10,10 +10,10 @@









 ******************************************************************************/










package heros.flowfunc;





















import static heros.TwoElementSet.twoElementSet;










import static java.util.Collections.singleton;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;

























......@@ -36,12 +36,9 @@ public class Gen<D> implements FlowFunction<D> {




















 public Set<D> computeTargets(D source) {










 if(source==zeroValue) {










 HashSet<D> res = new HashSet<D>();










 res.add(source);










 res.add(genValue);










 return res;










 return twoElementSet(source, genValue);










 } else










 return Collections.singleton(source);










 return singleton(source);










 }










 










}














src/heros/flowfunc/Identity.java








View file @ c9477ecc






......@@ -10,9 +10,9 @@









 ******************************************************************************/










package heros.flowfunc;





















import static java.util.Collections.singleton;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.Set;

























......@@ -25,7 +25,7 @@ public class Identity<D> implements FlowFunction<D> {









 private Identity(){} //use v() instead





















 public Set<D> computeTargets(D source) {










 return Collections.singleton(source);










 return singleton(source);










 }





















 @SuppressWarnings("unchecked")



......














src/heros/flowfunc/Kill.java








View file @ c9477ecc






......@@ -10,9 +10,10 @@









 ******************************************************************************/










package heros.flowfunc;





















import static java.util.Collections.emptySet;










import static java.util.Collections.singleton;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.Set;

























......@@ -33,9 +34,9 @@ public class Kill<D> implements FlowFunction<D> {




















 public Set<D> computeTargets(D source) {










 if(source==killValue) {










 return Collections.emptySet();










 return emptySet();










 } else










 return Collections.singleton(source);










 return singleton(source);










 }










 










}














src/heros/flowfunc/KillAll.java








View file @ c9477ecc






......@@ -10,9 +10,9 @@









 ******************************************************************************/










package heros.flowfunc;





















import static java.util.Collections.emptySet;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.Set;

























......@@ -31,7 +31,7 @@ public class KillAll<D> implements FlowFunction<D> {









 private KillAll(){} //use v() instead





















 public Set<D> computeTargets(D source) {










 return Collections.emptySet();










 return emptySet();










 }










 










 @SuppressWarnings("unchecked")



......














src/heros/flowfunc/Transfer.java








View file @ c9477ecc






......@@ -10,10 +10,10 @@









 ******************************************************************************/










package heros.flowfunc;





















import static heros.TwoElementSet.twoElementSet;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;

























......@@ -30,10 +30,7 @@ public class Transfer<D> implements FlowFunction<D> {




















 public Set<D> computeTargets(D source) {










 if(source==fromValue) {










 HashSet<D> res = new HashSet<D>();










 res.add(source);










 res.add(toValue);










 return res;










 return twoElementSet(source, toValue);










 } else if(source==toValue) {










 return Collections.emptySet();










 } else {



......














src/heros/flowfunc/Union.java








View file @ c9477ecc






......@@ -10,14 +10,13 @@









 ******************************************************************************/










package heros.flowfunc;





















import static com.google.common.collect.Sets.newHashSet;










import heros.FlowFunction;





















import java.util.ArrayList;










import java.util.List;










import java.util.Set;





















import com.google.common.collect.Sets;
































/**










 * Represents the union of a set of flow functions.



......@@ -31,7 +30,7 @@ public class Union<D> implements FlowFunction<D> {









 } 





















 public Set<D> computeTargets(D source) {










 Set<D> res = Sets.newHashSet();










 Set<D> res = newHashSet();










 for (FlowFunction<D> func : funcs) {










 res.addAll(func.computeTargets(source));










 }



......














src/heros/solver/IDESolver.java








View file @ c9477ecc






......@@ -578,7 +578,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 if(targetVal!=zeroValue) {










 logger.trace("EDGE: <{},{}> -> <{},{}> - {}", icfg.getMethodOf(target), sourceVal, target, targetVal, fPrime );





















 }










 }










 }



......














build.xml








View file @ c9477ecc






......@@ -16,6 +16,8 @@









 </manifest>










 <fileset dir="bin"/>










 <zipfileset src="${guava.jar}"/>










 <zipfileset src="${slf4j-api.jar}"/>










 <zipfileset src="${slf4j-simple.jar}"/>










 </jar>










 </target>














......@@ -33,8 +35,8 @@









 >










 <classpath>










 <pathelement location="${guava.jar}"/>










 <pathelement location="slf4j-api-1.7.5.jar"/>










 <pathelement location="slf4j-simple-1.7.5.jar"/>










 <pathelement location="${slf4j-api.jar}"/>










 <pathelement location="${slf4j-simple.jar}"/>










 </classpath>










 <src path="src"/>










 </javac>



......












build.xml








View file @ c9477ecc








build.xml










View file @ c9477ecc


c9477ecc



......@@ -16,6 +16,8 @@









 </manifest>










 <fileset dir="bin"/>










 <zipfileset src="${guava.jar}"/>










 <zipfileset src="${slf4j-api.jar}"/>










 <zipfileset src="${slf4j-simple.jar}"/>










 </jar>










 </target>














......@@ -33,8 +35,8 @@









 >










 <classpath>










 <pathelement location="${guava.jar}"/>










 <pathelement location="slf4j-api-1.7.5.jar"/>










 <pathelement location="slf4j-simple-1.7.5.jar"/>










 <pathelement location="${slf4j-api.jar}"/>










 <pathelement location="${slf4j-simple.jar}"/>










 </classpath>










 <src path="src"/>










 </javac>



......






......@@ -16,6 +16,8 @@









 </manifest>










 <fileset dir="bin"/>










 <zipfileset src="${guava.jar}"/>










 <zipfileset src="${slf4j-api.jar}"/>










 <zipfileset src="${slf4j-simple.jar}"/>










 </jar>










 </target>














......@@ -33,8 +35,8 @@









 >










 <classpath>










 <pathelement location="${guava.jar}"/>










 <pathelement location="slf4j-api-1.7.5.jar"/>










 <pathelement location="slf4j-simple-1.7.5.jar"/>










 <pathelement location="${slf4j-api.jar}"/>










 <pathelement location="${slf4j-simple.jar}"/>










 </classpath>










 <src path="src"/>










 </javac>



......


 </manifest></manifest> <fileset dir="bin"/><filesetdir="bin"/> <zipfileset src="${guava.jar}"/><zipfilesetsrc="${guava.jar}"/> <zipfileset src="${slf4j-api.jar}"/><zipfilesetsrc="${slf4j-api.jar}"/> <zipfileset src="${slf4j-simple.jar}"/><zipfilesetsrc="${slf4j-simple.jar}"/> </jar></jar> </target></target> >> <classpath><classpath> <pathelement location="${guava.jar}"/><pathelementlocation="${guava.jar}"/> <pathelement location="slf4j-api-1.7.5.jar"/><pathelementlocation="slf4j-api-1.7.5.jar"-1.7.5/> <pathelement location="slf4j-simple-1.7.5.jar"/><pathelementlocation="slf4j-simple-1.7.5.jar"-1.7.5/> <pathelement location="${slf4j-api.jar}"/><pathelementlocation="${slf4j-api.jar}"${}/> <pathelement location="${slf4j-simple.jar}"/><pathelementlocation="${slf4j-simple.jar}"${}/> </classpath></classpath> <src path="src"/><srcpath="src"/> </javac></javac>








src/heros/TwoElementSet.java



0 â†’ 100644







View file @ c9477ecc













/*******************************************************************************










 * Copyright (c) 2013 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.AbstractSet;










import java.util.Iterator;










import java.util.NoSuchElementException;





















/**










 * An unmodifiable set holding exactly two elements. Particularly useful within flow functions.










 *










 * @param <E>










 * @see FlowFunction










 */










public class TwoElementSet<E> extends AbstractSet<E> {










 










 protected final E first, second;










 










 public TwoElementSet(E first, E second) {










 this.first = first;










 this.second = second;










 } 










 










 public static <E> TwoElementSet<E> twoElementSet(E first, E second) {










 return new TwoElementSet<E>(first, second);










 }










 










 @Override










 public Iterator<E> iterator() {










 return new Iterator<E>() { 










 int elementsRead = 0;










 










 @Override










 public boolean hasNext() {










 return elementsRead<2;










 }





















 @Override










 public E next() {










 switch(elementsRead) {










 case 0:










 elementsRead++;










 return first;










 case 1:










 elementsRead++;










 return second;










 default:










 throw new NoSuchElementException(); 










 }










 }





















 @Override










 public void remove() {










 throw new UnsupportedOperationException();










 }










 };










 }





















 @Override










 public int size() {










 return 2;










 } 










}












src/heros/TwoElementSet.java



0 â†’ 100644







View file @ c9477ecc








src/heros/TwoElementSet.java



0 â†’ 100644









View file @ c9477ecc


c9477ecc










/*******************************************************************************










 * Copyright (c) 2013 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.AbstractSet;










import java.util.Iterator;










import java.util.NoSuchElementException;





















/**










 * An unmodifiable set holding exactly two elements. Particularly useful within flow functions.










 *










 * @param <E>










 * @see FlowFunction










 */










public class TwoElementSet<E> extends AbstractSet<E> {










 










 protected final E first, second;










 










 public TwoElementSet(E first, E second) {










 this.first = first;










 this.second = second;










 } 










 










 public static <E> TwoElementSet<E> twoElementSet(E first, E second) {










 return new TwoElementSet<E>(first, second);










 }










 










 @Override










 public Iterator<E> iterator() {










 return new Iterator<E>() { 










 int elementsRead = 0;










 










 @Override










 public boolean hasNext() {










 return elementsRead<2;










 }





















 @Override










 public E next() {










 switch(elementsRead) {










 case 0:










 elementsRead++;










 return first;










 case 1:










 elementsRead++;










 return second;










 default:










 throw new NoSuchElementException(); 










 }










 }





















 @Override










 public void remove() {










 throw new UnsupportedOperationException();










 }










 };










 }





















 @Override










 public int size() {










 return 2;










 } 










}













/*******************************************************************************










 * Copyright (c) 2013 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.AbstractSet;










import java.util.Iterator;










import java.util.NoSuchElementException;





















/**










 * An unmodifiable set holding exactly two elements. Particularly useful within flow functions.










 *










 * @param <E>










 * @see FlowFunction










 */










public class TwoElementSet<E> extends AbstractSet<E> {










 










 protected final E first, second;










 










 public TwoElementSet(E first, E second) {










 this.first = first;










 this.second = second;










 } 










 










 public static <E> TwoElementSet<E> twoElementSet(E first, E second) {










 return new TwoElementSet<E>(first, second);










 }










 










 @Override










 public Iterator<E> iterator() {










 return new Iterator<E>() { 










 int elementsRead = 0;










 










 @Override










 public boolean hasNext() {










 return elementsRead<2;










 }





















 @Override










 public E next() {










 switch(elementsRead) {










 case 0:










 elementsRead++;










 return first;










 case 1:










 elementsRead++;










 return second;










 default:










 throw new NoSuchElementException(); 










 }










 }





















 @Override










 public void remove() {










 throw new UnsupportedOperationException();










 }










 };










 }





















 @Override










 public int size() {










 return 2;










 } 










}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2013 Eric Bodden. * Copyright (c) 2013 Eric Bodden. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Eric Bodden - initial API and implementation *     Eric Bodden - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros;packageheros;import java.util.AbstractSet;importjava.util.AbstractSet;import java.util.Iterator;importjava.util.Iterator;import java.util.NoSuchElementException;importjava.util.NoSuchElementException;/**/** * An unmodifiable set holding exactly two elements. Particularly useful within flow functions. * An unmodifiable set holding exactly two elements. Particularly useful within flow functions. * * * @param <E> * @param <E> * @see FlowFunction * @see FlowFunction */ */public class TwoElementSet<E> extends AbstractSet<E> {publicclassTwoElementSet<E>extendsAbstractSet<E>{  protected final E first, second;protectedfinalEfirst,second;  public TwoElementSet(E first, E second) {publicTwoElementSet(Efirst,Esecond){ this.first = first;this.first=first; this.second = second;this.second=second; } }  public static <E> TwoElementSet<E> twoElementSet(E first, E second) {publicstatic<E>TwoElementSet<E>twoElementSet(Efirst,Esecond){ return new TwoElementSet<E>(first, second);returnnewTwoElementSet<E>(first,second); }}  @Override@Override public Iterator<E> iterator() {publicIterator<E>iterator(){ return new Iterator<E>() { returnnewIterator<E>(){ int elementsRead = 0;intelementsRead=0;  @Override@Override public boolean hasNext() {publicbooleanhasNext(){ return elementsRead<2;returnelementsRead<2; }} @Override@Override public E next() {publicEnext(){ switch(elementsRead) {switch(elementsRead){ case 0:case0: elementsRead++;elementsRead++; return first;returnfirst; case 1:case1: elementsRead++;elementsRead++; return second;returnsecond; default:default: throw new NoSuchElementException(); thrownewNoSuchElementException(); }} }} @Override@Override public void remove() {publicvoidremove(){ throw new UnsupportedOperationException();thrownewUnsupportedOperationException(); }} };}; }} @Override@Override public int size() {publicintsize(){ return 2;return2; } }}}








src/heros/flowfunc/Gen.java








View file @ c9477ecc






......@@ -10,10 +10,10 @@









 ******************************************************************************/










package heros.flowfunc;





















import static heros.TwoElementSet.twoElementSet;










import static java.util.Collections.singleton;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;

























......@@ -36,12 +36,9 @@ public class Gen<D> implements FlowFunction<D> {




















 public Set<D> computeTargets(D source) {










 if(source==zeroValue) {










 HashSet<D> res = new HashSet<D>();










 res.add(source);










 res.add(genValue);










 return res;










 return twoElementSet(source, genValue);










 } else










 return Collections.singleton(source);










 return singleton(source);










 }










 










}












src/heros/flowfunc/Gen.java








View file @ c9477ecc








src/heros/flowfunc/Gen.java










View file @ c9477ecc


c9477ecc



......@@ -10,10 +10,10 @@









 ******************************************************************************/










package heros.flowfunc;





















import static heros.TwoElementSet.twoElementSet;










import static java.util.Collections.singleton;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;

























......@@ -36,12 +36,9 @@ public class Gen<D> implements FlowFunction<D> {




















 public Set<D> computeTargets(D source) {










 if(source==zeroValue) {










 HashSet<D> res = new HashSet<D>();










 res.add(source);










 res.add(genValue);










 return res;










 return twoElementSet(source, genValue);










 } else










 return Collections.singleton(source);










 return singleton(source);










 }










 










}






......@@ -10,10 +10,10 @@









 ******************************************************************************/










package heros.flowfunc;





















import static heros.TwoElementSet.twoElementSet;










import static java.util.Collections.singleton;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;

























......@@ -36,12 +36,9 @@ public class Gen<D> implements FlowFunction<D> {




















 public Set<D> computeTargets(D source) {










 if(source==zeroValue) {










 HashSet<D> res = new HashSet<D>();










 res.add(source);










 res.add(genValue);










 return res;










 return twoElementSet(source, genValue);










 } else










 return Collections.singleton(source);










 return singleton(source);










 }










 










}


 ******************************************************************************/ ******************************************************************************/package heros.flowfunc;packageheros.flowfunc;import static heros.TwoElementSet.twoElementSet;importstaticheros.TwoElementSet.twoElementSet;import static java.util.Collections.singleton;importstaticjava.util.Collections.singleton;import heros.FlowFunction;importheros.FlowFunction;import java.util.Collections;importjava.util.Collections;import java.util.HashSet;importjava.util.HashSet;import java.util.Set;importjava.util.Set; public Set<D> computeTargets(D source) {publicSet<D>computeTargets(Dsource){ if(source==zeroValue) {if(source==zeroValue){ HashSet<D> res = new HashSet<D>();HashSet<D>res=newHashSet<D>(); res.add(source);res.add(source); res.add(genValue);res.add(genValue); return res;returnres; return twoElementSet(source, genValue);returntwoElementSet(source,genValue); } else}else return Collections.singleton(source);returnCollectionsCollections..singleton(source); return singleton(source);returnsingleton(source); }} }}








src/heros/flowfunc/Identity.java








View file @ c9477ecc






......@@ -10,9 +10,9 @@









 ******************************************************************************/










package heros.flowfunc;





















import static java.util.Collections.singleton;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.Set;

























......@@ -25,7 +25,7 @@ public class Identity<D> implements FlowFunction<D> {









 private Identity(){} //use v() instead





















 public Set<D> computeTargets(D source) {










 return Collections.singleton(source);










 return singleton(source);










 }





















 @SuppressWarnings("unchecked")



......












src/heros/flowfunc/Identity.java








View file @ c9477ecc








src/heros/flowfunc/Identity.java










View file @ c9477ecc


c9477ecc



......@@ -10,9 +10,9 @@









 ******************************************************************************/










package heros.flowfunc;





















import static java.util.Collections.singleton;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.Set;

























......@@ -25,7 +25,7 @@ public class Identity<D> implements FlowFunction<D> {









 private Identity(){} //use v() instead





















 public Set<D> computeTargets(D source) {










 return Collections.singleton(source);










 return singleton(source);










 }





















 @SuppressWarnings("unchecked")



......






......@@ -10,9 +10,9 @@









 ******************************************************************************/










package heros.flowfunc;





















import static java.util.Collections.singleton;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.Set;

























......@@ -25,7 +25,7 @@ public class Identity<D> implements FlowFunction<D> {









 private Identity(){} //use v() instead





















 public Set<D> computeTargets(D source) {










 return Collections.singleton(source);










 return singleton(source);










 }





















 @SuppressWarnings("unchecked")



......


 ******************************************************************************/ ******************************************************************************/package heros.flowfunc;packageheros.flowfunc;import static java.util.Collections.singleton;importstaticjava.util.Collections.singleton;import heros.FlowFunction;importheros.FlowFunction;import java.util.Collections;importjava.util.Collections;import java.util.Set;importjava.util.Set; private Identity(){} //use v() insteadprivateIdentity(){}//use v() instead public Set<D> computeTargets(D source) {publicSet<D>computeTargets(Dsource){ return Collections.singleton(source);returnCollectionsCollections..singleton(source); return singleton(source);returnsingleton(source); }} @SuppressWarnings("unchecked")@SuppressWarnings("unchecked")








src/heros/flowfunc/Kill.java








View file @ c9477ecc






......@@ -10,9 +10,10 @@









 ******************************************************************************/










package heros.flowfunc;





















import static java.util.Collections.emptySet;










import static java.util.Collections.singleton;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.Set;

























......@@ -33,9 +34,9 @@ public class Kill<D> implements FlowFunction<D> {




















 public Set<D> computeTargets(D source) {










 if(source==killValue) {










 return Collections.emptySet();










 return emptySet();










 } else










 return Collections.singleton(source);










 return singleton(source);










 }










 










}












src/heros/flowfunc/Kill.java








View file @ c9477ecc








src/heros/flowfunc/Kill.java










View file @ c9477ecc


c9477ecc



......@@ -10,9 +10,10 @@









 ******************************************************************************/










package heros.flowfunc;





















import static java.util.Collections.emptySet;










import static java.util.Collections.singleton;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.Set;

























......@@ -33,9 +34,9 @@ public class Kill<D> implements FlowFunction<D> {




















 public Set<D> computeTargets(D source) {










 if(source==killValue) {










 return Collections.emptySet();










 return emptySet();










 } else










 return Collections.singleton(source);










 return singleton(source);










 }










 










}






......@@ -10,9 +10,10 @@









 ******************************************************************************/










package heros.flowfunc;





















import static java.util.Collections.emptySet;










import static java.util.Collections.singleton;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.Set;

























......@@ -33,9 +34,9 @@ public class Kill<D> implements FlowFunction<D> {




















 public Set<D> computeTargets(D source) {










 if(source==killValue) {










 return Collections.emptySet();










 return emptySet();










 } else










 return Collections.singleton(source);










 return singleton(source);










 }










 










}


 ******************************************************************************/ ******************************************************************************/package heros.flowfunc;packageheros.flowfunc;import static java.util.Collections.emptySet;importstaticjava.util.Collections.emptySet;import static java.util.Collections.singleton;importstaticjava.util.Collections.singleton;import heros.FlowFunction;importheros.FlowFunction;import java.util.Collections;importjava.util.Collections;import java.util.Set;importjava.util.Set; public Set<D> computeTargets(D source) {publicSet<D>computeTargets(Dsource){ if(source==killValue) {if(source==killValue){ return Collections.emptySet();returnCollectionsCollections..emptySet(); return emptySet();returnemptySet(); } else}else return Collections.singleton(source);returnCollectionsCollections..singleton(source); return singleton(source);returnsingleton(source); }} }}








src/heros/flowfunc/KillAll.java








View file @ c9477ecc






......@@ -10,9 +10,9 @@









 ******************************************************************************/










package heros.flowfunc;





















import static java.util.Collections.emptySet;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.Set;

























......@@ -31,7 +31,7 @@ public class KillAll<D> implements FlowFunction<D> {









 private KillAll(){} //use v() instead





















 public Set<D> computeTargets(D source) {










 return Collections.emptySet();










 return emptySet();










 }










 










 @SuppressWarnings("unchecked")



......












src/heros/flowfunc/KillAll.java








View file @ c9477ecc








src/heros/flowfunc/KillAll.java










View file @ c9477ecc


c9477ecc



......@@ -10,9 +10,9 @@









 ******************************************************************************/










package heros.flowfunc;





















import static java.util.Collections.emptySet;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.Set;

























......@@ -31,7 +31,7 @@ public class KillAll<D> implements FlowFunction<D> {









 private KillAll(){} //use v() instead





















 public Set<D> computeTargets(D source) {










 return Collections.emptySet();










 return emptySet();










 }










 










 @SuppressWarnings("unchecked")



......






......@@ -10,9 +10,9 @@









 ******************************************************************************/










package heros.flowfunc;





















import static java.util.Collections.emptySet;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.Set;

























......@@ -31,7 +31,7 @@ public class KillAll<D> implements FlowFunction<D> {









 private KillAll(){} //use v() instead





















 public Set<D> computeTargets(D source) {










 return Collections.emptySet();










 return emptySet();










 }










 










 @SuppressWarnings("unchecked")



......


 ******************************************************************************/ ******************************************************************************/package heros.flowfunc;packageheros.flowfunc;import static java.util.Collections.emptySet;importstaticjava.util.Collections.emptySet;import heros.FlowFunction;importheros.FlowFunction;import java.util.Collections;importjava.util.Collections;import java.util.Set;importjava.util.Set; private KillAll(){} //use v() insteadprivateKillAll(){}//use v() instead public Set<D> computeTargets(D source) {publicSet<D>computeTargets(Dsource){ return Collections.emptySet();returnCollectionsCollections..emptySet(); return emptySet();returnemptySet(); }}  @SuppressWarnings("unchecked")@SuppressWarnings("unchecked")








src/heros/flowfunc/Transfer.java








View file @ c9477ecc






......@@ -10,10 +10,10 @@









 ******************************************************************************/










package heros.flowfunc;





















import static heros.TwoElementSet.twoElementSet;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;

























......@@ -30,10 +30,7 @@ public class Transfer<D> implements FlowFunction<D> {




















 public Set<D> computeTargets(D source) {










 if(source==fromValue) {










 HashSet<D> res = new HashSet<D>();










 res.add(source);










 res.add(toValue);










 return res;










 return twoElementSet(source, toValue);










 } else if(source==toValue) {










 return Collections.emptySet();










 } else {



......












src/heros/flowfunc/Transfer.java








View file @ c9477ecc








src/heros/flowfunc/Transfer.java










View file @ c9477ecc


c9477ecc



......@@ -10,10 +10,10 @@









 ******************************************************************************/










package heros.flowfunc;





















import static heros.TwoElementSet.twoElementSet;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;

























......@@ -30,10 +30,7 @@ public class Transfer<D> implements FlowFunction<D> {




















 public Set<D> computeTargets(D source) {










 if(source==fromValue) {










 HashSet<D> res = new HashSet<D>();










 res.add(source);










 res.add(toValue);










 return res;










 return twoElementSet(source, toValue);










 } else if(source==toValue) {










 return Collections.emptySet();










 } else {



......






......@@ -10,10 +10,10 @@









 ******************************************************************************/










package heros.flowfunc;





















import static heros.TwoElementSet.twoElementSet;










import heros.FlowFunction;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;

























......@@ -30,10 +30,7 @@ public class Transfer<D> implements FlowFunction<D> {




















 public Set<D> computeTargets(D source) {










 if(source==fromValue) {










 HashSet<D> res = new HashSet<D>();










 res.add(source);










 res.add(toValue);










 return res;










 return twoElementSet(source, toValue);










 } else if(source==toValue) {










 return Collections.emptySet();










 } else {



......


 ******************************************************************************/ ******************************************************************************/package heros.flowfunc;packageheros.flowfunc;import static heros.TwoElementSet.twoElementSet;importstaticheros.TwoElementSet.twoElementSet;import heros.FlowFunction;importheros.FlowFunction;import java.util.Collections;importjava.util.Collections;import java.util.HashSet;importjava.util.HashSet;import java.util.Set;importjava.util.Set; public Set<D> computeTargets(D source) {publicSet<D>computeTargets(Dsource){ if(source==fromValue) {if(source==fromValue){ HashSet<D> res = new HashSet<D>();HashSet<D>res=newHashSet<D>(); res.add(source);res.add(source); res.add(toValue);res.add(toValue); return res;returnres; return twoElementSet(source, toValue);returntwoElementSet(source,toValue); } else if(source==toValue) {}elseif(source==toValue){ return Collections.emptySet();returnCollections.emptySet(); } else {}else{








src/heros/flowfunc/Union.java








View file @ c9477ecc






......@@ -10,14 +10,13 @@









 ******************************************************************************/










package heros.flowfunc;





















import static com.google.common.collect.Sets.newHashSet;










import heros.FlowFunction;





















import java.util.ArrayList;










import java.util.List;










import java.util.Set;





















import com.google.common.collect.Sets;
































/**










 * Represents the union of a set of flow functions.



......@@ -31,7 +30,7 @@ public class Union<D> implements FlowFunction<D> {









 } 





















 public Set<D> computeTargets(D source) {










 Set<D> res = Sets.newHashSet();










 Set<D> res = newHashSet();










 for (FlowFunction<D> func : funcs) {










 res.addAll(func.computeTargets(source));










 }



......












src/heros/flowfunc/Union.java








View file @ c9477ecc








src/heros/flowfunc/Union.java










View file @ c9477ecc


c9477ecc



......@@ -10,14 +10,13 @@









 ******************************************************************************/










package heros.flowfunc;





















import static com.google.common.collect.Sets.newHashSet;










import heros.FlowFunction;





















import java.util.ArrayList;










import java.util.List;










import java.util.Set;





















import com.google.common.collect.Sets;
































/**










 * Represents the union of a set of flow functions.



......@@ -31,7 +30,7 @@ public class Union<D> implements FlowFunction<D> {









 } 





















 public Set<D> computeTargets(D source) {










 Set<D> res = Sets.newHashSet();










 Set<D> res = newHashSet();










 for (FlowFunction<D> func : funcs) {










 res.addAll(func.computeTargets(source));










 }



......






......@@ -10,14 +10,13 @@









 ******************************************************************************/










package heros.flowfunc;





















import static com.google.common.collect.Sets.newHashSet;










import heros.FlowFunction;





















import java.util.ArrayList;










import java.util.List;










import java.util.Set;





















import com.google.common.collect.Sets;
































/**










 * Represents the union of a set of flow functions.



......@@ -31,7 +30,7 @@ public class Union<D> implements FlowFunction<D> {









 } 





















 public Set<D> computeTargets(D source) {










 Set<D> res = Sets.newHashSet();










 Set<D> res = newHashSet();










 for (FlowFunction<D> func : funcs) {










 res.addAll(func.computeTargets(source));










 }



......


 ******************************************************************************/ ******************************************************************************/package heros.flowfunc;packageheros.flowfunc;import static com.google.common.collect.Sets.newHashSet;importstaticcom.google.common.collect.Sets.newHashSet;import heros.FlowFunction;importheros.FlowFunction;import java.util.ArrayList;importjava.util.ArrayList;import java.util.List;importjava.util.List;import java.util.Set;importjava.util.Set;import com.google.common.collect.Sets;importcom.google.common.collect.Sets;/**/** * Represents the union of a set of flow functions. * Represents the union of a set of flow functions. } } public Set<D> computeTargets(D source) {publicSet<D>computeTargets(Dsource){ Set<D> res = Sets.newHashSet();Set<D>res=SetsSets..newHashSet(); Set<D> res = newHashSet();Set<D>res=newHashSet(); for (FlowFunction<D> func : funcs) {for(FlowFunction<D>func:funcs){ res.addAll(func.computeTargets(source));res.addAll(func.computeTargets(source)); }}








src/heros/solver/IDESolver.java








View file @ c9477ecc






......@@ -578,7 +578,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 if(targetVal!=zeroValue) {










 logger.trace("EDGE: <{},{}> -> <{},{}> - {}", icfg.getMethodOf(target), sourceVal, target, targetVal, fPrime );





















 }










 }










 }



......












src/heros/solver/IDESolver.java








View file @ c9477ecc








src/heros/solver/IDESolver.java










View file @ c9477ecc


c9477ecc



......@@ -578,7 +578,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 if(targetVal!=zeroValue) {










 logger.trace("EDGE: <{},{}> -> <{},{}> - {}", icfg.getMethodOf(target), sourceVal, target, targetVal, fPrime );





















 }










 }










 }



......






......@@ -578,7 +578,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 if(targetVal!=zeroValue) {










 logger.trace("EDGE: <{},{}> -> <{},{}> - {}", icfg.getMethodOf(target), sourceVal, target, targetVal, fPrime );





















 }










 }










 }



......


 if(targetVal!=zeroValue) {if(targetVal!=zeroValue){ logger.trace("EDGE: <{},{}> -> <{},{}> - {}", icfg.getMethodOf(target), sourceVal, target, targetVal, fPrime );logger.trace("EDGE: <{},{}> -> <{},{}> - {}",icfg.getMethodOf(target),sourceVal,target,targetVal,fPrime); }} }} }}









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






