



GitLab












Menu




Projects
Groups
Snippets


















/








Help







Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab












Menu




Projects
Groups
Snippets


















/








Help







Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab












Menu




Projects
Groups
Snippets



GitLab






GitLab




Menu




Projects
Groups
Snippets




Menu


Projects
Groups
Snippets















/








Help







Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in
















/














/








Help







Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help



Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab




Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


haskell






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Yu Liu haskell
Commits

20804688















Commit
20804688


authored
Jun 18, 2013
by


darlliu



Browse files




new codes







parent
e8256061













Changes
5




Hide whitespace changes

Inline
Side-by-side















cybert/cd271ex.hs








View file @ 20804688













-- reproduce the analysis for CD271 pvals, functional stype










-- reproduce the analysis for CD271 pvals, functional style










--










import Cybert










import Control.Monad



......@@ -7,9 +7,6 @@ import Data.Set (fromList, toList, union, empty)









extract:: Maybe [a] -> [a]










extract Nothing = []










extract (Just x) = x










extractS:: Maybe String -> String










extractS Nothing = ""










extractS (Just x) = x










pfind x = map (filter (\y -> probe y == probe x))










 -- find entries with same probeid










countln = foldr (\z acc -> acc + (length z)) 0



......














ml/BoolNet.hs



0 → 100644







View file @ 20804688













module BoolNet 










(










 Feature{










 probe,










 genesym,










 pval,










 b










 },










 extractFeatures,










 extractFeature










) where





















import Data.Bool










import Data.Maybe










import Data.Either










import qualified Data.Bits as Bit










import qualified Cybert as C





















data Feature = Feature {










 probe :: String ,










 genesym :: Maybe String ,










 pval :: Float ,










 b :: Maybe Bool --true, false, or nothing (insignificant)










} deriving (Show, Read)










feature = Feature {










 probe = "None",










 genesym = Just "None",










 pval = 1,










 b = Nothing










}





















extractFeature :: Float -> C.Cybert_entry -> Feature










extractFeature threshold cybt = feature {










 probe = C.probe cybt,










 genesym = C.genesym cybt,










 pval = C.pval cybt,










 b = if (C.pval cybt) > threshold then Nothing










 else either (\x -> Nothing)










 (\x -> if (length x) < 2 then Nothing










 else Just( x!!0 > x!!1))










 (C.mean cybt)










 }










extractFeatures = map extractFeature

























ml/Cybert.hs



0 → 100644







View file @ 20804688













--a simple loader for cybert data










--generates cybert reports and tables










--










--has the following:










--1, a polymorphic and flexible data structure indexed by multiple










--keys.










--2, ability to do set operation, selection filtering and mapping 










--on entries










--3, IO for both human readable format and message passing to other python










--code










--










{-module definitions -}










module Cybert










(










 Cybert_entry(NA, Cybert,probe,genesym,










 sample, collection, mean, bf, bh, sds, 










 pval,ratio,secondaryRefs,secondaryData),










 cybert_entry,










 showCybertEntries,










 entriesByFold,










 entriesByPval,










 entriesBySym,










 entriesByUpDown,










 entriesBySecondaryRef,










 cybertToSet,










 loadCybert,










 exportCybert,










 exportGeneSyms,










 exportProbes










) where










{-end module definitions -}










import Data.Bits










import Data.List










import Data.Maybe










import Data.Char










import System.IO










import System.IO.Error










import qualified Data.Set as S










import qualified Data.Map as M










import qualified Data.ByteString.Char8 as B





















{-basic data types-}










data Cybert_entry = NA | Cybert {










 probe :: String ,










 genesym :: Maybe String ,










 sample :: [String] ,










 collection :: Maybe String , --which dataset










 mean :: Either Float [Float] , --multiple means










 sds :: Either Float [Float],










 pval :: Float, --the pairwise or ANOVA pval










 bf :: Float,










 bh :: Float,










 ratio :: Either Float [Float], --pairwise ratio or numerous ratios










 secondaryRefs :: M.Map String String , --optional secondary refs










 secondaryData :: M.Map String Float , --optional secondary data










 raw :: B.ByteString










}










cybert_entry = Cybert{










 -- default constructor










 probe = "NONE",










 genesym = Nothing,










 sample = [],










 collection = Nothing,










 mean = Right [],










 sds = Right [],










 pval = -1,










 bf = -1,










 bh = -1,










 ratio = Left (-1),










 secondaryRefs = M.fromList [("","")],










 secondaryData = M.fromList [("",0)],










 raw = B.empty










}





















hasher :: String -> Int










hasher = foldl (\h c -> 33*h `xor` fromEnum c) 5381










cybertHash :: Cybert_entry -> Int










cybertHash NA = 0










cybertHash Cybert{probe=p} = hasher p










{-cybertHash Cybert{probe=p, collection=(Just s)} = hasher $ s++p-}





















instance Eq Cybert_entry where










 a == b = (cybertHash a) == (cybertHash b)










instance Ord Cybert_entry where










 compare a b = compare (cybertHash a) (cybertHash b)










--hashing










{-end basic data types-}










{-format and show routines-}










showJustS::Maybe String -> String










showJustS Nothing = "N/A"










showJustS (Just x) = x





















showEitherF::(Either Float [Float]) -> String










showEitherF (Left x) = show x










showEitherF (Right xxs@(x:[])) = show x










showEitherF (Right xxs@(x:xs)) = (show x) ++"\t"++ (showEitherF (Right xs))





















showCybertEntries::[Cybert_entry]->String










showCybertEntries (x:[])= show x










showCybertEntries (x:xs)= (show x) ++ "\n" ++ (showCybertEntries xs)





















instance Show Cybert_entry where










 showsPrec _ a s = show a ++ s










 show NA = "NA"










 show Cybert {probe=p, genesym=sym, sample=ss, collection=col, mean=m,










 pval=pv, ratio=r, secondaryRefs=_, secondaryData=_,raw=_} = p++"\t"++










 (showJustS sym)++"\t"++(showJustS col) ++"\t" ++(showEitherF m)++"\t"++(show pv)










 -- for each sample










{-end format and show routines-}










{-set operation and filtering routines-}










entriesBySym :: String -> [Cybert_entry] -> [Cybert_entry]










entriesBySym sym xs = filter (\x -> genesym x == (Just sym)) xs





















entryByProbe :: String -> [Cybert_entry] -> Cybert_entry










entryByProbe p xs = head $ filter (\x -> probe x == p) xs





















entriesBySecondaryRef :: String -> String -> [Cybert_entry] -> [Cybert_entry]










entriesBySecondaryRef tref ref xs = filter (\x -> (secondaryRefs x) M.! tref == ref) xs










--lookup










entriesByFold :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByFold threshold xs = filter (\x ->pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b)= if length b < 2 then False










 else b!!1-b!!0 > threshold





















entriesByPval :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByPval threshold xs = filter (\x -> pval x < threshold) xs





















entriesByUpDown :: Bool -> [Cybert_entry] -> [Cybert_entry]










entriesByUpDown val xs = filter (\x -> pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b) = if length b < 2 then False










 else let bigger = (b!!1-b!!0>0)










 in bigger==val










--filtering





















cybertToSet :: [Cybert_entry] -> S.Set Cybert_entry










cybertToSet xs = S.fromList xs










--set operations










{-end set operation and filtering routines-}










{-IO routines-}










buildHeaderPrec :: B.ByteString -> [(String , B.ByteString)]










buildHeaderPrec s = let ss = B.split '\t' s










 in map (\x -> (stripQuote $ B.unpack x, x)) ss where










 stripQuote ('\"':xs) = map toLower $ take ((length xs) - 1) xs










 stripQuote xs = map toLower xs





















buildHeader :: B.ByteString -> (M.Map String (Maybe Int) )










buildHeader s = let ss = buildHeaderPrec s; sl = B.split '\t' s










 in M.fromList $ map (\x -> (fst x , (snd x) `elemIndex` sl)) ss










maybeGet :: [B.ByteString] -> Maybe Int -> B.ByteString










[] `maybeGet` _ = B.pack ""










x `maybeGet` Nothing = B.pack ""










x `maybeGet` (Just s)= if length x > s then x !! s










 else B.pack ""





















getText :: (M.Map String (Maybe Int))-> [B.ByteString] -> String -> Maybe String










getText header ss id = if id `M.notMember` header










 then Nothing










 else let idx = header M.! id










 in Just (B.unpack $ ss `maybeGet` idx)










getNum :: (M.Map String (Maybe Int))-> [B.ByteString] -> String -> Float










getNum header ss id = if id `M.notMember` header










 then -1 :: Float










 else let idx = header M.! id










 in read (B.unpack $ ss `maybeGet` idx) :: Float










getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Float [Float]










getNums header ss ids = let nums = map (getNum header ss) ids










 in if length nums == 1 then Left (nums !! 0)










 else Right $ filter (not . (== -1)) nums










lineToCybert :: (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










--take a header and an accumulator, then read the line and append the cybert entry










lineToCybert header fname line = readLine line where










 readLine s = let ss = B.split '\t' s 










 in if length ss /= M.size header then cybert_entry










 else let cybt= cybert_entry {










 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),










 --this is a must










 genesym = getText header ss "gene_sym",










 --this is of maybe type










 pval = getNum header ss "pval",










 bf = getNum header ss "bonferroni",










 bh = getNum header ss "bh",










 collection = Just fname,










 --these are -1 defaulted










 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]










 --these are one or many










 , raw = s










 --raw info










 } in cybt





















loadCybert :: String -> IO (Maybe [Cybert_entry])










loadCybert fname = catch










 (withFile fname ReadMode (\handle -> do










 contents <- B.hGetContents handle










 let mylines = B.split '\n' contents










 if length mylines <= 1 then return Nothing










 else let header = buildHeader (head mylines);










 output = Just (filter (not.isNothing.collection)










 $ map (lineToCybert header fname) (drop 1 mylines))










 in if output == (Just []) then return Nothing










 else return output










 ))










 (\err -> do










 if isEOFError err










 then do










 putStrLn "File is empty or truncated."










 return Nothing










 else do










 putStrLn $ "Unexpected Error at opening file: "++ (show err)










 return Nothing










 )










-- Loads a cybert table from fname










exportCybert :: [Cybert_entry] -> String -> IO()










exportCybert xs fname = do










 withFile fname WriteMode (\handle -> do










 let contents = showCybertEntries xs










 hPutStr handle contents










 )





















exportGeneSyms :: [Cybert_entry] -> String -> IO()










exportGeneSyms xs fname = do










 withFile fname WriteMode (\handle -> do










 let contents = unlines (map showJustS (map genesym xs))










 hPutStr handle contents










 )





















exportProbes :: [Cybert_entry] -> String -> IO()










exportProbes xs fname = do










 withFile fname WriteMode (\handle -> do










 let contents = unlines (map probe xs)










 hPutStr handle contents










 )










{-exportRef :: [Cybert_entry] -> String -> String -> IO()-}










{-end IO routines-}














other/fizzbuzz.hs



0 → 100644







View file @ 20804688













--fizzbuzz no arithmetics










f (x:y:z:rest)=x:y:"Fizz":f rest










f xs = xs





















g (x1:x2:x3:x4:"Fizz":rest) = x1:x2:x3:x4:("FizzBuzz"):g rest










g (x1:x2:x3:x4:x5:rest) = x1:x2:x3:x4:"Buzz":g rest










g xs = xs





















fizzbuzz num










 |num== 0 = ["0"]










 |otherwise = "0" : (g $ f $ map show $ takeWhile(<num) [1..])














other/test.hs



0 → 100644







View file @ 20804688













import Data.List (isPrefixOf)










inc :: Int -> Int










inc 0 = 0










inc x = (inc (x-1))+x
































--filter2::Ord a=>(a-> Bool) ->[a]->[a]










filter2 p = foldr (\x acc -> if p x then x :acc else acc ) 1
































fib :: Int -> Int










fib 0=0










fib 1=1










fib x=fib(x-1)+fib(x-2)





















term :: Int -> Double










term 0=0 










term 1=1










term 2=2










term (-1)=1










term (-2)=2










term x=if x<(-2) then term(x+1)* term (x+2) 










 else if (x>2) then term(x-1)*term(x-2) 










 else 0










termfib x = (term . fib)





















dlts= foldr step [] . lines










 where step l ds










 |"#define" `isPrefixOf` l = secondWord l:ds










 |otherwise = ds










 secondWord= head. tail. words





















myfun 0=0










myfun 1=1










myfun 2=2










myfun x=if x>0 then myfun(x-1)^myfun(x-2)










 else 0










mylist []=[]










mylist (x:xs)=not(head xs):mylist(tail xs)





















mylist3 Nope=Nope










mylist3 (Add x xs)=xs





















myreduc Nope = 0










myreduc (Add x y)=x + myreduc (y)










mylist2 []=[]










mylist2 xs=d++mylist2(tail xs)










 where d=mylist xs





















mymerge xs =foldl step [] xs










 where step x ys = ys:x





















mymap f xs= foldr step [] xs










 where step x ys = x `seq` f x:ys










mymap2 f xs= foldr step [] xs










 where step x ys = f x:ys










mycomp = (odd `mymap`) . mymerge 










mycomp2 = mymerge . (odd `mymap`) 










mycomp3 = length.mycomp2










--note : composite operator is right evaluated.










myfoldadd xs = foldl (\s t->s `seq` t `seq` s*t) 1 xs










myfoldadd2 xs = foldl (\s t-> s*t) 1 xs





















class MyClass a where










 eql::a->a->Bool










 add::a->a->a










 fibz::a->a










instance MyClass Bool where










 eql True True = True










 eql False False = True










 eql _ _ = False










 add True False = True










 add False True = True










 add True True = True










 add _ _ = False










 fibz True = True










 fibz False = False





















instance MyClass Int where










 eql x y = x==y










 add x y = x+y










 fibz x = fib x










 --deriving (Eq, Ord, Show)





















data Tryouts = Try1 {










 tries1::String,










 tries2::String}










 |Try2 Int String










 |Try3 Int Int3










 deriving (Show)





















instance MyClass Tryouts where










 eql x y = tries1 x==tries1 y










 add x y = Try1 (tries1 x) (tries2 y)










 fibz x = Try1 (tries1 x++tries2 x) (tries2 x ++ tries1 x)





















data Flags=Flag1 Int Float | Flag2 Float Int










 deriving (Show)
































data Marks=Mark1 Int [Int] 










 | Mark2 [Int] Int










 | Mark3 [Int] [Int]










 | Mark4 [Float] [Int]










 deriving (Show)





















-- closure










--foo :: Num -> Num -> (Num -> Num)










--foo x y = let r = x / y










--          in (\z -> z + r)










--let binds r to the lambda which contains another argument z 










--f :: Num -> Num










--f = foo 1 0










--here invokes with x y










--foo is the closure, f is the function










--main = print (f 123)










--here invokes with z
































data MyMaybe a = MyJust a










 |Nope2










 deriving(Show)










data Templated a b c=Templated a b c










 |Templated2 {










 geta::a, 










 getb::b, 










 getc::c}










 |Templated3 a String c










 deriving (Show)










data Mylist a =Add a (Mylist a)










 | Nope










 deriving (Show)










type Banners=(Flags,Marks)










type Int3=Int










myadd 0 _ = 1










myadd _ 0 = 1










myadd a b 










 | a<0||b<0 = if b==0 then 0 else 0










 | otherwise = a+b+ (myadd (a-1) (b-1))










derp=herp










 where {










 herp=kerp










 where {










 kerp=1;










 herp=2










 };










 derp=1;










 derp2=case derp of{










 1 -> 1;










 2 -> 0}










 }





















mysum xs










 | xs==[] =1










mysum xs = length xs + mysum(tail(xs))





















ran1 :: Int->Int->Int










ran1 times seed










 |times==1 =seed










 |times>1 =(1122345223*(ran1 newtimes seed)+12345) `mod` 54321










 where newtimes=times-1










main=print (term 35 , fib 35)



























Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


haskell






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


haskell


H
H
haskell




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Yu Liu haskell
Commits

20804688















Commit
20804688


authored
Jun 18, 2013
by


darlliu



Browse files




new codes







parent
e8256061













Changes
5




Hide whitespace changes

Inline
Side-by-side















cybert/cd271ex.hs








View file @ 20804688













-- reproduce the analysis for CD271 pvals, functional stype










-- reproduce the analysis for CD271 pvals, functional style










--










import Cybert










import Control.Monad



......@@ -7,9 +7,6 @@ import Data.Set (fromList, toList, union, empty)









extract:: Maybe [a] -> [a]










extract Nothing = []










extract (Just x) = x










extractS:: Maybe String -> String










extractS Nothing = ""










extractS (Just x) = x










pfind x = map (filter (\y -> probe y == probe x))










 -- find entries with same probeid










countln = foldr (\z acc -> acc + (length z)) 0



......














ml/BoolNet.hs



0 → 100644







View file @ 20804688













module BoolNet 










(










 Feature{










 probe,










 genesym,










 pval,










 b










 },










 extractFeatures,










 extractFeature










) where





















import Data.Bool










import Data.Maybe










import Data.Either










import qualified Data.Bits as Bit










import qualified Cybert as C





















data Feature = Feature {










 probe :: String ,










 genesym :: Maybe String ,










 pval :: Float ,










 b :: Maybe Bool --true, false, or nothing (insignificant)










} deriving (Show, Read)










feature = Feature {










 probe = "None",










 genesym = Just "None",










 pval = 1,










 b = Nothing










}





















extractFeature :: Float -> C.Cybert_entry -> Feature










extractFeature threshold cybt = feature {










 probe = C.probe cybt,










 genesym = C.genesym cybt,










 pval = C.pval cybt,










 b = if (C.pval cybt) > threshold then Nothing










 else either (\x -> Nothing)










 (\x -> if (length x) < 2 then Nothing










 else Just( x!!0 > x!!1))










 (C.mean cybt)










 }










extractFeatures = map extractFeature

























ml/Cybert.hs



0 → 100644







View file @ 20804688













--a simple loader for cybert data










--generates cybert reports and tables










--










--has the following:










--1, a polymorphic and flexible data structure indexed by multiple










--keys.










--2, ability to do set operation, selection filtering and mapping 










--on entries










--3, IO for both human readable format and message passing to other python










--code










--










{-module definitions -}










module Cybert










(










 Cybert_entry(NA, Cybert,probe,genesym,










 sample, collection, mean, bf, bh, sds, 










 pval,ratio,secondaryRefs,secondaryData),










 cybert_entry,










 showCybertEntries,










 entriesByFold,










 entriesByPval,










 entriesBySym,










 entriesByUpDown,










 entriesBySecondaryRef,










 cybertToSet,










 loadCybert,










 exportCybert,










 exportGeneSyms,










 exportProbes










) where










{-end module definitions -}










import Data.Bits










import Data.List










import Data.Maybe










import Data.Char










import System.IO










import System.IO.Error










import qualified Data.Set as S










import qualified Data.Map as M










import qualified Data.ByteString.Char8 as B





















{-basic data types-}










data Cybert_entry = NA | Cybert {










 probe :: String ,










 genesym :: Maybe String ,










 sample :: [String] ,










 collection :: Maybe String , --which dataset










 mean :: Either Float [Float] , --multiple means










 sds :: Either Float [Float],










 pval :: Float, --the pairwise or ANOVA pval










 bf :: Float,










 bh :: Float,










 ratio :: Either Float [Float], --pairwise ratio or numerous ratios










 secondaryRefs :: M.Map String String , --optional secondary refs










 secondaryData :: M.Map String Float , --optional secondary data










 raw :: B.ByteString










}










cybert_entry = Cybert{










 -- default constructor










 probe = "NONE",










 genesym = Nothing,










 sample = [],










 collection = Nothing,










 mean = Right [],










 sds = Right [],










 pval = -1,










 bf = -1,










 bh = -1,










 ratio = Left (-1),










 secondaryRefs = M.fromList [("","")],










 secondaryData = M.fromList [("",0)],










 raw = B.empty










}





















hasher :: String -> Int










hasher = foldl (\h c -> 33*h `xor` fromEnum c) 5381










cybertHash :: Cybert_entry -> Int










cybertHash NA = 0










cybertHash Cybert{probe=p} = hasher p










{-cybertHash Cybert{probe=p, collection=(Just s)} = hasher $ s++p-}





















instance Eq Cybert_entry where










 a == b = (cybertHash a) == (cybertHash b)










instance Ord Cybert_entry where










 compare a b = compare (cybertHash a) (cybertHash b)










--hashing










{-end basic data types-}










{-format and show routines-}










showJustS::Maybe String -> String










showJustS Nothing = "N/A"










showJustS (Just x) = x





















showEitherF::(Either Float [Float]) -> String










showEitherF (Left x) = show x










showEitherF (Right xxs@(x:[])) = show x










showEitherF (Right xxs@(x:xs)) = (show x) ++"\t"++ (showEitherF (Right xs))





















showCybertEntries::[Cybert_entry]->String










showCybertEntries (x:[])= show x










showCybertEntries (x:xs)= (show x) ++ "\n" ++ (showCybertEntries xs)





















instance Show Cybert_entry where










 showsPrec _ a s = show a ++ s










 show NA = "NA"










 show Cybert {probe=p, genesym=sym, sample=ss, collection=col, mean=m,










 pval=pv, ratio=r, secondaryRefs=_, secondaryData=_,raw=_} = p++"\t"++










 (showJustS sym)++"\t"++(showJustS col) ++"\t" ++(showEitherF m)++"\t"++(show pv)










 -- for each sample










{-end format and show routines-}










{-set operation and filtering routines-}










entriesBySym :: String -> [Cybert_entry] -> [Cybert_entry]










entriesBySym sym xs = filter (\x -> genesym x == (Just sym)) xs





















entryByProbe :: String -> [Cybert_entry] -> Cybert_entry










entryByProbe p xs = head $ filter (\x -> probe x == p) xs





















entriesBySecondaryRef :: String -> String -> [Cybert_entry] -> [Cybert_entry]










entriesBySecondaryRef tref ref xs = filter (\x -> (secondaryRefs x) M.! tref == ref) xs










--lookup










entriesByFold :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByFold threshold xs = filter (\x ->pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b)= if length b < 2 then False










 else b!!1-b!!0 > threshold





















entriesByPval :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByPval threshold xs = filter (\x -> pval x < threshold) xs





















entriesByUpDown :: Bool -> [Cybert_entry] -> [Cybert_entry]










entriesByUpDown val xs = filter (\x -> pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b) = if length b < 2 then False










 else let bigger = (b!!1-b!!0>0)










 in bigger==val










--filtering





















cybertToSet :: [Cybert_entry] -> S.Set Cybert_entry










cybertToSet xs = S.fromList xs










--set operations










{-end set operation and filtering routines-}










{-IO routines-}










buildHeaderPrec :: B.ByteString -> [(String , B.ByteString)]










buildHeaderPrec s = let ss = B.split '\t' s










 in map (\x -> (stripQuote $ B.unpack x, x)) ss where










 stripQuote ('\"':xs) = map toLower $ take ((length xs) - 1) xs










 stripQuote xs = map toLower xs





















buildHeader :: B.ByteString -> (M.Map String (Maybe Int) )










buildHeader s = let ss = buildHeaderPrec s; sl = B.split '\t' s










 in M.fromList $ map (\x -> (fst x , (snd x) `elemIndex` sl)) ss










maybeGet :: [B.ByteString] -> Maybe Int -> B.ByteString










[] `maybeGet` _ = B.pack ""










x `maybeGet` Nothing = B.pack ""










x `maybeGet` (Just s)= if length x > s then x !! s










 else B.pack ""





















getText :: (M.Map String (Maybe Int))-> [B.ByteString] -> String -> Maybe String










getText header ss id = if id `M.notMember` header










 then Nothing










 else let idx = header M.! id










 in Just (B.unpack $ ss `maybeGet` idx)










getNum :: (M.Map String (Maybe Int))-> [B.ByteString] -> String -> Float










getNum header ss id = if id `M.notMember` header










 then -1 :: Float










 else let idx = header M.! id










 in read (B.unpack $ ss `maybeGet` idx) :: Float










getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Float [Float]










getNums header ss ids = let nums = map (getNum header ss) ids










 in if length nums == 1 then Left (nums !! 0)










 else Right $ filter (not . (== -1)) nums










lineToCybert :: (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










--take a header and an accumulator, then read the line and append the cybert entry










lineToCybert header fname line = readLine line where










 readLine s = let ss = B.split '\t' s 










 in if length ss /= M.size header then cybert_entry










 else let cybt= cybert_entry {










 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),










 --this is a must










 genesym = getText header ss "gene_sym",










 --this is of maybe type










 pval = getNum header ss "pval",










 bf = getNum header ss "bonferroni",










 bh = getNum header ss "bh",










 collection = Just fname,










 --these are -1 defaulted










 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]










 --these are one or many










 , raw = s










 --raw info










 } in cybt





















loadCybert :: String -> IO (Maybe [Cybert_entry])










loadCybert fname = catch










 (withFile fname ReadMode (\handle -> do










 contents <- B.hGetContents handle










 let mylines = B.split '\n' contents










 if length mylines <= 1 then return Nothing










 else let header = buildHeader (head mylines);










 output = Just (filter (not.isNothing.collection)










 $ map (lineToCybert header fname) (drop 1 mylines))










 in if output == (Just []) then return Nothing










 else return output










 ))










 (\err -> do










 if isEOFError err










 then do










 putStrLn "File is empty or truncated."










 return Nothing










 else do










 putStrLn $ "Unexpected Error at opening file: "++ (show err)










 return Nothing










 )










-- Loads a cybert table from fname










exportCybert :: [Cybert_entry] -> String -> IO()










exportCybert xs fname = do










 withFile fname WriteMode (\handle -> do










 let contents = showCybertEntries xs










 hPutStr handle contents










 )





















exportGeneSyms :: [Cybert_entry] -> String -> IO()










exportGeneSyms xs fname = do










 withFile fname WriteMode (\handle -> do










 let contents = unlines (map showJustS (map genesym xs))










 hPutStr handle contents










 )





















exportProbes :: [Cybert_entry] -> String -> IO()










exportProbes xs fname = do










 withFile fname WriteMode (\handle -> do










 let contents = unlines (map probe xs)










 hPutStr handle contents










 )










{-exportRef :: [Cybert_entry] -> String -> String -> IO()-}










{-end IO routines-}














other/fizzbuzz.hs



0 → 100644







View file @ 20804688













--fizzbuzz no arithmetics










f (x:y:z:rest)=x:y:"Fizz":f rest










f xs = xs





















g (x1:x2:x3:x4:"Fizz":rest) = x1:x2:x3:x4:("FizzBuzz"):g rest










g (x1:x2:x3:x4:x5:rest) = x1:x2:x3:x4:"Buzz":g rest










g xs = xs





















fizzbuzz num










 |num== 0 = ["0"]










 |otherwise = "0" : (g $ f $ map show $ takeWhile(<num) [1..])














other/test.hs



0 → 100644







View file @ 20804688













import Data.List (isPrefixOf)










inc :: Int -> Int










inc 0 = 0










inc x = (inc (x-1))+x
































--filter2::Ord a=>(a-> Bool) ->[a]->[a]










filter2 p = foldr (\x acc -> if p x then x :acc else acc ) 1
































fib :: Int -> Int










fib 0=0










fib 1=1










fib x=fib(x-1)+fib(x-2)





















term :: Int -> Double










term 0=0 










term 1=1










term 2=2










term (-1)=1










term (-2)=2










term x=if x<(-2) then term(x+1)* term (x+2) 










 else if (x>2) then term(x-1)*term(x-2) 










 else 0










termfib x = (term . fib)





















dlts= foldr step [] . lines










 where step l ds










 |"#define" `isPrefixOf` l = secondWord l:ds










 |otherwise = ds










 secondWord= head. tail. words





















myfun 0=0










myfun 1=1










myfun 2=2










myfun x=if x>0 then myfun(x-1)^myfun(x-2)










 else 0










mylist []=[]










mylist (x:xs)=not(head xs):mylist(tail xs)





















mylist3 Nope=Nope










mylist3 (Add x xs)=xs





















myreduc Nope = 0










myreduc (Add x y)=x + myreduc (y)










mylist2 []=[]










mylist2 xs=d++mylist2(tail xs)










 where d=mylist xs





















mymerge xs =foldl step [] xs










 where step x ys = ys:x





















mymap f xs= foldr step [] xs










 where step x ys = x `seq` f x:ys










mymap2 f xs= foldr step [] xs










 where step x ys = f x:ys










mycomp = (odd `mymap`) . mymerge 










mycomp2 = mymerge . (odd `mymap`) 










mycomp3 = length.mycomp2










--note : composite operator is right evaluated.










myfoldadd xs = foldl (\s t->s `seq` t `seq` s*t) 1 xs










myfoldadd2 xs = foldl (\s t-> s*t) 1 xs





















class MyClass a where










 eql::a->a->Bool










 add::a->a->a










 fibz::a->a










instance MyClass Bool where










 eql True True = True










 eql False False = True










 eql _ _ = False










 add True False = True










 add False True = True










 add True True = True










 add _ _ = False










 fibz True = True










 fibz False = False





















instance MyClass Int where










 eql x y = x==y










 add x y = x+y










 fibz x = fib x










 --deriving (Eq, Ord, Show)





















data Tryouts = Try1 {










 tries1::String,










 tries2::String}










 |Try2 Int String










 |Try3 Int Int3










 deriving (Show)





















instance MyClass Tryouts where










 eql x y = tries1 x==tries1 y










 add x y = Try1 (tries1 x) (tries2 y)










 fibz x = Try1 (tries1 x++tries2 x) (tries2 x ++ tries1 x)





















data Flags=Flag1 Int Float | Flag2 Float Int










 deriving (Show)
































data Marks=Mark1 Int [Int] 










 | Mark2 [Int] Int










 | Mark3 [Int] [Int]










 | Mark4 [Float] [Int]










 deriving (Show)





















-- closure










--foo :: Num -> Num -> (Num -> Num)










--foo x y = let r = x / y










--          in (\z -> z + r)










--let binds r to the lambda which contains another argument z 










--f :: Num -> Num










--f = foo 1 0










--here invokes with x y










--foo is the closure, f is the function










--main = print (f 123)










--here invokes with z
































data MyMaybe a = MyJust a










 |Nope2










 deriving(Show)










data Templated a b c=Templated a b c










 |Templated2 {










 geta::a, 










 getb::b, 










 getc::c}










 |Templated3 a String c










 deriving (Show)










data Mylist a =Add a (Mylist a)










 | Nope










 deriving (Show)










type Banners=(Flags,Marks)










type Int3=Int










myadd 0 _ = 1










myadd _ 0 = 1










myadd a b 










 | a<0||b<0 = if b==0 then 0 else 0










 | otherwise = a+b+ (myadd (a-1) (b-1))










derp=herp










 where {










 herp=kerp










 where {










 kerp=1;










 herp=2










 };










 derp=1;










 derp2=case derp of{










 1 -> 1;










 2 -> 0}










 }





















mysum xs










 | xs==[] =1










mysum xs = length xs + mysum(tail(xs))





















ran1 :: Int->Int->Int










ran1 times seed










 |times==1 =seed










 |times>1 =(1122345223*(ran1 newtimes seed)+12345) `mod` 54321










 where newtimes=times-1










main=print (term 35 , fib 35)



























Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Yu Liu haskell
Commits

20804688







Open sidebar



Yu Liu haskell
Commits

20804688




Open sidebar

Yu Liu haskell
Commits

20804688


Yu LiuhaskellhaskellCommits
20804688








Commit
20804688


authored
Jun 18, 2013
by


darlliu



Browse files




new codes







parent
e8256061













Changes
5




Hide whitespace changes

Inline
Side-by-side















cybert/cd271ex.hs








View file @ 20804688













-- reproduce the analysis for CD271 pvals, functional stype










-- reproduce the analysis for CD271 pvals, functional style










--










import Cybert










import Control.Monad



......@@ -7,9 +7,6 @@ import Data.Set (fromList, toList, union, empty)









extract:: Maybe [a] -> [a]










extract Nothing = []










extract (Just x) = x










extractS:: Maybe String -> String










extractS Nothing = ""










extractS (Just x) = x










pfind x = map (filter (\y -> probe y == probe x))










 -- find entries with same probeid










countln = foldr (\z acc -> acc + (length z)) 0



......














ml/BoolNet.hs



0 → 100644







View file @ 20804688













module BoolNet 










(










 Feature{










 probe,










 genesym,










 pval,










 b










 },










 extractFeatures,










 extractFeature










) where





















import Data.Bool










import Data.Maybe










import Data.Either










import qualified Data.Bits as Bit










import qualified Cybert as C





















data Feature = Feature {










 probe :: String ,










 genesym :: Maybe String ,










 pval :: Float ,










 b :: Maybe Bool --true, false, or nothing (insignificant)










} deriving (Show, Read)










feature = Feature {










 probe = "None",










 genesym = Just "None",










 pval = 1,










 b = Nothing










}





















extractFeature :: Float -> C.Cybert_entry -> Feature










extractFeature threshold cybt = feature {










 probe = C.probe cybt,










 genesym = C.genesym cybt,










 pval = C.pval cybt,










 b = if (C.pval cybt) > threshold then Nothing










 else either (\x -> Nothing)










 (\x -> if (length x) < 2 then Nothing










 else Just( x!!0 > x!!1))










 (C.mean cybt)










 }










extractFeatures = map extractFeature

























ml/Cybert.hs



0 → 100644







View file @ 20804688













--a simple loader for cybert data










--generates cybert reports and tables










--










--has the following:










--1, a polymorphic and flexible data structure indexed by multiple










--keys.










--2, ability to do set operation, selection filtering and mapping 










--on entries










--3, IO for both human readable format and message passing to other python










--code










--










{-module definitions -}










module Cybert










(










 Cybert_entry(NA, Cybert,probe,genesym,










 sample, collection, mean, bf, bh, sds, 










 pval,ratio,secondaryRefs,secondaryData),










 cybert_entry,










 showCybertEntries,










 entriesByFold,










 entriesByPval,










 entriesBySym,










 entriesByUpDown,










 entriesBySecondaryRef,










 cybertToSet,










 loadCybert,










 exportCybert,










 exportGeneSyms,










 exportProbes










) where










{-end module definitions -}










import Data.Bits










import Data.List










import Data.Maybe










import Data.Char










import System.IO










import System.IO.Error










import qualified Data.Set as S










import qualified Data.Map as M










import qualified Data.ByteString.Char8 as B





















{-basic data types-}










data Cybert_entry = NA | Cybert {










 probe :: String ,










 genesym :: Maybe String ,










 sample :: [String] ,










 collection :: Maybe String , --which dataset










 mean :: Either Float [Float] , --multiple means










 sds :: Either Float [Float],










 pval :: Float, --the pairwise or ANOVA pval










 bf :: Float,










 bh :: Float,










 ratio :: Either Float [Float], --pairwise ratio or numerous ratios










 secondaryRefs :: M.Map String String , --optional secondary refs










 secondaryData :: M.Map String Float , --optional secondary data










 raw :: B.ByteString










}










cybert_entry = Cybert{










 -- default constructor










 probe = "NONE",










 genesym = Nothing,










 sample = [],










 collection = Nothing,










 mean = Right [],










 sds = Right [],










 pval = -1,










 bf = -1,










 bh = -1,










 ratio = Left (-1),










 secondaryRefs = M.fromList [("","")],










 secondaryData = M.fromList [("",0)],










 raw = B.empty










}





















hasher :: String -> Int










hasher = foldl (\h c -> 33*h `xor` fromEnum c) 5381










cybertHash :: Cybert_entry -> Int










cybertHash NA = 0










cybertHash Cybert{probe=p} = hasher p










{-cybertHash Cybert{probe=p, collection=(Just s)} = hasher $ s++p-}





















instance Eq Cybert_entry where










 a == b = (cybertHash a) == (cybertHash b)










instance Ord Cybert_entry where










 compare a b = compare (cybertHash a) (cybertHash b)










--hashing










{-end basic data types-}










{-format and show routines-}










showJustS::Maybe String -> String










showJustS Nothing = "N/A"










showJustS (Just x) = x





















showEitherF::(Either Float [Float]) -> String










showEitherF (Left x) = show x










showEitherF (Right xxs@(x:[])) = show x










showEitherF (Right xxs@(x:xs)) = (show x) ++"\t"++ (showEitherF (Right xs))





















showCybertEntries::[Cybert_entry]->String










showCybertEntries (x:[])= show x










showCybertEntries (x:xs)= (show x) ++ "\n" ++ (showCybertEntries xs)





















instance Show Cybert_entry where










 showsPrec _ a s = show a ++ s










 show NA = "NA"










 show Cybert {probe=p, genesym=sym, sample=ss, collection=col, mean=m,










 pval=pv, ratio=r, secondaryRefs=_, secondaryData=_,raw=_} = p++"\t"++










 (showJustS sym)++"\t"++(showJustS col) ++"\t" ++(showEitherF m)++"\t"++(show pv)










 -- for each sample










{-end format and show routines-}










{-set operation and filtering routines-}










entriesBySym :: String -> [Cybert_entry] -> [Cybert_entry]










entriesBySym sym xs = filter (\x -> genesym x == (Just sym)) xs





















entryByProbe :: String -> [Cybert_entry] -> Cybert_entry










entryByProbe p xs = head $ filter (\x -> probe x == p) xs





















entriesBySecondaryRef :: String -> String -> [Cybert_entry] -> [Cybert_entry]










entriesBySecondaryRef tref ref xs = filter (\x -> (secondaryRefs x) M.! tref == ref) xs










--lookup










entriesByFold :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByFold threshold xs = filter (\x ->pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b)= if length b < 2 then False










 else b!!1-b!!0 > threshold





















entriesByPval :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByPval threshold xs = filter (\x -> pval x < threshold) xs





















entriesByUpDown :: Bool -> [Cybert_entry] -> [Cybert_entry]










entriesByUpDown val xs = filter (\x -> pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b) = if length b < 2 then False










 else let bigger = (b!!1-b!!0>0)










 in bigger==val










--filtering





















cybertToSet :: [Cybert_entry] -> S.Set Cybert_entry










cybertToSet xs = S.fromList xs










--set operations










{-end set operation and filtering routines-}










{-IO routines-}










buildHeaderPrec :: B.ByteString -> [(String , B.ByteString)]










buildHeaderPrec s = let ss = B.split '\t' s










 in map (\x -> (stripQuote $ B.unpack x, x)) ss where










 stripQuote ('\"':xs) = map toLower $ take ((length xs) - 1) xs










 stripQuote xs = map toLower xs





















buildHeader :: B.ByteString -> (M.Map String (Maybe Int) )










buildHeader s = let ss = buildHeaderPrec s; sl = B.split '\t' s










 in M.fromList $ map (\x -> (fst x , (snd x) `elemIndex` sl)) ss










maybeGet :: [B.ByteString] -> Maybe Int -> B.ByteString










[] `maybeGet` _ = B.pack ""










x `maybeGet` Nothing = B.pack ""










x `maybeGet` (Just s)= if length x > s then x !! s










 else B.pack ""





















getText :: (M.Map String (Maybe Int))-> [B.ByteString] -> String -> Maybe String










getText header ss id = if id `M.notMember` header










 then Nothing










 else let idx = header M.! id










 in Just (B.unpack $ ss `maybeGet` idx)










getNum :: (M.Map String (Maybe Int))-> [B.ByteString] -> String -> Float










getNum header ss id = if id `M.notMember` header










 then -1 :: Float










 else let idx = header M.! id










 in read (B.unpack $ ss `maybeGet` idx) :: Float










getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Float [Float]










getNums header ss ids = let nums = map (getNum header ss) ids










 in if length nums == 1 then Left (nums !! 0)










 else Right $ filter (not . (== -1)) nums










lineToCybert :: (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










--take a header and an accumulator, then read the line and append the cybert entry










lineToCybert header fname line = readLine line where










 readLine s = let ss = B.split '\t' s 










 in if length ss /= M.size header then cybert_entry










 else let cybt= cybert_entry {










 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),










 --this is a must










 genesym = getText header ss "gene_sym",










 --this is of maybe type










 pval = getNum header ss "pval",










 bf = getNum header ss "bonferroni",










 bh = getNum header ss "bh",










 collection = Just fname,










 --these are -1 defaulted










 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]










 --these are one or many










 , raw = s










 --raw info










 } in cybt





















loadCybert :: String -> IO (Maybe [Cybert_entry])










loadCybert fname = catch










 (withFile fname ReadMode (\handle -> do










 contents <- B.hGetContents handle










 let mylines = B.split '\n' contents










 if length mylines <= 1 then return Nothing










 else let header = buildHeader (head mylines);










 output = Just (filter (not.isNothing.collection)










 $ map (lineToCybert header fname) (drop 1 mylines))










 in if output == (Just []) then return Nothing










 else return output










 ))










 (\err -> do










 if isEOFError err










 then do










 putStrLn "File is empty or truncated."










 return Nothing










 else do










 putStrLn $ "Unexpected Error at opening file: "++ (show err)










 return Nothing










 )










-- Loads a cybert table from fname










exportCybert :: [Cybert_entry] -> String -> IO()










exportCybert xs fname = do










 withFile fname WriteMode (\handle -> do










 let contents = showCybertEntries xs










 hPutStr handle contents










 )





















exportGeneSyms :: [Cybert_entry] -> String -> IO()










exportGeneSyms xs fname = do










 withFile fname WriteMode (\handle -> do










 let contents = unlines (map showJustS (map genesym xs))










 hPutStr handle contents










 )





















exportProbes :: [Cybert_entry] -> String -> IO()










exportProbes xs fname = do










 withFile fname WriteMode (\handle -> do










 let contents = unlines (map probe xs)










 hPutStr handle contents










 )










{-exportRef :: [Cybert_entry] -> String -> String -> IO()-}










{-end IO routines-}














other/fizzbuzz.hs



0 → 100644







View file @ 20804688













--fizzbuzz no arithmetics










f (x:y:z:rest)=x:y:"Fizz":f rest










f xs = xs





















g (x1:x2:x3:x4:"Fizz":rest) = x1:x2:x3:x4:("FizzBuzz"):g rest










g (x1:x2:x3:x4:x5:rest) = x1:x2:x3:x4:"Buzz":g rest










g xs = xs





















fizzbuzz num










 |num== 0 = ["0"]










 |otherwise = "0" : (g $ f $ map show $ takeWhile(<num) [1..])














other/test.hs



0 → 100644







View file @ 20804688













import Data.List (isPrefixOf)










inc :: Int -> Int










inc 0 = 0










inc x = (inc (x-1))+x
































--filter2::Ord a=>(a-> Bool) ->[a]->[a]










filter2 p = foldr (\x acc -> if p x then x :acc else acc ) 1
































fib :: Int -> Int










fib 0=0










fib 1=1










fib x=fib(x-1)+fib(x-2)





















term :: Int -> Double










term 0=0 










term 1=1










term 2=2










term (-1)=1










term (-2)=2










term x=if x<(-2) then term(x+1)* term (x+2) 










 else if (x>2) then term(x-1)*term(x-2) 










 else 0










termfib x = (term . fib)





















dlts= foldr step [] . lines










 where step l ds










 |"#define" `isPrefixOf` l = secondWord l:ds










 |otherwise = ds










 secondWord= head. tail. words





















myfun 0=0










myfun 1=1










myfun 2=2










myfun x=if x>0 then myfun(x-1)^myfun(x-2)










 else 0










mylist []=[]










mylist (x:xs)=not(head xs):mylist(tail xs)





















mylist3 Nope=Nope










mylist3 (Add x xs)=xs





















myreduc Nope = 0










myreduc (Add x y)=x + myreduc (y)










mylist2 []=[]










mylist2 xs=d++mylist2(tail xs)










 where d=mylist xs





















mymerge xs =foldl step [] xs










 where step x ys = ys:x





















mymap f xs= foldr step [] xs










 where step x ys = x `seq` f x:ys










mymap2 f xs= foldr step [] xs










 where step x ys = f x:ys










mycomp = (odd `mymap`) . mymerge 










mycomp2 = mymerge . (odd `mymap`) 










mycomp3 = length.mycomp2










--note : composite operator is right evaluated.










myfoldadd xs = foldl (\s t->s `seq` t `seq` s*t) 1 xs










myfoldadd2 xs = foldl (\s t-> s*t) 1 xs





















class MyClass a where










 eql::a->a->Bool










 add::a->a->a










 fibz::a->a










instance MyClass Bool where










 eql True True = True










 eql False False = True










 eql _ _ = False










 add True False = True










 add False True = True










 add True True = True










 add _ _ = False










 fibz True = True










 fibz False = False





















instance MyClass Int where










 eql x y = x==y










 add x y = x+y










 fibz x = fib x










 --deriving (Eq, Ord, Show)





















data Tryouts = Try1 {










 tries1::String,










 tries2::String}










 |Try2 Int String










 |Try3 Int Int3










 deriving (Show)





















instance MyClass Tryouts where










 eql x y = tries1 x==tries1 y










 add x y = Try1 (tries1 x) (tries2 y)










 fibz x = Try1 (tries1 x++tries2 x) (tries2 x ++ tries1 x)





















data Flags=Flag1 Int Float | Flag2 Float Int










 deriving (Show)
































data Marks=Mark1 Int [Int] 










 | Mark2 [Int] Int










 | Mark3 [Int] [Int]










 | Mark4 [Float] [Int]










 deriving (Show)





















-- closure










--foo :: Num -> Num -> (Num -> Num)










--foo x y = let r = x / y










--          in (\z -> z + r)










--let binds r to the lambda which contains another argument z 










--f :: Num -> Num










--f = foo 1 0










--here invokes with x y










--foo is the closure, f is the function










--main = print (f 123)










--here invokes with z
































data MyMaybe a = MyJust a










 |Nope2










 deriving(Show)










data Templated a b c=Templated a b c










 |Templated2 {










 geta::a, 










 getb::b, 










 getc::c}










 |Templated3 a String c










 deriving (Show)










data Mylist a =Add a (Mylist a)










 | Nope










 deriving (Show)










type Banners=(Flags,Marks)










type Int3=Int










myadd 0 _ = 1










myadd _ 0 = 1










myadd a b 










 | a<0||b<0 = if b==0 then 0 else 0










 | otherwise = a+b+ (myadd (a-1) (b-1))










derp=herp










 where {










 herp=kerp










 where {










 kerp=1;










 herp=2










 };










 derp=1;










 derp2=case derp of{










 1 -> 1;










 2 -> 0}










 }





















mysum xs










 | xs==[] =1










mysum xs = length xs + mysum(tail(xs))





















ran1 :: Int->Int->Int










ran1 times seed










 |times==1 =seed










 |times>1 =(1122345223*(ran1 newtimes seed)+12345) `mod` 54321










 where newtimes=times-1










main=print (term 35 , fib 35)



























Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
20804688


authored
Jun 18, 2013
by


darlliu



Browse files




new codes







parent
e8256061













Changes
5




Hide whitespace changes

Inline
Side-by-side















cybert/cd271ex.hs








View file @ 20804688













-- reproduce the analysis for CD271 pvals, functional stype










-- reproduce the analysis for CD271 pvals, functional style










--










import Cybert










import Control.Monad



......@@ -7,9 +7,6 @@ import Data.Set (fromList, toList, union, empty)









extract:: Maybe [a] -> [a]










extract Nothing = []










extract (Just x) = x










extractS:: Maybe String -> String










extractS Nothing = ""










extractS (Just x) = x










pfind x = map (filter (\y -> probe y == probe x))










 -- find entries with same probeid










countln = foldr (\z acc -> acc + (length z)) 0



......














ml/BoolNet.hs



0 → 100644







View file @ 20804688













module BoolNet 










(










 Feature{










 probe,










 genesym,










 pval,










 b










 },










 extractFeatures,










 extractFeature










) where





















import Data.Bool










import Data.Maybe










import Data.Either










import qualified Data.Bits as Bit










import qualified Cybert as C





















data Feature = Feature {










 probe :: String ,










 genesym :: Maybe String ,










 pval :: Float ,










 b :: Maybe Bool --true, false, or nothing (insignificant)










} deriving (Show, Read)










feature = Feature {










 probe = "None",










 genesym = Just "None",










 pval = 1,










 b = Nothing










}





















extractFeature :: Float -> C.Cybert_entry -> Feature










extractFeature threshold cybt = feature {










 probe = C.probe cybt,










 genesym = C.genesym cybt,










 pval = C.pval cybt,










 b = if (C.pval cybt) > threshold then Nothing










 else either (\x -> Nothing)










 (\x -> if (length x) < 2 then Nothing










 else Just( x!!0 > x!!1))










 (C.mean cybt)










 }










extractFeatures = map extractFeature

























ml/Cybert.hs



0 → 100644







View file @ 20804688













--a simple loader for cybert data










--generates cybert reports and tables










--










--has the following:










--1, a polymorphic and flexible data structure indexed by multiple










--keys.










--2, ability to do set operation, selection filtering and mapping 










--on entries










--3, IO for both human readable format and message passing to other python










--code










--










{-module definitions -}










module Cybert










(










 Cybert_entry(NA, Cybert,probe,genesym,










 sample, collection, mean, bf, bh, sds, 










 pval,ratio,secondaryRefs,secondaryData),










 cybert_entry,










 showCybertEntries,










 entriesByFold,










 entriesByPval,










 entriesBySym,










 entriesByUpDown,










 entriesBySecondaryRef,










 cybertToSet,










 loadCybert,










 exportCybert,










 exportGeneSyms,










 exportProbes










) where










{-end module definitions -}










import Data.Bits










import Data.List










import Data.Maybe










import Data.Char










import System.IO










import System.IO.Error










import qualified Data.Set as S










import qualified Data.Map as M










import qualified Data.ByteString.Char8 as B





















{-basic data types-}










data Cybert_entry = NA | Cybert {










 probe :: String ,










 genesym :: Maybe String ,










 sample :: [String] ,










 collection :: Maybe String , --which dataset










 mean :: Either Float [Float] , --multiple means










 sds :: Either Float [Float],










 pval :: Float, --the pairwise or ANOVA pval










 bf :: Float,










 bh :: Float,










 ratio :: Either Float [Float], --pairwise ratio or numerous ratios










 secondaryRefs :: M.Map String String , --optional secondary refs










 secondaryData :: M.Map String Float , --optional secondary data










 raw :: B.ByteString










}










cybert_entry = Cybert{










 -- default constructor










 probe = "NONE",










 genesym = Nothing,










 sample = [],










 collection = Nothing,










 mean = Right [],










 sds = Right [],










 pval = -1,










 bf = -1,










 bh = -1,










 ratio = Left (-1),










 secondaryRefs = M.fromList [("","")],










 secondaryData = M.fromList [("",0)],










 raw = B.empty










}





















hasher :: String -> Int










hasher = foldl (\h c -> 33*h `xor` fromEnum c) 5381










cybertHash :: Cybert_entry -> Int










cybertHash NA = 0










cybertHash Cybert{probe=p} = hasher p










{-cybertHash Cybert{probe=p, collection=(Just s)} = hasher $ s++p-}





















instance Eq Cybert_entry where










 a == b = (cybertHash a) == (cybertHash b)










instance Ord Cybert_entry where










 compare a b = compare (cybertHash a) (cybertHash b)










--hashing










{-end basic data types-}










{-format and show routines-}










showJustS::Maybe String -> String










showJustS Nothing = "N/A"










showJustS (Just x) = x





















showEitherF::(Either Float [Float]) -> String










showEitherF (Left x) = show x










showEitherF (Right xxs@(x:[])) = show x










showEitherF (Right xxs@(x:xs)) = (show x) ++"\t"++ (showEitherF (Right xs))





















showCybertEntries::[Cybert_entry]->String










showCybertEntries (x:[])= show x










showCybertEntries (x:xs)= (show x) ++ "\n" ++ (showCybertEntries xs)





















instance Show Cybert_entry where










 showsPrec _ a s = show a ++ s










 show NA = "NA"










 show Cybert {probe=p, genesym=sym, sample=ss, collection=col, mean=m,










 pval=pv, ratio=r, secondaryRefs=_, secondaryData=_,raw=_} = p++"\t"++










 (showJustS sym)++"\t"++(showJustS col) ++"\t" ++(showEitherF m)++"\t"++(show pv)










 -- for each sample










{-end format and show routines-}










{-set operation and filtering routines-}










entriesBySym :: String -> [Cybert_entry] -> [Cybert_entry]










entriesBySym sym xs = filter (\x -> genesym x == (Just sym)) xs





















entryByProbe :: String -> [Cybert_entry] -> Cybert_entry










entryByProbe p xs = head $ filter (\x -> probe x == p) xs





















entriesBySecondaryRef :: String -> String -> [Cybert_entry] -> [Cybert_entry]










entriesBySecondaryRef tref ref xs = filter (\x -> (secondaryRefs x) M.! tref == ref) xs










--lookup










entriesByFold :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByFold threshold xs = filter (\x ->pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b)= if length b < 2 then False










 else b!!1-b!!0 > threshold





















entriesByPval :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByPval threshold xs = filter (\x -> pval x < threshold) xs





















entriesByUpDown :: Bool -> [Cybert_entry] -> [Cybert_entry]










entriesByUpDown val xs = filter (\x -> pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b) = if length b < 2 then False










 else let bigger = (b!!1-b!!0>0)










 in bigger==val










--filtering





















cybertToSet :: [Cybert_entry] -> S.Set Cybert_entry










cybertToSet xs = S.fromList xs










--set operations










{-end set operation and filtering routines-}










{-IO routines-}










buildHeaderPrec :: B.ByteString -> [(String , B.ByteString)]










buildHeaderPrec s = let ss = B.split '\t' s










 in map (\x -> (stripQuote $ B.unpack x, x)) ss where










 stripQuote ('\"':xs) = map toLower $ take ((length xs) - 1) xs










 stripQuote xs = map toLower xs





















buildHeader :: B.ByteString -> (M.Map String (Maybe Int) )










buildHeader s = let ss = buildHeaderPrec s; sl = B.split '\t' s










 in M.fromList $ map (\x -> (fst x , (snd x) `elemIndex` sl)) ss










maybeGet :: [B.ByteString] -> Maybe Int -> B.ByteString










[] `maybeGet` _ = B.pack ""










x `maybeGet` Nothing = B.pack ""










x `maybeGet` (Just s)= if length x > s then x !! s










 else B.pack ""





















getText :: (M.Map String (Maybe Int))-> [B.ByteString] -> String -> Maybe String










getText header ss id = if id `M.notMember` header










 then Nothing










 else let idx = header M.! id










 in Just (B.unpack $ ss `maybeGet` idx)










getNum :: (M.Map String (Maybe Int))-> [B.ByteString] -> String -> Float










getNum header ss id = if id `M.notMember` header










 then -1 :: Float










 else let idx = header M.! id










 in read (B.unpack $ ss `maybeGet` idx) :: Float










getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Float [Float]










getNums header ss ids = let nums = map (getNum header ss) ids










 in if length nums == 1 then Left (nums !! 0)










 else Right $ filter (not . (== -1)) nums










lineToCybert :: (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










--take a header and an accumulator, then read the line and append the cybert entry










lineToCybert header fname line = readLine line where










 readLine s = let ss = B.split '\t' s 










 in if length ss /= M.size header then cybert_entry










 else let cybt= cybert_entry {










 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),










 --this is a must










 genesym = getText header ss "gene_sym",










 --this is of maybe type










 pval = getNum header ss "pval",










 bf = getNum header ss "bonferroni",










 bh = getNum header ss "bh",










 collection = Just fname,










 --these are -1 defaulted










 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]










 --these are one or many










 , raw = s










 --raw info










 } in cybt





















loadCybert :: String -> IO (Maybe [Cybert_entry])










loadCybert fname = catch










 (withFile fname ReadMode (\handle -> do










 contents <- B.hGetContents handle










 let mylines = B.split '\n' contents










 if length mylines <= 1 then return Nothing










 else let header = buildHeader (head mylines);










 output = Just (filter (not.isNothing.collection)










 $ map (lineToCybert header fname) (drop 1 mylines))










 in if output == (Just []) then return Nothing










 else return output










 ))










 (\err -> do










 if isEOFError err










 then do










 putStrLn "File is empty or truncated."










 return Nothing










 else do










 putStrLn $ "Unexpected Error at opening file: "++ (show err)










 return Nothing










 )










-- Loads a cybert table from fname










exportCybert :: [Cybert_entry] -> String -> IO()










exportCybert xs fname = do










 withFile fname WriteMode (\handle -> do










 let contents = showCybertEntries xs










 hPutStr handle contents










 )





















exportGeneSyms :: [Cybert_entry] -> String -> IO()










exportGeneSyms xs fname = do










 withFile fname WriteMode (\handle -> do










 let contents = unlines (map showJustS (map genesym xs))










 hPutStr handle contents










 )





















exportProbes :: [Cybert_entry] -> String -> IO()










exportProbes xs fname = do










 withFile fname WriteMode (\handle -> do










 let contents = unlines (map probe xs)










 hPutStr handle contents










 )










{-exportRef :: [Cybert_entry] -> String -> String -> IO()-}










{-end IO routines-}














other/fizzbuzz.hs



0 → 100644







View file @ 20804688













--fizzbuzz no arithmetics










f (x:y:z:rest)=x:y:"Fizz":f rest










f xs = xs





















g (x1:x2:x3:x4:"Fizz":rest) = x1:x2:x3:x4:("FizzBuzz"):g rest










g (x1:x2:x3:x4:x5:rest) = x1:x2:x3:x4:"Buzz":g rest










g xs = xs





















fizzbuzz num










 |num== 0 = ["0"]










 |otherwise = "0" : (g $ f $ map show $ takeWhile(<num) [1..])














other/test.hs



0 → 100644







View file @ 20804688













import Data.List (isPrefixOf)










inc :: Int -> Int










inc 0 = 0










inc x = (inc (x-1))+x
































--filter2::Ord a=>(a-> Bool) ->[a]->[a]










filter2 p = foldr (\x acc -> if p x then x :acc else acc ) 1
































fib :: Int -> Int










fib 0=0










fib 1=1










fib x=fib(x-1)+fib(x-2)





















term :: Int -> Double










term 0=0 










term 1=1










term 2=2










term (-1)=1










term (-2)=2










term x=if x<(-2) then term(x+1)* term (x+2) 










 else if (x>2) then term(x-1)*term(x-2) 










 else 0










termfib x = (term . fib)





















dlts= foldr step [] . lines










 where step l ds










 |"#define" `isPrefixOf` l = secondWord l:ds










 |otherwise = ds










 secondWord= head. tail. words





















myfun 0=0










myfun 1=1










myfun 2=2










myfun x=if x>0 then myfun(x-1)^myfun(x-2)










 else 0










mylist []=[]










mylist (x:xs)=not(head xs):mylist(tail xs)





















mylist3 Nope=Nope










mylist3 (Add x xs)=xs





















myreduc Nope = 0










myreduc (Add x y)=x + myreduc (y)










mylist2 []=[]










mylist2 xs=d++mylist2(tail xs)










 where d=mylist xs





















mymerge xs =foldl step [] xs










 where step x ys = ys:x





















mymap f xs= foldr step [] xs










 where step x ys = x `seq` f x:ys










mymap2 f xs= foldr step [] xs










 where step x ys = f x:ys










mycomp = (odd `mymap`) . mymerge 










mycomp2 = mymerge . (odd `mymap`) 










mycomp3 = length.mycomp2










--note : composite operator is right evaluated.










myfoldadd xs = foldl (\s t->s `seq` t `seq` s*t) 1 xs










myfoldadd2 xs = foldl (\s t-> s*t) 1 xs





















class MyClass a where










 eql::a->a->Bool










 add::a->a->a










 fibz::a->a










instance MyClass Bool where










 eql True True = True










 eql False False = True










 eql _ _ = False










 add True False = True










 add False True = True










 add True True = True










 add _ _ = False










 fibz True = True










 fibz False = False





















instance MyClass Int where










 eql x y = x==y










 add x y = x+y










 fibz x = fib x










 --deriving (Eq, Ord, Show)





















data Tryouts = Try1 {










 tries1::String,










 tries2::String}










 |Try2 Int String










 |Try3 Int Int3










 deriving (Show)





















instance MyClass Tryouts where










 eql x y = tries1 x==tries1 y










 add x y = Try1 (tries1 x) (tries2 y)










 fibz x = Try1 (tries1 x++tries2 x) (tries2 x ++ tries1 x)





















data Flags=Flag1 Int Float | Flag2 Float Int










 deriving (Show)
































data Marks=Mark1 Int [Int] 










 | Mark2 [Int] Int










 | Mark3 [Int] [Int]










 | Mark4 [Float] [Int]










 deriving (Show)





















-- closure










--foo :: Num -> Num -> (Num -> Num)










--foo x y = let r = x / y










--          in (\z -> z + r)










--let binds r to the lambda which contains another argument z 










--f :: Num -> Num










--f = foo 1 0










--here invokes with x y










--foo is the closure, f is the function










--main = print (f 123)










--here invokes with z
































data MyMaybe a = MyJust a










 |Nope2










 deriving(Show)










data Templated a b c=Templated a b c










 |Templated2 {










 geta::a, 










 getb::b, 










 getc::c}










 |Templated3 a String c










 deriving (Show)










data Mylist a =Add a (Mylist a)










 | Nope










 deriving (Show)










type Banners=(Flags,Marks)










type Int3=Int










myadd 0 _ = 1










myadd _ 0 = 1










myadd a b 










 | a<0||b<0 = if b==0 then 0 else 0










 | otherwise = a+b+ (myadd (a-1) (b-1))










derp=herp










 where {










 herp=kerp










 where {










 kerp=1;










 herp=2










 };










 derp=1;










 derp2=case derp of{










 1 -> 1;










 2 -> 0}










 }





















mysum xs










 | xs==[] =1










mysum xs = length xs + mysum(tail(xs))





















ran1 :: Int->Int->Int










ran1 times seed










 |times==1 =seed










 |times>1 =(1122345223*(ran1 newtimes seed)+12345) `mod` 54321










 where newtimes=times-1










main=print (term 35 , fib 35)



























Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
20804688


authored
Jun 18, 2013
by


darlliu



Browse files



Commit
20804688


authored
Jun 18, 2013
by


darlliu

20804688authoredbydarlliu

new codes






parent
e8256061
















parent
e8256061





parent












Changes
5
5


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










cybert/cd271ex.hs








View file @ 20804688













-- reproduce the analysis for CD271 pvals, functional stype










-- reproduce the analysis for CD271 pvals, functional style










--










import Cybert










import Control.Monad



......@@ -7,9 +7,6 @@ import Data.Set (fromList, toList, union, empty)









extract:: Maybe [a] -> [a]










extract Nothing = []










extract (Just x) = x










extractS:: Maybe String -> String










extractS Nothing = ""










extractS (Just x) = x










pfind x = map (filter (\y -> probe y == probe x))










 -- find entries with same probeid










countln = foldr (\z acc -> acc + (length z)) 0



......














ml/BoolNet.hs



0 → 100644







View file @ 20804688













module BoolNet 










(










 Feature{










 probe,










 genesym,










 pval,










 b










 },










 extractFeatures,










 extractFeature










) where





















import Data.Bool










import Data.Maybe










import Data.Either










import qualified Data.Bits as Bit










import qualified Cybert as C





















data Feature = Feature {










 probe :: String ,










 genesym :: Maybe String ,










 pval :: Float ,










 b :: Maybe Bool --true, false, or nothing (insignificant)










} deriving (Show, Read)










feature = Feature {










 probe = "None",










 genesym = Just "None",










 pval = 1,










 b = Nothing










}





















extractFeature :: Float -> C.Cybert_entry -> Feature










extractFeature threshold cybt = feature {










 probe = C.probe cybt,










 genesym = C.genesym cybt,










 pval = C.pval cybt,










 b = if (C.pval cybt) > threshold then Nothing










 else either (\x -> Nothing)










 (\x -> if (length x) < 2 then Nothing










 else Just( x!!0 > x!!1))










 (C.mean cybt)










 }










extractFeatures = map extractFeature

























ml/Cybert.hs



0 → 100644







View file @ 20804688













--a simple loader for cybert data










--generates cybert reports and tables










--










--has the following:










--1, a polymorphic and flexible data structure indexed by multiple










--keys.










--2, ability to do set operation, selection filtering and mapping 










--on entries










--3, IO for both human readable format and message passing to other python










--code










--










{-module definitions -}










module Cybert










(










 Cybert_entry(NA, Cybert,probe,genesym,










 sample, collection, mean, bf, bh, sds, 










 pval,ratio,secondaryRefs,secondaryData),










 cybert_entry,










 showCybertEntries,










 entriesByFold,










 entriesByPval,










 entriesBySym,










 entriesByUpDown,










 entriesBySecondaryRef,










 cybertToSet,










 loadCybert,










 exportCybert,










 exportGeneSyms,










 exportProbes










) where










{-end module definitions -}










import Data.Bits










import Data.List










import Data.Maybe










import Data.Char










import System.IO










import System.IO.Error










import qualified Data.Set as S










import qualified Data.Map as M










import qualified Data.ByteString.Char8 as B





















{-basic data types-}










data Cybert_entry = NA | Cybert {










 probe :: String ,










 genesym :: Maybe String ,










 sample :: [String] ,










 collection :: Maybe String , --which dataset










 mean :: Either Float [Float] , --multiple means










 sds :: Either Float [Float],










 pval :: Float, --the pairwise or ANOVA pval










 bf :: Float,










 bh :: Float,










 ratio :: Either Float [Float], --pairwise ratio or numerous ratios










 secondaryRefs :: M.Map String String , --optional secondary refs










 secondaryData :: M.Map String Float , --optional secondary data










 raw :: B.ByteString










}










cybert_entry = Cybert{










 -- default constructor










 probe = "NONE",










 genesym = Nothing,










 sample = [],










 collection = Nothing,










 mean = Right [],










 sds = Right [],










 pval = -1,










 bf = -1,










 bh = -1,










 ratio = Left (-1),










 secondaryRefs = M.fromList [("","")],










 secondaryData = M.fromList [("",0)],










 raw = B.empty










}





















hasher :: String -> Int










hasher = foldl (\h c -> 33*h `xor` fromEnum c) 5381










cybertHash :: Cybert_entry -> Int










cybertHash NA = 0










cybertHash Cybert{probe=p} = hasher p










{-cybertHash Cybert{probe=p, collection=(Just s)} = hasher $ s++p-}





















instance Eq Cybert_entry where










 a == b = (cybertHash a) == (cybertHash b)










instance Ord Cybert_entry where










 compare a b = compare (cybertHash a) (cybertHash b)










--hashing










{-end basic data types-}










{-format and show routines-}










showJustS::Maybe String -> String










showJustS Nothing = "N/A"










showJustS (Just x) = x





















showEitherF::(Either Float [Float]) -> String










showEitherF (Left x) = show x










showEitherF (Right xxs@(x:[])) = show x










showEitherF (Right xxs@(x:xs)) = (show x) ++"\t"++ (showEitherF (Right xs))





















showCybertEntries::[Cybert_entry]->String










showCybertEntries (x:[])= show x










showCybertEntries (x:xs)= (show x) ++ "\n" ++ (showCybertEntries xs)





















instance Show Cybert_entry where










 showsPrec _ a s = show a ++ s










 show NA = "NA"










 show Cybert {probe=p, genesym=sym, sample=ss, collection=col, mean=m,










 pval=pv, ratio=r, secondaryRefs=_, secondaryData=_,raw=_} = p++"\t"++










 (showJustS sym)++"\t"++(showJustS col) ++"\t" ++(showEitherF m)++"\t"++(show pv)










 -- for each sample










{-end format and show routines-}










{-set operation and filtering routines-}










entriesBySym :: String -> [Cybert_entry] -> [Cybert_entry]










entriesBySym sym xs = filter (\x -> genesym x == (Just sym)) xs





















entryByProbe :: String -> [Cybert_entry] -> Cybert_entry










entryByProbe p xs = head $ filter (\x -> probe x == p) xs





















entriesBySecondaryRef :: String -> String -> [Cybert_entry] -> [Cybert_entry]










entriesBySecondaryRef tref ref xs = filter (\x -> (secondaryRefs x) M.! tref == ref) xs










--lookup










entriesByFold :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByFold threshold xs = filter (\x ->pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b)= if length b < 2 then False










 else b!!1-b!!0 > threshold





















entriesByPval :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByPval threshold xs = filter (\x -> pval x < threshold) xs





















entriesByUpDown :: Bool -> [Cybert_entry] -> [Cybert_entry]










entriesByUpDown val xs = filter (\x -> pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b) = if length b < 2 then False










 else let bigger = (b!!1-b!!0>0)










 in bigger==val










--filtering





















cybertToSet :: [Cybert_entry] -> S.Set Cybert_entry










cybertToSet xs = S.fromList xs










--set operations










{-end set operation and filtering routines-}










{-IO routines-}










buildHeaderPrec :: B.ByteString -> [(String , B.ByteString)]










buildHeaderPrec s = let ss = B.split '\t' s










 in map (\x -> (stripQuote $ B.unpack x, x)) ss where










 stripQuote ('\"':xs) = map toLower $ take ((length xs) - 1) xs










 stripQuote xs = map toLower xs





















buildHeader :: B.ByteString -> (M.Map String (Maybe Int) )










buildHeader s = let ss = buildHeaderPrec s; sl = B.split '\t' s










 in M.fromList $ map (\x -> (fst x , (snd x) `elemIndex` sl)) ss










maybeGet :: [B.ByteString] -> Maybe Int -> B.ByteString










[] `maybeGet` _ = B.pack ""










x `maybeGet` Nothing = B.pack ""










x `maybeGet` (Just s)= if length x > s then x !! s










 else B.pack ""





















getText :: (M.Map String (Maybe Int))-> [B.ByteString] -> String -> Maybe String










getText header ss id = if id `M.notMember` header










 then Nothing










 else let idx = header M.! id










 in Just (B.unpack $ ss `maybeGet` idx)










getNum :: (M.Map String (Maybe Int))-> [B.ByteString] -> String -> Float










getNum header ss id = if id `M.notMember` header










 then -1 :: Float










 else let idx = header M.! id










 in read (B.unpack $ ss `maybeGet` idx) :: Float










getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Float [Float]










getNums header ss ids = let nums = map (getNum header ss) ids










 in if length nums == 1 then Left (nums !! 0)










 else Right $ filter (not . (== -1)) nums










lineToCybert :: (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










--take a header and an accumulator, then read the line and append the cybert entry










lineToCybert header fname line = readLine line where










 readLine s = let ss = B.split '\t' s 










 in if length ss /= M.size header then cybert_entry










 else let cybt= cybert_entry {










 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),










 --this is a must










 genesym = getText header ss "gene_sym",










 --this is of maybe type










 pval = getNum header ss "pval",










 bf = getNum header ss "bonferroni",










 bh = getNum header ss "bh",










 collection = Just fname,










 --these are -1 defaulted










 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]










 --these are one or many










 , raw = s










 --raw info










 } in cybt





















loadCybert :: String -> IO (Maybe [Cybert_entry])










loadCybert fname = catch










 (withFile fname ReadMode (\handle -> do










 contents <- B.hGetContents handle










 let mylines = B.split '\n' contents










 if length mylines <= 1 then return Nothing










 else let header = buildHeader (head mylines);










 output = Just (filter (not.isNothing.collection)










 $ map (lineToCybert header fname) (drop 1 mylines))










 in if output == (Just []) then return Nothing










 else return output










 ))










 (\err -> do










 if isEOFError err










 then do










 putStrLn "File is empty or truncated."










 return Nothing










 else do










 putStrLn $ "Unexpected Error at opening file: "++ (show err)










 return Nothing










 )










-- Loads a cybert table from fname










exportCybert :: [Cybert_entry] -> String -> IO()










exportCybert xs fname = do










 withFile fname WriteMode (\handle -> do










 let contents = showCybertEntries xs










 hPutStr handle contents










 )





















exportGeneSyms :: [Cybert_entry] -> String -> IO()










exportGeneSyms xs fname = do










 withFile fname WriteMode (\handle -> do










 let contents = unlines (map showJustS (map genesym xs))










 hPutStr handle contents










 )





















exportProbes :: [Cybert_entry] -> String -> IO()










exportProbes xs fname = do










 withFile fname WriteMode (\handle -> do










 let contents = unlines (map probe xs)










 hPutStr handle contents










 )










{-exportRef :: [Cybert_entry] -> String -> String -> IO()-}










{-end IO routines-}














other/fizzbuzz.hs



0 → 100644







View file @ 20804688













--fizzbuzz no arithmetics










f (x:y:z:rest)=x:y:"Fizz":f rest










f xs = xs





















g (x1:x2:x3:x4:"Fizz":rest) = x1:x2:x3:x4:("FizzBuzz"):g rest










g (x1:x2:x3:x4:x5:rest) = x1:x2:x3:x4:"Buzz":g rest










g xs = xs





















fizzbuzz num










 |num== 0 = ["0"]










 |otherwise = "0" : (g $ f $ map show $ takeWhile(<num) [1..])














other/test.hs



0 → 100644







View file @ 20804688













import Data.List (isPrefixOf)










inc :: Int -> Int










inc 0 = 0










inc x = (inc (x-1))+x
































--filter2::Ord a=>(a-> Bool) ->[a]->[a]










filter2 p = foldr (\x acc -> if p x then x :acc else acc ) 1
































fib :: Int -> Int










fib 0=0










fib 1=1










fib x=fib(x-1)+fib(x-2)





















term :: Int -> Double










term 0=0 










term 1=1










term 2=2










term (-1)=1










term (-2)=2










term x=if x<(-2) then term(x+1)* term (x+2) 










 else if (x>2) then term(x-1)*term(x-2) 










 else 0










termfib x = (term . fib)





















dlts= foldr step [] . lines










 where step l ds










 |"#define" `isPrefixOf` l = secondWord l:ds










 |otherwise = ds










 secondWord= head. tail. words





















myfun 0=0










myfun 1=1










myfun 2=2










myfun x=if x>0 then myfun(x-1)^myfun(x-2)










 else 0










mylist []=[]










mylist (x:xs)=not(head xs):mylist(tail xs)





















mylist3 Nope=Nope










mylist3 (Add x xs)=xs





















myreduc Nope = 0










myreduc (Add x y)=x + myreduc (y)










mylist2 []=[]










mylist2 xs=d++mylist2(tail xs)










 where d=mylist xs





















mymerge xs =foldl step [] xs










 where step x ys = ys:x





















mymap f xs= foldr step [] xs










 where step x ys = x `seq` f x:ys










mymap2 f xs= foldr step [] xs










 where step x ys = f x:ys










mycomp = (odd `mymap`) . mymerge 










mycomp2 = mymerge . (odd `mymap`) 










mycomp3 = length.mycomp2










--note : composite operator is right evaluated.










myfoldadd xs = foldl (\s t->s `seq` t `seq` s*t) 1 xs










myfoldadd2 xs = foldl (\s t-> s*t) 1 xs





















class MyClass a where










 eql::a->a->Bool










 add::a->a->a










 fibz::a->a










instance MyClass Bool where










 eql True True = True










 eql False False = True










 eql _ _ = False










 add True False = True










 add False True = True










 add True True = True










 add _ _ = False










 fibz True = True










 fibz False = False





















instance MyClass Int where










 eql x y = x==y










 add x y = x+y










 fibz x = fib x










 --deriving (Eq, Ord, Show)





















data Tryouts = Try1 {










 tries1::String,










 tries2::String}










 |Try2 Int String










 |Try3 Int Int3










 deriving (Show)





















instance MyClass Tryouts where










 eql x y = tries1 x==tries1 y










 add x y = Try1 (tries1 x) (tries2 y)










 fibz x = Try1 (tries1 x++tries2 x) (tries2 x ++ tries1 x)





















data Flags=Flag1 Int Float | Flag2 Float Int










 deriving (Show)
































data Marks=Mark1 Int [Int] 










 | Mark2 [Int] Int










 | Mark3 [Int] [Int]










 | Mark4 [Float] [Int]










 deriving (Show)





















-- closure










--foo :: Num -> Num -> (Num -> Num)










--foo x y = let r = x / y










--          in (\z -> z + r)










--let binds r to the lambda which contains another argument z 










--f :: Num -> Num










--f = foo 1 0










--here invokes with x y










--foo is the closure, f is the function










--main = print (f 123)










--here invokes with z
































data MyMaybe a = MyJust a










 |Nope2










 deriving(Show)










data Templated a b c=Templated a b c










 |Templated2 {










 geta::a, 










 getb::b, 










 getc::c}










 |Templated3 a String c










 deriving (Show)










data Mylist a =Add a (Mylist a)










 | Nope










 deriving (Show)










type Banners=(Flags,Marks)










type Int3=Int










myadd 0 _ = 1










myadd _ 0 = 1










myadd a b 










 | a<0||b<0 = if b==0 then 0 else 0










 | otherwise = a+b+ (myadd (a-1) (b-1))










derp=herp










 where {










 herp=kerp










 where {










 kerp=1;










 herp=2










 };










 derp=1;










 derp2=case derp of{










 1 -> 1;










 2 -> 0}










 }





















mysum xs










 | xs==[] =1










mysum xs = length xs + mysum(tail(xs))





















ran1 :: Int->Int->Int










ran1 times seed










 |times==1 =seed










 |times>1 =(1122345223*(ran1 newtimes seed)+12345) `mod` 54321










 where newtimes=times-1










main=print (term 35 , fib 35)

























cybert/cd271ex.hs








View file @ 20804688













-- reproduce the analysis for CD271 pvals, functional stype










-- reproduce the analysis for CD271 pvals, functional style










--










import Cybert










import Control.Monad



......@@ -7,9 +7,6 @@ import Data.Set (fromList, toList, union, empty)









extract:: Maybe [a] -> [a]










extract Nothing = []










extract (Just x) = x










extractS:: Maybe String -> String










extractS Nothing = ""










extractS (Just x) = x










pfind x = map (filter (\y -> probe y == probe x))










 -- find entries with same probeid










countln = foldr (\z acc -> acc + (length z)) 0



......












cybert/cd271ex.hs








View file @ 20804688








cybert/cd271ex.hs










View file @ 20804688


20804688










-- reproduce the analysis for CD271 pvals, functional stype










-- reproduce the analysis for CD271 pvals, functional style










--










import Cybert










import Control.Monad



......@@ -7,9 +7,6 @@ import Data.Set (fromList, toList, union, empty)









extract:: Maybe [a] -> [a]










extract Nothing = []










extract (Just x) = x










extractS:: Maybe String -> String










extractS Nothing = ""










extractS (Just x) = x










pfind x = map (filter (\y -> probe y == probe x))










 -- find entries with same probeid










countln = foldr (\z acc -> acc + (length z)) 0



......













-- reproduce the analysis for CD271 pvals, functional stype










-- reproduce the analysis for CD271 pvals, functional style










--










import Cybert










import Control.Monad



......@@ -7,9 +7,6 @@ import Data.Set (fromList, toList, union, empty)









extract:: Maybe [a] -> [a]










extract Nothing = []










extract (Just x) = x










extractS:: Maybe String -> String










extractS Nothing = ""










extractS (Just x) = x










pfind x = map (filter (\y -> probe y == probe x))










 -- find entries with same probeid










countln = foldr (\z acc -> acc + (length z)) 0



......


-- reproduce the analysis for CD271 pvals, functional stype-- reproduce the analysis for CD271 pvals, functional stypep-- reproduce the analysis for CD271 pvals, functional style-- reproduce the analysis for CD271 pvals, functional stylel----import CybertimportCybertimport Control.MonadimportControl.Monadextract:: Maybe [a] -> [a]extract::Maybe[a]->[a]extract Nothing = []extractNothing=[]extract (Just x) = xextract(Justx)=xextractS:: Maybe String -> StringextractS::MaybeString->StringextractS Nothing = ""extractSNothing=""extractS (Just x) = xextractS(Justx)=xpfind x = map (filter (\y -> probe y == probe x))pfindx=map(filter(\y->probey==probex)) -- find entries with same probeid-- find entries with same probeidcountln = foldr (\z acc -> acc + (length z)) 0countln=foldr(\zacc->acc+(lengthz))0








ml/BoolNet.hs



0 → 100644







View file @ 20804688













module BoolNet 










(










 Feature{










 probe,










 genesym,










 pval,










 b










 },










 extractFeatures,










 extractFeature










) where





















import Data.Bool










import Data.Maybe










import Data.Either










import qualified Data.Bits as Bit










import qualified Cybert as C





















data Feature = Feature {










 probe :: String ,










 genesym :: Maybe String ,










 pval :: Float ,










 b :: Maybe Bool --true, false, or nothing (insignificant)










} deriving (Show, Read)










feature = Feature {










 probe = "None",










 genesym = Just "None",










 pval = 1,










 b = Nothing










}





















extractFeature :: Float -> C.Cybert_entry -> Feature










extractFeature threshold cybt = feature {










 probe = C.probe cybt,










 genesym = C.genesym cybt,










 pval = C.pval cybt,










 b = if (C.pval cybt) > threshold then Nothing










 else either (\x -> Nothing)










 (\x -> if (length x) < 2 then Nothing










 else Just( x!!0 > x!!1))










 (C.mean cybt)










 }










extractFeatures = map extractFeature























ml/BoolNet.hs



0 → 100644







View file @ 20804688








ml/BoolNet.hs



0 → 100644









View file @ 20804688


20804688










module BoolNet 










(










 Feature{










 probe,










 genesym,










 pval,










 b










 },










 extractFeatures,










 extractFeature










) where





















import Data.Bool










import Data.Maybe










import Data.Either










import qualified Data.Bits as Bit










import qualified Cybert as C





















data Feature = Feature {










 probe :: String ,










 genesym :: Maybe String ,










 pval :: Float ,










 b :: Maybe Bool --true, false, or nothing (insignificant)










} deriving (Show, Read)










feature = Feature {










 probe = "None",










 genesym = Just "None",










 pval = 1,










 b = Nothing










}





















extractFeature :: Float -> C.Cybert_entry -> Feature










extractFeature threshold cybt = feature {










 probe = C.probe cybt,










 genesym = C.genesym cybt,










 pval = C.pval cybt,










 b = if (C.pval cybt) > threshold then Nothing










 else either (\x -> Nothing)










 (\x -> if (length x) < 2 then Nothing










 else Just( x!!0 > x!!1))










 (C.mean cybt)










 }










extractFeatures = map extractFeature
























module BoolNet 










(










 Feature{










 probe,










 genesym,










 pval,










 b










 },










 extractFeatures,










 extractFeature










) where





















import Data.Bool










import Data.Maybe










import Data.Either










import qualified Data.Bits as Bit










import qualified Cybert as C





















data Feature = Feature {










 probe :: String ,










 genesym :: Maybe String ,










 pval :: Float ,










 b :: Maybe Bool --true, false, or nothing (insignificant)










} deriving (Show, Read)










feature = Feature {










 probe = "None",










 genesym = Just "None",










 pval = 1,










 b = Nothing










}





















extractFeature :: Float -> C.Cybert_entry -> Feature










extractFeature threshold cybt = feature {










 probe = C.probe cybt,










 genesym = C.genesym cybt,










 pval = C.pval cybt,










 b = if (C.pval cybt) > threshold then Nothing










 else either (\x -> Nothing)










 (\x -> if (length x) < 2 then Nothing










 else Just( x!!0 > x!!1))










 (C.mean cybt)










 }










extractFeatures = map extractFeature













module BoolNet moduleBoolNet(( Feature{Feature{ probe,probe, genesym,genesym, pval,pval, bb },}, extractFeatures,extractFeatures, extractFeatureextractFeature) where)whereimport Data.BoolimportData.Boolimport Data.MaybeimportData.Maybeimport Data.EitherimportData.Eitherimport qualified Data.Bits as BitimportqualifiedData.BitsasBitimport qualified Cybert as CimportqualifiedCybertasCdata Feature = Feature {dataFeature=Feature{ probe :: String ,probe::String, genesym :: Maybe String ,genesym::MaybeString, pval :: Float ,pval::Float, b :: Maybe Bool --true, false, or nothing (insignificant)b::MaybeBool--true, false, or nothing (insignificant)} deriving (Show, Read)}deriving(Show,Read)feature = Feature {feature=Feature{ probe = "None",probe="None", genesym = Just "None",genesym=Just"None", pval = 1,pval=1, b = Nothingb=Nothing}}extractFeature :: Float -> C.Cybert_entry -> FeatureextractFeature::Float->C.Cybert_entry->FeatureextractFeature threshold cybt = feature {extractFeaturethresholdcybt=feature{ probe = C.probe cybt,probe=C.probecybt, genesym = C.genesym cybt,genesym=C.genesymcybt, pval = C.pval cybt,pval=C.pvalcybt, b = if (C.pval cybt) > threshold then Nothingb=if(C.pvalcybt)>thresholdthenNothing else either (\x -> Nothing)elseeither(\x->Nothing) (\x -> if (length x) < 2 then Nothing(\x->if(lengthx)<2thenNothing else Just( x!!0 > x!!1))elseJust(x!!0>x!!1)) (C.mean cybt)(C.meancybt) }}extractFeatures = map extractFeatureextractFeatures=mapextractFeature








ml/Cybert.hs



0 → 100644







View file @ 20804688













--a simple loader for cybert data










--generates cybert reports and tables










--










--has the following:










--1, a polymorphic and flexible data structure indexed by multiple










--keys.










--2, ability to do set operation, selection filtering and mapping 










--on entries










--3, IO for both human readable format and message passing to other python










--code










--










{-module definitions -}










module Cybert










(










 Cybert_entry(NA, Cybert,probe,genesym,










 sample, collection, mean, bf, bh, sds, 










 pval,ratio,secondaryRefs,secondaryData),










 cybert_entry,










 showCybertEntries,










 entriesByFold,










 entriesByPval,










 entriesBySym,










 entriesByUpDown,










 entriesBySecondaryRef,










 cybertToSet,










 loadCybert,










 exportCybert,










 exportGeneSyms,










 exportProbes










) where










{-end module definitions -}










import Data.Bits










import Data.List










import Data.Maybe










import Data.Char










import System.IO










import System.IO.Error










import qualified Data.Set as S










import qualified Data.Map as M










import qualified Data.ByteString.Char8 as B





















{-basic data types-}










data Cybert_entry = NA | Cybert {










 probe :: String ,










 genesym :: Maybe String ,










 sample :: [String] ,










 collection :: Maybe String , --which dataset










 mean :: Either Float [Float] , --multiple means










 sds :: Either Float [Float],










 pval :: Float, --the pairwise or ANOVA pval










 bf :: Float,










 bh :: Float,










 ratio :: Either Float [Float], --pairwise ratio or numerous ratios










 secondaryRefs :: M.Map String String , --optional secondary refs










 secondaryData :: M.Map String Float , --optional secondary data










 raw :: B.ByteString










}










cybert_entry = Cybert{










 -- default constructor










 probe = "NONE",










 genesym = Nothing,










 sample = [],










 collection = Nothing,










 mean = Right [],










 sds = Right [],










 pval = -1,










 bf = -1,










 bh = -1,










 ratio = Left (-1),










 secondaryRefs = M.fromList [("","")],










 secondaryData = M.fromList [("",0)],










 raw = B.empty










}





















hasher :: String -> Int










hasher = foldl (\h c -> 33*h `xor` fromEnum c) 5381










cybertHash :: Cybert_entry -> Int










cybertHash NA = 0










cybertHash Cybert{probe=p} = hasher p










{-cybertHash Cybert{probe=p, collection=(Just s)} = hasher $ s++p-}





















instance Eq Cybert_entry where










 a == b = (cybertHash a) == (cybertHash b)










instance Ord Cybert_entry where










 compare a b = compare (cybertHash a) (cybertHash b)










--hashing










{-end basic data types-}










{-format and show routines-}










showJustS::Maybe String -> String










showJustS Nothing = "N/A"










showJustS (Just x) = x





















showEitherF::(Either Float [Float]) -> String










showEitherF (Left x) = show x










showEitherF (Right xxs@(x:[])) = show x










showEitherF (Right xxs@(x:xs)) = (show x) ++"\t"++ (showEitherF (Right xs))





















showCybertEntries::[Cybert_entry]->String










showCybertEntries (x:[])= show x










showCybertEntries (x:xs)= (show x) ++ "\n" ++ (showCybertEntries xs)





















instance Show Cybert_entry where










 showsPrec _ a s = show a ++ s










 show NA = "NA"










 show Cybert {probe=p, genesym=sym, sample=ss, collection=col, mean=m,










 pval=pv, ratio=r, secondaryRefs=_, secondaryData=_,raw=_} = p++"\t"++










 (showJustS sym)++"\t"++(showJustS col) ++"\t" ++(showEitherF m)++"\t"++(show pv)










 -- for each sample










{-end format and show routines-}










{-set operation and filtering routines-}










entriesBySym :: String -> [Cybert_entry] -> [Cybert_entry]










entriesBySym sym xs = filter (\x -> genesym x == (Just sym)) xs





















entryByProbe :: String -> [Cybert_entry] -> Cybert_entry










entryByProbe p xs = head $ filter (\x -> probe x == p) xs





















entriesBySecondaryRef :: String -> String -> [Cybert_entry] -> [Cybert_entry]










entriesBySecondaryRef tref ref xs = filter (\x -> (secondaryRefs x) M.! tref == ref) xs










--lookup










entriesByFold :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByFold threshold xs = filter (\x ->pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b)= if length b < 2 then False










 else b!!1-b!!0 > threshold





















entriesByPval :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByPval threshold xs = filter (\x -> pval x < threshold) xs





















entriesByUpDown :: Bool -> [Cybert_entry] -> [Cybert_entry]










entriesByUpDown val xs = filter (\x -> pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b) = if length b < 2 then False










 else let bigger = (b!!1-b!!0>0)










 in bigger==val










--filtering





















cybertToSet :: [Cybert_entry] -> S.Set Cybert_entry










cybertToSet xs = S.fromList xs










--set operations










{-end set operation and filtering routines-}










{-IO routines-}










buildHeaderPrec :: B.ByteString -> [(String , B.ByteString)]










buildHeaderPrec s = let ss = B.split '\t' s










 in map (\x -> (stripQuote $ B.unpack x, x)) ss where










 stripQuote ('\"':xs) = map toLower $ take ((length xs) - 1) xs










 stripQuote xs = map toLower xs





















buildHeader :: B.ByteString -> (M.Map String (Maybe Int) )










buildHeader s = let ss = buildHeaderPrec s; sl = B.split '\t' s










 in M.fromList $ map (\x -> (fst x , (snd x) `elemIndex` sl)) ss










maybeGet :: [B.ByteString] -> Maybe Int -> B.ByteString










[] `maybeGet` _ = B.pack ""










x `maybeGet` Nothing = B.pack ""










x `maybeGet` (Just s)= if length x > s then x !! s










 else B.pack ""





















getText :: (M.Map String (Maybe Int))-> [B.ByteString] -> String -> Maybe String










getText header ss id = if id `M.notMember` header










 then Nothing










 else let idx = header M.! id










 in Just (B.unpack $ ss `maybeGet` idx)










getNum :: (M.Map String (Maybe Int))-> [B.ByteString] -> String -> Float










getNum header ss id = if id `M.notMember` header










 then -1 :: Float










 else let idx = header M.! id










 in read (B.unpack $ ss `maybeGet` idx) :: Float










getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Float [Float]










getNums header ss ids = let nums = map (getNum header ss) ids










 in if length nums == 1 then Left (nums !! 0)










 else Right $ filter (not . (== -1)) nums










lineToCybert :: (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










--take a header and an accumulator, then read the line and append the cybert entry










lineToCybert header fname line = readLine line where










 readLine s = let ss = B.split '\t' s 










 in if length ss /= M.size header then cybert_entry










 else let cybt= cybert_entry {










 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),










 --this is a must










 genesym = getText header ss "gene_sym",










 --this is of maybe type










 pval = getNum header ss "pval",










 bf = getNum header ss "bonferroni",










 bh = getNum header ss "bh",










 collection = Just fname,










 --these are -1 defaulted










 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]










 --these are one or many










 , raw = s










 --raw info










 } in cybt





















loadCybert :: String -> IO (Maybe [Cybert_entry])










loadCybert fname = catch










 (withFile fname ReadMode (\handle -> do










 contents <- B.hGetContents handle










 let mylines = B.split '\n' contents










 if length mylines <= 1 then return Nothing










 else let header = buildHeader (head mylines);










 output = Just (filter (not.isNothing.collection)










 $ map (lineToCybert header fname) (drop 1 mylines))










 in if output == (Just []) then return Nothing










 else return output










 ))










 (\err -> do










 if isEOFError err










 then do










 putStrLn "File is empty or truncated."










 return Nothing










 else do










 putStrLn $ "Unexpected Error at opening file: "++ (show err)










 return Nothing










 )










-- Loads a cybert table from fname










exportCybert :: [Cybert_entry] -> String -> IO()










exportCybert xs fname = do










 withFile fname WriteMode (\handle -> do










 let contents = showCybertEntries xs










 hPutStr handle contents










 )





















exportGeneSyms :: [Cybert_entry] -> String -> IO()










exportGeneSyms xs fname = do










 withFile fname WriteMode (\handle -> do










 let contents = unlines (map showJustS (map genesym xs))










 hPutStr handle contents










 )





















exportProbes :: [Cybert_entry] -> String -> IO()










exportProbes xs fname = do










 withFile fname WriteMode (\handle -> do










 let contents = unlines (map probe xs)










 hPutStr handle contents










 )










{-exportRef :: [Cybert_entry] -> String -> String -> IO()-}










{-end IO routines-}












ml/Cybert.hs



0 → 100644







View file @ 20804688








ml/Cybert.hs



0 → 100644









View file @ 20804688


20804688










--a simple loader for cybert data










--generates cybert reports and tables










--










--has the following:










--1, a polymorphic and flexible data structure indexed by multiple










--keys.










--2, ability to do set operation, selection filtering and mapping 










--on entries










--3, IO for both human readable format and message passing to other python










--code










--










{-module definitions -}










module Cybert










(










 Cybert_entry(NA, Cybert,probe,genesym,










 sample, collection, mean, bf, bh, sds, 










 pval,ratio,secondaryRefs,secondaryData),










 cybert_entry,










 showCybertEntries,










 entriesByFold,










 entriesByPval,










 entriesBySym,










 entriesByUpDown,










 entriesBySecondaryRef,










 cybertToSet,










 loadCybert,










 exportCybert,










 exportGeneSyms,










 exportProbes










) where










{-end module definitions -}










import Data.Bits










import Data.List










import Data.Maybe










import Data.Char










import System.IO










import System.IO.Error










import qualified Data.Set as S










import qualified Data.Map as M










import qualified Data.ByteString.Char8 as B





















{-basic data types-}










data Cybert_entry = NA | Cybert {










 probe :: String ,










 genesym :: Maybe String ,










 sample :: [String] ,










 collection :: Maybe String , --which dataset










 mean :: Either Float [Float] , --multiple means










 sds :: Either Float [Float],










 pval :: Float, --the pairwise or ANOVA pval










 bf :: Float,










 bh :: Float,










 ratio :: Either Float [Float], --pairwise ratio or numerous ratios










 secondaryRefs :: M.Map String String , --optional secondary refs










 secondaryData :: M.Map String Float , --optional secondary data










 raw :: B.ByteString










}










cybert_entry = Cybert{










 -- default constructor










 probe = "NONE",










 genesym = Nothing,










 sample = [],










 collection = Nothing,










 mean = Right [],










 sds = Right [],










 pval = -1,










 bf = -1,










 bh = -1,










 ratio = Left (-1),










 secondaryRefs = M.fromList [("","")],










 secondaryData = M.fromList [("",0)],










 raw = B.empty










}





















hasher :: String -> Int










hasher = foldl (\h c -> 33*h `xor` fromEnum c) 5381










cybertHash :: Cybert_entry -> Int










cybertHash NA = 0










cybertHash Cybert{probe=p} = hasher p










{-cybertHash Cybert{probe=p, collection=(Just s)} = hasher $ s++p-}





















instance Eq Cybert_entry where










 a == b = (cybertHash a) == (cybertHash b)










instance Ord Cybert_entry where










 compare a b = compare (cybertHash a) (cybertHash b)










--hashing










{-end basic data types-}










{-format and show routines-}










showJustS::Maybe String -> String










showJustS Nothing = "N/A"










showJustS (Just x) = x





















showEitherF::(Either Float [Float]) -> String










showEitherF (Left x) = show x










showEitherF (Right xxs@(x:[])) = show x










showEitherF (Right xxs@(x:xs)) = (show x) ++"\t"++ (showEitherF (Right xs))





















showCybertEntries::[Cybert_entry]->String










showCybertEntries (x:[])= show x










showCybertEntries (x:xs)= (show x) ++ "\n" ++ (showCybertEntries xs)





















instance Show Cybert_entry where










 showsPrec _ a s = show a ++ s










 show NA = "NA"










 show Cybert {probe=p, genesym=sym, sample=ss, collection=col, mean=m,










 pval=pv, ratio=r, secondaryRefs=_, secondaryData=_,raw=_} = p++"\t"++










 (showJustS sym)++"\t"++(showJustS col) ++"\t" ++(showEitherF m)++"\t"++(show pv)










 -- for each sample










{-end format and show routines-}










{-set operation and filtering routines-}










entriesBySym :: String -> [Cybert_entry] -> [Cybert_entry]










entriesBySym sym xs = filter (\x -> genesym x == (Just sym)) xs





















entryByProbe :: String -> [Cybert_entry] -> Cybert_entry










entryByProbe p xs = head $ filter (\x -> probe x == p) xs





















entriesBySecondaryRef :: String -> String -> [Cybert_entry] -> [Cybert_entry]










entriesBySecondaryRef tref ref xs = filter (\x -> (secondaryRefs x) M.! tref == ref) xs










--lookup










entriesByFold :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByFold threshold xs = filter (\x ->pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b)= if length b < 2 then False










 else b!!1-b!!0 > threshold





















entriesByPval :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByPval threshold xs = filter (\x -> pval x < threshold) xs





















entriesByUpDown :: Bool -> [Cybert_entry] -> [Cybert_entry]










entriesByUpDown val xs = filter (\x -> pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b) = if length b < 2 then False










 else let bigger = (b!!1-b!!0>0)










 in bigger==val










--filtering





















cybertToSet :: [Cybert_entry] -> S.Set Cybert_entry










cybertToSet xs = S.fromList xs










--set operations










{-end set operation and filtering routines-}










{-IO routines-}










buildHeaderPrec :: B.ByteString -> [(String , B.ByteString)]










buildHeaderPrec s = let ss = B.split '\t' s










 in map (\x -> (stripQuote $ B.unpack x, x)) ss where










 stripQuote ('\"':xs) = map toLower $ take ((length xs) - 1) xs










 stripQuote xs = map toLower xs





















buildHeader :: B.ByteString -> (M.Map String (Maybe Int) )










buildHeader s = let ss = buildHeaderPrec s; sl = B.split '\t' s










 in M.fromList $ map (\x -> (fst x , (snd x) `elemIndex` sl)) ss










maybeGet :: [B.ByteString] -> Maybe Int -> B.ByteString










[] `maybeGet` _ = B.pack ""










x `maybeGet` Nothing = B.pack ""










x `maybeGet` (Just s)= if length x > s then x !! s










 else B.pack ""





















getText :: (M.Map String (Maybe Int))-> [B.ByteString] -> String -> Maybe String










getText header ss id = if id `M.notMember` header










 then Nothing










 else let idx = header M.! id










 in Just (B.unpack $ ss `maybeGet` idx)










getNum :: (M.Map String (Maybe Int))-> [B.ByteString] -> String -> Float










getNum header ss id = if id `M.notMember` header










 then -1 :: Float










 else let idx = header M.! id










 in read (B.unpack $ ss `maybeGet` idx) :: Float










getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Float [Float]










getNums header ss ids = let nums = map (getNum header ss) ids










 in if length nums == 1 then Left (nums !! 0)










 else Right $ filter (not . (== -1)) nums










lineToCybert :: (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










--take a header and an accumulator, then read the line and append the cybert entry










lineToCybert header fname line = readLine line where










 readLine s = let ss = B.split '\t' s 










 in if length ss /= M.size header then cybert_entry










 else let cybt= cybert_entry {










 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),










 --this is a must










 genesym = getText header ss "gene_sym",










 --this is of maybe type










 pval = getNum header ss "pval",










 bf = getNum header ss "bonferroni",










 bh = getNum header ss "bh",










 collection = Just fname,










 --these are -1 defaulted










 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]










 --these are one or many










 , raw = s










 --raw info










 } in cybt





















loadCybert :: String -> IO (Maybe [Cybert_entry])










loadCybert fname = catch










 (withFile fname ReadMode (\handle -> do










 contents <- B.hGetContents handle










 let mylines = B.split '\n' contents










 if length mylines <= 1 then return Nothing










 else let header = buildHeader (head mylines);










 output = Just (filter (not.isNothing.collection)










 $ map (lineToCybert header fname) (drop 1 mylines))










 in if output == (Just []) then return Nothing










 else return output










 ))










 (\err -> do










 if isEOFError err










 then do










 putStrLn "File is empty or truncated."










 return Nothing










 else do










 putStrLn $ "Unexpected Error at opening file: "++ (show err)










 return Nothing










 )










-- Loads a cybert table from fname










exportCybert :: [Cybert_entry] -> String -> IO()










exportCybert xs fname = do










 withFile fname WriteMode (\handle -> do










 let contents = showCybertEntries xs










 hPutStr handle contents










 )





















exportGeneSyms :: [Cybert_entry] -> String -> IO()










exportGeneSyms xs fname = do










 withFile fname WriteMode (\handle -> do










 let contents = unlines (map showJustS (map genesym xs))










 hPutStr handle contents










 )





















exportProbes :: [Cybert_entry] -> String -> IO()










exportProbes xs fname = do










 withFile fname WriteMode (\handle -> do










 let contents = unlines (map probe xs)










 hPutStr handle contents










 )










{-exportRef :: [Cybert_entry] -> String -> String -> IO()-}










{-end IO routines-}













--a simple loader for cybert data










--generates cybert reports and tables










--










--has the following:










--1, a polymorphic and flexible data structure indexed by multiple










--keys.










--2, ability to do set operation, selection filtering and mapping 










--on entries










--3, IO for both human readable format and message passing to other python










--code










--










{-module definitions -}










module Cybert










(










 Cybert_entry(NA, Cybert,probe,genesym,










 sample, collection, mean, bf, bh, sds, 










 pval,ratio,secondaryRefs,secondaryData),










 cybert_entry,










 showCybertEntries,










 entriesByFold,










 entriesByPval,










 entriesBySym,










 entriesByUpDown,










 entriesBySecondaryRef,










 cybertToSet,










 loadCybert,










 exportCybert,










 exportGeneSyms,










 exportProbes










) where










{-end module definitions -}










import Data.Bits










import Data.List










import Data.Maybe










import Data.Char










import System.IO










import System.IO.Error










import qualified Data.Set as S










import qualified Data.Map as M










import qualified Data.ByteString.Char8 as B





















{-basic data types-}










data Cybert_entry = NA | Cybert {










 probe :: String ,










 genesym :: Maybe String ,










 sample :: [String] ,










 collection :: Maybe String , --which dataset










 mean :: Either Float [Float] , --multiple means










 sds :: Either Float [Float],










 pval :: Float, --the pairwise or ANOVA pval










 bf :: Float,










 bh :: Float,










 ratio :: Either Float [Float], --pairwise ratio or numerous ratios










 secondaryRefs :: M.Map String String , --optional secondary refs










 secondaryData :: M.Map String Float , --optional secondary data










 raw :: B.ByteString










}










cybert_entry = Cybert{










 -- default constructor










 probe = "NONE",










 genesym = Nothing,










 sample = [],










 collection = Nothing,










 mean = Right [],










 sds = Right [],










 pval = -1,










 bf = -1,










 bh = -1,










 ratio = Left (-1),










 secondaryRefs = M.fromList [("","")],










 secondaryData = M.fromList [("",0)],










 raw = B.empty










}





















hasher :: String -> Int










hasher = foldl (\h c -> 33*h `xor` fromEnum c) 5381










cybertHash :: Cybert_entry -> Int










cybertHash NA = 0










cybertHash Cybert{probe=p} = hasher p










{-cybertHash Cybert{probe=p, collection=(Just s)} = hasher $ s++p-}





















instance Eq Cybert_entry where










 a == b = (cybertHash a) == (cybertHash b)










instance Ord Cybert_entry where










 compare a b = compare (cybertHash a) (cybertHash b)










--hashing










{-end basic data types-}










{-format and show routines-}










showJustS::Maybe String -> String










showJustS Nothing = "N/A"










showJustS (Just x) = x





















showEitherF::(Either Float [Float]) -> String










showEitherF (Left x) = show x










showEitherF (Right xxs@(x:[])) = show x










showEitherF (Right xxs@(x:xs)) = (show x) ++"\t"++ (showEitherF (Right xs))





















showCybertEntries::[Cybert_entry]->String










showCybertEntries (x:[])= show x










showCybertEntries (x:xs)= (show x) ++ "\n" ++ (showCybertEntries xs)





















instance Show Cybert_entry where










 showsPrec _ a s = show a ++ s










 show NA = "NA"










 show Cybert {probe=p, genesym=sym, sample=ss, collection=col, mean=m,










 pval=pv, ratio=r, secondaryRefs=_, secondaryData=_,raw=_} = p++"\t"++










 (showJustS sym)++"\t"++(showJustS col) ++"\t" ++(showEitherF m)++"\t"++(show pv)










 -- for each sample










{-end format and show routines-}










{-set operation and filtering routines-}










entriesBySym :: String -> [Cybert_entry] -> [Cybert_entry]










entriesBySym sym xs = filter (\x -> genesym x == (Just sym)) xs





















entryByProbe :: String -> [Cybert_entry] -> Cybert_entry










entryByProbe p xs = head $ filter (\x -> probe x == p) xs





















entriesBySecondaryRef :: String -> String -> [Cybert_entry] -> [Cybert_entry]










entriesBySecondaryRef tref ref xs = filter (\x -> (secondaryRefs x) M.! tref == ref) xs










--lookup










entriesByFold :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByFold threshold xs = filter (\x ->pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b)= if length b < 2 then False










 else b!!1-b!!0 > threshold





















entriesByPval :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByPval threshold xs = filter (\x -> pval x < threshold) xs





















entriesByUpDown :: Bool -> [Cybert_entry] -> [Cybert_entry]










entriesByUpDown val xs = filter (\x -> pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b) = if length b < 2 then False










 else let bigger = (b!!1-b!!0>0)










 in bigger==val










--filtering





















cybertToSet :: [Cybert_entry] -> S.Set Cybert_entry










cybertToSet xs = S.fromList xs










--set operations










{-end set operation and filtering routines-}










{-IO routines-}










buildHeaderPrec :: B.ByteString -> [(String , B.ByteString)]










buildHeaderPrec s = let ss = B.split '\t' s










 in map (\x -> (stripQuote $ B.unpack x, x)) ss where










 stripQuote ('\"':xs) = map toLower $ take ((length xs) - 1) xs










 stripQuote xs = map toLower xs





















buildHeader :: B.ByteString -> (M.Map String (Maybe Int) )










buildHeader s = let ss = buildHeaderPrec s; sl = B.split '\t' s










 in M.fromList $ map (\x -> (fst x , (snd x) `elemIndex` sl)) ss










maybeGet :: [B.ByteString] -> Maybe Int -> B.ByteString










[] `maybeGet` _ = B.pack ""










x `maybeGet` Nothing = B.pack ""










x `maybeGet` (Just s)= if length x > s then x !! s










 else B.pack ""





















getText :: (M.Map String (Maybe Int))-> [B.ByteString] -> String -> Maybe String










getText header ss id = if id `M.notMember` header










 then Nothing










 else let idx = header M.! id










 in Just (B.unpack $ ss `maybeGet` idx)










getNum :: (M.Map String (Maybe Int))-> [B.ByteString] -> String -> Float










getNum header ss id = if id `M.notMember` header










 then -1 :: Float










 else let idx = header M.! id










 in read (B.unpack $ ss `maybeGet` idx) :: Float










getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Float [Float]










getNums header ss ids = let nums = map (getNum header ss) ids










 in if length nums == 1 then Left (nums !! 0)










 else Right $ filter (not . (== -1)) nums










lineToCybert :: (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










--take a header and an accumulator, then read the line and append the cybert entry










lineToCybert header fname line = readLine line where










 readLine s = let ss = B.split '\t' s 










 in if length ss /= M.size header then cybert_entry










 else let cybt= cybert_entry {










 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),










 --this is a must










 genesym = getText header ss "gene_sym",










 --this is of maybe type










 pval = getNum header ss "pval",










 bf = getNum header ss "bonferroni",










 bh = getNum header ss "bh",










 collection = Just fname,










 --these are -1 defaulted










 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]










 --these are one or many










 , raw = s










 --raw info










 } in cybt





















loadCybert :: String -> IO (Maybe [Cybert_entry])










loadCybert fname = catch










 (withFile fname ReadMode (\handle -> do










 contents <- B.hGetContents handle










 let mylines = B.split '\n' contents










 if length mylines <= 1 then return Nothing










 else let header = buildHeader (head mylines);










 output = Just (filter (not.isNothing.collection)










 $ map (lineToCybert header fname) (drop 1 mylines))










 in if output == (Just []) then return Nothing










 else return output










 ))










 (\err -> do










 if isEOFError err










 then do










 putStrLn "File is empty or truncated."










 return Nothing










 else do










 putStrLn $ "Unexpected Error at opening file: "++ (show err)










 return Nothing










 )










-- Loads a cybert table from fname










exportCybert :: [Cybert_entry] -> String -> IO()










exportCybert xs fname = do










 withFile fname WriteMode (\handle -> do










 let contents = showCybertEntries xs










 hPutStr handle contents










 )





















exportGeneSyms :: [Cybert_entry] -> String -> IO()










exportGeneSyms xs fname = do










 withFile fname WriteMode (\handle -> do










 let contents = unlines (map showJustS (map genesym xs))










 hPutStr handle contents










 )





















exportProbes :: [Cybert_entry] -> String -> IO()










exportProbes xs fname = do










 withFile fname WriteMode (\handle -> do










 let contents = unlines (map probe xs)










 hPutStr handle contents










 )










{-exportRef :: [Cybert_entry] -> String -> String -> IO()-}










{-end IO routines-}


--a simple loader for cybert data--a simple loader for cybert data--generates cybert reports and tables--generates cybert reports and tables------has the following:--has the following:--1, a polymorphic and flexible data structure indexed by multiple--1, a polymorphic and flexible data structure indexed by multiple--keys.--keys.--2, ability to do set operation, selection filtering and mapping --2, ability to do set operation, selection filtering and mapping --on entries--on entries--3, IO for both human readable format and message passing to other python--3, IO for both human readable format and message passing to other python--code--code----{-module definitions -}{-module definitions -}module CybertmoduleCybert(( Cybert_entry(NA, Cybert,probe,genesym,Cybert_entry(NA,Cybert,probe,genesym, sample, collection, mean, bf, bh, sds, sample,collection,mean,bf,bh,sds, pval,ratio,secondaryRefs,secondaryData),pval,ratio,secondaryRefs,secondaryData), cybert_entry,cybert_entry, showCybertEntries,showCybertEntries, entriesByFold,entriesByFold, entriesByPval,entriesByPval, entriesBySym,entriesBySym, entriesByUpDown,entriesByUpDown, entriesBySecondaryRef,entriesBySecondaryRef, cybertToSet,cybertToSet, loadCybert,loadCybert, exportCybert,exportCybert, exportGeneSyms,exportGeneSyms, exportProbesexportProbes) where)where{-end module definitions -}{-end module definitions -}import Data.BitsimportData.Bitsimport Data.ListimportData.Listimport Data.MaybeimportData.Maybeimport Data.CharimportData.Charimport System.IOimportSystem.IOimport System.IO.ErrorimportSystem.IO.Errorimport qualified Data.Set as SimportqualifiedData.SetasSimport qualified Data.Map as MimportqualifiedData.MapasMimport qualified Data.ByteString.Char8 as BimportqualifiedData.ByteString.Char8asB{-basic data types-}{-basic data types-}data Cybert_entry = NA | Cybert {dataCybert_entry=NA|Cybert{ probe :: String ,probe::String, genesym :: Maybe String ,genesym::MaybeString, sample :: [String] ,sample::[String], collection :: Maybe String , --which datasetcollection::MaybeString,--which dataset mean :: Either Float [Float] , --multiple meansmean::EitherFloat[Float],--multiple means sds :: Either Float [Float],sds::EitherFloat[Float], pval :: Float, --the pairwise or ANOVA pvalpval::Float,--the pairwise or ANOVA pval bf :: Float,bf::Float, bh :: Float,bh::Float, ratio :: Either Float [Float], --pairwise ratio or numerous ratiosratio::EitherFloat[Float],--pairwise ratio or numerous ratios secondaryRefs :: M.Map String String , --optional secondary refssecondaryRefs::M.MapStringString,--optional secondary refs secondaryData :: M.Map String Float , --optional secondary datasecondaryData::M.MapStringFloat,--optional secondary data raw :: B.ByteStringraw::B.ByteString}}cybert_entry = Cybert{cybert_entry=Cybert{ -- default constructor-- default constructor probe = "NONE",probe="NONE", genesym = Nothing,genesym=Nothing, sample = [],sample=[], collection = Nothing,collection=Nothing, mean = Right [],mean=Right[], sds = Right [],sds=Right[], pval = -1,pval=-1, bf = -1,bf=-1, bh = -1,bh=-1, ratio = Left (-1),ratio=Left(-1), secondaryRefs = M.fromList [("","")],secondaryRefs=M.fromList[("","")], secondaryData = M.fromList [("",0)],secondaryData=M.fromList[("",0)], raw = B.emptyraw=B.empty}}hasher :: String -> Inthasher::String->Inthasher = foldl (\h c -> 33*h `xor` fromEnum c) 5381hasher=foldl(\hc->33*h`xor`fromEnumc)5381cybertHash :: Cybert_entry -> IntcybertHash::Cybert_entry->IntcybertHash NA = 0cybertHashNA=0cybertHash Cybert{probe=p} = hasher pcybertHashCybert{probe=p}=hasherp{-cybertHash Cybert{probe=p, collection=(Just s)} = hasher $ s++p-}{-cybertHash Cybert{probe=p, collection=(Just s)} = hasher $ s++p-}instance Eq Cybert_entry whereinstanceEqCybert_entrywhere a == b = (cybertHash a) == (cybertHash b)a==b=(cybertHasha)==(cybertHashb)instance Ord Cybert_entry whereinstanceOrdCybert_entrywhere compare a b = compare (cybertHash a) (cybertHash b)compareab=compare(cybertHasha)(cybertHashb)--hashing--hashing{-end basic data types-}{-end basic data types-}{-format and show routines-}{-format and show routines-}showJustS::Maybe String -> StringshowJustS::MaybeString->StringshowJustS Nothing = "N/A"showJustSNothing="N/A"showJustS (Just x) = xshowJustS(Justx)=xshowEitherF::(Either Float [Float]) -> StringshowEitherF::(EitherFloat[Float])->StringshowEitherF (Left x) = show xshowEitherF(Leftx)=showxshowEitherF (Right xxs@(x:[])) = show xshowEitherF(Rightxxs@(x:[]))=showxshowEitherF (Right xxs@(x:xs)) = (show x) ++"\t"++ (showEitherF (Right xs))showEitherF(Rightxxs@(x:xs))=(showx)++"\t"++(showEitherF(Rightxs))showCybertEntries::[Cybert_entry]->StringshowCybertEntries::[Cybert_entry]->StringshowCybertEntries (x:[])= show xshowCybertEntries(x:[])=showxshowCybertEntries (x:xs)= (show x) ++ "\n" ++ (showCybertEntries xs)showCybertEntries(x:xs)=(showx)++"\n"++(showCybertEntriesxs)instance Show Cybert_entry whereinstanceShowCybert_entrywhere showsPrec _ a s = show a ++ sshowsPrec_as=showa++s show NA = "NA"showNA="NA" show Cybert {probe=p, genesym=sym, sample=ss, collection=col, mean=m,showCybert{probe=p,genesym=sym,sample=ss,collection=col,mean=m, pval=pv, ratio=r, secondaryRefs=_, secondaryData=_,raw=_} = p++"\t"++pval=pv,ratio=r,secondaryRefs=_,secondaryData=_,raw=_}=p++"\t"++ (showJustS sym)++"\t"++(showJustS col) ++"\t" ++(showEitherF m)++"\t"++(show pv)(showJustSsym)++"\t"++(showJustScol)++"\t"++(showEitherFm)++"\t"++(showpv) -- for each sample-- for each sample{-end format and show routines-}{-end format and show routines-}{-set operation and filtering routines-}{-set operation and filtering routines-}entriesBySym :: String -> [Cybert_entry] -> [Cybert_entry]entriesBySym::String->[Cybert_entry]->[Cybert_entry]entriesBySym sym xs = filter (\x -> genesym x == (Just sym)) xsentriesBySymsymxs=filter(\x->genesymx==(Justsym))xsentryByProbe :: String -> [Cybert_entry] -> Cybert_entryentryByProbe::String->[Cybert_entry]->Cybert_entryentryByProbe p xs = head $ filter (\x -> probe x == p) xsentryByProbepxs=head$filter(\x->probex==p)xsentriesBySecondaryRef :: String -> String -> [Cybert_entry] -> [Cybert_entry]entriesBySecondaryRef::String->String->[Cybert_entry]->[Cybert_entry]entriesBySecondaryRef tref ref xs = filter (\x -> (secondaryRefs x) M.! tref == ref) xsentriesBySecondaryReftrefrefxs=filter(\x->(secondaryRefsx)M.!tref==ref)xs--lookup--lookupentriesByFold :: Float -> [Cybert_entry] -> [Cybert_entry]entriesByFold::Float->[Cybert_entry]->[Cybert_entry]entriesByFold threshold xs = filter (\x ->pred $ mean x) xs whereentriesByFoldthresholdxs=filter(\x->pred$meanx)xswhere pred (Left a) = Falsepred(Lefta)=False pred (Right b)= if length b < 2 then Falsepred(Rightb)=iflengthb<2thenFalse else b!!1-b!!0 > thresholdelseb!!1-b!!0>thresholdentriesByPval :: Float -> [Cybert_entry] -> [Cybert_entry]entriesByPval::Float->[Cybert_entry]->[Cybert_entry]entriesByPval threshold xs = filter (\x -> pval x < threshold) xsentriesByPvalthresholdxs=filter(\x->pvalx<threshold)xsentriesByUpDown :: Bool -> [Cybert_entry] -> [Cybert_entry]entriesByUpDown::Bool->[Cybert_entry]->[Cybert_entry]entriesByUpDown val xs = filter (\x -> pred $ mean x) xs whereentriesByUpDownvalxs=filter(\x->pred$meanx)xswhere pred (Left a) = Falsepred(Lefta)=False pred (Right b) = if length b < 2 then Falsepred(Rightb)=iflengthb<2thenFalse else let bigger = (b!!1-b!!0>0)elseletbigger=(b!!1-b!!0>0) in bigger==valinbigger==val--filtering--filteringcybertToSet :: [Cybert_entry] -> S.Set Cybert_entrycybertToSet::[Cybert_entry]->S.SetCybert_entrycybertToSet xs = S.fromList xscybertToSetxs=S.fromListxs--set operations--set operations{-end set operation and filtering routines-}{-end set operation and filtering routines-}{-IO routines-}{-IO routines-}buildHeaderPrec :: B.ByteString -> [(String , B.ByteString)]buildHeaderPrec::B.ByteString->[(String,B.ByteString)]buildHeaderPrec s = let ss = B.split '\t' sbuildHeaderPrecs=letss=B.split'\t's in map (\x -> (stripQuote $ B.unpack x, x)) ss whereinmap(\x->(stripQuote$B.unpackx,x))sswhere stripQuote ('\"':xs) = map toLower $ take ((length xs) - 1) xsstripQuote('\"':xs)=maptoLower$take((lengthxs)-1)xs stripQuote xs = map toLower xsstripQuotexs=maptoLowerxsbuildHeader :: B.ByteString -> (M.Map String (Maybe Int) )buildHeader::B.ByteString->(M.MapString(MaybeInt))buildHeader s = let ss = buildHeaderPrec s; sl = B.split '\t' sbuildHeaders=letss=buildHeaderPrecs;sl=B.split'\t's in M.fromList $ map (\x -> (fst x , (snd x) `elemIndex` sl)) ssinM.fromList$map(\x->(fstx,(sndx)`elemIndex`sl))ssmaybeGet :: [B.ByteString] -> Maybe Int -> B.ByteStringmaybeGet::[B.ByteString]->MaybeInt->B.ByteString[] `maybeGet` _ = B.pack ""[]`maybeGet`_=B.pack""x `maybeGet` Nothing = B.pack ""x`maybeGet`Nothing=B.pack""x `maybeGet` (Just s)= if length x > s then x !! sx`maybeGet`(Justs)=iflengthx>sthenx!!s else B.pack ""elseB.pack""getText :: (M.Map String (Maybe Int))-> [B.ByteString] -> String -> Maybe StringgetText::(M.MapString(MaybeInt))->[B.ByteString]->String->MaybeStringgetText header ss id = if id `M.notMember` headergetTextheaderssid=ifid`M.notMember`header then NothingthenNothing else let idx = header M.! idelseletidx=headerM.!id in Just (B.unpack $ ss `maybeGet` idx)inJust(B.unpack$ss`maybeGet`idx)getNum :: (M.Map String (Maybe Int))-> [B.ByteString] -> String -> FloatgetNum::(M.MapString(MaybeInt))->[B.ByteString]->String->FloatgetNum header ss id = if id `M.notMember` headergetNumheaderssid=ifid`M.notMember`header then -1 :: Floatthen-1::Float else let idx = header M.! idelseletidx=headerM.!id in read (B.unpack $ ss `maybeGet` idx) :: Floatinread(B.unpack$ss`maybeGet`idx)::FloatgetNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Float [Float]getNums::(M.MapString(MaybeInt))->[B.ByteString]->[String]->EitherFloat[Float]getNums header ss ids = let nums = map (getNum header ss) idsgetNumsheaderssids=letnums=map(getNumheaderss)ids in if length nums == 1 then Left (nums !! 0)iniflengthnums==1thenLeft(nums!!0) else Right $ filter (not . (== -1)) numselseRight$filter(not.(==-1))numslineToCybert :: (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entrylineToCybert::(M.MapString(MaybeInt))->String->B.ByteString->Cybert_entry--take a header and an accumulator, then read the line and append the cybert entry--take a header and an accumulator, then read the line and append the cybert entrylineToCybert header fname line = readLine line wherelineToCybertheaderfnameline=readLinelinewhere readLine s = let ss = B.split '\t' s readLines=letss=B.split'\t's in if length ss /= M.size header then cybert_entryiniflengthss/=M.sizeheaderthencybert_entry else let cybt= cybert_entry {elseletcybt=cybert_entry{ probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),probe=B.unpack$ss`maybeGet`(headerM.!"probe_id"), --this is a must--this is a must genesym = getText header ss "gene_sym",genesym=getTextheaderss"gene_sym", --this is of maybe type--this is of maybe type pval = getNum header ss "pval",pval=getNumheaderss"pval", bf = getNum header ss "bonferroni",bf=getNumheaderss"bonferroni", bh = getNum header ss "bh",bh=getNumheaderss"bh", collection = Just fname,collection=Justfname, --these are -1 defaulted--these are -1 defaulted mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],mean=getNumsheaderss$map("mean"++)["c","e","1","2","3","4","5","6","7"], sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]sds=getNumsheaderss$map("std"++)["c","e","1","2","3","4","5","6","7"] --these are one or many--these are one or many , raw = s,raw=s --raw info--raw info } in cybt}incybtloadCybert :: String -> IO (Maybe [Cybert_entry])loadCybert::String->IO(Maybe[Cybert_entry])loadCybert fname = catchloadCybertfname=catch (withFile fname ReadMode (\handle -> do(withFilefnameReadMode(\handle->do contents <- B.hGetContents handlecontents<-B.hGetContentshandle let mylines = B.split '\n' contentsletmylines=B.split'\n'contents if length mylines <= 1 then return Nothingiflengthmylines<=1thenreturnNothing else let header = buildHeader (head mylines);elseletheader=buildHeader(headmylines); output = Just (filter (not.isNothing.collection)output=Just(filter(not.isNothing.collection) $ map (lineToCybert header fname) (drop 1 mylines))$map(lineToCybertheaderfname)(drop1mylines)) in if output == (Just []) then return Nothinginifoutput==(Just[])thenreturnNothing else return outputelsereturnoutput )))) (\err -> do(\err->do if isEOFError errifisEOFErrorerr then dothendo putStrLn "File is empty or truncated."putStrLn"File is empty or truncated." return NothingreturnNothing else doelsedo putStrLn $ "Unexpected Error at opening file: "++ (show err)putStrLn$"Unexpected Error at opening file: "++(showerr) return NothingreturnNothing ))-- Loads a cybert table from fname-- Loads a cybert table from fnameexportCybert :: [Cybert_entry] -> String -> IO()exportCybert::[Cybert_entry]->String->IO()exportCybert xs fname = doexportCybertxsfname=do withFile fname WriteMode (\handle -> dowithFilefnameWriteMode(\handle->do let contents = showCybertEntries xsletcontents=showCybertEntriesxs hPutStr handle contentshPutStrhandlecontents ))exportGeneSyms :: [Cybert_entry] -> String -> IO()exportGeneSyms::[Cybert_entry]->String->IO()exportGeneSyms xs fname = doexportGeneSymsxsfname=do withFile fname WriteMode (\handle -> dowithFilefnameWriteMode(\handle->do let contents = unlines (map showJustS (map genesym xs))letcontents=unlines(mapshowJustS(mapgenesymxs)) hPutStr handle contentshPutStrhandlecontents ))exportProbes :: [Cybert_entry] -> String -> IO()exportProbes::[Cybert_entry]->String->IO()exportProbes xs fname = doexportProbesxsfname=do withFile fname WriteMode (\handle -> dowithFilefnameWriteMode(\handle->do let contents = unlines (map probe xs)letcontents=unlines(mapprobexs) hPutStr handle contentshPutStrhandlecontents )){-exportRef :: [Cybert_entry] -> String -> String -> IO()-}{-exportRef :: [Cybert_entry] -> String -> String -> IO()-}{-end IO routines-}{-end IO routines-}








other/fizzbuzz.hs



0 → 100644







View file @ 20804688













--fizzbuzz no arithmetics










f (x:y:z:rest)=x:y:"Fizz":f rest










f xs = xs





















g (x1:x2:x3:x4:"Fizz":rest) = x1:x2:x3:x4:("FizzBuzz"):g rest










g (x1:x2:x3:x4:x5:rest) = x1:x2:x3:x4:"Buzz":g rest










g xs = xs





















fizzbuzz num










 |num== 0 = ["0"]










 |otherwise = "0" : (g $ f $ map show $ takeWhile(<num) [1..])












other/fizzbuzz.hs



0 → 100644







View file @ 20804688








other/fizzbuzz.hs



0 → 100644









View file @ 20804688


20804688










--fizzbuzz no arithmetics










f (x:y:z:rest)=x:y:"Fizz":f rest










f xs = xs





















g (x1:x2:x3:x4:"Fizz":rest) = x1:x2:x3:x4:("FizzBuzz"):g rest










g (x1:x2:x3:x4:x5:rest) = x1:x2:x3:x4:"Buzz":g rest










g xs = xs





















fizzbuzz num










 |num== 0 = ["0"]










 |otherwise = "0" : (g $ f $ map show $ takeWhile(<num) [1..])













--fizzbuzz no arithmetics










f (x:y:z:rest)=x:y:"Fizz":f rest










f xs = xs





















g (x1:x2:x3:x4:"Fizz":rest) = x1:x2:x3:x4:("FizzBuzz"):g rest










g (x1:x2:x3:x4:x5:rest) = x1:x2:x3:x4:"Buzz":g rest










g xs = xs





















fizzbuzz num










 |num== 0 = ["0"]










 |otherwise = "0" : (g $ f $ map show $ takeWhile(<num) [1..])


--fizzbuzz no arithmetics--fizzbuzz no arithmeticsf (x:y:z:rest)=x:y:"Fizz":f restf(x:y:z:rest)=x:y:"Fizz":frestf xs = xsfxs=xsg (x1:x2:x3:x4:"Fizz":rest) = x1:x2:x3:x4:("FizzBuzz"):g restg(x1:x2:x3:x4:"Fizz":rest)=x1:x2:x3:x4:("FizzBuzz"):grestg (x1:x2:x3:x4:x5:rest) = x1:x2:x3:x4:"Buzz":g restg(x1:x2:x3:x4:x5:rest)=x1:x2:x3:x4:"Buzz":grestg xs = xsgxs=xsfizzbuzz numfizzbuzznum |num== 0 = ["0"]|num==0=["0"] |otherwise = "0" : (g $ f $ map show $ takeWhile(<num) [1..])|otherwise="0":(g$f$mapshow$takeWhile(<num)[1..])








other/test.hs



0 → 100644







View file @ 20804688













import Data.List (isPrefixOf)










inc :: Int -> Int










inc 0 = 0










inc x = (inc (x-1))+x
































--filter2::Ord a=>(a-> Bool) ->[a]->[a]










filter2 p = foldr (\x acc -> if p x then x :acc else acc ) 1
































fib :: Int -> Int










fib 0=0










fib 1=1










fib x=fib(x-1)+fib(x-2)





















term :: Int -> Double










term 0=0 










term 1=1










term 2=2










term (-1)=1










term (-2)=2










term x=if x<(-2) then term(x+1)* term (x+2) 










 else if (x>2) then term(x-1)*term(x-2) 










 else 0










termfib x = (term . fib)





















dlts= foldr step [] . lines










 where step l ds










 |"#define" `isPrefixOf` l = secondWord l:ds










 |otherwise = ds










 secondWord= head. tail. words





















myfun 0=0










myfun 1=1










myfun 2=2










myfun x=if x>0 then myfun(x-1)^myfun(x-2)










 else 0










mylist []=[]










mylist (x:xs)=not(head xs):mylist(tail xs)





















mylist3 Nope=Nope










mylist3 (Add x xs)=xs





















myreduc Nope = 0










myreduc (Add x y)=x + myreduc (y)










mylist2 []=[]










mylist2 xs=d++mylist2(tail xs)










 where d=mylist xs





















mymerge xs =foldl step [] xs










 where step x ys = ys:x





















mymap f xs= foldr step [] xs










 where step x ys = x `seq` f x:ys










mymap2 f xs= foldr step [] xs










 where step x ys = f x:ys










mycomp = (odd `mymap`) . mymerge 










mycomp2 = mymerge . (odd `mymap`) 










mycomp3 = length.mycomp2










--note : composite operator is right evaluated.










myfoldadd xs = foldl (\s t->s `seq` t `seq` s*t) 1 xs










myfoldadd2 xs = foldl (\s t-> s*t) 1 xs





















class MyClass a where










 eql::a->a->Bool










 add::a->a->a










 fibz::a->a










instance MyClass Bool where










 eql True True = True










 eql False False = True










 eql _ _ = False










 add True False = True










 add False True = True










 add True True = True










 add _ _ = False










 fibz True = True










 fibz False = False





















instance MyClass Int where










 eql x y = x==y










 add x y = x+y










 fibz x = fib x










 --deriving (Eq, Ord, Show)





















data Tryouts = Try1 {










 tries1::String,










 tries2::String}










 |Try2 Int String










 |Try3 Int Int3










 deriving (Show)





















instance MyClass Tryouts where










 eql x y = tries1 x==tries1 y










 add x y = Try1 (tries1 x) (tries2 y)










 fibz x = Try1 (tries1 x++tries2 x) (tries2 x ++ tries1 x)





















data Flags=Flag1 Int Float | Flag2 Float Int










 deriving (Show)
































data Marks=Mark1 Int [Int] 










 | Mark2 [Int] Int










 | Mark3 [Int] [Int]










 | Mark4 [Float] [Int]










 deriving (Show)





















-- closure










--foo :: Num -> Num -> (Num -> Num)










--foo x y = let r = x / y










--          in (\z -> z + r)










--let binds r to the lambda which contains another argument z 










--f :: Num -> Num










--f = foo 1 0










--here invokes with x y










--foo is the closure, f is the function










--main = print (f 123)










--here invokes with z
































data MyMaybe a = MyJust a










 |Nope2










 deriving(Show)










data Templated a b c=Templated a b c










 |Templated2 {










 geta::a, 










 getb::b, 










 getc::c}










 |Templated3 a String c










 deriving (Show)










data Mylist a =Add a (Mylist a)










 | Nope










 deriving (Show)










type Banners=(Flags,Marks)










type Int3=Int










myadd 0 _ = 1










myadd _ 0 = 1










myadd a b 










 | a<0||b<0 = if b==0 then 0 else 0










 | otherwise = a+b+ (myadd (a-1) (b-1))










derp=herp










 where {










 herp=kerp










 where {










 kerp=1;










 herp=2










 };










 derp=1;










 derp2=case derp of{










 1 -> 1;










 2 -> 0}










 }





















mysum xs










 | xs==[] =1










mysum xs = length xs + mysum(tail(xs))





















ran1 :: Int->Int->Int










ran1 times seed










 |times==1 =seed










 |times>1 =(1122345223*(ran1 newtimes seed)+12345) `mod` 54321










 where newtimes=times-1










main=print (term 35 , fib 35)























other/test.hs



0 → 100644







View file @ 20804688








other/test.hs



0 → 100644









View file @ 20804688


20804688










import Data.List (isPrefixOf)










inc :: Int -> Int










inc 0 = 0










inc x = (inc (x-1))+x
































--filter2::Ord a=>(a-> Bool) ->[a]->[a]










filter2 p = foldr (\x acc -> if p x then x :acc else acc ) 1
































fib :: Int -> Int










fib 0=0










fib 1=1










fib x=fib(x-1)+fib(x-2)





















term :: Int -> Double










term 0=0 










term 1=1










term 2=2










term (-1)=1










term (-2)=2










term x=if x<(-2) then term(x+1)* term (x+2) 










 else if (x>2) then term(x-1)*term(x-2) 










 else 0










termfib x = (term . fib)





















dlts= foldr step [] . lines










 where step l ds










 |"#define" `isPrefixOf` l = secondWord l:ds










 |otherwise = ds










 secondWord= head. tail. words





















myfun 0=0










myfun 1=1










myfun 2=2










myfun x=if x>0 then myfun(x-1)^myfun(x-2)










 else 0










mylist []=[]










mylist (x:xs)=not(head xs):mylist(tail xs)





















mylist3 Nope=Nope










mylist3 (Add x xs)=xs





















myreduc Nope = 0










myreduc (Add x y)=x + myreduc (y)










mylist2 []=[]










mylist2 xs=d++mylist2(tail xs)










 where d=mylist xs





















mymerge xs =foldl step [] xs










 where step x ys = ys:x





















mymap f xs= foldr step [] xs










 where step x ys = x `seq` f x:ys










mymap2 f xs= foldr step [] xs










 where step x ys = f x:ys










mycomp = (odd `mymap`) . mymerge 










mycomp2 = mymerge . (odd `mymap`) 










mycomp3 = length.mycomp2










--note : composite operator is right evaluated.










myfoldadd xs = foldl (\s t->s `seq` t `seq` s*t) 1 xs










myfoldadd2 xs = foldl (\s t-> s*t) 1 xs





















class MyClass a where










 eql::a->a->Bool










 add::a->a->a










 fibz::a->a










instance MyClass Bool where










 eql True True = True










 eql False False = True










 eql _ _ = False










 add True False = True










 add False True = True










 add True True = True










 add _ _ = False










 fibz True = True










 fibz False = False





















instance MyClass Int where










 eql x y = x==y










 add x y = x+y










 fibz x = fib x










 --deriving (Eq, Ord, Show)





















data Tryouts = Try1 {










 tries1::String,










 tries2::String}










 |Try2 Int String










 |Try3 Int Int3










 deriving (Show)





















instance MyClass Tryouts where










 eql x y = tries1 x==tries1 y










 add x y = Try1 (tries1 x) (tries2 y)










 fibz x = Try1 (tries1 x++tries2 x) (tries2 x ++ tries1 x)





















data Flags=Flag1 Int Float | Flag2 Float Int










 deriving (Show)
































data Marks=Mark1 Int [Int] 










 | Mark2 [Int] Int










 | Mark3 [Int] [Int]










 | Mark4 [Float] [Int]










 deriving (Show)





















-- closure










--foo :: Num -> Num -> (Num -> Num)










--foo x y = let r = x / y










--          in (\z -> z + r)










--let binds r to the lambda which contains another argument z 










--f :: Num -> Num










--f = foo 1 0










--here invokes with x y










--foo is the closure, f is the function










--main = print (f 123)










--here invokes with z
































data MyMaybe a = MyJust a










 |Nope2










 deriving(Show)










data Templated a b c=Templated a b c










 |Templated2 {










 geta::a, 










 getb::b, 










 getc::c}










 |Templated3 a String c










 deriving (Show)










data Mylist a =Add a (Mylist a)










 | Nope










 deriving (Show)










type Banners=(Flags,Marks)










type Int3=Int










myadd 0 _ = 1










myadd _ 0 = 1










myadd a b 










 | a<0||b<0 = if b==0 then 0 else 0










 | otherwise = a+b+ (myadd (a-1) (b-1))










derp=herp










 where {










 herp=kerp










 where {










 kerp=1;










 herp=2










 };










 derp=1;










 derp2=case derp of{










 1 -> 1;










 2 -> 0}










 }





















mysum xs










 | xs==[] =1










mysum xs = length xs + mysum(tail(xs))





















ran1 :: Int->Int->Int










ran1 times seed










 |times==1 =seed










 |times>1 =(1122345223*(ran1 newtimes seed)+12345) `mod` 54321










 where newtimes=times-1










main=print (term 35 , fib 35)
























import Data.List (isPrefixOf)










inc :: Int -> Int










inc 0 = 0










inc x = (inc (x-1))+x
































--filter2::Ord a=>(a-> Bool) ->[a]->[a]










filter2 p = foldr (\x acc -> if p x then x :acc else acc ) 1
































fib :: Int -> Int










fib 0=0










fib 1=1










fib x=fib(x-1)+fib(x-2)





















term :: Int -> Double










term 0=0 










term 1=1










term 2=2










term (-1)=1










term (-2)=2










term x=if x<(-2) then term(x+1)* term (x+2) 










 else if (x>2) then term(x-1)*term(x-2) 










 else 0










termfib x = (term . fib)





















dlts= foldr step [] . lines










 where step l ds










 |"#define" `isPrefixOf` l = secondWord l:ds










 |otherwise = ds










 secondWord= head. tail. words





















myfun 0=0










myfun 1=1










myfun 2=2










myfun x=if x>0 then myfun(x-1)^myfun(x-2)










 else 0










mylist []=[]










mylist (x:xs)=not(head xs):mylist(tail xs)





















mylist3 Nope=Nope










mylist3 (Add x xs)=xs





















myreduc Nope = 0










myreduc (Add x y)=x + myreduc (y)










mylist2 []=[]










mylist2 xs=d++mylist2(tail xs)










 where d=mylist xs





















mymerge xs =foldl step [] xs










 where step x ys = ys:x





















mymap f xs= foldr step [] xs










 where step x ys = x `seq` f x:ys










mymap2 f xs= foldr step [] xs










 where step x ys = f x:ys










mycomp = (odd `mymap`) . mymerge 










mycomp2 = mymerge . (odd `mymap`) 










mycomp3 = length.mycomp2










--note : composite operator is right evaluated.










myfoldadd xs = foldl (\s t->s `seq` t `seq` s*t) 1 xs










myfoldadd2 xs = foldl (\s t-> s*t) 1 xs





















class MyClass a where










 eql::a->a->Bool










 add::a->a->a










 fibz::a->a










instance MyClass Bool where










 eql True True = True










 eql False False = True










 eql _ _ = False










 add True False = True










 add False True = True










 add True True = True










 add _ _ = False










 fibz True = True










 fibz False = False





















instance MyClass Int where










 eql x y = x==y










 add x y = x+y










 fibz x = fib x










 --deriving (Eq, Ord, Show)





















data Tryouts = Try1 {










 tries1::String,










 tries2::String}










 |Try2 Int String










 |Try3 Int Int3










 deriving (Show)





















instance MyClass Tryouts where










 eql x y = tries1 x==tries1 y










 add x y = Try1 (tries1 x) (tries2 y)










 fibz x = Try1 (tries1 x++tries2 x) (tries2 x ++ tries1 x)





















data Flags=Flag1 Int Float | Flag2 Float Int










 deriving (Show)
































data Marks=Mark1 Int [Int] 










 | Mark2 [Int] Int










 | Mark3 [Int] [Int]










 | Mark4 [Float] [Int]










 deriving (Show)





















-- closure










--foo :: Num -> Num -> (Num -> Num)










--foo x y = let r = x / y










--          in (\z -> z + r)










--let binds r to the lambda which contains another argument z 










--f :: Num -> Num










--f = foo 1 0










--here invokes with x y










--foo is the closure, f is the function










--main = print (f 123)










--here invokes with z
































data MyMaybe a = MyJust a










 |Nope2










 deriving(Show)










data Templated a b c=Templated a b c










 |Templated2 {










 geta::a, 










 getb::b, 










 getc::c}










 |Templated3 a String c










 deriving (Show)










data Mylist a =Add a (Mylist a)










 | Nope










 deriving (Show)










type Banners=(Flags,Marks)










type Int3=Int










myadd 0 _ = 1










myadd _ 0 = 1










myadd a b 










 | a<0||b<0 = if b==0 then 0 else 0










 | otherwise = a+b+ (myadd (a-1) (b-1))










derp=herp










 where {










 herp=kerp










 where {










 kerp=1;










 herp=2










 };










 derp=1;










 derp2=case derp of{










 1 -> 1;










 2 -> 0}










 }





















mysum xs










 | xs==[] =1










mysum xs = length xs + mysum(tail(xs))





















ran1 :: Int->Int->Int










ran1 times seed










 |times==1 =seed










 |times>1 =(1122345223*(ran1 newtimes seed)+12345) `mod` 54321










 where newtimes=times-1










main=print (term 35 , fib 35)













import Data.List (isPrefixOf)importData.List(isPrefixOf)inc :: Int -> Intinc::Int->Intinc 0 = 0inc0=0inc x = (inc (x-1))+xincx=(inc(x-1))+x--filter2::Ord a=>(a-> Bool) ->[a]->[a]--filter2::Ord a=>(a-> Bool) ->[a]->[a]filter2 p = foldr (\x acc -> if p x then x :acc else acc ) 1filter2p=foldr(\xacc->ifpxthenx:accelseacc)1fib :: Int -> Intfib::Int->Intfib 0=0fib0=0fib 1=1fib1=1fib x=fib(x-1)+fib(x-2)fibx=fib(x-1)+fib(x-2)term :: Int -> Doubleterm::Int->Doubleterm 0=0 term0=0term 1=1term1=1term 2=2term2=2term (-1)=1term(-1)=1term (-2)=2term(-2)=2term x=if x<(-2) then term(x+1)* term (x+2) termx=ifx<(-2)thenterm(x+1)*term(x+2) else if (x>2) then term(x-1)*term(x-2) elseif(x>2)thenterm(x-1)*term(x-2) else 0else0termfib x = (term . fib)termfibx=(term.fib)dlts= foldr step [] . linesdlts=foldrstep[].lines where step l dswheresteplds |"#define" `isPrefixOf` l = secondWord l:ds|"#define"`isPrefixOf`l=secondWordl:ds |otherwise = ds|otherwise=ds secondWord= head. tail. wordssecondWord=head.tail.wordsmyfun 0=0myfun0=0myfun 1=1myfun1=1myfun 2=2myfun2=2myfun x=if x>0 then myfun(x-1)^myfun(x-2)myfunx=ifx>0thenmyfun(x-1)^myfun(x-2) else 0else0mylist []=[]mylist[]=[]mylist (x:xs)=not(head xs):mylist(tail xs)mylist(x:xs)=not(headxs):mylist(tailxs)mylist3 Nope=Nopemylist3Nope=Nopemylist3 (Add x xs)=xsmylist3(Addxxs)=xsmyreduc Nope = 0myreducNope=0myreduc (Add x y)=x + myreduc (y)myreduc(Addxy)=x+myreduc(y)mylist2 []=[]mylist2[]=[]mylist2 xs=d++mylist2(tail xs)mylist2xs=d++mylist2(tailxs) where d=mylist xswhered=mylistxsmymerge xs =foldl step [] xsmymergexs=foldlstep[]xs where step x ys = ys:xwherestepxys=ys:xmymap f xs= foldr step [] xsmymapfxs=foldrstep[]xs where step x ys = x `seq` f x:yswherestepxys=x`seq`fx:ysmymap2 f xs= foldr step [] xsmymap2fxs=foldrstep[]xs where step x ys = f x:yswherestepxys=fx:ysmycomp = (odd `mymap`) . mymerge mycomp=(odd`mymap`).mymergemycomp2 = mymerge . (odd `mymap`) mycomp2=mymerge.(odd`mymap`)mycomp3 = length.mycomp2mycomp3=length.mycomp2--note : composite operator is right evaluated.--note : composite operator is right evaluated.myfoldadd xs = foldl (\s t->s `seq` t `seq` s*t) 1 xsmyfoldaddxs=foldl(\st->s`seq`t`seq`s*t)1xsmyfoldadd2 xs = foldl (\s t-> s*t) 1 xsmyfoldadd2xs=foldl(\st->s*t)1xsclass MyClass a whereclassMyClassawhere eql::a->a->Booleql::a->a->Bool add::a->a->aadd::a->a->a fibz::a->afibz::a->ainstance MyClass Bool whereinstanceMyClassBoolwhere eql True True = TrueeqlTrueTrue=True eql False False = TrueeqlFalseFalse=True eql _ _ = Falseeql__=False add True False = TrueaddTrueFalse=True add False True = TrueaddFalseTrue=True add True True = TrueaddTrueTrue=True add _ _ = Falseadd__=False fibz True = TruefibzTrue=True fibz False = FalsefibzFalse=Falseinstance MyClass Int whereinstanceMyClassIntwhere eql x y = x==yeqlxy=x==y add x y = x+yaddxy=x+y fibz x = fib xfibzx=fibx --deriving (Eq, Ord, Show)--deriving (Eq, Ord, Show)data Tryouts = Try1 {dataTryouts=Try1{ tries1::String,tries1::String, tries2::String}tries2::String} |Try2 Int String|Try2IntString |Try3 Int Int3|Try3IntInt3 deriving (Show)deriving(Show)instance MyClass Tryouts whereinstanceMyClassTryoutswhere eql x y = tries1 x==tries1 yeqlxy=tries1x==tries1y add x y = Try1 (tries1 x) (tries2 y)addxy=Try1(tries1x)(tries2y) fibz x = Try1 (tries1 x++tries2 x) (tries2 x ++ tries1 x)fibzx=Try1(tries1x++tries2x)(tries2x++tries1x)data Flags=Flag1 Int Float | Flag2 Float IntdataFlags=Flag1IntFloat|Flag2FloatInt deriving (Show)deriving(Show)data Marks=Mark1 Int [Int] dataMarks=Mark1Int[Int] | Mark2 [Int] Int|Mark2[Int]Int | Mark3 [Int] [Int]|Mark3[Int][Int] | Mark4 [Float] [Int]|Mark4[Float][Int] deriving (Show)deriving(Show)-- closure-- closure--foo :: Num -> Num -> (Num -> Num)--foo :: Num -> Num -> (Num -> Num)--foo x y = let r = x / y--foo x y = let r = x / y--          in (\z -> z + r)--          in (\z -> z + r)--let binds r to the lambda which contains another argument z --let binds r to the lambda which contains another argument z --f :: Num -> Num--f :: Num -> Num--f = foo 1 0--f = foo 1 0--here invokes with x y--here invokes with x y--foo is the closure, f is the function--foo is the closure, f is the function--main = print (f 123)--main = print (f 123)--here invokes with z--here invokes with zdata MyMaybe a = MyJust adataMyMaybea=MyJusta |Nope2|Nope2 deriving(Show)deriving(Show)data Templated a b c=Templated a b cdataTemplatedabc=Templatedabc |Templated2 {|Templated2{ geta::a, geta::a, getb::b, getb::b, getc::c}getc::c} |Templated3 a String c|Templated3aStringc deriving (Show)deriving(Show)data Mylist a =Add a (Mylist a)dataMylista=Adda(Mylista) | Nope|Nope deriving (Show)deriving(Show)type Banners=(Flags,Marks)typeBanners=(Flags,Marks)type Int3=InttypeInt3=Intmyadd 0 _ = 1myadd0_=1myadd _ 0 = 1myadd_0=1myadd a b myaddab | a<0||b<0 = if b==0 then 0 else 0|a<0||b<0=ifb==0then0else0 | otherwise = a+b+ (myadd (a-1) (b-1))|otherwise=a+b+(myadd(a-1)(b-1))derp=herpderp=herp where {where{ herp=kerpherp=kerp where {where{ kerp=1;kerp=1; herp=2herp=2 };}; derp=1;derp=1; derp2=case derp of{derp2=casederpof{ 1 -> 1;1->1; 2 -> 0}2->0} }}mysum xsmysumxs | xs==[] =1|xs==[]=1mysum xs = length xs + mysum(tail(xs))mysumxs=lengthxs+mysum(tail(xs))ran1 :: Int->Int->Intran1::Int->Int->Intran1 times seedran1timesseed |times==1 =seed|times==1=seed |times>1 =(1122345223*(ran1 newtimes seed)+12345) `mod` 54321|times>1=(1122345223*(ran1newtimesseed)+12345)`mod`54321 where newtimes=times-1wherenewtimes=times-1main=print (term 35 , fib 35)main=print(term35,fib35)









Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview






















Write



Preview











































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel












Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel




Supports Markdown





0%










Try again


or


attach a new file


.




Attach a file




Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Attach a file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






