



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros

eb98a8569b4d675c4cca6c52c59a34a89463e3fb

















eb98a8569b4d675c4cca6c52c59a34a89463e3fb


Switch branch/tag










heros


src


heros


alias


ControlFlowJoinResolver.java



Find file
Normal viewHistoryPermalink






ControlFlowJoinResolver.java



4.91 KB









Newer










Older









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import java.util.Map;
import java.util.Set;

import com.google.common.collect.Maps;
import com.google.common.collect.Sets;

import heros.alias.AccessPath.Delta;
import heros.alias.AccessPath.PrefixTestResult;
import heros.alias.FlowFunction.Constraint;










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






23




public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90





	private boolean recursiveLock = false;
	private Stmt joinStmt;
	private AccessPath<Field> resolvedAccPath;
	private Set<WrappedFact<Field, Fact, Stmt, Method>> incomingFacts = Sets.newHashSet();
	private boolean propagated = false;
	private Map<AccessPath<Field>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> nestedResolvers = Maps.newHashMap();
	private ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent;

	public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {
		this(analyzer, joinStmt, new AccessPath<Field>(), null);
	}
	
	private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {
		super(analyzer);
		this.joinStmt = joinStmt;
		this.resolvedAccPath = resolvedAccPath;
		this.parent = parent;
	}

	public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact) {
		if(resolvedAccPath.isPrefixOf(fact.getAccessPath()) == PrefixTestResult.GUARANTEED_PREFIX) {
			log("Incoming Fact "+fact);
			if(!incomingFacts.add(fact))
				return;
			
			interest(analyzer, this);
			for(ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver : nestedResolvers.values())
				nestedResolver.addIncoming(fact);
			
			if(!propagated) {
				propagated=true;
				analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(
						fact.getFact(), new AccessPath<Field>(), this)));
			}
		}
		else if(fact.getAccessPath().isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {
			Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);
			fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {
				@Override
				public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 
						Resolver<Field, Fact, Stmt, Method> resolver) {
					ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);
				}

				@Override
				public void canBeResolvedEmpty() {
					ControlFlowJoinResolver.this.canBeResolvedEmpty();
				}
			});
		}
	}
	
	private boolean isLocked() {
		if(recursiveLock)
			return true;
		if(parent == null)
			return false;
		return parent.isLocked();
	}
	
	@Override
	public void resolve(Constraint<Field> constraint, final InterestCallback<Field, Fact, Stmt, Method> callback) {
		log("Resolve: "+constraint);
		if(!constraint.canBeAppliedTo(resolvedAccPath) || isLocked())
			return;
		









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






91




		AccessPath<Field> candidateAccPath = constraint.applyToAccessPath(resolvedAccPath);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






92




93




		recursiveLock = true;
		ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = getOrCreateNestedResolver(candidateAccPath);









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






94




		if(!nestedResolver.resolvedAccPath.equals(constraint.applyToAccessPath(resolvedAccPath)))









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




			throw new AssertionError();
		
		nestedResolver.registerCallback(callback);
		recursiveLock = false;
	}
	
	private ControlFlowJoinResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> candidateAccPath) {
		if(resolvedAccPath.equals(candidateAccPath))
			return this;
		
		if(!nestedResolvers.containsKey(candidateAccPath)) {
			assert resolvedAccPath.getDeltaTo(candidateAccPath).accesses.length <= 1;
			
			final ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = new ControlFlowJoinResolver<>(analyzer, joinStmt, candidateAccPath, this);
			nestedResolver.propagated = true;
			nestedResolvers.put(candidateAccPath, nestedResolver);

			for(WrappedFact<Field, Fact, Stmt, Method> incFact: incomingFacts) {
				nestedResolver.addIncoming(incFact);
			}			
		}
		return nestedResolvers.get(candidateAccPath);
	}

	@Override
	protected void log(String message) {
		analyzer.log("Join Stmt "+toString()+": "+message);
	}

	@Override
	public String toString() {
		return "<"+resolvedAccPath+":"+joinStmt+">";
	}

	public AccessPath<Field> getResolvedAccessPath() {
		return resolvedAccPath;
	}

	public Stmt getJoinStmt() {
		return joinStmt;
	}
}












H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros

eb98a8569b4d675c4cca6c52c59a34a89463e3fb

















eb98a8569b4d675c4cca6c52c59a34a89463e3fb


Switch branch/tag










heros


src


heros


alias


ControlFlowJoinResolver.java



Find file
Normal viewHistoryPermalink






ControlFlowJoinResolver.java



4.91 KB









Newer










Older









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import java.util.Map;
import java.util.Set;

import com.google.common.collect.Maps;
import com.google.common.collect.Sets;

import heros.alias.AccessPath.Delta;
import heros.alias.AccessPath.PrefixTestResult;
import heros.alias.FlowFunction.Constraint;










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






23




public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90





	private boolean recursiveLock = false;
	private Stmt joinStmt;
	private AccessPath<Field> resolvedAccPath;
	private Set<WrappedFact<Field, Fact, Stmt, Method>> incomingFacts = Sets.newHashSet();
	private boolean propagated = false;
	private Map<AccessPath<Field>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> nestedResolvers = Maps.newHashMap();
	private ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent;

	public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {
		this(analyzer, joinStmt, new AccessPath<Field>(), null);
	}
	
	private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {
		super(analyzer);
		this.joinStmt = joinStmt;
		this.resolvedAccPath = resolvedAccPath;
		this.parent = parent;
	}

	public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact) {
		if(resolvedAccPath.isPrefixOf(fact.getAccessPath()) == PrefixTestResult.GUARANTEED_PREFIX) {
			log("Incoming Fact "+fact);
			if(!incomingFacts.add(fact))
				return;
			
			interest(analyzer, this);
			for(ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver : nestedResolvers.values())
				nestedResolver.addIncoming(fact);
			
			if(!propagated) {
				propagated=true;
				analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(
						fact.getFact(), new AccessPath<Field>(), this)));
			}
		}
		else if(fact.getAccessPath().isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {
			Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);
			fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {
				@Override
				public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 
						Resolver<Field, Fact, Stmt, Method> resolver) {
					ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);
				}

				@Override
				public void canBeResolvedEmpty() {
					ControlFlowJoinResolver.this.canBeResolvedEmpty();
				}
			});
		}
	}
	
	private boolean isLocked() {
		if(recursiveLock)
			return true;
		if(parent == null)
			return false;
		return parent.isLocked();
	}
	
	@Override
	public void resolve(Constraint<Field> constraint, final InterestCallback<Field, Fact, Stmt, Method> callback) {
		log("Resolve: "+constraint);
		if(!constraint.canBeAppliedTo(resolvedAccPath) || isLocked())
			return;
		









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






91




		AccessPath<Field> candidateAccPath = constraint.applyToAccessPath(resolvedAccPath);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






92




93




		recursiveLock = true;
		ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = getOrCreateNestedResolver(candidateAccPath);









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






94




		if(!nestedResolver.resolvedAccPath.equals(constraint.applyToAccessPath(resolvedAccPath)))









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




			throw new AssertionError();
		
		nestedResolver.registerCallback(callback);
		recursiveLock = false;
	}
	
	private ControlFlowJoinResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> candidateAccPath) {
		if(resolvedAccPath.equals(candidateAccPath))
			return this;
		
		if(!nestedResolvers.containsKey(candidateAccPath)) {
			assert resolvedAccPath.getDeltaTo(candidateAccPath).accesses.length <= 1;
			
			final ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = new ControlFlowJoinResolver<>(analyzer, joinStmt, candidateAccPath, this);
			nestedResolver.propagated = true;
			nestedResolvers.put(candidateAccPath, nestedResolver);

			for(WrappedFact<Field, Fact, Stmt, Method> incFact: incomingFacts) {
				nestedResolver.addIncoming(incFact);
			}			
		}
		return nestedResolvers.get(candidateAccPath);
	}

	@Override
	protected void log(String message) {
		analyzer.log("Join Stmt "+toString()+": "+message);
	}

	@Override
	public String toString() {
		return "<"+resolvedAccPath+":"+joinStmt+">";
	}

	public AccessPath<Field> getResolvedAccessPath() {
		return resolvedAccPath;
	}

	public Stmt getJoinStmt() {
		return joinStmt;
	}
}











Open sidebar



Joshua Garcia heros

eb98a8569b4d675c4cca6c52c59a34a89463e3fb







Open sidebar



Joshua Garcia heros

eb98a8569b4d675c4cca6c52c59a34a89463e3fb




Open sidebar

Joshua Garcia heros

eb98a8569b4d675c4cca6c52c59a34a89463e3fb


Joshua Garciaherosheros
eb98a8569b4d675c4cca6c52c59a34a89463e3fb










eb98a8569b4d675c4cca6c52c59a34a89463e3fb


Switch branch/tag










heros


src


heros


alias


ControlFlowJoinResolver.java



Find file
Normal viewHistoryPermalink






ControlFlowJoinResolver.java



4.91 KB









Newer










Older









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import java.util.Map;
import java.util.Set;

import com.google.common.collect.Maps;
import com.google.common.collect.Sets;

import heros.alias.AccessPath.Delta;
import heros.alias.AccessPath.PrefixTestResult;
import heros.alias.FlowFunction.Constraint;










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






23




public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90





	private boolean recursiveLock = false;
	private Stmt joinStmt;
	private AccessPath<Field> resolvedAccPath;
	private Set<WrappedFact<Field, Fact, Stmt, Method>> incomingFacts = Sets.newHashSet();
	private boolean propagated = false;
	private Map<AccessPath<Field>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> nestedResolvers = Maps.newHashMap();
	private ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent;

	public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {
		this(analyzer, joinStmt, new AccessPath<Field>(), null);
	}
	
	private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {
		super(analyzer);
		this.joinStmt = joinStmt;
		this.resolvedAccPath = resolvedAccPath;
		this.parent = parent;
	}

	public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact) {
		if(resolvedAccPath.isPrefixOf(fact.getAccessPath()) == PrefixTestResult.GUARANTEED_PREFIX) {
			log("Incoming Fact "+fact);
			if(!incomingFacts.add(fact))
				return;
			
			interest(analyzer, this);
			for(ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver : nestedResolvers.values())
				nestedResolver.addIncoming(fact);
			
			if(!propagated) {
				propagated=true;
				analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(
						fact.getFact(), new AccessPath<Field>(), this)));
			}
		}
		else if(fact.getAccessPath().isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {
			Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);
			fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {
				@Override
				public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 
						Resolver<Field, Fact, Stmt, Method> resolver) {
					ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);
				}

				@Override
				public void canBeResolvedEmpty() {
					ControlFlowJoinResolver.this.canBeResolvedEmpty();
				}
			});
		}
	}
	
	private boolean isLocked() {
		if(recursiveLock)
			return true;
		if(parent == null)
			return false;
		return parent.isLocked();
	}
	
	@Override
	public void resolve(Constraint<Field> constraint, final InterestCallback<Field, Fact, Stmt, Method> callback) {
		log("Resolve: "+constraint);
		if(!constraint.canBeAppliedTo(resolvedAccPath) || isLocked())
			return;
		









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






91




		AccessPath<Field> candidateAccPath = constraint.applyToAccessPath(resolvedAccPath);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






92




93




		recursiveLock = true;
		ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = getOrCreateNestedResolver(candidateAccPath);









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






94




		if(!nestedResolver.resolvedAccPath.equals(constraint.applyToAccessPath(resolvedAccPath)))









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




			throw new AssertionError();
		
		nestedResolver.registerCallback(callback);
		recursiveLock = false;
	}
	
	private ControlFlowJoinResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> candidateAccPath) {
		if(resolvedAccPath.equals(candidateAccPath))
			return this;
		
		if(!nestedResolvers.containsKey(candidateAccPath)) {
			assert resolvedAccPath.getDeltaTo(candidateAccPath).accesses.length <= 1;
			
			final ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = new ControlFlowJoinResolver<>(analyzer, joinStmt, candidateAccPath, this);
			nestedResolver.propagated = true;
			nestedResolvers.put(candidateAccPath, nestedResolver);

			for(WrappedFact<Field, Fact, Stmt, Method> incFact: incomingFacts) {
				nestedResolver.addIncoming(incFact);
			}			
		}
		return nestedResolvers.get(candidateAccPath);
	}

	@Override
	protected void log(String message) {
		analyzer.log("Join Stmt "+toString()+": "+message);
	}

	@Override
	public String toString() {
		return "<"+resolvedAccPath+":"+joinStmt+">";
	}

	public AccessPath<Field> getResolvedAccessPath() {
		return resolvedAccPath;
	}

	public Stmt getJoinStmt() {
		return joinStmt;
	}
}














eb98a8569b4d675c4cca6c52c59a34a89463e3fb


Switch branch/tag










heros


src


heros


alias


ControlFlowJoinResolver.java



Find file
Normal viewHistoryPermalink






ControlFlowJoinResolver.java



4.91 KB









Newer










Older









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import java.util.Map;
import java.util.Set;

import com.google.common.collect.Maps;
import com.google.common.collect.Sets;

import heros.alias.AccessPath.Delta;
import heros.alias.AccessPath.PrefixTestResult;
import heros.alias.FlowFunction.Constraint;










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






23




public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90





	private boolean recursiveLock = false;
	private Stmt joinStmt;
	private AccessPath<Field> resolvedAccPath;
	private Set<WrappedFact<Field, Fact, Stmt, Method>> incomingFacts = Sets.newHashSet();
	private boolean propagated = false;
	private Map<AccessPath<Field>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> nestedResolvers = Maps.newHashMap();
	private ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent;

	public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {
		this(analyzer, joinStmt, new AccessPath<Field>(), null);
	}
	
	private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {
		super(analyzer);
		this.joinStmt = joinStmt;
		this.resolvedAccPath = resolvedAccPath;
		this.parent = parent;
	}

	public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact) {
		if(resolvedAccPath.isPrefixOf(fact.getAccessPath()) == PrefixTestResult.GUARANTEED_PREFIX) {
			log("Incoming Fact "+fact);
			if(!incomingFacts.add(fact))
				return;
			
			interest(analyzer, this);
			for(ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver : nestedResolvers.values())
				nestedResolver.addIncoming(fact);
			
			if(!propagated) {
				propagated=true;
				analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(
						fact.getFact(), new AccessPath<Field>(), this)));
			}
		}
		else if(fact.getAccessPath().isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {
			Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);
			fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {
				@Override
				public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 
						Resolver<Field, Fact, Stmt, Method> resolver) {
					ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);
				}

				@Override
				public void canBeResolvedEmpty() {
					ControlFlowJoinResolver.this.canBeResolvedEmpty();
				}
			});
		}
	}
	
	private boolean isLocked() {
		if(recursiveLock)
			return true;
		if(parent == null)
			return false;
		return parent.isLocked();
	}
	
	@Override
	public void resolve(Constraint<Field> constraint, final InterestCallback<Field, Fact, Stmt, Method> callback) {
		log("Resolve: "+constraint);
		if(!constraint.canBeAppliedTo(resolvedAccPath) || isLocked())
			return;
		









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






91




		AccessPath<Field> candidateAccPath = constraint.applyToAccessPath(resolvedAccPath);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






92




93




		recursiveLock = true;
		ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = getOrCreateNestedResolver(candidateAccPath);









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






94




		if(!nestedResolver.resolvedAccPath.equals(constraint.applyToAccessPath(resolvedAccPath)))









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




			throw new AssertionError();
		
		nestedResolver.registerCallback(callback);
		recursiveLock = false;
	}
	
	private ControlFlowJoinResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> candidateAccPath) {
		if(resolvedAccPath.equals(candidateAccPath))
			return this;
		
		if(!nestedResolvers.containsKey(candidateAccPath)) {
			assert resolvedAccPath.getDeltaTo(candidateAccPath).accesses.length <= 1;
			
			final ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = new ControlFlowJoinResolver<>(analyzer, joinStmt, candidateAccPath, this);
			nestedResolver.propagated = true;
			nestedResolvers.put(candidateAccPath, nestedResolver);

			for(WrappedFact<Field, Fact, Stmt, Method> incFact: incomingFacts) {
				nestedResolver.addIncoming(incFact);
			}			
		}
		return nestedResolvers.get(candidateAccPath);
	}

	@Override
	protected void log(String message) {
		analyzer.log("Join Stmt "+toString()+": "+message);
	}

	@Override
	public String toString() {
		return "<"+resolvedAccPath+":"+joinStmt+">";
	}

	public AccessPath<Field> getResolvedAccessPath() {
		return resolvedAccPath;
	}

	public Stmt getJoinStmt() {
		return joinStmt;
	}
}










eb98a8569b4d675c4cca6c52c59a34a89463e3fb


Switch branch/tag










heros


src


heros


alias


ControlFlowJoinResolver.java



Find file
Normal viewHistoryPermalink




eb98a8569b4d675c4cca6c52c59a34a89463e3fb


Switch branch/tag










heros


src


heros


alias


ControlFlowJoinResolver.java





eb98a8569b4d675c4cca6c52c59a34a89463e3fb


Switch branch/tag








eb98a8569b4d675c4cca6c52c59a34a89463e3fb


Switch branch/tag





eb98a8569b4d675c4cca6c52c59a34a89463e3fb

Switch branch/tag





Switch branch/tag



Switch branch/tagSwitch branch/tag
heros

src

heros

alias

ControlFlowJoinResolver.java
Find file
Normal viewHistoryPermalink




ControlFlowJoinResolver.java



4.91 KB









Newer










Older









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import java.util.Map;
import java.util.Set;

import com.google.common.collect.Maps;
import com.google.common.collect.Sets;

import heros.alias.AccessPath.Delta;
import heros.alias.AccessPath.PrefixTestResult;
import heros.alias.FlowFunction.Constraint;










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






23




public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90





	private boolean recursiveLock = false;
	private Stmt joinStmt;
	private AccessPath<Field> resolvedAccPath;
	private Set<WrappedFact<Field, Fact, Stmt, Method>> incomingFacts = Sets.newHashSet();
	private boolean propagated = false;
	private Map<AccessPath<Field>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> nestedResolvers = Maps.newHashMap();
	private ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent;

	public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {
		this(analyzer, joinStmt, new AccessPath<Field>(), null);
	}
	
	private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {
		super(analyzer);
		this.joinStmt = joinStmt;
		this.resolvedAccPath = resolvedAccPath;
		this.parent = parent;
	}

	public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact) {
		if(resolvedAccPath.isPrefixOf(fact.getAccessPath()) == PrefixTestResult.GUARANTEED_PREFIX) {
			log("Incoming Fact "+fact);
			if(!incomingFacts.add(fact))
				return;
			
			interest(analyzer, this);
			for(ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver : nestedResolvers.values())
				nestedResolver.addIncoming(fact);
			
			if(!propagated) {
				propagated=true;
				analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(
						fact.getFact(), new AccessPath<Field>(), this)));
			}
		}
		else if(fact.getAccessPath().isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {
			Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);
			fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {
				@Override
				public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 
						Resolver<Field, Fact, Stmt, Method> resolver) {
					ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);
				}

				@Override
				public void canBeResolvedEmpty() {
					ControlFlowJoinResolver.this.canBeResolvedEmpty();
				}
			});
		}
	}
	
	private boolean isLocked() {
		if(recursiveLock)
			return true;
		if(parent == null)
			return false;
		return parent.isLocked();
	}
	
	@Override
	public void resolve(Constraint<Field> constraint, final InterestCallback<Field, Fact, Stmt, Method> callback) {
		log("Resolve: "+constraint);
		if(!constraint.canBeAppliedTo(resolvedAccPath) || isLocked())
			return;
		









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






91




		AccessPath<Field> candidateAccPath = constraint.applyToAccessPath(resolvedAccPath);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






92




93




		recursiveLock = true;
		ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = getOrCreateNestedResolver(candidateAccPath);









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






94




		if(!nestedResolver.resolvedAccPath.equals(constraint.applyToAccessPath(resolvedAccPath)))









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




			throw new AssertionError();
		
		nestedResolver.registerCallback(callback);
		recursiveLock = false;
	}
	
	private ControlFlowJoinResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> candidateAccPath) {
		if(resolvedAccPath.equals(candidateAccPath))
			return this;
		
		if(!nestedResolvers.containsKey(candidateAccPath)) {
			assert resolvedAccPath.getDeltaTo(candidateAccPath).accesses.length <= 1;
			
			final ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = new ControlFlowJoinResolver<>(analyzer, joinStmt, candidateAccPath, this);
			nestedResolver.propagated = true;
			nestedResolvers.put(candidateAccPath, nestedResolver);

			for(WrappedFact<Field, Fact, Stmt, Method> incFact: incomingFacts) {
				nestedResolver.addIncoming(incFact);
			}			
		}
		return nestedResolvers.get(candidateAccPath);
	}

	@Override
	protected void log(String message) {
		analyzer.log("Join Stmt "+toString()+": "+message);
	}

	@Override
	public String toString() {
		return "<"+resolvedAccPath+":"+joinStmt+">";
	}

	public AccessPath<Field> getResolvedAccessPath() {
		return resolvedAccPath;
	}

	public Stmt getJoinStmt() {
		return joinStmt;
	}
}








ControlFlowJoinResolver.java



4.91 KB










ControlFlowJoinResolver.java



4.91 KB









Newer










Older
NewerOlder







rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import java.util.Map;
import java.util.Set;

import com.google.common.collect.Maps;
import com.google.common.collect.Sets;

import heros.alias.AccessPath.Delta;
import heros.alias.AccessPath.PrefixTestResult;
import heros.alias.FlowFunction.Constraint;










removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






23




public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90





	private boolean recursiveLock = false;
	private Stmt joinStmt;
	private AccessPath<Field> resolvedAccPath;
	private Set<WrappedFact<Field, Fact, Stmt, Method>> incomingFacts = Sets.newHashSet();
	private boolean propagated = false;
	private Map<AccessPath<Field>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> nestedResolvers = Maps.newHashMap();
	private ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent;

	public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {
		this(analyzer, joinStmt, new AccessPath<Field>(), null);
	}
	
	private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {
		super(analyzer);
		this.joinStmt = joinStmt;
		this.resolvedAccPath = resolvedAccPath;
		this.parent = parent;
	}

	public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact) {
		if(resolvedAccPath.isPrefixOf(fact.getAccessPath()) == PrefixTestResult.GUARANTEED_PREFIX) {
			log("Incoming Fact "+fact);
			if(!incomingFacts.add(fact))
				return;
			
			interest(analyzer, this);
			for(ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver : nestedResolvers.values())
				nestedResolver.addIncoming(fact);
			
			if(!propagated) {
				propagated=true;
				analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(
						fact.getFact(), new AccessPath<Field>(), this)));
			}
		}
		else if(fact.getAccessPath().isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {
			Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);
			fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {
				@Override
				public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 
						Resolver<Field, Fact, Stmt, Method> resolver) {
					ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);
				}

				@Override
				public void canBeResolvedEmpty() {
					ControlFlowJoinResolver.this.canBeResolvedEmpty();
				}
			});
		}
	}
	
	private boolean isLocked() {
		if(recursiveLock)
			return true;
		if(parent == null)
			return false;
		return parent.isLocked();
	}
	
	@Override
	public void resolve(Constraint<Field> constraint, final InterestCallback<Field, Fact, Stmt, Method> callback) {
		log("Resolve: "+constraint);
		if(!constraint.canBeAppliedTo(resolvedAccPath) || isLocked())
			return;
		









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






91




		AccessPath<Field> candidateAccPath = constraint.applyToAccessPath(resolvedAccPath);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






92




93




		recursiveLock = true;
		ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = getOrCreateNestedResolver(candidateAccPath);









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






94




		if(!nestedResolver.resolvedAccPath.equals(constraint.applyToAccessPath(resolvedAccPath)))









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




			throw new AssertionError();
		
		nestedResolver.registerCallback(callback);
		recursiveLock = false;
	}
	
	private ControlFlowJoinResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> candidateAccPath) {
		if(resolvedAccPath.equals(candidateAccPath))
			return this;
		
		if(!nestedResolvers.containsKey(candidateAccPath)) {
			assert resolvedAccPath.getDeltaTo(candidateAccPath).accesses.length <= 1;
			
			final ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = new ControlFlowJoinResolver<>(analyzer, joinStmt, candidateAccPath, this);
			nestedResolver.propagated = true;
			nestedResolvers.put(candidateAccPath, nestedResolver);

			for(WrappedFact<Field, Fact, Stmt, Method> incFact: incomingFacts) {
				nestedResolver.addIncoming(incFact);
			}			
		}
		return nestedResolvers.get(candidateAccPath);
	}

	@Override
	protected void log(String message) {
		analyzer.log("Join Stmt "+toString()+": "+message);
	}

	@Override
	public String toString() {
		return "<"+resolvedAccPath+":"+joinStmt+">";
	}

	public AccessPath<Field> getResolvedAccessPath() {
		return resolvedAccPath;
	}

	public Stmt getJoinStmt() {
		return joinStmt;
	}
}







rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22
/*******************************************************************************/******************************************************************************* * Copyright (c) 2015 Johannes Lerch. * Copyright (c) 2015 Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;import java.util.Map;importjava.util.Map;import java.util.Set;importjava.util.Set;import com.google.common.collect.Maps;importcom.google.common.collect.Maps;import com.google.common.collect.Sets;importcom.google.common.collect.Sets;import heros.alias.AccessPath.Delta;importheros.alias.AccessPath.Delta;import heros.alias.AccessPath.PrefixTestResult;importheros.alias.AccessPath.PrefixTestResult;import heros.alias.FlowFunction.Constraint;importheros.alias.FlowFunction.Constraint;



removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015



removed unnecessary merge code in access path


 

 

removed unnecessary merge code in access path

 

Johannes Lerch
committed
Mar 25, 2015

23
public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {publicclassControlFlowJoinResolver<Field,Fact,Stmt,Method>extendsResolver<Field,Fact,Stmt,Method>{



rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

24

25

26

27

28

29

30

31

32

33

34

35

36

37

38

39

40

41

42

43

44

45

46

47

48

49

50

51

52

53

54

55

56

57

58

59

60

61

62

63

64

65

66

67

68

69

70

71

72

73

74

75

76

77

78

79

80

81

82

83

84

85

86

87

88

89

90
	private boolean recursiveLock = false;privatebooleanrecursiveLock=false;	private Stmt joinStmt;privateStmtjoinStmt;	private AccessPath<Field> resolvedAccPath;privateAccessPath<Field>resolvedAccPath;	private Set<WrappedFact<Field, Fact, Stmt, Method>> incomingFacts = Sets.newHashSet();privateSet<WrappedFact<Field,Fact,Stmt,Method>>incomingFacts=Sets.newHashSet();	private boolean propagated = false;privatebooleanpropagated=false;	private Map<AccessPath<Field>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> nestedResolvers = Maps.newHashMap();privateMap<AccessPath<Field>,ControlFlowJoinResolver<Field,Fact,Stmt,Method>>nestedResolvers=Maps.newHashMap();	private ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent;privateControlFlowJoinResolver<Field,Fact,Stmt,Method>parent;	public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {publicControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtjoinStmt){		this(analyzer, joinStmt, new AccessPath<Field>(), null);this(analyzer,joinStmt,newAccessPath<Field>(),null);	}}		private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {privateControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtjoinStmt,AccessPath<Field>resolvedAccPath,ControlFlowJoinResolver<Field,Fact,Stmt,Method>parent){		super(analyzer);super(analyzer);		this.joinStmt = joinStmt;this.joinStmt=joinStmt;		this.resolvedAccPath = resolvedAccPath;this.resolvedAccPath=resolvedAccPath;		this.parent = parent;this.parent=parent;	}}	public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact) {publicvoidaddIncoming(finalWrappedFact<Field,Fact,Stmt,Method>fact){		if(resolvedAccPath.isPrefixOf(fact.getAccessPath()) == PrefixTestResult.GUARANTEED_PREFIX) {if(resolvedAccPath.isPrefixOf(fact.getAccessPath())==PrefixTestResult.GUARANTEED_PREFIX){			log("Incoming Fact "+fact);log("Incoming Fact "+fact);			if(!incomingFacts.add(fact))if(!incomingFacts.add(fact))				return;return;						interest(analyzer, this);interest(analyzer,this);			for(ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver : nestedResolvers.values())for(ControlFlowJoinResolver<Field,Fact,Stmt,Method>nestedResolver:nestedResolvers.values())				nestedResolver.addIncoming(fact);nestedResolver.addIncoming(fact);						if(!propagated) {if(!propagated){				propagated=true;propagated=true;				analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(analyzer.processFlowFromJoinStmt(newWrappedFactAtStatement<>(joinStmt,newWrappedFact<>(						fact.getFact(), new AccessPath<Field>(), this)));fact.getFact(),newAccessPath<Field>(),this)));			}}		}}		else if(fact.getAccessPath().isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {elseif(fact.getAccessPath().isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)){			Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);Delta<Field>delta=fact.getAccessPath().getDeltaTo(resolvedAccPath);			fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {fact.getResolver().resolve(newDeltaConstraint<>(delta),newInterestCallback<Field,Fact,Stmt,Method>(){				@Override@Override				public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, publicvoidinterest(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,						Resolver<Field, Fact, Stmt, Method> resolver) {Resolver<Field,Fact,Stmt,Method>resolver){					ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);ControlFlowJoinResolver.this.interest(analyzer,ControlFlowJoinResolver.this);				}}				@Override@Override				public void canBeResolvedEmpty() {publicvoidcanBeResolvedEmpty(){					ControlFlowJoinResolver.this.canBeResolvedEmpty();ControlFlowJoinResolver.this.canBeResolvedEmpty();				}}			});});		}}	}}		private boolean isLocked() {privatebooleanisLocked(){		if(recursiveLock)if(recursiveLock)			return true;returntrue;		if(parent == null)if(parent==null)			return false;returnfalse;		return parent.isLocked();returnparent.isLocked();	}}		@Override@Override	public void resolve(Constraint<Field> constraint, final InterestCallback<Field, Fact, Stmt, Method> callback) {publicvoidresolve(Constraint<Field>constraint,finalInterestCallback<Field,Fact,Stmt,Method>callback){		log("Resolve: "+constraint);log("Resolve: "+constraint);		if(!constraint.canBeAppliedTo(resolvedAccPath) || isLocked())if(!constraint.canBeAppliedTo(resolvedAccPath)||isLocked())			return;return;		



removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015



removed unnecessary merge code in access path


 

 

removed unnecessary merge code in access path

 

Johannes Lerch
committed
Mar 25, 2015

91
		AccessPath<Field> candidateAccPath = constraint.applyToAccessPath(resolvedAccPath);AccessPath<Field>candidateAccPath=constraint.applyToAccessPath(resolvedAccPath);



rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

92

93
		recursiveLock = true;recursiveLock=true;		ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = getOrCreateNestedResolver(candidateAccPath);ControlFlowJoinResolver<Field,Fact,Stmt,Method>nestedResolver=getOrCreateNestedResolver(candidateAccPath);



removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015



removed unnecessary merge code in access path


 

 

removed unnecessary merge code in access path

 

Johannes Lerch
committed
Mar 25, 2015

94
		if(!nestedResolver.resolvedAccPath.equals(constraint.applyToAccessPath(resolvedAccPath)))if(!nestedResolver.resolvedAccPath.equals(constraint.applyToAccessPath(resolvedAccPath)))



rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

95

96

97

98

99

100

101

102

103

104

105

106

107

108

109

110

111

112

113

114

115

116

117

118

119

120

121

122

123

124

125

126

127

128

129

130

131

132

133

134

135

136
			throw new AssertionError();thrownewAssertionError();				nestedResolver.registerCallback(callback);nestedResolver.registerCallback(callback);		recursiveLock = false;recursiveLock=false;	}}		private ControlFlowJoinResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> candidateAccPath) {privateControlFlowJoinResolver<Field,Fact,Stmt,Method>getOrCreateNestedResolver(AccessPath<Field>candidateAccPath){		if(resolvedAccPath.equals(candidateAccPath))if(resolvedAccPath.equals(candidateAccPath))			return this;returnthis;				if(!nestedResolvers.containsKey(candidateAccPath)) {if(!nestedResolvers.containsKey(candidateAccPath)){			assert resolvedAccPath.getDeltaTo(candidateAccPath).accesses.length <= 1;assertresolvedAccPath.getDeltaTo(candidateAccPath).accesses.length<=1;						final ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = new ControlFlowJoinResolver<>(analyzer, joinStmt, candidateAccPath, this);finalControlFlowJoinResolver<Field,Fact,Stmt,Method>nestedResolver=newControlFlowJoinResolver<>(analyzer,joinStmt,candidateAccPath,this);			nestedResolver.propagated = true;nestedResolver.propagated=true;			nestedResolvers.put(candidateAccPath, nestedResolver);nestedResolvers.put(candidateAccPath,nestedResolver);			for(WrappedFact<Field, Fact, Stmt, Method> incFact: incomingFacts) {for(WrappedFact<Field,Fact,Stmt,Method>incFact:incomingFacts){				nestedResolver.addIncoming(incFact);nestedResolver.addIncoming(incFact);			}			}		}}		return nestedResolvers.get(candidateAccPath);returnnestedResolvers.get(candidateAccPath);	}}	@Override@Override	protected void log(String message) {protectedvoidlog(Stringmessage){		analyzer.log("Join Stmt "+toString()+": "+message);analyzer.log("Join Stmt "+toString()+": "+message);	}}	@Override@Override	public String toString() {publicStringtoString(){		return "<"+resolvedAccPath+":"+joinStmt+">";return"<"+resolvedAccPath+":"+joinStmt+">";	}}	public AccessPath<Field> getResolvedAccessPath() {publicAccessPath<Field>getResolvedAccessPath(){		return resolvedAccPath;returnresolvedAccPath;	}}	public Stmt getJoinStmt() {publicStmtgetJoinStmt(){		return joinStmt;returnjoinStmt;	}}}}





