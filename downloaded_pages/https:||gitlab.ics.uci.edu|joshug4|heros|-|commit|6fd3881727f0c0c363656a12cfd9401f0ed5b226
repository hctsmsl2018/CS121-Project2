



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

6fd38817















Commit
6fd38817


authored
Jun 25, 2014
by


Johannes Lerch



Browse files




Introducing wrapper method propagateUnbalancedReturnFlow, which by

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.






parent
f1cee5b8













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ 6fd38817






......@@ -15,6 +15,7 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.IFDSSolver.BinaryDomain;





















import java.util.Collections;










import java.util.HashMap;



......@@ -90,6 +91,20 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N retSiteC;










 private AbstractionWithSourceStmt targetVal;










 private EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction;










 private N relatedCallSite;










 










 public PausedEdge(N retSiteC, AbstractionWithSourceStmt targetVal, EdgeFunction<BinaryDomain> edgeFunction, N relatedCallSite) {










 this.retSiteC = retSiteC;










 this.targetVal = targetVal;










 this.edgeFunction = edgeFunction;










 this.relatedCallSite = relatedCallSite;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */



......@@ -97,7 +112,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = Collections.newSetFromMap(Maps.<N, Boolean>newConcurrentMap());










 private ConcurrentMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 private ConcurrentMap<N,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {



......@@ -106,37 +121,33 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 }










 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt> edge) {










 protected void propagateUnbalancedReturnFlow(N retSiteC, AbstractionWithSourceStmt targetVal,










 EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction, N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 










 Set<PathEdge<N,AbstractionWithSourceStmt>> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PathEdge<N,AbstractionWithSourceStmt>, Boolean>newConcurrentMap()); 










 Set<PathEdge<N,AbstractionWithSourceStmt>> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 super.processExit(edge);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //the default case










 super.processExit(edge);










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge edge = new PausedEdge(retSiteC, targetVal, edgeFunction, relatedCallSite);










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 }










 



......@@ -172,13 +183,13 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(pausedEdges.remove(pausedEdge)) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.retSiteC, edge.targetVal, edge.edgeFunction, edge.relatedCallSite);










 }










 }










 }



......














src/heros/solver/IDESolver.java








View file @ 6fd38817






......@@ -483,7 +483,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, Collections.singleton(zeroValue));










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(zeroValue, retSiteC, d5, f.composeWith(f5), c, true);










 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);










 }










 }










 }



......@@ -498,6 +498,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 protected void propagateUnbalancedReturnFlow(N retSiteC, D targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) {










 propagate(zeroValue, retSiteC, targetVal, edgeFunction, relatedCallSite, true);










 }





















 /**










	 * This method will be called for each incoming edge and can be used to










	 * transfer knowledge from the calling edge to the returning edge, without



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

6fd38817















Commit
6fd38817


authored
Jun 25, 2014
by


Johannes Lerch



Browse files




Introducing wrapper method propagateUnbalancedReturnFlow, which by

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.






parent
f1cee5b8













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ 6fd38817






......@@ -15,6 +15,7 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.IFDSSolver.BinaryDomain;





















import java.util.Collections;










import java.util.HashMap;



......@@ -90,6 +91,20 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N retSiteC;










 private AbstractionWithSourceStmt targetVal;










 private EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction;










 private N relatedCallSite;










 










 public PausedEdge(N retSiteC, AbstractionWithSourceStmt targetVal, EdgeFunction<BinaryDomain> edgeFunction, N relatedCallSite) {










 this.retSiteC = retSiteC;










 this.targetVal = targetVal;










 this.edgeFunction = edgeFunction;










 this.relatedCallSite = relatedCallSite;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */



......@@ -97,7 +112,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = Collections.newSetFromMap(Maps.<N, Boolean>newConcurrentMap());










 private ConcurrentMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 private ConcurrentMap<N,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {



......@@ -106,37 +121,33 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 }










 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt> edge) {










 protected void propagateUnbalancedReturnFlow(N retSiteC, AbstractionWithSourceStmt targetVal,










 EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction, N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 










 Set<PathEdge<N,AbstractionWithSourceStmt>> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PathEdge<N,AbstractionWithSourceStmt>, Boolean>newConcurrentMap()); 










 Set<PathEdge<N,AbstractionWithSourceStmt>> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 super.processExit(edge);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //the default case










 super.processExit(edge);










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge edge = new PausedEdge(retSiteC, targetVal, edgeFunction, relatedCallSite);










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 }










 



......@@ -172,13 +183,13 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(pausedEdges.remove(pausedEdge)) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.retSiteC, edge.targetVal, edge.edgeFunction, edge.relatedCallSite);










 }










 }










 }



......














src/heros/solver/IDESolver.java








View file @ 6fd38817






......@@ -483,7 +483,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, Collections.singleton(zeroValue));










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(zeroValue, retSiteC, d5, f.composeWith(f5), c, true);










 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);










 }










 }










 }



......@@ -498,6 +498,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 protected void propagateUnbalancedReturnFlow(N retSiteC, D targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) {










 propagate(zeroValue, retSiteC, targetVal, edgeFunction, relatedCallSite, true);










 }





















 /**










	 * This method will be called for each incoming edge and can be used to










	 * transfer knowledge from the calling edge to the returning edge, without



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

6fd38817







Open sidebar



Joshua Garcia heros
Commits

6fd38817




Open sidebar

Joshua Garcia heros
Commits

6fd38817


Joshua GarciaherosherosCommits
6fd38817








Commit
6fd38817


authored
Jun 25, 2014
by


Johannes Lerch



Browse files




Introducing wrapper method propagateUnbalancedReturnFlow, which by

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.






parent
f1cee5b8













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ 6fd38817






......@@ -15,6 +15,7 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.IFDSSolver.BinaryDomain;





















import java.util.Collections;










import java.util.HashMap;



......@@ -90,6 +91,20 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N retSiteC;










 private AbstractionWithSourceStmt targetVal;










 private EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction;










 private N relatedCallSite;










 










 public PausedEdge(N retSiteC, AbstractionWithSourceStmt targetVal, EdgeFunction<BinaryDomain> edgeFunction, N relatedCallSite) {










 this.retSiteC = retSiteC;










 this.targetVal = targetVal;










 this.edgeFunction = edgeFunction;










 this.relatedCallSite = relatedCallSite;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */



......@@ -97,7 +112,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = Collections.newSetFromMap(Maps.<N, Boolean>newConcurrentMap());










 private ConcurrentMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 private ConcurrentMap<N,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {



......@@ -106,37 +121,33 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 }










 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt> edge) {










 protected void propagateUnbalancedReturnFlow(N retSiteC, AbstractionWithSourceStmt targetVal,










 EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction, N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 










 Set<PathEdge<N,AbstractionWithSourceStmt>> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PathEdge<N,AbstractionWithSourceStmt>, Boolean>newConcurrentMap()); 










 Set<PathEdge<N,AbstractionWithSourceStmt>> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 super.processExit(edge);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //the default case










 super.processExit(edge);










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge edge = new PausedEdge(retSiteC, targetVal, edgeFunction, relatedCallSite);










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 }










 



......@@ -172,13 +183,13 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(pausedEdges.remove(pausedEdge)) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.retSiteC, edge.targetVal, edge.edgeFunction, edge.relatedCallSite);










 }










 }










 }



......














src/heros/solver/IDESolver.java








View file @ 6fd38817






......@@ -483,7 +483,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, Collections.singleton(zeroValue));










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(zeroValue, retSiteC, d5, f.composeWith(f5), c, true);










 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);










 }










 }










 }



......@@ -498,6 +498,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 protected void propagateUnbalancedReturnFlow(N retSiteC, D targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) {










 propagate(zeroValue, retSiteC, targetVal, edgeFunction, relatedCallSite, true);










 }





















 /**










	 * This method will be called for each incoming edge and can be used to










	 * transfer knowledge from the calling edge to the returning edge, without



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
6fd38817


authored
Jun 25, 2014
by


Johannes Lerch



Browse files




Introducing wrapper method propagateUnbalancedReturnFlow, which by

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.






parent
f1cee5b8













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ 6fd38817






......@@ -15,6 +15,7 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.IFDSSolver.BinaryDomain;





















import java.util.Collections;










import java.util.HashMap;



......@@ -90,6 +91,20 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N retSiteC;










 private AbstractionWithSourceStmt targetVal;










 private EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction;










 private N relatedCallSite;










 










 public PausedEdge(N retSiteC, AbstractionWithSourceStmt targetVal, EdgeFunction<BinaryDomain> edgeFunction, N relatedCallSite) {










 this.retSiteC = retSiteC;










 this.targetVal = targetVal;










 this.edgeFunction = edgeFunction;










 this.relatedCallSite = relatedCallSite;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */



......@@ -97,7 +112,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = Collections.newSetFromMap(Maps.<N, Boolean>newConcurrentMap());










 private ConcurrentMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 private ConcurrentMap<N,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {



......@@ -106,37 +121,33 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 }










 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt> edge) {










 protected void propagateUnbalancedReturnFlow(N retSiteC, AbstractionWithSourceStmt targetVal,










 EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction, N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 










 Set<PathEdge<N,AbstractionWithSourceStmt>> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PathEdge<N,AbstractionWithSourceStmt>, Boolean>newConcurrentMap()); 










 Set<PathEdge<N,AbstractionWithSourceStmt>> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 super.processExit(edge);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //the default case










 super.processExit(edge);










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge edge = new PausedEdge(retSiteC, targetVal, edgeFunction, relatedCallSite);










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 }










 



......@@ -172,13 +183,13 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(pausedEdges.remove(pausedEdge)) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.retSiteC, edge.targetVal, edge.edgeFunction, edge.relatedCallSite);










 }










 }










 }



......














src/heros/solver/IDESolver.java








View file @ 6fd38817






......@@ -483,7 +483,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, Collections.singleton(zeroValue));










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(zeroValue, retSiteC, d5, f.composeWith(f5), c, true);










 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);










 }










 }










 }



......@@ -498,6 +498,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 protected void propagateUnbalancedReturnFlow(N retSiteC, D targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) {










 propagate(zeroValue, retSiteC, targetVal, edgeFunction, relatedCallSite, true);










 }





















 /**










	 * This method will be called for each incoming edge and can be used to










	 * transfer knowledge from the calling edge to the returning edge, without



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
6fd38817


authored
Jun 25, 2014
by


Johannes Lerch



Browse files



Commit
6fd38817


authored
Jun 25, 2014
by


Johannes Lerch

6fd38817authoredbyJohannes Lerch

Introducing wrapper method propagateUnbalancedReturnFlow, which by

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.





parent
f1cee5b8
















parent
f1cee5b8





parent












Changes
2
2


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/solver/BiDiIFDSSolver.java








View file @ 6fd38817






......@@ -15,6 +15,7 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.IFDSSolver.BinaryDomain;





















import java.util.Collections;










import java.util.HashMap;



......@@ -90,6 +91,20 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N retSiteC;










 private AbstractionWithSourceStmt targetVal;










 private EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction;










 private N relatedCallSite;










 










 public PausedEdge(N retSiteC, AbstractionWithSourceStmt targetVal, EdgeFunction<BinaryDomain> edgeFunction, N relatedCallSite) {










 this.retSiteC = retSiteC;










 this.targetVal = targetVal;










 this.edgeFunction = edgeFunction;










 this.relatedCallSite = relatedCallSite;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */



......@@ -97,7 +112,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = Collections.newSetFromMap(Maps.<N, Boolean>newConcurrentMap());










 private ConcurrentMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 private ConcurrentMap<N,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {



......@@ -106,37 +121,33 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 }










 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt> edge) {










 protected void propagateUnbalancedReturnFlow(N retSiteC, AbstractionWithSourceStmt targetVal,










 EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction, N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 










 Set<PathEdge<N,AbstractionWithSourceStmt>> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PathEdge<N,AbstractionWithSourceStmt>, Boolean>newConcurrentMap()); 










 Set<PathEdge<N,AbstractionWithSourceStmt>> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 super.processExit(edge);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //the default case










 super.processExit(edge);










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge edge = new PausedEdge(retSiteC, targetVal, edgeFunction, relatedCallSite);










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 }










 



......@@ -172,13 +183,13 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(pausedEdges.remove(pausedEdge)) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.retSiteC, edge.targetVal, edge.edgeFunction, edge.relatedCallSite);










 }










 }










 }



......














src/heros/solver/IDESolver.java








View file @ 6fd38817






......@@ -483,7 +483,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, Collections.singleton(zeroValue));










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(zeroValue, retSiteC, d5, f.composeWith(f5), c, true);










 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);










 }










 }










 }



......@@ -498,6 +498,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 protected void propagateUnbalancedReturnFlow(N retSiteC, D targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) {










 propagate(zeroValue, retSiteC, targetVal, edgeFunction, relatedCallSite, true);










 }





















 /**










	 * This method will be called for each incoming edge and can be used to










	 * transfer knowledge from the calling edge to the returning edge, without



......














src/heros/solver/BiDiIFDSSolver.java








View file @ 6fd38817






......@@ -15,6 +15,7 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.IFDSSolver.BinaryDomain;





















import java.util.Collections;










import java.util.HashMap;



......@@ -90,6 +91,20 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N retSiteC;










 private AbstractionWithSourceStmt targetVal;










 private EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction;










 private N relatedCallSite;










 










 public PausedEdge(N retSiteC, AbstractionWithSourceStmt targetVal, EdgeFunction<BinaryDomain> edgeFunction, N relatedCallSite) {










 this.retSiteC = retSiteC;










 this.targetVal = targetVal;










 this.edgeFunction = edgeFunction;










 this.relatedCallSite = relatedCallSite;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */



......@@ -97,7 +112,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = Collections.newSetFromMap(Maps.<N, Boolean>newConcurrentMap());










 private ConcurrentMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 private ConcurrentMap<N,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {



......@@ -106,37 +121,33 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 }










 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt> edge) {










 protected void propagateUnbalancedReturnFlow(N retSiteC, AbstractionWithSourceStmt targetVal,










 EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction, N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 










 Set<PathEdge<N,AbstractionWithSourceStmt>> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PathEdge<N,AbstractionWithSourceStmt>, Boolean>newConcurrentMap()); 










 Set<PathEdge<N,AbstractionWithSourceStmt>> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 super.processExit(edge);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //the default case










 super.processExit(edge);










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge edge = new PausedEdge(retSiteC, targetVal, edgeFunction, relatedCallSite);










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 }










 



......@@ -172,13 +183,13 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(pausedEdges.remove(pausedEdge)) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.retSiteC, edge.targetVal, edge.edgeFunction, edge.relatedCallSite);










 }










 }










 }



......












src/heros/solver/BiDiIFDSSolver.java








View file @ 6fd38817








src/heros/solver/BiDiIFDSSolver.java










View file @ 6fd38817


6fd38817



......@@ -15,6 +15,7 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.IFDSSolver.BinaryDomain;





















import java.util.Collections;










import java.util.HashMap;



......@@ -90,6 +91,20 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N retSiteC;










 private AbstractionWithSourceStmt targetVal;










 private EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction;










 private N relatedCallSite;










 










 public PausedEdge(N retSiteC, AbstractionWithSourceStmt targetVal, EdgeFunction<BinaryDomain> edgeFunction, N relatedCallSite) {










 this.retSiteC = retSiteC;










 this.targetVal = targetVal;










 this.edgeFunction = edgeFunction;










 this.relatedCallSite = relatedCallSite;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */



......@@ -97,7 +112,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = Collections.newSetFromMap(Maps.<N, Boolean>newConcurrentMap());










 private ConcurrentMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 private ConcurrentMap<N,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {



......@@ -106,37 +121,33 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 }










 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt> edge) {










 protected void propagateUnbalancedReturnFlow(N retSiteC, AbstractionWithSourceStmt targetVal,










 EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction, N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 










 Set<PathEdge<N,AbstractionWithSourceStmt>> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PathEdge<N,AbstractionWithSourceStmt>, Boolean>newConcurrentMap()); 










 Set<PathEdge<N,AbstractionWithSourceStmt>> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 super.processExit(edge);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //the default case










 super.processExit(edge);










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge edge = new PausedEdge(retSiteC, targetVal, edgeFunction, relatedCallSite);










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 }










 



......@@ -172,13 +183,13 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(pausedEdges.remove(pausedEdge)) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.retSiteC, edge.targetVal, edge.edgeFunction, edge.relatedCallSite);










 }










 }










 }



......






......@@ -15,6 +15,7 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.IFDSSolver.BinaryDomain;





















import java.util.Collections;










import java.util.HashMap;



......@@ -90,6 +91,20 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N retSiteC;










 private AbstractionWithSourceStmt targetVal;










 private EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction;










 private N relatedCallSite;










 










 public PausedEdge(N retSiteC, AbstractionWithSourceStmt targetVal, EdgeFunction<BinaryDomain> edgeFunction, N relatedCallSite) {










 this.retSiteC = retSiteC;










 this.targetVal = targetVal;










 this.edgeFunction = edgeFunction;










 this.relatedCallSite = relatedCallSite;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */



......@@ -97,7 +112,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = Collections.newSetFromMap(Maps.<N, Boolean>newConcurrentMap());










 private ConcurrentMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 private ConcurrentMap<N,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {



......@@ -106,37 +121,33 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 }










 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt> edge) {










 protected void propagateUnbalancedReturnFlow(N retSiteC, AbstractionWithSourceStmt targetVal,










 EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction, N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 










 Set<PathEdge<N,AbstractionWithSourceStmt>> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PathEdge<N,AbstractionWithSourceStmt>, Boolean>newConcurrentMap()); 










 Set<PathEdge<N,AbstractionWithSourceStmt>> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 super.processExit(edge);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //the default case










 super.processExit(edge);










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge edge = new PausedEdge(retSiteC, targetVal, edgeFunction, relatedCallSite);










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 }










 



......@@ -172,13 +183,13 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(pausedEdges.remove(pausedEdge)) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.retSiteC, edge.targetVal, edge.edgeFunction, edge.relatedCallSite);










 }










 }










 }



......


import heros.FlowFunctions;importheros.FlowFunctions;import heros.IFDSTabulationProblem;importheros.IFDSTabulationProblem;import heros.InterproceduralCFG;importheros.InterproceduralCFG;import heros.solver.IFDSSolver.BinaryDomain;importheros.solver.IFDSSolver.BinaryDomain;import java.util.Collections;importjava.util.Collections;import java.util.HashMap;importjava.util.HashMap; return new SingleDirectionSolver(problem, debugName);returnnewSingleDirectionSolver(problem,debugName); }}  private class PausedEdge {privateclassPausedEdge{ private N retSiteC;privateNretSiteC; private AbstractionWithSourceStmt targetVal;privateAbstractionWithSourceStmttargetVal; private EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction;privateEdgeFunction<heros.solver.IFDSSolver.BinaryDomain>edgeFunction; private N relatedCallSite;privateNrelatedCallSite;  public PausedEdge(N retSiteC, AbstractionWithSourceStmt targetVal, EdgeFunction<BinaryDomain> edgeFunction, N relatedCallSite) {publicPausedEdge(NretSiteC,AbstractionWithSourceStmttargetVal,EdgeFunction<BinaryDomain>edgeFunction,NrelatedCallSite){ this.retSiteC = retSiteC;this.retSiteC=retSiteC; this.targetVal = targetVal;this.targetVal=targetVal; this.edgeFunction = edgeFunction;this.edgeFunction=edgeFunction; this.relatedCallSite = relatedCallSite;this.relatedCallSite=relatedCallSite; }} }}  /**/**	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.	 */	 */ private final String debugName;privatefinalStringdebugName; private SingleDirectionSolver otherSolver;privateSingleDirectionSolverotherSolver; private Set<N> leakedSources = Collections.newSetFromMap(Maps.<N, Boolean>newConcurrentMap());privateSet<N>leakedSources=Collections.newSetFromMap(Maps.<N,Boolean>newConcurrentMap()); private ConcurrentMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =privateConcurrentMap<N,Set<PathEdgethEdge<<NN,,AbstractionWithSourceStmtAbstractionWithSourceStmt>>>>pausedPathEdges= private ConcurrentMap<N,Set<PausedEdge>> pausedPathEdges =privateConcurrentMap<N,Set<PausedEdgeusedEdge>>pausedPathEdges= Maps.newConcurrentMap();Maps.newConcurrentMap(); public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {publicSingleDirectionSolver(IFDSTabulationProblem<N,AbstractionWithSourceStmt,M,I>ifdsProblem,StringdebugName){ }}  @Override@Override protected void processExit(PathEdge<N,AbstractionWithSourceStmt> edge) {protectedvoidprocessExit(PathEdge<N,AbstractionWithSourceStmt>edge){ protected void propagateUnbalancedReturnFlow(N retSiteC, AbstractionWithSourceStmt targetVal,protectedvoidpropagateUnbalancedReturnFlow(NretSiteC,AbstractionWithSourceStmttargetVal, EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction, N relatedCallSite) {EdgeFunction<heros.solver.IFDSSolver.BinaryDomain>edgeFunction,NrelatedCallSite){ //if an edge is originating from ZERO then to us this signifies an unbalanced return edge//if an edge is originating from ZERO then to us this signifies an unbalanced return edge if(edge.factAtSource().equals(zeroValue)) {if(edge.factAtSource().equals(zeroValue)){ N sourceStmt = edge.factAtTarget().getSourceStmt();NsourceStmt=edge.factAtTarget().getSourceStmt(); //we mark the fact that this solver would like to "leak" this edge to the caller//we mark the fact that this solver would like to "leak" this edge to the caller leakedSources.add(sourceStmt);leakedSources.add(sourceStmt); if(otherSolver.hasLeaked(sourceStmt)) {if(otherSolver.hasLeaked(sourceStmt)){ //if the other solver has leaked already then unpause its edges and continue//if the other solver has leaked already then unpause its edges and continue otherSolver.unpausePathEdgesForSource(sourceStmt);otherSolver.unpausePathEdgesForSource(sourceStmt); super.processExit(edge);super.processExit(edge); } else {}else{ //otherwise we pause this solver's edge and don't continue//otherwise we pause this solver's edge and don't continue  Set<PathEdge<N,AbstractionWithSourceStmt>> newPausedEdges = Set<PathEdge<N,AbstractionWithSourceStmt>>newPausedEdges= Collections.newSetFromMap(Maps.<PathEdge<N,AbstractionWithSourceStmt>, Boolean>newConcurrentMap()); Collections.newSetFromMap(Maps.<PathEdge<N,AbstractionWithSourceStmt>,Boolean>newConcurrentMap()); Set<PathEdge<N,AbstractionWithSourceStmt>> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);Set<PathEdge<N,AbstractionWithSourceStmt>>existingPausedEdges=pausedPathEdges.putIfAbsent(sourceStmt,newPausedEdges); if(existingPausedEdges==null)if(existingPausedEdges==null) existingPausedEdges=newPausedEdges;existingPausedEdges=newPausedEdges;  existingPausedEdges.add(edge);existingPausedEdges.add(edge);  //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused//if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {if(otherSolver.hasLeaked(sourceStmt)&&existingPausedEdges.remove(edge)){ super.processExit(edge);super.processExit(edge); }}  logger.debug(" ++ PAUSE {}: {}", debugName, edge);logger.debug(" ++ PAUSE {}: {}",debugName,edge); }} N sourceStmt = targetVal.getSourceStmt();NsourceStmt=targetVal.getSourceStmt(); //we mark the fact that this solver would like to "leak" this edge to the caller//we mark the fact that this solver would like to "leak" this edge to the caller leakedSources.add(sourceStmt);leakedSources.add(sourceStmt); if(otherSolver.hasLeaked(sourceStmt)) {if(otherSolver.hasLeaked(sourceStmt)){ //if the other solver has leaked already then unpause its edges and continue//if the other solver has leaked already then unpause its edges and continue otherSolver.unpausePathEdgesForSource(sourceStmt);otherSolver.unpausePathEdgesForSource(sourceStmt); super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);super.propagateUnbalancedReturnFlow(retSiteC,targetVal,edgeFunction,relatedCallSite); } else {}else{ //the default case//the default case super.processExit(edge);super.processExit(edge); //otherwise we pause this solver's edge and don't continue//otherwise we pause this solver's edge and don't continue Set<PausedEdge> newPausedEdges = Set<PausedEdge>newPausedEdges= Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); Collections.newSetFromMap(Maps.<PausedEdge,Boolean>newConcurrentMap()); Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);Set<PausedEdge>existingPausedEdges=pausedPathEdges.putIfAbsent(sourceStmt,newPausedEdges); if(existingPausedEdges==null)if(existingPausedEdges==null) existingPausedEdges=newPausedEdges;existingPausedEdges=newPausedEdges;  PausedEdge edge = new PausedEdge(retSiteC, targetVal, edgeFunction, relatedCallSite);PausedEdgeedge=newPausedEdge(retSiteC,targetVal,edgeFunction,relatedCallSite); existingPausedEdges.add(edge);existingPausedEdges.add(edge);  //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused//if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {if(otherSolver.hasLeaked(sourceStmt)&&existingPausedEdges.remove(edge)){ super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);super.propagateUnbalancedReturnFlow(retSiteC,targetVal,edgeFunction,relatedCallSite); }}  logger.debug(" ++ PAUSE {}: {}", debugName, edge);logger.debug(" ++ PAUSE {}: {}",debugName,edge); }} }} 		 * Unpauses all edges associated with the given source statement.		 * Unpauses all edges associated with the given source statement.		 */		 */ private void unpausePathEdgesForSource(N sourceStmt) {privatevoidunpausePathEdgesForSource(NsourceStmt){ Set<PathEdge<N, AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);Set<PathEdgethEdge<<NN,, AbstractionWithSourceStmtAbstractionWithSourceStmt>>>pausedEdges=pausedPathEdges.get(sourceStmt); Set<PausedEdge> pausedEdges = pausedPathEdges.get(sourceStmt);Set<PausedEdgeusedEdge>pausedEdges=pausedPathEdges.get(sourceStmt); if(pausedEdges!=null) {if(pausedEdges!=null){ for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {for(PathEdgethEdge<<NN,, AbstractionWithSourceStmtAbstractionWithSourceStmt>> pausedEdge:papausedEdges){ if(pausedEdges.remove(pausedEdge)) {if(pausedEdges.remove(pausedEdgepausedE)){ for(PausedEdge edge: pausedEdges) {for(PausedEdgedge edge:epausedEdges){ if(pausedEdges.remove(edge)) {if(pausedEdges.remove(edgee)){ if(DEBUG)if(DEBUG) logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);logger.debug("-- UNPAUSE {}: {}",debugName,pausedEdgepausedE); super.processExit(pausedEdge);super.processExitcessExit((pausedEdgepausedEdg); logger.debug("-- UNPAUSE {}: {}",debugName, edge);logger.debug("-- UNPAUSE {}: {}",debugName,edgee); super.propagateUnbalancedReturnFlow(edge.retSiteC, edge.targetVal, edge.edgeFunction, edge.relatedCallSite);super.propagateUnbalancedReturnFlowpagateUnbalancedReturnFlow((edgeedge..retSiteCretSiteC,, edgeedge..targetValtargetVal,, edgeedge..edgeFunctionedgeFunction,, edgeedge..relatedCallSiterelatedCallSit); }} }} }}








src/heros/solver/IDESolver.java








View file @ 6fd38817






......@@ -483,7 +483,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, Collections.singleton(zeroValue));










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(zeroValue, retSiteC, d5, f.composeWith(f5), c, true);










 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);










 }










 }










 }



......@@ -498,6 +498,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 protected void propagateUnbalancedReturnFlow(N retSiteC, D targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) {










 propagate(zeroValue, retSiteC, targetVal, edgeFunction, relatedCallSite, true);










 }





















 /**










	 * This method will be called for each incoming edge and can be used to










	 * transfer knowledge from the calling edge to the returning edge, without



......












src/heros/solver/IDESolver.java








View file @ 6fd38817








src/heros/solver/IDESolver.java










View file @ 6fd38817


6fd38817



......@@ -483,7 +483,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, Collections.singleton(zeroValue));










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(zeroValue, retSiteC, d5, f.composeWith(f5), c, true);










 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);










 }










 }










 }



......@@ -498,6 +498,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 protected void propagateUnbalancedReturnFlow(N retSiteC, D targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) {










 propagate(zeroValue, retSiteC, targetVal, edgeFunction, relatedCallSite, true);










 }





















 /**










	 * This method will be called for each incoming edge and can be used to










	 * transfer knowledge from the calling edge to the returning edge, without



......






......@@ -483,7 +483,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, Collections.singleton(zeroValue));










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(zeroValue, retSiteC, d5, f.composeWith(f5), c, true);










 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);










 }










 }










 }



......@@ -498,6 +498,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 protected void propagateUnbalancedReturnFlow(N retSiteC, D targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) {










 propagate(zeroValue, retSiteC, targetVal, edgeFunction, relatedCallSite, true);










 }





















 /**










	 * This method will be called for each incoming edge and can be used to










	 * transfer knowledge from the calling edge to the returning edge, without



......


 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, Collections.singleton(zeroValue));Set<D>targets=computeReturnFlowFunction(retFunction,d2,c,Collections.singleton(zeroValue)); for(D d5: targets) {for(Dd5:targets){ EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);EdgeFunction<V>f5=edgeFunctions.getReturnEdgeFunction(c,icfg.getMethodOf(n),n,d2,retSiteC,d5); propagate(zeroValue, retSiteC, d5, f.composeWith(f5), c, true);propagate((zeroValuezeroValue,, retSiteC,d5,f.composeWith(f5),c,, truetrue); propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);propagateUnbalancedReturnFlowUnbalancedReturnFlow((retSiteC,d5,f.composeWith(f5),c); }} }} }} }} }}  protected void propagateUnbalancedReturnFlow(N retSiteC, D targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) {protectedvoidpropagateUnbalancedReturnFlow(NretSiteC,DtargetVal,EdgeFunction<V>edgeFunction,NrelatedCallSite){ propagate(zeroValue, retSiteC, targetVal, edgeFunction, relatedCallSite, true);propagate(zeroValue,retSiteC,targetVal,edgeFunction,relatedCallSite,true); }} /**/**	 * This method will be called for each incoming edge and can be used to	 * This method will be called for each incoming edge and can be used to	 * transfer knowledge from the calling edge to the returning edge, without	 * transfer knowledge from the calling edge to the returning edge, without









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






