



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros

d7cafbe869957687e1f2dca1ed93bc1ce2b92ab2

















d7cafbe869957687e1f2dca1ed93bc1ce2b92ab2


Switch branch/tag










heros


test


heros


alias


AccessPathTest.java



Find file
Normal viewHistoryPermalink






AccessPathTest.java



8.52 KB









Newer










Older









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.*;

import java.util.Set;

import org.junit.Assert;
import org.junit.Test;

import com.google.common.collect.Sets;

import heros.alias.AccessPath.PrefixTestResult;
import heros.alias.SubAccessPath.*;

@SuppressWarnings("unchecked")
public class AccessPathTest {










merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






28




29




	private static FieldRef f(String s) {
		return new FieldRef(s);









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






30




31




	}
	









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






32




33




34




35




36




37




	private static FieldRef[] f(String...s) {
		FieldRef[] result = new FieldRef[s.length];
		for(int i=0; i<s.length; i++) {
			result[i] = f(s[i]);
		}
		return result;









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






38




39




	}
	









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






40




41




42




43




44




45




46




47




48




49




50




51




52




	private static SetOfPossibleFieldAccesses<FieldRef> anyOf(String...fields) {
		Set<FieldRef> set = Sets.newHashSet();
		for(String f : fields)
			set.add(new FieldRef(f));
		return new SetOfPossibleFieldAccesses<FieldRef>(set);
	}
	
	private static SpecificFieldAccess<FieldRef> s(String field) {
		return new SpecificFieldAccess<FieldRef>(new FieldRef(field));
	}
	
	private static AccessPath<FieldRef> ap(SubAccessPath<FieldRef>... path) {
		return new AccessPath<FieldRef>(path, new Set[0]);









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






53




54




55




56




	}
	
	@Test
	public void addAndMergeAll() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






57




58




		AccessPath<FieldRef> sut = AccessPath.<FieldRef>empty().addFieldReference(f("a", "b", "c"));
		assertEquals(ap(anyOf("a","b","c")), sut.addFieldReference(f("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






59




60




61




62




	}

	@Test
	public void addAndMergeSuffix() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






63




64




		AccessPath<FieldRef> sut = AccessPath.<FieldRef>empty().addFieldReference(f("a", "b", "c"));
		assertEquals(ap(s("a"), anyOf("b","c")), sut.addFieldReference(f("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






65




66




67




68




	}
	
	@Test
	public void addWithoutMerge() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






69




70




		AccessPath<FieldRef> sut = ap(s("a"));
		assertEquals(ap(s("a"), s("b")), sut.addFieldReference(f("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






71




72




73




74




	}
	
	@Test
	public void addMergedFields() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






75




		AccessPath<FieldRef> sut = ap(s("a"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






76




77




78




79




80




		assertEquals(ap(anyOf("a")), sut.addFieldReference(anyOf("a")));
	}

	@Test
	public void addMergedFieldsOnExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






81




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






82




83




84




85




86




		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(anyOf("a", "b")));
	}
	
	@Test
	public void addMergedFieldsOnNestedExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






87




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






88




89




90




91




92




		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(anyOf("a", "b")));
	}
	
	@Test
	public void addFieldThatMerges() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






93




94




		AccessPath<FieldRef> sut = ap(s("a"), s("b")).appendExcludedFieldReference(f("c")).appendExcludedFieldReference(f("x"));
		assertEquals(ap(anyOf("a", "b")).appendExcludedFieldReference(f("x")), sut.addFieldReference(s("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






95




96




97




98




	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






99




		AccessPath<FieldRef> sut = ap(s("a"), s("b")).appendExcludedFieldReference(f("c")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






100




101




102




103




104




		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(s("a")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField2() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






105




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






106




107




108




109




110




		assertEquals(ap(anyOf("a", "c")), sut.addFieldReference(anyOf("a","c")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField3() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






111




		AccessPath<FieldRef> sut = ap(s("c")).appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






112




113




114




115




116




		assertEquals(ap(anyOf("c")), sut.addFieldReference(anyOf("c")));
	}
	
	@Test
	public void addOnExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






117




118




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));
		assertEquals(ap(s("b")).appendExcludedFieldReference(f("b")), sut.addFieldReference(s("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






119




120




121




122




	}
	
	@Test
	public void addOnNestedExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






123




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






124




125




126




127




128




		assertEquals(ap(anyOf("a", "c")), sut.addFieldReference(anyOf("a", "c")));
	}

	@Test(expected=IllegalArgumentException.class)
	public void addMergedFieldsOnSingleExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






129




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






130




131




132




133




134




		sut.addFieldReference(anyOf("a"));	
	}
	
	@Test
	public void prependWithoutMerge() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






135




		assertEquals(ap(s("c"), s("a"), s("b")), ap(s("a"), s("b")).prepend(f("c")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






136




137




138




139




	}
	
	@Test
	public void prependWithMerge() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






140




		assertEquals(ap(anyOf("a"), anyOf("b", "c")), ap(s("a"), anyOf("b", "c")).prepend(f("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






141




142




143




144




	}
	
	@Test
	public void prependAndMergeWithSet() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






145




		assertEquals(ap(anyOf("a", "b", "c")), ap(s("a"), anyOf("b", "c")).prepend(f("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






146




147




148




149




	}
	
	@Test
	public void remove() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






150




		assertEquals(ap(s("b")), ap(s("a"), s("b")).removeFirst(f("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






151




152




153




154




	}
	
	@Test
	public void dontRemoveMergedFields() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






155




		assertEquals(ap(anyOf("a", "b")), ap(anyOf("a", "b")).removeFirst(f("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






156




157




158




159




	}
	
	@Test
	public void removeMergedFieldsIfRemovingSuffix() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






160




		assertEquals(ap(), ap(anyOf("a", "b"), s("c")).removeFirst(f("c")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






161




162




163




164




	}
	
	@Test
	public void deltaDepth1() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






165




		SubAccessPath<FieldRef>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), s("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






166




167




168




169




170




		assertArrayEquals(new SubAccessPath[] { s("b") }, actual);
	}
	
	@Test
	public void deltaDepth2() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






171




		SubAccessPath<FieldRef>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), s("b"), s("c")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






172




173




174




175




176




		assertArrayEquals(new SubAccessPath[] { s("b"), s("c") }, actual);
	}
	
	@Test
	public void delta() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






177




		SubAccessPath<FieldRef>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), anyOf("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






178




179




180




181




182




		assertArrayEquals(new SubAccessPath[] { anyOf("b") }, actual);
	}
	
	@Test
	public void delta2() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






183




		SubAccessPath<FieldRef>[] actual = ap(s("f"), s("g"), s("h")).getDeltaTo(ap(anyOf("f", "g"), s("h")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






184




185




186




187




188




		assertArrayEquals(new SubAccessPath[] {  }, actual);
	}
	
	@Test
	public void delta3() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






189




		SubAccessPath<FieldRef>[] actual = ap(s("f"), s("f")).getDeltaTo(ap(anyOf("f")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






190




191




192




193




194




		assertArrayEquals(new SubAccessPath[] { anyOf("f") } , actual);
	}
	
	@Test
	public void deltaMatchingMergedField() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






195




		SubAccessPath<FieldRef>[] actual = ap(s("a"), s("b")).getDeltaTo(ap(s("a"), anyOf("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






196




197




198




199




200




201




202




203




204




205




206




207




208




209




210




211




212




213




214




		assertArrayEquals(new SubAccessPath[] { anyOf("b") }, actual);
	}
	
	@Test
	public void prefixOfMergedField() {
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f"), s("h"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f"), s("h")).isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void noPrefixOfMergedField() {
		assertEquals(PrefixTestResult.NO_PREFIX, ap(s("g")).isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.NO_PREFIX, ap(s("g")).isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void prefixOfExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






215




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("f"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






216




217




218




219




220




221




222




223




		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void prefixOfExclusions() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






224




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("f", "g"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






225




226




227




228




229




230




231




232




233




		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void mergedFieldsPrefixOf() {
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap(s("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap(s("g"))));









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






234




235




		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference(f("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference(f("f", "g"))));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






236




237




		
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f"), s("h")).isPrefixOf(ap(s("f"), s("h"))));









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






238




		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).appendExcludedFieldReference(f("f")).isPrefixOf(ap(s("f"), s("h"))));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






239




240




	}
}












H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros

d7cafbe869957687e1f2dca1ed93bc1ce2b92ab2

















d7cafbe869957687e1f2dca1ed93bc1ce2b92ab2


Switch branch/tag










heros


test


heros


alias


AccessPathTest.java



Find file
Normal viewHistoryPermalink






AccessPathTest.java



8.52 KB









Newer










Older









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.*;

import java.util.Set;

import org.junit.Assert;
import org.junit.Test;

import com.google.common.collect.Sets;

import heros.alias.AccessPath.PrefixTestResult;
import heros.alias.SubAccessPath.*;

@SuppressWarnings("unchecked")
public class AccessPathTest {










merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






28




29




	private static FieldRef f(String s) {
		return new FieldRef(s);









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






30




31




	}
	









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






32




33




34




35




36




37




	private static FieldRef[] f(String...s) {
		FieldRef[] result = new FieldRef[s.length];
		for(int i=0; i<s.length; i++) {
			result[i] = f(s[i]);
		}
		return result;









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






38




39




	}
	









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






40




41




42




43




44




45




46




47




48




49




50




51




52




	private static SetOfPossibleFieldAccesses<FieldRef> anyOf(String...fields) {
		Set<FieldRef> set = Sets.newHashSet();
		for(String f : fields)
			set.add(new FieldRef(f));
		return new SetOfPossibleFieldAccesses<FieldRef>(set);
	}
	
	private static SpecificFieldAccess<FieldRef> s(String field) {
		return new SpecificFieldAccess<FieldRef>(new FieldRef(field));
	}
	
	private static AccessPath<FieldRef> ap(SubAccessPath<FieldRef>... path) {
		return new AccessPath<FieldRef>(path, new Set[0]);









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






53




54




55




56




	}
	
	@Test
	public void addAndMergeAll() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






57




58




		AccessPath<FieldRef> sut = AccessPath.<FieldRef>empty().addFieldReference(f("a", "b", "c"));
		assertEquals(ap(anyOf("a","b","c")), sut.addFieldReference(f("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






59




60




61




62




	}

	@Test
	public void addAndMergeSuffix() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






63




64




		AccessPath<FieldRef> sut = AccessPath.<FieldRef>empty().addFieldReference(f("a", "b", "c"));
		assertEquals(ap(s("a"), anyOf("b","c")), sut.addFieldReference(f("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






65




66




67




68




	}
	
	@Test
	public void addWithoutMerge() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






69




70




		AccessPath<FieldRef> sut = ap(s("a"));
		assertEquals(ap(s("a"), s("b")), sut.addFieldReference(f("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






71




72




73




74




	}
	
	@Test
	public void addMergedFields() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






75




		AccessPath<FieldRef> sut = ap(s("a"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






76




77




78




79




80




		assertEquals(ap(anyOf("a")), sut.addFieldReference(anyOf("a")));
	}

	@Test
	public void addMergedFieldsOnExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






81




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






82




83




84




85




86




		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(anyOf("a", "b")));
	}
	
	@Test
	public void addMergedFieldsOnNestedExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






87




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






88




89




90




91




92




		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(anyOf("a", "b")));
	}
	
	@Test
	public void addFieldThatMerges() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






93




94




		AccessPath<FieldRef> sut = ap(s("a"), s("b")).appendExcludedFieldReference(f("c")).appendExcludedFieldReference(f("x"));
		assertEquals(ap(anyOf("a", "b")).appendExcludedFieldReference(f("x")), sut.addFieldReference(s("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






95




96




97




98




	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






99




		AccessPath<FieldRef> sut = ap(s("a"), s("b")).appendExcludedFieldReference(f("c")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






100




101




102




103




104




		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(s("a")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField2() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






105




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






106




107




108




109




110




		assertEquals(ap(anyOf("a", "c")), sut.addFieldReference(anyOf("a","c")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField3() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






111




		AccessPath<FieldRef> sut = ap(s("c")).appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






112




113




114




115




116




		assertEquals(ap(anyOf("c")), sut.addFieldReference(anyOf("c")));
	}
	
	@Test
	public void addOnExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






117




118




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));
		assertEquals(ap(s("b")).appendExcludedFieldReference(f("b")), sut.addFieldReference(s("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






119




120




121




122




	}
	
	@Test
	public void addOnNestedExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






123




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






124




125




126




127




128




		assertEquals(ap(anyOf("a", "c")), sut.addFieldReference(anyOf("a", "c")));
	}

	@Test(expected=IllegalArgumentException.class)
	public void addMergedFieldsOnSingleExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






129




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






130




131




132




133




134




		sut.addFieldReference(anyOf("a"));	
	}
	
	@Test
	public void prependWithoutMerge() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






135




		assertEquals(ap(s("c"), s("a"), s("b")), ap(s("a"), s("b")).prepend(f("c")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






136




137




138




139




	}
	
	@Test
	public void prependWithMerge() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






140




		assertEquals(ap(anyOf("a"), anyOf("b", "c")), ap(s("a"), anyOf("b", "c")).prepend(f("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






141




142




143




144




	}
	
	@Test
	public void prependAndMergeWithSet() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






145




		assertEquals(ap(anyOf("a", "b", "c")), ap(s("a"), anyOf("b", "c")).prepend(f("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






146




147




148




149




	}
	
	@Test
	public void remove() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






150




		assertEquals(ap(s("b")), ap(s("a"), s("b")).removeFirst(f("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






151




152




153




154




	}
	
	@Test
	public void dontRemoveMergedFields() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






155




		assertEquals(ap(anyOf("a", "b")), ap(anyOf("a", "b")).removeFirst(f("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






156




157




158




159




	}
	
	@Test
	public void removeMergedFieldsIfRemovingSuffix() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






160




		assertEquals(ap(), ap(anyOf("a", "b"), s("c")).removeFirst(f("c")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






161




162




163




164




	}
	
	@Test
	public void deltaDepth1() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






165




		SubAccessPath<FieldRef>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), s("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






166




167




168




169




170




		assertArrayEquals(new SubAccessPath[] { s("b") }, actual);
	}
	
	@Test
	public void deltaDepth2() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






171




		SubAccessPath<FieldRef>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), s("b"), s("c")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






172




173




174




175




176




		assertArrayEquals(new SubAccessPath[] { s("b"), s("c") }, actual);
	}
	
	@Test
	public void delta() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






177




		SubAccessPath<FieldRef>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), anyOf("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






178




179




180




181




182




		assertArrayEquals(new SubAccessPath[] { anyOf("b") }, actual);
	}
	
	@Test
	public void delta2() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






183




		SubAccessPath<FieldRef>[] actual = ap(s("f"), s("g"), s("h")).getDeltaTo(ap(anyOf("f", "g"), s("h")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






184




185




186




187




188




		assertArrayEquals(new SubAccessPath[] {  }, actual);
	}
	
	@Test
	public void delta3() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






189




		SubAccessPath<FieldRef>[] actual = ap(s("f"), s("f")).getDeltaTo(ap(anyOf("f")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






190




191




192




193




194




		assertArrayEquals(new SubAccessPath[] { anyOf("f") } , actual);
	}
	
	@Test
	public void deltaMatchingMergedField() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






195




		SubAccessPath<FieldRef>[] actual = ap(s("a"), s("b")).getDeltaTo(ap(s("a"), anyOf("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






196




197




198




199




200




201




202




203




204




205




206




207




208




209




210




211




212




213




214




		assertArrayEquals(new SubAccessPath[] { anyOf("b") }, actual);
	}
	
	@Test
	public void prefixOfMergedField() {
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f"), s("h"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f"), s("h")).isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void noPrefixOfMergedField() {
		assertEquals(PrefixTestResult.NO_PREFIX, ap(s("g")).isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.NO_PREFIX, ap(s("g")).isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void prefixOfExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






215




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("f"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






216




217




218




219




220




221




222




223




		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void prefixOfExclusions() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






224




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("f", "g"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






225




226




227




228




229




230




231




232




233




		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void mergedFieldsPrefixOf() {
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap(s("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap(s("g"))));









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






234




235




		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference(f("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference(f("f", "g"))));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






236




237




		
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f"), s("h")).isPrefixOf(ap(s("f"), s("h"))));









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






238




		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).appendExcludedFieldReference(f("f")).isPrefixOf(ap(s("f"), s("h"))));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






239




240




	}
}











Open sidebar



Joshua Garcia heros

d7cafbe869957687e1f2dca1ed93bc1ce2b92ab2







Open sidebar



Joshua Garcia heros

d7cafbe869957687e1f2dca1ed93bc1ce2b92ab2




Open sidebar

Joshua Garcia heros

d7cafbe869957687e1f2dca1ed93bc1ce2b92ab2


Joshua Garciaherosheros
d7cafbe869957687e1f2dca1ed93bc1ce2b92ab2










d7cafbe869957687e1f2dca1ed93bc1ce2b92ab2


Switch branch/tag










heros


test


heros


alias


AccessPathTest.java



Find file
Normal viewHistoryPermalink






AccessPathTest.java



8.52 KB









Newer










Older









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.*;

import java.util.Set;

import org.junit.Assert;
import org.junit.Test;

import com.google.common.collect.Sets;

import heros.alias.AccessPath.PrefixTestResult;
import heros.alias.SubAccessPath.*;

@SuppressWarnings("unchecked")
public class AccessPathTest {










merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






28




29




	private static FieldRef f(String s) {
		return new FieldRef(s);









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






30




31




	}
	









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






32




33




34




35




36




37




	private static FieldRef[] f(String...s) {
		FieldRef[] result = new FieldRef[s.length];
		for(int i=0; i<s.length; i++) {
			result[i] = f(s[i]);
		}
		return result;









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






38




39




	}
	









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






40




41




42




43




44




45




46




47




48




49




50




51




52




	private static SetOfPossibleFieldAccesses<FieldRef> anyOf(String...fields) {
		Set<FieldRef> set = Sets.newHashSet();
		for(String f : fields)
			set.add(new FieldRef(f));
		return new SetOfPossibleFieldAccesses<FieldRef>(set);
	}
	
	private static SpecificFieldAccess<FieldRef> s(String field) {
		return new SpecificFieldAccess<FieldRef>(new FieldRef(field));
	}
	
	private static AccessPath<FieldRef> ap(SubAccessPath<FieldRef>... path) {
		return new AccessPath<FieldRef>(path, new Set[0]);









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






53




54




55




56




	}
	
	@Test
	public void addAndMergeAll() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






57




58




		AccessPath<FieldRef> sut = AccessPath.<FieldRef>empty().addFieldReference(f("a", "b", "c"));
		assertEquals(ap(anyOf("a","b","c")), sut.addFieldReference(f("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






59




60




61




62




	}

	@Test
	public void addAndMergeSuffix() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






63




64




		AccessPath<FieldRef> sut = AccessPath.<FieldRef>empty().addFieldReference(f("a", "b", "c"));
		assertEquals(ap(s("a"), anyOf("b","c")), sut.addFieldReference(f("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






65




66




67




68




	}
	
	@Test
	public void addWithoutMerge() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






69




70




		AccessPath<FieldRef> sut = ap(s("a"));
		assertEquals(ap(s("a"), s("b")), sut.addFieldReference(f("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






71




72




73




74




	}
	
	@Test
	public void addMergedFields() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






75




		AccessPath<FieldRef> sut = ap(s("a"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






76




77




78




79




80




		assertEquals(ap(anyOf("a")), sut.addFieldReference(anyOf("a")));
	}

	@Test
	public void addMergedFieldsOnExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






81




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






82




83




84




85




86




		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(anyOf("a", "b")));
	}
	
	@Test
	public void addMergedFieldsOnNestedExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






87




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






88




89




90




91




92




		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(anyOf("a", "b")));
	}
	
	@Test
	public void addFieldThatMerges() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






93




94




		AccessPath<FieldRef> sut = ap(s("a"), s("b")).appendExcludedFieldReference(f("c")).appendExcludedFieldReference(f("x"));
		assertEquals(ap(anyOf("a", "b")).appendExcludedFieldReference(f("x")), sut.addFieldReference(s("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






95




96




97




98




	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






99




		AccessPath<FieldRef> sut = ap(s("a"), s("b")).appendExcludedFieldReference(f("c")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






100




101




102




103




104




		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(s("a")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField2() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






105




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






106




107




108




109




110




		assertEquals(ap(anyOf("a", "c")), sut.addFieldReference(anyOf("a","c")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField3() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






111




		AccessPath<FieldRef> sut = ap(s("c")).appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






112




113




114




115




116




		assertEquals(ap(anyOf("c")), sut.addFieldReference(anyOf("c")));
	}
	
	@Test
	public void addOnExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






117




118




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));
		assertEquals(ap(s("b")).appendExcludedFieldReference(f("b")), sut.addFieldReference(s("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






119




120




121




122




	}
	
	@Test
	public void addOnNestedExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






123




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






124




125




126




127




128




		assertEquals(ap(anyOf("a", "c")), sut.addFieldReference(anyOf("a", "c")));
	}

	@Test(expected=IllegalArgumentException.class)
	public void addMergedFieldsOnSingleExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






129




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






130




131




132




133




134




		sut.addFieldReference(anyOf("a"));	
	}
	
	@Test
	public void prependWithoutMerge() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






135




		assertEquals(ap(s("c"), s("a"), s("b")), ap(s("a"), s("b")).prepend(f("c")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






136




137




138




139




	}
	
	@Test
	public void prependWithMerge() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






140




		assertEquals(ap(anyOf("a"), anyOf("b", "c")), ap(s("a"), anyOf("b", "c")).prepend(f("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






141




142




143




144




	}
	
	@Test
	public void prependAndMergeWithSet() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






145




		assertEquals(ap(anyOf("a", "b", "c")), ap(s("a"), anyOf("b", "c")).prepend(f("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






146




147




148




149




	}
	
	@Test
	public void remove() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






150




		assertEquals(ap(s("b")), ap(s("a"), s("b")).removeFirst(f("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






151




152




153




154




	}
	
	@Test
	public void dontRemoveMergedFields() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






155




		assertEquals(ap(anyOf("a", "b")), ap(anyOf("a", "b")).removeFirst(f("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






156




157




158




159




	}
	
	@Test
	public void removeMergedFieldsIfRemovingSuffix() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






160




		assertEquals(ap(), ap(anyOf("a", "b"), s("c")).removeFirst(f("c")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






161




162




163




164




	}
	
	@Test
	public void deltaDepth1() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






165




		SubAccessPath<FieldRef>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), s("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






166




167




168




169




170




		assertArrayEquals(new SubAccessPath[] { s("b") }, actual);
	}
	
	@Test
	public void deltaDepth2() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






171




		SubAccessPath<FieldRef>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), s("b"), s("c")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






172




173




174




175




176




		assertArrayEquals(new SubAccessPath[] { s("b"), s("c") }, actual);
	}
	
	@Test
	public void delta() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






177




		SubAccessPath<FieldRef>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), anyOf("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






178




179




180




181




182




		assertArrayEquals(new SubAccessPath[] { anyOf("b") }, actual);
	}
	
	@Test
	public void delta2() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






183




		SubAccessPath<FieldRef>[] actual = ap(s("f"), s("g"), s("h")).getDeltaTo(ap(anyOf("f", "g"), s("h")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






184




185




186




187




188




		assertArrayEquals(new SubAccessPath[] {  }, actual);
	}
	
	@Test
	public void delta3() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






189




		SubAccessPath<FieldRef>[] actual = ap(s("f"), s("f")).getDeltaTo(ap(anyOf("f")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






190




191




192




193




194




		assertArrayEquals(new SubAccessPath[] { anyOf("f") } , actual);
	}
	
	@Test
	public void deltaMatchingMergedField() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






195




		SubAccessPath<FieldRef>[] actual = ap(s("a"), s("b")).getDeltaTo(ap(s("a"), anyOf("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






196




197




198




199




200




201




202




203




204




205




206




207




208




209




210




211




212




213




214




		assertArrayEquals(new SubAccessPath[] { anyOf("b") }, actual);
	}
	
	@Test
	public void prefixOfMergedField() {
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f"), s("h"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f"), s("h")).isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void noPrefixOfMergedField() {
		assertEquals(PrefixTestResult.NO_PREFIX, ap(s("g")).isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.NO_PREFIX, ap(s("g")).isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void prefixOfExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






215




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("f"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






216




217




218




219




220




221




222




223




		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void prefixOfExclusions() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






224




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("f", "g"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






225




226




227




228




229




230




231




232




233




		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void mergedFieldsPrefixOf() {
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap(s("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap(s("g"))));









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






234




235




		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference(f("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference(f("f", "g"))));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






236




237




		
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f"), s("h")).isPrefixOf(ap(s("f"), s("h"))));









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






238




		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).appendExcludedFieldReference(f("f")).isPrefixOf(ap(s("f"), s("h"))));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






239




240




	}
}














d7cafbe869957687e1f2dca1ed93bc1ce2b92ab2


Switch branch/tag










heros


test


heros


alias


AccessPathTest.java



Find file
Normal viewHistoryPermalink






AccessPathTest.java



8.52 KB









Newer










Older









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.*;

import java.util.Set;

import org.junit.Assert;
import org.junit.Test;

import com.google.common.collect.Sets;

import heros.alias.AccessPath.PrefixTestResult;
import heros.alias.SubAccessPath.*;

@SuppressWarnings("unchecked")
public class AccessPathTest {










merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






28




29




	private static FieldRef f(String s) {
		return new FieldRef(s);









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






30




31




	}
	









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






32




33




34




35




36




37




	private static FieldRef[] f(String...s) {
		FieldRef[] result = new FieldRef[s.length];
		for(int i=0; i<s.length; i++) {
			result[i] = f(s[i]);
		}
		return result;









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






38




39




	}
	









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






40




41




42




43




44




45




46




47




48




49




50




51




52




	private static SetOfPossibleFieldAccesses<FieldRef> anyOf(String...fields) {
		Set<FieldRef> set = Sets.newHashSet();
		for(String f : fields)
			set.add(new FieldRef(f));
		return new SetOfPossibleFieldAccesses<FieldRef>(set);
	}
	
	private static SpecificFieldAccess<FieldRef> s(String field) {
		return new SpecificFieldAccess<FieldRef>(new FieldRef(field));
	}
	
	private static AccessPath<FieldRef> ap(SubAccessPath<FieldRef>... path) {
		return new AccessPath<FieldRef>(path, new Set[0]);









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






53




54




55




56




	}
	
	@Test
	public void addAndMergeAll() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






57




58




		AccessPath<FieldRef> sut = AccessPath.<FieldRef>empty().addFieldReference(f("a", "b", "c"));
		assertEquals(ap(anyOf("a","b","c")), sut.addFieldReference(f("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






59




60




61




62




	}

	@Test
	public void addAndMergeSuffix() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






63




64




		AccessPath<FieldRef> sut = AccessPath.<FieldRef>empty().addFieldReference(f("a", "b", "c"));
		assertEquals(ap(s("a"), anyOf("b","c")), sut.addFieldReference(f("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






65




66




67




68




	}
	
	@Test
	public void addWithoutMerge() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






69




70




		AccessPath<FieldRef> sut = ap(s("a"));
		assertEquals(ap(s("a"), s("b")), sut.addFieldReference(f("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






71




72




73




74




	}
	
	@Test
	public void addMergedFields() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






75




		AccessPath<FieldRef> sut = ap(s("a"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






76




77




78




79




80




		assertEquals(ap(anyOf("a")), sut.addFieldReference(anyOf("a")));
	}

	@Test
	public void addMergedFieldsOnExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






81




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






82




83




84




85




86




		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(anyOf("a", "b")));
	}
	
	@Test
	public void addMergedFieldsOnNestedExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






87




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






88




89




90




91




92




		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(anyOf("a", "b")));
	}
	
	@Test
	public void addFieldThatMerges() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






93




94




		AccessPath<FieldRef> sut = ap(s("a"), s("b")).appendExcludedFieldReference(f("c")).appendExcludedFieldReference(f("x"));
		assertEquals(ap(anyOf("a", "b")).appendExcludedFieldReference(f("x")), sut.addFieldReference(s("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






95




96




97




98




	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






99




		AccessPath<FieldRef> sut = ap(s("a"), s("b")).appendExcludedFieldReference(f("c")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






100




101




102




103




104




		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(s("a")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField2() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






105




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






106




107




108




109




110




		assertEquals(ap(anyOf("a", "c")), sut.addFieldReference(anyOf("a","c")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField3() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






111




		AccessPath<FieldRef> sut = ap(s("c")).appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






112




113




114




115




116




		assertEquals(ap(anyOf("c")), sut.addFieldReference(anyOf("c")));
	}
	
	@Test
	public void addOnExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






117




118




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));
		assertEquals(ap(s("b")).appendExcludedFieldReference(f("b")), sut.addFieldReference(s("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






119




120




121




122




	}
	
	@Test
	public void addOnNestedExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






123




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






124




125




126




127




128




		assertEquals(ap(anyOf("a", "c")), sut.addFieldReference(anyOf("a", "c")));
	}

	@Test(expected=IllegalArgumentException.class)
	public void addMergedFieldsOnSingleExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






129




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






130




131




132




133




134




		sut.addFieldReference(anyOf("a"));	
	}
	
	@Test
	public void prependWithoutMerge() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






135




		assertEquals(ap(s("c"), s("a"), s("b")), ap(s("a"), s("b")).prepend(f("c")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






136




137




138




139




	}
	
	@Test
	public void prependWithMerge() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






140




		assertEquals(ap(anyOf("a"), anyOf("b", "c")), ap(s("a"), anyOf("b", "c")).prepend(f("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






141




142




143




144




	}
	
	@Test
	public void prependAndMergeWithSet() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






145




		assertEquals(ap(anyOf("a", "b", "c")), ap(s("a"), anyOf("b", "c")).prepend(f("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






146




147




148




149




	}
	
	@Test
	public void remove() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






150




		assertEquals(ap(s("b")), ap(s("a"), s("b")).removeFirst(f("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






151




152




153




154




	}
	
	@Test
	public void dontRemoveMergedFields() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






155




		assertEquals(ap(anyOf("a", "b")), ap(anyOf("a", "b")).removeFirst(f("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






156




157




158




159




	}
	
	@Test
	public void removeMergedFieldsIfRemovingSuffix() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






160




		assertEquals(ap(), ap(anyOf("a", "b"), s("c")).removeFirst(f("c")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






161




162




163




164




	}
	
	@Test
	public void deltaDepth1() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






165




		SubAccessPath<FieldRef>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), s("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






166




167




168




169




170




		assertArrayEquals(new SubAccessPath[] { s("b") }, actual);
	}
	
	@Test
	public void deltaDepth2() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






171




		SubAccessPath<FieldRef>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), s("b"), s("c")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






172




173




174




175




176




		assertArrayEquals(new SubAccessPath[] { s("b"), s("c") }, actual);
	}
	
	@Test
	public void delta() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






177




		SubAccessPath<FieldRef>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), anyOf("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






178




179




180




181




182




		assertArrayEquals(new SubAccessPath[] { anyOf("b") }, actual);
	}
	
	@Test
	public void delta2() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






183




		SubAccessPath<FieldRef>[] actual = ap(s("f"), s("g"), s("h")).getDeltaTo(ap(anyOf("f", "g"), s("h")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






184




185




186




187




188




		assertArrayEquals(new SubAccessPath[] {  }, actual);
	}
	
	@Test
	public void delta3() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






189




		SubAccessPath<FieldRef>[] actual = ap(s("f"), s("f")).getDeltaTo(ap(anyOf("f")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






190




191




192




193




194




		assertArrayEquals(new SubAccessPath[] { anyOf("f") } , actual);
	}
	
	@Test
	public void deltaMatchingMergedField() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






195




		SubAccessPath<FieldRef>[] actual = ap(s("a"), s("b")).getDeltaTo(ap(s("a"), anyOf("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






196




197




198




199




200




201




202




203




204




205




206




207




208




209




210




211




212




213




214




		assertArrayEquals(new SubAccessPath[] { anyOf("b") }, actual);
	}
	
	@Test
	public void prefixOfMergedField() {
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f"), s("h"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f"), s("h")).isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void noPrefixOfMergedField() {
		assertEquals(PrefixTestResult.NO_PREFIX, ap(s("g")).isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.NO_PREFIX, ap(s("g")).isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void prefixOfExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






215




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("f"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






216




217




218




219




220




221




222




223




		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void prefixOfExclusions() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






224




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("f", "g"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






225




226




227




228




229




230




231




232




233




		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void mergedFieldsPrefixOf() {
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap(s("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap(s("g"))));









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






234




235




		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference(f("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference(f("f", "g"))));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






236




237




		
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f"), s("h")).isPrefixOf(ap(s("f"), s("h"))));









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






238




		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).appendExcludedFieldReference(f("f")).isPrefixOf(ap(s("f"), s("h"))));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






239




240




	}
}










d7cafbe869957687e1f2dca1ed93bc1ce2b92ab2


Switch branch/tag










heros


test


heros


alias


AccessPathTest.java



Find file
Normal viewHistoryPermalink




d7cafbe869957687e1f2dca1ed93bc1ce2b92ab2


Switch branch/tag










heros


test


heros


alias


AccessPathTest.java





d7cafbe869957687e1f2dca1ed93bc1ce2b92ab2


Switch branch/tag








d7cafbe869957687e1f2dca1ed93bc1ce2b92ab2


Switch branch/tag





d7cafbe869957687e1f2dca1ed93bc1ce2b92ab2

Switch branch/tag





Switch branch/tag



Switch branch/tagSwitch branch/tag
heros

test

heros

alias

AccessPathTest.java
Find file
Normal viewHistoryPermalink




AccessPathTest.java



8.52 KB









Newer










Older









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.*;

import java.util.Set;

import org.junit.Assert;
import org.junit.Test;

import com.google.common.collect.Sets;

import heros.alias.AccessPath.PrefixTestResult;
import heros.alias.SubAccessPath.*;

@SuppressWarnings("unchecked")
public class AccessPathTest {










merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






28




29




	private static FieldRef f(String s) {
		return new FieldRef(s);









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






30




31




	}
	









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






32




33




34




35




36




37




	private static FieldRef[] f(String...s) {
		FieldRef[] result = new FieldRef[s.length];
		for(int i=0; i<s.length; i++) {
			result[i] = f(s[i]);
		}
		return result;









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






38




39




	}
	









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






40




41




42




43




44




45




46




47




48




49




50




51




52




	private static SetOfPossibleFieldAccesses<FieldRef> anyOf(String...fields) {
		Set<FieldRef> set = Sets.newHashSet();
		for(String f : fields)
			set.add(new FieldRef(f));
		return new SetOfPossibleFieldAccesses<FieldRef>(set);
	}
	
	private static SpecificFieldAccess<FieldRef> s(String field) {
		return new SpecificFieldAccess<FieldRef>(new FieldRef(field));
	}
	
	private static AccessPath<FieldRef> ap(SubAccessPath<FieldRef>... path) {
		return new AccessPath<FieldRef>(path, new Set[0]);









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






53




54




55




56




	}
	
	@Test
	public void addAndMergeAll() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






57




58




		AccessPath<FieldRef> sut = AccessPath.<FieldRef>empty().addFieldReference(f("a", "b", "c"));
		assertEquals(ap(anyOf("a","b","c")), sut.addFieldReference(f("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






59




60




61




62




	}

	@Test
	public void addAndMergeSuffix() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






63




64




		AccessPath<FieldRef> sut = AccessPath.<FieldRef>empty().addFieldReference(f("a", "b", "c"));
		assertEquals(ap(s("a"), anyOf("b","c")), sut.addFieldReference(f("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






65




66




67




68




	}
	
	@Test
	public void addWithoutMerge() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






69




70




		AccessPath<FieldRef> sut = ap(s("a"));
		assertEquals(ap(s("a"), s("b")), sut.addFieldReference(f("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






71




72




73




74




	}
	
	@Test
	public void addMergedFields() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






75




		AccessPath<FieldRef> sut = ap(s("a"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






76




77




78




79




80




		assertEquals(ap(anyOf("a")), sut.addFieldReference(anyOf("a")));
	}

	@Test
	public void addMergedFieldsOnExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






81




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






82




83




84




85




86




		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(anyOf("a", "b")));
	}
	
	@Test
	public void addMergedFieldsOnNestedExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






87




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






88




89




90




91




92




		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(anyOf("a", "b")));
	}
	
	@Test
	public void addFieldThatMerges() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






93




94




		AccessPath<FieldRef> sut = ap(s("a"), s("b")).appendExcludedFieldReference(f("c")).appendExcludedFieldReference(f("x"));
		assertEquals(ap(anyOf("a", "b")).appendExcludedFieldReference(f("x")), sut.addFieldReference(s("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






95




96




97




98




	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






99




		AccessPath<FieldRef> sut = ap(s("a"), s("b")).appendExcludedFieldReference(f("c")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






100




101




102




103




104




		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(s("a")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField2() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






105




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






106




107




108




109




110




		assertEquals(ap(anyOf("a", "c")), sut.addFieldReference(anyOf("a","c")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField3() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






111




		AccessPath<FieldRef> sut = ap(s("c")).appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






112




113




114




115




116




		assertEquals(ap(anyOf("c")), sut.addFieldReference(anyOf("c")));
	}
	
	@Test
	public void addOnExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






117




118




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));
		assertEquals(ap(s("b")).appendExcludedFieldReference(f("b")), sut.addFieldReference(s("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






119




120




121




122




	}
	
	@Test
	public void addOnNestedExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






123




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






124




125




126




127




128




		assertEquals(ap(anyOf("a", "c")), sut.addFieldReference(anyOf("a", "c")));
	}

	@Test(expected=IllegalArgumentException.class)
	public void addMergedFieldsOnSingleExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






129




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






130




131




132




133




134




		sut.addFieldReference(anyOf("a"));	
	}
	
	@Test
	public void prependWithoutMerge() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






135




		assertEquals(ap(s("c"), s("a"), s("b")), ap(s("a"), s("b")).prepend(f("c")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






136




137




138




139




	}
	
	@Test
	public void prependWithMerge() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






140




		assertEquals(ap(anyOf("a"), anyOf("b", "c")), ap(s("a"), anyOf("b", "c")).prepend(f("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






141




142




143




144




	}
	
	@Test
	public void prependAndMergeWithSet() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






145




		assertEquals(ap(anyOf("a", "b", "c")), ap(s("a"), anyOf("b", "c")).prepend(f("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






146




147




148




149




	}
	
	@Test
	public void remove() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






150




		assertEquals(ap(s("b")), ap(s("a"), s("b")).removeFirst(f("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






151




152




153




154




	}
	
	@Test
	public void dontRemoveMergedFields() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






155




		assertEquals(ap(anyOf("a", "b")), ap(anyOf("a", "b")).removeFirst(f("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






156




157




158




159




	}
	
	@Test
	public void removeMergedFieldsIfRemovingSuffix() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






160




		assertEquals(ap(), ap(anyOf("a", "b"), s("c")).removeFirst(f("c")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






161




162




163




164




	}
	
	@Test
	public void deltaDepth1() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






165




		SubAccessPath<FieldRef>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), s("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






166




167




168




169




170




		assertArrayEquals(new SubAccessPath[] { s("b") }, actual);
	}
	
	@Test
	public void deltaDepth2() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






171




		SubAccessPath<FieldRef>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), s("b"), s("c")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






172




173




174




175




176




		assertArrayEquals(new SubAccessPath[] { s("b"), s("c") }, actual);
	}
	
	@Test
	public void delta() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






177




		SubAccessPath<FieldRef>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), anyOf("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






178




179




180




181




182




		assertArrayEquals(new SubAccessPath[] { anyOf("b") }, actual);
	}
	
	@Test
	public void delta2() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






183




		SubAccessPath<FieldRef>[] actual = ap(s("f"), s("g"), s("h")).getDeltaTo(ap(anyOf("f", "g"), s("h")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






184




185




186




187




188




		assertArrayEquals(new SubAccessPath[] {  }, actual);
	}
	
	@Test
	public void delta3() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






189




		SubAccessPath<FieldRef>[] actual = ap(s("f"), s("f")).getDeltaTo(ap(anyOf("f")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






190




191




192




193




194




		assertArrayEquals(new SubAccessPath[] { anyOf("f") } , actual);
	}
	
	@Test
	public void deltaMatchingMergedField() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






195




		SubAccessPath<FieldRef>[] actual = ap(s("a"), s("b")).getDeltaTo(ap(s("a"), anyOf("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






196




197




198




199




200




201




202




203




204




205




206




207




208




209




210




211




212




213




214




		assertArrayEquals(new SubAccessPath[] { anyOf("b") }, actual);
	}
	
	@Test
	public void prefixOfMergedField() {
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f"), s("h"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f"), s("h")).isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void noPrefixOfMergedField() {
		assertEquals(PrefixTestResult.NO_PREFIX, ap(s("g")).isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.NO_PREFIX, ap(s("g")).isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void prefixOfExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






215




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("f"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






216




217




218




219




220




221




222




223




		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void prefixOfExclusions() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






224




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("f", "g"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






225




226




227




228




229




230




231




232




233




		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void mergedFieldsPrefixOf() {
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap(s("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap(s("g"))));









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






234




235




		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference(f("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference(f("f", "g"))));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






236




237




		
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f"), s("h")).isPrefixOf(ap(s("f"), s("h"))));









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






238




		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).appendExcludedFieldReference(f("f")).isPrefixOf(ap(s("f"), s("h"))));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






239




240




	}
}








AccessPathTest.java



8.52 KB










AccessPathTest.java



8.52 KB









Newer










Older
NewerOlder







regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.*;

import java.util.Set;

import org.junit.Assert;
import org.junit.Test;

import com.google.common.collect.Sets;

import heros.alias.AccessPath.PrefixTestResult;
import heros.alias.SubAccessPath.*;

@SuppressWarnings("unchecked")
public class AccessPathTest {










merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






28




29




	private static FieldRef f(String s) {
		return new FieldRef(s);









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






30




31




	}
	









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






32




33




34




35




36




37




	private static FieldRef[] f(String...s) {
		FieldRef[] result = new FieldRef[s.length];
		for(int i=0; i<s.length; i++) {
			result[i] = f(s[i]);
		}
		return result;









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






38




39




	}
	









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






40




41




42




43




44




45




46




47




48




49




50




51




52




	private static SetOfPossibleFieldAccesses<FieldRef> anyOf(String...fields) {
		Set<FieldRef> set = Sets.newHashSet();
		for(String f : fields)
			set.add(new FieldRef(f));
		return new SetOfPossibleFieldAccesses<FieldRef>(set);
	}
	
	private static SpecificFieldAccess<FieldRef> s(String field) {
		return new SpecificFieldAccess<FieldRef>(new FieldRef(field));
	}
	
	private static AccessPath<FieldRef> ap(SubAccessPath<FieldRef>... path) {
		return new AccessPath<FieldRef>(path, new Set[0]);









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






53




54




55




56




	}
	
	@Test
	public void addAndMergeAll() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






57




58




		AccessPath<FieldRef> sut = AccessPath.<FieldRef>empty().addFieldReference(f("a", "b", "c"));
		assertEquals(ap(anyOf("a","b","c")), sut.addFieldReference(f("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






59




60




61




62




	}

	@Test
	public void addAndMergeSuffix() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






63




64




		AccessPath<FieldRef> sut = AccessPath.<FieldRef>empty().addFieldReference(f("a", "b", "c"));
		assertEquals(ap(s("a"), anyOf("b","c")), sut.addFieldReference(f("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






65




66




67




68




	}
	
	@Test
	public void addWithoutMerge() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






69




70




		AccessPath<FieldRef> sut = ap(s("a"));
		assertEquals(ap(s("a"), s("b")), sut.addFieldReference(f("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






71




72




73




74




	}
	
	@Test
	public void addMergedFields() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






75




		AccessPath<FieldRef> sut = ap(s("a"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






76




77




78




79




80




		assertEquals(ap(anyOf("a")), sut.addFieldReference(anyOf("a")));
	}

	@Test
	public void addMergedFieldsOnExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






81




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






82




83




84




85




86




		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(anyOf("a", "b")));
	}
	
	@Test
	public void addMergedFieldsOnNestedExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






87




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






88




89




90




91




92




		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(anyOf("a", "b")));
	}
	
	@Test
	public void addFieldThatMerges() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






93




94




		AccessPath<FieldRef> sut = ap(s("a"), s("b")).appendExcludedFieldReference(f("c")).appendExcludedFieldReference(f("x"));
		assertEquals(ap(anyOf("a", "b")).appendExcludedFieldReference(f("x")), sut.addFieldReference(s("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






95




96




97




98




	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






99




		AccessPath<FieldRef> sut = ap(s("a"), s("b")).appendExcludedFieldReference(f("c")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






100




101




102




103




104




		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(s("a")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField2() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






105




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






106




107




108




109




110




		assertEquals(ap(anyOf("a", "c")), sut.addFieldReference(anyOf("a","c")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField3() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






111




		AccessPath<FieldRef> sut = ap(s("c")).appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






112




113




114




115




116




		assertEquals(ap(anyOf("c")), sut.addFieldReference(anyOf("c")));
	}
	
	@Test
	public void addOnExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






117




118




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));
		assertEquals(ap(s("b")).appendExcludedFieldReference(f("b")), sut.addFieldReference(s("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






119




120




121




122




	}
	
	@Test
	public void addOnNestedExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






123




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






124




125




126




127




128




		assertEquals(ap(anyOf("a", "c")), sut.addFieldReference(anyOf("a", "c")));
	}

	@Test(expected=IllegalArgumentException.class)
	public void addMergedFieldsOnSingleExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






129




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






130




131




132




133




134




		sut.addFieldReference(anyOf("a"));	
	}
	
	@Test
	public void prependWithoutMerge() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






135




		assertEquals(ap(s("c"), s("a"), s("b")), ap(s("a"), s("b")).prepend(f("c")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






136




137




138




139




	}
	
	@Test
	public void prependWithMerge() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






140




		assertEquals(ap(anyOf("a"), anyOf("b", "c")), ap(s("a"), anyOf("b", "c")).prepend(f("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






141




142




143




144




	}
	
	@Test
	public void prependAndMergeWithSet() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






145




		assertEquals(ap(anyOf("a", "b", "c")), ap(s("a"), anyOf("b", "c")).prepend(f("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






146




147




148




149




	}
	
	@Test
	public void remove() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






150




		assertEquals(ap(s("b")), ap(s("a"), s("b")).removeFirst(f("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






151




152




153




154




	}
	
	@Test
	public void dontRemoveMergedFields() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






155




		assertEquals(ap(anyOf("a", "b")), ap(anyOf("a", "b")).removeFirst(f("a")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






156




157




158




159




	}
	
	@Test
	public void removeMergedFieldsIfRemovingSuffix() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






160




		assertEquals(ap(), ap(anyOf("a", "b"), s("c")).removeFirst(f("c")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






161




162




163




164




	}
	
	@Test
	public void deltaDepth1() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






165




		SubAccessPath<FieldRef>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), s("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






166




167




168




169




170




		assertArrayEquals(new SubAccessPath[] { s("b") }, actual);
	}
	
	@Test
	public void deltaDepth2() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






171




		SubAccessPath<FieldRef>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), s("b"), s("c")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






172




173




174




175




176




		assertArrayEquals(new SubAccessPath[] { s("b"), s("c") }, actual);
	}
	
	@Test
	public void delta() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






177




		SubAccessPath<FieldRef>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), anyOf("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






178




179




180




181




182




		assertArrayEquals(new SubAccessPath[] { anyOf("b") }, actual);
	}
	
	@Test
	public void delta2() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






183




		SubAccessPath<FieldRef>[] actual = ap(s("f"), s("g"), s("h")).getDeltaTo(ap(anyOf("f", "g"), s("h")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






184




185




186




187




188




		assertArrayEquals(new SubAccessPath[] {  }, actual);
	}
	
	@Test
	public void delta3() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






189




		SubAccessPath<FieldRef>[] actual = ap(s("f"), s("f")).getDeltaTo(ap(anyOf("f")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






190




191




192




193




194




		assertArrayEquals(new SubAccessPath[] { anyOf("f") } , actual);
	}
	
	@Test
	public void deltaMatchingMergedField() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






195




		SubAccessPath<FieldRef>[] actual = ap(s("a"), s("b")).getDeltaTo(ap(s("a"), anyOf("b")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






196




197




198




199




200




201




202




203




204




205




206




207




208




209




210




211




212




213




214




		assertArrayEquals(new SubAccessPath[] { anyOf("b") }, actual);
	}
	
	@Test
	public void prefixOfMergedField() {
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f"), s("h"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f"), s("h")).isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void noPrefixOfMergedField() {
		assertEquals(PrefixTestResult.NO_PREFIX, ap(s("g")).isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.NO_PREFIX, ap(s("g")).isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void prefixOfExclusion() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






215




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("f"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






216




217




218




219




220




221




222




223




		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void prefixOfExclusions() {









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






224




		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("f", "g"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






225




226




227




228




229




230




231




232




233




		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void mergedFieldsPrefixOf() {
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap(s("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap(s("g"))));









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






234




235




		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference(f("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference(f("f", "g"))));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






236




237




		
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f"), s("h")).isPrefixOf(ap(s("f"), s("h"))));









merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015






238




		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).appendExcludedFieldReference(f("f")).isPrefixOf(ap(s("f"), s("h"))));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






239




240




	}
}







regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27
/*******************************************************************************/******************************************************************************* * Copyright (c) 2015 Johannes Lerch. * Copyright (c) 2015 Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;import static org.junit.Assert.*;importstaticorg.junit.Assert.*;import java.util.Set;importjava.util.Set;import org.junit.Assert;importorg.junit.Assert;import org.junit.Test;importorg.junit.Test;import com.google.common.collect.Sets;importcom.google.common.collect.Sets;import heros.alias.AccessPath.PrefixTestResult;importheros.alias.AccessPath.PrefixTestResult;import heros.alias.SubAccessPath.*;importheros.alias.SubAccessPath.*;@SuppressWarnings("unchecked")@SuppressWarnings("unchecked")public class AccessPathTest {publicclassAccessPathTest{



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

28

29
	private static FieldRef f(String s) {privatestaticFieldReff(Strings){		return new FieldRef(s);returnnewFieldRef(s);



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

30

31
	}}	



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

32

33

34

35

36

37
	private static FieldRef[] f(String...s) {privatestaticFieldRef[]f(String...s){		FieldRef[] result = new FieldRef[s.length];FieldRef[]result=newFieldRef[s.length];		for(int i=0; i<s.length; i++) {for(inti=0;i<s.length;i++){			result[i] = f(s[i]);result[i]=f(s[i]);		}}		return result;returnresult;



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

38

39
	}}	



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

40

41

42

43

44

45

46

47

48

49

50

51

52
	private static SetOfPossibleFieldAccesses<FieldRef> anyOf(String...fields) {privatestaticSetOfPossibleFieldAccesses<FieldRef>anyOf(String...fields){		Set<FieldRef> set = Sets.newHashSet();Set<FieldRef>set=Sets.newHashSet();		for(String f : fields)for(Stringf:fields)			set.add(new FieldRef(f));set.add(newFieldRef(f));		return new SetOfPossibleFieldAccesses<FieldRef>(set);returnnewSetOfPossibleFieldAccesses<FieldRef>(set);	}}		private static SpecificFieldAccess<FieldRef> s(String field) {privatestaticSpecificFieldAccess<FieldRef>s(Stringfield){		return new SpecificFieldAccess<FieldRef>(new FieldRef(field));returnnewSpecificFieldAccess<FieldRef>(newFieldRef(field));	}}		private static AccessPath<FieldRef> ap(SubAccessPath<FieldRef>... path) {privatestaticAccessPath<FieldRef>ap(SubAccessPath<FieldRef>...path){		return new AccessPath<FieldRef>(path, new Set[0]);returnnewAccessPath<FieldRef>(path,newSet[0]);



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

53

54

55

56
	}}		@Test@Test	public void addAndMergeAll() {publicvoidaddAndMergeAll(){



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

57

58
		AccessPath<FieldRef> sut = AccessPath.<FieldRef>empty().addFieldReference(f("a", "b", "c"));AccessPath<FieldRef>sut=AccessPath.<FieldRef>empty().addFieldReference(f("a","b","c"));		assertEquals(ap(anyOf("a","b","c")), sut.addFieldReference(f("a")));assertEquals(ap(anyOf("a","b","c")),sut.addFieldReference(f("a")));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

59

60

61

62
	}}	@Test@Test	public void addAndMergeSuffix() {publicvoidaddAndMergeSuffix(){



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

63

64
		AccessPath<FieldRef> sut = AccessPath.<FieldRef>empty().addFieldReference(f("a", "b", "c"));AccessPath<FieldRef>sut=AccessPath.<FieldRef>empty().addFieldReference(f("a","b","c"));		assertEquals(ap(s("a"), anyOf("b","c")), sut.addFieldReference(f("b")));assertEquals(ap(s("a"),anyOf("b","c")),sut.addFieldReference(f("b")));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

65

66

67

68
	}}		@Test@Test	public void addWithoutMerge() {publicvoidaddWithoutMerge(){



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

69

70
		AccessPath<FieldRef> sut = ap(s("a"));AccessPath<FieldRef>sut=ap(s("a"));		assertEquals(ap(s("a"), s("b")), sut.addFieldReference(f("b")));assertEquals(ap(s("a"),s("b")),sut.addFieldReference(f("b")));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

71

72

73

74
	}}		@Test@Test	public void addMergedFields() {publicvoidaddMergedFields(){



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

75
		AccessPath<FieldRef> sut = ap(s("a"));AccessPath<FieldRef>sut=ap(s("a"));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

76

77

78

79

80
		assertEquals(ap(anyOf("a")), sut.addFieldReference(anyOf("a")));assertEquals(ap(anyOf("a")),sut.addFieldReference(anyOf("a")));	}}	@Test@Test	public void addMergedFieldsOnExclusion() {publicvoidaddMergedFieldsOnExclusion(){



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

81
		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a"));AccessPath<FieldRef>sut=ap().appendExcludedFieldReference(f("a"));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

82

83

84

85

86
		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(anyOf("a", "b")));assertEquals(ap(anyOf("a","b")),sut.addFieldReference(anyOf("a","b")));	}}		@Test@Test	public void addMergedFieldsOnNestedExclusion() {publicvoidaddMergedFieldsOnNestedExclusion(){



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

87
		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));AccessPath<FieldRef>sut=ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

88

89

90

91

92
		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(anyOf("a", "b")));assertEquals(ap(anyOf("a","b")),sut.addFieldReference(anyOf("a","b")));	}}		@Test@Test	public void addFieldThatMerges() {publicvoidaddFieldThatMerges(){



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

93

94
		AccessPath<FieldRef> sut = ap(s("a"), s("b")).appendExcludedFieldReference(f("c")).appendExcludedFieldReference(f("x"));AccessPath<FieldRef>sut=ap(s("a"),s("b")).appendExcludedFieldReference(f("c")).appendExcludedFieldReference(f("x"));		assertEquals(ap(anyOf("a", "b")).appendExcludedFieldReference(f("x")), sut.addFieldReference(s("a")));assertEquals(ap(anyOf("a","b")).appendExcludedFieldReference(f("x")),sut.addFieldReference(s("a")));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

95

96

97

98
	}}		@Test@Test	public void addFieldThatMergesResultingInExclusionOfMergedField() {publicvoidaddFieldThatMergesResultingInExclusionOfMergedField(){



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

99
		AccessPath<FieldRef> sut = ap(s("a"), s("b")).appendExcludedFieldReference(f("c")).appendExcludedFieldReference(f("b"));AccessPath<FieldRef>sut=ap(s("a"),s("b")).appendExcludedFieldReference(f("c")).appendExcludedFieldReference(f("b"));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

100

101

102

103

104
		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(s("a")));assertEquals(ap(anyOf("a","b")),sut.addFieldReference(s("a")));	}}		@Test@Test	public void addFieldThatMergesResultingInExclusionOfMergedField2() {publicvoidaddFieldThatMergesResultingInExclusionOfMergedField2(){



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

105
		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));AccessPath<FieldRef>sut=ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

106

107

108

109

110
		assertEquals(ap(anyOf("a", "c")), sut.addFieldReference(anyOf("a","c")));assertEquals(ap(anyOf("a","c")),sut.addFieldReference(anyOf("a","c")));	}}		@Test@Test	public void addFieldThatMergesResultingInExclusionOfMergedField3() {publicvoidaddFieldThatMergesResultingInExclusionOfMergedField3(){



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

111
		AccessPath<FieldRef> sut = ap(s("c")).appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));AccessPath<FieldRef>sut=ap(s("c")).appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

112

113

114

115

116
		assertEquals(ap(anyOf("c")), sut.addFieldReference(anyOf("c")));assertEquals(ap(anyOf("c")),sut.addFieldReference(anyOf("c")));	}}		@Test@Test	public void addOnExclusion() {publicvoidaddOnExclusion(){



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

117

118
		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));AccessPath<FieldRef>sut=ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));		assertEquals(ap(s("b")).appendExcludedFieldReference(f("b")), sut.addFieldReference(s("b")));assertEquals(ap(s("b")).appendExcludedFieldReference(f("b")),sut.addFieldReference(s("b")));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

119

120

121

122
	}}		@Test@Test	public void addOnNestedExclusion() {publicvoidaddOnNestedExclusion(){



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

123
		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));AccessPath<FieldRef>sut=ap().appendExcludedFieldReference(f("a")).appendExcludedFieldReference(f("b"));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

124

125

126

127

128
		assertEquals(ap(anyOf("a", "c")), sut.addFieldReference(anyOf("a", "c")));assertEquals(ap(anyOf("a","c")),sut.addFieldReference(anyOf("a","c")));	}}	@Test(expected=IllegalArgumentException.class)@Test(expected=IllegalArgumentException.class)	public void addMergedFieldsOnSingleExclusion() {publicvoidaddMergedFieldsOnSingleExclusion(){



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

129
		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("a"));AccessPath<FieldRef>sut=ap().appendExcludedFieldReference(f("a"));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

130

131

132

133

134
		sut.addFieldReference(anyOf("a"));	sut.addFieldReference(anyOf("a"));	}}		@Test@Test	public void prependWithoutMerge() {publicvoidprependWithoutMerge(){



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

135
		assertEquals(ap(s("c"), s("a"), s("b")), ap(s("a"), s("b")).prepend(f("c")));assertEquals(ap(s("c"),s("a"),s("b")),ap(s("a"),s("b")).prepend(f("c")));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

136

137

138

139
	}}		@Test@Test	public void prependWithMerge() {publicvoidprependWithMerge(){



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

140
		assertEquals(ap(anyOf("a"), anyOf("b", "c")), ap(s("a"), anyOf("b", "c")).prepend(f("a")));assertEquals(ap(anyOf("a"),anyOf("b","c")),ap(s("a"),anyOf("b","c")).prepend(f("a")));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

141

142

143

144
	}}		@Test@Test	public void prependAndMergeWithSet() {publicvoidprependAndMergeWithSet(){



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

145
		assertEquals(ap(anyOf("a", "b", "c")), ap(s("a"), anyOf("b", "c")).prepend(f("b")));assertEquals(ap(anyOf("a","b","c")),ap(s("a"),anyOf("b","c")).prepend(f("b")));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

146

147

148

149
	}}		@Test@Test	public void remove() {publicvoidremove(){



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

150
		assertEquals(ap(s("b")), ap(s("a"), s("b")).removeFirst(f("a")));assertEquals(ap(s("b")),ap(s("a"),s("b")).removeFirst(f("a")));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

151

152

153

154
	}}		@Test@Test	public void dontRemoveMergedFields() {publicvoiddontRemoveMergedFields(){



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

155
		assertEquals(ap(anyOf("a", "b")), ap(anyOf("a", "b")).removeFirst(f("a")));assertEquals(ap(anyOf("a","b")),ap(anyOf("a","b")).removeFirst(f("a")));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

156

157

158

159
	}}		@Test@Test	public void removeMergedFieldsIfRemovingSuffix() {publicvoidremoveMergedFieldsIfRemovingSuffix(){



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

160
		assertEquals(ap(), ap(anyOf("a", "b"), s("c")).removeFirst(f("c")));assertEquals(ap(),ap(anyOf("a","b"),s("c")).removeFirst(f("c")));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

161

162

163

164
	}}		@Test@Test	public void deltaDepth1() {publicvoiddeltaDepth1(){



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

165
		SubAccessPath<FieldRef>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), s("b")));SubAccessPath<FieldRef>[]actual=ap(s("a")).getDeltaTo(ap(s("a"),s("b")));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

166

167

168

169

170
		assertArrayEquals(new SubAccessPath[] { s("b") }, actual);assertArrayEquals(newSubAccessPath[]{s("b")},actual);	}}		@Test@Test	public void deltaDepth2() {publicvoiddeltaDepth2(){



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

171
		SubAccessPath<FieldRef>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), s("b"), s("c")));SubAccessPath<FieldRef>[]actual=ap(s("a")).getDeltaTo(ap(s("a"),s("b"),s("c")));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

172

173

174

175

176
		assertArrayEquals(new SubAccessPath[] { s("b"), s("c") }, actual);assertArrayEquals(newSubAccessPath[]{s("b"),s("c")},actual);	}}		@Test@Test	public void delta() {publicvoiddelta(){



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

177
		SubAccessPath<FieldRef>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), anyOf("b")));SubAccessPath<FieldRef>[]actual=ap(s("a")).getDeltaTo(ap(s("a"),anyOf("b")));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

178

179

180

181

182
		assertArrayEquals(new SubAccessPath[] { anyOf("b") }, actual);assertArrayEquals(newSubAccessPath[]{anyOf("b")},actual);	}}		@Test@Test	public void delta2() {publicvoiddelta2(){



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

183
		SubAccessPath<FieldRef>[] actual = ap(s("f"), s("g"), s("h")).getDeltaTo(ap(anyOf("f", "g"), s("h")));SubAccessPath<FieldRef>[]actual=ap(s("f"),s("g"),s("h")).getDeltaTo(ap(anyOf("f","g"),s("h")));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

184

185

186

187

188
		assertArrayEquals(new SubAccessPath[] {  }, actual);assertArrayEquals(newSubAccessPath[]{},actual);	}}		@Test@Test	public void delta3() {publicvoiddelta3(){



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

189
		SubAccessPath<FieldRef>[] actual = ap(s("f"), s("f")).getDeltaTo(ap(anyOf("f")));SubAccessPath<FieldRef>[]actual=ap(s("f"),s("f")).getDeltaTo(ap(anyOf("f")));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

190

191

192

193

194
		assertArrayEquals(new SubAccessPath[] { anyOf("f") } , actual);assertArrayEquals(newSubAccessPath[]{anyOf("f")},actual);	}}		@Test@Test	public void deltaMatchingMergedField() {publicvoiddeltaMatchingMergedField(){



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

195
		SubAccessPath<FieldRef>[] actual = ap(s("a"), s("b")).getDeltaTo(ap(s("a"), anyOf("b")));SubAccessPath<FieldRef>[]actual=ap(s("a"),s("b")).getDeltaTo(ap(s("a"),anyOf("b")));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

196

197

198

199

200

201

202

203

204

205

206

207

208

209

210

211

212

213

214
		assertArrayEquals(new SubAccessPath[] { anyOf("b") }, actual);assertArrayEquals(newSubAccessPath[]{anyOf("b")},actual);	}}		@Test@Test	public void prefixOfMergedField() {publicvoidprefixOfMergedField(){		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f"))));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,ap(s("f")).isPrefixOf(ap(anyOf("f"))));		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f", "g"))));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,ap(s("f")).isPrefixOf(ap(anyOf("f","g"))));		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f"), s("h"))));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,ap(s("f")).isPrefixOf(ap(anyOf("f"),s("h"))));		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f"), s("h")).isPrefixOf(ap(anyOf("f"), s("h"))));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,ap(s("f"),s("h")).isPrefixOf(ap(anyOf("f"),s("h"))));	}}		@Test@Test	public void noPrefixOfMergedField() {publicvoidnoPrefixOfMergedField(){		assertEquals(PrefixTestResult.NO_PREFIX, ap(s("g")).isPrefixOf(ap(anyOf("f"))));assertEquals(PrefixTestResult.NO_PREFIX,ap(s("g")).isPrefixOf(ap(anyOf("f"))));		assertEquals(PrefixTestResult.NO_PREFIX, ap(s("g")).isPrefixOf(ap(anyOf("f"), s("h"))));assertEquals(PrefixTestResult.NO_PREFIX,ap(s("g")).isPrefixOf(ap(anyOf("f"),s("h"))));	}}		@Test@Test	public void prefixOfExclusion() {publicvoidprefixOfExclusion(){



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

215
		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("f"));AccessPath<FieldRef>sut=ap().appendExcludedFieldReference(f("f"));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

216

217

218

219

220

221

222

223
		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f"))));assertEquals(PrefixTestResult.NO_PREFIX,sut.isPrefixOf(ap(anyOf("f"))));		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f", "g"))));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,sut.isPrefixOf(ap(anyOf("f","g"))));		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("g"))));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,sut.isPrefixOf(ap(anyOf("g"))));		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f"), s("h"))));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,sut.isPrefixOf(ap(anyOf("f"),s("h"))));	}}		@Test@Test	public void prefixOfExclusions() {publicvoidprefixOfExclusions(){



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

224
		AccessPath<FieldRef> sut = ap().appendExcludedFieldReference(f("f", "g"));AccessPath<FieldRef>sut=ap().appendExcludedFieldReference(f("f","g"));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

225

226

227

228

229

230

231

232

233
		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f"))));assertEquals(PrefixTestResult.NO_PREFIX,sut.isPrefixOf(ap(anyOf("f"))));		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f", "g"))));assertEquals(PrefixTestResult.NO_PREFIX,sut.isPrefixOf(ap(anyOf("f","g"))));		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f"), s("h"))));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,sut.isPrefixOf(ap(anyOf("f"),s("h"))));	}}		@Test@Test	public void mergedFieldsPrefixOf() {publicvoidmergedFieldsPrefixOf(){		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap(s("f"))));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,ap(anyOf("f")).isPrefixOf(ap(s("f"))));		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap(s("g"))));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,ap(anyOf("f")).isPrefixOf(ap(s("g"))));



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

234

235
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference(f("f"))));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference(f("f"))));		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference(f("f", "g"))));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference(f("f","g"))));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

236

237
				assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f"), s("h")).isPrefixOf(ap(s("f"), s("h"))));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,ap(anyOf("f"),s("h")).isPrefixOf(ap(s("f"),s("h"))));



merge only on equal field types


 

 


Johannes Lerch
committed
Feb 05, 2015



merge only on equal field types


 

 

merge only on equal field types

 

Johannes Lerch
committed
Feb 05, 2015

238
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).appendExcludedFieldReference(f("f")).isPrefixOf(ap(s("f"), s("h"))));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,ap(anyOf("f")).appendExcludedFieldReference(f("f")).isPrefixOf(ap(s("f"),s("h"))));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

239

240
	}}}}





