



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

d9ac548b















Commit
d9ac548b


authored
Oct 18, 2013
by


Eric Bodden



Browse files




added a PathTrackingIFDSSolver which implements the keeping track of paths;

modified BiDiIFDSSolver such that it extends this solver; this is necessary because the BiDi-operations must occur before (!) the caching; otherwise the path constructions may miss paths






parent
659ba86a













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ d9ac548b






......@@ -15,7 +15,7 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.SummarizableAbstraction;










import heros.solver.PathTrackingIFDSSolver.LinkedNode;





















import java.util.Collections;










import java.util.HashMap;



......@@ -36,16 +36,20 @@ import java.util.concurrent.TimeUnit;









 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 * 










 * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * reportable paths.  










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> see {@link IFDSSolver}










 * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * 				reportable paths.










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;



......@@ -57,8 +61,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 



......@@ -80,27 +84,27 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> problem, String debugName) {










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>>();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {










 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt> edge) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();



......@@ -112,9 +116,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PathEdge<N,AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt>>();










 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);



......@@ -127,13 +131,13 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }










 










 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 protected void propagate(AbstractionWithSourceStmt sourceVal, N target, AbstractionWithSourceStmt targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(), relatedCallSite);










 targetVal = new AbstractionWithSourceStmt(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 



......@@ -153,9 +157,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PathEdge<N, AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(DEBUG)










 System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge);










 super.processExit(pausedEdge);



......@@ -180,7 +184,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public static class AbstractionWithSourceStmt<N,D> implements SummarizableAbstraction<AbstractionWithSourceStmt<N, D>> {










 public class AbstractionWithSourceStmt implements PathTrackingIFDSSolver.LinkedNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;



......@@ -215,7 +219,6 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return result;










 }





















 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)



......@@ -224,6 +227,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)



......@@ -238,100 +242,82 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return true;










 }





















 @SuppressWarnings("unchecked")










 @Override










 public SummarizableAbstraction<AbstractionWithSourceStmt<N, D>> summarize() {










 D abs = abstraction;










 if(abstraction instanceof SummarizableAbstraction) {










 SummarizableAbstraction<D> inner = (SummarizableAbstraction<D>) abstraction;










 abs = (D) inner.summarize();










 }










 return new AbstractionWithSourceStmt<N, D>(abs, null);










 public void addNeighbor(AbstractionWithSourceStmt originalAbstraction) {










 getAbstraction().addNeighbor(originalAbstraction.getAbstraction());










 }





















 @SuppressWarnings("unchecked")










 @Override










 public SummarizableAbstraction<AbstractionWithSourceStmt<N, D>> expand(AbstractionWithSourceStmt<N, D> fullAbstraction) {










 D abs = abstraction;










 if(abstraction instanceof SummarizableAbstraction) {










 SummarizableAbstraction<D> inner = (SummarizableAbstraction<D>) abstraction;










 SummarizableAbstraction<D> full = (SummarizableAbstraction<D>) fullAbstraction.abstraction;










 abs = (D) inner.expand((D) full);










 }










 return new AbstractionWithSourceStmt<N, D>(abs, fullAbstraction.source);










 }










 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>>










 implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {










 private class AugmentedTabulationProblem implements IFDSTabulationProblem<N, AbstractionWithSourceStmt,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt<N, D>(delegate.zeroValue(), null);










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M>() {










 public FlowFunctions<N, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallFlowFunction(callStmt, destinationMethod));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {










 private Set<AbstractionWithSourceStmt> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);





















 //optimization










 if(origTargets.equals(Collections.singleton(originalAbstraction))) return Collections.singleton(source); 










 










 Set<AbstractionWithSourceStmt<N, D>> res = new HashSet<AbstractionWithSourceStmt<N,D>>();










 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt<N,D>(d,source.getSourceStmt()));










 res.add(new AbstractionWithSourceStmt(d,source.getSourceStmt()));










 }










 return res;










 }



......@@ -362,23 +348,23 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {




















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt<N, D>>> initialSeeds() {










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt<N, D>>> res = new HashMap<N, Set<AbstractionWithSourceStmt<N,D>>>();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt<N, D>> resSet = new HashSet<AbstractionWithSourceStmt<N,D>>();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt<N,D>(d, stmt));










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt<N, D> zeroValue() {










 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }














......@@ -393,9 +379,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return extractResults(bwSolver.ifdsResultsAt(stmt));










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt<N, D>> annotatedResults) {










 private Set<D> extractResults(Set<AbstractionWithSourceStmt> annotatedResults) {










 Set<D> res = new HashSet<D>(); 










 for (AbstractionWithSourceStmt<N, D> abstractionWithSourceStmt : annotatedResults) {










 for (AbstractionWithSourceStmt abstractionWithSourceStmt : annotatedResults) {










 res.add(abstractionWithSourceStmt.getAbstraction());










 }










 return res;



......














src/heros/solver/PathTrackingIFDSSolver.java



0 → 100644







View file @ d9ac548b













/*******************************************************************************










 * Copyright (c) 2013 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Map;





















import com.google.common.collect.Maps;





















/**










 * An {@link IFDSSolver} that tracks paths for reporting. To do so, it requires that data-flow abstractions implement the LinkedNode interface.










 * The solver implements a cache of data-flow facts for each statement and source value. If for the same statement and source value the same










 * target value is seen again (as determined through a cache hit), then the solver propagates the cached value but at the same time links










 * both target values with one another.










 *  










 * @author Eric Bodden










 */










public class PathTrackingIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 /**










	 * A data-flow fact that can be linked with other equal facts.










	 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










	 */










 public static interface LinkedNode<D> {










 /**










		 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged










		 * with this one of paths were not being tracked.










		 */










 public void addNeighbor(D originalAbstraction);










 }





















 public PathTrackingIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 super(ifdsProblem);










 }





















 private final Map<CacheEntry, LinkedNode<D>> cache = Maps.newHashMap();










 










 @Override










 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 CacheEntry currentCacheEntry = new CacheEntry(target, sourceVal, targetVal);





















 boolean propagate = false;










 synchronized (this) {










 if (cache.containsKey(currentCacheEntry)) {










 LinkedNode<D> existingTargetVal = cache.get(currentCacheEntry);










 if (existingTargetVal != targetVal)










 existingTargetVal.addNeighbor(targetVal);










 } else {










 cache.put(currentCacheEntry, targetVal);










 propagate = true;










 }










 }





















 if (propagate)










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 










 };










 










 










 private class CacheEntry {










 private N n;










 private D sourceVal;










 private D targetVal;





















 public CacheEntry(N n, D sourceVal, D targetVal) {










 super();










 this.n = n;










 this.sourceVal = sourceVal;










 this.targetVal = targetVal;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((sourceVal == null) ? 0 : sourceVal.hashCode());










 result = prime * result + ((targetVal == null) ? 0 : targetVal.hashCode());










 result = prime * result + ((n == null) ? 0 : n.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings({ "unchecked" })










 CacheEntry other = (CacheEntry) obj;










 if (sourceVal == null) {










 if (other.sourceVal != null)










 return false;










 } else if (!sourceVal.equals(other.sourceVal))










 return false;










 if (targetVal == null) {










 if (other.targetVal != null)










 return false;










 } else if (!targetVal.equals(other.targetVal))










 return false;










 if (n == null) {










 if (other.n != null)










 return false;










 } else if (!n.equals(other.n))










 return false;










 return true;










 }










 } 










 
































}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

d9ac548b















Commit
d9ac548b


authored
Oct 18, 2013
by


Eric Bodden



Browse files




added a PathTrackingIFDSSolver which implements the keeping track of paths;

modified BiDiIFDSSolver such that it extends this solver; this is necessary because the BiDi-operations must occur before (!) the caching; otherwise the path constructions may miss paths






parent
659ba86a













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ d9ac548b






......@@ -15,7 +15,7 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.SummarizableAbstraction;










import heros.solver.PathTrackingIFDSSolver.LinkedNode;





















import java.util.Collections;










import java.util.HashMap;



......@@ -36,16 +36,20 @@ import java.util.concurrent.TimeUnit;









 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 * 










 * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * reportable paths.  










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> see {@link IFDSSolver}










 * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * 				reportable paths.










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;



......@@ -57,8 +61,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 



......@@ -80,27 +84,27 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> problem, String debugName) {










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>>();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {










 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt> edge) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();



......@@ -112,9 +116,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PathEdge<N,AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt>>();










 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);



......@@ -127,13 +131,13 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }










 










 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 protected void propagate(AbstractionWithSourceStmt sourceVal, N target, AbstractionWithSourceStmt targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(), relatedCallSite);










 targetVal = new AbstractionWithSourceStmt(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 



......@@ -153,9 +157,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PathEdge<N, AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(DEBUG)










 System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge);










 super.processExit(pausedEdge);



......@@ -180,7 +184,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public static class AbstractionWithSourceStmt<N,D> implements SummarizableAbstraction<AbstractionWithSourceStmt<N, D>> {










 public class AbstractionWithSourceStmt implements PathTrackingIFDSSolver.LinkedNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;



......@@ -215,7 +219,6 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return result;










 }





















 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)



......@@ -224,6 +227,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)



......@@ -238,100 +242,82 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return true;










 }





















 @SuppressWarnings("unchecked")










 @Override










 public SummarizableAbstraction<AbstractionWithSourceStmt<N, D>> summarize() {










 D abs = abstraction;










 if(abstraction instanceof SummarizableAbstraction) {










 SummarizableAbstraction<D> inner = (SummarizableAbstraction<D>) abstraction;










 abs = (D) inner.summarize();










 }










 return new AbstractionWithSourceStmt<N, D>(abs, null);










 public void addNeighbor(AbstractionWithSourceStmt originalAbstraction) {










 getAbstraction().addNeighbor(originalAbstraction.getAbstraction());










 }





















 @SuppressWarnings("unchecked")










 @Override










 public SummarizableAbstraction<AbstractionWithSourceStmt<N, D>> expand(AbstractionWithSourceStmt<N, D> fullAbstraction) {










 D abs = abstraction;










 if(abstraction instanceof SummarizableAbstraction) {










 SummarizableAbstraction<D> inner = (SummarizableAbstraction<D>) abstraction;










 SummarizableAbstraction<D> full = (SummarizableAbstraction<D>) fullAbstraction.abstraction;










 abs = (D) inner.expand((D) full);










 }










 return new AbstractionWithSourceStmt<N, D>(abs, fullAbstraction.source);










 }










 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>>










 implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {










 private class AugmentedTabulationProblem implements IFDSTabulationProblem<N, AbstractionWithSourceStmt,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt<N, D>(delegate.zeroValue(), null);










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M>() {










 public FlowFunctions<N, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallFlowFunction(callStmt, destinationMethod));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {










 private Set<AbstractionWithSourceStmt> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);





















 //optimization










 if(origTargets.equals(Collections.singleton(originalAbstraction))) return Collections.singleton(source); 










 










 Set<AbstractionWithSourceStmt<N, D>> res = new HashSet<AbstractionWithSourceStmt<N,D>>();










 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt<N,D>(d,source.getSourceStmt()));










 res.add(new AbstractionWithSourceStmt(d,source.getSourceStmt()));










 }










 return res;










 }



......@@ -362,23 +348,23 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {




















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt<N, D>>> initialSeeds() {










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt<N, D>>> res = new HashMap<N, Set<AbstractionWithSourceStmt<N,D>>>();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt<N, D>> resSet = new HashSet<AbstractionWithSourceStmt<N,D>>();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt<N,D>(d, stmt));










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt<N, D> zeroValue() {










 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }














......@@ -393,9 +379,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return extractResults(bwSolver.ifdsResultsAt(stmt));










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt<N, D>> annotatedResults) {










 private Set<D> extractResults(Set<AbstractionWithSourceStmt> annotatedResults) {










 Set<D> res = new HashSet<D>(); 










 for (AbstractionWithSourceStmt<N, D> abstractionWithSourceStmt : annotatedResults) {










 for (AbstractionWithSourceStmt abstractionWithSourceStmt : annotatedResults) {










 res.add(abstractionWithSourceStmt.getAbstraction());










 }










 return res;



......














src/heros/solver/PathTrackingIFDSSolver.java



0 → 100644







View file @ d9ac548b













/*******************************************************************************










 * Copyright (c) 2013 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Map;





















import com.google.common.collect.Maps;





















/**










 * An {@link IFDSSolver} that tracks paths for reporting. To do so, it requires that data-flow abstractions implement the LinkedNode interface.










 * The solver implements a cache of data-flow facts for each statement and source value. If for the same statement and source value the same










 * target value is seen again (as determined through a cache hit), then the solver propagates the cached value but at the same time links










 * both target values with one another.










 *  










 * @author Eric Bodden










 */










public class PathTrackingIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 /**










	 * A data-flow fact that can be linked with other equal facts.










	 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










	 */










 public static interface LinkedNode<D> {










 /**










		 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged










		 * with this one of paths were not being tracked.










		 */










 public void addNeighbor(D originalAbstraction);










 }





















 public PathTrackingIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 super(ifdsProblem);










 }





















 private final Map<CacheEntry, LinkedNode<D>> cache = Maps.newHashMap();










 










 @Override










 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 CacheEntry currentCacheEntry = new CacheEntry(target, sourceVal, targetVal);





















 boolean propagate = false;










 synchronized (this) {










 if (cache.containsKey(currentCacheEntry)) {










 LinkedNode<D> existingTargetVal = cache.get(currentCacheEntry);










 if (existingTargetVal != targetVal)










 existingTargetVal.addNeighbor(targetVal);










 } else {










 cache.put(currentCacheEntry, targetVal);










 propagate = true;










 }










 }





















 if (propagate)










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 










 };










 










 










 private class CacheEntry {










 private N n;










 private D sourceVal;










 private D targetVal;





















 public CacheEntry(N n, D sourceVal, D targetVal) {










 super();










 this.n = n;










 this.sourceVal = sourceVal;










 this.targetVal = targetVal;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((sourceVal == null) ? 0 : sourceVal.hashCode());










 result = prime * result + ((targetVal == null) ? 0 : targetVal.hashCode());










 result = prime * result + ((n == null) ? 0 : n.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings({ "unchecked" })










 CacheEntry other = (CacheEntry) obj;










 if (sourceVal == null) {










 if (other.sourceVal != null)










 return false;










 } else if (!sourceVal.equals(other.sourceVal))










 return false;










 if (targetVal == null) {










 if (other.targetVal != null)










 return false;










 } else if (!targetVal.equals(other.targetVal))










 return false;










 if (n == null) {










 if (other.n != null)










 return false;










 } else if (!n.equals(other.n))










 return false;










 return true;










 }










 } 










 
































}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

d9ac548b







Open sidebar



Joshua Garcia heros
Commits

d9ac548b




Open sidebar

Joshua Garcia heros
Commits

d9ac548b


Joshua GarciaherosherosCommits
d9ac548b








Commit
d9ac548b


authored
Oct 18, 2013
by


Eric Bodden



Browse files




added a PathTrackingIFDSSolver which implements the keeping track of paths;

modified BiDiIFDSSolver such that it extends this solver; this is necessary because the BiDi-operations must occur before (!) the caching; otherwise the path constructions may miss paths






parent
659ba86a













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ d9ac548b






......@@ -15,7 +15,7 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.SummarizableAbstraction;










import heros.solver.PathTrackingIFDSSolver.LinkedNode;





















import java.util.Collections;










import java.util.HashMap;



......@@ -36,16 +36,20 @@ import java.util.concurrent.TimeUnit;









 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 * 










 * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * reportable paths.  










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> see {@link IFDSSolver}










 * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * 				reportable paths.










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;



......@@ -57,8 +61,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 



......@@ -80,27 +84,27 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> problem, String debugName) {










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>>();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {










 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt> edge) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();



......@@ -112,9 +116,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PathEdge<N,AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt>>();










 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);



......@@ -127,13 +131,13 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }










 










 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 protected void propagate(AbstractionWithSourceStmt sourceVal, N target, AbstractionWithSourceStmt targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(), relatedCallSite);










 targetVal = new AbstractionWithSourceStmt(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 



......@@ -153,9 +157,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PathEdge<N, AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(DEBUG)










 System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge);










 super.processExit(pausedEdge);



......@@ -180,7 +184,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public static class AbstractionWithSourceStmt<N,D> implements SummarizableAbstraction<AbstractionWithSourceStmt<N, D>> {










 public class AbstractionWithSourceStmt implements PathTrackingIFDSSolver.LinkedNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;



......@@ -215,7 +219,6 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return result;










 }





















 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)



......@@ -224,6 +227,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)



......@@ -238,100 +242,82 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return true;










 }





















 @SuppressWarnings("unchecked")










 @Override










 public SummarizableAbstraction<AbstractionWithSourceStmt<N, D>> summarize() {










 D abs = abstraction;










 if(abstraction instanceof SummarizableAbstraction) {










 SummarizableAbstraction<D> inner = (SummarizableAbstraction<D>) abstraction;










 abs = (D) inner.summarize();










 }










 return new AbstractionWithSourceStmt<N, D>(abs, null);










 public void addNeighbor(AbstractionWithSourceStmt originalAbstraction) {










 getAbstraction().addNeighbor(originalAbstraction.getAbstraction());










 }





















 @SuppressWarnings("unchecked")










 @Override










 public SummarizableAbstraction<AbstractionWithSourceStmt<N, D>> expand(AbstractionWithSourceStmt<N, D> fullAbstraction) {










 D abs = abstraction;










 if(abstraction instanceof SummarizableAbstraction) {










 SummarizableAbstraction<D> inner = (SummarizableAbstraction<D>) abstraction;










 SummarizableAbstraction<D> full = (SummarizableAbstraction<D>) fullAbstraction.abstraction;










 abs = (D) inner.expand((D) full);










 }










 return new AbstractionWithSourceStmt<N, D>(abs, fullAbstraction.source);










 }










 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>>










 implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {










 private class AugmentedTabulationProblem implements IFDSTabulationProblem<N, AbstractionWithSourceStmt,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt<N, D>(delegate.zeroValue(), null);










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M>() {










 public FlowFunctions<N, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallFlowFunction(callStmt, destinationMethod));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {










 private Set<AbstractionWithSourceStmt> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);





















 //optimization










 if(origTargets.equals(Collections.singleton(originalAbstraction))) return Collections.singleton(source); 










 










 Set<AbstractionWithSourceStmt<N, D>> res = new HashSet<AbstractionWithSourceStmt<N,D>>();










 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt<N,D>(d,source.getSourceStmt()));










 res.add(new AbstractionWithSourceStmt(d,source.getSourceStmt()));










 }










 return res;










 }



......@@ -362,23 +348,23 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {




















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt<N, D>>> initialSeeds() {










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt<N, D>>> res = new HashMap<N, Set<AbstractionWithSourceStmt<N,D>>>();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt<N, D>> resSet = new HashSet<AbstractionWithSourceStmt<N,D>>();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt<N,D>(d, stmt));










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt<N, D> zeroValue() {










 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }














......@@ -393,9 +379,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return extractResults(bwSolver.ifdsResultsAt(stmt));










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt<N, D>> annotatedResults) {










 private Set<D> extractResults(Set<AbstractionWithSourceStmt> annotatedResults) {










 Set<D> res = new HashSet<D>(); 










 for (AbstractionWithSourceStmt<N, D> abstractionWithSourceStmt : annotatedResults) {










 for (AbstractionWithSourceStmt abstractionWithSourceStmt : annotatedResults) {










 res.add(abstractionWithSourceStmt.getAbstraction());










 }










 return res;



......














src/heros/solver/PathTrackingIFDSSolver.java



0 → 100644







View file @ d9ac548b













/*******************************************************************************










 * Copyright (c) 2013 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Map;





















import com.google.common.collect.Maps;





















/**










 * An {@link IFDSSolver} that tracks paths for reporting. To do so, it requires that data-flow abstractions implement the LinkedNode interface.










 * The solver implements a cache of data-flow facts for each statement and source value. If for the same statement and source value the same










 * target value is seen again (as determined through a cache hit), then the solver propagates the cached value but at the same time links










 * both target values with one another.










 *  










 * @author Eric Bodden










 */










public class PathTrackingIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 /**










	 * A data-flow fact that can be linked with other equal facts.










	 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










	 */










 public static interface LinkedNode<D> {










 /**










		 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged










		 * with this one of paths were not being tracked.










		 */










 public void addNeighbor(D originalAbstraction);










 }





















 public PathTrackingIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 super(ifdsProblem);










 }





















 private final Map<CacheEntry, LinkedNode<D>> cache = Maps.newHashMap();










 










 @Override










 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 CacheEntry currentCacheEntry = new CacheEntry(target, sourceVal, targetVal);





















 boolean propagate = false;










 synchronized (this) {










 if (cache.containsKey(currentCacheEntry)) {










 LinkedNode<D> existingTargetVal = cache.get(currentCacheEntry);










 if (existingTargetVal != targetVal)










 existingTargetVal.addNeighbor(targetVal);










 } else {










 cache.put(currentCacheEntry, targetVal);










 propagate = true;










 }










 }





















 if (propagate)










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 










 };










 










 










 private class CacheEntry {










 private N n;










 private D sourceVal;










 private D targetVal;





















 public CacheEntry(N n, D sourceVal, D targetVal) {










 super();










 this.n = n;










 this.sourceVal = sourceVal;










 this.targetVal = targetVal;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((sourceVal == null) ? 0 : sourceVal.hashCode());










 result = prime * result + ((targetVal == null) ? 0 : targetVal.hashCode());










 result = prime * result + ((n == null) ? 0 : n.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings({ "unchecked" })










 CacheEntry other = (CacheEntry) obj;










 if (sourceVal == null) {










 if (other.sourceVal != null)










 return false;










 } else if (!sourceVal.equals(other.sourceVal))










 return false;










 if (targetVal == null) {










 if (other.targetVal != null)










 return false;










 } else if (!targetVal.equals(other.targetVal))










 return false;










 if (n == null) {










 if (other.n != null)










 return false;










 } else if (!n.equals(other.n))










 return false;










 return true;










 }










 } 










 
































}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
d9ac548b


authored
Oct 18, 2013
by


Eric Bodden



Browse files




added a PathTrackingIFDSSolver which implements the keeping track of paths;

modified BiDiIFDSSolver such that it extends this solver; this is necessary because the BiDi-operations must occur before (!) the caching; otherwise the path constructions may miss paths






parent
659ba86a













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ d9ac548b






......@@ -15,7 +15,7 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.SummarizableAbstraction;










import heros.solver.PathTrackingIFDSSolver.LinkedNode;





















import java.util.Collections;










import java.util.HashMap;



......@@ -36,16 +36,20 @@ import java.util.concurrent.TimeUnit;









 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 * 










 * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * reportable paths.  










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> see {@link IFDSSolver}










 * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * 				reportable paths.










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;



......@@ -57,8 +61,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 



......@@ -80,27 +84,27 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> problem, String debugName) {










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>>();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {










 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt> edge) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();



......@@ -112,9 +116,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PathEdge<N,AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt>>();










 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);



......@@ -127,13 +131,13 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }










 










 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 protected void propagate(AbstractionWithSourceStmt sourceVal, N target, AbstractionWithSourceStmt targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(), relatedCallSite);










 targetVal = new AbstractionWithSourceStmt(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 



......@@ -153,9 +157,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PathEdge<N, AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(DEBUG)










 System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge);










 super.processExit(pausedEdge);



......@@ -180,7 +184,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public static class AbstractionWithSourceStmt<N,D> implements SummarizableAbstraction<AbstractionWithSourceStmt<N, D>> {










 public class AbstractionWithSourceStmt implements PathTrackingIFDSSolver.LinkedNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;



......@@ -215,7 +219,6 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return result;










 }





















 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)



......@@ -224,6 +227,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)



......@@ -238,100 +242,82 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return true;










 }





















 @SuppressWarnings("unchecked")










 @Override










 public SummarizableAbstraction<AbstractionWithSourceStmt<N, D>> summarize() {










 D abs = abstraction;










 if(abstraction instanceof SummarizableAbstraction) {










 SummarizableAbstraction<D> inner = (SummarizableAbstraction<D>) abstraction;










 abs = (D) inner.summarize();










 }










 return new AbstractionWithSourceStmt<N, D>(abs, null);










 public void addNeighbor(AbstractionWithSourceStmt originalAbstraction) {










 getAbstraction().addNeighbor(originalAbstraction.getAbstraction());










 }





















 @SuppressWarnings("unchecked")










 @Override










 public SummarizableAbstraction<AbstractionWithSourceStmt<N, D>> expand(AbstractionWithSourceStmt<N, D> fullAbstraction) {










 D abs = abstraction;










 if(abstraction instanceof SummarizableAbstraction) {










 SummarizableAbstraction<D> inner = (SummarizableAbstraction<D>) abstraction;










 SummarizableAbstraction<D> full = (SummarizableAbstraction<D>) fullAbstraction.abstraction;










 abs = (D) inner.expand((D) full);










 }










 return new AbstractionWithSourceStmt<N, D>(abs, fullAbstraction.source);










 }










 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>>










 implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {










 private class AugmentedTabulationProblem implements IFDSTabulationProblem<N, AbstractionWithSourceStmt,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt<N, D>(delegate.zeroValue(), null);










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M>() {










 public FlowFunctions<N, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallFlowFunction(callStmt, destinationMethod));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {










 private Set<AbstractionWithSourceStmt> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);





















 //optimization










 if(origTargets.equals(Collections.singleton(originalAbstraction))) return Collections.singleton(source); 










 










 Set<AbstractionWithSourceStmt<N, D>> res = new HashSet<AbstractionWithSourceStmt<N,D>>();










 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt<N,D>(d,source.getSourceStmt()));










 res.add(new AbstractionWithSourceStmt(d,source.getSourceStmt()));










 }










 return res;










 }



......@@ -362,23 +348,23 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {




















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt<N, D>>> initialSeeds() {










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt<N, D>>> res = new HashMap<N, Set<AbstractionWithSourceStmt<N,D>>>();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt<N, D>> resSet = new HashSet<AbstractionWithSourceStmt<N,D>>();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt<N,D>(d, stmt));










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt<N, D> zeroValue() {










 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }














......@@ -393,9 +379,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return extractResults(bwSolver.ifdsResultsAt(stmt));










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt<N, D>> annotatedResults) {










 private Set<D> extractResults(Set<AbstractionWithSourceStmt> annotatedResults) {










 Set<D> res = new HashSet<D>(); 










 for (AbstractionWithSourceStmt<N, D> abstractionWithSourceStmt : annotatedResults) {










 for (AbstractionWithSourceStmt abstractionWithSourceStmt : annotatedResults) {










 res.add(abstractionWithSourceStmt.getAbstraction());










 }










 return res;



......














src/heros/solver/PathTrackingIFDSSolver.java



0 → 100644







View file @ d9ac548b













/*******************************************************************************










 * Copyright (c) 2013 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Map;





















import com.google.common.collect.Maps;





















/**










 * An {@link IFDSSolver} that tracks paths for reporting. To do so, it requires that data-flow abstractions implement the LinkedNode interface.










 * The solver implements a cache of data-flow facts for each statement and source value. If for the same statement and source value the same










 * target value is seen again (as determined through a cache hit), then the solver propagates the cached value but at the same time links










 * both target values with one another.










 *  










 * @author Eric Bodden










 */










public class PathTrackingIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 /**










	 * A data-flow fact that can be linked with other equal facts.










	 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










	 */










 public static interface LinkedNode<D> {










 /**










		 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged










		 * with this one of paths were not being tracked.










		 */










 public void addNeighbor(D originalAbstraction);










 }





















 public PathTrackingIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 super(ifdsProblem);










 }





















 private final Map<CacheEntry, LinkedNode<D>> cache = Maps.newHashMap();










 










 @Override










 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 CacheEntry currentCacheEntry = new CacheEntry(target, sourceVal, targetVal);





















 boolean propagate = false;










 synchronized (this) {










 if (cache.containsKey(currentCacheEntry)) {










 LinkedNode<D> existingTargetVal = cache.get(currentCacheEntry);










 if (existingTargetVal != targetVal)










 existingTargetVal.addNeighbor(targetVal);










 } else {










 cache.put(currentCacheEntry, targetVal);










 propagate = true;










 }










 }





















 if (propagate)










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 










 };










 










 










 private class CacheEntry {










 private N n;










 private D sourceVal;










 private D targetVal;





















 public CacheEntry(N n, D sourceVal, D targetVal) {










 super();










 this.n = n;










 this.sourceVal = sourceVal;










 this.targetVal = targetVal;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((sourceVal == null) ? 0 : sourceVal.hashCode());










 result = prime * result + ((targetVal == null) ? 0 : targetVal.hashCode());










 result = prime * result + ((n == null) ? 0 : n.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings({ "unchecked" })










 CacheEntry other = (CacheEntry) obj;










 if (sourceVal == null) {










 if (other.sourceVal != null)










 return false;










 } else if (!sourceVal.equals(other.sourceVal))










 return false;










 if (targetVal == null) {










 if (other.targetVal != null)










 return false;










 } else if (!targetVal.equals(other.targetVal))










 return false;










 if (n == null) {










 if (other.n != null)










 return false;










 } else if (!n.equals(other.n))










 return false;










 return true;










 }










 } 










 
































}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
d9ac548b


authored
Oct 18, 2013
by


Eric Bodden



Browse files



Commit
d9ac548b


authored
Oct 18, 2013
by


Eric Bodden

d9ac548bauthoredbyEric Bodden

added a PathTrackingIFDSSolver which implements the keeping track of paths;

modified BiDiIFDSSolver such that it extends this solver; this is necessary because the BiDi-operations must occur before (!) the caching; otherwise the path constructions may miss paths





parent
659ba86a
















parent
659ba86a





parent












Changes
2
2


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/solver/BiDiIFDSSolver.java








View file @ d9ac548b






......@@ -15,7 +15,7 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.SummarizableAbstraction;










import heros.solver.PathTrackingIFDSSolver.LinkedNode;





















import java.util.Collections;










import java.util.HashMap;



......@@ -36,16 +36,20 @@ import java.util.concurrent.TimeUnit;









 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 * 










 * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * reportable paths.  










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> see {@link IFDSSolver}










 * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * 				reportable paths.










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;



......@@ -57,8 +61,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 



......@@ -80,27 +84,27 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> problem, String debugName) {










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>>();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {










 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt> edge) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();



......@@ -112,9 +116,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PathEdge<N,AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt>>();










 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);



......@@ -127,13 +131,13 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }










 










 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 protected void propagate(AbstractionWithSourceStmt sourceVal, N target, AbstractionWithSourceStmt targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(), relatedCallSite);










 targetVal = new AbstractionWithSourceStmt(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 



......@@ -153,9 +157,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PathEdge<N, AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(DEBUG)










 System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge);










 super.processExit(pausedEdge);



......@@ -180,7 +184,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public static class AbstractionWithSourceStmt<N,D> implements SummarizableAbstraction<AbstractionWithSourceStmt<N, D>> {










 public class AbstractionWithSourceStmt implements PathTrackingIFDSSolver.LinkedNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;



......@@ -215,7 +219,6 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return result;










 }





















 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)



......@@ -224,6 +227,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)



......@@ -238,100 +242,82 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return true;










 }





















 @SuppressWarnings("unchecked")










 @Override










 public SummarizableAbstraction<AbstractionWithSourceStmt<N, D>> summarize() {










 D abs = abstraction;










 if(abstraction instanceof SummarizableAbstraction) {










 SummarizableAbstraction<D> inner = (SummarizableAbstraction<D>) abstraction;










 abs = (D) inner.summarize();










 }










 return new AbstractionWithSourceStmt<N, D>(abs, null);










 public void addNeighbor(AbstractionWithSourceStmt originalAbstraction) {










 getAbstraction().addNeighbor(originalAbstraction.getAbstraction());










 }





















 @SuppressWarnings("unchecked")










 @Override










 public SummarizableAbstraction<AbstractionWithSourceStmt<N, D>> expand(AbstractionWithSourceStmt<N, D> fullAbstraction) {










 D abs = abstraction;










 if(abstraction instanceof SummarizableAbstraction) {










 SummarizableAbstraction<D> inner = (SummarizableAbstraction<D>) abstraction;










 SummarizableAbstraction<D> full = (SummarizableAbstraction<D>) fullAbstraction.abstraction;










 abs = (D) inner.expand((D) full);










 }










 return new AbstractionWithSourceStmt<N, D>(abs, fullAbstraction.source);










 }










 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>>










 implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {










 private class AugmentedTabulationProblem implements IFDSTabulationProblem<N, AbstractionWithSourceStmt,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt<N, D>(delegate.zeroValue(), null);










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M>() {










 public FlowFunctions<N, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallFlowFunction(callStmt, destinationMethod));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {










 private Set<AbstractionWithSourceStmt> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);





















 //optimization










 if(origTargets.equals(Collections.singleton(originalAbstraction))) return Collections.singleton(source); 










 










 Set<AbstractionWithSourceStmt<N, D>> res = new HashSet<AbstractionWithSourceStmt<N,D>>();










 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt<N,D>(d,source.getSourceStmt()));










 res.add(new AbstractionWithSourceStmt(d,source.getSourceStmt()));










 }










 return res;










 }



......@@ -362,23 +348,23 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {




















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt<N, D>>> initialSeeds() {










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt<N, D>>> res = new HashMap<N, Set<AbstractionWithSourceStmt<N,D>>>();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt<N, D>> resSet = new HashSet<AbstractionWithSourceStmt<N,D>>();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt<N,D>(d, stmt));










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt<N, D> zeroValue() {










 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }














......@@ -393,9 +379,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return extractResults(bwSolver.ifdsResultsAt(stmt));










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt<N, D>> annotatedResults) {










 private Set<D> extractResults(Set<AbstractionWithSourceStmt> annotatedResults) {










 Set<D> res = new HashSet<D>(); 










 for (AbstractionWithSourceStmt<N, D> abstractionWithSourceStmt : annotatedResults) {










 for (AbstractionWithSourceStmt abstractionWithSourceStmt : annotatedResults) {










 res.add(abstractionWithSourceStmt.getAbstraction());










 }










 return res;



......














src/heros/solver/PathTrackingIFDSSolver.java



0 → 100644







View file @ d9ac548b













/*******************************************************************************










 * Copyright (c) 2013 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Map;





















import com.google.common.collect.Maps;





















/**










 * An {@link IFDSSolver} that tracks paths for reporting. To do so, it requires that data-flow abstractions implement the LinkedNode interface.










 * The solver implements a cache of data-flow facts for each statement and source value. If for the same statement and source value the same










 * target value is seen again (as determined through a cache hit), then the solver propagates the cached value but at the same time links










 * both target values with one another.










 *  










 * @author Eric Bodden










 */










public class PathTrackingIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 /**










	 * A data-flow fact that can be linked with other equal facts.










	 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










	 */










 public static interface LinkedNode<D> {










 /**










		 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged










		 * with this one of paths were not being tracked.










		 */










 public void addNeighbor(D originalAbstraction);










 }





















 public PathTrackingIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 super(ifdsProblem);










 }





















 private final Map<CacheEntry, LinkedNode<D>> cache = Maps.newHashMap();










 










 @Override










 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 CacheEntry currentCacheEntry = new CacheEntry(target, sourceVal, targetVal);





















 boolean propagate = false;










 synchronized (this) {










 if (cache.containsKey(currentCacheEntry)) {










 LinkedNode<D> existingTargetVal = cache.get(currentCacheEntry);










 if (existingTargetVal != targetVal)










 existingTargetVal.addNeighbor(targetVal);










 } else {










 cache.put(currentCacheEntry, targetVal);










 propagate = true;










 }










 }





















 if (propagate)










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 










 };










 










 










 private class CacheEntry {










 private N n;










 private D sourceVal;










 private D targetVal;





















 public CacheEntry(N n, D sourceVal, D targetVal) {










 super();










 this.n = n;










 this.sourceVal = sourceVal;










 this.targetVal = targetVal;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((sourceVal == null) ? 0 : sourceVal.hashCode());










 result = prime * result + ((targetVal == null) ? 0 : targetVal.hashCode());










 result = prime * result + ((n == null) ? 0 : n.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings({ "unchecked" })










 CacheEntry other = (CacheEntry) obj;










 if (sourceVal == null) {










 if (other.sourceVal != null)










 return false;










 } else if (!sourceVal.equals(other.sourceVal))










 return false;










 if (targetVal == null) {










 if (other.targetVal != null)










 return false;










 } else if (!targetVal.equals(other.targetVal))










 return false;










 if (n == null) {










 if (other.n != null)










 return false;










 } else if (!n.equals(other.n))










 return false;










 return true;










 }










 } 










 
































}














src/heros/solver/BiDiIFDSSolver.java








View file @ d9ac548b






......@@ -15,7 +15,7 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.SummarizableAbstraction;










import heros.solver.PathTrackingIFDSSolver.LinkedNode;





















import java.util.Collections;










import java.util.HashMap;



......@@ -36,16 +36,20 @@ import java.util.concurrent.TimeUnit;









 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 * 










 * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * reportable paths.  










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> see {@link IFDSSolver}










 * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * 				reportable paths.










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;



......@@ -57,8 +61,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 



......@@ -80,27 +84,27 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> problem, String debugName) {










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>>();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {










 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt> edge) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();



......@@ -112,9 +116,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PathEdge<N,AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt>>();










 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);



......@@ -127,13 +131,13 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }










 










 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 protected void propagate(AbstractionWithSourceStmt sourceVal, N target, AbstractionWithSourceStmt targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(), relatedCallSite);










 targetVal = new AbstractionWithSourceStmt(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 



......@@ -153,9 +157,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PathEdge<N, AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(DEBUG)










 System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge);










 super.processExit(pausedEdge);



......@@ -180,7 +184,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public static class AbstractionWithSourceStmt<N,D> implements SummarizableAbstraction<AbstractionWithSourceStmt<N, D>> {










 public class AbstractionWithSourceStmt implements PathTrackingIFDSSolver.LinkedNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;



......@@ -215,7 +219,6 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return result;










 }





















 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)



......@@ -224,6 +227,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)



......@@ -238,100 +242,82 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return true;










 }





















 @SuppressWarnings("unchecked")










 @Override










 public SummarizableAbstraction<AbstractionWithSourceStmt<N, D>> summarize() {










 D abs = abstraction;










 if(abstraction instanceof SummarizableAbstraction) {










 SummarizableAbstraction<D> inner = (SummarizableAbstraction<D>) abstraction;










 abs = (D) inner.summarize();










 }










 return new AbstractionWithSourceStmt<N, D>(abs, null);










 public void addNeighbor(AbstractionWithSourceStmt originalAbstraction) {










 getAbstraction().addNeighbor(originalAbstraction.getAbstraction());










 }





















 @SuppressWarnings("unchecked")










 @Override










 public SummarizableAbstraction<AbstractionWithSourceStmt<N, D>> expand(AbstractionWithSourceStmt<N, D> fullAbstraction) {










 D abs = abstraction;










 if(abstraction instanceof SummarizableAbstraction) {










 SummarizableAbstraction<D> inner = (SummarizableAbstraction<D>) abstraction;










 SummarizableAbstraction<D> full = (SummarizableAbstraction<D>) fullAbstraction.abstraction;










 abs = (D) inner.expand((D) full);










 }










 return new AbstractionWithSourceStmt<N, D>(abs, fullAbstraction.source);










 }










 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>>










 implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {










 private class AugmentedTabulationProblem implements IFDSTabulationProblem<N, AbstractionWithSourceStmt,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt<N, D>(delegate.zeroValue(), null);










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M>() {










 public FlowFunctions<N, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallFlowFunction(callStmt, destinationMethod));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {










 private Set<AbstractionWithSourceStmt> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);





















 //optimization










 if(origTargets.equals(Collections.singleton(originalAbstraction))) return Collections.singleton(source); 










 










 Set<AbstractionWithSourceStmt<N, D>> res = new HashSet<AbstractionWithSourceStmt<N,D>>();










 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt<N,D>(d,source.getSourceStmt()));










 res.add(new AbstractionWithSourceStmt(d,source.getSourceStmt()));










 }










 return res;










 }



......@@ -362,23 +348,23 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {




















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt<N, D>>> initialSeeds() {










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt<N, D>>> res = new HashMap<N, Set<AbstractionWithSourceStmt<N,D>>>();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt<N, D>> resSet = new HashSet<AbstractionWithSourceStmt<N,D>>();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt<N,D>(d, stmt));










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt<N, D> zeroValue() {










 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }














......@@ -393,9 +379,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return extractResults(bwSolver.ifdsResultsAt(stmt));










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt<N, D>> annotatedResults) {










 private Set<D> extractResults(Set<AbstractionWithSourceStmt> annotatedResults) {










 Set<D> res = new HashSet<D>(); 










 for (AbstractionWithSourceStmt<N, D> abstractionWithSourceStmt : annotatedResults) {










 for (AbstractionWithSourceStmt abstractionWithSourceStmt : annotatedResults) {










 res.add(abstractionWithSourceStmt.getAbstraction());










 }










 return res;



......












src/heros/solver/BiDiIFDSSolver.java








View file @ d9ac548b








src/heros/solver/BiDiIFDSSolver.java










View file @ d9ac548b


d9ac548b



......@@ -15,7 +15,7 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.SummarizableAbstraction;










import heros.solver.PathTrackingIFDSSolver.LinkedNode;





















import java.util.Collections;










import java.util.HashMap;



......@@ -36,16 +36,20 @@ import java.util.concurrent.TimeUnit;









 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 * 










 * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * reportable paths.  










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> see {@link IFDSSolver}










 * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * 				reportable paths.










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;



......@@ -57,8 +61,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 



......@@ -80,27 +84,27 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> problem, String debugName) {










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>>();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {










 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt> edge) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();



......@@ -112,9 +116,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PathEdge<N,AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt>>();










 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);



......@@ -127,13 +131,13 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }










 










 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 protected void propagate(AbstractionWithSourceStmt sourceVal, N target, AbstractionWithSourceStmt targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(), relatedCallSite);










 targetVal = new AbstractionWithSourceStmt(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 



......@@ -153,9 +157,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PathEdge<N, AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(DEBUG)










 System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge);










 super.processExit(pausedEdge);



......@@ -180,7 +184,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public static class AbstractionWithSourceStmt<N,D> implements SummarizableAbstraction<AbstractionWithSourceStmt<N, D>> {










 public class AbstractionWithSourceStmt implements PathTrackingIFDSSolver.LinkedNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;



......@@ -215,7 +219,6 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return result;










 }





















 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)



......@@ -224,6 +227,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)



......@@ -238,100 +242,82 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return true;










 }





















 @SuppressWarnings("unchecked")










 @Override










 public SummarizableAbstraction<AbstractionWithSourceStmt<N, D>> summarize() {










 D abs = abstraction;










 if(abstraction instanceof SummarizableAbstraction) {










 SummarizableAbstraction<D> inner = (SummarizableAbstraction<D>) abstraction;










 abs = (D) inner.summarize();










 }










 return new AbstractionWithSourceStmt<N, D>(abs, null);










 public void addNeighbor(AbstractionWithSourceStmt originalAbstraction) {










 getAbstraction().addNeighbor(originalAbstraction.getAbstraction());










 }





















 @SuppressWarnings("unchecked")










 @Override










 public SummarizableAbstraction<AbstractionWithSourceStmt<N, D>> expand(AbstractionWithSourceStmt<N, D> fullAbstraction) {










 D abs = abstraction;










 if(abstraction instanceof SummarizableAbstraction) {










 SummarizableAbstraction<D> inner = (SummarizableAbstraction<D>) abstraction;










 SummarizableAbstraction<D> full = (SummarizableAbstraction<D>) fullAbstraction.abstraction;










 abs = (D) inner.expand((D) full);










 }










 return new AbstractionWithSourceStmt<N, D>(abs, fullAbstraction.source);










 }










 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>>










 implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {










 private class AugmentedTabulationProblem implements IFDSTabulationProblem<N, AbstractionWithSourceStmt,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt<N, D>(delegate.zeroValue(), null);










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M>() {










 public FlowFunctions<N, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallFlowFunction(callStmt, destinationMethod));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {










 private Set<AbstractionWithSourceStmt> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);





















 //optimization










 if(origTargets.equals(Collections.singleton(originalAbstraction))) return Collections.singleton(source); 










 










 Set<AbstractionWithSourceStmt<N, D>> res = new HashSet<AbstractionWithSourceStmt<N,D>>();










 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt<N,D>(d,source.getSourceStmt()));










 res.add(new AbstractionWithSourceStmt(d,source.getSourceStmt()));










 }










 return res;










 }



......@@ -362,23 +348,23 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {




















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt<N, D>>> initialSeeds() {










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt<N, D>>> res = new HashMap<N, Set<AbstractionWithSourceStmt<N,D>>>();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt<N, D>> resSet = new HashSet<AbstractionWithSourceStmt<N,D>>();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt<N,D>(d, stmt));










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt<N, D> zeroValue() {










 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }














......@@ -393,9 +379,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return extractResults(bwSolver.ifdsResultsAt(stmt));










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt<N, D>> annotatedResults) {










 private Set<D> extractResults(Set<AbstractionWithSourceStmt> annotatedResults) {










 Set<D> res = new HashSet<D>(); 










 for (AbstractionWithSourceStmt<N, D> abstractionWithSourceStmt : annotatedResults) {










 for (AbstractionWithSourceStmt abstractionWithSourceStmt : annotatedResults) {










 res.add(abstractionWithSourceStmt.getAbstraction());










 }










 return res;



......






......@@ -15,7 +15,7 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.SummarizableAbstraction;










import heros.solver.PathTrackingIFDSSolver.LinkedNode;





















import java.util.Collections;










import java.util.HashMap;



......@@ -36,16 +36,20 @@ import java.util.concurrent.TimeUnit;









 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 * 










 * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * reportable paths.  










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> see {@link IFDSSolver}










 * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * 				reportable paths.










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;



......@@ -57,8 +61,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 



......@@ -80,27 +84,27 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> problem, String debugName) {










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>>();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {










 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt> edge) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();



......@@ -112,9 +116,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PathEdge<N,AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt>>();










 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);



......@@ -127,13 +131,13 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }










 










 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 protected void propagate(AbstractionWithSourceStmt sourceVal, N target, AbstractionWithSourceStmt targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(), relatedCallSite);










 targetVal = new AbstractionWithSourceStmt(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 



......@@ -153,9 +157,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PathEdge<N, AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(DEBUG)










 System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge);










 super.processExit(pausedEdge);



......@@ -180,7 +184,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public static class AbstractionWithSourceStmt<N,D> implements SummarizableAbstraction<AbstractionWithSourceStmt<N, D>> {










 public class AbstractionWithSourceStmt implements PathTrackingIFDSSolver.LinkedNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;



......@@ -215,7 +219,6 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return result;










 }





















 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)



......@@ -224,6 +227,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)



......@@ -238,100 +242,82 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return true;










 }





















 @SuppressWarnings("unchecked")










 @Override










 public SummarizableAbstraction<AbstractionWithSourceStmt<N, D>> summarize() {










 D abs = abstraction;










 if(abstraction instanceof SummarizableAbstraction) {










 SummarizableAbstraction<D> inner = (SummarizableAbstraction<D>) abstraction;










 abs = (D) inner.summarize();










 }










 return new AbstractionWithSourceStmt<N, D>(abs, null);










 public void addNeighbor(AbstractionWithSourceStmt originalAbstraction) {










 getAbstraction().addNeighbor(originalAbstraction.getAbstraction());










 }





















 @SuppressWarnings("unchecked")










 @Override










 public SummarizableAbstraction<AbstractionWithSourceStmt<N, D>> expand(AbstractionWithSourceStmt<N, D> fullAbstraction) {










 D abs = abstraction;










 if(abstraction instanceof SummarizableAbstraction) {










 SummarizableAbstraction<D> inner = (SummarizableAbstraction<D>) abstraction;










 SummarizableAbstraction<D> full = (SummarizableAbstraction<D>) fullAbstraction.abstraction;










 abs = (D) inner.expand((D) full);










 }










 return new AbstractionWithSourceStmt<N, D>(abs, fullAbstraction.source);










 }










 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>>










 implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {










 private class AugmentedTabulationProblem implements IFDSTabulationProblem<N, AbstractionWithSourceStmt,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt<N, D>(delegate.zeroValue(), null);










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M>() {










 public FlowFunctions<N, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallFlowFunction(callStmt, destinationMethod));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 public FlowFunction<AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {










 private Set<AbstractionWithSourceStmt> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);





















 //optimization










 if(origTargets.equals(Collections.singleton(originalAbstraction))) return Collections.singleton(source); 










 










 Set<AbstractionWithSourceStmt<N, D>> res = new HashSet<AbstractionWithSourceStmt<N,D>>();










 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt<N,D>(d,source.getSourceStmt()));










 res.add(new AbstractionWithSourceStmt(d,source.getSourceStmt()));










 }










 return res;










 }



......@@ -362,23 +348,23 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {




















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt<N, D>>> initialSeeds() {










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt<N, D>>> res = new HashMap<N, Set<AbstractionWithSourceStmt<N,D>>>();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt<N, D>> resSet = new HashSet<AbstractionWithSourceStmt<N,D>>();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt<N,D>(d, stmt));










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt<N, D> zeroValue() {










 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }














......@@ -393,9 +379,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 return extractResults(bwSolver.ifdsResultsAt(stmt));










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt<N, D>> annotatedResults) {










 private Set<D> extractResults(Set<AbstractionWithSourceStmt> annotatedResults) {










 Set<D> res = new HashSet<D>(); 










 for (AbstractionWithSourceStmt<N, D> abstractionWithSourceStmt : annotatedResults) {










 for (AbstractionWithSourceStmt abstractionWithSourceStmt : annotatedResults) {










 res.add(abstractionWithSourceStmt.getAbstraction());










 }










 return res;



......


import heros.FlowFunctions;importheros.FlowFunctions;import heros.IFDSTabulationProblem;importheros.IFDSTabulationProblem;import heros.InterproceduralCFG;importheros.InterproceduralCFG;import heros.SummarizableAbstraction;importheros.SummarizableAbstractionSummarizableAbstraction;import heros.solver.PathTrackingIFDSSolver.LinkedNode;importheros.solver.PathTrackingIFDSSolver.LinkedNodesolver.PathTrackingIFDSSolver.LinkedNode;import java.util.Collections;importjava.util.Collections;import java.util.HashMap;importjava.util.HashMap; * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever). * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever). * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their * computed paths are realizable at the same time. * computed paths are realizable at the same time. *  *  * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form * reportable paths.   * reportable paths.   * * * @param <N> see {@link IFDSSolver} * @param <N> see {@link IFDSSolver} * @param <D> see {@link IFDSSolver} * @param <D> see {@link IFDSSolver} * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form * 				reportable paths. * 				reportable paths. * @param <M> see {@link IFDSSolver} * @param <M> see {@link IFDSSolver} * @param <I> see {@link IFDSSolver} * @param <I> see {@link IFDSSolver} */ */public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {publicclassBiDiIFDSSolver<N,D,M,IextendsInterproceduralCFG<N,M>>{public class BiDiIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {publicclassBiDiIFDSSolver<N,D extendsextends PathTrackingIFDSSolverPathTrackingIFDSSolver..LinkedNodeLinkedNode<<DD>,>M,IextendsInterproceduralCFG<N,M>>{ private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;privatefinalIFDSTabulationProblem<N,AbstractionWithSourceStmt<<NN,, DD>,>M,I>forwardProblem; private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;privatefinalIFDSTabulationProblem<N,AbstractionWithSourceStmt<<NN,, DD>,>M,I>backwardProblem; private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;privatefinalIFDSTabulationProblem<N,AbstractionWithSourceStmt,M,I>forwardProblem; private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;privatefinalIFDSTabulationProblem<N,AbstractionWithSourceStmt,M,I>backwardProblem; private final CountingThreadPoolExecutor sharedExecutor;privatefinalCountingThreadPoolExecutorsharedExecutor; private SingleDirectionSolver fwSolver;privateSingleDirectionSolverfwSolver; private SingleDirectionSolver bwSolver;privateSingleDirectionSolverbwSolver; if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {if(!forwardProblem.followReturnsPastSeeds()||!backwardProblem.followReturnsPastSeeds()){ throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); thrownewIllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); }} this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);this.forwardProblem=newAugmentedTabulationProblem<<NN,,DD,,MM,,II>(>forwardProblem); this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);this.backwardProblem=newAugmentedTabulationProblem<<NN,,DD,,MM,,II>(>backwardProblem); this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);this.forwardProblem=newAugmentedTabulationProblem(forwardProblem); this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);this.backwardProblem=newAugmentedTabulationProblem(backwardProblem); this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());this.sharedExecutor=newCountingThreadPoolExecutor(1,Math.max(1,forwardProblem.numThreads()),30,TimeUnit.SECONDS,newLinkedBlockingQueue<Runnable>()); }}  /**/**	 * Creates a solver to be used for each single analysis direction.	 * Creates a solver to be used for each single analysis direction.	 */	 */ protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> problem, String debugName) {protectedSingleDirectionSolvercreateSingleDirectionSolver(IFDSTabulationProblem<N,AbstractionWithSourceStmt<<NN,, DD>,>M,I>problem,StringdebugName){ protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> problem, String debugName) {protectedSingleDirectionSolvercreateSingleDirectionSolver(IFDSTabulationProblem<N,AbstractionWithSourceStmt,M,I>problem,StringdebugName){ return new SingleDirectionSolver(problem, debugName);returnnewSingleDirectionSolver(problem,debugName); }}  /**/**	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.	 */	 */ protected class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {protectedclassSingleDirectionSolverextendsIFDSSolver<N,AbstractionWithSourceStmt<<NN,, DD>,>M,I>{ protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {protectedclassSingleDirectionSolverextendsPathTrackingIFDSSolverPathTracking<N,AbstractionWithSourceStmt,M,I>{ private final String debugName;privatefinalStringdebugName; private SingleDirectionSolver otherSolver;privateSingleDirectionSolverotherSolver; private Set<N> leakedSources = new HashSet<N>();privateSet<N>leakedSources=newHashSet<N>(); private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =privateMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<<NN,,DD>>>>>pausedPathEdges= new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();newHashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<<NN,,DD>>>>();> private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =privateMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>>pausedPathEdges= new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>>();newHashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>>(); public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {publicSingleDirectionSolver(IFDSTabulationProblem<N,AbstractionWithSourceStmt<<NN,, DD>,>M,I>ifdsProblem,StringdebugName){ public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {publicSingleDirectionSolver(IFDSTabulationProblem<N,AbstractionWithSourceStmt,M,I>ifdsProblem,StringdebugName){ super(ifdsProblem);super(ifdsProblem); this.debugName = debugName;this.debugName=debugName; }}  @Override@Override protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {protectedvoidprocessExit(PathEdge<N,AbstractionWithSourceStmt<<NN,,DD>>>edge){ protected void processExit(PathEdge<N,AbstractionWithSourceStmt> edge) {protectedvoidprocessExit(PathEdge<N,AbstractionWithSourceStmt>edge){ //if an edge is originating from ZERO then to us this signifies an unbalanced return edge//if an edge is originating from ZERO then to us this signifies an unbalanced return edge if(edge.factAtSource().equals(zeroValue)) {if(edge.factAtSource().equals(zeroValue)){ N sourceStmt = edge.factAtTarget().getSourceStmt();NsourceStmt=edge.factAtTarget().getSourceStmt(); super.processExit(edge);super.processExit(edge); } else {}else{ //otherwise we pause this solver's edge and don't continue//otherwise we pause this solver's edge and don't continue Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);Set<PathEdge<N,AbstractionWithSourceStmt<<NN,,DD>>>>pausedEdges=pausedPathEdges.get(sourceStmt); Set<PathEdge<N,AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);Set<PathEdge<N,AbstractionWithSourceStmt>>pausedEdges=pausedPathEdges.get(sourceStmt); if(pausedEdges==null) {if(pausedEdges==null){ pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();pausedEdges=newHashSet<PathEdge<N,AbstractionWithSourceStmt<<NN,,DD>>>();> pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt>>();pausedEdges=newHashSet<PathEdge<N,AbstractionWithSourceStmt>>(); pausedPathEdges.put(sourceStmt,pausedEdges);pausedPathEdges.put(sourceStmt,pausedEdges); } } pausedEdges.add(edge);pausedEdges.add(edge); }} }}  protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {protectedvoidpropagate(AbstractionWithSourceStmt<<NN,,DD>>sourceVal,Ntarget,AbstractionWithSourceStmt<<NN,,DD>>targetVal,EdgeFunction<IFDSSolver.BinaryDomain>f,NrelatedCallSite,booleanisUnbalancedReturn){ protected void propagate(AbstractionWithSourceStmt sourceVal, N target, AbstractionWithSourceStmt targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {protectedvoidpropagate(AbstractionWithSourceStmtsourceVal,Ntarget,AbstractionWithSourceStmttargetVal,EdgeFunction<IFDSSolver.BinaryDomain>f,NrelatedCallSite,booleanisUnbalancedReturn){ //the follwing branch will be taken only on an unbalanced return//the follwing branch will be taken only on an unbalanced return if(isUnbalancedReturn) {if(isUnbalancedReturn){ assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";assertsourceVal.getSourceStmt()==null:"source value should have no statement attached";  //attach target statement as new "source" statement to track//attach target statement as new "source" statement to track targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(), relatedCallSite);targetVal=newAbstractionWithSourceStmt<<NN,, DD>(>targetVal.getAbstraction(),relatedCallSite); targetVal = new AbstractionWithSourceStmt(targetVal.getAbstraction(), relatedCallSite);targetVal=newAbstractionWithSourceStmt(targetVal.getAbstraction(),relatedCallSite);  super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);super.propagate(sourceVal,target,targetVal,f,relatedCallSite,isUnbalancedReturn); } else { }else{		 * Unpauses all edges associated with the given source statement.		 * Unpauses all edges associated with the given source statement.		 */		 */ private void unpausePathEdgesForSource(N sourceStmt) {privatevoidunpausePathEdgesForSource(NsourceStmt){ Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);Set<PathEdge<N,AbstractionWithSourceStmt<<NN,, DD>>>>pausedEdges=pausedPathEdges.get(sourceStmt); Set<PathEdge<N, AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);Set<PathEdge<N,AbstractionWithSourceStmt>>pausedEdges=pausedPathEdges.get(sourceStmt); if(pausedEdges!=null) {if(pausedEdges!=null){ for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {for(PathEdge<N,AbstractionWithSourceStmt<<NN,, DD>>>pausedEdge:pausedEdges){ for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {for(PathEdge<N,AbstractionWithSourceStmt>pausedEdge:pausedEdges){ if(DEBUG)if(DEBUG) System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge);System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge); super.processExit(pausedEdge);super.processExit(pausedEdge);	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the	 * abstraction the source statement from which this fact originated. 	 * abstraction the source statement from which this fact originated. 	 */	 */ public static class AbstractionWithSourceStmt<N,D> implements SummarizableAbstraction<AbstractionWithSourceStmt<N, D>> {publicstaticstatic classAbstractionWithSourceStmt<<NN,,DD>>implementsSummarizableAbstractionSummarizableAbstraction<AbstractionWithSourceStmt<<NN,, DD>>>{ public class AbstractionWithSourceStmt implements PathTrackingIFDSSolver.LinkedNode<AbstractionWithSourceStmt> {publicclassAbstractionWithSourceStmtimplementsPathTrackingIFDSSolverPathTrackingIFDSSolver..LinkedNodeLinkedNode<AbstractionWithSourceStmt>{ protected final D abstraction;protectedfinalDabstraction; protected final N source;protectedfinalNsource; return result;returnresult; }} @SuppressWarnings("rawtypes")@SuppressWarnings("rawtypes") @Override@Override public boolean equals(Object obj) {publicbooleanequals(Objectobj){ if (this == obj)if(this==obj) return false;returnfalse; if (getClass() != obj.getClass())if(getClass()!=obj.getClass()) return false;returnfalse; @SuppressWarnings("unchecked")@SuppressWarnings("unchecked") AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;AbstractionWithSourceStmtother=(AbstractionWithSourceStmt)obj; if (abstraction == null) {if(abstraction==null){ if (other.abstraction != null)if(other.abstraction!=null) return true;returntrue; }} @SuppressWarnings("unchecked")@SuppressWarnings("unchecked") @Override@Override public SummarizableAbstraction<AbstractionWithSourceStmt<N, D>> summarize() {publicSummarizableAbstraction<AbstractionWithSourceStmt<N,D>>summarize(){ D abs = abstraction;Dabs=abstraction; if(abstraction instanceof SummarizableAbstraction) {if(abstractioninstanceofSummarizableAbstraction){ SummarizableAbstraction<D> inner = (SummarizableAbstraction<D>) abstraction;SummarizableAbstraction<D>inner=(SummarizableAbstraction<D>)abstraction; abs = (D) inner.summarize();abs=(D)inner.summarize(); }} return new AbstractionWithSourceStmt<N, D>(abs, null);returnnewAbstractionWithSourceStmt<N,D>(abs,null); public void addNeighbor(AbstractionWithSourceStmt originalAbstraction) {publicvoidaddNeighbor(AbstractionWithSourceStmtoriginalAbstraction){ getAbstraction().addNeighbor(originalAbstraction.getAbstraction());getAbstraction().addNeighbor(originalAbstraction.getAbstraction()); }} @SuppressWarnings("unchecked")@SuppressWarnings("unchecked") @Override@Override public SummarizableAbstraction<AbstractionWithSourceStmt<N, D>> expand(AbstractionWithSourceStmt<N, D> fullAbstraction) {publicSummarizableAbstraction<AbstractionWithSourceStmt<N,D>>expand(AbstractionWithSourceStmt<N,D>fullAbstraction){ D abs = abstraction;Dabs=abstraction; if(abstraction instanceof SummarizableAbstraction) {if(abstractioninstanceofSummarizableAbstraction){ SummarizableAbstraction<D> inner = (SummarizableAbstraction<D>) abstraction;SummarizableAbstraction<D>inner=(SummarizableAbstraction<D>)abstraction; SummarizableAbstraction<D> full = (SummarizableAbstraction<D>) fullAbstraction.abstraction;SummarizableAbstraction<D>full=(SummarizableAbstraction<D>)fullAbstraction.abstraction; abs = (D) inner.expand((D) full);abs=(D)inner.expand((D)full); }} return new AbstractionWithSourceStmt<N, D>(abs, fullAbstraction.source);returnnewAbstractionWithSourceStmt<N,D>(abs,fullAbstraction.source); }} }}  /**/**	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.	 */	 */ private static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>>privatestaticclassAugmentedTabulationProblem<N,D,M,IextendsInterproceduralCFG<N,M>> implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {implementsIFDSTabulationProblem<N,BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I>{ private class AugmentedTabulationProblem implements IFDSTabulationProblem<N, AbstractionWithSourceStmt,M,I> {privateclassAugmentedTabulationProblemimplementsIFDSTabulationProblem<N,AbstractionWithSourceStmt,M,I>{ private final IFDSTabulationProblem<N,D,M,I> delegate;privatefinalIFDSTabulationProblem<N,D,M,I>delegate; private final AbstractionWithSourceStmt<N, D> ZERO;privatefinalAbstractionWithSourceStmt<<NN,, DD>>ZERO; private final AbstractionWithSourceStmt ZERO;privatefinalAbstractionWithSourceStmtZERO; private final FlowFunctions<N, D, M> originalFunctions;privatefinalFlowFunctions<N,D,M>originalFunctions;  public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {publicAugmentedTabulationProblem(IFDSTabulationProblem<N,D,M,I>delegate){ this.delegate = delegate;this.delegate=delegate; originalFunctions = this.delegate.flowFunctions();originalFunctions=this.delegate.flowFunctions(); ZERO = new AbstractionWithSourceStmt<N, D>(delegate.zeroValue(), null);ZERO=newAbstractionWithSourceStmt<<NN,, DD>(>delegate.zeroValue(),null); ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);ZERO=newAbstractionWithSourceStmt(delegate.zeroValue(),null); }} @Override@Override public FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M> flowFunctions() {publicFlowFunctions<N,AbstractionWithSourceStmt<<NN,, DD>,>M>flowFunctions(){ return new FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M>() {returnnewFlowFunctions<N,AbstractionWithSourceStmt<<NN,, DD>,>M>(){ public FlowFunctions<N, AbstractionWithSourceStmt, M> flowFunctions() {publicFlowFunctions<N,AbstractionWithSourceStmt,M>flowFunctions(){ return new FlowFunctions<N, AbstractionWithSourceStmt, M>() {returnnewFlowFunctions<N,AbstractionWithSourceStmt,M>(){ @Override@Override public FlowFunction<AbstractionWithSourceStmt<N, D>> getNormalFlowFunction(final N curr, final N succ) {publicFlowFunction<AbstractionWithSourceStmt<<NN,, DD>>>getNormalFlowFunction(finalNcurr,finalNsucc){ return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {returnnewFlowFunction<BiDiIFDSSolverBiDiIFDSSolver..AbstractionWithSourceStmt<<NN,,DD>>()>{ public FlowFunction<AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {publicFlowFunction<AbstractionWithSourceStmt>getNormalFlowFunction(finalNcurr,finalNsucc){ return new FlowFunction<AbstractionWithSourceStmt>() {returnnewFlowFunction<AbstractionWithSourceStmt>(){ @Override@Override public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {publicSet<AbstractionWithSourceStmt<<NN,, DD>>>computeTargets(AbstractionWithSourceStmt<<NN,, DD>>source){ public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {publicSet<AbstractionWithSourceStmt>computeTargets(AbstractionWithSourceStmtsource){ return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));returncopyOverSourceStmts(source,originalFunctions.getNormalFlowFunction(curr,succ)); }} };}; }} @Override@Override public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallFlowFunction(final N callStmt, final M destinationMethod) {publicFlowFunction<AbstractionWithSourceStmt<<NN,, DD>>>getCallFlowFunction(finalNcallStmt,finalMdestinationMethod){ return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {returnnewFlowFunction<BiDiIFDSSolverBiDiIFDSSolver..AbstractionWithSourceStmt<<NN,,DD>>()>{ public FlowFunction<AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {publicFlowFunction<AbstractionWithSourceStmt>getCallFlowFunction(finalNcallStmt,finalMdestinationMethod){ return new FlowFunction<AbstractionWithSourceStmt>() {returnnewFlowFunction<AbstractionWithSourceStmt>(){ @Override@Override public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {publicSet<AbstractionWithSourceStmt<<NN,, DD>>>computeTargets(AbstractionWithSourceStmt<<NN,, DD>>source){ public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {publicSet<AbstractionWithSourceStmt>computeTargets(AbstractionWithSourceStmtsource){ return copyOverSourceStmts(source, originalFunctions.getCallFlowFunction(callStmt, destinationMethod));returncopyOverSourceStmts(source,originalFunctions.getCallFlowFunction(callStmt,destinationMethod)); }} };}; }} @Override@Override public FlowFunction<AbstractionWithSourceStmt<N, D>> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {publicFlowFunction<AbstractionWithSourceStmt<<NN,, DD>>>getReturnFlowFunction(finalNcallSite,finalMcalleeMethod,finalNexitStmt,finalNreturnSite){ return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {returnnewFlowFunction<BiDiIFDSSolverBiDiIFDSSolver..AbstractionWithSourceStmt<<NN,,DD>>()>{ public FlowFunction<AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {publicFlowFunction<AbstractionWithSourceStmt>getReturnFlowFunction(finalNcallSite,finalMcalleeMethod,finalNexitStmt,finalNreturnSite){ return new FlowFunction<AbstractionWithSourceStmt>() {returnnewFlowFunction<AbstractionWithSourceStmt>(){ @Override@Override public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {publicSet<AbstractionWithSourceStmt<<NN,, DD>>>computeTargets(AbstractionWithSourceStmt<<NN,, DD>>source){ public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {publicSet<AbstractionWithSourceStmt>computeTargets(AbstractionWithSourceStmtsource){ return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));returncopyOverSourceStmts(source,originalFunctions.getReturnFlowFunction(callSite,calleeMethod,exitStmt,returnSite)); }} };}; }} @Override@Override public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(final N callSite, final N returnSite) {publicFlowFunction<AbstractionWithSourceStmt<<NN,, DD>>>getCallToReturnFlowFunction(finalNcallSite,finalNreturnSite){ return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {returnnewFlowFunction<BiDiIFDSSolverBiDiIFDSSolver..AbstractionWithSourceStmt<<NN,,DD>>()>{ public FlowFunction<AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {publicFlowFunction<AbstractionWithSourceStmt>getCallToReturnFlowFunction(finalNcallSite,finalNreturnSite){ return new FlowFunction<AbstractionWithSourceStmt>() {returnnewFlowFunction<AbstractionWithSourceStmt>(){ @Override@Override public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {publicSet<AbstractionWithSourceStmt<<NN,, DD>>>computeTargets(AbstractionWithSourceStmt<<NN,, DD>>source){ public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {publicSet<AbstractionWithSourceStmt>computeTargets(AbstractionWithSourceStmtsource){ return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));returncopyOverSourceStmts(source,originalFunctions.getCallToReturnFlowFunction(callSite,returnSite)); }} };}; }}  private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {privateSet<AbstractionWithSourceStmt<<NN,, DD>>>copyOverSourceStmts(AbstractionWithSourceStmt<<NN,, DD>>source,FlowFunction<D>originalFunction){ private Set<AbstractionWithSourceStmt> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<D> originalFunction) {privateSet<AbstractionWithSourceStmt>copyOverSourceStmts(AbstractionWithSourceStmtsource,FlowFunction<D>originalFunction){ D originalAbstraction = source.getAbstraction();DoriginalAbstraction=source.getAbstraction(); Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);Set<D>origTargets=originalFunction.computeTargets(originalAbstraction); //optimization//optimization if(origTargets.equals(Collections.singleton(originalAbstraction))) return Collections.singleton(source); if(origTargets.equals(Collections.singleton(originalAbstraction)))returnCollections.singleton(source);  Set<AbstractionWithSourceStmt<N, D>> res = new HashSet<AbstractionWithSourceStmt<N,D>>();Set<AbstractionWithSourceStmt<<NN,, DD>>>res=newHashSet<AbstractionWithSourceStmt<<NN,,DD>>();> Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();Set<AbstractionWithSourceStmt>res=newHashSet<AbstractionWithSourceStmt>(); for(D d: origTargets) {for(Dd:origTargets){ res.add(new AbstractionWithSourceStmt<N,D>(d,source.getSourceStmt()));res.add(newAbstractionWithSourceStmt<<NN,,DD>(>d,source.getSourceStmt())); res.add(new AbstractionWithSourceStmt(d,source.getSourceStmt()));res.add(newAbstractionWithSourceStmt(d,source.getSourceStmt())); }} return res;returnres; }} /* attaches the original seed statement to the abstraction/* attaches the original seed statement to the abstraction		 */		 */ public Map<N,Set<AbstractionWithSourceStmt<N, D>>> initialSeeds() {publicMap<N,Set<AbstractionWithSourceStmt<<NN,, DD>>>>initialSeeds(){ public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {publicMap<N,Set<AbstractionWithSourceStmt>>initialSeeds(){ Map<N, Set<D>> originalSeeds = delegate.initialSeeds();Map<N,Set<D>>originalSeeds=delegate.initialSeeds(); Map<N,Set<AbstractionWithSourceStmt<N, D>>> res = new HashMap<N, Set<AbstractionWithSourceStmt<N,D>>>();Map<N,Set<AbstractionWithSourceStmt<<NN,, DD>>>>res=newHashMap<N,Set<AbstractionWithSourceStmt<<NN,,DD>>>();> Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();Map<N,Set<AbstractionWithSourceStmt>>res=newHashMap<N,Set<AbstractionWithSourceStmt>>(); for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {for(Entry<N,Set<D>>entry:originalSeeds.entrySet()){ N stmt = entry.getKey();Nstmt=entry.getKey(); Set<D> seeds = entry.getValue();Set<D>seeds=entry.getValue(); Set<AbstractionWithSourceStmt<N, D>> resSet = new HashSet<AbstractionWithSourceStmt<N,D>>();Set<AbstractionWithSourceStmt<<NN,, DD>>>resSet=newHashSet<AbstractionWithSourceStmt<<NN,,DD>>();> Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();Set<AbstractionWithSourceStmt>resSet=newHashSet<AbstractionWithSourceStmt>(); for (D d : seeds) {for(Dd:seeds){ //attach source stmt to abstraction//attach source stmt to abstraction resSet.add(new AbstractionWithSourceStmt<N,D>(d, stmt));resSet.add(newAbstractionWithSourceStmt<<NN,,DD>(>d,stmt)); resSet.add(new AbstractionWithSourceStmt(d, stmt));resSet.add(newAbstractionWithSourceStmt(d,stmt)); }} res.put(stmt, resSet);res.put(stmt,resSet); } } return res;returnres; }} public AbstractionWithSourceStmt<N, D> zeroValue() {publicAbstractionWithSourceStmt<<NN,, DD>>zeroValue(){ public AbstractionWithSourceStmt zeroValue() {publicAbstractionWithSourceStmtzeroValue(){ return ZERO;returnZERO; }} return extractResults(bwSolver.ifdsResultsAt(stmt));returnextractResults(bwSolver.ifdsResultsAt(stmt)); }} private Set<D> extractResults(Set<AbstractionWithSourceStmt<N, D>> annotatedResults) {privateSet<D>extractResults(Set<AbstractionWithSourceStmt<<NN,, DD>>>annotatedResults){ private Set<D> extractResults(Set<AbstractionWithSourceStmt> annotatedResults) {privateSet<D>extractResults(Set<AbstractionWithSourceStmt>annotatedResults){ Set<D> res = new HashSet<D>(); Set<D>res=newHashSet<D>(); for (AbstractionWithSourceStmt<N, D> abstractionWithSourceStmt : annotatedResults) {for(AbstractionWithSourceStmt<<NN,, DD>>abstractionWithSourceStmt:annotatedResults){ for (AbstractionWithSourceStmt abstractionWithSourceStmt : annotatedResults) {for(AbstractionWithSourceStmtabstractionWithSourceStmt:annotatedResults){ res.add(abstractionWithSourceStmt.getAbstraction());res.add(abstractionWithSourceStmt.getAbstraction()); }} return res;returnres;








src/heros/solver/PathTrackingIFDSSolver.java



0 → 100644







View file @ d9ac548b













/*******************************************************************************










 * Copyright (c) 2013 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Map;





















import com.google.common.collect.Maps;





















/**










 * An {@link IFDSSolver} that tracks paths for reporting. To do so, it requires that data-flow abstractions implement the LinkedNode interface.










 * The solver implements a cache of data-flow facts for each statement and source value. If for the same statement and source value the same










 * target value is seen again (as determined through a cache hit), then the solver propagates the cached value but at the same time links










 * both target values with one another.










 *  










 * @author Eric Bodden










 */










public class PathTrackingIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 /**










	 * A data-flow fact that can be linked with other equal facts.










	 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










	 */










 public static interface LinkedNode<D> {










 /**










		 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged










		 * with this one of paths were not being tracked.










		 */










 public void addNeighbor(D originalAbstraction);










 }





















 public PathTrackingIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 super(ifdsProblem);










 }





















 private final Map<CacheEntry, LinkedNode<D>> cache = Maps.newHashMap();










 










 @Override










 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 CacheEntry currentCacheEntry = new CacheEntry(target, sourceVal, targetVal);





















 boolean propagate = false;










 synchronized (this) {










 if (cache.containsKey(currentCacheEntry)) {










 LinkedNode<D> existingTargetVal = cache.get(currentCacheEntry);










 if (existingTargetVal != targetVal)










 existingTargetVal.addNeighbor(targetVal);










 } else {










 cache.put(currentCacheEntry, targetVal);










 propagate = true;










 }










 }





















 if (propagate)










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 










 };










 










 










 private class CacheEntry {










 private N n;










 private D sourceVal;










 private D targetVal;





















 public CacheEntry(N n, D sourceVal, D targetVal) {










 super();










 this.n = n;










 this.sourceVal = sourceVal;










 this.targetVal = targetVal;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((sourceVal == null) ? 0 : sourceVal.hashCode());










 result = prime * result + ((targetVal == null) ? 0 : targetVal.hashCode());










 result = prime * result + ((n == null) ? 0 : n.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings({ "unchecked" })










 CacheEntry other = (CacheEntry) obj;










 if (sourceVal == null) {










 if (other.sourceVal != null)










 return false;










 } else if (!sourceVal.equals(other.sourceVal))










 return false;










 if (targetVal == null) {










 if (other.targetVal != null)










 return false;










 } else if (!targetVal.equals(other.targetVal))










 return false;










 if (n == null) {










 if (other.n != null)










 return false;










 } else if (!n.equals(other.n))










 return false;










 return true;










 }










 } 










 
































}












src/heros/solver/PathTrackingIFDSSolver.java



0 → 100644







View file @ d9ac548b








src/heros/solver/PathTrackingIFDSSolver.java



0 → 100644









View file @ d9ac548b


d9ac548b










/*******************************************************************************










 * Copyright (c) 2013 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Map;





















import com.google.common.collect.Maps;





















/**










 * An {@link IFDSSolver} that tracks paths for reporting. To do so, it requires that data-flow abstractions implement the LinkedNode interface.










 * The solver implements a cache of data-flow facts for each statement and source value. If for the same statement and source value the same










 * target value is seen again (as determined through a cache hit), then the solver propagates the cached value but at the same time links










 * both target values with one another.










 *  










 * @author Eric Bodden










 */










public class PathTrackingIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 /**










	 * A data-flow fact that can be linked with other equal facts.










	 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










	 */










 public static interface LinkedNode<D> {










 /**










		 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged










		 * with this one of paths were not being tracked.










		 */










 public void addNeighbor(D originalAbstraction);










 }





















 public PathTrackingIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 super(ifdsProblem);










 }





















 private final Map<CacheEntry, LinkedNode<D>> cache = Maps.newHashMap();










 










 @Override










 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 CacheEntry currentCacheEntry = new CacheEntry(target, sourceVal, targetVal);





















 boolean propagate = false;










 synchronized (this) {










 if (cache.containsKey(currentCacheEntry)) {










 LinkedNode<D> existingTargetVal = cache.get(currentCacheEntry);










 if (existingTargetVal != targetVal)










 existingTargetVal.addNeighbor(targetVal);










 } else {










 cache.put(currentCacheEntry, targetVal);










 propagate = true;










 }










 }





















 if (propagate)










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 










 };










 










 










 private class CacheEntry {










 private N n;










 private D sourceVal;










 private D targetVal;





















 public CacheEntry(N n, D sourceVal, D targetVal) {










 super();










 this.n = n;










 this.sourceVal = sourceVal;










 this.targetVal = targetVal;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((sourceVal == null) ? 0 : sourceVal.hashCode());










 result = prime * result + ((targetVal == null) ? 0 : targetVal.hashCode());










 result = prime * result + ((n == null) ? 0 : n.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings({ "unchecked" })










 CacheEntry other = (CacheEntry) obj;










 if (sourceVal == null) {










 if (other.sourceVal != null)










 return false;










 } else if (!sourceVal.equals(other.sourceVal))










 return false;










 if (targetVal == null) {










 if (other.targetVal != null)










 return false;










 } else if (!targetVal.equals(other.targetVal))










 return false;










 if (n == null) {










 if (other.n != null)










 return false;










 } else if (!n.equals(other.n))










 return false;










 return true;










 }










 } 










 
































}













/*******************************************************************************










 * Copyright (c) 2013 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Map;





















import com.google.common.collect.Maps;





















/**










 * An {@link IFDSSolver} that tracks paths for reporting. To do so, it requires that data-flow abstractions implement the LinkedNode interface.










 * The solver implements a cache of data-flow facts for each statement and source value. If for the same statement and source value the same










 * target value is seen again (as determined through a cache hit), then the solver propagates the cached value but at the same time links










 * both target values with one another.










 *  










 * @author Eric Bodden










 */










public class PathTrackingIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 /**










	 * A data-flow fact that can be linked with other equal facts.










	 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










	 */










 public static interface LinkedNode<D> {










 /**










		 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged










		 * with this one of paths were not being tracked.










		 */










 public void addNeighbor(D originalAbstraction);










 }





















 public PathTrackingIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 super(ifdsProblem);










 }





















 private final Map<CacheEntry, LinkedNode<D>> cache = Maps.newHashMap();










 










 @Override










 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 CacheEntry currentCacheEntry = new CacheEntry(target, sourceVal, targetVal);





















 boolean propagate = false;










 synchronized (this) {










 if (cache.containsKey(currentCacheEntry)) {










 LinkedNode<D> existingTargetVal = cache.get(currentCacheEntry);










 if (existingTargetVal != targetVal)










 existingTargetVal.addNeighbor(targetVal);










 } else {










 cache.put(currentCacheEntry, targetVal);










 propagate = true;










 }










 }





















 if (propagate)










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 










 };










 










 










 private class CacheEntry {










 private N n;










 private D sourceVal;










 private D targetVal;





















 public CacheEntry(N n, D sourceVal, D targetVal) {










 super();










 this.n = n;










 this.sourceVal = sourceVal;










 this.targetVal = targetVal;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((sourceVal == null) ? 0 : sourceVal.hashCode());










 result = prime * result + ((targetVal == null) ? 0 : targetVal.hashCode());










 result = prime * result + ((n == null) ? 0 : n.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings({ "unchecked" })










 CacheEntry other = (CacheEntry) obj;










 if (sourceVal == null) {










 if (other.sourceVal != null)










 return false;










 } else if (!sourceVal.equals(other.sourceVal))










 return false;










 if (targetVal == null) {










 if (other.targetVal != null)










 return false;










 } else if (!targetVal.equals(other.targetVal))










 return false;










 if (n == null) {










 if (other.n != null)










 return false;










 } else if (!n.equals(other.n))










 return false;










 return true;










 }










 } 










 
































}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2013 Eric Bodden. * Copyright (c) 2013 Eric Bodden. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Eric Bodden - initial API and implementation *     Eric Bodden - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.solver;packageheros.solver;import heros.EdgeFunction;importheros.EdgeFunction;import heros.IFDSTabulationProblem;importheros.IFDSTabulationProblem;import heros.InterproceduralCFG;importheros.InterproceduralCFG;import java.util.Map;importjava.util.Map;import com.google.common.collect.Maps;importcom.google.common.collect.Maps;/**/** * An {@link IFDSSolver} that tracks paths for reporting. To do so, it requires that data-flow abstractions implement the LinkedNode interface. * An {@link IFDSSolver} that tracks paths for reporting. To do so, it requires that data-flow abstractions implement the LinkedNode interface. * The solver implements a cache of data-flow facts for each statement and source value. If for the same statement and source value the same * The solver implements a cache of data-flow facts for each statement and source value. If for the same statement and source value the same * target value is seen again (as determined through a cache hit), then the solver propagates the cached value but at the same time links * target value is seen again (as determined through a cache hit), then the solver propagates the cached value but at the same time links * both target values with one another. * both target values with one another. *   *   * @author Eric Bodden * @author Eric Bodden */ */public class PathTrackingIFDSSolver<N, D extends PathTrackingIFDSSolver.LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {publicclassPathTrackingIFDSSolver<N,DextendsPathTrackingIFDSSolver.LinkedNode<D>,M,IextendsInterproceduralCFG<N,M>>extendsIFDSSolver<N,D,M,I>{ /**/**	 * A data-flow fact that can be linked with other equal facts.	 * A data-flow fact that can be linked with other equal facts.	 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!	 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!	 */	 */ public static interface LinkedNode<D> {publicstaticinterfaceLinkedNode<D>{ /**/**		 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged		 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged		 * with this one of paths were not being tracked.		 * with this one of paths were not being tracked.		 */		 */ public void addNeighbor(D originalAbstraction);publicvoidaddNeighbor(DoriginalAbstraction); }} public PathTrackingIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {publicPathTrackingIFDSSolver(IFDSTabulationProblem<N,D,M,I>ifdsProblem){ super(ifdsProblem);super(ifdsProblem); }} private final Map<CacheEntry, LinkedNode<D>> cache = Maps.newHashMap();privatefinalMap<CacheEntry,LinkedNode<D>>cache=Maps.newHashMap();  @Override@Override protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {protectedvoidpropagate(DsourceVal,Ntarget,DtargetVal,EdgeFunction<IFDSSolver.BinaryDomain>f,NrelatedCallSite,booleanisUnbalancedReturn){ CacheEntry currentCacheEntry = new CacheEntry(target, sourceVal, targetVal);CacheEntrycurrentCacheEntry=newCacheEntry(target,sourceVal,targetVal); boolean propagate = false;booleanpropagate=false; synchronized (this) {synchronized(this){ if (cache.containsKey(currentCacheEntry)) {if(cache.containsKey(currentCacheEntry)){ LinkedNode<D> existingTargetVal = cache.get(currentCacheEntry);LinkedNode<D>existingTargetVal=cache.get(currentCacheEntry); if (existingTargetVal != targetVal)if(existingTargetVal!=targetVal) existingTargetVal.addNeighbor(targetVal);existingTargetVal.addNeighbor(targetVal); } else {}else{ cache.put(currentCacheEntry, targetVal);cache.put(currentCacheEntry,targetVal); propagate = true;propagate=true; }} }} if (propagate)if(propagate) super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);super.propagate(sourceVal,target,targetVal,f,relatedCallSite,isUnbalancedReturn);  };};   private class CacheEntry {privateclassCacheEntry{ private N n;privateNn; private D sourceVal;privateDsourceVal; private D targetVal;privateDtargetVal; public CacheEntry(N n, D sourceVal, D targetVal) {publicCacheEntry(Nn,DsourceVal,DtargetVal){ super();super(); this.n = n;this.n=n; this.sourceVal = sourceVal;this.sourceVal=sourceVal; this.targetVal = targetVal;this.targetVal=targetVal; }} @Override@Override public int hashCode() {publicinthashCode(){ final int prime = 31;finalintprime=31; int result = 1;intresult=1; result = prime * result + ((sourceVal == null) ? 0 : sourceVal.hashCode());result=prime*result+((sourceVal==null)?0:sourceVal.hashCode()); result = prime * result + ((targetVal == null) ? 0 : targetVal.hashCode());result=prime*result+((targetVal==null)?0:targetVal.hashCode()); result = prime * result + ((n == null) ? 0 : n.hashCode());result=prime*result+((n==null)?0:n.hashCode()); return result;returnresult; }} @Override@Override public boolean equals(Object obj) {publicbooleanequals(Objectobj){ if (this == obj)if(this==obj) return true;returntrue; if (obj == null)if(obj==null) return false;returnfalse; if (getClass() != obj.getClass())if(getClass()!=obj.getClass()) return false;returnfalse; @SuppressWarnings({ "unchecked" })@SuppressWarnings({"unchecked"}) CacheEntry other = (CacheEntry) obj;CacheEntryother=(CacheEntry)obj; if (sourceVal == null) {if(sourceVal==null){ if (other.sourceVal != null)if(other.sourceVal!=null) return false;returnfalse; } else if (!sourceVal.equals(other.sourceVal))}elseif(!sourceVal.equals(other.sourceVal)) return false;returnfalse; if (targetVal == null) {if(targetVal==null){ if (other.targetVal != null)if(other.targetVal!=null) return false;returnfalse; } else if (!targetVal.equals(other.targetVal))}elseif(!targetVal.equals(other.targetVal)) return false;returnfalse; if (n == null) {if(n==null){ if (other.n != null)if(other.n!=null) return false;returnfalse; } else if (!n.equals(other.n))}elseif(!n.equals(other.n)) return false;returnfalse; return true;returntrue; }} } } }}









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






