



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

5b67f79d















Commit
5b67f79d


authored
Jan 25, 2015
by


Eric Bodden



Browse files




Fix for a long outstanding bug in the value computation of the IDE phase if...

Fix for a long outstanding bug in the value computation of the IDE phase if followReturnPastSeeds is used. Looking at the original IDE paper, one will see that in phase II the algorithm does the following:
1.) propagate values from all start nodes to call nodes and from call nodes to start nodes of callees (!!!)
2.) propagate from all start nodes to all non call-start nodes
In Heros, however, we do not propagate from *all* start nodes to call nodes but only from the initial seeds!
The problem is now that with followReturnPastSeeds=true we have an unbalanced problem, in which we propagate into callers that have no calls ever processed. In result, propagating from initial seeds to calls is not enough, as this will only enable value computation in callees, but not in callers.
The implemented fix memorizes all values propagated into callers in an unbalanced way as so-called "caller seeds" and then uses these also as seeds for value computation. This should fix the problem without having to compute values starting at any start node of any procedure of the program.






parent
6939a472













Changes
1




Show whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 5b67f79d








...@@ -94,6 +94,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -94,6 +94,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 @SynchronizedBy("consistent lock on field")





 @SynchronizedBy("consistent lock on field")







 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();





 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();























 //stores the initial values that are propagated into callers independent bottom up,









 //if followReturnPastSeeds is enabled









 @SynchronizedBy("consistent lock on field")









 protected final Map<N,Set<D>> callerSeeds;

















 @DontSynchronize("stateless")





 @DontSynchronize("stateless")







 protected final FlowFunctions<N, D, M> flowFunctions;





 protected final FlowFunctions<N, D, M> flowFunctions;

















...@@ -183,6 +188,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -183,6 +188,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 this.flowFunctions = flowFunctions;





 this.flowFunctions = flowFunctions;







 this.edgeFunctions = edgeFunctions;





 this.edgeFunctions = edgeFunctions;







 this.initialSeeds = tabulationProblem.initialSeeds();





 this.initialSeeds = tabulationProblem.initialSeeds();









 this.callerSeeds = new HashMap<N, Set<D>>();







 this.valueLattice = tabulationProblem.joinLattice();





 this.valueLattice = tabulationProblem.joinLattice();







 this.allTop = tabulationProblem.allTopFunction();





 this.allTop = tabulationProblem.allTopFunction();







 this.jumpFn = new JumpFunctions<N,D,V>(allTop);





 this.jumpFn = new JumpFunctions<N,D,V>(allTop);



...@@ -486,6 +492,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -486,6 +492,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 for(D d5: targets) {





 for(D d5: targets) {







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);





 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);









 //register for value processing (2nd IDE phase)









 synchronized (callerSeeds) {









 Set<D> oldCallerSeeds = callerSeeds.get(retSiteC);









 if(oldCallerSeeds==null) {









 oldCallerSeeds = new HashSet<D>();









 callerSeeds.put(retSiteC, oldCallerSeeds);









 }









 oldCallerSeeds.add(d5);









 }







 }





 }







 }





 }







 }





 }



...@@ -620,7 +635,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -620,7 +635,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 private void computeValues() { 





 private void computeValues() { 







 //Phase II(i)





 //Phase II(i)







 logger.debug("Computing the final values for the edge functions");





 logger.debug("Computing the final values for the edge functions");







 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {





 //union of initial seeds and caller seeds









 Map<N, Set<D>> allSeeds = new HashMap<N, Set<D>>(initialSeeds);









 for(Entry<N, Set<D>> seed: callerSeeds.entrySet()) {









 Set<D> existing = allSeeds.get(seed.getKey());









 if(existing!=null) {









 existing.addAll(seed.getValue());









 } else {









 allSeeds.put(seed.getKey(), seed.getValue());









 }









 }









 //do processing









 for(Entry<N, Set<D>> seed: allSeeds.entrySet()) {







 N startPoint = seed.getKey();





 N startPoint = seed.getKey();







 for(D val: seed.getValue()) {





 for(D val: seed.getValue()) {







 setVal(startPoint, val, valueLattice.bottomElement());





 setVal(startPoint, val, valueLattice.bottomElement());



......

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

5b67f79d















Commit
5b67f79d


authored
Jan 25, 2015
by


Eric Bodden



Browse files




Fix for a long outstanding bug in the value computation of the IDE phase if...

Fix for a long outstanding bug in the value computation of the IDE phase if followReturnPastSeeds is used. Looking at the original IDE paper, one will see that in phase II the algorithm does the following:
1.) propagate values from all start nodes to call nodes and from call nodes to start nodes of callees (!!!)
2.) propagate from all start nodes to all non call-start nodes
In Heros, however, we do not propagate from *all* start nodes to call nodes but only from the initial seeds!
The problem is now that with followReturnPastSeeds=true we have an unbalanced problem, in which we propagate into callers that have no calls ever processed. In result, propagating from initial seeds to calls is not enough, as this will only enable value computation in callees, but not in callers.
The implemented fix memorizes all values propagated into callers in an unbalanced way as so-called "caller seeds" and then uses these also as seeds for value computation. This should fix the problem without having to compute values starting at any start node of any procedure of the program.






parent
6939a472













Changes
1




Show whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 5b67f79d








...@@ -94,6 +94,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -94,6 +94,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 @SynchronizedBy("consistent lock on field")





 @SynchronizedBy("consistent lock on field")







 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();





 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();























 //stores the initial values that are propagated into callers independent bottom up,









 //if followReturnPastSeeds is enabled









 @SynchronizedBy("consistent lock on field")









 protected final Map<N,Set<D>> callerSeeds;

















 @DontSynchronize("stateless")





 @DontSynchronize("stateless")







 protected final FlowFunctions<N, D, M> flowFunctions;





 protected final FlowFunctions<N, D, M> flowFunctions;

















...@@ -183,6 +188,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -183,6 +188,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 this.flowFunctions = flowFunctions;





 this.flowFunctions = flowFunctions;







 this.edgeFunctions = edgeFunctions;





 this.edgeFunctions = edgeFunctions;







 this.initialSeeds = tabulationProblem.initialSeeds();





 this.initialSeeds = tabulationProblem.initialSeeds();









 this.callerSeeds = new HashMap<N, Set<D>>();







 this.valueLattice = tabulationProblem.joinLattice();





 this.valueLattice = tabulationProblem.joinLattice();







 this.allTop = tabulationProblem.allTopFunction();





 this.allTop = tabulationProblem.allTopFunction();







 this.jumpFn = new JumpFunctions<N,D,V>(allTop);





 this.jumpFn = new JumpFunctions<N,D,V>(allTop);



...@@ -486,6 +492,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -486,6 +492,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 for(D d5: targets) {





 for(D d5: targets) {







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);





 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);









 //register for value processing (2nd IDE phase)









 synchronized (callerSeeds) {









 Set<D> oldCallerSeeds = callerSeeds.get(retSiteC);









 if(oldCallerSeeds==null) {









 oldCallerSeeds = new HashSet<D>();









 callerSeeds.put(retSiteC, oldCallerSeeds);









 }









 oldCallerSeeds.add(d5);









 }







 }





 }







 }





 }







 }





 }



...@@ -620,7 +635,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -620,7 +635,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 private void computeValues() { 





 private void computeValues() { 







 //Phase II(i)





 //Phase II(i)







 logger.debug("Computing the final values for the edge functions");





 logger.debug("Computing the final values for the edge functions");







 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {





 //union of initial seeds and caller seeds









 Map<N, Set<D>> allSeeds = new HashMap<N, Set<D>>(initialSeeds);









 for(Entry<N, Set<D>> seed: callerSeeds.entrySet()) {









 Set<D> existing = allSeeds.get(seed.getKey());









 if(existing!=null) {









 existing.addAll(seed.getValue());









 } else {









 allSeeds.put(seed.getKey(), seed.getValue());









 }









 }









 //do processing









 for(Entry<N, Set<D>> seed: allSeeds.entrySet()) {







 N startPoint = seed.getKey();





 N startPoint = seed.getKey();







 for(D val: seed.getValue()) {





 for(D val: seed.getValue()) {







 setVal(startPoint, val, valueLattice.bottomElement());





 setVal(startPoint, val, valueLattice.bottomElement());



......

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

5b67f79d







Open sidebar



Joshua Garcia heros
Commits

5b67f79d




Open sidebar

Joshua Garcia heros
Commits

5b67f79d


Joshua GarciaherosherosCommits
5b67f79d








Commit
5b67f79d


authored
Jan 25, 2015
by


Eric Bodden



Browse files




Fix for a long outstanding bug in the value computation of the IDE phase if...

Fix for a long outstanding bug in the value computation of the IDE phase if followReturnPastSeeds is used. Looking at the original IDE paper, one will see that in phase II the algorithm does the following:
1.) propagate values from all start nodes to call nodes and from call nodes to start nodes of callees (!!!)
2.) propagate from all start nodes to all non call-start nodes
In Heros, however, we do not propagate from *all* start nodes to call nodes but only from the initial seeds!
The problem is now that with followReturnPastSeeds=true we have an unbalanced problem, in which we propagate into callers that have no calls ever processed. In result, propagating from initial seeds to calls is not enough, as this will only enable value computation in callees, but not in callers.
The implemented fix memorizes all values propagated into callers in an unbalanced way as so-called "caller seeds" and then uses these also as seeds for value computation. This should fix the problem without having to compute values starting at any start node of any procedure of the program.






parent
6939a472













Changes
1




Show whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 5b67f79d








...@@ -94,6 +94,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -94,6 +94,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 @SynchronizedBy("consistent lock on field")





 @SynchronizedBy("consistent lock on field")







 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();





 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();























 //stores the initial values that are propagated into callers independent bottom up,









 //if followReturnPastSeeds is enabled









 @SynchronizedBy("consistent lock on field")









 protected final Map<N,Set<D>> callerSeeds;

















 @DontSynchronize("stateless")





 @DontSynchronize("stateless")







 protected final FlowFunctions<N, D, M> flowFunctions;





 protected final FlowFunctions<N, D, M> flowFunctions;

















...@@ -183,6 +188,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -183,6 +188,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 this.flowFunctions = flowFunctions;





 this.flowFunctions = flowFunctions;







 this.edgeFunctions = edgeFunctions;





 this.edgeFunctions = edgeFunctions;







 this.initialSeeds = tabulationProblem.initialSeeds();





 this.initialSeeds = tabulationProblem.initialSeeds();









 this.callerSeeds = new HashMap<N, Set<D>>();







 this.valueLattice = tabulationProblem.joinLattice();





 this.valueLattice = tabulationProblem.joinLattice();







 this.allTop = tabulationProblem.allTopFunction();





 this.allTop = tabulationProblem.allTopFunction();







 this.jumpFn = new JumpFunctions<N,D,V>(allTop);





 this.jumpFn = new JumpFunctions<N,D,V>(allTop);



...@@ -486,6 +492,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -486,6 +492,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 for(D d5: targets) {





 for(D d5: targets) {







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);





 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);









 //register for value processing (2nd IDE phase)









 synchronized (callerSeeds) {









 Set<D> oldCallerSeeds = callerSeeds.get(retSiteC);









 if(oldCallerSeeds==null) {









 oldCallerSeeds = new HashSet<D>();









 callerSeeds.put(retSiteC, oldCallerSeeds);









 }









 oldCallerSeeds.add(d5);









 }







 }





 }







 }





 }







 }





 }



...@@ -620,7 +635,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -620,7 +635,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 private void computeValues() { 





 private void computeValues() { 







 //Phase II(i)





 //Phase II(i)







 logger.debug("Computing the final values for the edge functions");





 logger.debug("Computing the final values for the edge functions");







 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {





 //union of initial seeds and caller seeds









 Map<N, Set<D>> allSeeds = new HashMap<N, Set<D>>(initialSeeds);









 for(Entry<N, Set<D>> seed: callerSeeds.entrySet()) {









 Set<D> existing = allSeeds.get(seed.getKey());









 if(existing!=null) {









 existing.addAll(seed.getValue());









 } else {









 allSeeds.put(seed.getKey(), seed.getValue());









 }









 }









 //do processing









 for(Entry<N, Set<D>> seed: allSeeds.entrySet()) {







 N startPoint = seed.getKey();





 N startPoint = seed.getKey();







 for(D val: seed.getValue()) {





 for(D val: seed.getValue()) {







 setVal(startPoint, val, valueLattice.bottomElement());





 setVal(startPoint, val, valueLattice.bottomElement());



......

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
5b67f79d


authored
Jan 25, 2015
by


Eric Bodden



Browse files




Fix for a long outstanding bug in the value computation of the IDE phase if...

Fix for a long outstanding bug in the value computation of the IDE phase if followReturnPastSeeds is used. Looking at the original IDE paper, one will see that in phase II the algorithm does the following:
1.) propagate values from all start nodes to call nodes and from call nodes to start nodes of callees (!!!)
2.) propagate from all start nodes to all non call-start nodes
In Heros, however, we do not propagate from *all* start nodes to call nodes but only from the initial seeds!
The problem is now that with followReturnPastSeeds=true we have an unbalanced problem, in which we propagate into callers that have no calls ever processed. In result, propagating from initial seeds to calls is not enough, as this will only enable value computation in callees, but not in callers.
The implemented fix memorizes all values propagated into callers in an unbalanced way as so-called "caller seeds" and then uses these also as seeds for value computation. This should fix the problem without having to compute values starting at any start node of any procedure of the program.






parent
6939a472













Changes
1




Show whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 5b67f79d








...@@ -94,6 +94,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -94,6 +94,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 @SynchronizedBy("consistent lock on field")





 @SynchronizedBy("consistent lock on field")







 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();





 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();























 //stores the initial values that are propagated into callers independent bottom up,









 //if followReturnPastSeeds is enabled









 @SynchronizedBy("consistent lock on field")









 protected final Map<N,Set<D>> callerSeeds;

















 @DontSynchronize("stateless")





 @DontSynchronize("stateless")







 protected final FlowFunctions<N, D, M> flowFunctions;





 protected final FlowFunctions<N, D, M> flowFunctions;

















...@@ -183,6 +188,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -183,6 +188,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 this.flowFunctions = flowFunctions;





 this.flowFunctions = flowFunctions;







 this.edgeFunctions = edgeFunctions;





 this.edgeFunctions = edgeFunctions;







 this.initialSeeds = tabulationProblem.initialSeeds();





 this.initialSeeds = tabulationProblem.initialSeeds();









 this.callerSeeds = new HashMap<N, Set<D>>();







 this.valueLattice = tabulationProblem.joinLattice();





 this.valueLattice = tabulationProblem.joinLattice();







 this.allTop = tabulationProblem.allTopFunction();





 this.allTop = tabulationProblem.allTopFunction();







 this.jumpFn = new JumpFunctions<N,D,V>(allTop);





 this.jumpFn = new JumpFunctions<N,D,V>(allTop);



...@@ -486,6 +492,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -486,6 +492,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 for(D d5: targets) {





 for(D d5: targets) {







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);





 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);









 //register for value processing (2nd IDE phase)









 synchronized (callerSeeds) {









 Set<D> oldCallerSeeds = callerSeeds.get(retSiteC);









 if(oldCallerSeeds==null) {









 oldCallerSeeds = new HashSet<D>();









 callerSeeds.put(retSiteC, oldCallerSeeds);









 }









 oldCallerSeeds.add(d5);









 }







 }





 }







 }





 }







 }





 }



...@@ -620,7 +635,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -620,7 +635,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 private void computeValues() { 





 private void computeValues() { 







 //Phase II(i)





 //Phase II(i)







 logger.debug("Computing the final values for the edge functions");





 logger.debug("Computing the final values for the edge functions");







 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {





 //union of initial seeds and caller seeds









 Map<N, Set<D>> allSeeds = new HashMap<N, Set<D>>(initialSeeds);









 for(Entry<N, Set<D>> seed: callerSeeds.entrySet()) {









 Set<D> existing = allSeeds.get(seed.getKey());









 if(existing!=null) {









 existing.addAll(seed.getValue());









 } else {









 allSeeds.put(seed.getKey(), seed.getValue());









 }









 }









 //do processing









 for(Entry<N, Set<D>> seed: allSeeds.entrySet()) {







 N startPoint = seed.getKey();





 N startPoint = seed.getKey();







 for(D val: seed.getValue()) {





 for(D val: seed.getValue()) {







 setVal(startPoint, val, valueLattice.bottomElement());





 setVal(startPoint, val, valueLattice.bottomElement());



......

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
5b67f79d


authored
Jan 25, 2015
by


Eric Bodden



Browse files



Commit
5b67f79d


authored
Jan 25, 2015
by


Eric Bodden

5b67f79dauthoredbyEric Bodden

Fix for a long outstanding bug in the value computation of the IDE phase if...

Fix for a long outstanding bug in the value computation of the IDE phase if followReturnPastSeeds is used. Looking at the original IDE paper, one will see that in phase II the algorithm does the following:
1.) propagate values from all start nodes to call nodes and from call nodes to start nodes of callees (!!!)
2.) propagate from all start nodes to all non call-start nodes
In Heros, however, we do not propagate from *all* start nodes to call nodes but only from the initial seeds!
The problem is now that with followReturnPastSeeds=true we have an unbalanced problem, in which we propagate into callers that have no calls ever processed. In result, propagating from initial seeds to calls is not enough, as this will only enable value computation in callees, but not in callers.
The implemented fix memorizes all values propagated into callers in an unbalanced way as so-called "caller seeds" and then uses these also as seeds for value computation. This should fix the problem without having to compute values starting at any start node of any procedure of the program.





parent
6939a472
















parent
6939a472





parent












Changes
1
1


Show whitespace changes

Inline
Side-by-side






Show whitespace changes

Inline
Side-by-side




Show whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/solver/IDESolver.java








View file @ 5b67f79d








...@@ -94,6 +94,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -94,6 +94,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 @SynchronizedBy("consistent lock on field")





 @SynchronizedBy("consistent lock on field")







 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();





 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();























 //stores the initial values that are propagated into callers independent bottom up,









 //if followReturnPastSeeds is enabled









 @SynchronizedBy("consistent lock on field")









 protected final Map<N,Set<D>> callerSeeds;

















 @DontSynchronize("stateless")





 @DontSynchronize("stateless")







 protected final FlowFunctions<N, D, M> flowFunctions;





 protected final FlowFunctions<N, D, M> flowFunctions;

















...@@ -183,6 +188,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -183,6 +188,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 this.flowFunctions = flowFunctions;





 this.flowFunctions = flowFunctions;







 this.edgeFunctions = edgeFunctions;





 this.edgeFunctions = edgeFunctions;







 this.initialSeeds = tabulationProblem.initialSeeds();





 this.initialSeeds = tabulationProblem.initialSeeds();









 this.callerSeeds = new HashMap<N, Set<D>>();







 this.valueLattice = tabulationProblem.joinLattice();





 this.valueLattice = tabulationProblem.joinLattice();







 this.allTop = tabulationProblem.allTopFunction();





 this.allTop = tabulationProblem.allTopFunction();







 this.jumpFn = new JumpFunctions<N,D,V>(allTop);





 this.jumpFn = new JumpFunctions<N,D,V>(allTop);



...@@ -486,6 +492,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -486,6 +492,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 for(D d5: targets) {





 for(D d5: targets) {







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);





 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);









 //register for value processing (2nd IDE phase)









 synchronized (callerSeeds) {









 Set<D> oldCallerSeeds = callerSeeds.get(retSiteC);









 if(oldCallerSeeds==null) {









 oldCallerSeeds = new HashSet<D>();









 callerSeeds.put(retSiteC, oldCallerSeeds);









 }









 oldCallerSeeds.add(d5);









 }







 }





 }







 }





 }







 }





 }



...@@ -620,7 +635,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -620,7 +635,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 private void computeValues() { 





 private void computeValues() { 







 //Phase II(i)





 //Phase II(i)







 logger.debug("Computing the final values for the edge functions");





 logger.debug("Computing the final values for the edge functions");







 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {





 //union of initial seeds and caller seeds









 Map<N, Set<D>> allSeeds = new HashMap<N, Set<D>>(initialSeeds);









 for(Entry<N, Set<D>> seed: callerSeeds.entrySet()) {









 Set<D> existing = allSeeds.get(seed.getKey());









 if(existing!=null) {









 existing.addAll(seed.getValue());









 } else {









 allSeeds.put(seed.getKey(), seed.getValue());









 }









 }









 //do processing









 for(Entry<N, Set<D>> seed: allSeeds.entrySet()) {







 N startPoint = seed.getKey();





 N startPoint = seed.getKey();







 for(D val: seed.getValue()) {





 for(D val: seed.getValue()) {







 setVal(startPoint, val, valueLattice.bottomElement());





 setVal(startPoint, val, valueLattice.bottomElement());



......















src/heros/solver/IDESolver.java








View file @ 5b67f79d








...@@ -94,6 +94,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -94,6 +94,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 @SynchronizedBy("consistent lock on field")





 @SynchronizedBy("consistent lock on field")







 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();





 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();























 //stores the initial values that are propagated into callers independent bottom up,









 //if followReturnPastSeeds is enabled









 @SynchronizedBy("consistent lock on field")









 protected final Map<N,Set<D>> callerSeeds;

















 @DontSynchronize("stateless")





 @DontSynchronize("stateless")







 protected final FlowFunctions<N, D, M> flowFunctions;





 protected final FlowFunctions<N, D, M> flowFunctions;

















...@@ -183,6 +188,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -183,6 +188,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 this.flowFunctions = flowFunctions;





 this.flowFunctions = flowFunctions;







 this.edgeFunctions = edgeFunctions;





 this.edgeFunctions = edgeFunctions;







 this.initialSeeds = tabulationProblem.initialSeeds();





 this.initialSeeds = tabulationProblem.initialSeeds();









 this.callerSeeds = new HashMap<N, Set<D>>();







 this.valueLattice = tabulationProblem.joinLattice();





 this.valueLattice = tabulationProblem.joinLattice();







 this.allTop = tabulationProblem.allTopFunction();





 this.allTop = tabulationProblem.allTopFunction();







 this.jumpFn = new JumpFunctions<N,D,V>(allTop);





 this.jumpFn = new JumpFunctions<N,D,V>(allTop);



...@@ -486,6 +492,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -486,6 +492,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 for(D d5: targets) {





 for(D d5: targets) {







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);





 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);









 //register for value processing (2nd IDE phase)









 synchronized (callerSeeds) {









 Set<D> oldCallerSeeds = callerSeeds.get(retSiteC);









 if(oldCallerSeeds==null) {









 oldCallerSeeds = new HashSet<D>();









 callerSeeds.put(retSiteC, oldCallerSeeds);









 }









 oldCallerSeeds.add(d5);









 }







 }





 }







 }





 }







 }





 }



...@@ -620,7 +635,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -620,7 +635,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 private void computeValues() { 





 private void computeValues() { 







 //Phase II(i)





 //Phase II(i)







 logger.debug("Computing the final values for the edge functions");





 logger.debug("Computing the final values for the edge functions");







 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {





 //union of initial seeds and caller seeds









 Map<N, Set<D>> allSeeds = new HashMap<N, Set<D>>(initialSeeds);









 for(Entry<N, Set<D>> seed: callerSeeds.entrySet()) {









 Set<D> existing = allSeeds.get(seed.getKey());









 if(existing!=null) {









 existing.addAll(seed.getValue());









 } else {









 allSeeds.put(seed.getKey(), seed.getValue());









 }









 }









 //do processing









 for(Entry<N, Set<D>> seed: allSeeds.entrySet()) {







 N startPoint = seed.getKey();





 N startPoint = seed.getKey();







 for(D val: seed.getValue()) {





 for(D val: seed.getValue()) {







 setVal(startPoint, val, valueLattice.bottomElement());





 setVal(startPoint, val, valueLattice.bottomElement());



......













src/heros/solver/IDESolver.java








View file @ 5b67f79d








src/heros/solver/IDESolver.java










View file @ 5b67f79d


5b67f79d





...@@ -94,6 +94,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -94,6 +94,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 @SynchronizedBy("consistent lock on field")





 @SynchronizedBy("consistent lock on field")







 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();





 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();























 //stores the initial values that are propagated into callers independent bottom up,









 //if followReturnPastSeeds is enabled









 @SynchronizedBy("consistent lock on field")









 protected final Map<N,Set<D>> callerSeeds;

















 @DontSynchronize("stateless")





 @DontSynchronize("stateless")







 protected final FlowFunctions<N, D, M> flowFunctions;





 protected final FlowFunctions<N, D, M> flowFunctions;

















...@@ -183,6 +188,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -183,6 +188,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 this.flowFunctions = flowFunctions;





 this.flowFunctions = flowFunctions;







 this.edgeFunctions = edgeFunctions;





 this.edgeFunctions = edgeFunctions;







 this.initialSeeds = tabulationProblem.initialSeeds();





 this.initialSeeds = tabulationProblem.initialSeeds();









 this.callerSeeds = new HashMap<N, Set<D>>();







 this.valueLattice = tabulationProblem.joinLattice();





 this.valueLattice = tabulationProblem.joinLattice();







 this.allTop = tabulationProblem.allTopFunction();





 this.allTop = tabulationProblem.allTopFunction();







 this.jumpFn = new JumpFunctions<N,D,V>(allTop);





 this.jumpFn = new JumpFunctions<N,D,V>(allTop);



...@@ -486,6 +492,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -486,6 +492,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 for(D d5: targets) {





 for(D d5: targets) {







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);





 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);









 //register for value processing (2nd IDE phase)









 synchronized (callerSeeds) {









 Set<D> oldCallerSeeds = callerSeeds.get(retSiteC);









 if(oldCallerSeeds==null) {









 oldCallerSeeds = new HashSet<D>();









 callerSeeds.put(retSiteC, oldCallerSeeds);









 }









 oldCallerSeeds.add(d5);









 }







 }





 }







 }





 }







 }





 }



...@@ -620,7 +635,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -620,7 +635,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 private void computeValues() { 





 private void computeValues() { 







 //Phase II(i)





 //Phase II(i)







 logger.debug("Computing the final values for the edge functions");





 logger.debug("Computing the final values for the edge functions");







 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {





 //union of initial seeds and caller seeds









 Map<N, Set<D>> allSeeds = new HashMap<N, Set<D>>(initialSeeds);









 for(Entry<N, Set<D>> seed: callerSeeds.entrySet()) {









 Set<D> existing = allSeeds.get(seed.getKey());









 if(existing!=null) {









 existing.addAll(seed.getValue());









 } else {









 allSeeds.put(seed.getKey(), seed.getValue());









 }









 }









 //do processing









 for(Entry<N, Set<D>> seed: allSeeds.entrySet()) {







 N startPoint = seed.getKey();





 N startPoint = seed.getKey();







 for(D val: seed.getValue()) {





 for(D val: seed.getValue()) {







 setVal(startPoint, val, valueLattice.bottomElement());





 setVal(startPoint, val, valueLattice.bottomElement());



......









...@@ -94,6 +94,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -94,6 +94,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 @SynchronizedBy("consistent lock on field")





 @SynchronizedBy("consistent lock on field")







 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();





 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();























 //stores the initial values that are propagated into callers independent bottom up,









 //if followReturnPastSeeds is enabled









 @SynchronizedBy("consistent lock on field")









 protected final Map<N,Set<D>> callerSeeds;

















 @DontSynchronize("stateless")





 @DontSynchronize("stateless")







 protected final FlowFunctions<N, D, M> flowFunctions;





 protected final FlowFunctions<N, D, M> flowFunctions;

















...@@ -183,6 +188,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -183,6 +188,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 this.flowFunctions = flowFunctions;





 this.flowFunctions = flowFunctions;







 this.edgeFunctions = edgeFunctions;





 this.edgeFunctions = edgeFunctions;







 this.initialSeeds = tabulationProblem.initialSeeds();





 this.initialSeeds = tabulationProblem.initialSeeds();









 this.callerSeeds = new HashMap<N, Set<D>>();







 this.valueLattice = tabulationProblem.joinLattice();





 this.valueLattice = tabulationProblem.joinLattice();







 this.allTop = tabulationProblem.allTopFunction();





 this.allTop = tabulationProblem.allTopFunction();







 this.jumpFn = new JumpFunctions<N,D,V>(allTop);





 this.jumpFn = new JumpFunctions<N,D,V>(allTop);



...@@ -486,6 +492,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -486,6 +492,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 for(D d5: targets) {





 for(D d5: targets) {







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);





 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);









 //register for value processing (2nd IDE phase)









 synchronized (callerSeeds) {









 Set<D> oldCallerSeeds = callerSeeds.get(retSiteC);









 if(oldCallerSeeds==null) {









 oldCallerSeeds = new HashSet<D>();









 callerSeeds.put(retSiteC, oldCallerSeeds);









 }









 oldCallerSeeds.add(d5);









 }







 }





 }







 }





 }







 }





 }



...@@ -620,7 +635,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -620,7 +635,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 private void computeValues() { 





 private void computeValues() { 







 //Phase II(i)





 //Phase II(i)







 logger.debug("Computing the final values for the edge functions");





 logger.debug("Computing the final values for the edge functions");







 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {





 //union of initial seeds and caller seeds









 Map<N, Set<D>> allSeeds = new HashMap<N, Set<D>>(initialSeeds);









 for(Entry<N, Set<D>> seed: callerSeeds.entrySet()) {









 Set<D> existing = allSeeds.get(seed.getKey());









 if(existing!=null) {









 existing.addAll(seed.getValue());









 } else {









 allSeeds.put(seed.getKey(), seed.getValue());









 }









 }









 //do processing









 for(Entry<N, Set<D>> seed: allSeeds.entrySet()) {







 N startPoint = seed.getKey();





 N startPoint = seed.getKey();







 for(D val: seed.getValue()) {





 for(D val: seed.getValue()) {







 setVal(startPoint, val, valueLattice.bottomElement());





 setVal(startPoint, val, valueLattice.bottomElement());



......






...@@ -94,6 +94,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -94,6 +94,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 @SynchronizedBy("consistent lock on field")





 @SynchronizedBy("consistent lock on field")







 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();





 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();























 //stores the initial values that are propagated into callers independent bottom up,









 //if followReturnPastSeeds is enabled









 @SynchronizedBy("consistent lock on field")









 protected final Map<N,Set<D>> callerSeeds;

















 @DontSynchronize("stateless")





 @DontSynchronize("stateless")







 protected final FlowFunctions<N, D, M> flowFunctions;





 protected final FlowFunctions<N, D, M> flowFunctions;

















...@@ -183,6 +188,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -183,6 +188,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 this.flowFunctions = flowFunctions;





 this.flowFunctions = flowFunctions;







 this.edgeFunctions = edgeFunctions;





 this.edgeFunctions = edgeFunctions;







 this.initialSeeds = tabulationProblem.initialSeeds();





 this.initialSeeds = tabulationProblem.initialSeeds();









 this.callerSeeds = new HashMap<N, Set<D>>();







 this.valueLattice = tabulationProblem.joinLattice();





 this.valueLattice = tabulationProblem.joinLattice();







 this.allTop = tabulationProblem.allTopFunction();





 this.allTop = tabulationProblem.allTopFunction();







 this.jumpFn = new JumpFunctions<N,D,V>(allTop);





 this.jumpFn = new JumpFunctions<N,D,V>(allTop);



...@@ -486,6 +492,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -486,6 +492,15 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 for(D d5: targets) {





 for(D d5: targets) {







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);





 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);









 //register for value processing (2nd IDE phase)









 synchronized (callerSeeds) {









 Set<D> oldCallerSeeds = callerSeeds.get(retSiteC);









 if(oldCallerSeeds==null) {









 oldCallerSeeds = new HashSet<D>();









 callerSeeds.put(retSiteC, oldCallerSeeds);









 }









 oldCallerSeeds.add(d5);









 }







 }





 }







 }





 }







 }





 }



...@@ -620,7 +635,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -620,7 +635,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 private void computeValues() { 





 private void computeValues() { 







 //Phase II(i)





 //Phase II(i)







 logger.debug("Computing the final values for the edge functions");





 logger.debug("Computing the final values for the edge functions");







 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {





 //union of initial seeds and caller seeds









 Map<N, Set<D>> allSeeds = new HashMap<N, Set<D>>(initialSeeds);









 for(Entry<N, Set<D>> seed: callerSeeds.entrySet()) {









 Set<D> existing = allSeeds.get(seed.getKey());









 if(existing!=null) {









 existing.addAll(seed.getValue());









 } else {









 allSeeds.put(seed.getKey(), seed.getValue());









 }









 }









 //do processing









 for(Entry<N, Set<D>> seed: allSeeds.entrySet()) {







 N startPoint = seed.getKey();





 N startPoint = seed.getKey();







 for(D val: seed.getValue()) {





 for(D val: seed.getValue()) {







 setVal(startPoint, val, valueLattice.bottomElement());





 setVal(startPoint, val, valueLattice.bottomElement());



......


 @SynchronizedBy("consistent lock on field")@SynchronizedBy("consistent lock on field") @SynchronizedBy("consistent lock on field")@SynchronizedBy("consistent lock on field") protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();protectedfinalTable<N,D,Map<N,Set<D>>>incoming=HashBasedTable.create(); protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();protectedfinalTable<N,D,Map<N,Set<D>>>incoming=HashBasedTable.create(); //stores the initial values that are propagated into callers independent bottom up,//stores the initial values that are propagated into callers independent bottom up, //if followReturnPastSeeds is enabled//if followReturnPastSeeds is enabled @SynchronizedBy("consistent lock on field")@SynchronizedBy("consistent lock on field") protected final Map<N,Set<D>> callerSeeds;protectedfinalMap<N,Set<D>>callerSeeds; @DontSynchronize("stateless")@DontSynchronize("stateless") @DontSynchronize("stateless")@DontSynchronize("stateless") protected final FlowFunctions<N, D, M> flowFunctions;protectedfinalFlowFunctions<N,D,M>flowFunctions; protected final FlowFunctions<N, D, M> flowFunctions;protectedfinalFlowFunctions<N,D,M>flowFunctions; this.flowFunctions = flowFunctions;this.flowFunctions=flowFunctions; this.flowFunctions = flowFunctions;this.flowFunctions=flowFunctions; this.edgeFunctions = edgeFunctions;this.edgeFunctions=edgeFunctions; this.edgeFunctions = edgeFunctions;this.edgeFunctions=edgeFunctions; this.initialSeeds = tabulationProblem.initialSeeds();this.initialSeeds=tabulationProblem.initialSeeds(); this.initialSeeds = tabulationProblem.initialSeeds();this.initialSeeds=tabulationProblem.initialSeeds(); this.callerSeeds = new HashMap<N, Set<D>>();this.callerSeeds=newHashMap<N,Set<D>>(); this.valueLattice = tabulationProblem.joinLattice();this.valueLattice=tabulationProblem.joinLattice(); this.valueLattice = tabulationProblem.joinLattice();this.valueLattice=tabulationProblem.joinLattice(); this.allTop = tabulationProblem.allTopFunction();this.allTop=tabulationProblem.allTopFunction(); this.allTop = tabulationProblem.allTopFunction();this.allTop=tabulationProblem.allTopFunction(); this.jumpFn = new JumpFunctions<N,D,V>(allTop);this.jumpFn=newJumpFunctions<N,D,V>(allTop); this.jumpFn = new JumpFunctions<N,D,V>(allTop);this.jumpFn=newJumpFunctions<N,D,V>(allTop); for(D d5: targets) {for(Dd5:targets){ for(D d5: targets) {for(Dd5:targets){ EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);EdgeFunction<V>f5=edgeFunctions.getReturnEdgeFunction(c,icfg.getMethodOf(n),n,d2,retSiteC,d5); EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);EdgeFunction<V>f5=edgeFunctions.getReturnEdgeFunction(c,icfg.getMethodOf(n),n,d2,retSiteC,d5); propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);propagateUnbalancedReturnFlow(retSiteC,d5,f.composeWith(f5),c); propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);propagateUnbalancedReturnFlow(retSiteC,d5,f.composeWith(f5),c); //register for value processing (2nd IDE phase)//register for value processing (2nd IDE phase) synchronized (callerSeeds) {synchronized(callerSeeds){ Set<D> oldCallerSeeds = callerSeeds.get(retSiteC);Set<D>oldCallerSeeds=callerSeeds.get(retSiteC); if(oldCallerSeeds==null) {if(oldCallerSeeds==null){ oldCallerSeeds = new HashSet<D>();oldCallerSeeds=newHashSet<D>(); callerSeeds.put(retSiteC, oldCallerSeeds);callerSeeds.put(retSiteC,oldCallerSeeds); }} oldCallerSeeds.add(d5);oldCallerSeeds.add(d5); }} }} }} }} }} }} }} private void computeValues() { privatevoidcomputeValues(){ private void computeValues() { privatevoidcomputeValues(){ //Phase II(i)//Phase II(i) //Phase II(i)//Phase II(i) logger.debug("Computing the final values for the edge functions");logger.debug("Computing the final values for the edge functions"); logger.debug("Computing the final values for the edge functions");logger.debug("Computing the final values for the edge functions"); for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {for(Entry<N,Set<D>>seed:initialSeeds.entrySet()){ //union of initial seeds and caller seeds//union of initial seeds and caller seeds Map<N, Set<D>> allSeeds = new HashMap<N, Set<D>>(initialSeeds);Map<N,Set<D>>allSeeds=newHashMap<N,Set<D>>(initialSeeds); for(Entry<N, Set<D>> seed: callerSeeds.entrySet()) {for(Entry<N,Set<D>>seed:callerSeeds.entrySet()){ Set<D> existing = allSeeds.get(seed.getKey());Set<D>existing=allSeeds.get(seed.getKey()); if(existing!=null) {if(existing!=null){ existing.addAll(seed.getValue());existing.addAll(seed.getValue()); } else {}else{ allSeeds.put(seed.getKey(), seed.getValue());allSeeds.put(seed.getKey(),seed.getValue()); }} }} //do processing//do processing for(Entry<N, Set<D>> seed: allSeeds.entrySet()) {for(Entry<N,Set<D>>seed:allSeeds.entrySet()){ N startPoint = seed.getKey();NstartPoint=seed.getKey(); N startPoint = seed.getKey();NstartPoint=seed.getKey(); for(D val: seed.getValue()) {for(Dval:seed.getValue()){ for(D val: seed.getValue()) {for(Dval:seed.getValue()){ setVal(startPoint, val, valueLattice.bottomElement());setVal(startPoint,val,valueLattice.bottomElement()); setVal(startPoint, val, valueLattice.bottomElement());setVal(startPoint,val,valueLattice.bottomElement());









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






