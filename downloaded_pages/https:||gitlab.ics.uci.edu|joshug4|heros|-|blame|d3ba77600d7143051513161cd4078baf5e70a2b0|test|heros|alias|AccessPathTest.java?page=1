



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros

d3ba77600d7143051513161cd4078baf5e70a2b0

















d3ba77600d7143051513161cd4078baf5e70a2b0


Switch branch/tag










heros


test


heros


alias


AccessPathTest.java



Find file
Normal viewHistoryPermalink






AccessPathTest.java



8.04 KB









Newer










Older









regexp access path



Â 


Johannes Lerch
committed
Feb 05, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




137




138




139




140




141




142




143




144




145




146




147




148




149




150




151




152




153




154




155




156




157




158




159




160




161




162




163




164




165




166




167




168




169




170




171




172




173




174




175




176




177




178




179




180




181




182




183




184




185




186




187




188




189




190




191




192




193




194




195




196




197




198




199




200




201




202




203




204




205




206




207




208




209




210




211




212




213




214




215




216




217




218




219




220




221




222




223




224




225




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.*;

import java.util.Set;

import org.junit.Assert;
import org.junit.Test;

import com.google.common.collect.Sets;

import heros.alias.AccessPath.PrefixTestResult;
import heros.alias.SubAccessPath.*;

@SuppressWarnings("unchecked")
public class AccessPathTest {

	private static SetOfPossibleFieldAccesses<String> anyOf(String...fields) {
		return new SetOfPossibleFieldAccesses<String>(Sets.newHashSet(fields));
	}
	
	private static SpecificFieldAccess<String> s(String field) {
		return new SpecificFieldAccess<String>(field);
	}
	
	private static AccessPath<String> ap(SubAccessPath<String>... path) {
		return new AccessPath<String>(path, new Set[0]);
	}
	
	@Test
	public void addAndMergeAll() {
		AccessPath<String> sut = AccessPath.<String>empty().addFieldReference("a", "b", "c");
		assertEquals(ap(anyOf("a","b","c")), sut.addFieldReference("a"));
	}

	@Test
	public void addAndMergeSuffix() {
		AccessPath<String> sut = AccessPath.<String>empty().addFieldReference("a", "b", "c");
		assertEquals(ap(s("a"), anyOf("b","c")), sut.addFieldReference("b"));
	}
	
	@Test
	public void addWithoutMerge() {
		AccessPath<String> sut = ap(s("a"));
		assertEquals(ap(s("a"), s("b")), sut.addFieldReference("b"));
	}
	
	@Test
	public void addMergedFields() {
		AccessPath<String> sut = ap(s("a"));
		assertEquals(ap(anyOf("a")), sut.addFieldReference(anyOf("a")));
	}

	@Test
	public void addMergedFieldsOnExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a");
		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(anyOf("a", "b")));
	}
	
	@Test
	public void addMergedFieldsOnNestedExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(anyOf("a", "b")));
	}
	
	@Test
	public void addFieldThatMerges() {
		AccessPath<String> sut = ap(s("a"), s("b")).appendExcludedFieldReference("c").appendExcludedFieldReference("x");
		assertEquals(ap(anyOf("a", "b")).appendExcludedFieldReference("x"), sut.addFieldReference(s("a")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField() {
		AccessPath<String> sut = ap(s("a"), s("b")).appendExcludedFieldReference("c").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(s("a")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField2() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("a", "c")), sut.addFieldReference(anyOf("a","c")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField3() {
		AccessPath<String> sut = ap(s("c")).appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("c")), sut.addFieldReference(anyOf("c")));
	}
	
	@Test
	public void addOnExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(s("b")).appendExcludedFieldReference("b"), sut.addFieldReference(s("b")));
	}
	
	@Test
	public void addOnNestedExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("a", "c")), sut.addFieldReference(anyOf("a", "c")));
	}

	@Test(expected=IllegalArgumentException.class)
	public void addMergedFieldsOnSingleExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a");
		sut.addFieldReference(anyOf("a"));	
	}
	
	@Test
	public void prependWithoutMerge() {
		assertEquals(ap(s("c"), s("a"), s("b")), ap(s("a"), s("b")).prepend("c"));
	}
	
	@Test
	public void prependWithMerge() {
		assertEquals(ap(anyOf("a"), anyOf("b", "c")), ap(s("a"), anyOf("b", "c")).prepend("a"));
	}
	
	@Test
	public void prependAndMergeWithSet() {
		assertEquals(ap(anyOf("a", "b", "c")), ap(s("a"), anyOf("b", "c")).prepend("b"));
	}
	
	@Test
	public void remove() {
		assertEquals(ap(s("b")), ap(s("a"), s("b")).removeFirst("a"));
	}
	
	@Test
	public void dontRemoveMergedFields() {
		assertEquals(ap(anyOf("a", "b")), ap(anyOf("a", "b")).removeFirst("a"));
	}
	
	@Test
	public void removeMergedFieldsIfRemovingSuffix() {
		assertEquals(ap(), ap(anyOf("a", "b"), s("c")).removeFirst("c"));
	}
	
	@Test
	public void deltaDepth1() {
		SubAccessPath<String>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), s("b")));
		assertArrayEquals(new SubAccessPath[] { s("b") }, actual);
	}
	
	@Test
	public void deltaDepth2() {
		SubAccessPath<String>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), s("b"), s("c")));
		assertArrayEquals(new SubAccessPath[] { s("b"), s("c") }, actual);
	}
	
	@Test
	public void delta() {
		SubAccessPath<String>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), anyOf("b")));
		assertArrayEquals(new SubAccessPath[] { anyOf("b") }, actual);
	}
	
	@Test
	public void delta2() {
		SubAccessPath<String>[] actual = ap(s("f"), s("g"), s("h")).getDeltaTo(ap(anyOf("f", "g"), s("h")));
		assertArrayEquals(new SubAccessPath[] {  }, actual);
	}
	
	@Test
	public void delta3() {
		SubAccessPath<String>[] actual = ap(s("f"), s("f")).getDeltaTo(ap(anyOf("f")));
		assertArrayEquals(new SubAccessPath[] { anyOf("f") } , actual);
	}
	
	@Test
	public void deltaMatchingMergedField() {
		SubAccessPath<String>[] actual = ap(s("a"), s("b")).getDeltaTo(ap(s("a"), anyOf("b")));
		assertArrayEquals(new SubAccessPath[] { anyOf("b") }, actual);
	}
	
	@Test
	public void prefixOfMergedField() {
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f"), s("h"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f"), s("h")).isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void noPrefixOfMergedField() {
		assertEquals(PrefixTestResult.NO_PREFIX, ap(s("g")).isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.NO_PREFIX, ap(s("g")).isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void prefixOfExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("f");
		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void prefixOfExclusions() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("f", "g");
		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void mergedFieldsPrefixOf() {
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap(s("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap(s("g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference("f")));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference("f", "g")));
		
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f"), s("h")).isPrefixOf(ap(s("f"), s("h"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).appendExcludedFieldReference("f").isPrefixOf(ap(s("f"), s("h"))));
	}
}












H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros

d3ba77600d7143051513161cd4078baf5e70a2b0

















d3ba77600d7143051513161cd4078baf5e70a2b0


Switch branch/tag










heros


test


heros


alias


AccessPathTest.java



Find file
Normal viewHistoryPermalink






AccessPathTest.java



8.04 KB









Newer










Older









regexp access path



Â 


Johannes Lerch
committed
Feb 05, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




137




138




139




140




141




142




143




144




145




146




147




148




149




150




151




152




153




154




155




156




157




158




159




160




161




162




163




164




165




166




167




168




169




170




171




172




173




174




175




176




177




178




179




180




181




182




183




184




185




186




187




188




189




190




191




192




193




194




195




196




197




198




199




200




201




202




203




204




205




206




207




208




209




210




211




212




213




214




215




216




217




218




219




220




221




222




223




224




225




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.*;

import java.util.Set;

import org.junit.Assert;
import org.junit.Test;

import com.google.common.collect.Sets;

import heros.alias.AccessPath.PrefixTestResult;
import heros.alias.SubAccessPath.*;

@SuppressWarnings("unchecked")
public class AccessPathTest {

	private static SetOfPossibleFieldAccesses<String> anyOf(String...fields) {
		return new SetOfPossibleFieldAccesses<String>(Sets.newHashSet(fields));
	}
	
	private static SpecificFieldAccess<String> s(String field) {
		return new SpecificFieldAccess<String>(field);
	}
	
	private static AccessPath<String> ap(SubAccessPath<String>... path) {
		return new AccessPath<String>(path, new Set[0]);
	}
	
	@Test
	public void addAndMergeAll() {
		AccessPath<String> sut = AccessPath.<String>empty().addFieldReference("a", "b", "c");
		assertEquals(ap(anyOf("a","b","c")), sut.addFieldReference("a"));
	}

	@Test
	public void addAndMergeSuffix() {
		AccessPath<String> sut = AccessPath.<String>empty().addFieldReference("a", "b", "c");
		assertEquals(ap(s("a"), anyOf("b","c")), sut.addFieldReference("b"));
	}
	
	@Test
	public void addWithoutMerge() {
		AccessPath<String> sut = ap(s("a"));
		assertEquals(ap(s("a"), s("b")), sut.addFieldReference("b"));
	}
	
	@Test
	public void addMergedFields() {
		AccessPath<String> sut = ap(s("a"));
		assertEquals(ap(anyOf("a")), sut.addFieldReference(anyOf("a")));
	}

	@Test
	public void addMergedFieldsOnExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a");
		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(anyOf("a", "b")));
	}
	
	@Test
	public void addMergedFieldsOnNestedExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(anyOf("a", "b")));
	}
	
	@Test
	public void addFieldThatMerges() {
		AccessPath<String> sut = ap(s("a"), s("b")).appendExcludedFieldReference("c").appendExcludedFieldReference("x");
		assertEquals(ap(anyOf("a", "b")).appendExcludedFieldReference("x"), sut.addFieldReference(s("a")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField() {
		AccessPath<String> sut = ap(s("a"), s("b")).appendExcludedFieldReference("c").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(s("a")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField2() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("a", "c")), sut.addFieldReference(anyOf("a","c")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField3() {
		AccessPath<String> sut = ap(s("c")).appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("c")), sut.addFieldReference(anyOf("c")));
	}
	
	@Test
	public void addOnExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(s("b")).appendExcludedFieldReference("b"), sut.addFieldReference(s("b")));
	}
	
	@Test
	public void addOnNestedExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("a", "c")), sut.addFieldReference(anyOf("a", "c")));
	}

	@Test(expected=IllegalArgumentException.class)
	public void addMergedFieldsOnSingleExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a");
		sut.addFieldReference(anyOf("a"));	
	}
	
	@Test
	public void prependWithoutMerge() {
		assertEquals(ap(s("c"), s("a"), s("b")), ap(s("a"), s("b")).prepend("c"));
	}
	
	@Test
	public void prependWithMerge() {
		assertEquals(ap(anyOf("a"), anyOf("b", "c")), ap(s("a"), anyOf("b", "c")).prepend("a"));
	}
	
	@Test
	public void prependAndMergeWithSet() {
		assertEquals(ap(anyOf("a", "b", "c")), ap(s("a"), anyOf("b", "c")).prepend("b"));
	}
	
	@Test
	public void remove() {
		assertEquals(ap(s("b")), ap(s("a"), s("b")).removeFirst("a"));
	}
	
	@Test
	public void dontRemoveMergedFields() {
		assertEquals(ap(anyOf("a", "b")), ap(anyOf("a", "b")).removeFirst("a"));
	}
	
	@Test
	public void removeMergedFieldsIfRemovingSuffix() {
		assertEquals(ap(), ap(anyOf("a", "b"), s("c")).removeFirst("c"));
	}
	
	@Test
	public void deltaDepth1() {
		SubAccessPath<String>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), s("b")));
		assertArrayEquals(new SubAccessPath[] { s("b") }, actual);
	}
	
	@Test
	public void deltaDepth2() {
		SubAccessPath<String>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), s("b"), s("c")));
		assertArrayEquals(new SubAccessPath[] { s("b"), s("c") }, actual);
	}
	
	@Test
	public void delta() {
		SubAccessPath<String>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), anyOf("b")));
		assertArrayEquals(new SubAccessPath[] { anyOf("b") }, actual);
	}
	
	@Test
	public void delta2() {
		SubAccessPath<String>[] actual = ap(s("f"), s("g"), s("h")).getDeltaTo(ap(anyOf("f", "g"), s("h")));
		assertArrayEquals(new SubAccessPath[] {  }, actual);
	}
	
	@Test
	public void delta3() {
		SubAccessPath<String>[] actual = ap(s("f"), s("f")).getDeltaTo(ap(anyOf("f")));
		assertArrayEquals(new SubAccessPath[] { anyOf("f") } , actual);
	}
	
	@Test
	public void deltaMatchingMergedField() {
		SubAccessPath<String>[] actual = ap(s("a"), s("b")).getDeltaTo(ap(s("a"), anyOf("b")));
		assertArrayEquals(new SubAccessPath[] { anyOf("b") }, actual);
	}
	
	@Test
	public void prefixOfMergedField() {
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f"), s("h"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f"), s("h")).isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void noPrefixOfMergedField() {
		assertEquals(PrefixTestResult.NO_PREFIX, ap(s("g")).isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.NO_PREFIX, ap(s("g")).isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void prefixOfExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("f");
		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void prefixOfExclusions() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("f", "g");
		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void mergedFieldsPrefixOf() {
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap(s("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap(s("g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference("f")));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference("f", "g")));
		
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f"), s("h")).isPrefixOf(ap(s("f"), s("h"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).appendExcludedFieldReference("f").isPrefixOf(ap(s("f"), s("h"))));
	}
}











Open sidebar



Joshua Garcia heros

d3ba77600d7143051513161cd4078baf5e70a2b0







Open sidebar



Joshua Garcia heros

d3ba77600d7143051513161cd4078baf5e70a2b0




Open sidebar

Joshua Garcia heros

d3ba77600d7143051513161cd4078baf5e70a2b0


Joshua Garciaherosheros
d3ba77600d7143051513161cd4078baf5e70a2b0










d3ba77600d7143051513161cd4078baf5e70a2b0


Switch branch/tag










heros


test


heros


alias


AccessPathTest.java



Find file
Normal viewHistoryPermalink






AccessPathTest.java



8.04 KB









Newer










Older









regexp access path



Â 


Johannes Lerch
committed
Feb 05, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




137




138




139




140




141




142




143




144




145




146




147




148




149




150




151




152




153




154




155




156




157




158




159




160




161




162




163




164




165




166




167




168




169




170




171




172




173




174




175




176




177




178




179




180




181




182




183




184




185




186




187




188




189




190




191




192




193




194




195




196




197




198




199




200




201




202




203




204




205




206




207




208




209




210




211




212




213




214




215




216




217




218




219




220




221




222




223




224




225




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.*;

import java.util.Set;

import org.junit.Assert;
import org.junit.Test;

import com.google.common.collect.Sets;

import heros.alias.AccessPath.PrefixTestResult;
import heros.alias.SubAccessPath.*;

@SuppressWarnings("unchecked")
public class AccessPathTest {

	private static SetOfPossibleFieldAccesses<String> anyOf(String...fields) {
		return new SetOfPossibleFieldAccesses<String>(Sets.newHashSet(fields));
	}
	
	private static SpecificFieldAccess<String> s(String field) {
		return new SpecificFieldAccess<String>(field);
	}
	
	private static AccessPath<String> ap(SubAccessPath<String>... path) {
		return new AccessPath<String>(path, new Set[0]);
	}
	
	@Test
	public void addAndMergeAll() {
		AccessPath<String> sut = AccessPath.<String>empty().addFieldReference("a", "b", "c");
		assertEquals(ap(anyOf("a","b","c")), sut.addFieldReference("a"));
	}

	@Test
	public void addAndMergeSuffix() {
		AccessPath<String> sut = AccessPath.<String>empty().addFieldReference("a", "b", "c");
		assertEquals(ap(s("a"), anyOf("b","c")), sut.addFieldReference("b"));
	}
	
	@Test
	public void addWithoutMerge() {
		AccessPath<String> sut = ap(s("a"));
		assertEquals(ap(s("a"), s("b")), sut.addFieldReference("b"));
	}
	
	@Test
	public void addMergedFields() {
		AccessPath<String> sut = ap(s("a"));
		assertEquals(ap(anyOf("a")), sut.addFieldReference(anyOf("a")));
	}

	@Test
	public void addMergedFieldsOnExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a");
		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(anyOf("a", "b")));
	}
	
	@Test
	public void addMergedFieldsOnNestedExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(anyOf("a", "b")));
	}
	
	@Test
	public void addFieldThatMerges() {
		AccessPath<String> sut = ap(s("a"), s("b")).appendExcludedFieldReference("c").appendExcludedFieldReference("x");
		assertEquals(ap(anyOf("a", "b")).appendExcludedFieldReference("x"), sut.addFieldReference(s("a")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField() {
		AccessPath<String> sut = ap(s("a"), s("b")).appendExcludedFieldReference("c").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(s("a")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField2() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("a", "c")), sut.addFieldReference(anyOf("a","c")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField3() {
		AccessPath<String> sut = ap(s("c")).appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("c")), sut.addFieldReference(anyOf("c")));
	}
	
	@Test
	public void addOnExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(s("b")).appendExcludedFieldReference("b"), sut.addFieldReference(s("b")));
	}
	
	@Test
	public void addOnNestedExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("a", "c")), sut.addFieldReference(anyOf("a", "c")));
	}

	@Test(expected=IllegalArgumentException.class)
	public void addMergedFieldsOnSingleExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a");
		sut.addFieldReference(anyOf("a"));	
	}
	
	@Test
	public void prependWithoutMerge() {
		assertEquals(ap(s("c"), s("a"), s("b")), ap(s("a"), s("b")).prepend("c"));
	}
	
	@Test
	public void prependWithMerge() {
		assertEquals(ap(anyOf("a"), anyOf("b", "c")), ap(s("a"), anyOf("b", "c")).prepend("a"));
	}
	
	@Test
	public void prependAndMergeWithSet() {
		assertEquals(ap(anyOf("a", "b", "c")), ap(s("a"), anyOf("b", "c")).prepend("b"));
	}
	
	@Test
	public void remove() {
		assertEquals(ap(s("b")), ap(s("a"), s("b")).removeFirst("a"));
	}
	
	@Test
	public void dontRemoveMergedFields() {
		assertEquals(ap(anyOf("a", "b")), ap(anyOf("a", "b")).removeFirst("a"));
	}
	
	@Test
	public void removeMergedFieldsIfRemovingSuffix() {
		assertEquals(ap(), ap(anyOf("a", "b"), s("c")).removeFirst("c"));
	}
	
	@Test
	public void deltaDepth1() {
		SubAccessPath<String>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), s("b")));
		assertArrayEquals(new SubAccessPath[] { s("b") }, actual);
	}
	
	@Test
	public void deltaDepth2() {
		SubAccessPath<String>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), s("b"), s("c")));
		assertArrayEquals(new SubAccessPath[] { s("b"), s("c") }, actual);
	}
	
	@Test
	public void delta() {
		SubAccessPath<String>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), anyOf("b")));
		assertArrayEquals(new SubAccessPath[] { anyOf("b") }, actual);
	}
	
	@Test
	public void delta2() {
		SubAccessPath<String>[] actual = ap(s("f"), s("g"), s("h")).getDeltaTo(ap(anyOf("f", "g"), s("h")));
		assertArrayEquals(new SubAccessPath[] {  }, actual);
	}
	
	@Test
	public void delta3() {
		SubAccessPath<String>[] actual = ap(s("f"), s("f")).getDeltaTo(ap(anyOf("f")));
		assertArrayEquals(new SubAccessPath[] { anyOf("f") } , actual);
	}
	
	@Test
	public void deltaMatchingMergedField() {
		SubAccessPath<String>[] actual = ap(s("a"), s("b")).getDeltaTo(ap(s("a"), anyOf("b")));
		assertArrayEquals(new SubAccessPath[] { anyOf("b") }, actual);
	}
	
	@Test
	public void prefixOfMergedField() {
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f"), s("h"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f"), s("h")).isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void noPrefixOfMergedField() {
		assertEquals(PrefixTestResult.NO_PREFIX, ap(s("g")).isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.NO_PREFIX, ap(s("g")).isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void prefixOfExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("f");
		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void prefixOfExclusions() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("f", "g");
		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void mergedFieldsPrefixOf() {
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap(s("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap(s("g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference("f")));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference("f", "g")));
		
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f"), s("h")).isPrefixOf(ap(s("f"), s("h"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).appendExcludedFieldReference("f").isPrefixOf(ap(s("f"), s("h"))));
	}
}














d3ba77600d7143051513161cd4078baf5e70a2b0


Switch branch/tag










heros


test


heros


alias


AccessPathTest.java



Find file
Normal viewHistoryPermalink






AccessPathTest.java



8.04 KB









Newer










Older









regexp access path



Â 


Johannes Lerch
committed
Feb 05, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




137




138




139




140




141




142




143




144




145




146




147




148




149




150




151




152




153




154




155




156




157




158




159




160




161




162




163




164




165




166




167




168




169




170




171




172




173




174




175




176




177




178




179




180




181




182




183




184




185




186




187




188




189




190




191




192




193




194




195




196




197




198




199




200




201




202




203




204




205




206




207




208




209




210




211




212




213




214




215




216




217




218




219




220




221




222




223




224




225




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.*;

import java.util.Set;

import org.junit.Assert;
import org.junit.Test;

import com.google.common.collect.Sets;

import heros.alias.AccessPath.PrefixTestResult;
import heros.alias.SubAccessPath.*;

@SuppressWarnings("unchecked")
public class AccessPathTest {

	private static SetOfPossibleFieldAccesses<String> anyOf(String...fields) {
		return new SetOfPossibleFieldAccesses<String>(Sets.newHashSet(fields));
	}
	
	private static SpecificFieldAccess<String> s(String field) {
		return new SpecificFieldAccess<String>(field);
	}
	
	private static AccessPath<String> ap(SubAccessPath<String>... path) {
		return new AccessPath<String>(path, new Set[0]);
	}
	
	@Test
	public void addAndMergeAll() {
		AccessPath<String> sut = AccessPath.<String>empty().addFieldReference("a", "b", "c");
		assertEquals(ap(anyOf("a","b","c")), sut.addFieldReference("a"));
	}

	@Test
	public void addAndMergeSuffix() {
		AccessPath<String> sut = AccessPath.<String>empty().addFieldReference("a", "b", "c");
		assertEquals(ap(s("a"), anyOf("b","c")), sut.addFieldReference("b"));
	}
	
	@Test
	public void addWithoutMerge() {
		AccessPath<String> sut = ap(s("a"));
		assertEquals(ap(s("a"), s("b")), sut.addFieldReference("b"));
	}
	
	@Test
	public void addMergedFields() {
		AccessPath<String> sut = ap(s("a"));
		assertEquals(ap(anyOf("a")), sut.addFieldReference(anyOf("a")));
	}

	@Test
	public void addMergedFieldsOnExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a");
		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(anyOf("a", "b")));
	}
	
	@Test
	public void addMergedFieldsOnNestedExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(anyOf("a", "b")));
	}
	
	@Test
	public void addFieldThatMerges() {
		AccessPath<String> sut = ap(s("a"), s("b")).appendExcludedFieldReference("c").appendExcludedFieldReference("x");
		assertEquals(ap(anyOf("a", "b")).appendExcludedFieldReference("x"), sut.addFieldReference(s("a")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField() {
		AccessPath<String> sut = ap(s("a"), s("b")).appendExcludedFieldReference("c").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(s("a")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField2() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("a", "c")), sut.addFieldReference(anyOf("a","c")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField3() {
		AccessPath<String> sut = ap(s("c")).appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("c")), sut.addFieldReference(anyOf("c")));
	}
	
	@Test
	public void addOnExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(s("b")).appendExcludedFieldReference("b"), sut.addFieldReference(s("b")));
	}
	
	@Test
	public void addOnNestedExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("a", "c")), sut.addFieldReference(anyOf("a", "c")));
	}

	@Test(expected=IllegalArgumentException.class)
	public void addMergedFieldsOnSingleExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a");
		sut.addFieldReference(anyOf("a"));	
	}
	
	@Test
	public void prependWithoutMerge() {
		assertEquals(ap(s("c"), s("a"), s("b")), ap(s("a"), s("b")).prepend("c"));
	}
	
	@Test
	public void prependWithMerge() {
		assertEquals(ap(anyOf("a"), anyOf("b", "c")), ap(s("a"), anyOf("b", "c")).prepend("a"));
	}
	
	@Test
	public void prependAndMergeWithSet() {
		assertEquals(ap(anyOf("a", "b", "c")), ap(s("a"), anyOf("b", "c")).prepend("b"));
	}
	
	@Test
	public void remove() {
		assertEquals(ap(s("b")), ap(s("a"), s("b")).removeFirst("a"));
	}
	
	@Test
	public void dontRemoveMergedFields() {
		assertEquals(ap(anyOf("a", "b")), ap(anyOf("a", "b")).removeFirst("a"));
	}
	
	@Test
	public void removeMergedFieldsIfRemovingSuffix() {
		assertEquals(ap(), ap(anyOf("a", "b"), s("c")).removeFirst("c"));
	}
	
	@Test
	public void deltaDepth1() {
		SubAccessPath<String>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), s("b")));
		assertArrayEquals(new SubAccessPath[] { s("b") }, actual);
	}
	
	@Test
	public void deltaDepth2() {
		SubAccessPath<String>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), s("b"), s("c")));
		assertArrayEquals(new SubAccessPath[] { s("b"), s("c") }, actual);
	}
	
	@Test
	public void delta() {
		SubAccessPath<String>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), anyOf("b")));
		assertArrayEquals(new SubAccessPath[] { anyOf("b") }, actual);
	}
	
	@Test
	public void delta2() {
		SubAccessPath<String>[] actual = ap(s("f"), s("g"), s("h")).getDeltaTo(ap(anyOf("f", "g"), s("h")));
		assertArrayEquals(new SubAccessPath[] {  }, actual);
	}
	
	@Test
	public void delta3() {
		SubAccessPath<String>[] actual = ap(s("f"), s("f")).getDeltaTo(ap(anyOf("f")));
		assertArrayEquals(new SubAccessPath[] { anyOf("f") } , actual);
	}
	
	@Test
	public void deltaMatchingMergedField() {
		SubAccessPath<String>[] actual = ap(s("a"), s("b")).getDeltaTo(ap(s("a"), anyOf("b")));
		assertArrayEquals(new SubAccessPath[] { anyOf("b") }, actual);
	}
	
	@Test
	public void prefixOfMergedField() {
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f"), s("h"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f"), s("h")).isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void noPrefixOfMergedField() {
		assertEquals(PrefixTestResult.NO_PREFIX, ap(s("g")).isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.NO_PREFIX, ap(s("g")).isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void prefixOfExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("f");
		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void prefixOfExclusions() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("f", "g");
		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void mergedFieldsPrefixOf() {
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap(s("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap(s("g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference("f")));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference("f", "g")));
		
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f"), s("h")).isPrefixOf(ap(s("f"), s("h"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).appendExcludedFieldReference("f").isPrefixOf(ap(s("f"), s("h"))));
	}
}










d3ba77600d7143051513161cd4078baf5e70a2b0


Switch branch/tag










heros


test


heros


alias


AccessPathTest.java



Find file
Normal viewHistoryPermalink




d3ba77600d7143051513161cd4078baf5e70a2b0


Switch branch/tag










heros


test


heros


alias


AccessPathTest.java





d3ba77600d7143051513161cd4078baf5e70a2b0


Switch branch/tag








d3ba77600d7143051513161cd4078baf5e70a2b0


Switch branch/tag





d3ba77600d7143051513161cd4078baf5e70a2b0

Switch branch/tag





Switch branch/tag



Switch branch/tagSwitch branch/tag
heros

test

heros

alias

AccessPathTest.java
Find file
Normal viewHistoryPermalink




AccessPathTest.java



8.04 KB









Newer










Older









regexp access path



Â 


Johannes Lerch
committed
Feb 05, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




137




138




139




140




141




142




143




144




145




146




147




148




149




150




151




152




153




154




155




156




157




158




159




160




161




162




163




164




165




166




167




168




169




170




171




172




173




174




175




176




177




178




179




180




181




182




183




184




185




186




187




188




189




190




191




192




193




194




195




196




197




198




199




200




201




202




203




204




205




206




207




208




209




210




211




212




213




214




215




216




217




218




219




220




221




222




223




224




225




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.*;

import java.util.Set;

import org.junit.Assert;
import org.junit.Test;

import com.google.common.collect.Sets;

import heros.alias.AccessPath.PrefixTestResult;
import heros.alias.SubAccessPath.*;

@SuppressWarnings("unchecked")
public class AccessPathTest {

	private static SetOfPossibleFieldAccesses<String> anyOf(String...fields) {
		return new SetOfPossibleFieldAccesses<String>(Sets.newHashSet(fields));
	}
	
	private static SpecificFieldAccess<String> s(String field) {
		return new SpecificFieldAccess<String>(field);
	}
	
	private static AccessPath<String> ap(SubAccessPath<String>... path) {
		return new AccessPath<String>(path, new Set[0]);
	}
	
	@Test
	public void addAndMergeAll() {
		AccessPath<String> sut = AccessPath.<String>empty().addFieldReference("a", "b", "c");
		assertEquals(ap(anyOf("a","b","c")), sut.addFieldReference("a"));
	}

	@Test
	public void addAndMergeSuffix() {
		AccessPath<String> sut = AccessPath.<String>empty().addFieldReference("a", "b", "c");
		assertEquals(ap(s("a"), anyOf("b","c")), sut.addFieldReference("b"));
	}
	
	@Test
	public void addWithoutMerge() {
		AccessPath<String> sut = ap(s("a"));
		assertEquals(ap(s("a"), s("b")), sut.addFieldReference("b"));
	}
	
	@Test
	public void addMergedFields() {
		AccessPath<String> sut = ap(s("a"));
		assertEquals(ap(anyOf("a")), sut.addFieldReference(anyOf("a")));
	}

	@Test
	public void addMergedFieldsOnExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a");
		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(anyOf("a", "b")));
	}
	
	@Test
	public void addMergedFieldsOnNestedExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(anyOf("a", "b")));
	}
	
	@Test
	public void addFieldThatMerges() {
		AccessPath<String> sut = ap(s("a"), s("b")).appendExcludedFieldReference("c").appendExcludedFieldReference("x");
		assertEquals(ap(anyOf("a", "b")).appendExcludedFieldReference("x"), sut.addFieldReference(s("a")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField() {
		AccessPath<String> sut = ap(s("a"), s("b")).appendExcludedFieldReference("c").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(s("a")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField2() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("a", "c")), sut.addFieldReference(anyOf("a","c")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField3() {
		AccessPath<String> sut = ap(s("c")).appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("c")), sut.addFieldReference(anyOf("c")));
	}
	
	@Test
	public void addOnExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(s("b")).appendExcludedFieldReference("b"), sut.addFieldReference(s("b")));
	}
	
	@Test
	public void addOnNestedExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("a", "c")), sut.addFieldReference(anyOf("a", "c")));
	}

	@Test(expected=IllegalArgumentException.class)
	public void addMergedFieldsOnSingleExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a");
		sut.addFieldReference(anyOf("a"));	
	}
	
	@Test
	public void prependWithoutMerge() {
		assertEquals(ap(s("c"), s("a"), s("b")), ap(s("a"), s("b")).prepend("c"));
	}
	
	@Test
	public void prependWithMerge() {
		assertEquals(ap(anyOf("a"), anyOf("b", "c")), ap(s("a"), anyOf("b", "c")).prepend("a"));
	}
	
	@Test
	public void prependAndMergeWithSet() {
		assertEquals(ap(anyOf("a", "b", "c")), ap(s("a"), anyOf("b", "c")).prepend("b"));
	}
	
	@Test
	public void remove() {
		assertEquals(ap(s("b")), ap(s("a"), s("b")).removeFirst("a"));
	}
	
	@Test
	public void dontRemoveMergedFields() {
		assertEquals(ap(anyOf("a", "b")), ap(anyOf("a", "b")).removeFirst("a"));
	}
	
	@Test
	public void removeMergedFieldsIfRemovingSuffix() {
		assertEquals(ap(), ap(anyOf("a", "b"), s("c")).removeFirst("c"));
	}
	
	@Test
	public void deltaDepth1() {
		SubAccessPath<String>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), s("b")));
		assertArrayEquals(new SubAccessPath[] { s("b") }, actual);
	}
	
	@Test
	public void deltaDepth2() {
		SubAccessPath<String>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), s("b"), s("c")));
		assertArrayEquals(new SubAccessPath[] { s("b"), s("c") }, actual);
	}
	
	@Test
	public void delta() {
		SubAccessPath<String>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), anyOf("b")));
		assertArrayEquals(new SubAccessPath[] { anyOf("b") }, actual);
	}
	
	@Test
	public void delta2() {
		SubAccessPath<String>[] actual = ap(s("f"), s("g"), s("h")).getDeltaTo(ap(anyOf("f", "g"), s("h")));
		assertArrayEquals(new SubAccessPath[] {  }, actual);
	}
	
	@Test
	public void delta3() {
		SubAccessPath<String>[] actual = ap(s("f"), s("f")).getDeltaTo(ap(anyOf("f")));
		assertArrayEquals(new SubAccessPath[] { anyOf("f") } , actual);
	}
	
	@Test
	public void deltaMatchingMergedField() {
		SubAccessPath<String>[] actual = ap(s("a"), s("b")).getDeltaTo(ap(s("a"), anyOf("b")));
		assertArrayEquals(new SubAccessPath[] { anyOf("b") }, actual);
	}
	
	@Test
	public void prefixOfMergedField() {
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f"), s("h"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f"), s("h")).isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void noPrefixOfMergedField() {
		assertEquals(PrefixTestResult.NO_PREFIX, ap(s("g")).isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.NO_PREFIX, ap(s("g")).isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void prefixOfExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("f");
		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void prefixOfExclusions() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("f", "g");
		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void mergedFieldsPrefixOf() {
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap(s("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap(s("g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference("f")));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference("f", "g")));
		
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f"), s("h")).isPrefixOf(ap(s("f"), s("h"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).appendExcludedFieldReference("f").isPrefixOf(ap(s("f"), s("h"))));
	}
}








AccessPathTest.java



8.04 KB










AccessPathTest.java



8.04 KB









Newer










Older
NewerOlder







regexp access path



Â 


Johannes Lerch
committed
Feb 05, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




137




138




139




140




141




142




143




144




145




146




147




148




149




150




151




152




153




154




155




156




157




158




159




160




161




162




163




164




165




166




167




168




169




170




171




172




173




174




175




176




177




178




179




180




181




182




183




184




185




186




187




188




189




190




191




192




193




194




195




196




197




198




199




200




201




202




203




204




205




206




207




208




209




210




211




212




213




214




215




216




217




218




219




220




221




222




223




224




225




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.*;

import java.util.Set;

import org.junit.Assert;
import org.junit.Test;

import com.google.common.collect.Sets;

import heros.alias.AccessPath.PrefixTestResult;
import heros.alias.SubAccessPath.*;

@SuppressWarnings("unchecked")
public class AccessPathTest {

	private static SetOfPossibleFieldAccesses<String> anyOf(String...fields) {
		return new SetOfPossibleFieldAccesses<String>(Sets.newHashSet(fields));
	}
	
	private static SpecificFieldAccess<String> s(String field) {
		return new SpecificFieldAccess<String>(field);
	}
	
	private static AccessPath<String> ap(SubAccessPath<String>... path) {
		return new AccessPath<String>(path, new Set[0]);
	}
	
	@Test
	public void addAndMergeAll() {
		AccessPath<String> sut = AccessPath.<String>empty().addFieldReference("a", "b", "c");
		assertEquals(ap(anyOf("a","b","c")), sut.addFieldReference("a"));
	}

	@Test
	public void addAndMergeSuffix() {
		AccessPath<String> sut = AccessPath.<String>empty().addFieldReference("a", "b", "c");
		assertEquals(ap(s("a"), anyOf("b","c")), sut.addFieldReference("b"));
	}
	
	@Test
	public void addWithoutMerge() {
		AccessPath<String> sut = ap(s("a"));
		assertEquals(ap(s("a"), s("b")), sut.addFieldReference("b"));
	}
	
	@Test
	public void addMergedFields() {
		AccessPath<String> sut = ap(s("a"));
		assertEquals(ap(anyOf("a")), sut.addFieldReference(anyOf("a")));
	}

	@Test
	public void addMergedFieldsOnExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a");
		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(anyOf("a", "b")));
	}
	
	@Test
	public void addMergedFieldsOnNestedExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(anyOf("a", "b")));
	}
	
	@Test
	public void addFieldThatMerges() {
		AccessPath<String> sut = ap(s("a"), s("b")).appendExcludedFieldReference("c").appendExcludedFieldReference("x");
		assertEquals(ap(anyOf("a", "b")).appendExcludedFieldReference("x"), sut.addFieldReference(s("a")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField() {
		AccessPath<String> sut = ap(s("a"), s("b")).appendExcludedFieldReference("c").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(s("a")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField2() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("a", "c")), sut.addFieldReference(anyOf("a","c")));
	}
	
	@Test
	public void addFieldThatMergesResultingInExclusionOfMergedField3() {
		AccessPath<String> sut = ap(s("c")).appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("c")), sut.addFieldReference(anyOf("c")));
	}
	
	@Test
	public void addOnExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(s("b")).appendExcludedFieldReference("b"), sut.addFieldReference(s("b")));
	}
	
	@Test
	public void addOnNestedExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");
		assertEquals(ap(anyOf("a", "c")), sut.addFieldReference(anyOf("a", "c")));
	}

	@Test(expected=IllegalArgumentException.class)
	public void addMergedFieldsOnSingleExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("a");
		sut.addFieldReference(anyOf("a"));	
	}
	
	@Test
	public void prependWithoutMerge() {
		assertEquals(ap(s("c"), s("a"), s("b")), ap(s("a"), s("b")).prepend("c"));
	}
	
	@Test
	public void prependWithMerge() {
		assertEquals(ap(anyOf("a"), anyOf("b", "c")), ap(s("a"), anyOf("b", "c")).prepend("a"));
	}
	
	@Test
	public void prependAndMergeWithSet() {
		assertEquals(ap(anyOf("a", "b", "c")), ap(s("a"), anyOf("b", "c")).prepend("b"));
	}
	
	@Test
	public void remove() {
		assertEquals(ap(s("b")), ap(s("a"), s("b")).removeFirst("a"));
	}
	
	@Test
	public void dontRemoveMergedFields() {
		assertEquals(ap(anyOf("a", "b")), ap(anyOf("a", "b")).removeFirst("a"));
	}
	
	@Test
	public void removeMergedFieldsIfRemovingSuffix() {
		assertEquals(ap(), ap(anyOf("a", "b"), s("c")).removeFirst("c"));
	}
	
	@Test
	public void deltaDepth1() {
		SubAccessPath<String>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), s("b")));
		assertArrayEquals(new SubAccessPath[] { s("b") }, actual);
	}
	
	@Test
	public void deltaDepth2() {
		SubAccessPath<String>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), s("b"), s("c")));
		assertArrayEquals(new SubAccessPath[] { s("b"), s("c") }, actual);
	}
	
	@Test
	public void delta() {
		SubAccessPath<String>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), anyOf("b")));
		assertArrayEquals(new SubAccessPath[] { anyOf("b") }, actual);
	}
	
	@Test
	public void delta2() {
		SubAccessPath<String>[] actual = ap(s("f"), s("g"), s("h")).getDeltaTo(ap(anyOf("f", "g"), s("h")));
		assertArrayEquals(new SubAccessPath[] {  }, actual);
	}
	
	@Test
	public void delta3() {
		SubAccessPath<String>[] actual = ap(s("f"), s("f")).getDeltaTo(ap(anyOf("f")));
		assertArrayEquals(new SubAccessPath[] { anyOf("f") } , actual);
	}
	
	@Test
	public void deltaMatchingMergedField() {
		SubAccessPath<String>[] actual = ap(s("a"), s("b")).getDeltaTo(ap(s("a"), anyOf("b")));
		assertArrayEquals(new SubAccessPath[] { anyOf("b") }, actual);
	}
	
	@Test
	public void prefixOfMergedField() {
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f"), s("h"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f"), s("h")).isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void noPrefixOfMergedField() {
		assertEquals(PrefixTestResult.NO_PREFIX, ap(s("g")).isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.NO_PREFIX, ap(s("g")).isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void prefixOfExclusion() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("f");
		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void prefixOfExclusions() {
		AccessPath<String> sut = ap().appendExcludedFieldReference("f", "g");
		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f"))));
		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f", "g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f"), s("h"))));
	}
	
	@Test
	public void mergedFieldsPrefixOf() {
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap(s("f"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap(s("g"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference("f")));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference("f", "g")));
		
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f"), s("h")).isPrefixOf(ap(s("f"), s("h"))));
		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).appendExcludedFieldReference("f").isPrefixOf(ap(s("f"), s("h"))));
	}
}







regexp access path



Â 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



Â 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

28

29

30

31

32

33

34

35

36

37

38

39

40

41

42

43

44

45

46

47

48

49

50

51

52

53

54

55

56

57

58

59

60

61

62

63

64

65

66

67

68

69

70

71

72

73

74

75

76

77

78

79

80

81

82

83

84

85

86

87

88

89

90

91

92

93

94

95

96

97

98

99

100

101

102

103

104

105

106

107

108

109

110

111

112

113

114

115

116

117

118

119

120

121

122

123

124

125

126

127

128

129

130

131

132

133

134

135

136

137

138

139

140

141

142

143

144

145

146

147

148

149

150

151

152

153

154

155

156

157

158

159

160

161

162

163

164

165

166

167

168

169

170

171

172

173

174

175

176

177

178

179

180

181

182

183

184

185

186

187

188

189

190

191

192

193

194

195

196

197

198

199

200

201

202

203

204

205

206

207

208

209

210

211

212

213

214

215

216

217

218

219

220

221

222

223

224

225
/*******************************************************************************/******************************************************************************* * Copyright (c) 2015 Johannes Lerch. * Copyright (c) 2015 Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;import static org.junit.Assert.*;importstaticorg.junit.Assert.*;import java.util.Set;importjava.util.Set;import org.junit.Assert;importorg.junit.Assert;import org.junit.Test;importorg.junit.Test;import com.google.common.collect.Sets;importcom.google.common.collect.Sets;import heros.alias.AccessPath.PrefixTestResult;importheros.alias.AccessPath.PrefixTestResult;import heros.alias.SubAccessPath.*;importheros.alias.SubAccessPath.*;@SuppressWarnings("unchecked")@SuppressWarnings("unchecked")public class AccessPathTest {publicclassAccessPathTest{	private static SetOfPossibleFieldAccesses<String> anyOf(String...fields) {privatestaticSetOfPossibleFieldAccesses<String>anyOf(String...fields){		return new SetOfPossibleFieldAccesses<String>(Sets.newHashSet(fields));returnnewSetOfPossibleFieldAccesses<String>(Sets.newHashSet(fields));	}}		private static SpecificFieldAccess<String> s(String field) {privatestaticSpecificFieldAccess<String>s(Stringfield){		return new SpecificFieldAccess<String>(field);returnnewSpecificFieldAccess<String>(field);	}}		private static AccessPath<String> ap(SubAccessPath<String>... path) {privatestaticAccessPath<String>ap(SubAccessPath<String>...path){		return new AccessPath<String>(path, new Set[0]);returnnewAccessPath<String>(path,newSet[0]);	}}		@Test@Test	public void addAndMergeAll() {publicvoidaddAndMergeAll(){		AccessPath<String> sut = AccessPath.<String>empty().addFieldReference("a", "b", "c");AccessPath<String>sut=AccessPath.<String>empty().addFieldReference("a","b","c");		assertEquals(ap(anyOf("a","b","c")), sut.addFieldReference("a"));assertEquals(ap(anyOf("a","b","c")),sut.addFieldReference("a"));	}}	@Test@Test	public void addAndMergeSuffix() {publicvoidaddAndMergeSuffix(){		AccessPath<String> sut = AccessPath.<String>empty().addFieldReference("a", "b", "c");AccessPath<String>sut=AccessPath.<String>empty().addFieldReference("a","b","c");		assertEquals(ap(s("a"), anyOf("b","c")), sut.addFieldReference("b"));assertEquals(ap(s("a"),anyOf("b","c")),sut.addFieldReference("b"));	}}		@Test@Test	public void addWithoutMerge() {publicvoidaddWithoutMerge(){		AccessPath<String> sut = ap(s("a"));AccessPath<String>sut=ap(s("a"));		assertEquals(ap(s("a"), s("b")), sut.addFieldReference("b"));assertEquals(ap(s("a"),s("b")),sut.addFieldReference("b"));	}}		@Test@Test	public void addMergedFields() {publicvoidaddMergedFields(){		AccessPath<String> sut = ap(s("a"));AccessPath<String>sut=ap(s("a"));		assertEquals(ap(anyOf("a")), sut.addFieldReference(anyOf("a")));assertEquals(ap(anyOf("a")),sut.addFieldReference(anyOf("a")));	}}	@Test@Test	public void addMergedFieldsOnExclusion() {publicvoidaddMergedFieldsOnExclusion(){		AccessPath<String> sut = ap().appendExcludedFieldReference("a");AccessPath<String>sut=ap().appendExcludedFieldReference("a");		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(anyOf("a", "b")));assertEquals(ap(anyOf("a","b")),sut.addFieldReference(anyOf("a","b")));	}}		@Test@Test	public void addMergedFieldsOnNestedExclusion() {publicvoidaddMergedFieldsOnNestedExclusion(){		AccessPath<String> sut = ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");AccessPath<String>sut=ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(anyOf("a", "b")));assertEquals(ap(anyOf("a","b")),sut.addFieldReference(anyOf("a","b")));	}}		@Test@Test	public void addFieldThatMerges() {publicvoidaddFieldThatMerges(){		AccessPath<String> sut = ap(s("a"), s("b")).appendExcludedFieldReference("c").appendExcludedFieldReference("x");AccessPath<String>sut=ap(s("a"),s("b")).appendExcludedFieldReference("c").appendExcludedFieldReference("x");		assertEquals(ap(anyOf("a", "b")).appendExcludedFieldReference("x"), sut.addFieldReference(s("a")));assertEquals(ap(anyOf("a","b")).appendExcludedFieldReference("x"),sut.addFieldReference(s("a")));	}}		@Test@Test	public void addFieldThatMergesResultingInExclusionOfMergedField() {publicvoidaddFieldThatMergesResultingInExclusionOfMergedField(){		AccessPath<String> sut = ap(s("a"), s("b")).appendExcludedFieldReference("c").appendExcludedFieldReference("b");AccessPath<String>sut=ap(s("a"),s("b")).appendExcludedFieldReference("c").appendExcludedFieldReference("b");		assertEquals(ap(anyOf("a", "b")), sut.addFieldReference(s("a")));assertEquals(ap(anyOf("a","b")),sut.addFieldReference(s("a")));	}}		@Test@Test	public void addFieldThatMergesResultingInExclusionOfMergedField2() {publicvoidaddFieldThatMergesResultingInExclusionOfMergedField2(){		AccessPath<String> sut = ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");AccessPath<String>sut=ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");		assertEquals(ap(anyOf("a", "c")), sut.addFieldReference(anyOf("a","c")));assertEquals(ap(anyOf("a","c")),sut.addFieldReference(anyOf("a","c")));	}}		@Test@Test	public void addFieldThatMergesResultingInExclusionOfMergedField3() {publicvoidaddFieldThatMergesResultingInExclusionOfMergedField3(){		AccessPath<String> sut = ap(s("c")).appendExcludedFieldReference("a").appendExcludedFieldReference("b");AccessPath<String>sut=ap(s("c")).appendExcludedFieldReference("a").appendExcludedFieldReference("b");		assertEquals(ap(anyOf("c")), sut.addFieldReference(anyOf("c")));assertEquals(ap(anyOf("c")),sut.addFieldReference(anyOf("c")));	}}		@Test@Test	public void addOnExclusion() {publicvoidaddOnExclusion(){		AccessPath<String> sut = ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");AccessPath<String>sut=ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");		assertEquals(ap(s("b")).appendExcludedFieldReference("b"), sut.addFieldReference(s("b")));assertEquals(ap(s("b")).appendExcludedFieldReference("b"),sut.addFieldReference(s("b")));	}}		@Test@Test	public void addOnNestedExclusion() {publicvoidaddOnNestedExclusion(){		AccessPath<String> sut = ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");AccessPath<String>sut=ap().appendExcludedFieldReference("a").appendExcludedFieldReference("b");		assertEquals(ap(anyOf("a", "c")), sut.addFieldReference(anyOf("a", "c")));assertEquals(ap(anyOf("a","c")),sut.addFieldReference(anyOf("a","c")));	}}	@Test(expected=IllegalArgumentException.class)@Test(expected=IllegalArgumentException.class)	public void addMergedFieldsOnSingleExclusion() {publicvoidaddMergedFieldsOnSingleExclusion(){		AccessPath<String> sut = ap().appendExcludedFieldReference("a");AccessPath<String>sut=ap().appendExcludedFieldReference("a");		sut.addFieldReference(anyOf("a"));	sut.addFieldReference(anyOf("a"));	}}		@Test@Test	public void prependWithoutMerge() {publicvoidprependWithoutMerge(){		assertEquals(ap(s("c"), s("a"), s("b")), ap(s("a"), s("b")).prepend("c"));assertEquals(ap(s("c"),s("a"),s("b")),ap(s("a"),s("b")).prepend("c"));	}}		@Test@Test	public void prependWithMerge() {publicvoidprependWithMerge(){		assertEquals(ap(anyOf("a"), anyOf("b", "c")), ap(s("a"), anyOf("b", "c")).prepend("a"));assertEquals(ap(anyOf("a"),anyOf("b","c")),ap(s("a"),anyOf("b","c")).prepend("a"));	}}		@Test@Test	public void prependAndMergeWithSet() {publicvoidprependAndMergeWithSet(){		assertEquals(ap(anyOf("a", "b", "c")), ap(s("a"), anyOf("b", "c")).prepend("b"));assertEquals(ap(anyOf("a","b","c")),ap(s("a"),anyOf("b","c")).prepend("b"));	}}		@Test@Test	public void remove() {publicvoidremove(){		assertEquals(ap(s("b")), ap(s("a"), s("b")).removeFirst("a"));assertEquals(ap(s("b")),ap(s("a"),s("b")).removeFirst("a"));	}}		@Test@Test	public void dontRemoveMergedFields() {publicvoiddontRemoveMergedFields(){		assertEquals(ap(anyOf("a", "b")), ap(anyOf("a", "b")).removeFirst("a"));assertEquals(ap(anyOf("a","b")),ap(anyOf("a","b")).removeFirst("a"));	}}		@Test@Test	public void removeMergedFieldsIfRemovingSuffix() {publicvoidremoveMergedFieldsIfRemovingSuffix(){		assertEquals(ap(), ap(anyOf("a", "b"), s("c")).removeFirst("c"));assertEquals(ap(),ap(anyOf("a","b"),s("c")).removeFirst("c"));	}}		@Test@Test	public void deltaDepth1() {publicvoiddeltaDepth1(){		SubAccessPath<String>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), s("b")));SubAccessPath<String>[]actual=ap(s("a")).getDeltaTo(ap(s("a"),s("b")));		assertArrayEquals(new SubAccessPath[] { s("b") }, actual);assertArrayEquals(newSubAccessPath[]{s("b")},actual);	}}		@Test@Test	public void deltaDepth2() {publicvoiddeltaDepth2(){		SubAccessPath<String>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), s("b"), s("c")));SubAccessPath<String>[]actual=ap(s("a")).getDeltaTo(ap(s("a"),s("b"),s("c")));		assertArrayEquals(new SubAccessPath[] { s("b"), s("c") }, actual);assertArrayEquals(newSubAccessPath[]{s("b"),s("c")},actual);	}}		@Test@Test	public void delta() {publicvoiddelta(){		SubAccessPath<String>[] actual = ap(s("a")).getDeltaTo(ap(s("a"), anyOf("b")));SubAccessPath<String>[]actual=ap(s("a")).getDeltaTo(ap(s("a"),anyOf("b")));		assertArrayEquals(new SubAccessPath[] { anyOf("b") }, actual);assertArrayEquals(newSubAccessPath[]{anyOf("b")},actual);	}}		@Test@Test	public void delta2() {publicvoiddelta2(){		SubAccessPath<String>[] actual = ap(s("f"), s("g"), s("h")).getDeltaTo(ap(anyOf("f", "g"), s("h")));SubAccessPath<String>[]actual=ap(s("f"),s("g"),s("h")).getDeltaTo(ap(anyOf("f","g"),s("h")));		assertArrayEquals(new SubAccessPath[] {  }, actual);assertArrayEquals(newSubAccessPath[]{},actual);	}}		@Test@Test	public void delta3() {publicvoiddelta3(){		SubAccessPath<String>[] actual = ap(s("f"), s("f")).getDeltaTo(ap(anyOf("f")));SubAccessPath<String>[]actual=ap(s("f"),s("f")).getDeltaTo(ap(anyOf("f")));		assertArrayEquals(new SubAccessPath[] { anyOf("f") } , actual);assertArrayEquals(newSubAccessPath[]{anyOf("f")},actual);	}}		@Test@Test	public void deltaMatchingMergedField() {publicvoiddeltaMatchingMergedField(){		SubAccessPath<String>[] actual = ap(s("a"), s("b")).getDeltaTo(ap(s("a"), anyOf("b")));SubAccessPath<String>[]actual=ap(s("a"),s("b")).getDeltaTo(ap(s("a"),anyOf("b")));		assertArrayEquals(new SubAccessPath[] { anyOf("b") }, actual);assertArrayEquals(newSubAccessPath[]{anyOf("b")},actual);	}}		@Test@Test	public void prefixOfMergedField() {publicvoidprefixOfMergedField(){		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f"))));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,ap(s("f")).isPrefixOf(ap(anyOf("f"))));		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f", "g"))));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,ap(s("f")).isPrefixOf(ap(anyOf("f","g"))));		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f")).isPrefixOf(ap(anyOf("f"), s("h"))));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,ap(s("f")).isPrefixOf(ap(anyOf("f"),s("h"))));		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, ap(s("f"), s("h")).isPrefixOf(ap(anyOf("f"), s("h"))));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,ap(s("f"),s("h")).isPrefixOf(ap(anyOf("f"),s("h"))));	}}		@Test@Test	public void noPrefixOfMergedField() {publicvoidnoPrefixOfMergedField(){		assertEquals(PrefixTestResult.NO_PREFIX, ap(s("g")).isPrefixOf(ap(anyOf("f"))));assertEquals(PrefixTestResult.NO_PREFIX,ap(s("g")).isPrefixOf(ap(anyOf("f"))));		assertEquals(PrefixTestResult.NO_PREFIX, ap(s("g")).isPrefixOf(ap(anyOf("f"), s("h"))));assertEquals(PrefixTestResult.NO_PREFIX,ap(s("g")).isPrefixOf(ap(anyOf("f"),s("h"))));	}}		@Test@Test	public void prefixOfExclusion() {publicvoidprefixOfExclusion(){		AccessPath<String> sut = ap().appendExcludedFieldReference("f");AccessPath<String>sut=ap().appendExcludedFieldReference("f");		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f"))));assertEquals(PrefixTestResult.NO_PREFIX,sut.isPrefixOf(ap(anyOf("f"))));		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f", "g"))));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,sut.isPrefixOf(ap(anyOf("f","g"))));		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("g"))));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,sut.isPrefixOf(ap(anyOf("g"))));		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f"), s("h"))));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,sut.isPrefixOf(ap(anyOf("f"),s("h"))));	}}		@Test@Test	public void prefixOfExclusions() {publicvoidprefixOfExclusions(){		AccessPath<String> sut = ap().appendExcludedFieldReference("f", "g");AccessPath<String>sut=ap().appendExcludedFieldReference("f","g");		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f"))));assertEquals(PrefixTestResult.NO_PREFIX,sut.isPrefixOf(ap(anyOf("f"))));		assertEquals(PrefixTestResult.NO_PREFIX, sut.isPrefixOf(ap(anyOf("f", "g"))));assertEquals(PrefixTestResult.NO_PREFIX,sut.isPrefixOf(ap(anyOf("f","g"))));		assertEquals(PrefixTestResult.GUARANTEED_PREFIX, sut.isPrefixOf(ap(anyOf("f"), s("h"))));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,sut.isPrefixOf(ap(anyOf("f"),s("h"))));	}}		@Test@Test	public void mergedFieldsPrefixOf() {publicvoidmergedFieldsPrefixOf(){		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap(s("f"))));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,ap(anyOf("f")).isPrefixOf(ap(s("f"))));		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap(s("g"))));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,ap(anyOf("f")).isPrefixOf(ap(s("g"))));		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference("f")));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference("f")));		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference("f", "g")));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,ap(anyOf("f")).isPrefixOf(ap().appendExcludedFieldReference("f","g")));				assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f"), s("h")).isPrefixOf(ap(s("f"), s("h"))));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,ap(anyOf("f"),s("h")).isPrefixOf(ap(s("f"),s("h"))));		assertEquals(PrefixTestResult.GUARANTEED_PREFIX,  ap(anyOf("f")).appendExcludedFieldReference("f").isPrefixOf(ap(s("f"), s("h"))));assertEquals(PrefixTestResult.GUARANTEED_PREFIX,ap(anyOf("f")).appendExcludedFieldReference("f").isPrefixOf(ap(s("f"),s("h"))));	}}}}





