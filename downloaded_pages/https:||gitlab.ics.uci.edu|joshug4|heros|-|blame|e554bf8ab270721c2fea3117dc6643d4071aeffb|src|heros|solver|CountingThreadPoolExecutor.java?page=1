



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros

e554bf8ab270721c2fea3117dc6643d4071aeffb

















e554bf8ab270721c2fea3117dc6643d4071aeffb


Switch branch/tag










heros


src


heros


solver


CountingThreadPoolExecutor.java



Find file
Normal viewHistoryPermalink






CountingThreadPoolExecutor.java



2.06 KB









Newer










Older









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






1




2




3




4




5




6




7




8




9




10




11




12




/*******************************************************************************
 * Copyright (c) 2012 Eric Bodden.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Eric Bodden - initial API and implementation
 ******************************************************************************/
package heros.solver;










added exception reporting for tasks in IDESolver


 

 


Eric Bodden
committed
Jun 27, 2013






13




14




import java.util.HashSet;
import java.util.Set;









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






15




16




17




18




19




20




21




22




23




24




25




import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

/**
 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned
 * tasks to allow clients to await their completion. 
 */
public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
	
	protected final CountLatch numRunningTasks = new CountLatch(0);









added exception reporting for tasks in IDESolver


 

 


Eric Bodden
committed
Jun 27, 2013






26




27




	
	protected final Set<Throwable> exceptions = new HashSet<Throwable>();









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






28




29




30




31




32




33




34





	public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,
			BlockingQueue<Runnable> workQueue) {
		super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);
	}

	@Override









bugfix: must increment counter on task submission, not when task starts executing


 

 


Eric Bodden
committed
Jan 28, 2013






35




	public void execute(Runnable command) {









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






36




		numRunningTasks.increment();









bugfix: must increment counter on task submission, not when task starts executing


 

 


Eric Bodden
committed
Jan 28, 2013






37




		super.execute(command);









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






38




	}









bugfix: must increment counter on task submission, not when task starts executing


 

 


Eric Bodden
committed
Jan 28, 2013






39




	









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






40




41




42




	@Override
	protected void afterExecute(Runnable r, Throwable t) {
		numRunningTasks.decrement();









shutdown now


 

 


Eric Bodden
committed
Jul 10, 2013






43




44




45




46




		if(t!=null) {
			exceptions.add(t);
			shutdownNow();
		}









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




		super.afterExecute(r, t);
	}

	/**
	 * Awaits the completion of all spawned tasks.
	 */
	public void awaitCompletion() throws InterruptedException {
		numRunningTasks.awaitZero();
	}
	
	/**
	 * Awaits the completion of all spawned tasks.
	 */
	public void awaitCompletion(long timeout, TimeUnit unit) throws InterruptedException {
		numRunningTasks.awaitZero(timeout, unit);
	}









added exception reporting for tasks in IDESolver


 

 


Eric Bodden
committed
Jun 27, 2013






63




64




65




66




67




68




69




	
	/**
	 * Returns the set of exceptions thrown during task execution (if any).
	 */
	public Set<Throwable> getExceptions() {
		return exceptions;
	}









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






70




71





}












H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros

e554bf8ab270721c2fea3117dc6643d4071aeffb

















e554bf8ab270721c2fea3117dc6643d4071aeffb


Switch branch/tag










heros


src


heros


solver


CountingThreadPoolExecutor.java



Find file
Normal viewHistoryPermalink






CountingThreadPoolExecutor.java



2.06 KB









Newer










Older









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






1




2




3




4




5




6




7




8




9




10




11




12




/*******************************************************************************
 * Copyright (c) 2012 Eric Bodden.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Eric Bodden - initial API and implementation
 ******************************************************************************/
package heros.solver;










added exception reporting for tasks in IDESolver


 

 


Eric Bodden
committed
Jun 27, 2013






13




14




import java.util.HashSet;
import java.util.Set;









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






15




16




17




18




19




20




21




22




23




24




25




import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

/**
 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned
 * tasks to allow clients to await their completion. 
 */
public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
	
	protected final CountLatch numRunningTasks = new CountLatch(0);









added exception reporting for tasks in IDESolver


 

 


Eric Bodden
committed
Jun 27, 2013






26




27




	
	protected final Set<Throwable> exceptions = new HashSet<Throwable>();









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






28




29




30




31




32




33




34





	public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,
			BlockingQueue<Runnable> workQueue) {
		super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);
	}

	@Override









bugfix: must increment counter on task submission, not when task starts executing


 

 


Eric Bodden
committed
Jan 28, 2013






35




	public void execute(Runnable command) {









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






36




		numRunningTasks.increment();









bugfix: must increment counter on task submission, not when task starts executing


 

 


Eric Bodden
committed
Jan 28, 2013






37




		super.execute(command);









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






38




	}









bugfix: must increment counter on task submission, not when task starts executing


 

 


Eric Bodden
committed
Jan 28, 2013






39




	









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






40




41




42




	@Override
	protected void afterExecute(Runnable r, Throwable t) {
		numRunningTasks.decrement();









shutdown now


 

 


Eric Bodden
committed
Jul 10, 2013






43




44




45




46




		if(t!=null) {
			exceptions.add(t);
			shutdownNow();
		}









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




		super.afterExecute(r, t);
	}

	/**
	 * Awaits the completion of all spawned tasks.
	 */
	public void awaitCompletion() throws InterruptedException {
		numRunningTasks.awaitZero();
	}
	
	/**
	 * Awaits the completion of all spawned tasks.
	 */
	public void awaitCompletion(long timeout, TimeUnit unit) throws InterruptedException {
		numRunningTasks.awaitZero(timeout, unit);
	}









added exception reporting for tasks in IDESolver


 

 


Eric Bodden
committed
Jun 27, 2013






63




64




65




66




67




68




69




	
	/**
	 * Returns the set of exceptions thrown during task execution (if any).
	 */
	public Set<Throwable> getExceptions() {
		return exceptions;
	}









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






70




71





}











Open sidebar



Joshua Garcia heros

e554bf8ab270721c2fea3117dc6643d4071aeffb







Open sidebar



Joshua Garcia heros

e554bf8ab270721c2fea3117dc6643d4071aeffb




Open sidebar

Joshua Garcia heros

e554bf8ab270721c2fea3117dc6643d4071aeffb


Joshua Garciaherosheros
e554bf8ab270721c2fea3117dc6643d4071aeffb










e554bf8ab270721c2fea3117dc6643d4071aeffb


Switch branch/tag










heros


src


heros


solver


CountingThreadPoolExecutor.java



Find file
Normal viewHistoryPermalink






CountingThreadPoolExecutor.java



2.06 KB









Newer










Older









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






1




2




3




4




5




6




7




8




9




10




11




12




/*******************************************************************************
 * Copyright (c) 2012 Eric Bodden.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Eric Bodden - initial API and implementation
 ******************************************************************************/
package heros.solver;










added exception reporting for tasks in IDESolver


 

 


Eric Bodden
committed
Jun 27, 2013






13




14




import java.util.HashSet;
import java.util.Set;









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






15




16




17




18




19




20




21




22




23




24




25




import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

/**
 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned
 * tasks to allow clients to await their completion. 
 */
public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
	
	protected final CountLatch numRunningTasks = new CountLatch(0);









added exception reporting for tasks in IDESolver


 

 


Eric Bodden
committed
Jun 27, 2013






26




27




	
	protected final Set<Throwable> exceptions = new HashSet<Throwable>();









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






28




29




30




31




32




33




34





	public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,
			BlockingQueue<Runnable> workQueue) {
		super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);
	}

	@Override









bugfix: must increment counter on task submission, not when task starts executing


 

 


Eric Bodden
committed
Jan 28, 2013






35




	public void execute(Runnable command) {









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






36




		numRunningTasks.increment();









bugfix: must increment counter on task submission, not when task starts executing


 

 


Eric Bodden
committed
Jan 28, 2013






37




		super.execute(command);









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






38




	}









bugfix: must increment counter on task submission, not when task starts executing


 

 


Eric Bodden
committed
Jan 28, 2013






39




	









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






40




41




42




	@Override
	protected void afterExecute(Runnable r, Throwable t) {
		numRunningTasks.decrement();









shutdown now


 

 


Eric Bodden
committed
Jul 10, 2013






43




44




45




46




		if(t!=null) {
			exceptions.add(t);
			shutdownNow();
		}









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




		super.afterExecute(r, t);
	}

	/**
	 * Awaits the completion of all spawned tasks.
	 */
	public void awaitCompletion() throws InterruptedException {
		numRunningTasks.awaitZero();
	}
	
	/**
	 * Awaits the completion of all spawned tasks.
	 */
	public void awaitCompletion(long timeout, TimeUnit unit) throws InterruptedException {
		numRunningTasks.awaitZero(timeout, unit);
	}









added exception reporting for tasks in IDESolver


 

 


Eric Bodden
committed
Jun 27, 2013






63




64




65




66




67




68




69




	
	/**
	 * Returns the set of exceptions thrown during task execution (if any).
	 */
	public Set<Throwable> getExceptions() {
		return exceptions;
	}









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






70




71





}














e554bf8ab270721c2fea3117dc6643d4071aeffb


Switch branch/tag










heros


src


heros


solver


CountingThreadPoolExecutor.java



Find file
Normal viewHistoryPermalink






CountingThreadPoolExecutor.java



2.06 KB









Newer










Older









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






1




2




3




4




5




6




7




8




9




10




11




12




/*******************************************************************************
 * Copyright (c) 2012 Eric Bodden.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Eric Bodden - initial API and implementation
 ******************************************************************************/
package heros.solver;










added exception reporting for tasks in IDESolver


 

 


Eric Bodden
committed
Jun 27, 2013






13




14




import java.util.HashSet;
import java.util.Set;









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






15




16




17




18




19




20




21




22




23




24




25




import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

/**
 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned
 * tasks to allow clients to await their completion. 
 */
public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
	
	protected final CountLatch numRunningTasks = new CountLatch(0);









added exception reporting for tasks in IDESolver


 

 


Eric Bodden
committed
Jun 27, 2013






26




27




	
	protected final Set<Throwable> exceptions = new HashSet<Throwable>();









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






28




29




30




31




32




33




34





	public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,
			BlockingQueue<Runnable> workQueue) {
		super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);
	}

	@Override









bugfix: must increment counter on task submission, not when task starts executing


 

 


Eric Bodden
committed
Jan 28, 2013






35




	public void execute(Runnable command) {









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






36




		numRunningTasks.increment();









bugfix: must increment counter on task submission, not when task starts executing


 

 


Eric Bodden
committed
Jan 28, 2013






37




		super.execute(command);









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






38




	}









bugfix: must increment counter on task submission, not when task starts executing


 

 


Eric Bodden
committed
Jan 28, 2013






39




	









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






40




41




42




	@Override
	protected void afterExecute(Runnable r, Throwable t) {
		numRunningTasks.decrement();









shutdown now


 

 


Eric Bodden
committed
Jul 10, 2013






43




44




45




46




		if(t!=null) {
			exceptions.add(t);
			shutdownNow();
		}









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




		super.afterExecute(r, t);
	}

	/**
	 * Awaits the completion of all spawned tasks.
	 */
	public void awaitCompletion() throws InterruptedException {
		numRunningTasks.awaitZero();
	}
	
	/**
	 * Awaits the completion of all spawned tasks.
	 */
	public void awaitCompletion(long timeout, TimeUnit unit) throws InterruptedException {
		numRunningTasks.awaitZero(timeout, unit);
	}









added exception reporting for tasks in IDESolver


 

 


Eric Bodden
committed
Jun 27, 2013






63




64




65




66




67




68




69




	
	/**
	 * Returns the set of exceptions thrown during task execution (if any).
	 */
	public Set<Throwable> getExceptions() {
		return exceptions;
	}









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






70




71





}










e554bf8ab270721c2fea3117dc6643d4071aeffb


Switch branch/tag










heros


src


heros


solver


CountingThreadPoolExecutor.java



Find file
Normal viewHistoryPermalink




e554bf8ab270721c2fea3117dc6643d4071aeffb


Switch branch/tag










heros


src


heros


solver


CountingThreadPoolExecutor.java





e554bf8ab270721c2fea3117dc6643d4071aeffb


Switch branch/tag








e554bf8ab270721c2fea3117dc6643d4071aeffb


Switch branch/tag





e554bf8ab270721c2fea3117dc6643d4071aeffb

Switch branch/tag





Switch branch/tag



Switch branch/tagSwitch branch/tag
heros

src

heros

solver

CountingThreadPoolExecutor.java
Find file
Normal viewHistoryPermalink




CountingThreadPoolExecutor.java



2.06 KB









Newer










Older









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






1




2




3




4




5




6




7




8




9




10




11




12




/*******************************************************************************
 * Copyright (c) 2012 Eric Bodden.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Eric Bodden - initial API and implementation
 ******************************************************************************/
package heros.solver;










added exception reporting for tasks in IDESolver


 

 


Eric Bodden
committed
Jun 27, 2013






13




14




import java.util.HashSet;
import java.util.Set;









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






15




16




17




18




19




20




21




22




23




24




25




import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

/**
 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned
 * tasks to allow clients to await their completion. 
 */
public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
	
	protected final CountLatch numRunningTasks = new CountLatch(0);









added exception reporting for tasks in IDESolver


 

 


Eric Bodden
committed
Jun 27, 2013






26




27




	
	protected final Set<Throwable> exceptions = new HashSet<Throwable>();









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






28




29




30




31




32




33




34





	public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,
			BlockingQueue<Runnable> workQueue) {
		super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);
	}

	@Override









bugfix: must increment counter on task submission, not when task starts executing


 

 


Eric Bodden
committed
Jan 28, 2013






35




	public void execute(Runnable command) {









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






36




		numRunningTasks.increment();









bugfix: must increment counter on task submission, not when task starts executing


 

 


Eric Bodden
committed
Jan 28, 2013






37




		super.execute(command);









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






38




	}









bugfix: must increment counter on task submission, not when task starts executing


 

 


Eric Bodden
committed
Jan 28, 2013






39




	









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






40




41




42




	@Override
	protected void afterExecute(Runnable r, Throwable t) {
		numRunningTasks.decrement();









shutdown now


 

 


Eric Bodden
committed
Jul 10, 2013






43




44




45




46




		if(t!=null) {
			exceptions.add(t);
			shutdownNow();
		}









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




		super.afterExecute(r, t);
	}

	/**
	 * Awaits the completion of all spawned tasks.
	 */
	public void awaitCompletion() throws InterruptedException {
		numRunningTasks.awaitZero();
	}
	
	/**
	 * Awaits the completion of all spawned tasks.
	 */
	public void awaitCompletion(long timeout, TimeUnit unit) throws InterruptedException {
		numRunningTasks.awaitZero(timeout, unit);
	}









added exception reporting for tasks in IDESolver


 

 


Eric Bodden
committed
Jun 27, 2013






63




64




65




66




67




68




69




	
	/**
	 * Returns the set of exceptions thrown during task execution (if any).
	 */
	public Set<Throwable> getExceptions() {
		return exceptions;
	}









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






70




71





}








CountingThreadPoolExecutor.java



2.06 KB










CountingThreadPoolExecutor.java



2.06 KB









Newer










Older
NewerOlder







further cleanups



 


Eric Bodden
committed
Jan 26, 2013






1




2




3




4




5




6




7




8




9




10




11




12




/*******************************************************************************
 * Copyright (c) 2012 Eric Bodden.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Eric Bodden - initial API and implementation
 ******************************************************************************/
package heros.solver;










added exception reporting for tasks in IDESolver


 

 


Eric Bodden
committed
Jun 27, 2013






13




14




import java.util.HashSet;
import java.util.Set;









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






15




16




17




18




19




20




21




22




23




24




25




import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

/**
 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned
 * tasks to allow clients to await their completion. 
 */
public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
	
	protected final CountLatch numRunningTasks = new CountLatch(0);









added exception reporting for tasks in IDESolver


 

 


Eric Bodden
committed
Jun 27, 2013






26




27




	
	protected final Set<Throwable> exceptions = new HashSet<Throwable>();









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






28




29




30




31




32




33




34





	public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,
			BlockingQueue<Runnable> workQueue) {
		super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);
	}

	@Override









bugfix: must increment counter on task submission, not when task starts executing


 

 


Eric Bodden
committed
Jan 28, 2013






35




	public void execute(Runnable command) {









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






36




		numRunningTasks.increment();









bugfix: must increment counter on task submission, not when task starts executing


 

 


Eric Bodden
committed
Jan 28, 2013






37




		super.execute(command);









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






38




	}









bugfix: must increment counter on task submission, not when task starts executing


 

 


Eric Bodden
committed
Jan 28, 2013






39




	









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






40




41




42




	@Override
	protected void afterExecute(Runnable r, Throwable t) {
		numRunningTasks.decrement();









shutdown now


 

 


Eric Bodden
committed
Jul 10, 2013






43




44




45




46




		if(t!=null) {
			exceptions.add(t);
			shutdownNow();
		}









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




		super.afterExecute(r, t);
	}

	/**
	 * Awaits the completion of all spawned tasks.
	 */
	public void awaitCompletion() throws InterruptedException {
		numRunningTasks.awaitZero();
	}
	
	/**
	 * Awaits the completion of all spawned tasks.
	 */
	public void awaitCompletion(long timeout, TimeUnit unit) throws InterruptedException {
		numRunningTasks.awaitZero(timeout, unit);
	}









added exception reporting for tasks in IDESolver


 

 


Eric Bodden
committed
Jun 27, 2013






63




64




65




66




67




68




69




	
	/**
	 * Returns the set of exceptions thrown during task execution (if any).
	 */
	public Set<Throwable> getExceptions() {
		return exceptions;
	}









further cleanups



 


Eric Bodden
committed
Jan 26, 2013






70




71





}







further cleanups



 


Eric Bodden
committed
Jan 26, 2013



further cleanups



 

further cleanups


Eric Bodden
committed
Jan 26, 2013

1

2

3

4

5

6

7

8

9

10

11

12
/*******************************************************************************/******************************************************************************* * Copyright (c) 2012 Eric Bodden. * Copyright (c) 2012 Eric Bodden. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Eric Bodden - initial API and implementation *     Eric Bodden - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.solver;packageheros.solver;



added exception reporting for tasks in IDESolver


 

 


Eric Bodden
committed
Jun 27, 2013



added exception reporting for tasks in IDESolver


 

 

added exception reporting for tasks in IDESolver

 

Eric Bodden
committed
Jun 27, 2013

13

14
import java.util.HashSet;importjava.util.HashSet;import java.util.Set;importjava.util.Set;



further cleanups



 


Eric Bodden
committed
Jan 26, 2013



further cleanups



 

further cleanups


Eric Bodden
committed
Jan 26, 2013

15

16

17

18

19

20

21

22

23

24

25
import java.util.concurrent.BlockingQueue;importjava.util.concurrent.BlockingQueue;import java.util.concurrent.ThreadPoolExecutor;importjava.util.concurrent.ThreadPoolExecutor;import java.util.concurrent.TimeUnit;importjava.util.concurrent.TimeUnit;/**/** * A {@link ThreadPoolExecutor} which keeps track of the number of spawned * A {@link ThreadPoolExecutor} which keeps track of the number of spawned * tasks to allow clients to await their completion.  * tasks to allow clients to await their completion.  */ */public class CountingThreadPoolExecutor extends ThreadPoolExecutor {publicclassCountingThreadPoolExecutorextendsThreadPoolExecutor{		protected final CountLatch numRunningTasks = new CountLatch(0);protectedfinalCountLatchnumRunningTasks=newCountLatch(0);



added exception reporting for tasks in IDESolver


 

 


Eric Bodden
committed
Jun 27, 2013



added exception reporting for tasks in IDESolver


 

 

added exception reporting for tasks in IDESolver

 

Eric Bodden
committed
Jun 27, 2013

26

27
		protected final Set<Throwable> exceptions = new HashSet<Throwable>();protectedfinalSet<Throwable>exceptions=newHashSet<Throwable>();



further cleanups



 


Eric Bodden
committed
Jan 26, 2013



further cleanups



 

further cleanups


Eric Bodden
committed
Jan 26, 2013

28

29

30

31

32

33

34
	public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,publicCountingThreadPoolExecutor(intcorePoolSize,intmaximumPoolSize,longkeepAliveTime,TimeUnitunit,			BlockingQueue<Runnable> workQueue) {BlockingQueue<Runnable>workQueue){		super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);super(corePoolSize,maximumPoolSize,keepAliveTime,unit,workQueue);	}}	@Override@Override



bugfix: must increment counter on task submission, not when task starts executing


 

 


Eric Bodden
committed
Jan 28, 2013



bugfix: must increment counter on task submission, not when task starts executing


 

 

bugfix: must increment counter on task submission, not when task starts executing

 

Eric Bodden
committed
Jan 28, 2013

35
	public void execute(Runnable command) {publicvoidexecute(Runnablecommand){



further cleanups



 


Eric Bodden
committed
Jan 26, 2013



further cleanups



 

further cleanups


Eric Bodden
committed
Jan 26, 2013

36
		numRunningTasks.increment();numRunningTasks.increment();



bugfix: must increment counter on task submission, not when task starts executing


 

 


Eric Bodden
committed
Jan 28, 2013



bugfix: must increment counter on task submission, not when task starts executing


 

 

bugfix: must increment counter on task submission, not when task starts executing

 

Eric Bodden
committed
Jan 28, 2013

37
		super.execute(command);super.execute(command);



further cleanups



 


Eric Bodden
committed
Jan 26, 2013



further cleanups



 

further cleanups


Eric Bodden
committed
Jan 26, 2013

38
	}}



bugfix: must increment counter on task submission, not when task starts executing


 

 


Eric Bodden
committed
Jan 28, 2013



bugfix: must increment counter on task submission, not when task starts executing


 

 

bugfix: must increment counter on task submission, not when task starts executing

 

Eric Bodden
committed
Jan 28, 2013

39
	



further cleanups



 


Eric Bodden
committed
Jan 26, 2013



further cleanups



 

further cleanups


Eric Bodden
committed
Jan 26, 2013

40

41

42
	@Override@Override	protected void afterExecute(Runnable r, Throwable t) {protectedvoidafterExecute(Runnabler,Throwablet){		numRunningTasks.decrement();numRunningTasks.decrement();



shutdown now


 

 


Eric Bodden
committed
Jul 10, 2013



shutdown now


 

 

shutdown now

 

Eric Bodden
committed
Jul 10, 2013

43

44

45

46
		if(t!=null) {if(t!=null){			exceptions.add(t);exceptions.add(t);			shutdownNow();shutdownNow();		}}



further cleanups



 


Eric Bodden
committed
Jan 26, 2013



further cleanups



 

further cleanups


Eric Bodden
committed
Jan 26, 2013

47

48

49

50

51

52

53

54

55

56

57

58

59

60

61

62
		super.afterExecute(r, t);super.afterExecute(r,t);	}}	/**/**	 * Awaits the completion of all spawned tasks.	 * Awaits the completion of all spawned tasks.	 */	 */	public void awaitCompletion() throws InterruptedException {publicvoidawaitCompletion()throwsInterruptedException{		numRunningTasks.awaitZero();numRunningTasks.awaitZero();	}}		/**/**	 * Awaits the completion of all spawned tasks.	 * Awaits the completion of all spawned tasks.	 */	 */	public void awaitCompletion(long timeout, TimeUnit unit) throws InterruptedException {publicvoidawaitCompletion(longtimeout,TimeUnitunit)throwsInterruptedException{		numRunningTasks.awaitZero(timeout, unit);numRunningTasks.awaitZero(timeout,unit);	}}



added exception reporting for tasks in IDESolver


 

 


Eric Bodden
committed
Jun 27, 2013



added exception reporting for tasks in IDESolver


 

 

added exception reporting for tasks in IDESolver

 

Eric Bodden
committed
Jun 27, 2013

63

64

65

66

67

68

69
		/**/**	 * Returns the set of exceptions thrown during task execution (if any).	 * Returns the set of exceptions thrown during task execution (if any).	 */	 */	public Set<Throwable> getExceptions() {publicSet<Throwable>getExceptions(){		return exceptions;returnexceptions;	}}



further cleanups



 


Eric Bodden
committed
Jan 26, 2013



further cleanups



 

further cleanups


Eric Bodden
committed
Jan 26, 2013

70

71
}}





