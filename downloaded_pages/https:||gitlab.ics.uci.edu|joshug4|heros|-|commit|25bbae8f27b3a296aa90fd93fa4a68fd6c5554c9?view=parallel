



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

25bbae8f















Commit
25bbae8f


authored
Sep 18, 2013
by


Steven Arzt



Browse files




Refactored flow function computation to call FlowFunction.computeTargets in a...

Refactored flow function computation to call FlowFunction.computeTargets in a protected method (which can be overwritten by child classes) instead of directly in the solver logic.

The concrete use case was a return flow function which needed access to the context in which it was applied. With this refactoring, one can now simply subclass the solver, overwrite the new protected method and do one's problem-specific magic there.






parent
77f730bf













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 25bbae8f








...@@ -334,7 +334,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -334,7 +334,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 //for each target value of the function





 //for each target value of the function







 for(D d5: retFunction.computeTargets(d4)) {





 for(D d5: computeReturnFlowFunction(retFunction, d4, Collections.singleton(d1))) {







 //update the caller-side summary function





 //update the caller-side summary function







 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);



...@@ -351,7 +351,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -351,7 +351,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 for (N returnSiteN : returnSiteNs) {





 for (N returnSiteN : returnSiteNs) {







 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);





 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {





 for(D d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2)) {







 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);





 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);







 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);





 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);







 }





 }



...@@ -359,7 +359,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -359,7 +359,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }





















 /**





 /**







	 * Lines 21-32 of the algorithm.	





	 * Computes the call-to-return flow function for the given call-site









	 * asbtraction









	 * @param callToReturnFlowFunction The call-to-return flow function to









	 * compute









	 * @param d1 The abstraction at the current method's start node.









	 * @param d2 The abstraction at the return size









	 * @return The set of caller-side abstractions at the return site









	 */









 protected Set<D> computeCallToReturnFlowFunction









 (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {









 return callToReturnFlowFunction.computeTargets(d2);









 }



















 /**









	 * Lines 21-32 of the algorithm.







	 * 





	 * 







	 * Stores callee-side summaries.





	 * Stores callee-side summaries.







	 * Also, at the side of the caller, propagates intra-procedural flows to return sites





	 * Also, at the side of the caller, propagates intra-procedural flows to return sites



...@@ -399,7 +413,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -399,7 +413,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //compute return-flow function





 //compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 Set<D> targets = retFunction.computeTargets(d2);





 Set<D> targets = computeReturnFlowFunction(retFunction, d2, entry.getValue());







 //for each incoming-call value





 //for each incoming-call value







 for(D d4: entry.getValue()) {





 for(D d4: entry.getValue()) {







 //for each target value at the return site





 //for each target value at the return site



...@@ -450,6 +464,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -450,6 +464,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 }





 }







 





 









 /**









	 * Computes the return flow function for the given set of caller-side









	 * abstractions.









	 * @param retFunction The return flow function to compute









	 * @param d2 The abstraction at the exit node in the callee









	 * @param callerSideD1s The abstractions at the callers' start nodes.









	 * @return The set of caller-side abstractions at the return site









	 */









 protected Set<D> computeReturnFlowFunction









 (FlowFunction<D> retFunction, D d2, Set<D> callerSideD1s) {









 return retFunction.computeTargets(d2);









 }

















 /**





 /**







	 * Lines 33-37 of the algorithm.





	 * Lines 33-37 of the algorithm.







	 * Simply propagate normal, intra-procedural flows.





	 * Simply propagate normal, intra-procedural flows.



...@@ -463,7 +490,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -463,7 +490,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 for (N m : icfg.getSuccsOf(n)) {





 for (N m : icfg.getSuccsOf(n)) {







 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);





 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 Set<D> res = flowFunction.computeTargets(d2);





 Set<D> res = computeNormalFlowFunction(flowFunction, d1, d2);







 for (D d3 : res) {





 for (D d3 : res) {







 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));





 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));







 propagate(d1, m, d3, fprime, null, false); 





 propagate(d1, m, d3, fprime, null, false); 



...@@ -471,6 +498,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -471,6 +498,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 }





 }







 





 









 /**









	 * Computes the normal flow function for the given set of start and end









	 * abstractions-









	 * @param flowFunction The normal flow function to compute









	 * @param d1 The abstraction at the method's start node









	 * @param d1 The abstraction at the current node









	 * @return The set of abstractions at the successor node









	 */









 protected Set<D> computeNormalFlowFunction









 (FlowFunction<D> flowFunction, D d1, D d2) {









 return flowFunction.computeTargets(d2);









 }

















 /**





 /**







	 * Propagates the flow further down the exploded super graph, merging any edge function that might





	 * Propagates the flow further down the exploded super graph, merging any edge function that might







	 * already have been computed for targetVal at target. 





	 * already have been computed for targetVal at target. 



......

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

25bbae8f















Commit
25bbae8f


authored
Sep 18, 2013
by


Steven Arzt



Browse files




Refactored flow function computation to call FlowFunction.computeTargets in a...

Refactored flow function computation to call FlowFunction.computeTargets in a protected method (which can be overwritten by child classes) instead of directly in the solver logic.

The concrete use case was a return flow function which needed access to the context in which it was applied. With this refactoring, one can now simply subclass the solver, overwrite the new protected method and do one's problem-specific magic there.






parent
77f730bf













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 25bbae8f








...@@ -334,7 +334,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -334,7 +334,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 //for each target value of the function





 //for each target value of the function







 for(D d5: retFunction.computeTargets(d4)) {





 for(D d5: computeReturnFlowFunction(retFunction, d4, Collections.singleton(d1))) {







 //update the caller-side summary function





 //update the caller-side summary function







 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);



...@@ -351,7 +351,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -351,7 +351,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 for (N returnSiteN : returnSiteNs) {





 for (N returnSiteN : returnSiteNs) {







 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);





 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {





 for(D d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2)) {







 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);





 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);







 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);





 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);







 }





 }



...@@ -359,7 +359,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -359,7 +359,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }





















 /**





 /**







	 * Lines 21-32 of the algorithm.	





	 * Computes the call-to-return flow function for the given call-site









	 * asbtraction









	 * @param callToReturnFlowFunction The call-to-return flow function to









	 * compute









	 * @param d1 The abstraction at the current method's start node.









	 * @param d2 The abstraction at the return size









	 * @return The set of caller-side abstractions at the return site









	 */









 protected Set<D> computeCallToReturnFlowFunction









 (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {









 return callToReturnFlowFunction.computeTargets(d2);









 }



















 /**









	 * Lines 21-32 of the algorithm.







	 * 





	 * 







	 * Stores callee-side summaries.





	 * Stores callee-side summaries.







	 * Also, at the side of the caller, propagates intra-procedural flows to return sites





	 * Also, at the side of the caller, propagates intra-procedural flows to return sites



...@@ -399,7 +413,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -399,7 +413,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //compute return-flow function





 //compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 Set<D> targets = retFunction.computeTargets(d2);





 Set<D> targets = computeReturnFlowFunction(retFunction, d2, entry.getValue());







 //for each incoming-call value





 //for each incoming-call value







 for(D d4: entry.getValue()) {





 for(D d4: entry.getValue()) {







 //for each target value at the return site





 //for each target value at the return site



...@@ -450,6 +464,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -450,6 +464,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 }





 }







 





 









 /**









	 * Computes the return flow function for the given set of caller-side









	 * abstractions.









	 * @param retFunction The return flow function to compute









	 * @param d2 The abstraction at the exit node in the callee









	 * @param callerSideD1s The abstractions at the callers' start nodes.









	 * @return The set of caller-side abstractions at the return site









	 */









 protected Set<D> computeReturnFlowFunction









 (FlowFunction<D> retFunction, D d2, Set<D> callerSideD1s) {









 return retFunction.computeTargets(d2);









 }

















 /**





 /**







	 * Lines 33-37 of the algorithm.





	 * Lines 33-37 of the algorithm.







	 * Simply propagate normal, intra-procedural flows.





	 * Simply propagate normal, intra-procedural flows.



...@@ -463,7 +490,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -463,7 +490,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 for (N m : icfg.getSuccsOf(n)) {





 for (N m : icfg.getSuccsOf(n)) {







 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);





 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 Set<D> res = flowFunction.computeTargets(d2);





 Set<D> res = computeNormalFlowFunction(flowFunction, d1, d2);







 for (D d3 : res) {





 for (D d3 : res) {







 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));





 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));







 propagate(d1, m, d3, fprime, null, false); 





 propagate(d1, m, d3, fprime, null, false); 



...@@ -471,6 +498,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -471,6 +498,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 }





 }







 





 









 /**









	 * Computes the normal flow function for the given set of start and end









	 * abstractions-









	 * @param flowFunction The normal flow function to compute









	 * @param d1 The abstraction at the method's start node









	 * @param d1 The abstraction at the current node









	 * @return The set of abstractions at the successor node









	 */









 protected Set<D> computeNormalFlowFunction









 (FlowFunction<D> flowFunction, D d1, D d2) {









 return flowFunction.computeTargets(d2);









 }

















 /**





 /**







	 * Propagates the flow further down the exploded super graph, merging any edge function that might





	 * Propagates the flow further down the exploded super graph, merging any edge function that might







	 * already have been computed for targetVal at target. 





	 * already have been computed for targetVal at target. 



......

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

25bbae8f







Open sidebar



Joshua Garcia heros
Commits

25bbae8f




Open sidebar

Joshua Garcia heros
Commits

25bbae8f


Joshua GarciaherosherosCommits
25bbae8f








Commit
25bbae8f


authored
Sep 18, 2013
by


Steven Arzt



Browse files




Refactored flow function computation to call FlowFunction.computeTargets in a...

Refactored flow function computation to call FlowFunction.computeTargets in a protected method (which can be overwritten by child classes) instead of directly in the solver logic.

The concrete use case was a return flow function which needed access to the context in which it was applied. With this refactoring, one can now simply subclass the solver, overwrite the new protected method and do one's problem-specific magic there.






parent
77f730bf













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 25bbae8f








...@@ -334,7 +334,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -334,7 +334,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 //for each target value of the function





 //for each target value of the function







 for(D d5: retFunction.computeTargets(d4)) {





 for(D d5: computeReturnFlowFunction(retFunction, d4, Collections.singleton(d1))) {







 //update the caller-side summary function





 //update the caller-side summary function







 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);



...@@ -351,7 +351,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -351,7 +351,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 for (N returnSiteN : returnSiteNs) {





 for (N returnSiteN : returnSiteNs) {







 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);





 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {





 for(D d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2)) {







 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);





 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);







 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);





 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);







 }





 }



...@@ -359,7 +359,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -359,7 +359,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }





















 /**





 /**







	 * Lines 21-32 of the algorithm.	





	 * Computes the call-to-return flow function for the given call-site









	 * asbtraction









	 * @param callToReturnFlowFunction The call-to-return flow function to









	 * compute









	 * @param d1 The abstraction at the current method's start node.









	 * @param d2 The abstraction at the return size









	 * @return The set of caller-side abstractions at the return site









	 */









 protected Set<D> computeCallToReturnFlowFunction









 (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {









 return callToReturnFlowFunction.computeTargets(d2);









 }



















 /**









	 * Lines 21-32 of the algorithm.







	 * 





	 * 







	 * Stores callee-side summaries.





	 * Stores callee-side summaries.







	 * Also, at the side of the caller, propagates intra-procedural flows to return sites





	 * Also, at the side of the caller, propagates intra-procedural flows to return sites



...@@ -399,7 +413,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -399,7 +413,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //compute return-flow function





 //compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 Set<D> targets = retFunction.computeTargets(d2);





 Set<D> targets = computeReturnFlowFunction(retFunction, d2, entry.getValue());







 //for each incoming-call value





 //for each incoming-call value







 for(D d4: entry.getValue()) {





 for(D d4: entry.getValue()) {







 //for each target value at the return site





 //for each target value at the return site



...@@ -450,6 +464,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -450,6 +464,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 }





 }







 





 









 /**









	 * Computes the return flow function for the given set of caller-side









	 * abstractions.









	 * @param retFunction The return flow function to compute









	 * @param d2 The abstraction at the exit node in the callee









	 * @param callerSideD1s The abstractions at the callers' start nodes.









	 * @return The set of caller-side abstractions at the return site









	 */









 protected Set<D> computeReturnFlowFunction









 (FlowFunction<D> retFunction, D d2, Set<D> callerSideD1s) {









 return retFunction.computeTargets(d2);









 }

















 /**





 /**







	 * Lines 33-37 of the algorithm.





	 * Lines 33-37 of the algorithm.







	 * Simply propagate normal, intra-procedural flows.





	 * Simply propagate normal, intra-procedural flows.



...@@ -463,7 +490,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -463,7 +490,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 for (N m : icfg.getSuccsOf(n)) {





 for (N m : icfg.getSuccsOf(n)) {







 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);





 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 Set<D> res = flowFunction.computeTargets(d2);





 Set<D> res = computeNormalFlowFunction(flowFunction, d1, d2);







 for (D d3 : res) {





 for (D d3 : res) {







 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));





 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));







 propagate(d1, m, d3, fprime, null, false); 





 propagate(d1, m, d3, fprime, null, false); 



...@@ -471,6 +498,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -471,6 +498,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 }





 }







 





 









 /**









	 * Computes the normal flow function for the given set of start and end









	 * abstractions-









	 * @param flowFunction The normal flow function to compute









	 * @param d1 The abstraction at the method's start node









	 * @param d1 The abstraction at the current node









	 * @return The set of abstractions at the successor node









	 */









 protected Set<D> computeNormalFlowFunction









 (FlowFunction<D> flowFunction, D d1, D d2) {









 return flowFunction.computeTargets(d2);









 }

















 /**





 /**







	 * Propagates the flow further down the exploded super graph, merging any edge function that might





	 * Propagates the flow further down the exploded super graph, merging any edge function that might







	 * already have been computed for targetVal at target. 





	 * already have been computed for targetVal at target. 



......

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
25bbae8f


authored
Sep 18, 2013
by


Steven Arzt



Browse files




Refactored flow function computation to call FlowFunction.computeTargets in a...

Refactored flow function computation to call FlowFunction.computeTargets in a protected method (which can be overwritten by child classes) instead of directly in the solver logic.

The concrete use case was a return flow function which needed access to the context in which it was applied. With this refactoring, one can now simply subclass the solver, overwrite the new protected method and do one's problem-specific magic there.






parent
77f730bf













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 25bbae8f








...@@ -334,7 +334,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -334,7 +334,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 //for each target value of the function





 //for each target value of the function







 for(D d5: retFunction.computeTargets(d4)) {





 for(D d5: computeReturnFlowFunction(retFunction, d4, Collections.singleton(d1))) {







 //update the caller-side summary function





 //update the caller-side summary function







 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);



...@@ -351,7 +351,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -351,7 +351,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 for (N returnSiteN : returnSiteNs) {





 for (N returnSiteN : returnSiteNs) {







 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);





 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {





 for(D d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2)) {







 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);





 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);







 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);





 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);







 }





 }



...@@ -359,7 +359,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -359,7 +359,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }





















 /**





 /**







	 * Lines 21-32 of the algorithm.	





	 * Computes the call-to-return flow function for the given call-site









	 * asbtraction









	 * @param callToReturnFlowFunction The call-to-return flow function to









	 * compute









	 * @param d1 The abstraction at the current method's start node.









	 * @param d2 The abstraction at the return size









	 * @return The set of caller-side abstractions at the return site









	 */









 protected Set<D> computeCallToReturnFlowFunction









 (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {









 return callToReturnFlowFunction.computeTargets(d2);









 }



















 /**









	 * Lines 21-32 of the algorithm.







	 * 





	 * 







	 * Stores callee-side summaries.





	 * Stores callee-side summaries.







	 * Also, at the side of the caller, propagates intra-procedural flows to return sites





	 * Also, at the side of the caller, propagates intra-procedural flows to return sites



...@@ -399,7 +413,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -399,7 +413,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //compute return-flow function





 //compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 Set<D> targets = retFunction.computeTargets(d2);





 Set<D> targets = computeReturnFlowFunction(retFunction, d2, entry.getValue());







 //for each incoming-call value





 //for each incoming-call value







 for(D d4: entry.getValue()) {





 for(D d4: entry.getValue()) {







 //for each target value at the return site





 //for each target value at the return site



...@@ -450,6 +464,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -450,6 +464,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 }





 }







 





 









 /**









	 * Computes the return flow function for the given set of caller-side









	 * abstractions.









	 * @param retFunction The return flow function to compute









	 * @param d2 The abstraction at the exit node in the callee









	 * @param callerSideD1s The abstractions at the callers' start nodes.









	 * @return The set of caller-side abstractions at the return site









	 */









 protected Set<D> computeReturnFlowFunction









 (FlowFunction<D> retFunction, D d2, Set<D> callerSideD1s) {









 return retFunction.computeTargets(d2);









 }

















 /**





 /**







	 * Lines 33-37 of the algorithm.





	 * Lines 33-37 of the algorithm.







	 * Simply propagate normal, intra-procedural flows.





	 * Simply propagate normal, intra-procedural flows.



...@@ -463,7 +490,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -463,7 +490,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 for (N m : icfg.getSuccsOf(n)) {





 for (N m : icfg.getSuccsOf(n)) {







 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);





 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 Set<D> res = flowFunction.computeTargets(d2);





 Set<D> res = computeNormalFlowFunction(flowFunction, d1, d2);







 for (D d3 : res) {





 for (D d3 : res) {







 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));





 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));







 propagate(d1, m, d3, fprime, null, false); 





 propagate(d1, m, d3, fprime, null, false); 



...@@ -471,6 +498,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -471,6 +498,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 }





 }







 





 









 /**









	 * Computes the normal flow function for the given set of start and end









	 * abstractions-









	 * @param flowFunction The normal flow function to compute









	 * @param d1 The abstraction at the method's start node









	 * @param d1 The abstraction at the current node









	 * @return The set of abstractions at the successor node









	 */









 protected Set<D> computeNormalFlowFunction









 (FlowFunction<D> flowFunction, D d1, D d2) {









 return flowFunction.computeTargets(d2);









 }

















 /**





 /**







	 * Propagates the flow further down the exploded super graph, merging any edge function that might





	 * Propagates the flow further down the exploded super graph, merging any edge function that might







	 * already have been computed for targetVal at target. 





	 * already have been computed for targetVal at target. 



......

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
25bbae8f


authored
Sep 18, 2013
by


Steven Arzt



Browse files



Commit
25bbae8f


authored
Sep 18, 2013
by


Steven Arzt

25bbae8fauthoredbySteven Arzt

Refactored flow function computation to call FlowFunction.computeTargets in a...

Refactored flow function computation to call FlowFunction.computeTargets in a protected method (which can be overwritten by child classes) instead of directly in the solver logic.

The concrete use case was a return flow function which needed access to the context in which it was applied. With this refactoring, one can now simply subclass the solver, overwrite the new protected method and do one's problem-specific magic there.





parent
77f730bf
















parent
77f730bf





parent












Changes
1
1


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/solver/IDESolver.java








View file @ 25bbae8f








...@@ -334,7 +334,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -334,7 +334,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 //for each target value of the function





 //for each target value of the function







 for(D d5: retFunction.computeTargets(d4)) {





 for(D d5: computeReturnFlowFunction(retFunction, d4, Collections.singleton(d1))) {







 //update the caller-side summary function





 //update the caller-side summary function







 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);



...@@ -351,7 +351,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -351,7 +351,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 for (N returnSiteN : returnSiteNs) {





 for (N returnSiteN : returnSiteNs) {







 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);





 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {





 for(D d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2)) {







 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);





 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);







 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);





 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);







 }





 }



...@@ -359,7 +359,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -359,7 +359,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }





















 /**





 /**







	 * Lines 21-32 of the algorithm.	





	 * Computes the call-to-return flow function for the given call-site









	 * asbtraction









	 * @param callToReturnFlowFunction The call-to-return flow function to









	 * compute









	 * @param d1 The abstraction at the current method's start node.









	 * @param d2 The abstraction at the return size









	 * @return The set of caller-side abstractions at the return site









	 */









 protected Set<D> computeCallToReturnFlowFunction









 (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {









 return callToReturnFlowFunction.computeTargets(d2);









 }



















 /**









	 * Lines 21-32 of the algorithm.







	 * 





	 * 







	 * Stores callee-side summaries.





	 * Stores callee-side summaries.







	 * Also, at the side of the caller, propagates intra-procedural flows to return sites





	 * Also, at the side of the caller, propagates intra-procedural flows to return sites



...@@ -399,7 +413,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -399,7 +413,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //compute return-flow function





 //compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 Set<D> targets = retFunction.computeTargets(d2);





 Set<D> targets = computeReturnFlowFunction(retFunction, d2, entry.getValue());







 //for each incoming-call value





 //for each incoming-call value







 for(D d4: entry.getValue()) {





 for(D d4: entry.getValue()) {







 //for each target value at the return site





 //for each target value at the return site



...@@ -450,6 +464,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -450,6 +464,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 }





 }







 





 









 /**









	 * Computes the return flow function for the given set of caller-side









	 * abstractions.









	 * @param retFunction The return flow function to compute









	 * @param d2 The abstraction at the exit node in the callee









	 * @param callerSideD1s The abstractions at the callers' start nodes.









	 * @return The set of caller-side abstractions at the return site









	 */









 protected Set<D> computeReturnFlowFunction









 (FlowFunction<D> retFunction, D d2, Set<D> callerSideD1s) {









 return retFunction.computeTargets(d2);









 }

















 /**





 /**







	 * Lines 33-37 of the algorithm.





	 * Lines 33-37 of the algorithm.







	 * Simply propagate normal, intra-procedural flows.





	 * Simply propagate normal, intra-procedural flows.



...@@ -463,7 +490,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -463,7 +490,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 for (N m : icfg.getSuccsOf(n)) {





 for (N m : icfg.getSuccsOf(n)) {







 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);





 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 Set<D> res = flowFunction.computeTargets(d2);





 Set<D> res = computeNormalFlowFunction(flowFunction, d1, d2);







 for (D d3 : res) {





 for (D d3 : res) {







 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));





 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));







 propagate(d1, m, d3, fprime, null, false); 





 propagate(d1, m, d3, fprime, null, false); 



...@@ -471,6 +498,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -471,6 +498,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 }





 }







 





 









 /**









	 * Computes the normal flow function for the given set of start and end









	 * abstractions-









	 * @param flowFunction The normal flow function to compute









	 * @param d1 The abstraction at the method's start node









	 * @param d1 The abstraction at the current node









	 * @return The set of abstractions at the successor node









	 */









 protected Set<D> computeNormalFlowFunction









 (FlowFunction<D> flowFunction, D d1, D d2) {









 return flowFunction.computeTargets(d2);









 }

















 /**





 /**







	 * Propagates the flow further down the exploded super graph, merging any edge function that might





	 * Propagates the flow further down the exploded super graph, merging any edge function that might







	 * already have been computed for targetVal at target. 





	 * already have been computed for targetVal at target. 



......















src/heros/solver/IDESolver.java








View file @ 25bbae8f








...@@ -334,7 +334,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -334,7 +334,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 //for each target value of the function





 //for each target value of the function







 for(D d5: retFunction.computeTargets(d4)) {





 for(D d5: computeReturnFlowFunction(retFunction, d4, Collections.singleton(d1))) {







 //update the caller-side summary function





 //update the caller-side summary function







 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);



...@@ -351,7 +351,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -351,7 +351,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 for (N returnSiteN : returnSiteNs) {





 for (N returnSiteN : returnSiteNs) {







 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);





 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {





 for(D d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2)) {







 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);





 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);







 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);





 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);







 }





 }



...@@ -359,7 +359,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -359,7 +359,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }





















 /**





 /**







	 * Lines 21-32 of the algorithm.	





	 * Computes the call-to-return flow function for the given call-site









	 * asbtraction









	 * @param callToReturnFlowFunction The call-to-return flow function to









	 * compute









	 * @param d1 The abstraction at the current method's start node.









	 * @param d2 The abstraction at the return size









	 * @return The set of caller-side abstractions at the return site









	 */









 protected Set<D> computeCallToReturnFlowFunction









 (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {









 return callToReturnFlowFunction.computeTargets(d2);









 }



















 /**









	 * Lines 21-32 of the algorithm.







	 * 





	 * 







	 * Stores callee-side summaries.





	 * Stores callee-side summaries.







	 * Also, at the side of the caller, propagates intra-procedural flows to return sites





	 * Also, at the side of the caller, propagates intra-procedural flows to return sites



...@@ -399,7 +413,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -399,7 +413,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //compute return-flow function





 //compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 Set<D> targets = retFunction.computeTargets(d2);





 Set<D> targets = computeReturnFlowFunction(retFunction, d2, entry.getValue());







 //for each incoming-call value





 //for each incoming-call value







 for(D d4: entry.getValue()) {





 for(D d4: entry.getValue()) {







 //for each target value at the return site





 //for each target value at the return site



...@@ -450,6 +464,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -450,6 +464,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 }





 }







 





 









 /**









	 * Computes the return flow function for the given set of caller-side









	 * abstractions.









	 * @param retFunction The return flow function to compute









	 * @param d2 The abstraction at the exit node in the callee









	 * @param callerSideD1s The abstractions at the callers' start nodes.









	 * @return The set of caller-side abstractions at the return site









	 */









 protected Set<D> computeReturnFlowFunction









 (FlowFunction<D> retFunction, D d2, Set<D> callerSideD1s) {









 return retFunction.computeTargets(d2);









 }

















 /**





 /**







	 * Lines 33-37 of the algorithm.





	 * Lines 33-37 of the algorithm.







	 * Simply propagate normal, intra-procedural flows.





	 * Simply propagate normal, intra-procedural flows.



...@@ -463,7 +490,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -463,7 +490,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 for (N m : icfg.getSuccsOf(n)) {





 for (N m : icfg.getSuccsOf(n)) {







 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);





 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 Set<D> res = flowFunction.computeTargets(d2);





 Set<D> res = computeNormalFlowFunction(flowFunction, d1, d2);







 for (D d3 : res) {





 for (D d3 : res) {







 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));





 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));







 propagate(d1, m, d3, fprime, null, false); 





 propagate(d1, m, d3, fprime, null, false); 



...@@ -471,6 +498,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -471,6 +498,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 }





 }







 





 









 /**









	 * Computes the normal flow function for the given set of start and end









	 * abstractions-









	 * @param flowFunction The normal flow function to compute









	 * @param d1 The abstraction at the method's start node









	 * @param d1 The abstraction at the current node









	 * @return The set of abstractions at the successor node









	 */









 protected Set<D> computeNormalFlowFunction









 (FlowFunction<D> flowFunction, D d1, D d2) {









 return flowFunction.computeTargets(d2);









 }

















 /**





 /**







	 * Propagates the flow further down the exploded super graph, merging any edge function that might





	 * Propagates the flow further down the exploded super graph, merging any edge function that might







	 * already have been computed for targetVal at target. 





	 * already have been computed for targetVal at target. 



......













src/heros/solver/IDESolver.java








View file @ 25bbae8f








src/heros/solver/IDESolver.java










View file @ 25bbae8f


25bbae8f





...@@ -334,7 +334,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -334,7 +334,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 //for each target value of the function





 //for each target value of the function







 for(D d5: retFunction.computeTargets(d4)) {





 for(D d5: computeReturnFlowFunction(retFunction, d4, Collections.singleton(d1))) {







 //update the caller-side summary function





 //update the caller-side summary function







 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);



...@@ -351,7 +351,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -351,7 +351,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 for (N returnSiteN : returnSiteNs) {





 for (N returnSiteN : returnSiteNs) {







 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);





 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {





 for(D d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2)) {







 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);





 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);







 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);





 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);







 }





 }



...@@ -359,7 +359,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -359,7 +359,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }





















 /**





 /**







	 * Lines 21-32 of the algorithm.	





	 * Computes the call-to-return flow function for the given call-site









	 * asbtraction









	 * @param callToReturnFlowFunction The call-to-return flow function to









	 * compute









	 * @param d1 The abstraction at the current method's start node.









	 * @param d2 The abstraction at the return size









	 * @return The set of caller-side abstractions at the return site









	 */









 protected Set<D> computeCallToReturnFlowFunction









 (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {









 return callToReturnFlowFunction.computeTargets(d2);









 }



















 /**









	 * Lines 21-32 of the algorithm.







	 * 





	 * 







	 * Stores callee-side summaries.





	 * Stores callee-side summaries.







	 * Also, at the side of the caller, propagates intra-procedural flows to return sites





	 * Also, at the side of the caller, propagates intra-procedural flows to return sites



...@@ -399,7 +413,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -399,7 +413,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //compute return-flow function





 //compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 Set<D> targets = retFunction.computeTargets(d2);





 Set<D> targets = computeReturnFlowFunction(retFunction, d2, entry.getValue());







 //for each incoming-call value





 //for each incoming-call value







 for(D d4: entry.getValue()) {





 for(D d4: entry.getValue()) {







 //for each target value at the return site





 //for each target value at the return site



...@@ -450,6 +464,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -450,6 +464,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 }





 }







 





 









 /**









	 * Computes the return flow function for the given set of caller-side









	 * abstractions.









	 * @param retFunction The return flow function to compute









	 * @param d2 The abstraction at the exit node in the callee









	 * @param callerSideD1s The abstractions at the callers' start nodes.









	 * @return The set of caller-side abstractions at the return site









	 */









 protected Set<D> computeReturnFlowFunction









 (FlowFunction<D> retFunction, D d2, Set<D> callerSideD1s) {









 return retFunction.computeTargets(d2);









 }

















 /**





 /**







	 * Lines 33-37 of the algorithm.





	 * Lines 33-37 of the algorithm.







	 * Simply propagate normal, intra-procedural flows.





	 * Simply propagate normal, intra-procedural flows.



...@@ -463,7 +490,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -463,7 +490,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 for (N m : icfg.getSuccsOf(n)) {





 for (N m : icfg.getSuccsOf(n)) {







 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);





 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 Set<D> res = flowFunction.computeTargets(d2);





 Set<D> res = computeNormalFlowFunction(flowFunction, d1, d2);







 for (D d3 : res) {





 for (D d3 : res) {







 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));





 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));







 propagate(d1, m, d3, fprime, null, false); 





 propagate(d1, m, d3, fprime, null, false); 



...@@ -471,6 +498,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -471,6 +498,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 }





 }







 





 









 /**









	 * Computes the normal flow function for the given set of start and end









	 * abstractions-









	 * @param flowFunction The normal flow function to compute









	 * @param d1 The abstraction at the method's start node









	 * @param d1 The abstraction at the current node









	 * @return The set of abstractions at the successor node









	 */









 protected Set<D> computeNormalFlowFunction









 (FlowFunction<D> flowFunction, D d1, D d2) {









 return flowFunction.computeTargets(d2);









 }

















 /**





 /**







	 * Propagates the flow further down the exploded super graph, merging any edge function that might





	 * Propagates the flow further down the exploded super graph, merging any edge function that might







	 * already have been computed for targetVal at target. 





	 * already have been computed for targetVal at target. 



......









...@@ -334,7 +334,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -334,7 +334,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 //for each target value of the function





 //for each target value of the function







 for(D d5: retFunction.computeTargets(d4)) {





 for(D d5: computeReturnFlowFunction(retFunction, d4, Collections.singleton(d1))) {







 //update the caller-side summary function





 //update the caller-side summary function







 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);



...@@ -351,7 +351,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -351,7 +351,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 for (N returnSiteN : returnSiteNs) {





 for (N returnSiteN : returnSiteNs) {







 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);





 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {





 for(D d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2)) {







 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);





 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);







 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);





 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);







 }





 }



...@@ -359,7 +359,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -359,7 +359,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }





















 /**





 /**







	 * Lines 21-32 of the algorithm.	





	 * Computes the call-to-return flow function for the given call-site









	 * asbtraction









	 * @param callToReturnFlowFunction The call-to-return flow function to









	 * compute









	 * @param d1 The abstraction at the current method's start node.









	 * @param d2 The abstraction at the return size









	 * @return The set of caller-side abstractions at the return site









	 */









 protected Set<D> computeCallToReturnFlowFunction









 (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {









 return callToReturnFlowFunction.computeTargets(d2);









 }



















 /**









	 * Lines 21-32 of the algorithm.







	 * 





	 * 







	 * Stores callee-side summaries.





	 * Stores callee-side summaries.







	 * Also, at the side of the caller, propagates intra-procedural flows to return sites





	 * Also, at the side of the caller, propagates intra-procedural flows to return sites



...@@ -399,7 +413,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -399,7 +413,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //compute return-flow function





 //compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 Set<D> targets = retFunction.computeTargets(d2);





 Set<D> targets = computeReturnFlowFunction(retFunction, d2, entry.getValue());







 //for each incoming-call value





 //for each incoming-call value







 for(D d4: entry.getValue()) {





 for(D d4: entry.getValue()) {







 //for each target value at the return site





 //for each target value at the return site



...@@ -450,6 +464,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -450,6 +464,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 }





 }







 





 









 /**









	 * Computes the return flow function for the given set of caller-side









	 * abstractions.









	 * @param retFunction The return flow function to compute









	 * @param d2 The abstraction at the exit node in the callee









	 * @param callerSideD1s The abstractions at the callers' start nodes.









	 * @return The set of caller-side abstractions at the return site









	 */









 protected Set<D> computeReturnFlowFunction









 (FlowFunction<D> retFunction, D d2, Set<D> callerSideD1s) {









 return retFunction.computeTargets(d2);









 }

















 /**





 /**







	 * Lines 33-37 of the algorithm.





	 * Lines 33-37 of the algorithm.







	 * Simply propagate normal, intra-procedural flows.





	 * Simply propagate normal, intra-procedural flows.



...@@ -463,7 +490,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -463,7 +490,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 for (N m : icfg.getSuccsOf(n)) {





 for (N m : icfg.getSuccsOf(n)) {







 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);





 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 Set<D> res = flowFunction.computeTargets(d2);





 Set<D> res = computeNormalFlowFunction(flowFunction, d1, d2);







 for (D d3 : res) {





 for (D d3 : res) {







 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));





 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));







 propagate(d1, m, d3, fprime, null, false); 





 propagate(d1, m, d3, fprime, null, false); 



...@@ -471,6 +498,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -471,6 +498,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 }





 }







 





 









 /**









	 * Computes the normal flow function for the given set of start and end









	 * abstractions-









	 * @param flowFunction The normal flow function to compute









	 * @param d1 The abstraction at the method's start node









	 * @param d1 The abstraction at the current node









	 * @return The set of abstractions at the successor node









	 */









 protected Set<D> computeNormalFlowFunction









 (FlowFunction<D> flowFunction, D d1, D d2) {









 return flowFunction.computeTargets(d2);









 }

















 /**





 /**







	 * Propagates the flow further down the exploded super graph, merging any edge function that might





	 * Propagates the flow further down the exploded super graph, merging any edge function that might







	 * already have been computed for targetVal at target. 





	 * already have been computed for targetVal at target. 



......






...@@ -334,7 +334,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -334,7 +334,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 //for each target value of the function





 //for each target value of the function







 for(D d5: retFunction.computeTargets(d4)) {





 for(D d5: computeReturnFlowFunction(retFunction, d4, Collections.singleton(d1))) {







 //update the caller-side summary function





 //update the caller-side summary function







 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);



...@@ -351,7 +351,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -351,7 +351,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 for (N returnSiteN : returnSiteNs) {





 for (N returnSiteN : returnSiteNs) {







 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);





 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {





 for(D d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2)) {







 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);





 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);







 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);





 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);







 }





 }



...@@ -359,7 +359,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -359,7 +359,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }





















 /**





 /**







	 * Lines 21-32 of the algorithm.	





	 * Computes the call-to-return flow function for the given call-site









	 * asbtraction









	 * @param callToReturnFlowFunction The call-to-return flow function to









	 * compute









	 * @param d1 The abstraction at the current method's start node.









	 * @param d2 The abstraction at the return size









	 * @return The set of caller-side abstractions at the return site









	 */









 protected Set<D> computeCallToReturnFlowFunction









 (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {









 return callToReturnFlowFunction.computeTargets(d2);









 }



















 /**









	 * Lines 21-32 of the algorithm.







	 * 





	 * 







	 * Stores callee-side summaries.





	 * Stores callee-side summaries.







	 * Also, at the side of the caller, propagates intra-procedural flows to return sites





	 * Also, at the side of the caller, propagates intra-procedural flows to return sites



...@@ -399,7 +413,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -399,7 +413,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //compute return-flow function





 //compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 Set<D> targets = retFunction.computeTargets(d2);





 Set<D> targets = computeReturnFlowFunction(retFunction, d2, entry.getValue());







 //for each incoming-call value





 //for each incoming-call value







 for(D d4: entry.getValue()) {





 for(D d4: entry.getValue()) {







 //for each target value at the return site





 //for each target value at the return site



...@@ -450,6 +464,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -450,6 +464,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 }





 }







 





 









 /**









	 * Computes the return flow function for the given set of caller-side









	 * abstractions.









	 * @param retFunction The return flow function to compute









	 * @param d2 The abstraction at the exit node in the callee









	 * @param callerSideD1s The abstractions at the callers' start nodes.









	 * @return The set of caller-side abstractions at the return site









	 */









 protected Set<D> computeReturnFlowFunction









 (FlowFunction<D> retFunction, D d2, Set<D> callerSideD1s) {









 return retFunction.computeTargets(d2);









 }

















 /**





 /**







	 * Lines 33-37 of the algorithm.





	 * Lines 33-37 of the algorithm.







	 * Simply propagate normal, intra-procedural flows.





	 * Simply propagate normal, intra-procedural flows.



...@@ -463,7 +490,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -463,7 +490,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 for (N m : icfg.getSuccsOf(n)) {





 for (N m : icfg.getSuccsOf(n)) {







 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);





 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);







 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 Set<D> res = flowFunction.computeTargets(d2);





 Set<D> res = computeNormalFlowFunction(flowFunction, d1, d2);







 for (D d3 : res) {





 for (D d3 : res) {







 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));





 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));







 propagate(d1, m, d3, fprime, null, false); 





 propagate(d1, m, d3, fprime, null, false); 



...@@ -471,6 +498,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -471,6 +498,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 }





 }







 





 









 /**









	 * Computes the normal flow function for the given set of start and end









	 * abstractions-









	 * @param flowFunction The normal flow function to compute









	 * @param d1 The abstraction at the method's start node









	 * @param d1 The abstraction at the current node









	 * @return The set of abstractions at the successor node









	 */









 protected Set<D> computeNormalFlowFunction









 (FlowFunction<D> flowFunction, D d1, D d2) {









 return flowFunction.computeTargets(d2);









 }

















 /**





 /**







	 * Propagates the flow further down the exploded super graph, merging any edge function that might





	 * Propagates the flow further down the exploded super graph, merging any edge function that might







	 * already have been computed for targetVal at target. 





	 * already have been computed for targetVal at target. 



......


 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);FlowFunction<D>retFunction=flowFunctions.getReturnFlowFunction(n,sCalledProcN,eP,retSiteN); FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);FlowFunction<D>retFunction=flowFunctions.getReturnFlowFunction(n,sCalledProcN,eP,retSiteN); flowFunctionConstructionCount++;flowFunctionConstructionCount++; flowFunctionConstructionCount++;flowFunctionConstructionCount++; //for each target value of the function//for each target value of the function //for each target value of the function//for each target value of the function for(D d5: retFunction.computeTargets(d4)) {for(Dd5:retFunctionretFunction..computeTargetscomputeTargets((d4d4)){ for(D d5: computeReturnFlowFunction(retFunction, d4, Collections.singleton(d1))) {for(Dd5:computeReturnFlowFunctioncomputeReturnFlowFunction((retFunctionretFunction,, d4d4,, CollectionsCollections..singletonsingleton((d1d1)))){ //update the caller-side summary function//update the caller-side summary function //update the caller-side summary function//update the caller-side summary function EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);EdgeFunction<V>f4=edgeFunctions.getCallEdgeFunction(n,d2,sCalledProcN,d3); EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);EdgeFunction<V>f4=edgeFunctions.getCallEdgeFunction(n,d2,sCalledProcN,d3); EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);EdgeFunction<V>f5=edgeFunctions.getReturnEdgeFunction(n,sCalledProcN,eP,d4,retSiteN,d5); EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);EdgeFunction<V>f5=edgeFunctions.getReturnEdgeFunction(n,sCalledProcN,eP,d4,retSiteN,d5); for (N returnSiteN : returnSiteNs) {for(NreturnSiteN:returnSiteNs){ for (N returnSiteN : returnSiteNs) {for(NreturnSiteN:returnSiteNs){ FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);FlowFunction<D>callToReturnFlowFunction=flowFunctions.getCallToReturnFlowFunction(n,returnSiteN); FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);FlowFunction<D>callToReturnFlowFunction=flowFunctions.getCallToReturnFlowFunction(n,returnSiteN); flowFunctionConstructionCount++;flowFunctionConstructionCount++; flowFunctionConstructionCount++;flowFunctionConstructionCount++; for(D d3: callToReturnFlowFunction.computeTargets(d2)) {for(Dd3:callToReturnFlowFunction..computeTargetscomputeTargets((d2)){ for(D d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2)) {for(Dd3:computeCallToReturnFlowFunctionomputeC((callToReturnFlowFunctioncallToReturnFlowFunction,, d1d1,, d2)){ EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);EdgeFunction<V>edgeFnE=edgeFunctions.getCallToReturnEdgeFunction(n,d2,returnSiteN,d3); EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);EdgeFunction<V>edgeFnE=edgeFunctions.getCallToReturnEdgeFunction(n,d2,returnSiteN,d3); propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);propagate(d1,returnSiteN,d3,f.composeWith(edgeFnE),n,false); propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);propagate(d1,returnSiteN,d3,f.composeWith(edgeFnE),n,false); }} }} }} }} /**/** /**/**	 * Lines 21-32 of the algorithm.		 * Lines 21-32 of the algorithm.		 * Computes the call-to-return flow function for the given call-site	 * Computes the call-to-return flow function for the given call-site	 * asbtraction	 * asbtraction	 * @param callToReturnFlowFunction The call-to-return flow function to	 * @param callToReturnFlowFunction The call-to-return flow function to	 * compute	 * compute	 * @param d1 The abstraction at the current method's start node.	 * @param d1 The abstraction at the current method's start node.	 * @param d2 The abstraction at the return size	 * @param d2 The abstraction at the return size	 * @return The set of caller-side abstractions at the return site	 * @return The set of caller-side abstractions at the return site	 */	 */ protected Set<D> computeCallToReturnFlowFunctionprotectedSet<D>computeCallToReturnFlowFunction (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {(FlowFunction<D>callToReturnFlowFunction,Dd1,Dd2){ return callToReturnFlowFunction.computeTargets(d2);returncallToReturnFlowFunction.computeTargets(d2); }} /**/**	 * Lines 21-32 of the algorithm.	 * Lines 21-32 of the algorithm.	 * 	 * 	 * 	 * 	 * Stores callee-side summaries.	 * Stores callee-side summaries.	 * Stores callee-side summaries.	 * Stores callee-side summaries.	 * Also, at the side of the caller, propagates intra-procedural flows to return sites	 * Also, at the side of the caller, propagates intra-procedural flows to return sites	 * Also, at the side of the caller, propagates intra-procedural flows to return sites	 * Also, at the side of the caller, propagates intra-procedural flows to return sites //compute return-flow function//compute return-flow function //compute return-flow function//compute return-flow function FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);FlowFunction<D>retFunction=flowFunctions.getReturnFlowFunction(c,methodThatNeedsSummary,n,retSiteC); FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);FlowFunction<D>retFunction=flowFunctions.getReturnFlowFunction(c,methodThatNeedsSummary,n,retSiteC); flowFunctionConstructionCount++;flowFunctionConstructionCount++; flowFunctionConstructionCount++;flowFunctionConstructionCount++; Set<D> targets = retFunction.computeTargets(d2);Set<D>targets=retFunctionretFunction..computeTargetscomputeTargets((d2d2); Set<D> targets = computeReturnFlowFunction(retFunction, d2, entry.getValue());Set<D>targets=computeReturnFlowFunctioncomputeReturnFlowFunction((retFunctionretFunction,, d2d2,, entryentry..getValuegetValue());() //for each incoming-call value//for each incoming-call value //for each incoming-call value//for each incoming-call value for(D d4: entry.getValue()) {for(Dd4:entry.getValue()){ for(D d4: entry.getValue()) {for(Dd4:entry.getValue()){ //for each target value at the return site//for each target value at the return site //for each target value at the return site//for each target value at the return site }} }} }} }}   /**/**	 * Computes the return flow function for the given set of caller-side	 * Computes the return flow function for the given set of caller-side	 * abstractions.	 * abstractions.	 * @param retFunction The return flow function to compute	 * @param retFunction The return flow function to compute	 * @param d2 The abstraction at the exit node in the callee	 * @param d2 The abstraction at the exit node in the callee	 * @param callerSideD1s The abstractions at the callers' start nodes.	 * @param callerSideD1s The abstractions at the callers' start nodes.	 * @return The set of caller-side abstractions at the return site	 * @return The set of caller-side abstractions at the return site	 */	 */ protected Set<D> computeReturnFlowFunctionprotectedSet<D>computeReturnFlowFunction (FlowFunction<D> retFunction, D d2, Set<D> callerSideD1s) {(FlowFunction<D>retFunction,Dd2,Set<D>callerSideD1s){ return retFunction.computeTargets(d2);returnretFunction.computeTargets(d2); }} /**/** /**/**	 * Lines 33-37 of the algorithm.	 * Lines 33-37 of the algorithm.	 * Lines 33-37 of the algorithm.	 * Lines 33-37 of the algorithm.	 * Simply propagate normal, intra-procedural flows.	 * Simply propagate normal, intra-procedural flows.	 * Simply propagate normal, intra-procedural flows.	 * Simply propagate normal, intra-procedural flows. for (N m : icfg.getSuccsOf(n)) {for(Nm:icfg.getSuccsOf(n)){ for (N m : icfg.getSuccsOf(n)) {for(Nm:icfg.getSuccsOf(n)){ FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);FlowFunction<D>flowFunction=flowFunctions.getNormalFlowFunction(n,m); FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);FlowFunction<D>flowFunction=flowFunctions.getNormalFlowFunction(n,m); flowFunctionConstructionCount++;flowFunctionConstructionCount++; flowFunctionConstructionCount++;flowFunctionConstructionCount++; Set<D> res = flowFunction.computeTargets(d2);Set<D>res=flowFunctionflowFunction..computeTargetscomputeTargets((d2); Set<D> res = computeNormalFlowFunction(flowFunction, d1, d2);Set<D>res=computeNormalFlowFunctioncomputeNormalFlowFunction((flowFunctionflowFunction,, d1d1,, d2); for (D d3 : res) {for(Dd3:res){ for (D d3 : res) {for(Dd3:res){ EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));EdgeFunction<V>fprime=f.composeWith(edgeFunctions.getNormalEdgeFunction(n,d2,m,d3)); EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));EdgeFunction<V>fprime=f.composeWith(edgeFunctions.getNormalEdgeFunction(n,d2,m,d3)); propagate(d1, m, d3, fprime, null, false); propagate(d1,m,d3,fprime,null,false); propagate(d1, m, d3, fprime, null, false); propagate(d1,m,d3,fprime,null,false); }} }} }} }}   /**/**	 * Computes the normal flow function for the given set of start and end	 * Computes the normal flow function for the given set of start and end	 * abstractions-	 * abstractions-	 * @param flowFunction The normal flow function to compute	 * @param flowFunction The normal flow function to compute	 * @param d1 The abstraction at the method's start node	 * @param d1 The abstraction at the method's start node	 * @param d1 The abstraction at the current node	 * @param d1 The abstraction at the current node	 * @return The set of abstractions at the successor node	 * @return The set of abstractions at the successor node	 */	 */ protected Set<D> computeNormalFlowFunctionprotectedSet<D>computeNormalFlowFunction (FlowFunction<D> flowFunction, D d1, D d2) {(FlowFunction<D>flowFunction,Dd1,Dd2){ return flowFunction.computeTargets(d2);returnflowFunction.computeTargets(d2); }} /**/** /**/**	 * Propagates the flow further down the exploded super graph, merging any edge function that might	 * Propagates the flow further down the exploded super graph, merging any edge function that might	 * Propagates the flow further down the exploded super graph, merging any edge function that might	 * Propagates the flow further down the exploded super graph, merging any edge function that might	 * already have been computed for targetVal at target. 	 * already have been computed for targetVal at target. 	 * already have been computed for targetVal at target. 	 * already have been computed for targetVal at target. 









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






