



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

6a91d71e















Commit
6a91d71e


authored
Apr 25, 2013
by


Eric Bodden



Browse files




performance fix for return edges; if there were N start points (e.g. in a...

performance fix for return edges; if there were N start points (e.g. in a backwards analysis) and we did an unbalanced analysis, then the return-foe function was computed N times; now this is done only once






parent
d564bec7













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 6a91d71e






......@@ -293,7 +293,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> res = function.computeTargets(d2);










 










 //for each callee's start point(s)










 for(N sP: icfg.getStartPointsOf(sCalledProcN)) { 










 Set<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 for(N sP: startPointsOf) { 










 //for each result node of the call-flow function










 for(D d3: res) {










 //create initial self-loop



......@@ -363,70 +364,71 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final D d1 = edge.factAtSource();










 final D d2 = edge.factAtTarget();










 










 //for each of the method's start points










 for(N sP: icfg.getStartPointsOf(methodThatNeedsSummary)) {










 //for each of the method's start points, determine incoming calls










 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);










 Set<Entry<N,Set<D>>> inc = new HashSet<Map.Entry<N,Set<D>>>();










 for(N sP: startPointsOf) {










 //line 21.1 of Naeem/Lhotak/Rodriguez










 










 //register end-summary










 Set<Entry<N, Set<D>>> inc;










 synchronized (incoming) {










 addEndSummary(sP, d1, n, d2, f);










 //copy to avoid concurrent modification exceptions by other threads










 inc = new HashSet<Map.Entry<N,Set<D>>>(incoming(d1, sP));










 inc.addAll(incoming(d1, sP));










 } 










 }










 










 //for each incoming call edge already processed










 //(see processCall(..))










 for (Entry<N,Set<D>> entry: inc) {










 //line 22










 N c = entry.getKey();










 //for each return site










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 //compute composed function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);










 //for each jump function coming into the call, propagate to return site using the composed function










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)) {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 }










 }










 }










 }










 }










 










 //for each incoming call edge already processed










 //(see processCall(..))










 for (Entry<N,Set<D>> entry: inc) {










 //line 22










 N c = entry.getKey();










 //for each return site










 }










 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 //compute composed function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);










 //for each jump function coming into the call, propagate to return site using the composed function










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)) {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 }










 }










 }










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(d2, retSiteC, d5, f.composeWith(f5));










 }










 }










 }










 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(d2, retSiteC, d5, f.composeWith(f5));










 }










 }










 }










 if(callers.isEmpty()) {










 FlowFunction<D> normalFlowFunction = flowFunctions.getNormalFlowFunction(n,n);










 flowFunctionConstructionCount++;










 normalFlowFunction.computeTargets(d2);










 }










 if(callers.isEmpty()) {










 FlowFunction<D> normalFlowFunction = flowFunctions.getNormalFlowFunction(n,n);










 flowFunctionConstructionCount++;










 normalFlowFunction.computeTargets(d2);










 }










 }










 }



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

6a91d71e















Commit
6a91d71e


authored
Apr 25, 2013
by


Eric Bodden



Browse files




performance fix for return edges; if there were N start points (e.g. in a...

performance fix for return edges; if there were N start points (e.g. in a backwards analysis) and we did an unbalanced analysis, then the return-foe function was computed N times; now this is done only once






parent
d564bec7













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 6a91d71e






......@@ -293,7 +293,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> res = function.computeTargets(d2);










 










 //for each callee's start point(s)










 for(N sP: icfg.getStartPointsOf(sCalledProcN)) { 










 Set<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 for(N sP: startPointsOf) { 










 //for each result node of the call-flow function










 for(D d3: res) {










 //create initial self-loop



......@@ -363,70 +364,71 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final D d1 = edge.factAtSource();










 final D d2 = edge.factAtTarget();










 










 //for each of the method's start points










 for(N sP: icfg.getStartPointsOf(methodThatNeedsSummary)) {










 //for each of the method's start points, determine incoming calls










 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);










 Set<Entry<N,Set<D>>> inc = new HashSet<Map.Entry<N,Set<D>>>();










 for(N sP: startPointsOf) {










 //line 21.1 of Naeem/Lhotak/Rodriguez










 










 //register end-summary










 Set<Entry<N, Set<D>>> inc;










 synchronized (incoming) {










 addEndSummary(sP, d1, n, d2, f);










 //copy to avoid concurrent modification exceptions by other threads










 inc = new HashSet<Map.Entry<N,Set<D>>>(incoming(d1, sP));










 inc.addAll(incoming(d1, sP));










 } 










 }










 










 //for each incoming call edge already processed










 //(see processCall(..))










 for (Entry<N,Set<D>> entry: inc) {










 //line 22










 N c = entry.getKey();










 //for each return site










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 //compute composed function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);










 //for each jump function coming into the call, propagate to return site using the composed function










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)) {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 }










 }










 }










 }










 }










 










 //for each incoming call edge already processed










 //(see processCall(..))










 for (Entry<N,Set<D>> entry: inc) {










 //line 22










 N c = entry.getKey();










 //for each return site










 }










 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 //compute composed function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);










 //for each jump function coming into the call, propagate to return site using the composed function










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)) {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 }










 }










 }










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(d2, retSiteC, d5, f.composeWith(f5));










 }










 }










 }










 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(d2, retSiteC, d5, f.composeWith(f5));










 }










 }










 }










 if(callers.isEmpty()) {










 FlowFunction<D> normalFlowFunction = flowFunctions.getNormalFlowFunction(n,n);










 flowFunctionConstructionCount++;










 normalFlowFunction.computeTargets(d2);










 }










 if(callers.isEmpty()) {










 FlowFunction<D> normalFlowFunction = flowFunctions.getNormalFlowFunction(n,n);










 flowFunctionConstructionCount++;










 normalFlowFunction.computeTargets(d2);










 }










 }










 }



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

6a91d71e







Open sidebar



Joshua Garcia heros
Commits

6a91d71e




Open sidebar

Joshua Garcia heros
Commits

6a91d71e


Joshua GarciaherosherosCommits
6a91d71e








Commit
6a91d71e


authored
Apr 25, 2013
by


Eric Bodden



Browse files




performance fix for return edges; if there were N start points (e.g. in a...

performance fix for return edges; if there were N start points (e.g. in a backwards analysis) and we did an unbalanced analysis, then the return-foe function was computed N times; now this is done only once






parent
d564bec7













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 6a91d71e






......@@ -293,7 +293,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> res = function.computeTargets(d2);










 










 //for each callee's start point(s)










 for(N sP: icfg.getStartPointsOf(sCalledProcN)) { 










 Set<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 for(N sP: startPointsOf) { 










 //for each result node of the call-flow function










 for(D d3: res) {










 //create initial self-loop



......@@ -363,70 +364,71 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final D d1 = edge.factAtSource();










 final D d2 = edge.factAtTarget();










 










 //for each of the method's start points










 for(N sP: icfg.getStartPointsOf(methodThatNeedsSummary)) {










 //for each of the method's start points, determine incoming calls










 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);










 Set<Entry<N,Set<D>>> inc = new HashSet<Map.Entry<N,Set<D>>>();










 for(N sP: startPointsOf) {










 //line 21.1 of Naeem/Lhotak/Rodriguez










 










 //register end-summary










 Set<Entry<N, Set<D>>> inc;










 synchronized (incoming) {










 addEndSummary(sP, d1, n, d2, f);










 //copy to avoid concurrent modification exceptions by other threads










 inc = new HashSet<Map.Entry<N,Set<D>>>(incoming(d1, sP));










 inc.addAll(incoming(d1, sP));










 } 










 }










 










 //for each incoming call edge already processed










 //(see processCall(..))










 for (Entry<N,Set<D>> entry: inc) {










 //line 22










 N c = entry.getKey();










 //for each return site










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 //compute composed function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);










 //for each jump function coming into the call, propagate to return site using the composed function










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)) {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 }










 }










 }










 }










 }










 










 //for each incoming call edge already processed










 //(see processCall(..))










 for (Entry<N,Set<D>> entry: inc) {










 //line 22










 N c = entry.getKey();










 //for each return site










 }










 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 //compute composed function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);










 //for each jump function coming into the call, propagate to return site using the composed function










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)) {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 }










 }










 }










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(d2, retSiteC, d5, f.composeWith(f5));










 }










 }










 }










 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(d2, retSiteC, d5, f.composeWith(f5));










 }










 }










 }










 if(callers.isEmpty()) {










 FlowFunction<D> normalFlowFunction = flowFunctions.getNormalFlowFunction(n,n);










 flowFunctionConstructionCount++;










 normalFlowFunction.computeTargets(d2);










 }










 if(callers.isEmpty()) {










 FlowFunction<D> normalFlowFunction = flowFunctions.getNormalFlowFunction(n,n);










 flowFunctionConstructionCount++;










 normalFlowFunction.computeTargets(d2);










 }










 }










 }



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
6a91d71e


authored
Apr 25, 2013
by


Eric Bodden



Browse files




performance fix for return edges; if there were N start points (e.g. in a...

performance fix for return edges; if there were N start points (e.g. in a backwards analysis) and we did an unbalanced analysis, then the return-foe function was computed N times; now this is done only once






parent
d564bec7













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 6a91d71e






......@@ -293,7 +293,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> res = function.computeTargets(d2);










 










 //for each callee's start point(s)










 for(N sP: icfg.getStartPointsOf(sCalledProcN)) { 










 Set<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 for(N sP: startPointsOf) { 










 //for each result node of the call-flow function










 for(D d3: res) {










 //create initial self-loop



......@@ -363,70 +364,71 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final D d1 = edge.factAtSource();










 final D d2 = edge.factAtTarget();










 










 //for each of the method's start points










 for(N sP: icfg.getStartPointsOf(methodThatNeedsSummary)) {










 //for each of the method's start points, determine incoming calls










 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);










 Set<Entry<N,Set<D>>> inc = new HashSet<Map.Entry<N,Set<D>>>();










 for(N sP: startPointsOf) {










 //line 21.1 of Naeem/Lhotak/Rodriguez










 










 //register end-summary










 Set<Entry<N, Set<D>>> inc;










 synchronized (incoming) {










 addEndSummary(sP, d1, n, d2, f);










 //copy to avoid concurrent modification exceptions by other threads










 inc = new HashSet<Map.Entry<N,Set<D>>>(incoming(d1, sP));










 inc.addAll(incoming(d1, sP));










 } 










 }










 










 //for each incoming call edge already processed










 //(see processCall(..))










 for (Entry<N,Set<D>> entry: inc) {










 //line 22










 N c = entry.getKey();










 //for each return site










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 //compute composed function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);










 //for each jump function coming into the call, propagate to return site using the composed function










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)) {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 }










 }










 }










 }










 }










 










 //for each incoming call edge already processed










 //(see processCall(..))










 for (Entry<N,Set<D>> entry: inc) {










 //line 22










 N c = entry.getKey();










 //for each return site










 }










 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 //compute composed function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);










 //for each jump function coming into the call, propagate to return site using the composed function










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)) {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 }










 }










 }










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(d2, retSiteC, d5, f.composeWith(f5));










 }










 }










 }










 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(d2, retSiteC, d5, f.composeWith(f5));










 }










 }










 }










 if(callers.isEmpty()) {










 FlowFunction<D> normalFlowFunction = flowFunctions.getNormalFlowFunction(n,n);










 flowFunctionConstructionCount++;










 normalFlowFunction.computeTargets(d2);










 }










 if(callers.isEmpty()) {










 FlowFunction<D> normalFlowFunction = flowFunctions.getNormalFlowFunction(n,n);










 flowFunctionConstructionCount++;










 normalFlowFunction.computeTargets(d2);










 }










 }










 }



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
6a91d71e


authored
Apr 25, 2013
by


Eric Bodden



Browse files



Commit
6a91d71e


authored
Apr 25, 2013
by


Eric Bodden

6a91d71eauthoredbyEric Bodden

performance fix for return edges; if there were N start points (e.g. in a...

performance fix for return edges; if there were N start points (e.g. in a backwards analysis) and we did an unbalanced analysis, then the return-foe function was computed N times; now this is done only once





parent
d564bec7
















parent
d564bec7





parent












Changes
1
1


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/solver/IDESolver.java








View file @ 6a91d71e






......@@ -293,7 +293,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> res = function.computeTargets(d2);










 










 //for each callee's start point(s)










 for(N sP: icfg.getStartPointsOf(sCalledProcN)) { 










 Set<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 for(N sP: startPointsOf) { 










 //for each result node of the call-flow function










 for(D d3: res) {










 //create initial self-loop



......@@ -363,70 +364,71 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final D d1 = edge.factAtSource();










 final D d2 = edge.factAtTarget();










 










 //for each of the method's start points










 for(N sP: icfg.getStartPointsOf(methodThatNeedsSummary)) {










 //for each of the method's start points, determine incoming calls










 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);










 Set<Entry<N,Set<D>>> inc = new HashSet<Map.Entry<N,Set<D>>>();










 for(N sP: startPointsOf) {










 //line 21.1 of Naeem/Lhotak/Rodriguez










 










 //register end-summary










 Set<Entry<N, Set<D>>> inc;










 synchronized (incoming) {










 addEndSummary(sP, d1, n, d2, f);










 //copy to avoid concurrent modification exceptions by other threads










 inc = new HashSet<Map.Entry<N,Set<D>>>(incoming(d1, sP));










 inc.addAll(incoming(d1, sP));










 } 










 }










 










 //for each incoming call edge already processed










 //(see processCall(..))










 for (Entry<N,Set<D>> entry: inc) {










 //line 22










 N c = entry.getKey();










 //for each return site










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 //compute composed function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);










 //for each jump function coming into the call, propagate to return site using the composed function










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)) {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 }










 }










 }










 }










 }










 










 //for each incoming call edge already processed










 //(see processCall(..))










 for (Entry<N,Set<D>> entry: inc) {










 //line 22










 N c = entry.getKey();










 //for each return site










 }










 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 //compute composed function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);










 //for each jump function coming into the call, propagate to return site using the composed function










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)) {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 }










 }










 }










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(d2, retSiteC, d5, f.composeWith(f5));










 }










 }










 }










 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(d2, retSiteC, d5, f.composeWith(f5));










 }










 }










 }










 if(callers.isEmpty()) {










 FlowFunction<D> normalFlowFunction = flowFunctions.getNormalFlowFunction(n,n);










 flowFunctionConstructionCount++;










 normalFlowFunction.computeTargets(d2);










 }










 if(callers.isEmpty()) {










 FlowFunction<D> normalFlowFunction = flowFunctions.getNormalFlowFunction(n,n);










 flowFunctionConstructionCount++;










 normalFlowFunction.computeTargets(d2);










 }










 }










 }



......














src/heros/solver/IDESolver.java








View file @ 6a91d71e






......@@ -293,7 +293,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> res = function.computeTargets(d2);










 










 //for each callee's start point(s)










 for(N sP: icfg.getStartPointsOf(sCalledProcN)) { 










 Set<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 for(N sP: startPointsOf) { 










 //for each result node of the call-flow function










 for(D d3: res) {










 //create initial self-loop



......@@ -363,70 +364,71 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final D d1 = edge.factAtSource();










 final D d2 = edge.factAtTarget();










 










 //for each of the method's start points










 for(N sP: icfg.getStartPointsOf(methodThatNeedsSummary)) {










 //for each of the method's start points, determine incoming calls










 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);










 Set<Entry<N,Set<D>>> inc = new HashSet<Map.Entry<N,Set<D>>>();










 for(N sP: startPointsOf) {










 //line 21.1 of Naeem/Lhotak/Rodriguez










 










 //register end-summary










 Set<Entry<N, Set<D>>> inc;










 synchronized (incoming) {










 addEndSummary(sP, d1, n, d2, f);










 //copy to avoid concurrent modification exceptions by other threads










 inc = new HashSet<Map.Entry<N,Set<D>>>(incoming(d1, sP));










 inc.addAll(incoming(d1, sP));










 } 










 }










 










 //for each incoming call edge already processed










 //(see processCall(..))










 for (Entry<N,Set<D>> entry: inc) {










 //line 22










 N c = entry.getKey();










 //for each return site










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 //compute composed function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);










 //for each jump function coming into the call, propagate to return site using the composed function










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)) {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 }










 }










 }










 }










 }










 










 //for each incoming call edge already processed










 //(see processCall(..))










 for (Entry<N,Set<D>> entry: inc) {










 //line 22










 N c = entry.getKey();










 //for each return site










 }










 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 //compute composed function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);










 //for each jump function coming into the call, propagate to return site using the composed function










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)) {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 }










 }










 }










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(d2, retSiteC, d5, f.composeWith(f5));










 }










 }










 }










 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(d2, retSiteC, d5, f.composeWith(f5));










 }










 }










 }










 if(callers.isEmpty()) {










 FlowFunction<D> normalFlowFunction = flowFunctions.getNormalFlowFunction(n,n);










 flowFunctionConstructionCount++;










 normalFlowFunction.computeTargets(d2);










 }










 if(callers.isEmpty()) {










 FlowFunction<D> normalFlowFunction = flowFunctions.getNormalFlowFunction(n,n);










 flowFunctionConstructionCount++;










 normalFlowFunction.computeTargets(d2);










 }










 }










 }



......












src/heros/solver/IDESolver.java








View file @ 6a91d71e








src/heros/solver/IDESolver.java










View file @ 6a91d71e


6a91d71e



......@@ -293,7 +293,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> res = function.computeTargets(d2);










 










 //for each callee's start point(s)










 for(N sP: icfg.getStartPointsOf(sCalledProcN)) { 










 Set<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 for(N sP: startPointsOf) { 










 //for each result node of the call-flow function










 for(D d3: res) {










 //create initial self-loop



......@@ -363,70 +364,71 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final D d1 = edge.factAtSource();










 final D d2 = edge.factAtTarget();










 










 //for each of the method's start points










 for(N sP: icfg.getStartPointsOf(methodThatNeedsSummary)) {










 //for each of the method's start points, determine incoming calls










 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);










 Set<Entry<N,Set<D>>> inc = new HashSet<Map.Entry<N,Set<D>>>();










 for(N sP: startPointsOf) {










 //line 21.1 of Naeem/Lhotak/Rodriguez










 










 //register end-summary










 Set<Entry<N, Set<D>>> inc;










 synchronized (incoming) {










 addEndSummary(sP, d1, n, d2, f);










 //copy to avoid concurrent modification exceptions by other threads










 inc = new HashSet<Map.Entry<N,Set<D>>>(incoming(d1, sP));










 inc.addAll(incoming(d1, sP));










 } 










 }










 










 //for each incoming call edge already processed










 //(see processCall(..))










 for (Entry<N,Set<D>> entry: inc) {










 //line 22










 N c = entry.getKey();










 //for each return site










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 //compute composed function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);










 //for each jump function coming into the call, propagate to return site using the composed function










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)) {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 }










 }










 }










 }










 }










 










 //for each incoming call edge already processed










 //(see processCall(..))










 for (Entry<N,Set<D>> entry: inc) {










 //line 22










 N c = entry.getKey();










 //for each return site










 }










 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 //compute composed function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);










 //for each jump function coming into the call, propagate to return site using the composed function










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)) {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 }










 }










 }










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(d2, retSiteC, d5, f.composeWith(f5));










 }










 }










 }










 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(d2, retSiteC, d5, f.composeWith(f5));










 }










 }










 }










 if(callers.isEmpty()) {










 FlowFunction<D> normalFlowFunction = flowFunctions.getNormalFlowFunction(n,n);










 flowFunctionConstructionCount++;










 normalFlowFunction.computeTargets(d2);










 }










 if(callers.isEmpty()) {










 FlowFunction<D> normalFlowFunction = flowFunctions.getNormalFlowFunction(n,n);










 flowFunctionConstructionCount++;










 normalFlowFunction.computeTargets(d2);










 }










 }










 }



......






......@@ -293,7 +293,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> res = function.computeTargets(d2);










 










 //for each callee's start point(s)










 for(N sP: icfg.getStartPointsOf(sCalledProcN)) { 










 Set<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 for(N sP: startPointsOf) { 










 //for each result node of the call-flow function










 for(D d3: res) {










 //create initial self-loop



......@@ -363,70 +364,71 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final D d1 = edge.factAtSource();










 final D d2 = edge.factAtTarget();










 










 //for each of the method's start points










 for(N sP: icfg.getStartPointsOf(methodThatNeedsSummary)) {










 //for each of the method's start points, determine incoming calls










 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);










 Set<Entry<N,Set<D>>> inc = new HashSet<Map.Entry<N,Set<D>>>();










 for(N sP: startPointsOf) {










 //line 21.1 of Naeem/Lhotak/Rodriguez










 










 //register end-summary










 Set<Entry<N, Set<D>>> inc;










 synchronized (incoming) {










 addEndSummary(sP, d1, n, d2, f);










 //copy to avoid concurrent modification exceptions by other threads










 inc = new HashSet<Map.Entry<N,Set<D>>>(incoming(d1, sP));










 inc.addAll(incoming(d1, sP));










 } 










 }










 










 //for each incoming call edge already processed










 //(see processCall(..))










 for (Entry<N,Set<D>> entry: inc) {










 //line 22










 N c = entry.getKey();










 //for each return site










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 //compute composed function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);










 //for each jump function coming into the call, propagate to return site using the composed function










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)) {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 }










 }










 }










 }










 }










 










 //for each incoming call edge already processed










 //(see processCall(..))










 for (Entry<N,Set<D>> entry: inc) {










 //line 22










 N c = entry.getKey();










 //for each return site










 }










 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 //compute composed function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);










 //for each jump function coming into the call, propagate to return site using the composed function










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)) {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 }










 }










 }










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(d2, retSiteC, d5, f.composeWith(f5));










 }










 }










 }










 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(d2, retSiteC, d5, f.composeWith(f5));










 }










 }










 }










 if(callers.isEmpty()) {










 FlowFunction<D> normalFlowFunction = flowFunctions.getNormalFlowFunction(n,n);










 flowFunctionConstructionCount++;










 normalFlowFunction.computeTargets(d2);










 }










 if(callers.isEmpty()) {










 FlowFunction<D> normalFlowFunction = flowFunctions.getNormalFlowFunction(n,n);










 flowFunctionConstructionCount++;










 normalFlowFunction.computeTargets(d2);










 }










 }










 }



......


 Set<D> res = function.computeTargets(d2);Set<D>res=function.computeTargets(d2);  //for each callee's start point(s)//for each callee's start point(s) for(N sP: icfg.getStartPointsOf(sCalledProcN)) { for(NsP:icfg.getStartPointsOf(sCalledProcN)){ Set<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);Set<N>startPointsOf=icfg.getStartPointsOf(sCalledProcN); for(N sP: startPointsOf) { for(NsP:startPointsOf){ //for each result node of the call-flow function//for each result node of the call-flow function for(D d3: res) {for(Dd3:res){ //create initial self-loop//create initial self-loop final D d1 = edge.factAtSource();finalDd1=edge.factAtSource(); final D d2 = edge.factAtTarget();finalDd2=edge.factAtTarget();  //for each of the method's start points//for each of the method's start points for(N sP: icfg.getStartPointsOf(methodThatNeedsSummary)) {for(NsP:icfg.getStartPointsOf(methodThatNeedsSummary)){ //for each of the method's start points, determine incoming calls//for each of the method's start points, determine incoming calls Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);Set<N>startPointsOf=icfg.getStartPointsOf(methodThatNeedsSummary); Set<Entry<N,Set<D>>> inc = new HashSet<Map.Entry<N,Set<D>>>();Set<Entry<N,Set<D>>>inc=newHashSet<Map.Entry<N,Set<D>>>(); for(N sP: startPointsOf) {for(NsP:startPointsOf){ //line 21.1 of Naeem/Lhotak/Rodriguez//line 21.1 of Naeem/Lhotak/Rodriguez  //register end-summary//register end-summary Set<Entry<N, Set<D>>> inc;Set<Entry<N,Set<D>>>inc; synchronized (incoming) {synchronized(incoming){ addEndSummary(sP, d1, n, d2, f);addEndSummary(sP,d1,n,d2,f); //copy to avoid concurrent modification exceptions by other threads//copy to avoid concurrent modification exceptions by other threads inc = new HashSet<Map.Entry<N,Set<D>>>(incoming(d1, sP));inc=newHashSet<Map.Entry<N,Set<D>>>(incoming(d1,sP)); inc.addAll(incoming(d1, sP));inc.addAll(incoming(d1,sP)); } } }}  //for each incoming call edge already processed//for each incoming call edge already processed //(see processCall(..))//(see processCall(..)) for (Entry<N,Set<D>> entry: inc) {for(Entry<N,Set<D>>entry:inc){ //line 22//line 22 N c = entry.getKey();Nc=entry.getKey(); //for each return site//for each return site for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {for(NretSiteC:icfg.getReturnSitesOfCallAt(c)){ //compute return-flow function//compute return-flow function FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);FlowFunction<D>retFunction=flowFunctions.getReturnFlowFunction(c,methodThatNeedsSummary,n,retSiteC); flowFunctionConstructionCount++;flowFunctionConstructionCount++; Set<D> targets = retFunction.computeTargets(d2);Set<D>targets=retFunction.computeTargets(d2); //for each incoming-call value//for each incoming-call value for(D d4: entry.getValue()) {for(Dd4:entry.getValue()){ //for each target value at the return site//for each target value at the return site //line 23//line 23 for(D d5: targets) {for(Dd5:targets){ //compute composed function//compute composed function EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);EdgeFunction<V>f4=edgeFunctions.getCallEdgeFunction(c,d4,icfg.getMethodOf(n),d1); EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);EdgeFunction<V>f5=edgeFunctions.getReturnEdgeFunction(c,icfg.getMethodOf(n),n,d2,retSiteC,d5); EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);EdgeFunction<V>fPrime=f4.composeWith(f).composeWith(f5); //for each jump function coming into the call, propagate to return site using the composed function//for each jump function coming into the call, propagate to return site using the composed function for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {for(Map.Entry<D,EdgeFunction<V>>valAndFunc:jumpFn.reverseLookup(c,d4).entrySet()){ EdgeFunction<V> f3 = valAndFunc.getValue();EdgeFunction<V>f3=valAndFunc.getValue(); if(!f3.equalTo(allTop)) {if(!f3.equalTo(allTop)){ D d3 = valAndFunc.getKey();Dd3=valAndFunc.getKey(); propagate(d3, retSiteC, d5, f3.composeWith(fPrime));propagate(d3,retSiteC,d5,f3.composeWith(fPrime)); }} }} }} }} }}  //for each incoming call edge already processed//for each incoming call edge already processed //(see processCall(..))//(see processCall(..)) for (Entry<N,Set<D>> entry: inc) {for(Entry<N,Set<D>>entry:inc){ //line 22//line 22 N c = entry.getKey();Nc=entry.getKey(); //for each return site//for each return site }}  //handling for unbalanced problems where we return out of a method whose call was never processed//handling for unbalanced problems where we return out of a method whose call was never processed if(inc.isEmpty() && followReturnsPastSeeds) {if(inc.isEmpty()&&followReturnsPastSeeds){ Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);Set<N>callers=icfg.getCallersOf(methodThatNeedsSummary); for(N c: callers) {for(Nc:callers){ for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {for(NretSiteC:icfg.getReturnSitesOfCallAt(c)){ //compute return-flow function//compute return-flow function FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);FlowFunction<D>retFunction=flowFunctions.getReturnFlowFunction(c,methodThatNeedsSummary,n,retSiteC); flowFunctionConstructionCount++;flowFunctionConstructionCount++; Set<D> targets = retFunction.computeTargets(d2);Set<D>targets=retFunction.computeTargets(d2); //for each incoming-call value//for each incoming-call value for(D d4: entry.getValue()) {for(Dd4:entry.getValue()){ //for each target value at the return site//for each target value at the return site //line 23//line 23 for(D d5: targets) {for(Dd5:targets){ //compute composed function//compute composed function EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);EdgeFunction<V>f4=edgeFunctions.getCallEdgeFunction(c,d4,icfg.getMethodOf(n),d1); EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);EdgeFunction<V>f5=edgeFunctions.getReturnEdgeFunction(c,icfg.getMethodOf(n),n,d2,retSiteC,d5); EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);EdgeFunction<V>fPrime=f4.composeWith(f).composeWith(f5); //for each jump function coming into the call, propagate to return site using the composed function//for each jump function coming into the call, propagate to return site using the composed function for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {for(Map.Entry<D,EdgeFunction<V>>valAndFunc:jumpFn.reverseLookup(c,d4).entrySet()){ EdgeFunction<V> f3 = valAndFunc.getValue();EdgeFunction<V>f3=valAndFunc.getValue(); if(!f3.equalTo(allTop)) {if(!f3.equalTo(allTop)){ D d3 = valAndFunc.getKey();Dd3=valAndFunc.getKey(); propagate(d3, retSiteC, d5, f3.composeWith(fPrime));propagate(d3,retSiteC,d5,f3.composeWith(fPrime)); }} }} }} for(D d5: targets) {for(Dd5:targets){ EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);EdgeFunction<V>f5=edgeFunctions.getReturnEdgeFunction(c,icfg.getMethodOf(n),n,d2,retSiteC,d5); propagate(d2, retSiteC, d5, f.composeWith(f5));propagate(d2,retSiteC,d5,f.composeWith(f5)); }} }} }}  //handling for unbalanced problems where we return out of a method whose call was never processed//handling for unbalanced problems where we return out of a method whose call was never processed if(inc.isEmpty() && followReturnsPastSeeds) {if(inc.isEmpty()&&followReturnsPastSeeds){ Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);Set<N>callers=icfg.getCallersOf(methodThatNeedsSummary); for(N c: callers) {for(Nc:callers){ for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {for(NretSiteC:icfg.getReturnSitesOfCallAt(c)){ FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);FlowFunction<D>retFunction=flowFunctions.getReturnFlowFunction(c,methodThatNeedsSummary,n,retSiteC); flowFunctionConstructionCount++;flowFunctionConstructionCount++; Set<D> targets = retFunction.computeTargets(d2);Set<D>targets=retFunction.computeTargets(d2); for(D d5: targets) {for(Dd5:targets){ EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);EdgeFunction<V>f5=edgeFunctions.getReturnEdgeFunction(c,icfg.getMethodOf(n),n,d2,retSiteC,d5); propagate(d2, retSiteC, d5, f.composeWith(f5));propagate(d2,retSiteC,d5,f.composeWith(f5)); }} }} }} if(callers.isEmpty()) {if(callers.isEmpty()){ FlowFunction<D> normalFlowFunction = flowFunctions.getNormalFlowFunction(n,n);FlowFunction<D>normalFlowFunction=flowFunctions.getNormalFlowFunction(n,n); flowFunctionConstructionCount++;flowFunctionConstructionCount++; normalFlowFunction.computeTargets(d2);normalFlowFunction.computeTargets(d2); }} if(callers.isEmpty()) {if(callers.isEmpty()){ FlowFunction<D> normalFlowFunction = flowFunctions.getNormalFlowFunction(n,n);FlowFunction<D>normalFlowFunction=flowFunctions.getNormalFlowFunction(n,n); flowFunctionConstructionCount++;flowFunctionConstructionCount++; normalFlowFunction.computeTargets(d2);normalFlowFunction.computeTargets(d2); }} }} }}









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






