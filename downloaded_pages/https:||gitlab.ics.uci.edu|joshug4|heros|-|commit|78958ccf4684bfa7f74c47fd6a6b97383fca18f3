



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

78958ccf















Commit
78958ccf


authored
Jun 01, 2015
by


Johannes Lerch



Browse files




Merge remote-tracking branch 'origin/develop' into summaries-abstract-returns







parents
8d3ed342
cbaf6a48













Changes
5




Hide whitespace changes

Inline
Side-by-side















src/heros/edgefunc/AllBottom.java








View file @ 78958ccf






......@@ -26,6 +26,8 @@ public class AllBottom<V> implements EdgeFunction<V> {









 }





















 public EdgeFunction<V> composeWith(EdgeFunction<V> secondFunction) {










 if (secondFunction instanceof EdgeIdentity)










 return this;










 return secondFunction;










 }














......














src/heros/flowfunc/Kill.java








View file @ 78958ccf






......@@ -33,7 +33,7 @@ public class Kill<D> implements FlowFunction<D> {









 } 





















 public Set<D> computeTargets(D source) {










 if(source==killValue) {










 if(source.equals(killValue)) {










 return emptySet();










 } else










 return singleton(source);



......














src/heros/solver/CountingThreadPoolExecutor.java








View file @ 78958ccf






......@@ -10,8 +10,11 @@









 ******************************************************************************/










package heros.solver;





















import heros.util.SootThreadGroup;





















import java.util.concurrent.BlockingQueue;










import java.util.concurrent.RejectedExecutionException;










import java.util.concurrent.ThreadFactory;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;














......@@ -32,7 +35,13 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,










 BlockingQueue<Runnable> workQueue) {










 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);










 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, new ThreadFactory() {










 










 @Override










 public Thread newThread(Runnable r) {










 return new Thread(new SootThreadGroup(), r);










 }










 });










 }





















 @Override



......@@ -44,6 +53,7 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {









 catch (RejectedExecutionException ex) {










 // If we were unable to submit the task, we may not count it!










 numRunningTasks.decrement();










 throw ex;










 }










 }










 



......














src/heros/solver/IDESolver.java








View file @ 78958ccf






......@@ -34,6 +34,7 @@ import java.util.HashSet;









import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentHashMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;














......@@ -93,7 +94,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //see CC 2010 paper by Naeem, Lhotak and Rodriguez










 @SynchronizedBy("consistent lock on field")










 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();










 





















 //stores the return sites (inside callers) to which we have unbalanced returns










 //if followReturnPastSeeds is enabled










 @SynchronizedBy("use of ConcurrentHashMap")










 protected final Set<N> unbalancedRetSites;





















 @DontSynchronize("stateless")










 protected final FlowFunctions<N, D, M> flowFunctions;














......@@ -183,6 +189,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 this.flowFunctions = flowFunctions;










 this.edgeFunctions = edgeFunctions;










 this.initialSeeds = tabulationProblem.initialSeeds();










 this.unbalancedRetSites = Collections.newSetFromMap(new ConcurrentHashMap<N, Boolean>());










 this.valueLattice = tabulationProblem.joinLattice();










 this.allTop = tabulationProblem.allTopFunction();










 this.jumpFn = new JumpFunctions<N,D,V>(allTop);



......@@ -353,7 +360,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);










 flowFunctionConstructionCount++;










 //for each target value of the function










 for(D d5: computeReturnFlowFunction(retFunction, d4, n, Collections.singleton(d2))) {










 for(D d5: computeReturnFlowFunction(retFunction, d3, d4, n, Collections.singleton(d2))) {










 //update the caller-side summary function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);



......@@ -448,7 +455,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 flowFunctionConstructionCount++;










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, entry.getValue());










 Set<D> targets = computeReturnFlowFunction(retFunction, d1, d2, c, entry.getValue());










 //for each target value at the return site










 //line 23










 for(D d5: targets) {



......@@ -482,10 +489,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, Collections.singleton(zeroValue));










 Set<D> targets = computeReturnFlowFunction(retFunction, d1, d2, c, Collections.singleton(zeroValue));










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);










 //register for value processing (2nd IDE phase)










 unbalancedRetSites.add(retSiteC);










 }










 }










 }



......@@ -500,7 +509,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 protected void propagateUnbalancedReturnFlow(N retSiteC, D targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) {










 protected void propagateUnbalancedReturnFlow(N retSiteC, D targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) { 










 propagate(zeroValue, retSiteC, targetVal, edgeFunction, relatedCallSite, true);










 }














......@@ -531,13 +540,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * Computes the return flow function for the given set of caller-side










	 * abstractions.










	 * @param retFunction The return flow function to compute










	 * @param d1 The abstraction at the beginning of the callee










	 * @param d2 The abstraction at the exit node in the callee










	 * @param callSite The call site










	 * @param callerSideDs The abstractions at the call site










	 * @return The set of caller-side abstractions at the return site










	 */










 protected Set<D> computeReturnFlowFunction










 (FlowFunction<D> retFunction, D d2, N callSite, Set<D> callerSideDs) {










 (FlowFunction<D> retFunction, D d1, D d2, N callSite, Set<D> callerSideDs) {










 return retFunction.computeTargets(d2);










 }














......@@ -620,7 +630,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 private void computeValues() { 










 //Phase II(i)










 logger.debug("Computing the final values for the edge functions");










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 //add caller seeds to initial seeds in an unbalanced problem










 Map<N, Set<D>> allSeeds = new HashMap<N, Set<D>>(initialSeeds);










 for(N unbalancedRetSite: unbalancedRetSites) {










 Set<D> seeds = allSeeds.get(unbalancedRetSite);










 if(seeds==null) {










 seeds = new HashSet<D>();










 allSeeds.put(unbalancedRetSite, seeds);










 }










 seeds.add(zeroValue);










 }










 //do processing










 for(Entry<N, Set<D>> seed: allSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 setVal(startPoint, val, valueLattice.bottomElement());



......@@ -731,7 +752,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }





















 private Set<Cell<N, D, EdgeFunction<V>>> endSummary(N sP, D d3) {










 protected Set<Cell<N, D, EdgeFunction<V>>> endSummary(N sP, D d3) {










 Table<N, D, EdgeFunction<V>> map = endSummary.get(sP, d3);










 if(map==null) return Collections.emptySet();










 return map.cellSet();



......@@ -749,7 +770,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 summaries.put(eP,d2,f);










 } 










 










 private Map<N, Set<D>> incoming(D d1, N sP) {










 protected Map<N, Set<D>> incoming(D d1, N sP) {










 synchronized (incoming) {










 Map<N, Set<D>> map = incoming.get(sP, d1);










 if(map==null) return Collections.emptyMap();



......@@ -857,7 +878,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.containsKey(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 initialSeeds.containsKey(n) || //our initial seeds are not necessarily method-start points but here they should be treated as such










 unbalancedRetSites.contains(n)) { //the same also for unbalanced return sites in an unbalanced problem










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......














src/heros/util/SootThreadGroup.java



0 → 100644







View file @ 78958ccf













package heros.util;





















public class SootThreadGroup extends ThreadGroup {





















 private Thread startThread;





















 public SootThreadGroup() {










 super("Soot Threadgroup");










 if (Thread.currentThread().getThreadGroup() instanceof SootThreadGroup) {










 SootThreadGroup group = (SootThreadGroup) Thread.currentThread().getThreadGroup();










 startThread = group.getStarterThread();










 } else {










 startThread = Thread.currentThread();










 }










 }





















 public Thread getStarterThread() {










 return startThread;










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

78958ccf















Commit
78958ccf


authored
Jun 01, 2015
by


Johannes Lerch



Browse files




Merge remote-tracking branch 'origin/develop' into summaries-abstract-returns







parents
8d3ed342
cbaf6a48













Changes
5




Hide whitespace changes

Inline
Side-by-side















src/heros/edgefunc/AllBottom.java








View file @ 78958ccf






......@@ -26,6 +26,8 @@ public class AllBottom<V> implements EdgeFunction<V> {









 }





















 public EdgeFunction<V> composeWith(EdgeFunction<V> secondFunction) {










 if (secondFunction instanceof EdgeIdentity)










 return this;










 return secondFunction;










 }














......














src/heros/flowfunc/Kill.java








View file @ 78958ccf






......@@ -33,7 +33,7 @@ public class Kill<D> implements FlowFunction<D> {









 } 





















 public Set<D> computeTargets(D source) {










 if(source==killValue) {










 if(source.equals(killValue)) {










 return emptySet();










 } else










 return singleton(source);



......














src/heros/solver/CountingThreadPoolExecutor.java








View file @ 78958ccf






......@@ -10,8 +10,11 @@









 ******************************************************************************/










package heros.solver;





















import heros.util.SootThreadGroup;





















import java.util.concurrent.BlockingQueue;










import java.util.concurrent.RejectedExecutionException;










import java.util.concurrent.ThreadFactory;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;














......@@ -32,7 +35,13 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,










 BlockingQueue<Runnable> workQueue) {










 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);










 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, new ThreadFactory() {










 










 @Override










 public Thread newThread(Runnable r) {










 return new Thread(new SootThreadGroup(), r);










 }










 });










 }





















 @Override



......@@ -44,6 +53,7 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {









 catch (RejectedExecutionException ex) {










 // If we were unable to submit the task, we may not count it!










 numRunningTasks.decrement();










 throw ex;










 }










 }










 



......














src/heros/solver/IDESolver.java








View file @ 78958ccf






......@@ -34,6 +34,7 @@ import java.util.HashSet;









import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentHashMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;














......@@ -93,7 +94,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //see CC 2010 paper by Naeem, Lhotak and Rodriguez










 @SynchronizedBy("consistent lock on field")










 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();










 





















 //stores the return sites (inside callers) to which we have unbalanced returns










 //if followReturnPastSeeds is enabled










 @SynchronizedBy("use of ConcurrentHashMap")










 protected final Set<N> unbalancedRetSites;





















 @DontSynchronize("stateless")










 protected final FlowFunctions<N, D, M> flowFunctions;














......@@ -183,6 +189,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 this.flowFunctions = flowFunctions;










 this.edgeFunctions = edgeFunctions;










 this.initialSeeds = tabulationProblem.initialSeeds();










 this.unbalancedRetSites = Collections.newSetFromMap(new ConcurrentHashMap<N, Boolean>());










 this.valueLattice = tabulationProblem.joinLattice();










 this.allTop = tabulationProblem.allTopFunction();










 this.jumpFn = new JumpFunctions<N,D,V>(allTop);



......@@ -353,7 +360,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);










 flowFunctionConstructionCount++;










 //for each target value of the function










 for(D d5: computeReturnFlowFunction(retFunction, d4, n, Collections.singleton(d2))) {










 for(D d5: computeReturnFlowFunction(retFunction, d3, d4, n, Collections.singleton(d2))) {










 //update the caller-side summary function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);



......@@ -448,7 +455,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 flowFunctionConstructionCount++;










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, entry.getValue());










 Set<D> targets = computeReturnFlowFunction(retFunction, d1, d2, c, entry.getValue());










 //for each target value at the return site










 //line 23










 for(D d5: targets) {



......@@ -482,10 +489,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, Collections.singleton(zeroValue));










 Set<D> targets = computeReturnFlowFunction(retFunction, d1, d2, c, Collections.singleton(zeroValue));










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);










 //register for value processing (2nd IDE phase)










 unbalancedRetSites.add(retSiteC);










 }










 }










 }



......@@ -500,7 +509,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 protected void propagateUnbalancedReturnFlow(N retSiteC, D targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) {










 protected void propagateUnbalancedReturnFlow(N retSiteC, D targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) { 










 propagate(zeroValue, retSiteC, targetVal, edgeFunction, relatedCallSite, true);










 }














......@@ -531,13 +540,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * Computes the return flow function for the given set of caller-side










	 * abstractions.










	 * @param retFunction The return flow function to compute










	 * @param d1 The abstraction at the beginning of the callee










	 * @param d2 The abstraction at the exit node in the callee










	 * @param callSite The call site










	 * @param callerSideDs The abstractions at the call site










	 * @return The set of caller-side abstractions at the return site










	 */










 protected Set<D> computeReturnFlowFunction










 (FlowFunction<D> retFunction, D d2, N callSite, Set<D> callerSideDs) {










 (FlowFunction<D> retFunction, D d1, D d2, N callSite, Set<D> callerSideDs) {










 return retFunction.computeTargets(d2);










 }














......@@ -620,7 +630,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 private void computeValues() { 










 //Phase II(i)










 logger.debug("Computing the final values for the edge functions");










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 //add caller seeds to initial seeds in an unbalanced problem










 Map<N, Set<D>> allSeeds = new HashMap<N, Set<D>>(initialSeeds);










 for(N unbalancedRetSite: unbalancedRetSites) {










 Set<D> seeds = allSeeds.get(unbalancedRetSite);










 if(seeds==null) {










 seeds = new HashSet<D>();










 allSeeds.put(unbalancedRetSite, seeds);










 }










 seeds.add(zeroValue);










 }










 //do processing










 for(Entry<N, Set<D>> seed: allSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 setVal(startPoint, val, valueLattice.bottomElement());



......@@ -731,7 +752,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }





















 private Set<Cell<N, D, EdgeFunction<V>>> endSummary(N sP, D d3) {










 protected Set<Cell<N, D, EdgeFunction<V>>> endSummary(N sP, D d3) {










 Table<N, D, EdgeFunction<V>> map = endSummary.get(sP, d3);










 if(map==null) return Collections.emptySet();










 return map.cellSet();



......@@ -749,7 +770,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 summaries.put(eP,d2,f);










 } 










 










 private Map<N, Set<D>> incoming(D d1, N sP) {










 protected Map<N, Set<D>> incoming(D d1, N sP) {










 synchronized (incoming) {










 Map<N, Set<D>> map = incoming.get(sP, d1);










 if(map==null) return Collections.emptyMap();



......@@ -857,7 +878,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.containsKey(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 initialSeeds.containsKey(n) || //our initial seeds are not necessarily method-start points but here they should be treated as such










 unbalancedRetSites.contains(n)) { //the same also for unbalanced return sites in an unbalanced problem










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......














src/heros/util/SootThreadGroup.java



0 → 100644







View file @ 78958ccf













package heros.util;





















public class SootThreadGroup extends ThreadGroup {





















 private Thread startThread;





















 public SootThreadGroup() {










 super("Soot Threadgroup");










 if (Thread.currentThread().getThreadGroup() instanceof SootThreadGroup) {










 SootThreadGroup group = (SootThreadGroup) Thread.currentThread().getThreadGroup();










 startThread = group.getStarterThread();










 } else {










 startThread = Thread.currentThread();










 }










 }





















 public Thread getStarterThread() {










 return startThread;










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

78958ccf







Open sidebar



Joshua Garcia heros
Commits

78958ccf




Open sidebar

Joshua Garcia heros
Commits

78958ccf


Joshua GarciaherosherosCommits
78958ccf








Commit
78958ccf


authored
Jun 01, 2015
by


Johannes Lerch



Browse files




Merge remote-tracking branch 'origin/develop' into summaries-abstract-returns







parents
8d3ed342
cbaf6a48













Changes
5




Hide whitespace changes

Inline
Side-by-side















src/heros/edgefunc/AllBottom.java








View file @ 78958ccf






......@@ -26,6 +26,8 @@ public class AllBottom<V> implements EdgeFunction<V> {









 }





















 public EdgeFunction<V> composeWith(EdgeFunction<V> secondFunction) {










 if (secondFunction instanceof EdgeIdentity)










 return this;










 return secondFunction;










 }














......














src/heros/flowfunc/Kill.java








View file @ 78958ccf






......@@ -33,7 +33,7 @@ public class Kill<D> implements FlowFunction<D> {









 } 





















 public Set<D> computeTargets(D source) {










 if(source==killValue) {










 if(source.equals(killValue)) {










 return emptySet();










 } else










 return singleton(source);



......














src/heros/solver/CountingThreadPoolExecutor.java








View file @ 78958ccf






......@@ -10,8 +10,11 @@









 ******************************************************************************/










package heros.solver;





















import heros.util.SootThreadGroup;





















import java.util.concurrent.BlockingQueue;










import java.util.concurrent.RejectedExecutionException;










import java.util.concurrent.ThreadFactory;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;














......@@ -32,7 +35,13 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,










 BlockingQueue<Runnable> workQueue) {










 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);










 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, new ThreadFactory() {










 










 @Override










 public Thread newThread(Runnable r) {










 return new Thread(new SootThreadGroup(), r);










 }










 });










 }





















 @Override



......@@ -44,6 +53,7 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {









 catch (RejectedExecutionException ex) {










 // If we were unable to submit the task, we may not count it!










 numRunningTasks.decrement();










 throw ex;










 }










 }










 



......














src/heros/solver/IDESolver.java








View file @ 78958ccf






......@@ -34,6 +34,7 @@ import java.util.HashSet;









import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentHashMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;














......@@ -93,7 +94,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //see CC 2010 paper by Naeem, Lhotak and Rodriguez










 @SynchronizedBy("consistent lock on field")










 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();










 





















 //stores the return sites (inside callers) to which we have unbalanced returns










 //if followReturnPastSeeds is enabled










 @SynchronizedBy("use of ConcurrentHashMap")










 protected final Set<N> unbalancedRetSites;





















 @DontSynchronize("stateless")










 protected final FlowFunctions<N, D, M> flowFunctions;














......@@ -183,6 +189,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 this.flowFunctions = flowFunctions;










 this.edgeFunctions = edgeFunctions;










 this.initialSeeds = tabulationProblem.initialSeeds();










 this.unbalancedRetSites = Collections.newSetFromMap(new ConcurrentHashMap<N, Boolean>());










 this.valueLattice = tabulationProblem.joinLattice();










 this.allTop = tabulationProblem.allTopFunction();










 this.jumpFn = new JumpFunctions<N,D,V>(allTop);



......@@ -353,7 +360,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);










 flowFunctionConstructionCount++;










 //for each target value of the function










 for(D d5: computeReturnFlowFunction(retFunction, d4, n, Collections.singleton(d2))) {










 for(D d5: computeReturnFlowFunction(retFunction, d3, d4, n, Collections.singleton(d2))) {










 //update the caller-side summary function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);



......@@ -448,7 +455,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 flowFunctionConstructionCount++;










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, entry.getValue());










 Set<D> targets = computeReturnFlowFunction(retFunction, d1, d2, c, entry.getValue());










 //for each target value at the return site










 //line 23










 for(D d5: targets) {



......@@ -482,10 +489,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, Collections.singleton(zeroValue));










 Set<D> targets = computeReturnFlowFunction(retFunction, d1, d2, c, Collections.singleton(zeroValue));










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);










 //register for value processing (2nd IDE phase)










 unbalancedRetSites.add(retSiteC);










 }










 }










 }



......@@ -500,7 +509,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 protected void propagateUnbalancedReturnFlow(N retSiteC, D targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) {










 protected void propagateUnbalancedReturnFlow(N retSiteC, D targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) { 










 propagate(zeroValue, retSiteC, targetVal, edgeFunction, relatedCallSite, true);










 }














......@@ -531,13 +540,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * Computes the return flow function for the given set of caller-side










	 * abstractions.










	 * @param retFunction The return flow function to compute










	 * @param d1 The abstraction at the beginning of the callee










	 * @param d2 The abstraction at the exit node in the callee










	 * @param callSite The call site










	 * @param callerSideDs The abstractions at the call site










	 * @return The set of caller-side abstractions at the return site










	 */










 protected Set<D> computeReturnFlowFunction










 (FlowFunction<D> retFunction, D d2, N callSite, Set<D> callerSideDs) {










 (FlowFunction<D> retFunction, D d1, D d2, N callSite, Set<D> callerSideDs) {










 return retFunction.computeTargets(d2);










 }














......@@ -620,7 +630,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 private void computeValues() { 










 //Phase II(i)










 logger.debug("Computing the final values for the edge functions");










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 //add caller seeds to initial seeds in an unbalanced problem










 Map<N, Set<D>> allSeeds = new HashMap<N, Set<D>>(initialSeeds);










 for(N unbalancedRetSite: unbalancedRetSites) {










 Set<D> seeds = allSeeds.get(unbalancedRetSite);










 if(seeds==null) {










 seeds = new HashSet<D>();










 allSeeds.put(unbalancedRetSite, seeds);










 }










 seeds.add(zeroValue);










 }










 //do processing










 for(Entry<N, Set<D>> seed: allSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 setVal(startPoint, val, valueLattice.bottomElement());



......@@ -731,7 +752,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }





















 private Set<Cell<N, D, EdgeFunction<V>>> endSummary(N sP, D d3) {










 protected Set<Cell<N, D, EdgeFunction<V>>> endSummary(N sP, D d3) {










 Table<N, D, EdgeFunction<V>> map = endSummary.get(sP, d3);










 if(map==null) return Collections.emptySet();










 return map.cellSet();



......@@ -749,7 +770,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 summaries.put(eP,d2,f);










 } 










 










 private Map<N, Set<D>> incoming(D d1, N sP) {










 protected Map<N, Set<D>> incoming(D d1, N sP) {










 synchronized (incoming) {










 Map<N, Set<D>> map = incoming.get(sP, d1);










 if(map==null) return Collections.emptyMap();



......@@ -857,7 +878,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.containsKey(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 initialSeeds.containsKey(n) || //our initial seeds are not necessarily method-start points but here they should be treated as such










 unbalancedRetSites.contains(n)) { //the same also for unbalanced return sites in an unbalanced problem










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......














src/heros/util/SootThreadGroup.java



0 → 100644







View file @ 78958ccf













package heros.util;





















public class SootThreadGroup extends ThreadGroup {





















 private Thread startThread;





















 public SootThreadGroup() {










 super("Soot Threadgroup");










 if (Thread.currentThread().getThreadGroup() instanceof SootThreadGroup) {










 SootThreadGroup group = (SootThreadGroup) Thread.currentThread().getThreadGroup();










 startThread = group.getStarterThread();










 } else {










 startThread = Thread.currentThread();










 }










 }





















 public Thread getStarterThread() {










 return startThread;










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
78958ccf


authored
Jun 01, 2015
by


Johannes Lerch



Browse files




Merge remote-tracking branch 'origin/develop' into summaries-abstract-returns







parents
8d3ed342
cbaf6a48













Changes
5




Hide whitespace changes

Inline
Side-by-side















src/heros/edgefunc/AllBottom.java








View file @ 78958ccf






......@@ -26,6 +26,8 @@ public class AllBottom<V> implements EdgeFunction<V> {









 }





















 public EdgeFunction<V> composeWith(EdgeFunction<V> secondFunction) {










 if (secondFunction instanceof EdgeIdentity)










 return this;










 return secondFunction;










 }














......














src/heros/flowfunc/Kill.java








View file @ 78958ccf






......@@ -33,7 +33,7 @@ public class Kill<D> implements FlowFunction<D> {









 } 





















 public Set<D> computeTargets(D source) {










 if(source==killValue) {










 if(source.equals(killValue)) {










 return emptySet();










 } else










 return singleton(source);



......














src/heros/solver/CountingThreadPoolExecutor.java








View file @ 78958ccf






......@@ -10,8 +10,11 @@









 ******************************************************************************/










package heros.solver;





















import heros.util.SootThreadGroup;





















import java.util.concurrent.BlockingQueue;










import java.util.concurrent.RejectedExecutionException;










import java.util.concurrent.ThreadFactory;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;














......@@ -32,7 +35,13 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,










 BlockingQueue<Runnable> workQueue) {










 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);










 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, new ThreadFactory() {










 










 @Override










 public Thread newThread(Runnable r) {










 return new Thread(new SootThreadGroup(), r);










 }










 });










 }





















 @Override



......@@ -44,6 +53,7 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {









 catch (RejectedExecutionException ex) {










 // If we were unable to submit the task, we may not count it!










 numRunningTasks.decrement();










 throw ex;










 }










 }










 



......














src/heros/solver/IDESolver.java








View file @ 78958ccf






......@@ -34,6 +34,7 @@ import java.util.HashSet;









import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentHashMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;














......@@ -93,7 +94,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //see CC 2010 paper by Naeem, Lhotak and Rodriguez










 @SynchronizedBy("consistent lock on field")










 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();










 





















 //stores the return sites (inside callers) to which we have unbalanced returns










 //if followReturnPastSeeds is enabled










 @SynchronizedBy("use of ConcurrentHashMap")










 protected final Set<N> unbalancedRetSites;





















 @DontSynchronize("stateless")










 protected final FlowFunctions<N, D, M> flowFunctions;














......@@ -183,6 +189,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 this.flowFunctions = flowFunctions;










 this.edgeFunctions = edgeFunctions;










 this.initialSeeds = tabulationProblem.initialSeeds();










 this.unbalancedRetSites = Collections.newSetFromMap(new ConcurrentHashMap<N, Boolean>());










 this.valueLattice = tabulationProblem.joinLattice();










 this.allTop = tabulationProblem.allTopFunction();










 this.jumpFn = new JumpFunctions<N,D,V>(allTop);



......@@ -353,7 +360,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);










 flowFunctionConstructionCount++;










 //for each target value of the function










 for(D d5: computeReturnFlowFunction(retFunction, d4, n, Collections.singleton(d2))) {










 for(D d5: computeReturnFlowFunction(retFunction, d3, d4, n, Collections.singleton(d2))) {










 //update the caller-side summary function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);



......@@ -448,7 +455,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 flowFunctionConstructionCount++;










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, entry.getValue());










 Set<D> targets = computeReturnFlowFunction(retFunction, d1, d2, c, entry.getValue());










 //for each target value at the return site










 //line 23










 for(D d5: targets) {



......@@ -482,10 +489,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, Collections.singleton(zeroValue));










 Set<D> targets = computeReturnFlowFunction(retFunction, d1, d2, c, Collections.singleton(zeroValue));










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);










 //register for value processing (2nd IDE phase)










 unbalancedRetSites.add(retSiteC);










 }










 }










 }



......@@ -500,7 +509,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 protected void propagateUnbalancedReturnFlow(N retSiteC, D targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) {










 protected void propagateUnbalancedReturnFlow(N retSiteC, D targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) { 










 propagate(zeroValue, retSiteC, targetVal, edgeFunction, relatedCallSite, true);










 }














......@@ -531,13 +540,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * Computes the return flow function for the given set of caller-side










	 * abstractions.










	 * @param retFunction The return flow function to compute










	 * @param d1 The abstraction at the beginning of the callee










	 * @param d2 The abstraction at the exit node in the callee










	 * @param callSite The call site










	 * @param callerSideDs The abstractions at the call site










	 * @return The set of caller-side abstractions at the return site










	 */










 protected Set<D> computeReturnFlowFunction










 (FlowFunction<D> retFunction, D d2, N callSite, Set<D> callerSideDs) {










 (FlowFunction<D> retFunction, D d1, D d2, N callSite, Set<D> callerSideDs) {










 return retFunction.computeTargets(d2);










 }














......@@ -620,7 +630,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 private void computeValues() { 










 //Phase II(i)










 logger.debug("Computing the final values for the edge functions");










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 //add caller seeds to initial seeds in an unbalanced problem










 Map<N, Set<D>> allSeeds = new HashMap<N, Set<D>>(initialSeeds);










 for(N unbalancedRetSite: unbalancedRetSites) {










 Set<D> seeds = allSeeds.get(unbalancedRetSite);










 if(seeds==null) {










 seeds = new HashSet<D>();










 allSeeds.put(unbalancedRetSite, seeds);










 }










 seeds.add(zeroValue);










 }










 //do processing










 for(Entry<N, Set<D>> seed: allSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 setVal(startPoint, val, valueLattice.bottomElement());



......@@ -731,7 +752,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }





















 private Set<Cell<N, D, EdgeFunction<V>>> endSummary(N sP, D d3) {










 protected Set<Cell<N, D, EdgeFunction<V>>> endSummary(N sP, D d3) {










 Table<N, D, EdgeFunction<V>> map = endSummary.get(sP, d3);










 if(map==null) return Collections.emptySet();










 return map.cellSet();



......@@ -749,7 +770,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 summaries.put(eP,d2,f);










 } 










 










 private Map<N, Set<D>> incoming(D d1, N sP) {










 protected Map<N, Set<D>> incoming(D d1, N sP) {










 synchronized (incoming) {










 Map<N, Set<D>> map = incoming.get(sP, d1);










 if(map==null) return Collections.emptyMap();



......@@ -857,7 +878,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.containsKey(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 initialSeeds.containsKey(n) || //our initial seeds are not necessarily method-start points but here they should be treated as such










 unbalancedRetSites.contains(n)) { //the same also for unbalanced return sites in an unbalanced problem










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......














src/heros/util/SootThreadGroup.java



0 → 100644







View file @ 78958ccf













package heros.util;





















public class SootThreadGroup extends ThreadGroup {





















 private Thread startThread;





















 public SootThreadGroup() {










 super("Soot Threadgroup");










 if (Thread.currentThread().getThreadGroup() instanceof SootThreadGroup) {










 SootThreadGroup group = (SootThreadGroup) Thread.currentThread().getThreadGroup();










 startThread = group.getStarterThread();










 } else {










 startThread = Thread.currentThread();










 }










 }





















 public Thread getStarterThread() {










 return startThread;










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
78958ccf


authored
Jun 01, 2015
by


Johannes Lerch



Browse files



Commit
78958ccf


authored
Jun 01, 2015
by


Johannes Lerch

78958ccfauthoredbyJohannes Lerch

Merge remote-tracking branch 'origin/develop' into summaries-abstract-returns






parents
8d3ed342
cbaf6a48
















parents
8d3ed342
cbaf6a48





parents












Changes
5
5


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/edgefunc/AllBottom.java








View file @ 78958ccf






......@@ -26,6 +26,8 @@ public class AllBottom<V> implements EdgeFunction<V> {









 }





















 public EdgeFunction<V> composeWith(EdgeFunction<V> secondFunction) {










 if (secondFunction instanceof EdgeIdentity)










 return this;










 return secondFunction;










 }














......














src/heros/flowfunc/Kill.java








View file @ 78958ccf






......@@ -33,7 +33,7 @@ public class Kill<D> implements FlowFunction<D> {









 } 





















 public Set<D> computeTargets(D source) {










 if(source==killValue) {










 if(source.equals(killValue)) {










 return emptySet();










 } else










 return singleton(source);



......














src/heros/solver/CountingThreadPoolExecutor.java








View file @ 78958ccf






......@@ -10,8 +10,11 @@









 ******************************************************************************/










package heros.solver;





















import heros.util.SootThreadGroup;





















import java.util.concurrent.BlockingQueue;










import java.util.concurrent.RejectedExecutionException;










import java.util.concurrent.ThreadFactory;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;














......@@ -32,7 +35,13 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,










 BlockingQueue<Runnable> workQueue) {










 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);










 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, new ThreadFactory() {










 










 @Override










 public Thread newThread(Runnable r) {










 return new Thread(new SootThreadGroup(), r);










 }










 });










 }





















 @Override



......@@ -44,6 +53,7 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {









 catch (RejectedExecutionException ex) {










 // If we were unable to submit the task, we may not count it!










 numRunningTasks.decrement();










 throw ex;










 }










 }










 



......














src/heros/solver/IDESolver.java








View file @ 78958ccf






......@@ -34,6 +34,7 @@ import java.util.HashSet;









import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentHashMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;














......@@ -93,7 +94,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //see CC 2010 paper by Naeem, Lhotak and Rodriguez










 @SynchronizedBy("consistent lock on field")










 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();










 





















 //stores the return sites (inside callers) to which we have unbalanced returns










 //if followReturnPastSeeds is enabled










 @SynchronizedBy("use of ConcurrentHashMap")










 protected final Set<N> unbalancedRetSites;





















 @DontSynchronize("stateless")










 protected final FlowFunctions<N, D, M> flowFunctions;














......@@ -183,6 +189,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 this.flowFunctions = flowFunctions;










 this.edgeFunctions = edgeFunctions;










 this.initialSeeds = tabulationProblem.initialSeeds();










 this.unbalancedRetSites = Collections.newSetFromMap(new ConcurrentHashMap<N, Boolean>());










 this.valueLattice = tabulationProblem.joinLattice();










 this.allTop = tabulationProblem.allTopFunction();










 this.jumpFn = new JumpFunctions<N,D,V>(allTop);



......@@ -353,7 +360,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);










 flowFunctionConstructionCount++;










 //for each target value of the function










 for(D d5: computeReturnFlowFunction(retFunction, d4, n, Collections.singleton(d2))) {










 for(D d5: computeReturnFlowFunction(retFunction, d3, d4, n, Collections.singleton(d2))) {










 //update the caller-side summary function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);



......@@ -448,7 +455,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 flowFunctionConstructionCount++;










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, entry.getValue());










 Set<D> targets = computeReturnFlowFunction(retFunction, d1, d2, c, entry.getValue());










 //for each target value at the return site










 //line 23










 for(D d5: targets) {



......@@ -482,10 +489,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, Collections.singleton(zeroValue));










 Set<D> targets = computeReturnFlowFunction(retFunction, d1, d2, c, Collections.singleton(zeroValue));










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);










 //register for value processing (2nd IDE phase)










 unbalancedRetSites.add(retSiteC);










 }










 }










 }



......@@ -500,7 +509,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 protected void propagateUnbalancedReturnFlow(N retSiteC, D targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) {










 protected void propagateUnbalancedReturnFlow(N retSiteC, D targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) { 










 propagate(zeroValue, retSiteC, targetVal, edgeFunction, relatedCallSite, true);










 }














......@@ -531,13 +540,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * Computes the return flow function for the given set of caller-side










	 * abstractions.










	 * @param retFunction The return flow function to compute










	 * @param d1 The abstraction at the beginning of the callee










	 * @param d2 The abstraction at the exit node in the callee










	 * @param callSite The call site










	 * @param callerSideDs The abstractions at the call site










	 * @return The set of caller-side abstractions at the return site










	 */










 protected Set<D> computeReturnFlowFunction










 (FlowFunction<D> retFunction, D d2, N callSite, Set<D> callerSideDs) {










 (FlowFunction<D> retFunction, D d1, D d2, N callSite, Set<D> callerSideDs) {










 return retFunction.computeTargets(d2);










 }














......@@ -620,7 +630,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 private void computeValues() { 










 //Phase II(i)










 logger.debug("Computing the final values for the edge functions");










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 //add caller seeds to initial seeds in an unbalanced problem










 Map<N, Set<D>> allSeeds = new HashMap<N, Set<D>>(initialSeeds);










 for(N unbalancedRetSite: unbalancedRetSites) {










 Set<D> seeds = allSeeds.get(unbalancedRetSite);










 if(seeds==null) {










 seeds = new HashSet<D>();










 allSeeds.put(unbalancedRetSite, seeds);










 }










 seeds.add(zeroValue);










 }










 //do processing










 for(Entry<N, Set<D>> seed: allSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 setVal(startPoint, val, valueLattice.bottomElement());



......@@ -731,7 +752,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }





















 private Set<Cell<N, D, EdgeFunction<V>>> endSummary(N sP, D d3) {










 protected Set<Cell<N, D, EdgeFunction<V>>> endSummary(N sP, D d3) {










 Table<N, D, EdgeFunction<V>> map = endSummary.get(sP, d3);










 if(map==null) return Collections.emptySet();










 return map.cellSet();



......@@ -749,7 +770,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 summaries.put(eP,d2,f);










 } 










 










 private Map<N, Set<D>> incoming(D d1, N sP) {










 protected Map<N, Set<D>> incoming(D d1, N sP) {










 synchronized (incoming) {










 Map<N, Set<D>> map = incoming.get(sP, d1);










 if(map==null) return Collections.emptyMap();



......@@ -857,7 +878,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.containsKey(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 initialSeeds.containsKey(n) || //our initial seeds are not necessarily method-start points but here they should be treated as such










 unbalancedRetSites.contains(n)) { //the same also for unbalanced return sites in an unbalanced problem










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......














src/heros/util/SootThreadGroup.java



0 → 100644







View file @ 78958ccf













package heros.util;





















public class SootThreadGroup extends ThreadGroup {





















 private Thread startThread;





















 public SootThreadGroup() {










 super("Soot Threadgroup");










 if (Thread.currentThread().getThreadGroup() instanceof SootThreadGroup) {










 SootThreadGroup group = (SootThreadGroup) Thread.currentThread().getThreadGroup();










 startThread = group.getStarterThread();










 } else {










 startThread = Thread.currentThread();










 }










 }





















 public Thread getStarterThread() {










 return startThread;










 }










}














src/heros/edgefunc/AllBottom.java








View file @ 78958ccf






......@@ -26,6 +26,8 @@ public class AllBottom<V> implements EdgeFunction<V> {









 }





















 public EdgeFunction<V> composeWith(EdgeFunction<V> secondFunction) {










 if (secondFunction instanceof EdgeIdentity)










 return this;










 return secondFunction;










 }














......












src/heros/edgefunc/AllBottom.java








View file @ 78958ccf








src/heros/edgefunc/AllBottom.java










View file @ 78958ccf


78958ccf



......@@ -26,6 +26,8 @@ public class AllBottom<V> implements EdgeFunction<V> {









 }





















 public EdgeFunction<V> composeWith(EdgeFunction<V> secondFunction) {










 if (secondFunction instanceof EdgeIdentity)










 return this;










 return secondFunction;










 }














......






......@@ -26,6 +26,8 @@ public class AllBottom<V> implements EdgeFunction<V> {









 }





















 public EdgeFunction<V> composeWith(EdgeFunction<V> secondFunction) {










 if (secondFunction instanceof EdgeIdentity)










 return this;










 return secondFunction;










 }














......


 }} public EdgeFunction<V> composeWith(EdgeFunction<V> secondFunction) {publicEdgeFunction<V>composeWith(EdgeFunction<V>secondFunction){ if (secondFunction instanceof EdgeIdentity)if(secondFunctioninstanceofEdgeIdentity) return this;returnthis; return secondFunction;returnsecondFunction; }}








src/heros/flowfunc/Kill.java








View file @ 78958ccf






......@@ -33,7 +33,7 @@ public class Kill<D> implements FlowFunction<D> {









 } 





















 public Set<D> computeTargets(D source) {










 if(source==killValue) {










 if(source.equals(killValue)) {










 return emptySet();










 } else










 return singleton(source);



......












src/heros/flowfunc/Kill.java








View file @ 78958ccf








src/heros/flowfunc/Kill.java










View file @ 78958ccf


78958ccf



......@@ -33,7 +33,7 @@ public class Kill<D> implements FlowFunction<D> {









 } 





















 public Set<D> computeTargets(D source) {










 if(source==killValue) {










 if(source.equals(killValue)) {










 return emptySet();










 } else










 return singleton(source);



......






......@@ -33,7 +33,7 @@ public class Kill<D> implements FlowFunction<D> {









 } 





















 public Set<D> computeTargets(D source) {










 if(source==killValue) {










 if(source.equals(killValue)) {










 return emptySet();










 } else










 return singleton(source);



......


 } } public Set<D> computeTargets(D source) {publicSet<D>computeTargets(Dsource){ if(source==killValue) {if(source====killValue){ if(source.equals(killValue)) {if(source..equalsequals((killValue))){ return emptySet();returnemptySet(); } else}else return singleton(source);returnsingleton(source);








src/heros/solver/CountingThreadPoolExecutor.java








View file @ 78958ccf






......@@ -10,8 +10,11 @@









 ******************************************************************************/










package heros.solver;





















import heros.util.SootThreadGroup;





















import java.util.concurrent.BlockingQueue;










import java.util.concurrent.RejectedExecutionException;










import java.util.concurrent.ThreadFactory;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;














......@@ -32,7 +35,13 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,










 BlockingQueue<Runnable> workQueue) {










 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);










 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, new ThreadFactory() {










 










 @Override










 public Thread newThread(Runnable r) {










 return new Thread(new SootThreadGroup(), r);










 }










 });










 }





















 @Override



......@@ -44,6 +53,7 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {









 catch (RejectedExecutionException ex) {










 // If we were unable to submit the task, we may not count it!










 numRunningTasks.decrement();










 throw ex;










 }










 }










 



......












src/heros/solver/CountingThreadPoolExecutor.java








View file @ 78958ccf








src/heros/solver/CountingThreadPoolExecutor.java










View file @ 78958ccf


78958ccf



......@@ -10,8 +10,11 @@









 ******************************************************************************/










package heros.solver;





















import heros.util.SootThreadGroup;





















import java.util.concurrent.BlockingQueue;










import java.util.concurrent.RejectedExecutionException;










import java.util.concurrent.ThreadFactory;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;














......@@ -32,7 +35,13 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,










 BlockingQueue<Runnable> workQueue) {










 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);










 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, new ThreadFactory() {










 










 @Override










 public Thread newThread(Runnable r) {










 return new Thread(new SootThreadGroup(), r);










 }










 });










 }





















 @Override



......@@ -44,6 +53,7 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {









 catch (RejectedExecutionException ex) {










 // If we were unable to submit the task, we may not count it!










 numRunningTasks.decrement();










 throw ex;










 }










 }










 



......






......@@ -10,8 +10,11 @@









 ******************************************************************************/










package heros.solver;





















import heros.util.SootThreadGroup;





















import java.util.concurrent.BlockingQueue;










import java.util.concurrent.RejectedExecutionException;










import java.util.concurrent.ThreadFactory;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;














......@@ -32,7 +35,13 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,










 BlockingQueue<Runnable> workQueue) {










 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);










 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, new ThreadFactory() {










 










 @Override










 public Thread newThread(Runnable r) {










 return new Thread(new SootThreadGroup(), r);










 }










 });










 }





















 @Override



......@@ -44,6 +53,7 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {









 catch (RejectedExecutionException ex) {










 // If we were unable to submit the task, we may not count it!










 numRunningTasks.decrement();










 throw ex;










 }










 }










 



......


 ******************************************************************************/ ******************************************************************************/package heros.solver;packageheros.solver;import heros.util.SootThreadGroup;importheros.util.SootThreadGroup;import java.util.concurrent.BlockingQueue;importjava.util.concurrent.BlockingQueue;import java.util.concurrent.RejectedExecutionException;importjava.util.concurrent.RejectedExecutionException;import java.util.concurrent.ThreadFactory;importjava.util.concurrent.ThreadFactory;import java.util.concurrent.ThreadPoolExecutor;importjava.util.concurrent.ThreadPoolExecutor;import java.util.concurrent.TimeUnit;importjava.util.concurrent.TimeUnit; public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,publicCountingThreadPoolExecutor(intcorePoolSize,intmaximumPoolSize,longkeepAliveTime,TimeUnitunit, BlockingQueue<Runnable> workQueue) {BlockingQueue<Runnable>workQueue){ super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);super(corePoolSize,maximumPoolSize,keepAliveTime,unit,workQueue); super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, new ThreadFactory() {super(corePoolSize,maximumPoolSize,keepAliveTime,unit,workQueue,newThreadFactory(){  @Override@Override public Thread newThread(Runnable r) {publicThreadnewThread(Runnabler){ return new Thread(new SootThreadGroup(), r);returnnewThread(newSootThreadGroup(),r); }} });}); }} @Override@Override catch (RejectedExecutionException ex) {catch(RejectedExecutionExceptionex){ // If we were unable to submit the task, we may not count it!// If we were unable to submit the task, we may not count it! numRunningTasks.decrement();numRunningTasks.decrement(); throw ex;throwex; }} }} 








src/heros/solver/IDESolver.java








View file @ 78958ccf






......@@ -34,6 +34,7 @@ import java.util.HashSet;









import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentHashMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;














......@@ -93,7 +94,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //see CC 2010 paper by Naeem, Lhotak and Rodriguez










 @SynchronizedBy("consistent lock on field")










 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();










 





















 //stores the return sites (inside callers) to which we have unbalanced returns










 //if followReturnPastSeeds is enabled










 @SynchronizedBy("use of ConcurrentHashMap")










 protected final Set<N> unbalancedRetSites;





















 @DontSynchronize("stateless")










 protected final FlowFunctions<N, D, M> flowFunctions;














......@@ -183,6 +189,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 this.flowFunctions = flowFunctions;










 this.edgeFunctions = edgeFunctions;










 this.initialSeeds = tabulationProblem.initialSeeds();










 this.unbalancedRetSites = Collections.newSetFromMap(new ConcurrentHashMap<N, Boolean>());










 this.valueLattice = tabulationProblem.joinLattice();










 this.allTop = tabulationProblem.allTopFunction();










 this.jumpFn = new JumpFunctions<N,D,V>(allTop);



......@@ -353,7 +360,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);










 flowFunctionConstructionCount++;










 //for each target value of the function










 for(D d5: computeReturnFlowFunction(retFunction, d4, n, Collections.singleton(d2))) {










 for(D d5: computeReturnFlowFunction(retFunction, d3, d4, n, Collections.singleton(d2))) {










 //update the caller-side summary function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);



......@@ -448,7 +455,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 flowFunctionConstructionCount++;










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, entry.getValue());










 Set<D> targets = computeReturnFlowFunction(retFunction, d1, d2, c, entry.getValue());










 //for each target value at the return site










 //line 23










 for(D d5: targets) {



......@@ -482,10 +489,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, Collections.singleton(zeroValue));










 Set<D> targets = computeReturnFlowFunction(retFunction, d1, d2, c, Collections.singleton(zeroValue));










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);










 //register for value processing (2nd IDE phase)










 unbalancedRetSites.add(retSiteC);










 }










 }










 }



......@@ -500,7 +509,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 protected void propagateUnbalancedReturnFlow(N retSiteC, D targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) {










 protected void propagateUnbalancedReturnFlow(N retSiteC, D targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) { 










 propagate(zeroValue, retSiteC, targetVal, edgeFunction, relatedCallSite, true);










 }














......@@ -531,13 +540,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * Computes the return flow function for the given set of caller-side










	 * abstractions.










	 * @param retFunction The return flow function to compute










	 * @param d1 The abstraction at the beginning of the callee










	 * @param d2 The abstraction at the exit node in the callee










	 * @param callSite The call site










	 * @param callerSideDs The abstractions at the call site










	 * @return The set of caller-side abstractions at the return site










	 */










 protected Set<D> computeReturnFlowFunction










 (FlowFunction<D> retFunction, D d2, N callSite, Set<D> callerSideDs) {










 (FlowFunction<D> retFunction, D d1, D d2, N callSite, Set<D> callerSideDs) {










 return retFunction.computeTargets(d2);










 }














......@@ -620,7 +630,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 private void computeValues() { 










 //Phase II(i)










 logger.debug("Computing the final values for the edge functions");










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 //add caller seeds to initial seeds in an unbalanced problem










 Map<N, Set<D>> allSeeds = new HashMap<N, Set<D>>(initialSeeds);










 for(N unbalancedRetSite: unbalancedRetSites) {










 Set<D> seeds = allSeeds.get(unbalancedRetSite);










 if(seeds==null) {










 seeds = new HashSet<D>();










 allSeeds.put(unbalancedRetSite, seeds);










 }










 seeds.add(zeroValue);










 }










 //do processing










 for(Entry<N, Set<D>> seed: allSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 setVal(startPoint, val, valueLattice.bottomElement());



......@@ -731,7 +752,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }





















 private Set<Cell<N, D, EdgeFunction<V>>> endSummary(N sP, D d3) {










 protected Set<Cell<N, D, EdgeFunction<V>>> endSummary(N sP, D d3) {










 Table<N, D, EdgeFunction<V>> map = endSummary.get(sP, d3);










 if(map==null) return Collections.emptySet();










 return map.cellSet();



......@@ -749,7 +770,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 summaries.put(eP,d2,f);










 } 










 










 private Map<N, Set<D>> incoming(D d1, N sP) {










 protected Map<N, Set<D>> incoming(D d1, N sP) {










 synchronized (incoming) {










 Map<N, Set<D>> map = incoming.get(sP, d1);










 if(map==null) return Collections.emptyMap();



......@@ -857,7 +878,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.containsKey(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 initialSeeds.containsKey(n) || //our initial seeds are not necessarily method-start points but here they should be treated as such










 unbalancedRetSites.contains(n)) { //the same also for unbalanced return sites in an unbalanced problem










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......












src/heros/solver/IDESolver.java








View file @ 78958ccf








src/heros/solver/IDESolver.java










View file @ 78958ccf


78958ccf



......@@ -34,6 +34,7 @@ import java.util.HashSet;









import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentHashMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;














......@@ -93,7 +94,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //see CC 2010 paper by Naeem, Lhotak and Rodriguez










 @SynchronizedBy("consistent lock on field")










 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();










 





















 //stores the return sites (inside callers) to which we have unbalanced returns










 //if followReturnPastSeeds is enabled










 @SynchronizedBy("use of ConcurrentHashMap")










 protected final Set<N> unbalancedRetSites;





















 @DontSynchronize("stateless")










 protected final FlowFunctions<N, D, M> flowFunctions;














......@@ -183,6 +189,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 this.flowFunctions = flowFunctions;










 this.edgeFunctions = edgeFunctions;










 this.initialSeeds = tabulationProblem.initialSeeds();










 this.unbalancedRetSites = Collections.newSetFromMap(new ConcurrentHashMap<N, Boolean>());










 this.valueLattice = tabulationProblem.joinLattice();










 this.allTop = tabulationProblem.allTopFunction();










 this.jumpFn = new JumpFunctions<N,D,V>(allTop);



......@@ -353,7 +360,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);










 flowFunctionConstructionCount++;










 //for each target value of the function










 for(D d5: computeReturnFlowFunction(retFunction, d4, n, Collections.singleton(d2))) {










 for(D d5: computeReturnFlowFunction(retFunction, d3, d4, n, Collections.singleton(d2))) {










 //update the caller-side summary function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);



......@@ -448,7 +455,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 flowFunctionConstructionCount++;










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, entry.getValue());










 Set<D> targets = computeReturnFlowFunction(retFunction, d1, d2, c, entry.getValue());










 //for each target value at the return site










 //line 23










 for(D d5: targets) {



......@@ -482,10 +489,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, Collections.singleton(zeroValue));










 Set<D> targets = computeReturnFlowFunction(retFunction, d1, d2, c, Collections.singleton(zeroValue));










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);










 //register for value processing (2nd IDE phase)










 unbalancedRetSites.add(retSiteC);










 }










 }










 }



......@@ -500,7 +509,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 protected void propagateUnbalancedReturnFlow(N retSiteC, D targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) {










 protected void propagateUnbalancedReturnFlow(N retSiteC, D targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) { 










 propagate(zeroValue, retSiteC, targetVal, edgeFunction, relatedCallSite, true);










 }














......@@ -531,13 +540,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * Computes the return flow function for the given set of caller-side










	 * abstractions.










	 * @param retFunction The return flow function to compute










	 * @param d1 The abstraction at the beginning of the callee










	 * @param d2 The abstraction at the exit node in the callee










	 * @param callSite The call site










	 * @param callerSideDs The abstractions at the call site










	 * @return The set of caller-side abstractions at the return site










	 */










 protected Set<D> computeReturnFlowFunction










 (FlowFunction<D> retFunction, D d2, N callSite, Set<D> callerSideDs) {










 (FlowFunction<D> retFunction, D d1, D d2, N callSite, Set<D> callerSideDs) {










 return retFunction.computeTargets(d2);










 }














......@@ -620,7 +630,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 private void computeValues() { 










 //Phase II(i)










 logger.debug("Computing the final values for the edge functions");










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 //add caller seeds to initial seeds in an unbalanced problem










 Map<N, Set<D>> allSeeds = new HashMap<N, Set<D>>(initialSeeds);










 for(N unbalancedRetSite: unbalancedRetSites) {










 Set<D> seeds = allSeeds.get(unbalancedRetSite);










 if(seeds==null) {










 seeds = new HashSet<D>();










 allSeeds.put(unbalancedRetSite, seeds);










 }










 seeds.add(zeroValue);










 }










 //do processing










 for(Entry<N, Set<D>> seed: allSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 setVal(startPoint, val, valueLattice.bottomElement());



......@@ -731,7 +752,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }





















 private Set<Cell<N, D, EdgeFunction<V>>> endSummary(N sP, D d3) {










 protected Set<Cell<N, D, EdgeFunction<V>>> endSummary(N sP, D d3) {










 Table<N, D, EdgeFunction<V>> map = endSummary.get(sP, d3);










 if(map==null) return Collections.emptySet();










 return map.cellSet();



......@@ -749,7 +770,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 summaries.put(eP,d2,f);










 } 










 










 private Map<N, Set<D>> incoming(D d1, N sP) {










 protected Map<N, Set<D>> incoming(D d1, N sP) {










 synchronized (incoming) {










 Map<N, Set<D>> map = incoming.get(sP, d1);










 if(map==null) return Collections.emptyMap();



......@@ -857,7 +878,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.containsKey(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 initialSeeds.containsKey(n) || //our initial seeds are not necessarily method-start points but here they should be treated as such










 unbalancedRetSites.contains(n)) { //the same also for unbalanced return sites in an unbalanced problem










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......






......@@ -34,6 +34,7 @@ import java.util.HashSet;









import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentHashMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;














......@@ -93,7 +94,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //see CC 2010 paper by Naeem, Lhotak and Rodriguez










 @SynchronizedBy("consistent lock on field")










 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();










 





















 //stores the return sites (inside callers) to which we have unbalanced returns










 //if followReturnPastSeeds is enabled










 @SynchronizedBy("use of ConcurrentHashMap")










 protected final Set<N> unbalancedRetSites;





















 @DontSynchronize("stateless")










 protected final FlowFunctions<N, D, M> flowFunctions;














......@@ -183,6 +189,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 this.flowFunctions = flowFunctions;










 this.edgeFunctions = edgeFunctions;










 this.initialSeeds = tabulationProblem.initialSeeds();










 this.unbalancedRetSites = Collections.newSetFromMap(new ConcurrentHashMap<N, Boolean>());










 this.valueLattice = tabulationProblem.joinLattice();










 this.allTop = tabulationProblem.allTopFunction();










 this.jumpFn = new JumpFunctions<N,D,V>(allTop);



......@@ -353,7 +360,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);










 flowFunctionConstructionCount++;










 //for each target value of the function










 for(D d5: computeReturnFlowFunction(retFunction, d4, n, Collections.singleton(d2))) {










 for(D d5: computeReturnFlowFunction(retFunction, d3, d4, n, Collections.singleton(d2))) {










 //update the caller-side summary function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);



......@@ -448,7 +455,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 flowFunctionConstructionCount++;










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, entry.getValue());










 Set<D> targets = computeReturnFlowFunction(retFunction, d1, d2, c, entry.getValue());










 //for each target value at the return site










 //line 23










 for(D d5: targets) {



......@@ -482,10 +489,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, Collections.singleton(zeroValue));










 Set<D> targets = computeReturnFlowFunction(retFunction, d1, d2, c, Collections.singleton(zeroValue));










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);










 //register for value processing (2nd IDE phase)










 unbalancedRetSites.add(retSiteC);










 }










 }










 }



......@@ -500,7 +509,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 protected void propagateUnbalancedReturnFlow(N retSiteC, D targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) {










 protected void propagateUnbalancedReturnFlow(N retSiteC, D targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) { 










 propagate(zeroValue, retSiteC, targetVal, edgeFunction, relatedCallSite, true);










 }














......@@ -531,13 +540,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * Computes the return flow function for the given set of caller-side










	 * abstractions.










	 * @param retFunction The return flow function to compute










	 * @param d1 The abstraction at the beginning of the callee










	 * @param d2 The abstraction at the exit node in the callee










	 * @param callSite The call site










	 * @param callerSideDs The abstractions at the call site










	 * @return The set of caller-side abstractions at the return site










	 */










 protected Set<D> computeReturnFlowFunction










 (FlowFunction<D> retFunction, D d2, N callSite, Set<D> callerSideDs) {










 (FlowFunction<D> retFunction, D d1, D d2, N callSite, Set<D> callerSideDs) {










 return retFunction.computeTargets(d2);










 }














......@@ -620,7 +630,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 private void computeValues() { 










 //Phase II(i)










 logger.debug("Computing the final values for the edge functions");










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 //add caller seeds to initial seeds in an unbalanced problem










 Map<N, Set<D>> allSeeds = new HashMap<N, Set<D>>(initialSeeds);










 for(N unbalancedRetSite: unbalancedRetSites) {










 Set<D> seeds = allSeeds.get(unbalancedRetSite);










 if(seeds==null) {










 seeds = new HashSet<D>();










 allSeeds.put(unbalancedRetSite, seeds);










 }










 seeds.add(zeroValue);










 }










 //do processing










 for(Entry<N, Set<D>> seed: allSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 setVal(startPoint, val, valueLattice.bottomElement());



......@@ -731,7 +752,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }





















 private Set<Cell<N, D, EdgeFunction<V>>> endSummary(N sP, D d3) {










 protected Set<Cell<N, D, EdgeFunction<V>>> endSummary(N sP, D d3) {










 Table<N, D, EdgeFunction<V>> map = endSummary.get(sP, d3);










 if(map==null) return Collections.emptySet();










 return map.cellSet();



......@@ -749,7 +770,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 summaries.put(eP,d2,f);










 } 










 










 private Map<N, Set<D>> incoming(D d1, N sP) {










 protected Map<N, Set<D>> incoming(D d1, N sP) {










 synchronized (incoming) {










 Map<N, Set<D>> map = incoming.get(sP, d1);










 if(map==null) return Collections.emptyMap();



......@@ -857,7 +878,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.containsKey(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 initialSeeds.containsKey(n) || //our initial seeds are not necessarily method-start points but here they should be treated as such










 unbalancedRetSites.contains(n)) { //the same also for unbalanced return sites in an unbalanced problem










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......


import java.util.Map;importjava.util.Map;import java.util.Map.Entry;importjava.util.Map.Entry;import java.util.Set;importjava.util.Set;import java.util.concurrent.ConcurrentHashMap;importjava.util.concurrent.ConcurrentHashMap;import java.util.concurrent.LinkedBlockingQueue;importjava.util.concurrent.LinkedBlockingQueue;import java.util.concurrent.TimeUnit;importjava.util.concurrent.TimeUnit; //see CC 2010 paper by Naeem, Lhotak and Rodriguez//see CC 2010 paper by Naeem, Lhotak and Rodriguez @SynchronizedBy("consistent lock on field")@SynchronizedBy("consistent lock on field") protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();protectedfinalTable<N,D,Map<N,Set<D>>>incoming=HashBasedTable.create();  //stores the return sites (inside callers) to which we have unbalanced returns//stores the return sites (inside callers) to which we have unbalanced returns //if followReturnPastSeeds is enabled//if followReturnPastSeeds is enabled @SynchronizedBy("use of ConcurrentHashMap")@SynchronizedBy("use of ConcurrentHashMap") protected final Set<N> unbalancedRetSites;protectedfinalSet<N>unbalancedRetSites; @DontSynchronize("stateless")@DontSynchronize("stateless") protected final FlowFunctions<N, D, M> flowFunctions;protectedfinalFlowFunctions<N,D,M>flowFunctions; this.flowFunctions = flowFunctions;this.flowFunctions=flowFunctions; this.edgeFunctions = edgeFunctions;this.edgeFunctions=edgeFunctions; this.initialSeeds = tabulationProblem.initialSeeds();this.initialSeeds=tabulationProblem.initialSeeds(); this.unbalancedRetSites = Collections.newSetFromMap(new ConcurrentHashMap<N, Boolean>());this.unbalancedRetSites=Collections.newSetFromMap(newConcurrentHashMap<N,Boolean>()); this.valueLattice = tabulationProblem.joinLattice();this.valueLattice=tabulationProblem.joinLattice(); this.allTop = tabulationProblem.allTopFunction();this.allTop=tabulationProblem.allTopFunction(); this.jumpFn = new JumpFunctions<N,D,V>(allTop);this.jumpFn=newJumpFunctions<N,D,V>(allTop); FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);FlowFunction<D>retFunction=flowFunctions.getReturnFlowFunction(n,sCalledProcN,eP,retSiteN); flowFunctionConstructionCount++;flowFunctionConstructionCount++; //for each target value of the function//for each target value of the function for(D d5: computeReturnFlowFunction(retFunction, d4, n, Collections.singleton(d2))) {for(Dd5:computeReturnFlowFunction(retFunction,d4,n,Collections.singleton(d2))){ for(D d5: computeReturnFlowFunction(retFunction, d3, d4, n, Collections.singleton(d2))) {for(Dd5:computeReturnFlowFunction(retFunction,d3d3,, d4,n,Collections.singleton(d2))){ //update the caller-side summary function//update the caller-side summary function EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);EdgeFunction<V>f4=edgeFunctions.getCallEdgeFunction(n,d2,sCalledProcN,d3); EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);EdgeFunction<V>f5=edgeFunctions.getReturnEdgeFunction(n,sCalledProcN,eP,d4,retSiteN,d5); flowFunctionConstructionCount++;flowFunctionConstructionCount++; //for each incoming-call value//for each incoming-call value for(D d4: entry.getValue()) {for(Dd4:entry.getValue()){ Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, entry.getValue());Set<D>targets=computeReturnFlowFunction(retFunction,d2,c,entry.getValue()); Set<D> targets = computeReturnFlowFunction(retFunction, d1, d2, c, entry.getValue());Set<D>targets=computeReturnFlowFunction(retFunction,d1d1,, d2,c,entry.getValue()); //for each target value at the return site//for each target value at the return site //line 23//line 23 for(D d5: targets) {for(Dd5:targets){ for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {for(NretSiteC:icfg.getReturnSitesOfCallAt(c)){ FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);FlowFunction<D>retFunction=flowFunctions.getReturnFlowFunction(c,methodThatNeedsSummary,n,retSiteC); flowFunctionConstructionCount++;flowFunctionConstructionCount++; Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, Collections.singleton(zeroValue));Set<D>targets=computeReturnFlowFunction(retFunction,d2,c,Collections.singleton(zeroValue)); Set<D> targets = computeReturnFlowFunction(retFunction, d1, d2, c, Collections.singleton(zeroValue));Set<D>targets=computeReturnFlowFunction(retFunction,d1d1,, d2,c,Collections.singleton(zeroValue)); for(D d5: targets) {for(Dd5:targets){ EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);EdgeFunction<V>f5=edgeFunctions.getReturnEdgeFunction(c,icfg.getMethodOf(n),n,d2,retSiteC,d5); propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);propagateUnbalancedReturnFlow(retSiteC,d5,f.composeWith(f5),c); //register for value processing (2nd IDE phase)//register for value processing (2nd IDE phase) unbalancedRetSites.add(retSiteC);unbalancedRetSites.add(retSiteC); }} }} }} }} }}  protected void propagateUnbalancedReturnFlow(N retSiteC, D targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) {protectedvoidpropagateUnbalancedReturnFlow(NretSiteC,DtargetVal,EdgeFunction<V>edgeFunction,NrelatedCallSite){ protected void propagateUnbalancedReturnFlow(N retSiteC, D targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) { protectedvoidpropagateUnbalancedReturnFlow(NretSiteC,DtargetVal,EdgeFunction<V>edgeFunction,NrelatedCallSite){  propagate(zeroValue, retSiteC, targetVal, edgeFunction, relatedCallSite, true);propagate(zeroValue,retSiteC,targetVal,edgeFunction,relatedCallSite,true); }}	 * Computes the return flow function for the given set of caller-side	 * Computes the return flow function for the given set of caller-side	 * abstractions.	 * abstractions.	 * @param retFunction The return flow function to compute	 * @param retFunction The return flow function to compute	 * @param d1 The abstraction at the beginning of the callee	 * @param d1 The abstraction at the beginning of the callee	 * @param d2 The abstraction at the exit node in the callee	 * @param d2 The abstraction at the exit node in the callee	 * @param callSite The call site	 * @param callSite The call site	 * @param callerSideDs The abstractions at the call site	 * @param callerSideDs The abstractions at the call site	 * @return The set of caller-side abstractions at the return site	 * @return The set of caller-side abstractions at the return site	 */	 */ protected Set<D> computeReturnFlowFunctionprotectedSet<D>computeReturnFlowFunction (FlowFunction<D> retFunction, D d2, N callSite, Set<D> callerSideDs) {(FlowFunction<D>retFunction,Dd2,NcallSite,Set<D>callerSideDs){ (FlowFunction<D> retFunction, D d1, D d2, N callSite, Set<D> callerSideDs) {(FlowFunction<D>retFunction,Dd1d1,, DD d2,NcallSite,Set<D>callerSideDs){ return retFunction.computeTargets(d2);returnretFunction.computeTargets(d2); }} private void computeValues() { privatevoidcomputeValues(){ //Phase II(i)//Phase II(i) logger.debug("Computing the final values for the edge functions");logger.debug("Computing the final values for the edge functions"); for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {for(Entry<N,Set<D>>seed:initialSeeds.entrySet()){ //add caller seeds to initial seeds in an unbalanced problem//add caller seeds to initial seeds in an unbalanced problem Map<N, Set<D>> allSeeds = new HashMap<N, Set<D>>(initialSeeds);Map<N,Set<D>>allSeeds=newHashMap<N,Set<D>>(initialSeeds); for(N unbalancedRetSite: unbalancedRetSites) {for(NunbalancedRetSite:unbalancedRetSites){ Set<D> seeds = allSeeds.get(unbalancedRetSite);Set<D>seeds=allSeeds.get(unbalancedRetSite); if(seeds==null) {if(seeds==null){ seeds = new HashSet<D>();seeds=newHashSet<D>(); allSeeds.put(unbalancedRetSite, seeds);allSeeds.put(unbalancedRetSite,seeds); }} seeds.add(zeroValue);seeds.add(zeroValue); }} //do processing//do processing for(Entry<N, Set<D>> seed: allSeeds.entrySet()) {for(Entry<N,Set<D>>seed:allSeeds.entrySet()){ N startPoint = seed.getKey();NstartPoint=seed.getKey(); for(D val: seed.getValue()) {for(Dval:seed.getValue()){ setVal(startPoint, val, valueLattice.bottomElement());setVal(startPoint,val,valueLattice.bottomElement()); }} }} private Set<Cell<N, D, EdgeFunction<V>>> endSummary(N sP, D d3) {privateivateSet<Cell<N,D,EdgeFunction<V>>>endSummary(NsP,Dd3){ protected Set<Cell<N, D, EdgeFunction<V>>> endSummary(N sP, D d3) {protectedotectedSet<Cell<N,D,EdgeFunction<V>>>endSummary(NsP,Dd3){ Table<N, D, EdgeFunction<V>> map = endSummary.get(sP, d3);Table<N,D,EdgeFunction<V>>map=endSummary.get(sP,d3); if(map==null) return Collections.emptySet();if(map==null)returnCollections.emptySet(); return map.cellSet();returnmap.cellSet(); summaries.put(eP,d2,f);summaries.put(eP,d2,f); } }  private Map<N, Set<D>> incoming(D d1, N sP) {privateivateMap<N,Set<D>>incoming(Dd1,NsP){ protected Map<N, Set<D>> incoming(D d1, N sP) {protectedotectedMap<N,Set<D>>incoming(Dd1,NsP){ synchronized (incoming) {synchronized(incoming){ Map<N, Set<D>> map = incoming.get(sP, d1);Map<N,Set<D>>map=incoming.get(sP,d1); if(map==null) return Collections.emptyMap();if(map==null)returnCollections.emptyMap(); public void run() {publicvoidrun(){ N n = nAndD.getO1();Nn=nAndD.getO1(); if(icfg.isStartPoint(n) ||if(icfg.isStartPoint(n)|| initialSeeds.containsKey(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as suchinitialSeeds.containsKey(n)){//our initial seeds are not necessarily method-start points but here they should be treated as such initialSeeds.containsKey(n) || //our initial seeds are not necessarily method-start points but here they should be treated as suchinitialSeeds.containsKey(n)||//our initial seeds are not necessarily method-start points but here they should be treated as such unbalancedRetSites.contains(n)) { //the same also for unbalanced return sites in an unbalanced problemunbalancedRetSites.contains(n)){//the same also for unbalanced return sites in an unbalanced problem propagateValueAtStart(nAndD, n);propagateValueAtStart(nAndD,n); }} if(icfg.isCallStmt(n)) {if(icfg.isCallStmt(n)){








src/heros/util/SootThreadGroup.java



0 → 100644







View file @ 78958ccf













package heros.util;





















public class SootThreadGroup extends ThreadGroup {





















 private Thread startThread;





















 public SootThreadGroup() {










 super("Soot Threadgroup");










 if (Thread.currentThread().getThreadGroup() instanceof SootThreadGroup) {










 SootThreadGroup group = (SootThreadGroup) Thread.currentThread().getThreadGroup();










 startThread = group.getStarterThread();










 } else {










 startThread = Thread.currentThread();










 }










 }





















 public Thread getStarterThread() {










 return startThread;










 }










}












src/heros/util/SootThreadGroup.java



0 → 100644







View file @ 78958ccf








src/heros/util/SootThreadGroup.java



0 → 100644









View file @ 78958ccf


78958ccf










package heros.util;





















public class SootThreadGroup extends ThreadGroup {





















 private Thread startThread;





















 public SootThreadGroup() {










 super("Soot Threadgroup");










 if (Thread.currentThread().getThreadGroup() instanceof SootThreadGroup) {










 SootThreadGroup group = (SootThreadGroup) Thread.currentThread().getThreadGroup();










 startThread = group.getStarterThread();










 } else {










 startThread = Thread.currentThread();










 }










 }





















 public Thread getStarterThread() {










 return startThread;










 }










}













package heros.util;





















public class SootThreadGroup extends ThreadGroup {





















 private Thread startThread;





















 public SootThreadGroup() {










 super("Soot Threadgroup");










 if (Thread.currentThread().getThreadGroup() instanceof SootThreadGroup) {










 SootThreadGroup group = (SootThreadGroup) Thread.currentThread().getThreadGroup();










 startThread = group.getStarterThread();










 } else {










 startThread = Thread.currentThread();










 }










 }





















 public Thread getStarterThread() {










 return startThread;










 }










}


package heros.util;packageheros.util;public class SootThreadGroup extends ThreadGroup {publicclassSootThreadGroupextendsThreadGroup{ private Thread startThread;privateThreadstartThread; public SootThreadGroup() {publicSootThreadGroup(){ super("Soot Threadgroup");super("Soot Threadgroup"); if (Thread.currentThread().getThreadGroup() instanceof SootThreadGroup) {if(Thread.currentThread().getThreadGroup()instanceofSootThreadGroup){ SootThreadGroup group = (SootThreadGroup) Thread.currentThread().getThreadGroup();SootThreadGroupgroup=(SootThreadGroup)Thread.currentThread().getThreadGroup(); startThread = group.getStarterThread();startThread=group.getStarterThread(); } else {}else{ startThread = Thread.currentThread();startThread=Thread.currentThread(); }} }} public Thread getStarterThread() {publicThreadgetStarterThread(){ return startThread;returnstartThread; }}}}









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






