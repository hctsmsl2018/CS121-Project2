



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

3e910732















Commit
3e910732


authored
Jul 05, 2013
by


Eric Bodden



Browse files




initial draft of BiDi Solver







parent
b6e78a8e













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java



0 â†’ 100644







View file @ 3e910732













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;





















import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;





















 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 super(new AugmentedTabulationProblem<N,D,M,I>(forwardProblem));










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 }










 










 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 private D getAbstraction() {










 return abstraction;










 }










 










 private N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 return "[["+abstraction+" from "+source+"]]";










 }










 }










 










 static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>> implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt<N, D>(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallFlowFunction(callStmt, destinationMethod));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(N callSite, N returnSite) {










 return null;










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);





















 //optimization










 if(origTargets.equals(Collections.singleton(originalAbstraction))) return Collections.singleton(source); 










 










 Set<AbstractionWithSourceStmt<N, D>> res = new HashSet<AbstractionWithSourceStmt<N,D>>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt<N,D>(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 public Set<N> initialSeeds() {










 return delegate.initialSeeds();










 }





















 public AbstractionWithSourceStmt<N, D> zeroValue() {










 return ZERO;










 }





















 }










 










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

3e910732















Commit
3e910732


authored
Jul 05, 2013
by


Eric Bodden



Browse files




initial draft of BiDi Solver







parent
b6e78a8e













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java



0 â†’ 100644







View file @ 3e910732













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;





















import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;





















 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 super(new AugmentedTabulationProblem<N,D,M,I>(forwardProblem));










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 }










 










 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 private D getAbstraction() {










 return abstraction;










 }










 










 private N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 return "[["+abstraction+" from "+source+"]]";










 }










 }










 










 static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>> implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt<N, D>(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallFlowFunction(callStmt, destinationMethod));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(N callSite, N returnSite) {










 return null;










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);





















 //optimization










 if(origTargets.equals(Collections.singleton(originalAbstraction))) return Collections.singleton(source); 










 










 Set<AbstractionWithSourceStmt<N, D>> res = new HashSet<AbstractionWithSourceStmt<N,D>>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt<N,D>(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 public Set<N> initialSeeds() {










 return delegate.initialSeeds();










 }





















 public AbstractionWithSourceStmt<N, D> zeroValue() {










 return ZERO;










 }





















 }










 










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

3e910732







Open sidebar



Joshua Garcia heros
Commits

3e910732




Open sidebar

Joshua Garcia heros
Commits

3e910732


Joshua GarciaherosherosCommits
3e910732








Commit
3e910732


authored
Jul 05, 2013
by


Eric Bodden



Browse files




initial draft of BiDi Solver







parent
b6e78a8e













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java



0 â†’ 100644







View file @ 3e910732













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;





















import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;





















 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 super(new AugmentedTabulationProblem<N,D,M,I>(forwardProblem));










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 }










 










 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 private D getAbstraction() {










 return abstraction;










 }










 










 private N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 return "[["+abstraction+" from "+source+"]]";










 }










 }










 










 static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>> implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt<N, D>(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallFlowFunction(callStmt, destinationMethod));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(N callSite, N returnSite) {










 return null;










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);





















 //optimization










 if(origTargets.equals(Collections.singleton(originalAbstraction))) return Collections.singleton(source); 










 










 Set<AbstractionWithSourceStmt<N, D>> res = new HashSet<AbstractionWithSourceStmt<N,D>>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt<N,D>(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 public Set<N> initialSeeds() {










 return delegate.initialSeeds();










 }





















 public AbstractionWithSourceStmt<N, D> zeroValue() {










 return ZERO;










 }





















 }










 










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
3e910732


authored
Jul 05, 2013
by


Eric Bodden



Browse files




initial draft of BiDi Solver







parent
b6e78a8e













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java



0 â†’ 100644







View file @ 3e910732













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;





















import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;





















 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 super(new AugmentedTabulationProblem<N,D,M,I>(forwardProblem));










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 }










 










 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 private D getAbstraction() {










 return abstraction;










 }










 










 private N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 return "[["+abstraction+" from "+source+"]]";










 }










 }










 










 static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>> implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt<N, D>(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallFlowFunction(callStmt, destinationMethod));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(N callSite, N returnSite) {










 return null;










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);





















 //optimization










 if(origTargets.equals(Collections.singleton(originalAbstraction))) return Collections.singleton(source); 










 










 Set<AbstractionWithSourceStmt<N, D>> res = new HashSet<AbstractionWithSourceStmt<N,D>>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt<N,D>(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 public Set<N> initialSeeds() {










 return delegate.initialSeeds();










 }





















 public AbstractionWithSourceStmt<N, D> zeroValue() {










 return ZERO;










 }





















 }










 










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
3e910732


authored
Jul 05, 2013
by


Eric Bodden



Browse files



Commit
3e910732


authored
Jul 05, 2013
by


Eric Bodden

3e910732authoredbyEric Bodden

initial draft of BiDi Solver






parent
b6e78a8e
















parent
b6e78a8e





parent












Changes
1
1


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/solver/BiDiIFDSSolver.java



0 â†’ 100644







View file @ 3e910732













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;





















import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;





















 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 super(new AugmentedTabulationProblem<N,D,M,I>(forwardProblem));










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 }










 










 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 private D getAbstraction() {










 return abstraction;










 }










 










 private N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 return "[["+abstraction+" from "+source+"]]";










 }










 }










 










 static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>> implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt<N, D>(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallFlowFunction(callStmt, destinationMethod));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(N callSite, N returnSite) {










 return null;










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);





















 //optimization










 if(origTargets.equals(Collections.singleton(originalAbstraction))) return Collections.singleton(source); 










 










 Set<AbstractionWithSourceStmt<N, D>> res = new HashSet<AbstractionWithSourceStmt<N,D>>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt<N,D>(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 public Set<N> initialSeeds() {










 return delegate.initialSeeds();










 }





















 public AbstractionWithSourceStmt<N, D> zeroValue() {










 return ZERO;










 }





















 }










 










}














src/heros/solver/BiDiIFDSSolver.java



0 â†’ 100644







View file @ 3e910732













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;





















import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;





















 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 super(new AugmentedTabulationProblem<N,D,M,I>(forwardProblem));










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 }










 










 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 private D getAbstraction() {










 return abstraction;










 }










 










 private N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 return "[["+abstraction+" from "+source+"]]";










 }










 }










 










 static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>> implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt<N, D>(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallFlowFunction(callStmt, destinationMethod));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(N callSite, N returnSite) {










 return null;










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);





















 //optimization










 if(origTargets.equals(Collections.singleton(originalAbstraction))) return Collections.singleton(source); 










 










 Set<AbstractionWithSourceStmt<N, D>> res = new HashSet<AbstractionWithSourceStmt<N,D>>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt<N,D>(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 public Set<N> initialSeeds() {










 return delegate.initialSeeds();










 }





















 public AbstractionWithSourceStmt<N, D> zeroValue() {










 return ZERO;










 }





















 }










 










}












src/heros/solver/BiDiIFDSSolver.java



0 â†’ 100644







View file @ 3e910732








src/heros/solver/BiDiIFDSSolver.java



0 â†’ 100644









View file @ 3e910732


3e910732










/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;





















import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;





















 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 super(new AugmentedTabulationProblem<N,D,M,I>(forwardProblem));










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 }










 










 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 private D getAbstraction() {










 return abstraction;










 }










 










 private N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 return "[["+abstraction+" from "+source+"]]";










 }










 }










 










 static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>> implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt<N, D>(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallFlowFunction(callStmt, destinationMethod));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(N callSite, N returnSite) {










 return null;










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);





















 //optimization










 if(origTargets.equals(Collections.singleton(originalAbstraction))) return Collections.singleton(source); 










 










 Set<AbstractionWithSourceStmt<N, D>> res = new HashSet<AbstractionWithSourceStmt<N,D>>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt<N,D>(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 public Set<N> initialSeeds() {










 return delegate.initialSeeds();










 }





















 public AbstractionWithSourceStmt<N, D> zeroValue() {










 return ZERO;










 }





















 }










 










}













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;





















import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;





















 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 super(new AugmentedTabulationProblem<N,D,M,I>(forwardProblem));










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 }










 










 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 private D getAbstraction() {










 return abstraction;










 }










 










 private N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 return "[["+abstraction+" from "+source+"]]";










 }










 }










 










 static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>> implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt<N, D>(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallFlowFunction(callStmt, destinationMethod));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(N callSite, N returnSite) {










 return null;










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);





















 //optimization










 if(origTargets.equals(Collections.singleton(originalAbstraction))) return Collections.singleton(source); 










 










 Set<AbstractionWithSourceStmt<N, D>> res = new HashSet<AbstractionWithSourceStmt<N,D>>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt<N,D>(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 public Set<N> initialSeeds() {










 return delegate.initialSeeds();










 }





















 public AbstractionWithSourceStmt<N, D> zeroValue() {










 return ZERO;










 }





















 }










 










}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2012 Eric Bodden. * Copyright (c) 2012 Eric Bodden. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Eric Bodden - initial API and implementation *     Eric Bodden - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.solver;packageheros.solver;import java.util.Collections;importjava.util.Collections;import java.util.HashSet;importjava.util.HashSet;import java.util.Set;importjava.util.Set;import heros.FlowFunction;importheros.FlowFunction;import heros.FlowFunctions;importheros.FlowFunctions;import heros.IFDSTabulationProblem;importheros.IFDSTabulationProblem;import heros.InterproceduralCFG;importheros.InterproceduralCFG;public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {publicclassBiDiIFDSSolver<N,D,M,IextendsInterproceduralCFG<N,M>>extendsIFDSSolver<N,BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I>{ private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;privatefinalIFDSTabulationProblem<N,AbstractionWithSourceStmt<N,D>,M,I>backwardProblem; public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {publicBiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I>forwardProblem,IFDSTabulationProblem<N,D,M,I>backwardProblem){ super(new AugmentedTabulationProblem<N,D,M,I>(forwardProblem));super(newAugmentedTabulationProblem<N,D,M,I>(forwardProblem)); this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);this.backwardProblem=newAugmentedTabulationProblem<N,D,M,I>(backwardProblem); if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {if(!forwardProblem.followReturnsPastSeeds()||!backwardProblem.followReturnsPastSeeds()){ throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); thrownewIllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); }} }}  public static class AbstractionWithSourceStmt<N,D> {publicstaticclassAbstractionWithSourceStmt<N,D>{ protected final D abstraction;protectedfinalDabstraction; protected final N source;protectedfinalNsource;  private AbstractionWithSourceStmt(D abstraction, N source) {privateAbstractionWithSourceStmt(Dabstraction,Nsource){ this.abstraction = abstraction;this.abstraction=abstraction; this.source = source;this.source=source; }} private D getAbstraction() {privateDgetAbstraction(){ return abstraction;returnabstraction; }}  private N getSourceStmt() {privateNgetSourceStmt(){ return source;returnsource; } }  @Override@Override public String toString() {publicStringtoString(){ return "[["+abstraction+" from "+source+"]]";return"[["+abstraction+" from "+source+"]]"; }} }}  static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>> implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {staticclassAugmentedTabulationProblem<N,D,M,IextendsInterproceduralCFG<N,M>>implementsIFDSTabulationProblem<N,BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I>{ private final IFDSTabulationProblem<N,D,M,I> delegate;privatefinalIFDSTabulationProblem<N,D,M,I>delegate; private final AbstractionWithSourceStmt<N, D> ZERO;privatefinalAbstractionWithSourceStmt<N,D>ZERO; private final FlowFunctions<N, D, M> originalFunctions;privatefinalFlowFunctions<N,D,M>originalFunctions;  public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {publicAugmentedTabulationProblem(IFDSTabulationProblem<N,D,M,I>delegate){ this.delegate = delegate;this.delegate=delegate; originalFunctions = this.delegate.flowFunctions();originalFunctions=this.delegate.flowFunctions(); ZERO = new AbstractionWithSourceStmt<N, D>(delegate.zeroValue(), null);ZERO=newAbstractionWithSourceStmt<N,D>(delegate.zeroValue(),null); }} @Override@Override public FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M> flowFunctions() {publicFlowFunctions<N,AbstractionWithSourceStmt<N,D>,M>flowFunctions(){ return new FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M>() {returnnewFlowFunctions<N,AbstractionWithSourceStmt<N,D>,M>(){ @Override@Override public FlowFunction<AbstractionWithSourceStmt<N, D>> getNormalFlowFunction(final N curr, final N succ) {publicFlowFunction<AbstractionWithSourceStmt<N,D>>getNormalFlowFunction(finalNcurr,finalNsucc){ return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {returnnewFlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>(){ @Override@Override public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {publicSet<AbstractionWithSourceStmt<N,D>>computeTargets(AbstractionWithSourceStmt<N,D>source){ return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));returncopyOverSourceStmts(source,originalFunctions.getNormalFlowFunction(curr,succ)); }} };}; }} @Override@Override public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallFlowFunction(final N callStmt, final M destinationMethod) {publicFlowFunction<AbstractionWithSourceStmt<N,D>>getCallFlowFunction(finalNcallStmt,finalMdestinationMethod){ return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {returnnewFlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>(){ @Override@Override public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {publicSet<AbstractionWithSourceStmt<N,D>>computeTargets(AbstractionWithSourceStmt<N,D>source){ return copyOverSourceStmts(source, originalFunctions.getCallFlowFunction(callStmt, destinationMethod));returncopyOverSourceStmts(source,originalFunctions.getCallFlowFunction(callStmt,destinationMethod)); }} };}; }} @Override@Override public FlowFunction<AbstractionWithSourceStmt<N, D>> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {publicFlowFunction<AbstractionWithSourceStmt<N,D>>getReturnFlowFunction(finalNcallSite,finalMcalleeMethod,finalNexitStmt,finalNreturnSite){ return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {returnnewFlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>(){ @Override@Override public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {publicSet<AbstractionWithSourceStmt<N,D>>computeTargets(AbstractionWithSourceStmt<N,D>source){ return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));returncopyOverSourceStmts(source,originalFunctions.getReturnFlowFunction(callSite,calleeMethod,exitStmt,returnSite)); }} };}; }} @Override@Override public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(N callSite, N returnSite) {publicFlowFunction<AbstractionWithSourceStmt<N,D>>getCallToReturnFlowFunction(NcallSite,NreturnSite){ return null;returnnull; }}  private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {privateSet<AbstractionWithSourceStmt<N,D>>copyOverSourceStmts(AbstractionWithSourceStmt<N,D>source,FlowFunction<D>originalFunction){ D originalAbstraction = source.getAbstraction();DoriginalAbstraction=source.getAbstraction(); Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);Set<D>origTargets=originalFunction.computeTargets(originalAbstraction); //optimization//optimization if(origTargets.equals(Collections.singleton(originalAbstraction))) return Collections.singleton(source); if(origTargets.equals(Collections.singleton(originalAbstraction)))returnCollections.singleton(source);  Set<AbstractionWithSourceStmt<N, D>> res = new HashSet<AbstractionWithSourceStmt<N,D>>();Set<AbstractionWithSourceStmt<N,D>>res=newHashSet<AbstractionWithSourceStmt<N,D>>(); for(D d: origTargets) {for(Dd:origTargets){ res.add(new AbstractionWithSourceStmt<N,D>(d,source.getSourceStmt()));res.add(newAbstractionWithSourceStmt<N,D>(d,source.getSourceStmt())); }} return res;returnres; }} };}; }}  //delegate methods follow//delegate methods follow public boolean followReturnsPastSeeds() {publicbooleanfollowReturnsPastSeeds(){ return delegate.followReturnsPastSeeds();returndelegate.followReturnsPastSeeds(); }} public boolean autoAddZero() {publicbooleanautoAddZero(){ return delegate.autoAddZero();returndelegate.autoAddZero(); }} public int numThreads() {publicintnumThreads(){ return delegate.numThreads();returndelegate.numThreads(); }} public boolean computeValues() {publicbooleancomputeValues(){ return delegate.computeValues();returndelegate.computeValues(); }} public I interproceduralCFG() {publicIinterproceduralCFG(){ return delegate.interproceduralCFG();returndelegate.interproceduralCFG(); }} public Set<N> initialSeeds() {publicSet<N>initialSeeds(){ return delegate.initialSeeds();returndelegate.initialSeeds(); }} public AbstractionWithSourceStmt<N, D> zeroValue() {publicAbstractionWithSourceStmt<N,D>zeroValue(){ return ZERO;returnZERO; }} }} }}









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






