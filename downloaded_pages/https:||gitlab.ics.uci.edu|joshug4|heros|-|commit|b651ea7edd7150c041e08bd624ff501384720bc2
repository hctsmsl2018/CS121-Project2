



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

b651ea7e















Commit
b651ea7e


authored
Jul 08, 2015
by


Johannes Lerch



Browse files




debugger







parent
3b510b6b













Changes
12




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/AccessPathHandler.java








View file @ b651ea7e






......@@ -19,10 +19,12 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {




















 private AccessPath<Field> accessPath;










 private Resolver<Field, Fact, Stmt, Method> resolver;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.accessPath = accessPath;










 this.resolver = resolver;










 this.debugger = debugger;










 }





















 public boolean canRead(Field field) {



......@@ -42,7 +44,7 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {









 }










 










 public ConstrainedFact<Field, Fact, Stmt, Method> generateWithEmptyAccessPath(Fact fact, ZeroHandler<Field> zeroHandler) {










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler)));










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler, debugger)));










 }










 










 public ResultBuilder<Field, Fact, Stmt, Method> prepend(final Field field) {



......














src/heros/fieldsens/BiDiFieldSensitiveIFDSSolver.java








View file @ b651ea7e






......@@ -31,7 +31,7 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 public BiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> forwardProblem,










 IFDSTabulationProblem<Stmt, Field, Fact, Method, I> backwardProblem, 










 FactMergeHandler<Fact> factHandler, 










 Debugger<Field, Fact, Stmt, Method, I> debugger,










 Debugger<Field, Fact, Stmt, Method> debugger,










 Scheduler scheduler) {










 










 this.scheduler = scheduler;



......@@ -46,11 +46,11 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 }





















 private FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I> createSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> problem, 










 FactMergeHandler<Fact> factHandler, Debugger<Field, Fact, Stmt, Method, I> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 FactMergeHandler<Fact> factHandler, final Debugger<Field, Fact, Stmt, Method> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 return new FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I>(problem, factHandler, debugger, scheduler) {










 @Override










 protected MethodAnalyzer<Field, Fact, Stmt, Method> createMethodAnalyzer(Method method) {










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer);










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer, debugger);










 }










 };










 }



......














src/heros/fieldsens/CallEdgeResolver.java








View file @ b651ea7e






......@@ -17,12 +17,12 @@ import com.google.common.collect.Lists;




















class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> {





















 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 this(analyzer, null);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(analyzer, debugger, null);










 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 }





















 @Override



......@@ -60,7 +60,7 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field









 










 @Override










 public String toString() {










 return "";










 return "<"+analyzer.getAccessPath()+":"+analyzer.getMethod()+">";










 }










 










 @Override



......














src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ b651ea7e






......@@ -23,15 +23,15 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), null);










 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), debugger, null);










 this.factMergeHandler = factMergeHandler;










 propagated=false;










 }










 










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, Debugger<Field, Fact, Stmt, Method> debugger, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.sourceFact = sourceFact;



......@@ -78,7 +78,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, this);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, debugger, this);










 }





















 @Override



......@@ -88,7 +88,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver




















 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+joinStmt+">";










 return "<"+resolvedAccPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 @Override



......














src/heros/fieldsens/Debugger.java








View file @ b651ea7e






......@@ -11,18 +11,23 @@









package heros.fieldsens;





















import heros.InterproceduralCFG;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> {










public interface Debugger<Field, Fact, Stmt, Method> {





















 public abstract void setICFG(I icfg);










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg);





















 public abstract void initialSeed(Stmt stmt);










 public void initialSeed(Stmt stmt);










 










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);





















 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver);










 










 










 public static class NullDebugger <Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










 public static class NullDebugger <Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 










 }














......@@ -30,6 +35,18 @@ public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 public void initialSeed(Stmt stmt) {










 










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 // TODO Auto-generated method stub










 










 }










 










 }










}




\ No newline at end of file














src/heros/fieldsens/FieldSensitiveIFDSSolver.java








View file @ b651ea7e






......@@ -33,13 +33,13 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 private IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem;










 protected Context<FieldRef, D, N,M> context;










 private Debugger<FieldRef, D, N, M, I> debugger;










 private Debugger<FieldRef, D, N, M> debugger;










 private Scheduler scheduler;





















 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M> debugger, Scheduler scheduler) {










 this.tabulationProblem = tabulationProblem;










 this.scheduler = scheduler;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M>() : debugger;










 this.debugger.setICFG(tabulationProblem.interproceduralCFG());










 context = initContext(tabulationProblem, factHandler);










 submitInitialSeeds();



......@@ -57,7 +57,7 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur









 }










 










 protected MethodAnalyzer<FieldRef, D, N, M> createMethodAnalyzer(M method) {










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context);










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context, debugger);










 }





















 /**



......














src/heros/fieldsens/MethodAnalyzerImpl.java








View file @ b651ea7e






......@@ -22,14 +22,16 @@ public class MethodAnalyzerImpl<Field,Fact, Stmt, Method>









 new DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Fact key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context) {










 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.debugger = debugger;










 }










 










 @Override



......














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ b651ea7e






......@@ -32,7 +32,7 @@ import com.google.common.collect.Lists;









import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {










public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {





















 private static final Logger logger = LoggerFactory.getLogger(PerAccessPathMethodAnalyzer.class);










 private Fact sourceFact;



......@@ -44,23 +44,25 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private CallEdgeResolver<Field, Fact, Stmt, Method> callEdgeResolver;










 private PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context) {










 this(method, sourceFact, context, new AccessPath<Field>(), null);










 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(method, sourceFact, context, debugger, new AccessPath<Field>(), null);










 }










 










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 this.debugger = debugger;










 if(method == null)










 throw new IllegalArgumentException("Method must be not null");










 this.parent = parent;



......@@ -69,16 +71,16 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 this.accessPath = accPath;










 this.context = context;










 if(parent == null) {










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this);










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler, debugger) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger);










 }










 else {










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, parent.callEdgeResolver);










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger, parent.callEdgeResolver);










 }










 log("initialized");










 }










 










 public PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createWithAccessPath(AccessPath<Field> accPath) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, accPath, this);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, debugger, accPath, this);










 }










 










 WrappedFact<Field, Fact, Stmt, Method> wrappedSource() {



......@@ -121,6 +123,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 log("Edge to "+factAtStmt);










 reachableStatements.put(factAtStmt, factAtStmt);










 context.scheduler.schedule(new Job(factAtStmt));










 debugger.edgeTo(this, factAtStmt);










 }










 }














......@@ -137,7 +140,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Method> calledMethods = context.icfg.getCalleesOfCallAt(factAtStmt.getStatement());










 for (Method calledMethod : calledMethods) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallFlowFunction(factAtStmt.getStatement(), calledMethod);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 MethodAnalyzer<Field, Fact, Stmt, Method> analyzer = context.getAnalyzer(calledMethod);



......@@ -162,7 +165,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(callSite);










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(callSite, method, factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 context.getAnalyzer(context.icfg.getMethodOf(callSite)).addUnbalancedReturnFlow(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()), callSite);



......@@ -174,7 +177,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 //instead we thus call the return flow function will a null caller










 if(callSites.isEmpty()) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(null, method, factAtStmt.getStatement(), null);










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 }










 }










 }



......@@ -194,7 +197,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(factAtStmt.getStatement());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallToReturnFlowFunction(factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()));



......@@ -223,7 +226,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private void processNormalNonJoiningFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 final List<Stmt> successors = context.icfg.getSuccsOf(factAtStmt.getStatement());










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getNormalFlowFunction(factAtStmt.getStatement());










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (final ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 if(targetFact.getConstraint() == null)










 scheduleEdgeTo(successors, targetFact.getFact());



......@@ -256,7 +259,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(incEdge.getCallSite());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(incEdge.getCallSite(), method, exitFact.getStatement(), returnSite);










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver()));










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targets) {










 context.factHandler.restoreCallingContext(targetFact.getFact().getFact(), incEdge.getCallerCallSiteFact().getFact());










 //TODO handle constraint



......@@ -314,6 +317,10 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 public CallEdgeResolver<Field, Fact, Stmt, Method> getCallEdgeResolver() {










 return callEdgeResolver;










 }





















 public Method getMethod() {










 return method;










 }










 










//	public void debugReachables() {










//		JsonDocument root = new JsonDocument();



......














src/heros/fieldsens/ResolverTemplate.java








View file @ b651ea7e






......@@ -26,11 +26,14 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();










 protected Debugger<Field, Fact, Stmt, Method> debugger;





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent) {










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer);










 this.parent = parent;










 this.debugger = debugger;










 debugger.newResolver(analyzer, this);










 }










 










 protected boolean isLocked() {



......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ b651ea7e






......@@ -25,15 +25,15 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(factMergeHandler, analyzer, returnSite, null, new AccessPath<Field>(), null);










 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, returnSite, null, debugger, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated = false;










 }





















 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 Fact sourceFact, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.sourceFact = sourceFact;



......@@ -43,7 +43,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 










 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+returnSite+">";










 return "<"+resolvedAccPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 @Override



......@@ -85,7 +85,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, newAccPath, this);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, debugger, newAccPath, this);










 }










 










 public Stmt getReturnSite() {



......














src/heros/fieldsens/SourceStmtAnnotatedMethodAnalyzer.java








View file @ b651ea7e






......@@ -21,18 +21,21 @@ public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>









 private Method method;










 private DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {





















 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Key<Fact, Stmt> key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Synchronizer<Stmt> synchronizer;










 private Debugger<Field, Fact, Stmt, Method> debugger;










 










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer) {










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.synchronizer = synchronizer;










 this.debugger = debugger;










 }










 










 @Override



......














src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ b651ea7e






......@@ -16,8 +16,8 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes




















 private ZeroHandler<Field> zeroHandler;





















 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler) {










 super(analyzer);










 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler, Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer, debugger);










 this.zeroHandler = zeroHandler;










 }














......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

b651ea7e















Commit
b651ea7e


authored
Jul 08, 2015
by


Johannes Lerch



Browse files




debugger







parent
3b510b6b













Changes
12




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/AccessPathHandler.java








View file @ b651ea7e






......@@ -19,10 +19,12 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {




















 private AccessPath<Field> accessPath;










 private Resolver<Field, Fact, Stmt, Method> resolver;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.accessPath = accessPath;










 this.resolver = resolver;










 this.debugger = debugger;










 }





















 public boolean canRead(Field field) {



......@@ -42,7 +44,7 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {









 }










 










 public ConstrainedFact<Field, Fact, Stmt, Method> generateWithEmptyAccessPath(Fact fact, ZeroHandler<Field> zeroHandler) {










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler)));










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler, debugger)));










 }










 










 public ResultBuilder<Field, Fact, Stmt, Method> prepend(final Field field) {



......














src/heros/fieldsens/BiDiFieldSensitiveIFDSSolver.java








View file @ b651ea7e






......@@ -31,7 +31,7 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 public BiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> forwardProblem,










 IFDSTabulationProblem<Stmt, Field, Fact, Method, I> backwardProblem, 










 FactMergeHandler<Fact> factHandler, 










 Debugger<Field, Fact, Stmt, Method, I> debugger,










 Debugger<Field, Fact, Stmt, Method> debugger,










 Scheduler scheduler) {










 










 this.scheduler = scheduler;



......@@ -46,11 +46,11 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 }





















 private FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I> createSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> problem, 










 FactMergeHandler<Fact> factHandler, Debugger<Field, Fact, Stmt, Method, I> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 FactMergeHandler<Fact> factHandler, final Debugger<Field, Fact, Stmt, Method> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 return new FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I>(problem, factHandler, debugger, scheduler) {










 @Override










 protected MethodAnalyzer<Field, Fact, Stmt, Method> createMethodAnalyzer(Method method) {










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer);










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer, debugger);










 }










 };










 }



......














src/heros/fieldsens/CallEdgeResolver.java








View file @ b651ea7e






......@@ -17,12 +17,12 @@ import com.google.common.collect.Lists;




















class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> {





















 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 this(analyzer, null);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(analyzer, debugger, null);










 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 }





















 @Override



......@@ -60,7 +60,7 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field









 










 @Override










 public String toString() {










 return "";










 return "<"+analyzer.getAccessPath()+":"+analyzer.getMethod()+">";










 }










 










 @Override



......














src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ b651ea7e






......@@ -23,15 +23,15 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), null);










 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), debugger, null);










 this.factMergeHandler = factMergeHandler;










 propagated=false;










 }










 










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, Debugger<Field, Fact, Stmt, Method> debugger, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.sourceFact = sourceFact;



......@@ -78,7 +78,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, this);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, debugger, this);










 }





















 @Override



......@@ -88,7 +88,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver




















 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+joinStmt+">";










 return "<"+resolvedAccPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 @Override



......














src/heros/fieldsens/Debugger.java








View file @ b651ea7e






......@@ -11,18 +11,23 @@









package heros.fieldsens;





















import heros.InterproceduralCFG;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> {










public interface Debugger<Field, Fact, Stmt, Method> {





















 public abstract void setICFG(I icfg);










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg);





















 public abstract void initialSeed(Stmt stmt);










 public void initialSeed(Stmt stmt);










 










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);





















 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver);










 










 










 public static class NullDebugger <Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










 public static class NullDebugger <Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 










 }














......@@ -30,6 +35,18 @@ public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 public void initialSeed(Stmt stmt) {










 










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 // TODO Auto-generated method stub










 










 }










 










 }










}




\ No newline at end of file














src/heros/fieldsens/FieldSensitiveIFDSSolver.java








View file @ b651ea7e






......@@ -33,13 +33,13 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 private IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem;










 protected Context<FieldRef, D, N,M> context;










 private Debugger<FieldRef, D, N, M, I> debugger;










 private Debugger<FieldRef, D, N, M> debugger;










 private Scheduler scheduler;





















 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M> debugger, Scheduler scheduler) {










 this.tabulationProblem = tabulationProblem;










 this.scheduler = scheduler;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M>() : debugger;










 this.debugger.setICFG(tabulationProblem.interproceduralCFG());










 context = initContext(tabulationProblem, factHandler);










 submitInitialSeeds();



......@@ -57,7 +57,7 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur









 }










 










 protected MethodAnalyzer<FieldRef, D, N, M> createMethodAnalyzer(M method) {










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context);










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context, debugger);










 }





















 /**



......














src/heros/fieldsens/MethodAnalyzerImpl.java








View file @ b651ea7e






......@@ -22,14 +22,16 @@ public class MethodAnalyzerImpl<Field,Fact, Stmt, Method>









 new DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Fact key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context) {










 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.debugger = debugger;










 }










 










 @Override



......














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ b651ea7e






......@@ -32,7 +32,7 @@ import com.google.common.collect.Lists;









import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {










public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {





















 private static final Logger logger = LoggerFactory.getLogger(PerAccessPathMethodAnalyzer.class);










 private Fact sourceFact;



......@@ -44,23 +44,25 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private CallEdgeResolver<Field, Fact, Stmt, Method> callEdgeResolver;










 private PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context) {










 this(method, sourceFact, context, new AccessPath<Field>(), null);










 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(method, sourceFact, context, debugger, new AccessPath<Field>(), null);










 }










 










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 this.debugger = debugger;










 if(method == null)










 throw new IllegalArgumentException("Method must be not null");










 this.parent = parent;



......@@ -69,16 +71,16 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 this.accessPath = accPath;










 this.context = context;










 if(parent == null) {










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this);










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler, debugger) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger);










 }










 else {










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, parent.callEdgeResolver);










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger, parent.callEdgeResolver);










 }










 log("initialized");










 }










 










 public PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createWithAccessPath(AccessPath<Field> accPath) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, accPath, this);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, debugger, accPath, this);










 }










 










 WrappedFact<Field, Fact, Stmt, Method> wrappedSource() {



......@@ -121,6 +123,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 log("Edge to "+factAtStmt);










 reachableStatements.put(factAtStmt, factAtStmt);










 context.scheduler.schedule(new Job(factAtStmt));










 debugger.edgeTo(this, factAtStmt);










 }










 }














......@@ -137,7 +140,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Method> calledMethods = context.icfg.getCalleesOfCallAt(factAtStmt.getStatement());










 for (Method calledMethod : calledMethods) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallFlowFunction(factAtStmt.getStatement(), calledMethod);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 MethodAnalyzer<Field, Fact, Stmt, Method> analyzer = context.getAnalyzer(calledMethod);



......@@ -162,7 +165,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(callSite);










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(callSite, method, factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 context.getAnalyzer(context.icfg.getMethodOf(callSite)).addUnbalancedReturnFlow(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()), callSite);



......@@ -174,7 +177,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 //instead we thus call the return flow function will a null caller










 if(callSites.isEmpty()) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(null, method, factAtStmt.getStatement(), null);










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 }










 }










 }



......@@ -194,7 +197,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(factAtStmt.getStatement());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallToReturnFlowFunction(factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()));



......@@ -223,7 +226,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private void processNormalNonJoiningFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 final List<Stmt> successors = context.icfg.getSuccsOf(factAtStmt.getStatement());










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getNormalFlowFunction(factAtStmt.getStatement());










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (final ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 if(targetFact.getConstraint() == null)










 scheduleEdgeTo(successors, targetFact.getFact());



......@@ -256,7 +259,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(incEdge.getCallSite());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(incEdge.getCallSite(), method, exitFact.getStatement(), returnSite);










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver()));










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targets) {










 context.factHandler.restoreCallingContext(targetFact.getFact().getFact(), incEdge.getCallerCallSiteFact().getFact());










 //TODO handle constraint



......@@ -314,6 +317,10 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 public CallEdgeResolver<Field, Fact, Stmt, Method> getCallEdgeResolver() {










 return callEdgeResolver;










 }





















 public Method getMethod() {










 return method;










 }










 










//	public void debugReachables() {










//		JsonDocument root = new JsonDocument();



......














src/heros/fieldsens/ResolverTemplate.java








View file @ b651ea7e






......@@ -26,11 +26,14 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();










 protected Debugger<Field, Fact, Stmt, Method> debugger;





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent) {










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer);










 this.parent = parent;










 this.debugger = debugger;










 debugger.newResolver(analyzer, this);










 }










 










 protected boolean isLocked() {



......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ b651ea7e






......@@ -25,15 +25,15 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(factMergeHandler, analyzer, returnSite, null, new AccessPath<Field>(), null);










 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, returnSite, null, debugger, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated = false;










 }





















 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 Fact sourceFact, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.sourceFact = sourceFact;



......@@ -43,7 +43,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 










 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+returnSite+">";










 return "<"+resolvedAccPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 @Override



......@@ -85,7 +85,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, newAccPath, this);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, debugger, newAccPath, this);










 }










 










 public Stmt getReturnSite() {



......














src/heros/fieldsens/SourceStmtAnnotatedMethodAnalyzer.java








View file @ b651ea7e






......@@ -21,18 +21,21 @@ public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>









 private Method method;










 private DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {





















 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Key<Fact, Stmt> key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Synchronizer<Stmt> synchronizer;










 private Debugger<Field, Fact, Stmt, Method> debugger;










 










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer) {










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.synchronizer = synchronizer;










 this.debugger = debugger;










 }










 










 @Override



......














src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ b651ea7e






......@@ -16,8 +16,8 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes




















 private ZeroHandler<Field> zeroHandler;





















 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler) {










 super(analyzer);










 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler, Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer, debugger);










 this.zeroHandler = zeroHandler;










 }














......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

b651ea7e







Open sidebar



Joshua Garcia heros
Commits

b651ea7e




Open sidebar

Joshua Garcia heros
Commits

b651ea7e


Joshua GarciaherosherosCommits
b651ea7e








Commit
b651ea7e


authored
Jul 08, 2015
by


Johannes Lerch



Browse files




debugger







parent
3b510b6b













Changes
12




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/AccessPathHandler.java








View file @ b651ea7e






......@@ -19,10 +19,12 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {




















 private AccessPath<Field> accessPath;










 private Resolver<Field, Fact, Stmt, Method> resolver;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.accessPath = accessPath;










 this.resolver = resolver;










 this.debugger = debugger;










 }





















 public boolean canRead(Field field) {



......@@ -42,7 +44,7 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {









 }










 










 public ConstrainedFact<Field, Fact, Stmt, Method> generateWithEmptyAccessPath(Fact fact, ZeroHandler<Field> zeroHandler) {










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler)));










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler, debugger)));










 }










 










 public ResultBuilder<Field, Fact, Stmt, Method> prepend(final Field field) {



......














src/heros/fieldsens/BiDiFieldSensitiveIFDSSolver.java








View file @ b651ea7e






......@@ -31,7 +31,7 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 public BiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> forwardProblem,










 IFDSTabulationProblem<Stmt, Field, Fact, Method, I> backwardProblem, 










 FactMergeHandler<Fact> factHandler, 










 Debugger<Field, Fact, Stmt, Method, I> debugger,










 Debugger<Field, Fact, Stmt, Method> debugger,










 Scheduler scheduler) {










 










 this.scheduler = scheduler;



......@@ -46,11 +46,11 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 }





















 private FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I> createSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> problem, 










 FactMergeHandler<Fact> factHandler, Debugger<Field, Fact, Stmt, Method, I> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 FactMergeHandler<Fact> factHandler, final Debugger<Field, Fact, Stmt, Method> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 return new FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I>(problem, factHandler, debugger, scheduler) {










 @Override










 protected MethodAnalyzer<Field, Fact, Stmt, Method> createMethodAnalyzer(Method method) {










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer);










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer, debugger);










 }










 };










 }



......














src/heros/fieldsens/CallEdgeResolver.java








View file @ b651ea7e






......@@ -17,12 +17,12 @@ import com.google.common.collect.Lists;




















class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> {





















 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 this(analyzer, null);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(analyzer, debugger, null);










 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 }





















 @Override



......@@ -60,7 +60,7 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field









 










 @Override










 public String toString() {










 return "";










 return "<"+analyzer.getAccessPath()+":"+analyzer.getMethod()+">";










 }










 










 @Override



......














src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ b651ea7e






......@@ -23,15 +23,15 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), null);










 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), debugger, null);










 this.factMergeHandler = factMergeHandler;










 propagated=false;










 }










 










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, Debugger<Field, Fact, Stmt, Method> debugger, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.sourceFact = sourceFact;



......@@ -78,7 +78,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, this);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, debugger, this);










 }





















 @Override



......@@ -88,7 +88,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver




















 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+joinStmt+">";










 return "<"+resolvedAccPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 @Override



......














src/heros/fieldsens/Debugger.java








View file @ b651ea7e






......@@ -11,18 +11,23 @@









package heros.fieldsens;





















import heros.InterproceduralCFG;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> {










public interface Debugger<Field, Fact, Stmt, Method> {





















 public abstract void setICFG(I icfg);










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg);





















 public abstract void initialSeed(Stmt stmt);










 public void initialSeed(Stmt stmt);










 










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);





















 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver);










 










 










 public static class NullDebugger <Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










 public static class NullDebugger <Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 










 }














......@@ -30,6 +35,18 @@ public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 public void initialSeed(Stmt stmt) {










 










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 // TODO Auto-generated method stub










 










 }










 










 }










}




\ No newline at end of file














src/heros/fieldsens/FieldSensitiveIFDSSolver.java








View file @ b651ea7e






......@@ -33,13 +33,13 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 private IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem;










 protected Context<FieldRef, D, N,M> context;










 private Debugger<FieldRef, D, N, M, I> debugger;










 private Debugger<FieldRef, D, N, M> debugger;










 private Scheduler scheduler;





















 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M> debugger, Scheduler scheduler) {










 this.tabulationProblem = tabulationProblem;










 this.scheduler = scheduler;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M>() : debugger;










 this.debugger.setICFG(tabulationProblem.interproceduralCFG());










 context = initContext(tabulationProblem, factHandler);










 submitInitialSeeds();



......@@ -57,7 +57,7 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur









 }










 










 protected MethodAnalyzer<FieldRef, D, N, M> createMethodAnalyzer(M method) {










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context);










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context, debugger);










 }





















 /**



......














src/heros/fieldsens/MethodAnalyzerImpl.java








View file @ b651ea7e






......@@ -22,14 +22,16 @@ public class MethodAnalyzerImpl<Field,Fact, Stmt, Method>









 new DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Fact key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context) {










 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.debugger = debugger;










 }










 










 @Override



......














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ b651ea7e






......@@ -32,7 +32,7 @@ import com.google.common.collect.Lists;









import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {










public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {





















 private static final Logger logger = LoggerFactory.getLogger(PerAccessPathMethodAnalyzer.class);










 private Fact sourceFact;



......@@ -44,23 +44,25 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private CallEdgeResolver<Field, Fact, Stmt, Method> callEdgeResolver;










 private PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context) {










 this(method, sourceFact, context, new AccessPath<Field>(), null);










 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(method, sourceFact, context, debugger, new AccessPath<Field>(), null);










 }










 










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 this.debugger = debugger;










 if(method == null)










 throw new IllegalArgumentException("Method must be not null");










 this.parent = parent;



......@@ -69,16 +71,16 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 this.accessPath = accPath;










 this.context = context;










 if(parent == null) {










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this);










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler, debugger) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger);










 }










 else {










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, parent.callEdgeResolver);










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger, parent.callEdgeResolver);










 }










 log("initialized");










 }










 










 public PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createWithAccessPath(AccessPath<Field> accPath) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, accPath, this);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, debugger, accPath, this);










 }










 










 WrappedFact<Field, Fact, Stmt, Method> wrappedSource() {



......@@ -121,6 +123,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 log("Edge to "+factAtStmt);










 reachableStatements.put(factAtStmt, factAtStmt);










 context.scheduler.schedule(new Job(factAtStmt));










 debugger.edgeTo(this, factAtStmt);










 }










 }














......@@ -137,7 +140,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Method> calledMethods = context.icfg.getCalleesOfCallAt(factAtStmt.getStatement());










 for (Method calledMethod : calledMethods) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallFlowFunction(factAtStmt.getStatement(), calledMethod);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 MethodAnalyzer<Field, Fact, Stmt, Method> analyzer = context.getAnalyzer(calledMethod);



......@@ -162,7 +165,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(callSite);










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(callSite, method, factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 context.getAnalyzer(context.icfg.getMethodOf(callSite)).addUnbalancedReturnFlow(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()), callSite);



......@@ -174,7 +177,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 //instead we thus call the return flow function will a null caller










 if(callSites.isEmpty()) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(null, method, factAtStmt.getStatement(), null);










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 }










 }










 }



......@@ -194,7 +197,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(factAtStmt.getStatement());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallToReturnFlowFunction(factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()));



......@@ -223,7 +226,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private void processNormalNonJoiningFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 final List<Stmt> successors = context.icfg.getSuccsOf(factAtStmt.getStatement());










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getNormalFlowFunction(factAtStmt.getStatement());










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (final ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 if(targetFact.getConstraint() == null)










 scheduleEdgeTo(successors, targetFact.getFact());



......@@ -256,7 +259,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(incEdge.getCallSite());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(incEdge.getCallSite(), method, exitFact.getStatement(), returnSite);










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver()));










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targets) {










 context.factHandler.restoreCallingContext(targetFact.getFact().getFact(), incEdge.getCallerCallSiteFact().getFact());










 //TODO handle constraint



......@@ -314,6 +317,10 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 public CallEdgeResolver<Field, Fact, Stmt, Method> getCallEdgeResolver() {










 return callEdgeResolver;










 }





















 public Method getMethod() {










 return method;










 }










 










//	public void debugReachables() {










//		JsonDocument root = new JsonDocument();



......














src/heros/fieldsens/ResolverTemplate.java








View file @ b651ea7e






......@@ -26,11 +26,14 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();










 protected Debugger<Field, Fact, Stmt, Method> debugger;





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent) {










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer);










 this.parent = parent;










 this.debugger = debugger;










 debugger.newResolver(analyzer, this);










 }










 










 protected boolean isLocked() {



......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ b651ea7e






......@@ -25,15 +25,15 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(factMergeHandler, analyzer, returnSite, null, new AccessPath<Field>(), null);










 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, returnSite, null, debugger, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated = false;










 }





















 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 Fact sourceFact, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.sourceFact = sourceFact;



......@@ -43,7 +43,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 










 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+returnSite+">";










 return "<"+resolvedAccPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 @Override



......@@ -85,7 +85,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, newAccPath, this);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, debugger, newAccPath, this);










 }










 










 public Stmt getReturnSite() {



......














src/heros/fieldsens/SourceStmtAnnotatedMethodAnalyzer.java








View file @ b651ea7e






......@@ -21,18 +21,21 @@ public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>









 private Method method;










 private DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {





















 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Key<Fact, Stmt> key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Synchronizer<Stmt> synchronizer;










 private Debugger<Field, Fact, Stmt, Method> debugger;










 










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer) {










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.synchronizer = synchronizer;










 this.debugger = debugger;










 }










 










 @Override



......














src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ b651ea7e






......@@ -16,8 +16,8 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes




















 private ZeroHandler<Field> zeroHandler;





















 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler) {










 super(analyzer);










 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler, Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer, debugger);










 this.zeroHandler = zeroHandler;










 }














......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
b651ea7e


authored
Jul 08, 2015
by


Johannes Lerch



Browse files




debugger







parent
3b510b6b













Changes
12




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/AccessPathHandler.java








View file @ b651ea7e






......@@ -19,10 +19,12 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {




















 private AccessPath<Field> accessPath;










 private Resolver<Field, Fact, Stmt, Method> resolver;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.accessPath = accessPath;










 this.resolver = resolver;










 this.debugger = debugger;










 }





















 public boolean canRead(Field field) {



......@@ -42,7 +44,7 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {









 }










 










 public ConstrainedFact<Field, Fact, Stmt, Method> generateWithEmptyAccessPath(Fact fact, ZeroHandler<Field> zeroHandler) {










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler)));










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler, debugger)));










 }










 










 public ResultBuilder<Field, Fact, Stmt, Method> prepend(final Field field) {



......














src/heros/fieldsens/BiDiFieldSensitiveIFDSSolver.java








View file @ b651ea7e






......@@ -31,7 +31,7 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 public BiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> forwardProblem,










 IFDSTabulationProblem<Stmt, Field, Fact, Method, I> backwardProblem, 










 FactMergeHandler<Fact> factHandler, 










 Debugger<Field, Fact, Stmt, Method, I> debugger,










 Debugger<Field, Fact, Stmt, Method> debugger,










 Scheduler scheduler) {










 










 this.scheduler = scheduler;



......@@ -46,11 +46,11 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 }





















 private FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I> createSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> problem, 










 FactMergeHandler<Fact> factHandler, Debugger<Field, Fact, Stmt, Method, I> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 FactMergeHandler<Fact> factHandler, final Debugger<Field, Fact, Stmt, Method> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 return new FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I>(problem, factHandler, debugger, scheduler) {










 @Override










 protected MethodAnalyzer<Field, Fact, Stmt, Method> createMethodAnalyzer(Method method) {










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer);










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer, debugger);










 }










 };










 }



......














src/heros/fieldsens/CallEdgeResolver.java








View file @ b651ea7e






......@@ -17,12 +17,12 @@ import com.google.common.collect.Lists;




















class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> {





















 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 this(analyzer, null);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(analyzer, debugger, null);










 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 }





















 @Override



......@@ -60,7 +60,7 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field









 










 @Override










 public String toString() {










 return "";










 return "<"+analyzer.getAccessPath()+":"+analyzer.getMethod()+">";










 }










 










 @Override



......














src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ b651ea7e






......@@ -23,15 +23,15 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), null);










 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), debugger, null);










 this.factMergeHandler = factMergeHandler;










 propagated=false;










 }










 










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, Debugger<Field, Fact, Stmt, Method> debugger, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.sourceFact = sourceFact;



......@@ -78,7 +78,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, this);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, debugger, this);










 }





















 @Override



......@@ -88,7 +88,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver




















 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+joinStmt+">";










 return "<"+resolvedAccPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 @Override



......














src/heros/fieldsens/Debugger.java








View file @ b651ea7e






......@@ -11,18 +11,23 @@









package heros.fieldsens;





















import heros.InterproceduralCFG;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> {










public interface Debugger<Field, Fact, Stmt, Method> {





















 public abstract void setICFG(I icfg);










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg);





















 public abstract void initialSeed(Stmt stmt);










 public void initialSeed(Stmt stmt);










 










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);





















 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver);










 










 










 public static class NullDebugger <Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










 public static class NullDebugger <Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 










 }














......@@ -30,6 +35,18 @@ public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 public void initialSeed(Stmt stmt) {










 










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 // TODO Auto-generated method stub










 










 }










 










 }










}




\ No newline at end of file














src/heros/fieldsens/FieldSensitiveIFDSSolver.java








View file @ b651ea7e






......@@ -33,13 +33,13 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 private IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem;










 protected Context<FieldRef, D, N,M> context;










 private Debugger<FieldRef, D, N, M, I> debugger;










 private Debugger<FieldRef, D, N, M> debugger;










 private Scheduler scheduler;





















 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M> debugger, Scheduler scheduler) {










 this.tabulationProblem = tabulationProblem;










 this.scheduler = scheduler;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M>() : debugger;










 this.debugger.setICFG(tabulationProblem.interproceduralCFG());










 context = initContext(tabulationProblem, factHandler);










 submitInitialSeeds();



......@@ -57,7 +57,7 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur









 }










 










 protected MethodAnalyzer<FieldRef, D, N, M> createMethodAnalyzer(M method) {










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context);










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context, debugger);










 }





















 /**



......














src/heros/fieldsens/MethodAnalyzerImpl.java








View file @ b651ea7e






......@@ -22,14 +22,16 @@ public class MethodAnalyzerImpl<Field,Fact, Stmt, Method>









 new DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Fact key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context) {










 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.debugger = debugger;










 }










 










 @Override



......














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ b651ea7e






......@@ -32,7 +32,7 @@ import com.google.common.collect.Lists;









import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {










public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {





















 private static final Logger logger = LoggerFactory.getLogger(PerAccessPathMethodAnalyzer.class);










 private Fact sourceFact;



......@@ -44,23 +44,25 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private CallEdgeResolver<Field, Fact, Stmt, Method> callEdgeResolver;










 private PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context) {










 this(method, sourceFact, context, new AccessPath<Field>(), null);










 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(method, sourceFact, context, debugger, new AccessPath<Field>(), null);










 }










 










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 this.debugger = debugger;










 if(method == null)










 throw new IllegalArgumentException("Method must be not null");










 this.parent = parent;



......@@ -69,16 +71,16 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 this.accessPath = accPath;










 this.context = context;










 if(parent == null) {










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this);










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler, debugger) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger);










 }










 else {










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, parent.callEdgeResolver);










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger, parent.callEdgeResolver);










 }










 log("initialized");










 }










 










 public PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createWithAccessPath(AccessPath<Field> accPath) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, accPath, this);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, debugger, accPath, this);










 }










 










 WrappedFact<Field, Fact, Stmt, Method> wrappedSource() {



......@@ -121,6 +123,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 log("Edge to "+factAtStmt);










 reachableStatements.put(factAtStmt, factAtStmt);










 context.scheduler.schedule(new Job(factAtStmt));










 debugger.edgeTo(this, factAtStmt);










 }










 }














......@@ -137,7 +140,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Method> calledMethods = context.icfg.getCalleesOfCallAt(factAtStmt.getStatement());










 for (Method calledMethod : calledMethods) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallFlowFunction(factAtStmt.getStatement(), calledMethod);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 MethodAnalyzer<Field, Fact, Stmt, Method> analyzer = context.getAnalyzer(calledMethod);



......@@ -162,7 +165,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(callSite);










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(callSite, method, factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 context.getAnalyzer(context.icfg.getMethodOf(callSite)).addUnbalancedReturnFlow(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()), callSite);



......@@ -174,7 +177,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 //instead we thus call the return flow function will a null caller










 if(callSites.isEmpty()) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(null, method, factAtStmt.getStatement(), null);










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 }










 }










 }



......@@ -194,7 +197,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(factAtStmt.getStatement());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallToReturnFlowFunction(factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()));



......@@ -223,7 +226,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private void processNormalNonJoiningFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 final List<Stmt> successors = context.icfg.getSuccsOf(factAtStmt.getStatement());










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getNormalFlowFunction(factAtStmt.getStatement());










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (final ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 if(targetFact.getConstraint() == null)










 scheduleEdgeTo(successors, targetFact.getFact());



......@@ -256,7 +259,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(incEdge.getCallSite());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(incEdge.getCallSite(), method, exitFact.getStatement(), returnSite);










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver()));










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targets) {










 context.factHandler.restoreCallingContext(targetFact.getFact().getFact(), incEdge.getCallerCallSiteFact().getFact());










 //TODO handle constraint



......@@ -314,6 +317,10 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 public CallEdgeResolver<Field, Fact, Stmt, Method> getCallEdgeResolver() {










 return callEdgeResolver;










 }





















 public Method getMethod() {










 return method;










 }










 










//	public void debugReachables() {










//		JsonDocument root = new JsonDocument();



......














src/heros/fieldsens/ResolverTemplate.java








View file @ b651ea7e






......@@ -26,11 +26,14 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();










 protected Debugger<Field, Fact, Stmt, Method> debugger;





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent) {










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer);










 this.parent = parent;










 this.debugger = debugger;










 debugger.newResolver(analyzer, this);










 }










 










 protected boolean isLocked() {



......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ b651ea7e






......@@ -25,15 +25,15 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(factMergeHandler, analyzer, returnSite, null, new AccessPath<Field>(), null);










 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, returnSite, null, debugger, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated = false;










 }





















 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 Fact sourceFact, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.sourceFact = sourceFact;



......@@ -43,7 +43,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 










 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+returnSite+">";










 return "<"+resolvedAccPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 @Override



......@@ -85,7 +85,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, newAccPath, this);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, debugger, newAccPath, this);










 }










 










 public Stmt getReturnSite() {



......














src/heros/fieldsens/SourceStmtAnnotatedMethodAnalyzer.java








View file @ b651ea7e






......@@ -21,18 +21,21 @@ public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>









 private Method method;










 private DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {





















 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Key<Fact, Stmt> key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Synchronizer<Stmt> synchronizer;










 private Debugger<Field, Fact, Stmt, Method> debugger;










 










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer) {










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.synchronizer = synchronizer;










 this.debugger = debugger;










 }










 










 @Override



......














src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ b651ea7e






......@@ -16,8 +16,8 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes




















 private ZeroHandler<Field> zeroHandler;





















 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler) {










 super(analyzer);










 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler, Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer, debugger);










 this.zeroHandler = zeroHandler;










 }














......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
b651ea7e


authored
Jul 08, 2015
by


Johannes Lerch



Browse files



Commit
b651ea7e


authored
Jul 08, 2015
by


Johannes Lerch

b651ea7eauthoredbyJohannes Lerch

debugger






parent
3b510b6b
















parent
3b510b6b





parent












Changes
12
12


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/fieldsens/AccessPathHandler.java








View file @ b651ea7e






......@@ -19,10 +19,12 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {




















 private AccessPath<Field> accessPath;










 private Resolver<Field, Fact, Stmt, Method> resolver;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.accessPath = accessPath;










 this.resolver = resolver;










 this.debugger = debugger;










 }





















 public boolean canRead(Field field) {



......@@ -42,7 +44,7 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {









 }










 










 public ConstrainedFact<Field, Fact, Stmt, Method> generateWithEmptyAccessPath(Fact fact, ZeroHandler<Field> zeroHandler) {










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler)));










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler, debugger)));










 }










 










 public ResultBuilder<Field, Fact, Stmt, Method> prepend(final Field field) {



......














src/heros/fieldsens/BiDiFieldSensitiveIFDSSolver.java








View file @ b651ea7e






......@@ -31,7 +31,7 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 public BiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> forwardProblem,










 IFDSTabulationProblem<Stmt, Field, Fact, Method, I> backwardProblem, 










 FactMergeHandler<Fact> factHandler, 










 Debugger<Field, Fact, Stmt, Method, I> debugger,










 Debugger<Field, Fact, Stmt, Method> debugger,










 Scheduler scheduler) {










 










 this.scheduler = scheduler;



......@@ -46,11 +46,11 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 }





















 private FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I> createSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> problem, 










 FactMergeHandler<Fact> factHandler, Debugger<Field, Fact, Stmt, Method, I> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 FactMergeHandler<Fact> factHandler, final Debugger<Field, Fact, Stmt, Method> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 return new FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I>(problem, factHandler, debugger, scheduler) {










 @Override










 protected MethodAnalyzer<Field, Fact, Stmt, Method> createMethodAnalyzer(Method method) {










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer);










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer, debugger);










 }










 };










 }



......














src/heros/fieldsens/CallEdgeResolver.java








View file @ b651ea7e






......@@ -17,12 +17,12 @@ import com.google.common.collect.Lists;




















class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> {





















 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 this(analyzer, null);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(analyzer, debugger, null);










 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 }





















 @Override



......@@ -60,7 +60,7 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field









 










 @Override










 public String toString() {










 return "";










 return "<"+analyzer.getAccessPath()+":"+analyzer.getMethod()+">";










 }










 










 @Override



......














src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ b651ea7e






......@@ -23,15 +23,15 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), null);










 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), debugger, null);










 this.factMergeHandler = factMergeHandler;










 propagated=false;










 }










 










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, Debugger<Field, Fact, Stmt, Method> debugger, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.sourceFact = sourceFact;



......@@ -78,7 +78,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, this);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, debugger, this);










 }





















 @Override



......@@ -88,7 +88,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver




















 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+joinStmt+">";










 return "<"+resolvedAccPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 @Override



......














src/heros/fieldsens/Debugger.java








View file @ b651ea7e






......@@ -11,18 +11,23 @@









package heros.fieldsens;





















import heros.InterproceduralCFG;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> {










public interface Debugger<Field, Fact, Stmt, Method> {





















 public abstract void setICFG(I icfg);










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg);





















 public abstract void initialSeed(Stmt stmt);










 public void initialSeed(Stmt stmt);










 










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);





















 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver);










 










 










 public static class NullDebugger <Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










 public static class NullDebugger <Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 










 }














......@@ -30,6 +35,18 @@ public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 public void initialSeed(Stmt stmt) {










 










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 // TODO Auto-generated method stub










 










 }










 










 }










}




\ No newline at end of file














src/heros/fieldsens/FieldSensitiveIFDSSolver.java








View file @ b651ea7e






......@@ -33,13 +33,13 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 private IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem;










 protected Context<FieldRef, D, N,M> context;










 private Debugger<FieldRef, D, N, M, I> debugger;










 private Debugger<FieldRef, D, N, M> debugger;










 private Scheduler scheduler;





















 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M> debugger, Scheduler scheduler) {










 this.tabulationProblem = tabulationProblem;










 this.scheduler = scheduler;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M>() : debugger;










 this.debugger.setICFG(tabulationProblem.interproceduralCFG());










 context = initContext(tabulationProblem, factHandler);










 submitInitialSeeds();



......@@ -57,7 +57,7 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur









 }










 










 protected MethodAnalyzer<FieldRef, D, N, M> createMethodAnalyzer(M method) {










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context);










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context, debugger);










 }





















 /**



......














src/heros/fieldsens/MethodAnalyzerImpl.java








View file @ b651ea7e






......@@ -22,14 +22,16 @@ public class MethodAnalyzerImpl<Field,Fact, Stmt, Method>









 new DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Fact key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context) {










 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.debugger = debugger;










 }










 










 @Override



......














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ b651ea7e






......@@ -32,7 +32,7 @@ import com.google.common.collect.Lists;









import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {










public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {





















 private static final Logger logger = LoggerFactory.getLogger(PerAccessPathMethodAnalyzer.class);










 private Fact sourceFact;



......@@ -44,23 +44,25 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private CallEdgeResolver<Field, Fact, Stmt, Method> callEdgeResolver;










 private PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context) {










 this(method, sourceFact, context, new AccessPath<Field>(), null);










 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(method, sourceFact, context, debugger, new AccessPath<Field>(), null);










 }










 










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 this.debugger = debugger;










 if(method == null)










 throw new IllegalArgumentException("Method must be not null");










 this.parent = parent;



......@@ -69,16 +71,16 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 this.accessPath = accPath;










 this.context = context;










 if(parent == null) {










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this);










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler, debugger) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger);










 }










 else {










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, parent.callEdgeResolver);










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger, parent.callEdgeResolver);










 }










 log("initialized");










 }










 










 public PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createWithAccessPath(AccessPath<Field> accPath) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, accPath, this);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, debugger, accPath, this);










 }










 










 WrappedFact<Field, Fact, Stmt, Method> wrappedSource() {



......@@ -121,6 +123,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 log("Edge to "+factAtStmt);










 reachableStatements.put(factAtStmt, factAtStmt);










 context.scheduler.schedule(new Job(factAtStmt));










 debugger.edgeTo(this, factAtStmt);










 }










 }














......@@ -137,7 +140,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Method> calledMethods = context.icfg.getCalleesOfCallAt(factAtStmt.getStatement());










 for (Method calledMethod : calledMethods) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallFlowFunction(factAtStmt.getStatement(), calledMethod);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 MethodAnalyzer<Field, Fact, Stmt, Method> analyzer = context.getAnalyzer(calledMethod);



......@@ -162,7 +165,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(callSite);










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(callSite, method, factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 context.getAnalyzer(context.icfg.getMethodOf(callSite)).addUnbalancedReturnFlow(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()), callSite);



......@@ -174,7 +177,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 //instead we thus call the return flow function will a null caller










 if(callSites.isEmpty()) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(null, method, factAtStmt.getStatement(), null);










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 }










 }










 }



......@@ -194,7 +197,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(factAtStmt.getStatement());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallToReturnFlowFunction(factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()));



......@@ -223,7 +226,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private void processNormalNonJoiningFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 final List<Stmt> successors = context.icfg.getSuccsOf(factAtStmt.getStatement());










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getNormalFlowFunction(factAtStmt.getStatement());










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (final ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 if(targetFact.getConstraint() == null)










 scheduleEdgeTo(successors, targetFact.getFact());



......@@ -256,7 +259,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(incEdge.getCallSite());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(incEdge.getCallSite(), method, exitFact.getStatement(), returnSite);










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver()));










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targets) {










 context.factHandler.restoreCallingContext(targetFact.getFact().getFact(), incEdge.getCallerCallSiteFact().getFact());










 //TODO handle constraint



......@@ -314,6 +317,10 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 public CallEdgeResolver<Field, Fact, Stmt, Method> getCallEdgeResolver() {










 return callEdgeResolver;










 }





















 public Method getMethod() {










 return method;










 }










 










//	public void debugReachables() {










//		JsonDocument root = new JsonDocument();



......














src/heros/fieldsens/ResolverTemplate.java








View file @ b651ea7e






......@@ -26,11 +26,14 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();










 protected Debugger<Field, Fact, Stmt, Method> debugger;





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent) {










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer);










 this.parent = parent;










 this.debugger = debugger;










 debugger.newResolver(analyzer, this);










 }










 










 protected boolean isLocked() {



......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ b651ea7e






......@@ -25,15 +25,15 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(factMergeHandler, analyzer, returnSite, null, new AccessPath<Field>(), null);










 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, returnSite, null, debugger, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated = false;










 }





















 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 Fact sourceFact, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.sourceFact = sourceFact;



......@@ -43,7 +43,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 










 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+returnSite+">";










 return "<"+resolvedAccPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 @Override



......@@ -85,7 +85,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, newAccPath, this);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, debugger, newAccPath, this);










 }










 










 public Stmt getReturnSite() {



......














src/heros/fieldsens/SourceStmtAnnotatedMethodAnalyzer.java








View file @ b651ea7e






......@@ -21,18 +21,21 @@ public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>









 private Method method;










 private DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {





















 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Key<Fact, Stmt> key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Synchronizer<Stmt> synchronizer;










 private Debugger<Field, Fact, Stmt, Method> debugger;










 










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer) {










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.synchronizer = synchronizer;










 this.debugger = debugger;










 }










 










 @Override



......














src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ b651ea7e






......@@ -16,8 +16,8 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes




















 private ZeroHandler<Field> zeroHandler;





















 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler) {










 super(analyzer);










 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler, Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer, debugger);










 this.zeroHandler = zeroHandler;










 }














......














src/heros/fieldsens/AccessPathHandler.java








View file @ b651ea7e






......@@ -19,10 +19,12 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {




















 private AccessPath<Field> accessPath;










 private Resolver<Field, Fact, Stmt, Method> resolver;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.accessPath = accessPath;










 this.resolver = resolver;










 this.debugger = debugger;










 }





















 public boolean canRead(Field field) {



......@@ -42,7 +44,7 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {









 }










 










 public ConstrainedFact<Field, Fact, Stmt, Method> generateWithEmptyAccessPath(Fact fact, ZeroHandler<Field> zeroHandler) {










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler)));










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler, debugger)));










 }










 










 public ResultBuilder<Field, Fact, Stmt, Method> prepend(final Field field) {



......












src/heros/fieldsens/AccessPathHandler.java








View file @ b651ea7e








src/heros/fieldsens/AccessPathHandler.java










View file @ b651ea7e


b651ea7e



......@@ -19,10 +19,12 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {




















 private AccessPath<Field> accessPath;










 private Resolver<Field, Fact, Stmt, Method> resolver;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.accessPath = accessPath;










 this.resolver = resolver;










 this.debugger = debugger;










 }





















 public boolean canRead(Field field) {



......@@ -42,7 +44,7 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {









 }










 










 public ConstrainedFact<Field, Fact, Stmt, Method> generateWithEmptyAccessPath(Fact fact, ZeroHandler<Field> zeroHandler) {










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler)));










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler, debugger)));










 }










 










 public ResultBuilder<Field, Fact, Stmt, Method> prepend(final Field field) {



......






......@@ -19,10 +19,12 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {




















 private AccessPath<Field> accessPath;










 private Resolver<Field, Fact, Stmt, Method> resolver;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.accessPath = accessPath;










 this.resolver = resolver;










 this.debugger = debugger;










 }





















 public boolean canRead(Field field) {



......@@ -42,7 +44,7 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {









 }










 










 public ConstrainedFact<Field, Fact, Stmt, Method> generateWithEmptyAccessPath(Fact fact, ZeroHandler<Field> zeroHandler) {










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler)));










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler, debugger)));










 }










 










 public ResultBuilder<Field, Fact, Stmt, Method> prepend(final Field field) {



......


 private AccessPath<Field> accessPath;privateAccessPath<Field>accessPath; private Resolver<Field, Fact, Stmt, Method> resolver;privateResolver<Field,Fact,Stmt,Method>resolver; private Debugger<Field, Fact, Stmt, Method> debugger;privateDebugger<Field,Fact,Stmt,Method>debugger; public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {publicAccessPathHandler(AccessPath<Field>accessPath,Resolver<Field,Fact,Stmt,Method>resolver){ public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver, Debugger<Field, Fact, Stmt, Method> debugger) {publicAccessPathHandler(AccessPath<Field>accessPath,Resolver<Field,Fact,Stmt,Method>resolver,, DebuggerDebugger<<FieldField,, FactFact,, StmtStmt,, MethodMethod>> debuggerdebugger){ this.accessPath = accessPath;this.accessPath=accessPath; this.resolver = resolver;this.resolver=resolver; this.debugger = debugger;this.debugger=debugger; }} public boolean canRead(Field field) {publicbooleancanRead(Fieldfield){ }}  public ConstrainedFact<Field, Fact, Stmt, Method> generateWithEmptyAccessPath(Fact fact, ZeroHandler<Field> zeroHandler) {publicConstrainedFact<Field,Fact,Stmt,Method>generateWithEmptyAccessPath(Factfact,ZeroHandler<Field>zeroHandler){ return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler)));returnnewConstrainedFact<Field,Fact,Stmt,Method>(newWrappedFact<Field,Fact,Stmt,Method>(fact,newAccessPath<Field>(),newZeroCallEdgeResolver<Field,Fact,Stmt,Method>(resolver.analyzer,zeroHandler))); return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler, debugger)));returnnewConstrainedFact<Field,Fact,Stmt,Method>(newWrappedFact<Field,Fact,Stmt,Method>(fact,newAccessPath<Field>(),newZeroCallEdgeResolver<Field,Fact,Stmt,Method>(resolver.analyzer,zeroHandler,, debuggerdebugger))); }}  public ResultBuilder<Field, Fact, Stmt, Method> prepend(final Field field) {publicResultBuilder<Field,Fact,Stmt,Method>prepend(finalFieldfield){








src/heros/fieldsens/BiDiFieldSensitiveIFDSSolver.java








View file @ b651ea7e






......@@ -31,7 +31,7 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 public BiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> forwardProblem,










 IFDSTabulationProblem<Stmt, Field, Fact, Method, I> backwardProblem, 










 FactMergeHandler<Fact> factHandler, 










 Debugger<Field, Fact, Stmt, Method, I> debugger,










 Debugger<Field, Fact, Stmt, Method> debugger,










 Scheduler scheduler) {










 










 this.scheduler = scheduler;



......@@ -46,11 +46,11 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 }





















 private FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I> createSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> problem, 










 FactMergeHandler<Fact> factHandler, Debugger<Field, Fact, Stmt, Method, I> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 FactMergeHandler<Fact> factHandler, final Debugger<Field, Fact, Stmt, Method> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 return new FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I>(problem, factHandler, debugger, scheduler) {










 @Override










 protected MethodAnalyzer<Field, Fact, Stmt, Method> createMethodAnalyzer(Method method) {










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer);










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer, debugger);










 }










 };










 }



......












src/heros/fieldsens/BiDiFieldSensitiveIFDSSolver.java








View file @ b651ea7e








src/heros/fieldsens/BiDiFieldSensitiveIFDSSolver.java










View file @ b651ea7e


b651ea7e



......@@ -31,7 +31,7 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 public BiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> forwardProblem,










 IFDSTabulationProblem<Stmt, Field, Fact, Method, I> backwardProblem, 










 FactMergeHandler<Fact> factHandler, 










 Debugger<Field, Fact, Stmt, Method, I> debugger,










 Debugger<Field, Fact, Stmt, Method> debugger,










 Scheduler scheduler) {










 










 this.scheduler = scheduler;



......@@ -46,11 +46,11 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 }





















 private FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I> createSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> problem, 










 FactMergeHandler<Fact> factHandler, Debugger<Field, Fact, Stmt, Method, I> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 FactMergeHandler<Fact> factHandler, final Debugger<Field, Fact, Stmt, Method> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 return new FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I>(problem, factHandler, debugger, scheduler) {










 @Override










 protected MethodAnalyzer<Field, Fact, Stmt, Method> createMethodAnalyzer(Method method) {










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer);










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer, debugger);










 }










 };










 }



......






......@@ -31,7 +31,7 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 public BiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> forwardProblem,










 IFDSTabulationProblem<Stmt, Field, Fact, Method, I> backwardProblem, 










 FactMergeHandler<Fact> factHandler, 










 Debugger<Field, Fact, Stmt, Method, I> debugger,










 Debugger<Field, Fact, Stmt, Method> debugger,










 Scheduler scheduler) {










 










 this.scheduler = scheduler;



......@@ -46,11 +46,11 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 }





















 private FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I> createSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> problem, 










 FactMergeHandler<Fact> factHandler, Debugger<Field, Fact, Stmt, Method, I> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 FactMergeHandler<Fact> factHandler, final Debugger<Field, Fact, Stmt, Method> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 return new FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I>(problem, factHandler, debugger, scheduler) {










 @Override










 protected MethodAnalyzer<Field, Fact, Stmt, Method> createMethodAnalyzer(Method method) {










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer);










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer, debugger);










 }










 };










 }



......


 public BiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> forwardProblem,publicBiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<Stmt,Field,Fact,Method,I>forwardProblem, IFDSTabulationProblem<Stmt, Field, Fact, Method, I> backwardProblem, IFDSTabulationProblem<Stmt,Field,Fact,Method,I>backwardProblem, FactMergeHandler<Fact> factHandler, FactMergeHandler<Fact>factHandler, Debugger<Field, Fact, Stmt, Method, I> debugger,Debugger<Field,Fact,Stmt,Method,, II>debugger, Debugger<Field, Fact, Stmt, Method> debugger,Debugger<Field,Fact,Stmt,Method>debugger, Scheduler scheduler) {Schedulerscheduler){  this.scheduler = scheduler;this.scheduler=scheduler; }} private FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I> createSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> problem, privateFieldSensitiveIFDSSolver<Field,Fact,Stmt,Method,I>createSolver(IFDSTabulationProblem<Stmt,Field,Fact,Method,I>problem, FactMergeHandler<Fact> factHandler, Debugger<Field, Fact, Stmt, Method, I> debugger, final SynchronizerImpl<Stmt> synchronizer) {FactMergeHandler<Fact>factHandler,Debugger<Field,Fact,Stmt,Method,, II>debugger,finalSynchronizerImpl<Stmt>synchronizer){ FactMergeHandler<Fact> factHandler, final Debugger<Field, Fact, Stmt, Method> debugger, final SynchronizerImpl<Stmt> synchronizer) {FactMergeHandler<Fact>factHandler,finalfinal Debugger<Field,Fact,Stmt,Method>debugger,finalSynchronizerImpl<Stmt>synchronizer){ return new FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I>(problem, factHandler, debugger, scheduler) {returnnewFieldSensitiveIFDSSolver<Field,Fact,Stmt,Method,I>(problem,factHandler,debugger,scheduler){ @Override@Override protected MethodAnalyzer<Field, Fact, Stmt, Method> createMethodAnalyzer(Method method) {protectedMethodAnalyzer<Field,Fact,Stmt,Method>createMethodAnalyzer(Methodmethod){ return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer);returnnewSourceStmtAnnotatedMethodAnalyzer<Field,Fact,Stmt,Method>(method,context,synchronizer); return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer, debugger);returnnewSourceStmtAnnotatedMethodAnalyzer<Field,Fact,Stmt,Method>(method,context,synchronizer,, debuggerdebugger); }} };}; }}








src/heros/fieldsens/CallEdgeResolver.java








View file @ b651ea7e






......@@ -17,12 +17,12 @@ import com.google.common.collect.Lists;




















class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> {





















 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 this(analyzer, null);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(analyzer, debugger, null);










 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 }





















 @Override



......@@ -60,7 +60,7 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field









 










 @Override










 public String toString() {










 return "";










 return "<"+analyzer.getAccessPath()+":"+analyzer.getMethod()+">";










 }










 










 @Override



......












src/heros/fieldsens/CallEdgeResolver.java








View file @ b651ea7e








src/heros/fieldsens/CallEdgeResolver.java










View file @ b651ea7e


b651ea7e



......@@ -17,12 +17,12 @@ import com.google.common.collect.Lists;




















class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> {





















 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 this(analyzer, null);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(analyzer, debugger, null);










 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 }





















 @Override



......@@ -60,7 +60,7 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field









 










 @Override










 public String toString() {










 return "";










 return "<"+analyzer.getAccessPath()+":"+analyzer.getMethod()+">";










 }










 










 @Override



......






......@@ -17,12 +17,12 @@ import com.google.common.collect.Lists;




















class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> {





















 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 this(analyzer, null);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(analyzer, debugger, null);










 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 }





















 @Override



......@@ -60,7 +60,7 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field









 










 @Override










 public String toString() {










 return "";










 return "<"+analyzer.getAccessPath()+":"+analyzer.getMethod()+">";










 }










 










 @Override



......


class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> {classCallEdgeResolver<Field,Fact,Stmt,Method>extendsResolverTemplate<Field,Fact,Stmt,Method,CallEdge<Field,Fact,Stmt,Method>>{ public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {publicCallEdgeResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer){ this(analyzer, null);this(analyzer,null); public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger) {publicCallEdgeResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,, DebuggerDebugger<<FieldField,, FactFact,, StmtStmt,, MethodMethod>> debuggerdebugger){ this(analyzer, debugger, null);this(analyzer,debuggerdebugger,, null); }}  public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {publicCallEdgeResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,CallEdgeResolver<Field,Fact,Stmt,Method>parent){ super(analyzer, parent);super(analyzer,parent); public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {publicCallEdgeResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,DebuggerDebugger<<FieldField,, FactFact,, StmtStmt,, MethodMethod>> debuggerdebugger,, CallEdgeResolver<Field,Fact,Stmt,Method>parent){ super(analyzer, parent, debugger);super(analyzer,parent,, debuggerdebugger); }} @Override@Override  @Override@Override public String toString() {publicStringtoString(){ return "";return""; return "<"+analyzer.getAccessPath()+":"+analyzer.getMethod()+">";return"<"<"++analyzeranalyzer..getAccessPathgetAccessPath()+()+":"":"++analyzeranalyzer..getMethodgetMethod()+()+">"">; }}  @Override@Override








src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ b651ea7e






......@@ -23,15 +23,15 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), null);










 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), debugger, null);










 this.factMergeHandler = factMergeHandler;










 propagated=false;










 }










 










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, Debugger<Field, Fact, Stmt, Method> debugger, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.sourceFact = sourceFact;



......@@ -78,7 +78,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, this);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, debugger, this);










 }





















 @Override



......@@ -88,7 +88,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver




















 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+joinStmt+">";










 return "<"+resolvedAccPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 @Override



......












src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ b651ea7e








src/heros/fieldsens/ControlFlowJoinResolver.java










View file @ b651ea7e


b651ea7e



......@@ -23,15 +23,15 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), null);










 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), debugger, null);










 this.factMergeHandler = factMergeHandler;










 propagated=false;










 }










 










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, Debugger<Field, Fact, Stmt, Method> debugger, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.sourceFact = sourceFact;



......@@ -78,7 +78,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, this);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, debugger, this);










 }





















 @Override



......@@ -88,7 +88,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver




















 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+joinStmt+">";










 return "<"+resolvedAccPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 @Override



......






......@@ -23,15 +23,15 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), null);










 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), debugger, null);










 this.factMergeHandler = factMergeHandler;










 propagated=false;










 }










 










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, Debugger<Field, Fact, Stmt, Method> debugger, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.sourceFact = sourceFact;



......@@ -78,7 +78,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, this);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, debugger, this);










 }





















 @Override



......@@ -88,7 +88,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver




















 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+joinStmt+">";










 return "<"+resolvedAccPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 @Override



......


 private Fact sourceFact;privateFactsourceFact; private FactMergeHandler<Fact> factMergeHandler;privateFactMergeHandler<Fact>factMergeHandler; public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {publicControlFlowJoinResolver(FactMergeHandler<Fact>factMergeHandler,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtjoinStmt){ this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), null);this(factMergeHandler,analyzer,joinStmt,null,newAccessPath<Field>(),null); public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, Debugger<Field, Fact, Stmt, Method> debugger) {publicControlFlowJoinResolver(FactMergeHandler<Fact>factMergeHandler,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtjoinStmt,, DebuggerDebugger<<FieldField,, FactFact,, StmtStmt,, MethodMethod>> debuggerdebugger){ this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), debugger, null);this(factMergeHandler,analyzer,joinStmt,null,newAccessPath<Field>(),debuggerdebugger,, null); this.factMergeHandler = factMergeHandler;this.factMergeHandler=factMergeHandler; propagated=false;propagated=false; }}  private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, privateControlFlowJoinResolver(FactMergeHandler<Fact>factMergeHandler,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer, Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {StmtjoinStmt,FactsourceFact,AccessPath<Field>resolvedAccPath,ControlFlowJoinResolver<Field,Fact,Stmt,Method>parent){ super(analyzer, parent);super(analyzer,parent); Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, Debugger<Field, Fact, Stmt, Method> debugger, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {StmtjoinStmt,FactsourceFact,AccessPath<Field>resolvedAccPath,DebuggerDebugger<<FieldField,, FactFact,, StmtStmt,, MethodMethod>> debuggerdebugger,, ControlFlowJoinResolver<Field,Fact,Stmt,Method>parent){ super(analyzer, parent, debugger);super(analyzer,parent,, debuggerdebugger); this.factMergeHandler = factMergeHandler;this.factMergeHandler=factMergeHandler; this.joinStmt = joinStmt;this.joinStmt=joinStmt; this.sourceFact = sourceFact;this.sourceFact=sourceFact;  @Override@Override protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {protectedResolverTemplate<Field,Fact,Stmt,Method,WrappedFact<Field,Fact,Stmt,Method>>createNestedResolver(AccessPath<Field>newAccPath){ return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, this);returnnewControlFlowJoinResolver<Field,Fact,Stmt,Method>(factMergeHandler,analyzer,joinStmt,sourceFact,newAccPath,this); return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, debugger, this);returnnewControlFlowJoinResolver<Field,Fact,Stmt,Method>(factMergeHandler,analyzer,joinStmt,sourceFact,newAccPath,debuggerdebugger,, this); }} @Override@Override @Override@Override public String toString() {publicStringtoString(){ return "<"+resolvedAccPath+":"+joinStmt+">";return"<"+resolvedAccPath+":"+joinStmt+">"; return "<"+resolvedAccPath+":"+joinStmt+" in "+analyzer.getMethod()+">";return"<"+resolvedAccPath+":"+joinStmt+" in " in "++analyzeranalyzer..getMethodgetMethod()+()+">""; }} @Override@Override








src/heros/fieldsens/Debugger.java








View file @ b651ea7e






......@@ -11,18 +11,23 @@









package heros.fieldsens;





















import heros.InterproceduralCFG;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> {










public interface Debugger<Field, Fact, Stmt, Method> {





















 public abstract void setICFG(I icfg);










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg);





















 public abstract void initialSeed(Stmt stmt);










 public void initialSeed(Stmt stmt);










 










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);





















 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver);










 










 










 public static class NullDebugger <Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










 public static class NullDebugger <Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 










 }














......@@ -30,6 +35,18 @@ public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 public void initialSeed(Stmt stmt) {










 










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 // TODO Auto-generated method stub










 










 }










 










 }










}




\ No newline at end of file












src/heros/fieldsens/Debugger.java








View file @ b651ea7e








src/heros/fieldsens/Debugger.java










View file @ b651ea7e


b651ea7e



......@@ -11,18 +11,23 @@









package heros.fieldsens;





















import heros.InterproceduralCFG;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> {










public interface Debugger<Field, Fact, Stmt, Method> {





















 public abstract void setICFG(I icfg);










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg);





















 public abstract void initialSeed(Stmt stmt);










 public void initialSeed(Stmt stmt);










 










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);





















 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver);










 










 










 public static class NullDebugger <Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










 public static class NullDebugger <Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 










 }














......@@ -30,6 +35,18 @@ public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 public void initialSeed(Stmt stmt) {










 










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 // TODO Auto-generated method stub










 










 }










 










 }










}




\ No newline at end of file






......@@ -11,18 +11,23 @@









package heros.fieldsens;





















import heros.InterproceduralCFG;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> {










public interface Debugger<Field, Fact, Stmt, Method> {





















 public abstract void setICFG(I icfg);










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg);





















 public abstract void initialSeed(Stmt stmt);










 public void initialSeed(Stmt stmt);










 










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);





















 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver);










 










 










 public static class NullDebugger <Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










 public static class NullDebugger <Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 










 }














......@@ -30,6 +35,18 @@ public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 public void initialSeed(Stmt stmt) {










 










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 // TODO Auto-generated method stub










 










 }










 










 }










}




\ No newline at end of file


package heros.fieldsens;packageheros.fieldsens;import heros.InterproceduralCFG;importheros.InterproceduralCFG;import heros.fieldsens.structs.WrappedFactAtStatement;importheros.fieldsens.structs.WrappedFactAtStatement;public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> {publicinterfaceDebugger<Field,Fact,Stmt,Method,, II extendsextends InterproceduralCFGInterproceduralCFG<<StmtStmt,, MethodMethod>>>{public interface Debugger<Field, Fact, Stmt, Method> {publicinterfaceDebugger<Field,Fact,Stmt,Method>{ public abstract void setICFG(I icfg);publicabstractabstract voidsetICFG(Iicfg); public void setICFG(InterproceduralCFG<Stmt, Method> icfg);publicvoidsetICFG(InterproceduralCFGnterproceduralCFG<<StmtStmt,, MethodMethod>>icfg); public abstract void initialSeed(Stmt stmt);publicabstractvoidinitialSeed(Stmtstmt); public void initialSeed(Stmt stmt);publicvoidinitialSeed(Stmtstmt);  public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);publicvoidedgeTo(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt); public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver);publicvoidnewResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,Resolver<Field,Fact,Stmt,Method>resolver);   public static class NullDebugger <Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {publicstaticclassNullDebugger<Field,Fact,Stmt,Method,, II extendsextends InterproceduralCFGInterproceduralCFG<<StmtStmt,, MethodMethod>>>implementsDebugger<Field,Fact,Stmt,Method,, II>{ public static class NullDebugger <Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {publicstaticclassNullDebugger<Field,Fact,Stmt,Method>implementsDebugger<Field,Fact,Stmt,Method>{ @Override@Override public void setICFG(I icfg) {publicvoidsetICFG(Iicfg){ public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {publicvoidsetICFG(InterproceduralCFGnterproceduralCFG<<StmtStmt,, MethodMethod>>icfg){  }} public void initialSeed(Stmt stmt) {publicvoidinitialSeed(Stmtstmt){  }} @Override@Override public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,publicvoidedgeTo(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt){  }} @Override@Override public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {publicvoidnewResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,Resolver<Field,Fact,Stmt,Method>resolver){ // TODO Auto-generated method stub// TODO Auto-generated method stub  }}  }}}}








src/heros/fieldsens/FieldSensitiveIFDSSolver.java








View file @ b651ea7e






......@@ -33,13 +33,13 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 private IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem;










 protected Context<FieldRef, D, N,M> context;










 private Debugger<FieldRef, D, N, M, I> debugger;










 private Debugger<FieldRef, D, N, M> debugger;










 private Scheduler scheduler;





















 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M> debugger, Scheduler scheduler) {










 this.tabulationProblem = tabulationProblem;










 this.scheduler = scheduler;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M>() : debugger;










 this.debugger.setICFG(tabulationProblem.interproceduralCFG());










 context = initContext(tabulationProblem, factHandler);










 submitInitialSeeds();



......@@ -57,7 +57,7 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur









 }










 










 protected MethodAnalyzer<FieldRef, D, N, M> createMethodAnalyzer(M method) {










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context);










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context, debugger);










 }





















 /**



......












src/heros/fieldsens/FieldSensitiveIFDSSolver.java








View file @ b651ea7e








src/heros/fieldsens/FieldSensitiveIFDSSolver.java










View file @ b651ea7e


b651ea7e



......@@ -33,13 +33,13 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 private IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem;










 protected Context<FieldRef, D, N,M> context;










 private Debugger<FieldRef, D, N, M, I> debugger;










 private Debugger<FieldRef, D, N, M> debugger;










 private Scheduler scheduler;





















 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M> debugger, Scheduler scheduler) {










 this.tabulationProblem = tabulationProblem;










 this.scheduler = scheduler;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M>() : debugger;










 this.debugger.setICFG(tabulationProblem.interproceduralCFG());










 context = initContext(tabulationProblem, factHandler);










 submitInitialSeeds();



......@@ -57,7 +57,7 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur









 }










 










 protected MethodAnalyzer<FieldRef, D, N, M> createMethodAnalyzer(M method) {










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context);










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context, debugger);










 }





















 /**



......






......@@ -33,13 +33,13 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 private IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem;










 protected Context<FieldRef, D, N,M> context;










 private Debugger<FieldRef, D, N, M, I> debugger;










 private Debugger<FieldRef, D, N, M> debugger;










 private Scheduler scheduler;





















 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M> debugger, Scheduler scheduler) {










 this.tabulationProblem = tabulationProblem;










 this.scheduler = scheduler;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M>() : debugger;










 this.debugger.setICFG(tabulationProblem.interproceduralCFG());










 context = initContext(tabulationProblem, factHandler);










 submitInitialSeeds();



......@@ -57,7 +57,7 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur









 }










 










 protected MethodAnalyzer<FieldRef, D, N, M> createMethodAnalyzer(M method) {










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context);










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context, debugger);










 }





















 /**



......


 private IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem;privateIFDSTabulationProblem<N,FieldRef,D,M,I>tabulationProblem; protected Context<FieldRef, D, N,M> context;protectedContext<FieldRef,D,N,M>context; private Debugger<FieldRef, D, N, M, I> debugger;privateDebugger<FieldRef,D,N,M,, II>debugger; private Debugger<FieldRef, D, N, M> debugger;privateDebugger<FieldRef,D,N,M>debugger; private Scheduler scheduler;privateSchedulerscheduler; public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {publicFieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I>tabulationProblem,FactMergeHandler<D>factHandler,Debugger<FieldRef,D,N,M,, II>debugger,Schedulerscheduler){ public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M> debugger, Scheduler scheduler) {publicFieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I>tabulationProblem,FactMergeHandler<D>factHandler,Debugger<FieldRef,D,N,M>debugger,Schedulerscheduler){ this.tabulationProblem = tabulationProblem;this.tabulationProblem=tabulationProblem; this.scheduler = scheduler;this.scheduler=scheduler; this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;this.debugger=debugger==null?newDebugger.NullDebugger<FieldRef,D,N,M,, II>():debugger; this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M>() : debugger;this.debugger=debugger==null?newDebugger.NullDebugger<FieldRef,D,N,M>():debugger; this.debugger.setICFG(tabulationProblem.interproceduralCFG());this.debugger.setICFG(tabulationProblem.interproceduralCFG()); context = initContext(tabulationProblem, factHandler);context=initContext(tabulationProblem,factHandler); submitInitialSeeds();submitInitialSeeds(); }}  protected MethodAnalyzer<FieldRef, D, N, M> createMethodAnalyzer(M method) {protectedMethodAnalyzer<FieldRef,D,N,M>createMethodAnalyzer(Mmethod){ return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context);returnnewMethodAnalyzerImpl<FieldRef,D,N,M>(method,context); return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context, debugger);returnnewMethodAnalyzerImpl<FieldRef,D,N,M>(method,context,, debuggerdebugger); }} /**/**








src/heros/fieldsens/MethodAnalyzerImpl.java








View file @ b651ea7e






......@@ -22,14 +22,16 @@ public class MethodAnalyzerImpl<Field,Fact, Stmt, Method>









 new DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Fact key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context) {










 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.debugger = debugger;










 }










 










 @Override



......












src/heros/fieldsens/MethodAnalyzerImpl.java








View file @ b651ea7e








src/heros/fieldsens/MethodAnalyzerImpl.java










View file @ b651ea7e


b651ea7e



......@@ -22,14 +22,16 @@ public class MethodAnalyzerImpl<Field,Fact, Stmt, Method>









 new DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Fact key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context) {










 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.debugger = debugger;










 }










 










 @Override



......






......@@ -22,14 +22,16 @@ public class MethodAnalyzerImpl<Field,Fact, Stmt, Method>









 new DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Fact key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context) {










 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.debugger = debugger;










 }










 










 @Override



......


 new DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {newDefaultValueMap<Fact,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>>(){ @Override@Override protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Fact key) {protectedPerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>createItem(Factkey){ return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context);returnnewPerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>(method,key,context); return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context, debugger);returnnewPerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>(method,key,context,, debuggerdebugger); }} };}; private Context<Field, Fact, Stmt, Method> context;privateContext<Field,Fact,Stmt,Method>context; private Debugger<Field, Fact, Stmt, Method> debugger;privateDebugger<Field,Fact,Stmt,Method>debugger; MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context) {MethodAnalyzerImpl(Methodmethod,Context<Field,Fact,Stmt,Method>context){ MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {MethodAnalyzerImpl(Methodmethod,Context<Field,Fact,Stmt,Method>context,, DebuggerDebugger<<FieldField,, FactFact,, StmtStmt,, MethodMethod>> debuggerdebugger){ this.method = method;this.method=method; this.context = context;this.context=context; this.debugger = debugger;this.debugger=debugger; }}  @Override@Override








src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ b651ea7e






......@@ -32,7 +32,7 @@ import com.google.common.collect.Lists;









import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {










public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {





















 private static final Logger logger = LoggerFactory.getLogger(PerAccessPathMethodAnalyzer.class);










 private Fact sourceFact;



......@@ -44,23 +44,25 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private CallEdgeResolver<Field, Fact, Stmt, Method> callEdgeResolver;










 private PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context) {










 this(method, sourceFact, context, new AccessPath<Field>(), null);










 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(method, sourceFact, context, debugger, new AccessPath<Field>(), null);










 }










 










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 this.debugger = debugger;










 if(method == null)










 throw new IllegalArgumentException("Method must be not null");










 this.parent = parent;



......@@ -69,16 +71,16 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 this.accessPath = accPath;










 this.context = context;










 if(parent == null) {










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this);










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler, debugger) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger);










 }










 else {










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, parent.callEdgeResolver);










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger, parent.callEdgeResolver);










 }










 log("initialized");










 }










 










 public PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createWithAccessPath(AccessPath<Field> accPath) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, accPath, this);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, debugger, accPath, this);










 }










 










 WrappedFact<Field, Fact, Stmt, Method> wrappedSource() {



......@@ -121,6 +123,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 log("Edge to "+factAtStmt);










 reachableStatements.put(factAtStmt, factAtStmt);










 context.scheduler.schedule(new Job(factAtStmt));










 debugger.edgeTo(this, factAtStmt);










 }










 }














......@@ -137,7 +140,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Method> calledMethods = context.icfg.getCalleesOfCallAt(factAtStmt.getStatement());










 for (Method calledMethod : calledMethods) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallFlowFunction(factAtStmt.getStatement(), calledMethod);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 MethodAnalyzer<Field, Fact, Stmt, Method> analyzer = context.getAnalyzer(calledMethod);



......@@ -162,7 +165,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(callSite);










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(callSite, method, factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 context.getAnalyzer(context.icfg.getMethodOf(callSite)).addUnbalancedReturnFlow(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()), callSite);



......@@ -174,7 +177,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 //instead we thus call the return flow function will a null caller










 if(callSites.isEmpty()) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(null, method, factAtStmt.getStatement(), null);










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 }










 }










 }



......@@ -194,7 +197,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(factAtStmt.getStatement());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallToReturnFlowFunction(factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()));



......@@ -223,7 +226,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private void processNormalNonJoiningFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 final List<Stmt> successors = context.icfg.getSuccsOf(factAtStmt.getStatement());










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getNormalFlowFunction(factAtStmt.getStatement());










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (final ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 if(targetFact.getConstraint() == null)










 scheduleEdgeTo(successors, targetFact.getFact());



......@@ -256,7 +259,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(incEdge.getCallSite());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(incEdge.getCallSite(), method, exitFact.getStatement(), returnSite);










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver()));










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targets) {










 context.factHandler.restoreCallingContext(targetFact.getFact().getFact(), incEdge.getCallerCallSiteFact().getFact());










 //TODO handle constraint



......@@ -314,6 +317,10 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 public CallEdgeResolver<Field, Fact, Stmt, Method> getCallEdgeResolver() {










 return callEdgeResolver;










 }





















 public Method getMethod() {










 return method;










 }










 










//	public void debugReachables() {










//		JsonDocument root = new JsonDocument();



......












src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ b651ea7e








src/heros/fieldsens/PerAccessPathMethodAnalyzer.java










View file @ b651ea7e


b651ea7e



......@@ -32,7 +32,7 @@ import com.google.common.collect.Lists;









import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {










public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {





















 private static final Logger logger = LoggerFactory.getLogger(PerAccessPathMethodAnalyzer.class);










 private Fact sourceFact;



......@@ -44,23 +44,25 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private CallEdgeResolver<Field, Fact, Stmt, Method> callEdgeResolver;










 private PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context) {










 this(method, sourceFact, context, new AccessPath<Field>(), null);










 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(method, sourceFact, context, debugger, new AccessPath<Field>(), null);










 }










 










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 this.debugger = debugger;










 if(method == null)










 throw new IllegalArgumentException("Method must be not null");










 this.parent = parent;



......@@ -69,16 +71,16 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 this.accessPath = accPath;










 this.context = context;










 if(parent == null) {










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this);










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler, debugger) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger);










 }










 else {










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, parent.callEdgeResolver);










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger, parent.callEdgeResolver);










 }










 log("initialized");










 }










 










 public PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createWithAccessPath(AccessPath<Field> accPath) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, accPath, this);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, debugger, accPath, this);










 }










 










 WrappedFact<Field, Fact, Stmt, Method> wrappedSource() {



......@@ -121,6 +123,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 log("Edge to "+factAtStmt);










 reachableStatements.put(factAtStmt, factAtStmt);










 context.scheduler.schedule(new Job(factAtStmt));










 debugger.edgeTo(this, factAtStmt);










 }










 }














......@@ -137,7 +140,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Method> calledMethods = context.icfg.getCalleesOfCallAt(factAtStmt.getStatement());










 for (Method calledMethod : calledMethods) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallFlowFunction(factAtStmt.getStatement(), calledMethod);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 MethodAnalyzer<Field, Fact, Stmt, Method> analyzer = context.getAnalyzer(calledMethod);



......@@ -162,7 +165,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(callSite);










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(callSite, method, factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 context.getAnalyzer(context.icfg.getMethodOf(callSite)).addUnbalancedReturnFlow(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()), callSite);



......@@ -174,7 +177,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 //instead we thus call the return flow function will a null caller










 if(callSites.isEmpty()) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(null, method, factAtStmt.getStatement(), null);










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 }










 }










 }



......@@ -194,7 +197,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(factAtStmt.getStatement());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallToReturnFlowFunction(factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()));



......@@ -223,7 +226,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private void processNormalNonJoiningFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 final List<Stmt> successors = context.icfg.getSuccsOf(factAtStmt.getStatement());










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getNormalFlowFunction(factAtStmt.getStatement());










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (final ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 if(targetFact.getConstraint() == null)










 scheduleEdgeTo(successors, targetFact.getFact());



......@@ -256,7 +259,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(incEdge.getCallSite());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(incEdge.getCallSite(), method, exitFact.getStatement(), returnSite);










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver()));










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targets) {










 context.factHandler.restoreCallingContext(targetFact.getFact().getFact(), incEdge.getCallerCallSiteFact().getFact());










 //TODO handle constraint



......@@ -314,6 +317,10 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 public CallEdgeResolver<Field, Fact, Stmt, Method> getCallEdgeResolver() {










 return callEdgeResolver;










 }





















 public Method getMethod() {










 return method;










 }










 










//	public void debugReachables() {










//		JsonDocument root = new JsonDocument();



......






......@@ -32,7 +32,7 @@ import com.google.common.collect.Lists;









import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {










public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {





















 private static final Logger logger = LoggerFactory.getLogger(PerAccessPathMethodAnalyzer.class);










 private Fact sourceFact;



......@@ -44,23 +44,25 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private CallEdgeResolver<Field, Fact, Stmt, Method> callEdgeResolver;










 private PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context) {










 this(method, sourceFact, context, new AccessPath<Field>(), null);










 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(method, sourceFact, context, debugger, new AccessPath<Field>(), null);










 }










 










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 this.debugger = debugger;










 if(method == null)










 throw new IllegalArgumentException("Method must be not null");










 this.parent = parent;



......@@ -69,16 +71,16 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 this.accessPath = accPath;










 this.context = context;










 if(parent == null) {










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this);










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler, debugger) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger);










 }










 else {










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, parent.callEdgeResolver);










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger, parent.callEdgeResolver);










 }










 log("initialized");










 }










 










 public PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createWithAccessPath(AccessPath<Field> accPath) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, accPath, this);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, debugger, accPath, this);










 }










 










 WrappedFact<Field, Fact, Stmt, Method> wrappedSource() {



......@@ -121,6 +123,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 log("Edge to "+factAtStmt);










 reachableStatements.put(factAtStmt, factAtStmt);










 context.scheduler.schedule(new Job(factAtStmt));










 debugger.edgeTo(this, factAtStmt);










 }










 }














......@@ -137,7 +140,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Method> calledMethods = context.icfg.getCalleesOfCallAt(factAtStmt.getStatement());










 for (Method calledMethod : calledMethods) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallFlowFunction(factAtStmt.getStatement(), calledMethod);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 MethodAnalyzer<Field, Fact, Stmt, Method> analyzer = context.getAnalyzer(calledMethod);



......@@ -162,7 +165,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(callSite);










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(callSite, method, factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 context.getAnalyzer(context.icfg.getMethodOf(callSite)).addUnbalancedReturnFlow(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()), callSite);



......@@ -174,7 +177,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 //instead we thus call the return flow function will a null caller










 if(callSites.isEmpty()) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(null, method, factAtStmt.getStatement(), null);










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 }










 }










 }



......@@ -194,7 +197,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(factAtStmt.getStatement());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallToReturnFlowFunction(factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()));



......@@ -223,7 +226,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private void processNormalNonJoiningFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 final List<Stmt> successors = context.icfg.getSuccsOf(factAtStmt.getStatement());










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getNormalFlowFunction(factAtStmt.getStatement());










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (final ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 if(targetFact.getConstraint() == null)










 scheduleEdgeTo(successors, targetFact.getFact());



......@@ -256,7 +259,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(incEdge.getCallSite());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(incEdge.getCallSite(), method, exitFact.getStatement(), returnSite);










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver()));










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targets) {










 context.factHandler.restoreCallingContext(targetFact.getFact().getFact(), incEdge.getCallerCallSiteFact().getFact());










 //TODO handle constraint



......@@ -314,6 +317,10 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 public CallEdgeResolver<Field, Fact, Stmt, Method> getCallEdgeResolver() {










 return callEdgeResolver;










 }





















 public Method getMethod() {










 return method;










 }










 










//	public void debugReachables() {










//		JsonDocument root = new JsonDocument();



......


import com.google.common.collect.Maps;importcom.google.common.collect.Maps;import com.google.common.collect.Sets;importcom.google.common.collect.Sets;class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {classPerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>{public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {publicpublic classPerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>{ private static final Logger logger = LoggerFactory.getLogger(PerAccessPathMethodAnalyzer.class);privatestaticfinalLoggerlogger=LoggerFactory.getLogger(PerAccessPathMethodAnalyzer.class); private Fact sourceFact;privateFactsourceFact; private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {privateDefaultValueMap<FactAtStatement<Fact,Stmt>,ReturnSiteResolver<Field,Fact,Stmt,Method>>returnSiteResolvers=newDefaultValueMap<FactAtStatement<Fact,Stmt>,ReturnSiteResolver<Field,Fact,Stmt,Method>>(){ @Override@Override protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {protectedReturnSiteResolver<Field,Fact,Stmt,Method>createItem(FactAtStatement<Fact,Stmt>key){ return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);returnnewReturnSiteResolver<Field,Fact,Stmt,Method>(context.factHandler,PerAccessPathMethodAnalyzer.this,key.stmt); return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);returnnewReturnSiteResolver<Field,Fact,Stmt,Method>(context.factHandler,PerAccessPathMethodAnalyzer.this,key.stmt,, debuggerdebugger); }} };}; private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {privateDefaultValueMap<FactAtStatement<Fact,Stmt>,ControlFlowJoinResolver<Field,Fact,Stmt,Method>>ctrFlowJoinResolvers=newDefaultValueMap<FactAtStatement<Fact,Stmt>,ControlFlowJoinResolver<Field,Fact,Stmt,Method>>(){ @Override@Override protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {protectedControlFlowJoinResolver<Field,Fact,Stmt,Method>createItem(FactAtStatement<Fact,Stmt>key){ return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);returnnewControlFlowJoinResolver<Field,Fact,Stmt,Method>(context.factHandler,PerAccessPathMethodAnalyzer.this,key.stmt); return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);returnnewControlFlowJoinResolver<Field,Fact,Stmt,Method>(context.factHandler,PerAccessPathMethodAnalyzer.this,key.stmt,, debuggerdebugger); }} };}; private CallEdgeResolver<Field, Fact, Stmt, Method> callEdgeResolver;privateCallEdgeResolver<Field,Fact,Stmt,Method>callEdgeResolver; private PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent;privatePerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>parent; private Debugger<Field, Fact, Stmt, Method> debugger;privateDebugger<Field,Fact,Stmt,Method>debugger; public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context) {publicPerAccessPathMethodAnalyzer(Methodmethod,FactsourceFact,Context<Field,Fact,Stmt,Method>context){ this(method, sourceFact, context, new AccessPath<Field>(), null);this(method,sourceFact,context,newAccessPath<Field>(),null); public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {publicPerAccessPathMethodAnalyzer(Methodmethod,FactsourceFact,Context<Field,Fact,Stmt,Method>context,, DebuggerDebugger<<FieldField,, FactFact,, StmtStmt,, MethodMethod>> debuggerdebugger){ this(method, sourceFact, context, debugger, new AccessPath<Field>(), null);this(method,sourceFact,context,debuggerdebugger,, newAccessPath<Field>(),null); }}  private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {privatePerAccessPathMethodAnalyzer(Methodmethod,FactsourceFact,Context<Field,Fact,Stmt,Method>context,AccessPath<Field>accPath,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>parent){ private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {privatePerAccessPathMethodAnalyzer(Methodmethod,FactsourceFact,Context<Field,Fact,Stmt,Method>context,Debugger<Field,Fact,Stmt,Method>debugger,AccessPath<Field>accPath,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>parent){ this.debugger = debugger;this.debugger=debugger; if(method == null)if(method==null) throw new IllegalArgumentException("Method must be not null");thrownewIllegalArgumentException("Method must be not null"); this.parent = parent;this.parent=parent; this.accessPath = accPath;this.accessPath=accPath; this.context = context;this.context=context; if(parent == null) {if(parent==null){ this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this);this.callEdgeResolver=isZeroSource()?newZeroCallEdgeResolver<Field,Fact,Stmt,Method>(this,context.zeroHandler):newCallEdgeResolver<Field,Fact,Stmt,Method>(this); this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler, debugger) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger);this.callEdgeResolver=isZeroSource()?newZeroCallEdgeResolver<Field,Fact,Stmt,Method>(this,context.zeroHandler,, debuggerdebugger):newCallEdgeResolver<Field,Fact,Stmt,Method>(this,, debuggerdebugger); }} else {else{ this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, parent.callEdgeResolver);this.callEdgeResolver=isZeroSource()?parent.callEdgeResolver:newCallEdgeResolver<Field,Fact,Stmt,Method>(this,parent.callEdgeResolver); this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger, parent.callEdgeResolver);this.callEdgeResolver=isZeroSource()?parent.callEdgeResolver:newCallEdgeResolver<Field,Fact,Stmt,Method>(this,debuggerdebugger,, parent.callEdgeResolver); }} log("initialized");log("initialized"); }}  public PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createWithAccessPath(AccessPath<Field> accPath) {publicPerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>createWithAccessPath(AccessPath<Field>accPath){ return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, accPath, this);returnnewPerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>(method,sourceFact,context,accPath,this); return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, debugger, accPath, this);returnnewPerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>(method,sourceFact,context,debuggerdebugger,, accPath,this); }}  WrappedFact<Field, Fact, Stmt, Method> wrappedSource() {WrappedFact<Field,Fact,Stmt,Method>wrappedSource(){ log("Edge to "+factAtStmt);log("Edge to "+factAtStmt); reachableStatements.put(factAtStmt, factAtStmt);reachableStatements.put(factAtStmt,factAtStmt); context.scheduler.schedule(new Job(factAtStmt));context.scheduler.schedule(newJob(factAtStmt)); debugger.edgeTo(this, factAtStmt);debugger.edgeTo(this,factAtStmt); }} }} Collection<Method> calledMethods = context.icfg.getCalleesOfCallAt(factAtStmt.getStatement());Collection<Method>calledMethods=context.icfg.getCalleesOfCallAt(factAtStmt.getStatement()); for (Method calledMethod : calledMethods) {for(MethodcalledMethod:calledMethods){ FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallFlowFunction(factAtStmt.getStatement(), calledMethod);FlowFunction<Field,Fact,Stmt,Method>flowFunction=context.flowFunctions.getCallFlowFunction(factAtStmt.getStatement(),calledMethod); Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));Collection<ConstrainedFact<Field,Fact,Stmt,Method>>targetFacts=flowFunction.computeTargets(factAtStmt.getFact(),newAccessPathHandler<Field,Fact,Stmt,Method>(factAtStmt.getAccessPath(),factAtStmt.getResolver())); Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));Collection<ConstrainedFact<Field,Fact,Stmt,Method>>targetFacts=flowFunction.computeTargets(factAtStmt.getFact(),newAccessPathHandler<Field,Fact,Stmt,Method>(factAtStmt.getAccessPath(),factAtStmt.getResolver(),, debuggerdebugger)); for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {for(ConstrainedFact<Field,Fact,Stmt,Method>targetFact:targetFacts){ //TODO handle constraint//TODO handle constraint MethodAnalyzer<Field, Fact, Stmt, Method> analyzer = context.getAnalyzer(calledMethod);MethodAnalyzer<Field,Fact,Stmt,Method>analyzer=context.getAnalyzer(calledMethod); Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(callSite);Collection<Stmt>returnSites=context.icfg.getReturnSitesOfCallAt(callSite); for(Stmt returnSite : returnSites) {for(StmtreturnSite:returnSites){ FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(callSite, method, factAtStmt.getStatement(), returnSite);FlowFunction<Field,Fact,Stmt,Method>flowFunction=context.flowFunctions.getReturnFlowFunction(callSite,method,factAtStmt.getStatement(),returnSite); Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));Collection<ConstrainedFact<Field,Fact,Stmt,Method>>targetFacts=flowFunction.computeTargets(factAtStmt.getFact(),newAccessPathHandler<Field,Fact,Stmt,Method>(factAtStmt.getAccessPath(),factAtStmt.getResolver())); Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));Collection<ConstrainedFact<Field,Fact,Stmt,Method>>targetFacts=flowFunction.computeTargets(factAtStmt.getFact(),newAccessPathHandler<Field,Fact,Stmt,Method>(factAtStmt.getAccessPath(),factAtStmt.getResolver(),, debuggerdebugger)); for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {for(ConstrainedFact<Field,Fact,Stmt,Method>targetFact:targetFacts){ //TODO handle constraint//TODO handle constraint context.getAnalyzer(context.icfg.getMethodOf(callSite)).addUnbalancedReturnFlow(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()), callSite);context.getAnalyzer(context.icfg.getMethodOf(callSite)).addUnbalancedReturnFlow(newWrappedFactAtStatement<Field,Fact,Stmt,Method>(returnSite,targetFact.getFact()),callSite); //instead we thus call the return flow function will a null caller//instead we thus call the return flow function will a null caller if(callSites.isEmpty()) {if(callSites.isEmpty()){ FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(null, method, factAtStmt.getStatement(), null);FlowFunction<Field,Fact,Stmt,Method>flowFunction=context.flowFunctions.getReturnFlowFunction(null,method,factAtStmt.getStatement(),null); flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));flowFunction.computeTargets(factAtStmt.getFact(),newAccessPathHandler<Field,Fact,Stmt,Method>(factAtStmt.getAccessPath(),factAtStmt.getResolver())); flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));flowFunction.computeTargets(factAtStmt.getFact(),newAccessPathHandler<Field,Fact,Stmt,Method>(factAtStmt.getAccessPath(),factAtStmt.getResolver(),, debuggerdebugger)); }} }} }} Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(factAtStmt.getStatement());Collection<Stmt>returnSites=context.icfg.getReturnSitesOfCallAt(factAtStmt.getStatement()); for(Stmt returnSite : returnSites) {for(StmtreturnSite:returnSites){ FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallToReturnFlowFunction(factAtStmt.getStatement(), returnSite);FlowFunction<Field,Fact,Stmt,Method>flowFunction=context.flowFunctions.getCallToReturnFlowFunction(factAtStmt.getStatement(),returnSite); Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));Collection<ConstrainedFact<Field,Fact,Stmt,Method>>targetFacts=flowFunction.computeTargets(factAtStmt.getFact(),newAccessPathHandler<Field,Fact,Stmt,Method>(factAtStmt.getAccessPath(),factAtStmt.getResolver())); Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));Collection<ConstrainedFact<Field,Fact,Stmt,Method>>targetFacts=flowFunction.computeTargets(factAtStmt.getFact(),newAccessPathHandler<Field,Fact,Stmt,Method>(factAtStmt.getAccessPath(),factAtStmt.getResolver(),, debuggerdebugger)); for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {for(ConstrainedFact<Field,Fact,Stmt,Method>targetFact:targetFacts){ //TODO handle constraint//TODO handle constraint scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()));scheduleEdgeTo(newWrappedFactAtStatement<Field,Fact,Stmt,Method>(returnSite,targetFact.getFact())); private void processNormalNonJoiningFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {privatevoidprocessNormalNonJoiningFlow(WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt){ final List<Stmt> successors = context.icfg.getSuccsOf(factAtStmt.getStatement());finalList<Stmt>successors=context.icfg.getSuccsOf(factAtStmt.getStatement()); FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getNormalFlowFunction(factAtStmt.getStatement());FlowFunction<Field,Fact,Stmt,Method>flowFunction=context.flowFunctions.getNormalFlowFunction(factAtStmt.getStatement()); Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));Collection<ConstrainedFact<Field,Fact,Stmt,Method>>targetFacts=flowFunction.computeTargets(factAtStmt.getFact(),newAccessPathHandler<Field,Fact,Stmt,Method>(factAtStmt.getAccessPath(),factAtStmt.getResolver())); Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));Collection<ConstrainedFact<Field,Fact,Stmt,Method>>targetFacts=flowFunction.computeTargets(factAtStmt.getFact(),newAccessPathHandler<Field,Fact,Stmt,Method>(factAtStmt.getAccessPath(),factAtStmt.getResolver(),, debuggerdebugger)); for (final ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {for(finalConstrainedFact<Field,Fact,Stmt,Method>targetFact:targetFacts){ if(targetFact.getConstraint() == null)if(targetFact.getConstraint()==null) scheduleEdgeTo(successors, targetFact.getFact());scheduleEdgeTo(successors,targetFact.getFact()); Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(incEdge.getCallSite());Collection<Stmt>returnSites=context.icfg.getReturnSitesOfCallAt(incEdge.getCallSite()); for(Stmt returnSite : returnSites) {for(StmtreturnSite:returnSites){ FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(incEdge.getCallSite(), method, exitFact.getStatement(), returnSite);FlowFunction<Field,Fact,Stmt,Method>flowFunction=context.flowFunctions.getReturnFlowFunction(incEdge.getCallSite(),method,exitFact.getStatement(),returnSite); Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver()));Set<ConstrainedFact<Field,Fact,Stmt,Method>>targets=flowFunction.computeTargets(exitFact.getFact(),newAccessPathHandler<Field,Fact,Stmt,Method>(exitFact.getAccessPath(),exitFact.getResolver())); Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver(), debugger));Set<ConstrainedFact<Field,Fact,Stmt,Method>>targets=flowFunction.computeTargets(exitFact.getFact(),newAccessPathHandler<Field,Fact,Stmt,Method>(exitFact.getAccessPath(),exitFact.getResolver(),, debuggerdebugger)); for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targets) {for(ConstrainedFact<Field,Fact,Stmt,Method>targetFact:targets){ context.factHandler.restoreCallingContext(targetFact.getFact().getFact(), incEdge.getCallerCallSiteFact().getFact());context.factHandler.restoreCallingContext(targetFact.getFact().getFact(),incEdge.getCallerCallSiteFact().getFact()); //TODO handle constraint//TODO handle constraint public CallEdgeResolver<Field, Fact, Stmt, Method> getCallEdgeResolver() {publicCallEdgeResolver<Field,Fact,Stmt,Method>getCallEdgeResolver(){ return callEdgeResolver;returncallEdgeResolver; }} public Method getMethod() {publicMethodgetMethod(){ return method;returnmethod; }} //	public void debugReachables() {//	public void debugReachables() {//		JsonDocument root = new JsonDocument();//		JsonDocument root = new JsonDocument();








src/heros/fieldsens/ResolverTemplate.java








View file @ b651ea7e






......@@ -26,11 +26,14 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();










 protected Debugger<Field, Fact, Stmt, Method> debugger;





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent) {










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer);










 this.parent = parent;










 this.debugger = debugger;










 debugger.newResolver(analyzer, this);










 }










 










 protected boolean isLocked() {



......












src/heros/fieldsens/ResolverTemplate.java








View file @ b651ea7e








src/heros/fieldsens/ResolverTemplate.java










View file @ b651ea7e


b651ea7e



......@@ -26,11 +26,14 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();










 protected Debugger<Field, Fact, Stmt, Method> debugger;





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent) {










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer);










 this.parent = parent;










 this.debugger = debugger;










 debugger.newResolver(analyzer, this);










 }










 










 protected boolean isLocked() {



......






......@@ -26,11 +26,14 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();










 protected Debugger<Field, Fact, Stmt, Method> debugger;





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent) {










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer);










 this.parent = parent;










 this.debugger = debugger;










 debugger.newResolver(analyzer, this);










 }










 










 protected boolean isLocked() {



......


 protected Set<Incoming> incomingEdges = Sets.newHashSet();protectedSet<Incoming>incomingEdges=Sets.newHashSet(); private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;privateResolverTemplate<Field,Fact,Stmt,Method,Incoming>parent; private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();privateMap<AccessPath<Field>,ResolverTemplate<Field,Fact,Stmt,Method,Incoming>>nestedResolvers=Maps.newHashMap(); protected Debugger<Field, Fact, Stmt, Method> debugger;protectedDebugger<Field,Fact,Stmt,Method>debugger; public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, publicResolverTemplate(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer, ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent) {ResolverTemplate<Field,Fact,Stmt,Method,Incoming>parent){ ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, Debugger<Field, Fact, Stmt, Method> debugger) {ResolverTemplate<Field,Fact,Stmt,Method,Incoming>parent,, DebuggerDebugger<<FieldField,, FactFact,, StmtStmt,, MethodMethod>> debuggerdebugger){ super(analyzer);super(analyzer); this.parent = parent;this.parent=parent; this.debugger = debugger;this.debugger=debugger; debugger.newResolver(analyzer, this);debugger.newResolver(analyzer,this); }}  protected boolean isLocked() {protectedbooleanisLocked(){








src/heros/fieldsens/ReturnSiteResolver.java








View file @ b651ea7e






......@@ -25,15 +25,15 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(factMergeHandler, analyzer, returnSite, null, new AccessPath<Field>(), null);










 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, returnSite, null, debugger, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated = false;










 }





















 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 Fact sourceFact, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.sourceFact = sourceFact;



......@@ -43,7 +43,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 










 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+returnSite+">";










 return "<"+resolvedAccPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 @Override



......@@ -85,7 +85,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, newAccPath, this);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, debugger, newAccPath, this);










 }










 










 public Stmt getReturnSite() {



......












src/heros/fieldsens/ReturnSiteResolver.java








View file @ b651ea7e








src/heros/fieldsens/ReturnSiteResolver.java










View file @ b651ea7e


b651ea7e



......@@ -25,15 +25,15 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(factMergeHandler, analyzer, returnSite, null, new AccessPath<Field>(), null);










 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, returnSite, null, debugger, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated = false;










 }





















 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 Fact sourceFact, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.sourceFact = sourceFact;



......@@ -43,7 +43,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 










 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+returnSite+">";










 return "<"+resolvedAccPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 @Override



......@@ -85,7 +85,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, newAccPath, this);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, debugger, newAccPath, this);










 }










 










 public Stmt getReturnSite() {



......






......@@ -25,15 +25,15 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(factMergeHandler, analyzer, returnSite, null, new AccessPath<Field>(), null);










 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, returnSite, null, debugger, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated = false;










 }





















 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 Fact sourceFact, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.sourceFact = sourceFact;



......@@ -43,7 +43,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 










 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+returnSite+">";










 return "<"+resolvedAccPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 @Override



......@@ -85,7 +85,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, newAccPath, this);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, debugger, newAccPath, this);










 }










 










 public Stmt getReturnSite() {



......


 private Fact sourceFact;privateFactsourceFact; private FactMergeHandler<Fact> factMergeHandler;privateFactMergeHandler<Fact>factMergeHandler; public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {publicReturnSiteResolver(FactMergeHandler<Fact>factMergeHandler,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtreturnSite){ this(factMergeHandler, analyzer, returnSite, null, new AccessPath<Field>(), null);this(factMergeHandler,analyzer,returnSite,null,newAccessPath<Field>(),null); public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, Debugger<Field, Fact, Stmt, Method> debugger) {publicReturnSiteResolver(FactMergeHandler<Fact>factMergeHandler,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtreturnSite,, DebuggerDebugger<<FieldField,, FactFact,, StmtStmt,, MethodMethod>> debuggerdebugger){ this(factMergeHandler, analyzer, returnSite, null, debugger, new AccessPath<Field>(), null);this(factMergeHandler,analyzer,returnSite,null,debuggerdebugger,, newAccessPath<Field>(),null); this.factMergeHandler = factMergeHandler;this.factMergeHandler=factMergeHandler; propagated = false;propagated=false; }} private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, privateReturnSiteResolver(FactMergeHandler<Fact>factMergeHandler,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtreturnSite, Fact sourceFact, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {FactsourceFact,AccessPath<Field>resolvedAccPath,ReturnSiteResolver<Field,Fact,Stmt,Method>parent){ super(analyzer, parent);super(analyzer,parent); Fact sourceFact, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {FactsourceFact,DebuggerDebugger<<FieldField,, FactFact,, StmtStmt,, MethodMethod>> debuggerdebugger,, AccessPath<Field>resolvedAccPath,ReturnSiteResolver<Field,Fact,Stmt,Method>parent){ super(analyzer, parent, debugger);super(analyzer,parent,, debuggerdebugger); this.factMergeHandler = factMergeHandler;this.factMergeHandler=factMergeHandler; this.returnSite = returnSite;this.returnSite=returnSite; this.sourceFact = sourceFact;this.sourceFact=sourceFact;  @Override@Override public String toString() {publicStringtoString(){ return "<"+resolvedAccPath+":"+returnSite+">";return"<"+resolvedAccPath+":"+returnSite+">"; return "<"+resolvedAccPath+":"+returnSite+" in "+analyzer.getMethod()+">";return"<"+resolvedAccPath+":"+returnSite+" in " in "++analyzeranalyzer..getMethodgetMethod()+()+">""; }}  @Override@Override @Override@Override protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {protectedResolverTemplate<Field,Fact,Stmt,Method,ReturnEdge<Field,Fact,Stmt,Method>>createNestedResolver(AccessPath<Field>newAccPath){ return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, newAccPath, this);returnnewReturnSiteResolver<Field,Fact,Stmt,Method>(factMergeHandler,analyzer,returnSite,sourceFact,newAccPath,this); return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, debugger, newAccPath, this);returnnewReturnSiteResolver<Field,Fact,Stmt,Method>(factMergeHandler,analyzer,returnSite,sourceFact,debuggerdebugger,, newAccPath,this); }}  public Stmt getReturnSite() {publicStmtgetReturnSite(){








src/heros/fieldsens/SourceStmtAnnotatedMethodAnalyzer.java








View file @ b651ea7e






......@@ -21,18 +21,21 @@ public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>









 private Method method;










 private DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {





















 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Key<Fact, Stmt> key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Synchronizer<Stmt> synchronizer;










 private Debugger<Field, Fact, Stmt, Method> debugger;










 










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer) {










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.synchronizer = synchronizer;










 this.debugger = debugger;










 }










 










 @Override



......












src/heros/fieldsens/SourceStmtAnnotatedMethodAnalyzer.java








View file @ b651ea7e








src/heros/fieldsens/SourceStmtAnnotatedMethodAnalyzer.java










View file @ b651ea7e


b651ea7e



......@@ -21,18 +21,21 @@ public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>









 private Method method;










 private DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {





















 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Key<Fact, Stmt> key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Synchronizer<Stmt> synchronizer;










 private Debugger<Field, Fact, Stmt, Method> debugger;










 










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer) {










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.synchronizer = synchronizer;










 this.debugger = debugger;










 }










 










 @Override



......






......@@ -21,18 +21,21 @@ public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>









 private Method method;










 private DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {





















 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Key<Fact, Stmt> key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Synchronizer<Stmt> synchronizer;










 private Debugger<Field, Fact, Stmt, Method> debugger;










 










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer) {










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.synchronizer = synchronizer;










 this.debugger = debugger;










 }










 










 @Override



......


 private Method method;privateMethodmethod; private DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = privateDefaultValueMap<Key<Fact,Stmt>,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>>perSourceAnalyzer= new DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {newDefaultValueMap<Key<Fact,Stmt>,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>>(){ @Override@Override protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Key<Fact, Stmt> key) {protectedPerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>createItem(Key<Fact,Stmt>key){ return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context);returnnewPerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>(method,key.fact,context); return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context, debugger);returnnewPerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>(method,key.fact,context,, debuggerdebugger); }} };}; private Context<Field, Fact, Stmt, Method> context;privateContext<Field,Fact,Stmt,Method>context; private Synchronizer<Stmt> synchronizer;privateSynchronizer<Stmt>synchronizer; private Debugger<Field, Fact, Stmt, Method> debugger;privateDebugger<Field,Fact,Stmt,Method>debugger;  public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer) {publicSourceStmtAnnotatedMethodAnalyzer(Methodmethod,Context<Field,Fact,Stmt,Method>context,Synchronizer<Stmt>synchronizer){ public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer, Debugger<Field, Fact, Stmt, Method> debugger) {publicSourceStmtAnnotatedMethodAnalyzer(Methodmethod,Context<Field,Fact,Stmt,Method>context,Synchronizer<Stmt>synchronizer,, DebuggerDebugger<<FieldField,, FactFact,, StmtStmt,, MethodMethod>> debuggerdebugger){ this.method = method;this.method=method; this.context = context;this.context=context; this.synchronizer = synchronizer;this.synchronizer=synchronizer; this.debugger = debugger;this.debugger=debugger; }}  @Override@Override








src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ b651ea7e






......@@ -16,8 +16,8 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes




















 private ZeroHandler<Field> zeroHandler;





















 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler) {










 super(analyzer);










 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler, Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer, debugger);










 this.zeroHandler = zeroHandler;










 }














......












src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ b651ea7e








src/heros/fieldsens/ZeroCallEdgeResolver.java










View file @ b651ea7e


b651ea7e



......@@ -16,8 +16,8 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes




















 private ZeroHandler<Field> zeroHandler;





















 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler) {










 super(analyzer);










 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler, Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer, debugger);










 this.zeroHandler = zeroHandler;










 }














......






......@@ -16,8 +16,8 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes




















 private ZeroHandler<Field> zeroHandler;





















 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler) {










 super(analyzer);










 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler, Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer, debugger);










 this.zeroHandler = zeroHandler;










 }














......


 private ZeroHandler<Field> zeroHandler;privateZeroHandler<Field>zeroHandler; public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler) {publicZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,ZeroHandler<Field>zeroHandler){ super(analyzer);super(analyzer); public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler, Debugger<Field, Fact, Stmt, Method> debugger) {publicZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,ZeroHandler<Field>zeroHandler,, DebuggerDebugger<<FieldField,, FactFact,, StmtStmt,, MethodMethod>> debuggerdebugger){ super(analyzer, debugger);super(analyzer,, debuggerdebugger); this.zeroHandler = zeroHandler;this.zeroHandler=zeroHandler; }}









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






