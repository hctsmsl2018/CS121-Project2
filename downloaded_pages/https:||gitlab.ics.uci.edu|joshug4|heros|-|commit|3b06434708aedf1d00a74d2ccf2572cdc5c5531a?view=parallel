



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

3b064347















Commit
3b064347


authored
Oct 22, 2014
by


Johannes Lerch



Browse files




use of abstracted summaries







parent
f5ac702c













Changes
9




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPathUtil.java



0 → 100644







View file @ 3b064347














/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros.alias;



















public class AccessPathUtil {



















 public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {









 if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))









 return false; 









 









 FieldReference[] prefixAccessPath = prefixCandidate.getAccessPath();









 FieldReference[] factAccessPath = fact.getAccessPath();









 if(prefixAccessPath.length > factAccessPath.length)









 return false;









 









 for(int i=0; i<prefixAccessPath.length; i++) {









 if(!prefixAccessPath[i].equals(factAccessPath[i]))









 return false;









 }









 









 return true;









 }









 









 public static <D extends FieldSensitiveFact<?, D>> D applyAbstractedSummary(D sourceFact, SummaryEdge<D, ?> summary) {









 if(!isPrefixOf(summary.getSourceFact(), sourceFact))









 throw new IllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'", summary, sourceFact));









 









 FieldReference[] abstractAccessPath = summary.getSourceFact().getAccessPath();









 FieldReference[] concreteAccessPath = sourceFact.getAccessPath();









 FieldReference[] targetAccessPath = summary.getTargetFact().getAccessPath();









 









 FieldReference[] resultAccessPath = new FieldReference[targetAccessPath.length + concreteAccessPath.length - abstractAccessPath.length];



















 //copy old access path









 System.arraycopy(targetAccessPath, 0, resultAccessPath, 0, targetAccessPath.length);









 









 //copy delta access path that was omitted while creating the abstracted source fact









 System.arraycopy(concreteAccessPath, abstractAccessPath.length, resultAccessPath, targetAccessPath.length, concreteAccessPath.length - abstractAccessPath.length);









 









 return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);









 }









}















src/heros/alias/FieldReference.java








View file @ 3b064347












/*******************************************************************************





/*******************************************************************************







 * Copyright (c) 2014 Eric Bodden.





 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.







 * All rights reserved. This program and the accompanying materials





 * All rights reserved. This program and the accompanying materials







 * are made available under the terms of the GNU Lesser Public License v2.1





 * are made available under the terms of the GNU Lesser Public License v2.1







 * which accompanies this distribution, and is available at





 * which accompanies this distribution, and is available at







 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html





 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html







 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Johannes Lerch, Johannes Späth - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















......















src/heros/alias/FieldSensitiveFact.java








View file @ 3b064347












/*******************************************************************************





/*******************************************************************************







 * Copyright (c) 2014 Eric Bodden.





 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.







 * All rights reserved. This program and the accompanying materials





 * All rights reserved. This program and the accompanying materials







 * are made available under the terms of the GNU Lesser Public License v2.1





 * are made available under the terms of the GNU Lesser Public License v2.1







 * which accompanies this distribution, and is available at





 * which accompanies this distribution, and is available at







 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html





 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html







 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Johannes Lerch, Johannes Späth - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















......















src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 3b064347












/*******************************************************************************





/*******************************************************************************







 * Copyright (c) 2014 Eric Bodden.





 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.







 * All rights reserved. This program and the accompanying materials





 * All rights reserved. This program and the accompanying materials







 * are made available under the terms of the GNU Lesser Public License v2.1





 * are made available under the terms of the GNU Lesser Public License v2.1







 * which accompanies this distribution, and is available at





 * which accompanies this distribution, and is available at







 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html





 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html







 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Johannes Lerch, Johannes Späth - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















...@@ -24,7 +24,9 @@ import java.util.concurrent.TimeUnit;
...@@ -24,7 +24,9 @@ import java.util.concurrent.TimeUnit;






import org.slf4j.Logger;





import org.slf4j.Logger;







import org.slf4j.LoggerFactory;





import org.slf4j.LoggerFactory;























import com.google.common.base.Predicate;







import com.google.common.cache.CacheBuilder;





import com.google.common.cache.CacheBuilder;









import com.google.common.collect.Sets;





















import heros.DontSynchronize;





import heros.DontSynchronize;







import heros.FlowFunction;





import heros.FlowFunction;



...@@ -63,14 +65,14 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -63,14 +65,14 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //stores summaries that were queried before they were computed





 //stores summaries that were queried before they were computed







 //see CC 2010 paper by Naeem, Lhotak and Rodriguez





 //see CC 2010 paper by Naeem, Lhotak and Rodriguez







 @SynchronizedBy("consistent lock on 'incoming'")





 @SynchronizedBy("consistent lock on 'incoming'")







 protected final MyConcurrentHashMap<Pair<M,D>,Set<Pair<N,D>>> endSummary =





 protected final MyConcurrentHashMap<M,Set<SummaryEdge<D, N>>> endSummary =







 new MyConcurrentHashMap<Pair<M,D>, Set<Pair<N,D>>>();





 new MyConcurrentHashMap<M, Set<SummaryEdge<D, N>>>();







 





 







 //edges going along calls





 //edges going along calls







 //see CC 2010 paper by Naeem, Lhotak and Rodriguez





 //see CC 2010 paper by Naeem, Lhotak and Rodriguez







 @SynchronizedBy("consistent lock on field")





 @SynchronizedBy("consistent lock on field")







 protected final MyConcurrentHashMap<M, MyConcurrentHashMap<D,MyConcurrentHashMap<N,Map<D, D>>>> incoming =





 protected final MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>> incoming =







 new MyConcurrentHashMap<M, MyConcurrentHashMap<D,MyConcurrentHashMap<N,Map<D, D>>>>();





 new MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>>();







 





 







 @DontSynchronize("stateless")





 @DontSynchronize("stateless")







 protected final FlowFunctions<N, D, M> flowFunctions;





 protected final FlowFunctions<N, D, M> flowFunctions;



...@@ -229,36 +231,34 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -229,36 +231,34 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //for each callee's start point(s)





 //for each callee's start point(s)







 for(N sP: startPointsOf) {





 for(N sP: startPointsOf) {







 //create initial self-loop





 //create initial self-loop







 D abstractStartPointFact = d3.cloneWithAccessPath(new FieldReference.Any());





 D abstractStartPointFact = d3.cloneWithAccessPath();







 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15





 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15







 }





 }







 





 







 //register the fact that <sp,d3> has an incoming edge from <n,d2>





 //register the fact that <sp,d3> has an incoming edge from <n,d2>







 //line 15.1 of Naeem/Lhotak/Rodriguez





 //line 15.1 of Naeem/Lhotak/Rodriguez







 if (!addIncoming(sCalledProcN,d3,n,d1,d2))





 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3,n,d1,d2)))







 continue;





 continue;







 





 







 //TODO: Resume edges that are on hold and match this d3





 //TODO: Resume edges that are on hold and match this d3







 





 







 //line 15.2





 //line 15.2







 //TODO: include more abstract d3 summaries as well





 Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3);







 Set<Pair<N, D>> endSumm = endSummary(sCalledProcN, d3);









 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez







 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,





 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,







 //create new caller-side jump functions to the return sites





 //create new caller-side jump functions to the return sites







 //because we have observed a potentially new incoming edge into <sP,d3>





 //because we have observed a potentially new incoming edge into <sP,d3>







 if (endSumm != null)





 if (endSumm != null)







 for(Pair<N, D> entry: endSumm) {





 for(SummaryEdge<D, N> summary: endSumm) {







 N eP = entry.getO1();





 D d4 = AccessPathUtil.applyAbstractedSummary(d3, summary);







 D d4 = entry.getO2();





 







 //for each return site





 //for each return site







 for(N retSiteN: returnSiteNs) {





 for(N retSiteN: returnSiteNs) {







 //compute return-flow function





 //compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);







 //for each target value of the function





 //for each target value of the function







 //TODO: Map abstracted d4 back (using the summary)





 for(D d5: computeReturnFlowFunction(retFunction, d4, n)) {







 for(D d5: computeReturnFlowFunction(retFunction, d4, n, Collections.singleton(d2))) {









 // If we have not changed anything in the callee, we do not need the facts





 // If we have not changed anything in the callee, we do not need the facts







 // from there. Even if we change something: If we don't need the concrete





 // from there. Even if we change something: If we don't need the concrete







 // path, we can skip the callee in the predecessor chain





 // path, we can skip the callee in the predecessor chain



...@@ -332,42 +332,30 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -332,42 +332,30 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 





 







 //line 21.1 of Naeem/Lhotak/Rodriguez





 //line 21.1 of Naeem/Lhotak/Rodriguez







 //register end-summary





 //register end-summary







 if (!addEndSummary(methodThatNeedsSummary, d1, n, d2))





 SummaryEdge<D, N> summaryEdge = new SummaryEdge<D, N>(d1, n, d2);









 if (!addEndSummary(methodThatNeedsSummary, summaryEdge))







 return;





 return;







 





 







 //TODO: include more abstract d1 values in incoming set





 Set<IncomingEdge<D, N>> inc = incoming(methodThatNeedsSummary, d1);







 Map<N,Map<D, D>> inc = incoming(d1, methodThatNeedsSummary);









 





 







 //for each incoming call edge already processed





 //for each incoming call edge already processed







 //(see processCall(..))





 //(see processCall(..))







 if (inc != null)





 if (inc != null)







 for (Entry<N,Map<D, D>> entry: inc.entrySet()) {





 for (IncomingEdge<D, N> incomingEdge : inc) {







 //line 22





 // line 22







 N c = entry.getKey();





 N callSite = incomingEdge.getCallSite();







 //for each return site





 // for each return site







 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {





 for (N retSiteC : icfg.getReturnSitesOfCallAt(callSite)) {







 //compute return-flow function





 // compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);







 //TODO: create concrete d2, this d2 is currently an abstracted version





 D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);







 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, entry.getValue().keySet());





 Set<D> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);







 //for each incoming-call value













 for(D d4: entry.getValue().keySet())





 // for each incoming-call value







 for(D d5: targets) {





 for (D callerTargetFact : callerTargetFacts) {







 // If we have not changed anything in the callee, we do not need the facts





 callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetFact);







 // from there. Even if we change something: If we don't need the concrete





 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);







 // path, we can skip the callee in the predecessor chain





 }







 D d5p = d5;









 /*	D predVal = entry.getValue().get(d4);









							if (d5.equals(predVal))









								d5p = predVal;









							else if (setJumpPredecessors)









								d5.setPredecessor(predVal);*/









 









 // Set the calling context









 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5p);









 









 propagate(d4, retSiteC, d5p_restoredCtx, c, false);









 }









 }





 }







 }





 }







 





 



...@@ -379,7 +367,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -379,7 +367,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 for(N c: callers) {





 for(N c: callers) {







 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {





 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);







 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, Collections.singleton(zeroValue));





 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c);







 for(D d5: targets)





 for(D d5: targets)







 propagate(zeroValue, retSiteC, d5, c, true);





 propagate(zeroValue, retSiteC, d5, c, true);







 }





 }



...@@ -400,11 +388,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -400,11 +388,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param retFunction The return flow function to compute





	 * @param retFunction The return flow function to compute







	 * @param d2 The abstraction at the exit node in the callee





	 * @param d2 The abstraction at the exit node in the callee







	 * @param callSite The call site





	 * @param callSite The call site







	 * @param callerSideDs The abstractions at the call site









	 * @return The set of caller-side abstractions at the return site





	 * @return The set of caller-side abstractions at the return site







	 */





	 */







 protected Set<D> computeReturnFlowFunction





 protected Set<D> computeReturnFlowFunction







 (FlowFunction<D> retFunction, D d2, N callSite, Collection<D> callerSideDs) {





 (FlowFunction<D> retFunction, D d2, N callSite) {







 return retFunction.computeTargets(d2);





 return retFunction.computeTargets(d2);







 }





 }

















...@@ -501,40 +488,47 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -501,40 +488,47 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);





 logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);







 }





 }







 }





 }







 









 























 private Set<Pair<N, D>> endSummary(M m, D d3) {





 private Set<SummaryEdge<D, N>> endSummary(M m, final D d3) {







 Set<Pair<N, D>> map = endSummary.get(new Pair<M, D>(m, d3));





 Set<SummaryEdge<D, N>> map = endSummary.get(m);







 return map;





 if(map == null)









 return null;









 









 return Sets.filter(map, new Predicate<SummaryEdge<D,N>>() {









 @Override









 public boolean apply(SummaryEdge<D, N> edge) {









 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3);









 }









 });







 }





 }





















 private boolean addEndSummary(M m, D d1, N eP, D d2) {





 private boolean addEndSummary(M m, SummaryEdge<D,N> summaryEdge) {







 Set<Pair<N, D>> summaries = endSummary.putIfAbsentElseGet





 Set<SummaryEdge<D, N>> summaries = endSummary.putIfAbsentElseGet







 (new Pair<M, D>(m, d1), new ConcurrentHashSet<Pair<N, D>>());





 (m, new ConcurrentHashSet<SummaryEdge<D, N>>());







 return summaries.add(new Pair<N, D>(eP, d2));





 return summaries.add(summaryEdge);







 } 





 } 





















 protected Map<D, MyConcurrentHashMap<N, Map<D, D>>> incoming(M m) {





 protected Set<IncomingEdge<D, N>> incoming(M m) {







 MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>> result = incoming.get(m);





 Set<IncomingEdge<D, N>> result = incoming.get(m);







 if(result == null)





 if(result == null)







 return new HashMap<>();





 return Collections.emptySet();







 else





 else







 return result;





 return result;







 }





 }







 





 







 protected Map<N, Map<D, D>> incoming(D d1, M m) {





 protected Set<IncomingEdge<D, N>> incoming(M m, final D abstractCalleeSourceFact) {







 Map<D, MyConcurrentHashMap<N, Map<D, D>>> summariesPerMethod = incoming(m);





 Set<IncomingEdge<D, N>> result = incoming(m);







 Map<N, Map<D, D>> map = summariesPerMethod.get(d1);





 return Sets.filter(result, new Predicate<IncomingEdge<D,N>>() {







 return map;





 @Override









 public boolean apply(IncomingEdge<D, N> edge) {









 return AccessPathUtil.isPrefixOf(abstractCalleeSourceFact, edge.getCalleeSourceFact());









 }









 });







 }





 }







 





 







 protected boolean addIncoming(M m, D d3, N n, D d1, D d2) {





 protected boolean addIncoming(M m, IncomingEdge<D, N> incomingEdge) {







 MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>> summaries = incoming.putIfAbsentElseGet





 Set<IncomingEdge<D,N>> set = incoming.putIfAbsentElseGet(m, new ConcurrentHashSet<IncomingEdge<D,N>>());







 (m, new MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>>());





 return set.add(incomingEdge);







 MyConcurrentHashMap<N, Map<D, D>> summariesPerCallSite = summaries.putIfAbsentElseGet(d3, new MyConcurrentHashMap<N, Map<D,D>>());









 Map<D, D> set = summariesPerCallSite.putIfAbsentElseGet(n, new ConcurrentHashMap<D, D>());









 return set.put(d1, d2) == null;









 }





 }







 





 







 /**





 /**



......















src/heros/alias/FlowFunctions.java








View file @ 3b064347








...@@ -7,6 +7,7 @@
...@@ -7,6 +7,7 @@






 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Eric Bodden - initial API and implementation









 *     Johannes Lerch, Johannes Späth - extension for field sensitivity







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















......















src/heros/alias/IncomingEdge.java



0 → 100644







View file @ 3b064347














/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros.alias;



















public class IncomingEdge<D, N> {



















 private D calleeSourceFact;









 private N callSite;









 private D callerSourceFact;









 private D callerCallSiteFact;









 









 public IncomingEdge(D calleeSourceFact, N callSite, D callerSourceFact, D callerCallSiteFact) {









 super();









 this.calleeSourceFact = calleeSourceFact;









 this.callSite = callSite;









 this.callerSourceFact = callerSourceFact;









 this.callerCallSiteFact = callerCallSiteFact;









 }









 









 public D getCalleeSourceFact() {









 return calleeSourceFact;









 }









 









 public D getCallerCallSiteFact() {









 return callerCallSiteFact;









 }









 









 public D getCallerSourceFact() {









 return callerSourceFact;









 }









 









 public N getCallSite() {









 return callSite;









 }



















 @Override









 public int hashCode() {









 final int prime = 31;









 int result = 1;









 result = prime * result + ((callSite == null) ? 0 : callSite.hashCode());









 result = prime * result + ((calleeSourceFact == null) ? 0 : calleeSourceFact.hashCode());









 result = prime * result + ((callerCallSiteFact == null) ? 0 : callerCallSiteFact.hashCode());









 result = prime * result + ((callerSourceFact == null) ? 0 : callerSourceFact.hashCode());









 return result;









 }



















 @Override









 public boolean equals(Object obj) {









 if (this == obj)









 return true;









 if (obj == null)









 return false;









 if (!(obj instanceof IncomingEdge))









 return false;









 IncomingEdge other = (IncomingEdge) obj;









 if (callSite == null) {









 if (other.callSite != null)









 return false;









 } else if (!callSite.equals(other.callSite))









 return false;









 if (calleeSourceFact == null) {









 if (other.calleeSourceFact != null)









 return false;









 } else if (!calleeSourceFact.equals(other.calleeSourceFact))









 return false;









 if (callerCallSiteFact == null) {









 if (other.callerCallSiteFact != null)









 return false;









 } else if (!callerCallSiteFact.equals(other.callerCallSiteFact))









 return false;









 if (callerSourceFact == null) {









 if (other.callerSourceFact != null)









 return false;









 } else if (!callerSourceFact.equals(other.callerSourceFact))









 return false;









 return true;









 }









 









 









}















src/heros/alias/SummaryEdge.java



0 → 100644







View file @ 3b064347














/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros.alias;



















public class SummaryEdge<D, N> {



















 private D sourceFact;









 private N targetStmt;









 private D targetFact;









 









 public SummaryEdge(D sourceFact, N targetStmt, D targetFact) {









 this.sourceFact = sourceFact;









 this.targetStmt = targetStmt;









 this.targetFact = targetFact;









 }



















 @Override









 public int hashCode() {









 final int prime = 31;









 int result = 1;









 result = prime * result + ((sourceFact == null) ? 0 : sourceFact.hashCode());









 result = prime * result + ((targetFact == null) ? 0 : targetFact.hashCode());









 result = prime * result + ((targetStmt == null) ? 0 : targetStmt.hashCode());









 return result;









 }









 









 @Override









 public boolean equals(Object obj) {









 if (this == obj)









 return true;









 if (obj == null)









 return false;









 if (!(obj instanceof SummaryEdge))









 return false;









 SummaryEdge other = (SummaryEdge) obj;









 if (sourceFact == null) {









 if (other.sourceFact != null)









 return false;









 } else if (!sourceFact.equals(other.sourceFact))









 return false;









 if (targetFact == null) {









 if (other.targetFact != null)









 return false;









 } else if (!targetFact.equals(other.targetFact))









 return false;









 if (targetStmt == null) {









 if (other.targetStmt != null)









 return false;









 } else if (!targetStmt.equals(other.targetStmt))









 return false;









 return true;









 }



















 public D getSourceFact() {









 return sourceFact;









 }









 









 public D getTargetFact() {









 return targetFact;









 }









 









 public N getTargetStmt() {









 return targetStmt;









 }









 









}















test/heros/alias/AccessPathUtilTest.java



0 → 100644







View file @ 3b064347














/*******************************************************************************









 * Copyright (c) 2014 Eric Bodden.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Eric Bodden - initial API and implementation









 ******************************************************************************/









package heros.alias;



















import static org.junit.Assert.assertEquals;









import static org.junit.Assert.assertFalse;









import static org.junit.Assert.assertTrue;



















import org.junit.Test;



















public class AccessPathUtilTest {



















 @Test









 public void testBaseValuePrefixOfFieldAccess() {









 assertTrue(AccessPathUtil.isPrefixOf(new Fact("a"), new Fact("a.f")));









 assertFalse(AccessPathUtil.isPrefixOf(new Fact("a.f"), new Fact("a")));









 }









 









 @Test









 public void testBaseValueIdentity() {









 assertTrue(AccessPathUtil.isPrefixOf(new Fact("a"), new Fact("a")));









 }









 









 @Test









 public void testFieldAccessPrefixOfFieldAccess() {









 assertTrue(AccessPathUtil.isPrefixOf(new Fact("a.b"), new Fact("a.b.c")));









 assertFalse(AccessPathUtil.isPrefixOf(new Fact("a.b.c"), new Fact("a.b")));









 }









 









 @Test









 public void testAbstractedSummary() {









 assertEquals(new Fact("z.f"), AccessPathUtil.applyAbstractedSummary(new Fact("a.f"), new SummaryEdge<>(new Fact("a"), null, new Fact("z"))));









 }









 









 @Test









 public void testAbstractedFieldAccessSummary() {









 assertEquals(new Fact("z.b.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.b.c"), new SummaryEdge<>(new Fact("a.b"), null, new Fact("z.b"))));









 }









 









 @Test









 public void testSummaryIntroducesFieldAccess() {









 assertEquals(new Fact("z.b.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.c"), new SummaryEdge<>(new Fact("a"), null, new Fact("z.b"))));









 }









 









 @Test









 public void testSummaryRemovesFieldAccess() {









 assertEquals(new Fact("z.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.b.c"), new SummaryEdge<>(new Fact("a.b"), null, new Fact("z"))));









 }









 









 @Test









 public void testNonAbstractedSummary() {









 assertEquals(new Fact("z"), AccessPathUtil.applyAbstractedSummary(new Fact("a"), new SummaryEdge<>(new Fact("a"), null, new Fact("z"))));









 }









}















test/heros/alias/FieldSensitiveSolverTest.java








View file @ 3b064347








...@@ -53,11 +53,31 @@ public class FieldSensitiveSolverTest {
...@@ -53,11 +53,31 @@ public class FieldSensitiveSolverTest {






 }





 }







 





 







 @Test





 @Test







 public void hold() {





 public void reuseSummaryForBaseValue() {







 helper.method("bar", 





 helper.method("bar", 







 startPoints("a"),





 startPoints("a"),







 normalStmt("a").succ("b", flow("0", "1")),





 normalStmt("a").succ("b", flow("0", "1")),







 writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),





 writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),









 callSite("c").calls("foo", flow("2.field", "3.field")).retSite("retC", flow("2.field", "2.field")));









 









 helper.method("foo",startPoints("d"),









 normalStmt("d").succ("e", flow("3", "4")),









 normalStmt("e").succ("f", flow("4","4")),









 exitStmt("f").returns(over("c"), to("retC"), flow("4.field", "5.field")).returns(over("g"), to("retG"), flow("4.anotherField", "6.anotherField")));



















 helper.method("xyz", 









 startPoints("g"),









 callSite("g").calls("foo", flow("0", "3.anotherField")).retSite("retG", kill("0")));









 









 helper.runSolver(false, "a", "g");









 }









 









 @Test









 public void hold() {









 helper.method("bar", 









 startPoints("a"),









 normalStmt("a").succ("b", flow("0", "1")),









 writeFieldStmt("b", "field").succ("c", flow("1", "2.field")),







 callSite("c").calls("foo", flow("2.field", "3.field")));





 callSite("c").calls("foo", flow("2.field", "3.field")));







 





 







 helper.method("foo",startPoints("d"),





 helper.method("foo",startPoints("d"),



...@@ -71,11 +91,11 @@ public class FieldSensitiveSolverTest {
...@@ -71,11 +91,11 @@ public class FieldSensitiveSolverTest {






 helper.method("bar", 





 helper.method("bar", 







 startPoints("a"),





 startPoints("a"),







 normalStmt("a").succ("b", flow("0", "1")),





 normalStmt("a").succ("b", flow("0", "1")),







 writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),





 writeFieldStmt("b", "field").succ("c", flow("1", "2.field")),







 callSite("c").calls("foo", flow("2.field", "3.field")));





 callSite("c").calls("foo", flow("2.field", "3.field")));







 





 







 helper.method("foo",startPoints("d"),





 helper.method("foo",startPoints("d"),







 readFieldStmt("d", "notfield").succ("e", flow("3", "3"), flow("3.notfield")),





 readFieldStmt("d", "notfield").succ("e", flow("3", "3"), kill("3.notfield")),







 normalStmt("e").succ("f", flow("3","4")));





 normalStmt("e").succ("f", flow("3","4")));







 





 







 helper.method("xyz",





 helper.method("xyz",



......

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

3b064347















Commit
3b064347


authored
Oct 22, 2014
by


Johannes Lerch



Browse files




use of abstracted summaries







parent
f5ac702c













Changes
9




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPathUtil.java



0 → 100644







View file @ 3b064347














/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros.alias;



















public class AccessPathUtil {



















 public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {









 if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))









 return false; 









 









 FieldReference[] prefixAccessPath = prefixCandidate.getAccessPath();









 FieldReference[] factAccessPath = fact.getAccessPath();









 if(prefixAccessPath.length > factAccessPath.length)









 return false;









 









 for(int i=0; i<prefixAccessPath.length; i++) {









 if(!prefixAccessPath[i].equals(factAccessPath[i]))









 return false;









 }









 









 return true;









 }









 









 public static <D extends FieldSensitiveFact<?, D>> D applyAbstractedSummary(D sourceFact, SummaryEdge<D, ?> summary) {









 if(!isPrefixOf(summary.getSourceFact(), sourceFact))









 throw new IllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'", summary, sourceFact));









 









 FieldReference[] abstractAccessPath = summary.getSourceFact().getAccessPath();









 FieldReference[] concreteAccessPath = sourceFact.getAccessPath();









 FieldReference[] targetAccessPath = summary.getTargetFact().getAccessPath();









 









 FieldReference[] resultAccessPath = new FieldReference[targetAccessPath.length + concreteAccessPath.length - abstractAccessPath.length];



















 //copy old access path









 System.arraycopy(targetAccessPath, 0, resultAccessPath, 0, targetAccessPath.length);









 









 //copy delta access path that was omitted while creating the abstracted source fact









 System.arraycopy(concreteAccessPath, abstractAccessPath.length, resultAccessPath, targetAccessPath.length, concreteAccessPath.length - abstractAccessPath.length);









 









 return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);









 }









}















src/heros/alias/FieldReference.java








View file @ 3b064347












/*******************************************************************************





/*******************************************************************************







 * Copyright (c) 2014 Eric Bodden.





 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.







 * All rights reserved. This program and the accompanying materials





 * All rights reserved. This program and the accompanying materials







 * are made available under the terms of the GNU Lesser Public License v2.1





 * are made available under the terms of the GNU Lesser Public License v2.1







 * which accompanies this distribution, and is available at





 * which accompanies this distribution, and is available at







 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html





 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html







 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Johannes Lerch, Johannes Späth - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















......















src/heros/alias/FieldSensitiveFact.java








View file @ 3b064347












/*******************************************************************************





/*******************************************************************************







 * Copyright (c) 2014 Eric Bodden.





 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.







 * All rights reserved. This program and the accompanying materials





 * All rights reserved. This program and the accompanying materials







 * are made available under the terms of the GNU Lesser Public License v2.1





 * are made available under the terms of the GNU Lesser Public License v2.1







 * which accompanies this distribution, and is available at





 * which accompanies this distribution, and is available at







 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html





 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html







 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Johannes Lerch, Johannes Späth - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















......















src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 3b064347












/*******************************************************************************





/*******************************************************************************







 * Copyright (c) 2014 Eric Bodden.





 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.







 * All rights reserved. This program and the accompanying materials





 * All rights reserved. This program and the accompanying materials







 * are made available under the terms of the GNU Lesser Public License v2.1





 * are made available under the terms of the GNU Lesser Public License v2.1







 * which accompanies this distribution, and is available at





 * which accompanies this distribution, and is available at







 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html





 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html







 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Johannes Lerch, Johannes Späth - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















...@@ -24,7 +24,9 @@ import java.util.concurrent.TimeUnit;
...@@ -24,7 +24,9 @@ import java.util.concurrent.TimeUnit;






import org.slf4j.Logger;





import org.slf4j.Logger;







import org.slf4j.LoggerFactory;





import org.slf4j.LoggerFactory;























import com.google.common.base.Predicate;







import com.google.common.cache.CacheBuilder;





import com.google.common.cache.CacheBuilder;









import com.google.common.collect.Sets;





















import heros.DontSynchronize;





import heros.DontSynchronize;







import heros.FlowFunction;





import heros.FlowFunction;



...@@ -63,14 +65,14 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -63,14 +65,14 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //stores summaries that were queried before they were computed





 //stores summaries that were queried before they were computed







 //see CC 2010 paper by Naeem, Lhotak and Rodriguez





 //see CC 2010 paper by Naeem, Lhotak and Rodriguez







 @SynchronizedBy("consistent lock on 'incoming'")





 @SynchronizedBy("consistent lock on 'incoming'")







 protected final MyConcurrentHashMap<Pair<M,D>,Set<Pair<N,D>>> endSummary =





 protected final MyConcurrentHashMap<M,Set<SummaryEdge<D, N>>> endSummary =







 new MyConcurrentHashMap<Pair<M,D>, Set<Pair<N,D>>>();





 new MyConcurrentHashMap<M, Set<SummaryEdge<D, N>>>();







 





 







 //edges going along calls





 //edges going along calls







 //see CC 2010 paper by Naeem, Lhotak and Rodriguez





 //see CC 2010 paper by Naeem, Lhotak and Rodriguez







 @SynchronizedBy("consistent lock on field")





 @SynchronizedBy("consistent lock on field")







 protected final MyConcurrentHashMap<M, MyConcurrentHashMap<D,MyConcurrentHashMap<N,Map<D, D>>>> incoming =





 protected final MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>> incoming =







 new MyConcurrentHashMap<M, MyConcurrentHashMap<D,MyConcurrentHashMap<N,Map<D, D>>>>();





 new MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>>();







 





 







 @DontSynchronize("stateless")





 @DontSynchronize("stateless")







 protected final FlowFunctions<N, D, M> flowFunctions;





 protected final FlowFunctions<N, D, M> flowFunctions;



...@@ -229,36 +231,34 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -229,36 +231,34 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //for each callee's start point(s)





 //for each callee's start point(s)







 for(N sP: startPointsOf) {





 for(N sP: startPointsOf) {







 //create initial self-loop





 //create initial self-loop







 D abstractStartPointFact = d3.cloneWithAccessPath(new FieldReference.Any());





 D abstractStartPointFact = d3.cloneWithAccessPath();







 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15





 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15







 }





 }







 





 







 //register the fact that <sp,d3> has an incoming edge from <n,d2>





 //register the fact that <sp,d3> has an incoming edge from <n,d2>







 //line 15.1 of Naeem/Lhotak/Rodriguez





 //line 15.1 of Naeem/Lhotak/Rodriguez







 if (!addIncoming(sCalledProcN,d3,n,d1,d2))





 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3,n,d1,d2)))







 continue;





 continue;







 





 







 //TODO: Resume edges that are on hold and match this d3





 //TODO: Resume edges that are on hold and match this d3







 





 







 //line 15.2





 //line 15.2







 //TODO: include more abstract d3 summaries as well





 Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3);







 Set<Pair<N, D>> endSumm = endSummary(sCalledProcN, d3);









 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez







 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,





 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,







 //create new caller-side jump functions to the return sites





 //create new caller-side jump functions to the return sites







 //because we have observed a potentially new incoming edge into <sP,d3>





 //because we have observed a potentially new incoming edge into <sP,d3>







 if (endSumm != null)





 if (endSumm != null)







 for(Pair<N, D> entry: endSumm) {





 for(SummaryEdge<D, N> summary: endSumm) {







 N eP = entry.getO1();





 D d4 = AccessPathUtil.applyAbstractedSummary(d3, summary);







 D d4 = entry.getO2();





 







 //for each return site





 //for each return site







 for(N retSiteN: returnSiteNs) {





 for(N retSiteN: returnSiteNs) {







 //compute return-flow function





 //compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);







 //for each target value of the function





 //for each target value of the function







 //TODO: Map abstracted d4 back (using the summary)





 for(D d5: computeReturnFlowFunction(retFunction, d4, n)) {







 for(D d5: computeReturnFlowFunction(retFunction, d4, n, Collections.singleton(d2))) {









 // If we have not changed anything in the callee, we do not need the facts





 // If we have not changed anything in the callee, we do not need the facts







 // from there. Even if we change something: If we don't need the concrete





 // from there. Even if we change something: If we don't need the concrete







 // path, we can skip the callee in the predecessor chain





 // path, we can skip the callee in the predecessor chain



...@@ -332,42 +332,30 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -332,42 +332,30 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 





 







 //line 21.1 of Naeem/Lhotak/Rodriguez





 //line 21.1 of Naeem/Lhotak/Rodriguez







 //register end-summary





 //register end-summary







 if (!addEndSummary(methodThatNeedsSummary, d1, n, d2))





 SummaryEdge<D, N> summaryEdge = new SummaryEdge<D, N>(d1, n, d2);









 if (!addEndSummary(methodThatNeedsSummary, summaryEdge))







 return;





 return;







 





 







 //TODO: include more abstract d1 values in incoming set





 Set<IncomingEdge<D, N>> inc = incoming(methodThatNeedsSummary, d1);







 Map<N,Map<D, D>> inc = incoming(d1, methodThatNeedsSummary);









 





 







 //for each incoming call edge already processed





 //for each incoming call edge already processed







 //(see processCall(..))





 //(see processCall(..))







 if (inc != null)





 if (inc != null)







 for (Entry<N,Map<D, D>> entry: inc.entrySet()) {





 for (IncomingEdge<D, N> incomingEdge : inc) {







 //line 22





 // line 22







 N c = entry.getKey();





 N callSite = incomingEdge.getCallSite();







 //for each return site





 // for each return site







 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {





 for (N retSiteC : icfg.getReturnSitesOfCallAt(callSite)) {







 //compute return-flow function





 // compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);







 //TODO: create concrete d2, this d2 is currently an abstracted version





 D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);







 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, entry.getValue().keySet());





 Set<D> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);







 //for each incoming-call value













 for(D d4: entry.getValue().keySet())





 // for each incoming-call value







 for(D d5: targets) {





 for (D callerTargetFact : callerTargetFacts) {







 // If we have not changed anything in the callee, we do not need the facts





 callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetFact);







 // from there. Even if we change something: If we don't need the concrete





 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);







 // path, we can skip the callee in the predecessor chain





 }







 D d5p = d5;









 /*	D predVal = entry.getValue().get(d4);









							if (d5.equals(predVal))









								d5p = predVal;









							else if (setJumpPredecessors)









								d5.setPredecessor(predVal);*/









 









 // Set the calling context









 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5p);









 









 propagate(d4, retSiteC, d5p_restoredCtx, c, false);









 }









 }





 }







 }





 }







 





 



...@@ -379,7 +367,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -379,7 +367,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 for(N c: callers) {





 for(N c: callers) {







 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {





 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);







 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, Collections.singleton(zeroValue));





 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c);







 for(D d5: targets)





 for(D d5: targets)







 propagate(zeroValue, retSiteC, d5, c, true);





 propagate(zeroValue, retSiteC, d5, c, true);







 }





 }



...@@ -400,11 +388,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -400,11 +388,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param retFunction The return flow function to compute





	 * @param retFunction The return flow function to compute







	 * @param d2 The abstraction at the exit node in the callee





	 * @param d2 The abstraction at the exit node in the callee







	 * @param callSite The call site





	 * @param callSite The call site







	 * @param callerSideDs The abstractions at the call site









	 * @return The set of caller-side abstractions at the return site





	 * @return The set of caller-side abstractions at the return site







	 */





	 */







 protected Set<D> computeReturnFlowFunction





 protected Set<D> computeReturnFlowFunction







 (FlowFunction<D> retFunction, D d2, N callSite, Collection<D> callerSideDs) {





 (FlowFunction<D> retFunction, D d2, N callSite) {







 return retFunction.computeTargets(d2);





 return retFunction.computeTargets(d2);







 }





 }

















...@@ -501,40 +488,47 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -501,40 +488,47 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);





 logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);







 }





 }







 }





 }







 









 























 private Set<Pair<N, D>> endSummary(M m, D d3) {





 private Set<SummaryEdge<D, N>> endSummary(M m, final D d3) {







 Set<Pair<N, D>> map = endSummary.get(new Pair<M, D>(m, d3));





 Set<SummaryEdge<D, N>> map = endSummary.get(m);







 return map;





 if(map == null)









 return null;









 









 return Sets.filter(map, new Predicate<SummaryEdge<D,N>>() {









 @Override









 public boolean apply(SummaryEdge<D, N> edge) {









 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3);









 }









 });







 }





 }





















 private boolean addEndSummary(M m, D d1, N eP, D d2) {





 private boolean addEndSummary(M m, SummaryEdge<D,N> summaryEdge) {







 Set<Pair<N, D>> summaries = endSummary.putIfAbsentElseGet





 Set<SummaryEdge<D, N>> summaries = endSummary.putIfAbsentElseGet







 (new Pair<M, D>(m, d1), new ConcurrentHashSet<Pair<N, D>>());





 (m, new ConcurrentHashSet<SummaryEdge<D, N>>());







 return summaries.add(new Pair<N, D>(eP, d2));





 return summaries.add(summaryEdge);







 } 





 } 





















 protected Map<D, MyConcurrentHashMap<N, Map<D, D>>> incoming(M m) {





 protected Set<IncomingEdge<D, N>> incoming(M m) {







 MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>> result = incoming.get(m);





 Set<IncomingEdge<D, N>> result = incoming.get(m);







 if(result == null)





 if(result == null)







 return new HashMap<>();





 return Collections.emptySet();







 else





 else







 return result;





 return result;







 }





 }







 





 







 protected Map<N, Map<D, D>> incoming(D d1, M m) {





 protected Set<IncomingEdge<D, N>> incoming(M m, final D abstractCalleeSourceFact) {







 Map<D, MyConcurrentHashMap<N, Map<D, D>>> summariesPerMethod = incoming(m);





 Set<IncomingEdge<D, N>> result = incoming(m);







 Map<N, Map<D, D>> map = summariesPerMethod.get(d1);





 return Sets.filter(result, new Predicate<IncomingEdge<D,N>>() {







 return map;





 @Override









 public boolean apply(IncomingEdge<D, N> edge) {









 return AccessPathUtil.isPrefixOf(abstractCalleeSourceFact, edge.getCalleeSourceFact());









 }









 });







 }





 }







 





 







 protected boolean addIncoming(M m, D d3, N n, D d1, D d2) {





 protected boolean addIncoming(M m, IncomingEdge<D, N> incomingEdge) {







 MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>> summaries = incoming.putIfAbsentElseGet





 Set<IncomingEdge<D,N>> set = incoming.putIfAbsentElseGet(m, new ConcurrentHashSet<IncomingEdge<D,N>>());







 (m, new MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>>());





 return set.add(incomingEdge);







 MyConcurrentHashMap<N, Map<D, D>> summariesPerCallSite = summaries.putIfAbsentElseGet(d3, new MyConcurrentHashMap<N, Map<D,D>>());









 Map<D, D> set = summariesPerCallSite.putIfAbsentElseGet(n, new ConcurrentHashMap<D, D>());









 return set.put(d1, d2) == null;









 }





 }







 





 







 /**





 /**



......















src/heros/alias/FlowFunctions.java








View file @ 3b064347








...@@ -7,6 +7,7 @@
...@@ -7,6 +7,7 @@






 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Eric Bodden - initial API and implementation









 *     Johannes Lerch, Johannes Späth - extension for field sensitivity







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















......















src/heros/alias/IncomingEdge.java



0 → 100644







View file @ 3b064347














/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros.alias;



















public class IncomingEdge<D, N> {



















 private D calleeSourceFact;









 private N callSite;









 private D callerSourceFact;









 private D callerCallSiteFact;









 









 public IncomingEdge(D calleeSourceFact, N callSite, D callerSourceFact, D callerCallSiteFact) {









 super();









 this.calleeSourceFact = calleeSourceFact;









 this.callSite = callSite;









 this.callerSourceFact = callerSourceFact;









 this.callerCallSiteFact = callerCallSiteFact;









 }









 









 public D getCalleeSourceFact() {









 return calleeSourceFact;









 }









 









 public D getCallerCallSiteFact() {









 return callerCallSiteFact;









 }









 









 public D getCallerSourceFact() {









 return callerSourceFact;









 }









 









 public N getCallSite() {









 return callSite;









 }



















 @Override









 public int hashCode() {









 final int prime = 31;









 int result = 1;









 result = prime * result + ((callSite == null) ? 0 : callSite.hashCode());









 result = prime * result + ((calleeSourceFact == null) ? 0 : calleeSourceFact.hashCode());









 result = prime * result + ((callerCallSiteFact == null) ? 0 : callerCallSiteFact.hashCode());









 result = prime * result + ((callerSourceFact == null) ? 0 : callerSourceFact.hashCode());









 return result;









 }



















 @Override









 public boolean equals(Object obj) {









 if (this == obj)









 return true;









 if (obj == null)









 return false;









 if (!(obj instanceof IncomingEdge))









 return false;









 IncomingEdge other = (IncomingEdge) obj;









 if (callSite == null) {









 if (other.callSite != null)









 return false;









 } else if (!callSite.equals(other.callSite))









 return false;









 if (calleeSourceFact == null) {









 if (other.calleeSourceFact != null)









 return false;









 } else if (!calleeSourceFact.equals(other.calleeSourceFact))









 return false;









 if (callerCallSiteFact == null) {









 if (other.callerCallSiteFact != null)









 return false;









 } else if (!callerCallSiteFact.equals(other.callerCallSiteFact))









 return false;









 if (callerSourceFact == null) {









 if (other.callerSourceFact != null)









 return false;









 } else if (!callerSourceFact.equals(other.callerSourceFact))









 return false;









 return true;









 }









 









 









}















src/heros/alias/SummaryEdge.java



0 → 100644







View file @ 3b064347














/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros.alias;



















public class SummaryEdge<D, N> {



















 private D sourceFact;









 private N targetStmt;









 private D targetFact;









 









 public SummaryEdge(D sourceFact, N targetStmt, D targetFact) {









 this.sourceFact = sourceFact;









 this.targetStmt = targetStmt;









 this.targetFact = targetFact;









 }



















 @Override









 public int hashCode() {









 final int prime = 31;









 int result = 1;









 result = prime * result + ((sourceFact == null) ? 0 : sourceFact.hashCode());









 result = prime * result + ((targetFact == null) ? 0 : targetFact.hashCode());









 result = prime * result + ((targetStmt == null) ? 0 : targetStmt.hashCode());









 return result;









 }









 









 @Override









 public boolean equals(Object obj) {









 if (this == obj)









 return true;









 if (obj == null)









 return false;









 if (!(obj instanceof SummaryEdge))









 return false;









 SummaryEdge other = (SummaryEdge) obj;









 if (sourceFact == null) {









 if (other.sourceFact != null)









 return false;









 } else if (!sourceFact.equals(other.sourceFact))









 return false;









 if (targetFact == null) {









 if (other.targetFact != null)









 return false;









 } else if (!targetFact.equals(other.targetFact))









 return false;









 if (targetStmt == null) {









 if (other.targetStmt != null)









 return false;









 } else if (!targetStmt.equals(other.targetStmt))









 return false;









 return true;









 }



















 public D getSourceFact() {









 return sourceFact;









 }









 









 public D getTargetFact() {









 return targetFact;









 }









 









 public N getTargetStmt() {









 return targetStmt;









 }









 









}















test/heros/alias/AccessPathUtilTest.java



0 → 100644







View file @ 3b064347














/*******************************************************************************









 * Copyright (c) 2014 Eric Bodden.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Eric Bodden - initial API and implementation









 ******************************************************************************/









package heros.alias;



















import static org.junit.Assert.assertEquals;









import static org.junit.Assert.assertFalse;









import static org.junit.Assert.assertTrue;



















import org.junit.Test;



















public class AccessPathUtilTest {



















 @Test









 public void testBaseValuePrefixOfFieldAccess() {









 assertTrue(AccessPathUtil.isPrefixOf(new Fact("a"), new Fact("a.f")));









 assertFalse(AccessPathUtil.isPrefixOf(new Fact("a.f"), new Fact("a")));









 }









 









 @Test









 public void testBaseValueIdentity() {









 assertTrue(AccessPathUtil.isPrefixOf(new Fact("a"), new Fact("a")));









 }









 









 @Test









 public void testFieldAccessPrefixOfFieldAccess() {









 assertTrue(AccessPathUtil.isPrefixOf(new Fact("a.b"), new Fact("a.b.c")));









 assertFalse(AccessPathUtil.isPrefixOf(new Fact("a.b.c"), new Fact("a.b")));









 }









 









 @Test









 public void testAbstractedSummary() {









 assertEquals(new Fact("z.f"), AccessPathUtil.applyAbstractedSummary(new Fact("a.f"), new SummaryEdge<>(new Fact("a"), null, new Fact("z"))));









 }









 









 @Test









 public void testAbstractedFieldAccessSummary() {









 assertEquals(new Fact("z.b.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.b.c"), new SummaryEdge<>(new Fact("a.b"), null, new Fact("z.b"))));









 }









 









 @Test









 public void testSummaryIntroducesFieldAccess() {









 assertEquals(new Fact("z.b.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.c"), new SummaryEdge<>(new Fact("a"), null, new Fact("z.b"))));









 }









 









 @Test









 public void testSummaryRemovesFieldAccess() {









 assertEquals(new Fact("z.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.b.c"), new SummaryEdge<>(new Fact("a.b"), null, new Fact("z"))));









 }









 









 @Test









 public void testNonAbstractedSummary() {









 assertEquals(new Fact("z"), AccessPathUtil.applyAbstractedSummary(new Fact("a"), new SummaryEdge<>(new Fact("a"), null, new Fact("z"))));









 }









}















test/heros/alias/FieldSensitiveSolverTest.java








View file @ 3b064347








...@@ -53,11 +53,31 @@ public class FieldSensitiveSolverTest {
...@@ -53,11 +53,31 @@ public class FieldSensitiveSolverTest {






 }





 }







 





 







 @Test





 @Test







 public void hold() {





 public void reuseSummaryForBaseValue() {







 helper.method("bar", 





 helper.method("bar", 







 startPoints("a"),





 startPoints("a"),







 normalStmt("a").succ("b", flow("0", "1")),





 normalStmt("a").succ("b", flow("0", "1")),







 writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),





 writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),









 callSite("c").calls("foo", flow("2.field", "3.field")).retSite("retC", flow("2.field", "2.field")));









 









 helper.method("foo",startPoints("d"),









 normalStmt("d").succ("e", flow("3", "4")),









 normalStmt("e").succ("f", flow("4","4")),









 exitStmt("f").returns(over("c"), to("retC"), flow("4.field", "5.field")).returns(over("g"), to("retG"), flow("4.anotherField", "6.anotherField")));



















 helper.method("xyz", 









 startPoints("g"),









 callSite("g").calls("foo", flow("0", "3.anotherField")).retSite("retG", kill("0")));









 









 helper.runSolver(false, "a", "g");









 }









 









 @Test









 public void hold() {









 helper.method("bar", 









 startPoints("a"),









 normalStmt("a").succ("b", flow("0", "1")),









 writeFieldStmt("b", "field").succ("c", flow("1", "2.field")),







 callSite("c").calls("foo", flow("2.field", "3.field")));





 callSite("c").calls("foo", flow("2.field", "3.field")));







 





 







 helper.method("foo",startPoints("d"),





 helper.method("foo",startPoints("d"),



...@@ -71,11 +91,11 @@ public class FieldSensitiveSolverTest {
...@@ -71,11 +91,11 @@ public class FieldSensitiveSolverTest {






 helper.method("bar", 





 helper.method("bar", 







 startPoints("a"),





 startPoints("a"),







 normalStmt("a").succ("b", flow("0", "1")),





 normalStmt("a").succ("b", flow("0", "1")),







 writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),





 writeFieldStmt("b", "field").succ("c", flow("1", "2.field")),







 callSite("c").calls("foo", flow("2.field", "3.field")));





 callSite("c").calls("foo", flow("2.field", "3.field")));







 





 







 helper.method("foo",startPoints("d"),





 helper.method("foo",startPoints("d"),







 readFieldStmt("d", "notfield").succ("e", flow("3", "3"), flow("3.notfield")),





 readFieldStmt("d", "notfield").succ("e", flow("3", "3"), kill("3.notfield")),







 normalStmt("e").succ("f", flow("3","4")));





 normalStmt("e").succ("f", flow("3","4")));







 





 







 helper.method("xyz",





 helper.method("xyz",



......

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

3b064347







Open sidebar



Joshua Garcia heros
Commits

3b064347




Open sidebar

Joshua Garcia heros
Commits

3b064347


Joshua GarciaherosherosCommits
3b064347








Commit
3b064347


authored
Oct 22, 2014
by


Johannes Lerch



Browse files




use of abstracted summaries







parent
f5ac702c













Changes
9




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPathUtil.java



0 → 100644







View file @ 3b064347














/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros.alias;



















public class AccessPathUtil {



















 public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {









 if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))









 return false; 









 









 FieldReference[] prefixAccessPath = prefixCandidate.getAccessPath();









 FieldReference[] factAccessPath = fact.getAccessPath();









 if(prefixAccessPath.length > factAccessPath.length)









 return false;









 









 for(int i=0; i<prefixAccessPath.length; i++) {









 if(!prefixAccessPath[i].equals(factAccessPath[i]))









 return false;









 }









 









 return true;









 }









 









 public static <D extends FieldSensitiveFact<?, D>> D applyAbstractedSummary(D sourceFact, SummaryEdge<D, ?> summary) {









 if(!isPrefixOf(summary.getSourceFact(), sourceFact))









 throw new IllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'", summary, sourceFact));









 









 FieldReference[] abstractAccessPath = summary.getSourceFact().getAccessPath();









 FieldReference[] concreteAccessPath = sourceFact.getAccessPath();









 FieldReference[] targetAccessPath = summary.getTargetFact().getAccessPath();









 









 FieldReference[] resultAccessPath = new FieldReference[targetAccessPath.length + concreteAccessPath.length - abstractAccessPath.length];



















 //copy old access path









 System.arraycopy(targetAccessPath, 0, resultAccessPath, 0, targetAccessPath.length);









 









 //copy delta access path that was omitted while creating the abstracted source fact









 System.arraycopy(concreteAccessPath, abstractAccessPath.length, resultAccessPath, targetAccessPath.length, concreteAccessPath.length - abstractAccessPath.length);









 









 return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);









 }









}















src/heros/alias/FieldReference.java








View file @ 3b064347












/*******************************************************************************





/*******************************************************************************







 * Copyright (c) 2014 Eric Bodden.





 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.







 * All rights reserved. This program and the accompanying materials





 * All rights reserved. This program and the accompanying materials







 * are made available under the terms of the GNU Lesser Public License v2.1





 * are made available under the terms of the GNU Lesser Public License v2.1







 * which accompanies this distribution, and is available at





 * which accompanies this distribution, and is available at







 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html





 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html







 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Johannes Lerch, Johannes Späth - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















......















src/heros/alias/FieldSensitiveFact.java








View file @ 3b064347












/*******************************************************************************





/*******************************************************************************







 * Copyright (c) 2014 Eric Bodden.





 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.







 * All rights reserved. This program and the accompanying materials





 * All rights reserved. This program and the accompanying materials







 * are made available under the terms of the GNU Lesser Public License v2.1





 * are made available under the terms of the GNU Lesser Public License v2.1







 * which accompanies this distribution, and is available at





 * which accompanies this distribution, and is available at







 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html





 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html







 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Johannes Lerch, Johannes Späth - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















......















src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 3b064347












/*******************************************************************************





/*******************************************************************************







 * Copyright (c) 2014 Eric Bodden.





 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.







 * All rights reserved. This program and the accompanying materials





 * All rights reserved. This program and the accompanying materials







 * are made available under the terms of the GNU Lesser Public License v2.1





 * are made available under the terms of the GNU Lesser Public License v2.1







 * which accompanies this distribution, and is available at





 * which accompanies this distribution, and is available at







 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html





 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html







 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Johannes Lerch, Johannes Späth - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















...@@ -24,7 +24,9 @@ import java.util.concurrent.TimeUnit;
...@@ -24,7 +24,9 @@ import java.util.concurrent.TimeUnit;






import org.slf4j.Logger;





import org.slf4j.Logger;







import org.slf4j.LoggerFactory;





import org.slf4j.LoggerFactory;























import com.google.common.base.Predicate;







import com.google.common.cache.CacheBuilder;





import com.google.common.cache.CacheBuilder;









import com.google.common.collect.Sets;





















import heros.DontSynchronize;





import heros.DontSynchronize;







import heros.FlowFunction;





import heros.FlowFunction;



...@@ -63,14 +65,14 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -63,14 +65,14 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //stores summaries that were queried before they were computed





 //stores summaries that were queried before they were computed







 //see CC 2010 paper by Naeem, Lhotak and Rodriguez





 //see CC 2010 paper by Naeem, Lhotak and Rodriguez







 @SynchronizedBy("consistent lock on 'incoming'")





 @SynchronizedBy("consistent lock on 'incoming'")







 protected final MyConcurrentHashMap<Pair<M,D>,Set<Pair<N,D>>> endSummary =





 protected final MyConcurrentHashMap<M,Set<SummaryEdge<D, N>>> endSummary =







 new MyConcurrentHashMap<Pair<M,D>, Set<Pair<N,D>>>();





 new MyConcurrentHashMap<M, Set<SummaryEdge<D, N>>>();







 





 







 //edges going along calls





 //edges going along calls







 //see CC 2010 paper by Naeem, Lhotak and Rodriguez





 //see CC 2010 paper by Naeem, Lhotak and Rodriguez







 @SynchronizedBy("consistent lock on field")





 @SynchronizedBy("consistent lock on field")







 protected final MyConcurrentHashMap<M, MyConcurrentHashMap<D,MyConcurrentHashMap<N,Map<D, D>>>> incoming =





 protected final MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>> incoming =







 new MyConcurrentHashMap<M, MyConcurrentHashMap<D,MyConcurrentHashMap<N,Map<D, D>>>>();





 new MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>>();







 





 







 @DontSynchronize("stateless")





 @DontSynchronize("stateless")







 protected final FlowFunctions<N, D, M> flowFunctions;





 protected final FlowFunctions<N, D, M> flowFunctions;



...@@ -229,36 +231,34 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -229,36 +231,34 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //for each callee's start point(s)





 //for each callee's start point(s)







 for(N sP: startPointsOf) {





 for(N sP: startPointsOf) {







 //create initial self-loop





 //create initial self-loop







 D abstractStartPointFact = d3.cloneWithAccessPath(new FieldReference.Any());





 D abstractStartPointFact = d3.cloneWithAccessPath();







 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15





 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15







 }





 }







 





 







 //register the fact that <sp,d3> has an incoming edge from <n,d2>





 //register the fact that <sp,d3> has an incoming edge from <n,d2>







 //line 15.1 of Naeem/Lhotak/Rodriguez





 //line 15.1 of Naeem/Lhotak/Rodriguez







 if (!addIncoming(sCalledProcN,d3,n,d1,d2))





 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3,n,d1,d2)))







 continue;





 continue;







 





 







 //TODO: Resume edges that are on hold and match this d3





 //TODO: Resume edges that are on hold and match this d3







 





 







 //line 15.2





 //line 15.2







 //TODO: include more abstract d3 summaries as well





 Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3);







 Set<Pair<N, D>> endSumm = endSummary(sCalledProcN, d3);









 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez







 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,





 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,







 //create new caller-side jump functions to the return sites





 //create new caller-side jump functions to the return sites







 //because we have observed a potentially new incoming edge into <sP,d3>





 //because we have observed a potentially new incoming edge into <sP,d3>







 if (endSumm != null)





 if (endSumm != null)







 for(Pair<N, D> entry: endSumm) {





 for(SummaryEdge<D, N> summary: endSumm) {







 N eP = entry.getO1();





 D d4 = AccessPathUtil.applyAbstractedSummary(d3, summary);







 D d4 = entry.getO2();





 







 //for each return site





 //for each return site







 for(N retSiteN: returnSiteNs) {





 for(N retSiteN: returnSiteNs) {







 //compute return-flow function





 //compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);







 //for each target value of the function





 //for each target value of the function







 //TODO: Map abstracted d4 back (using the summary)





 for(D d5: computeReturnFlowFunction(retFunction, d4, n)) {







 for(D d5: computeReturnFlowFunction(retFunction, d4, n, Collections.singleton(d2))) {









 // If we have not changed anything in the callee, we do not need the facts





 // If we have not changed anything in the callee, we do not need the facts







 // from there. Even if we change something: If we don't need the concrete





 // from there. Even if we change something: If we don't need the concrete







 // path, we can skip the callee in the predecessor chain





 // path, we can skip the callee in the predecessor chain



...@@ -332,42 +332,30 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -332,42 +332,30 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 





 







 //line 21.1 of Naeem/Lhotak/Rodriguez





 //line 21.1 of Naeem/Lhotak/Rodriguez







 //register end-summary





 //register end-summary







 if (!addEndSummary(methodThatNeedsSummary, d1, n, d2))





 SummaryEdge<D, N> summaryEdge = new SummaryEdge<D, N>(d1, n, d2);









 if (!addEndSummary(methodThatNeedsSummary, summaryEdge))







 return;





 return;







 





 







 //TODO: include more abstract d1 values in incoming set





 Set<IncomingEdge<D, N>> inc = incoming(methodThatNeedsSummary, d1);







 Map<N,Map<D, D>> inc = incoming(d1, methodThatNeedsSummary);









 





 







 //for each incoming call edge already processed





 //for each incoming call edge already processed







 //(see processCall(..))





 //(see processCall(..))







 if (inc != null)





 if (inc != null)







 for (Entry<N,Map<D, D>> entry: inc.entrySet()) {





 for (IncomingEdge<D, N> incomingEdge : inc) {







 //line 22





 // line 22







 N c = entry.getKey();





 N callSite = incomingEdge.getCallSite();







 //for each return site





 // for each return site







 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {





 for (N retSiteC : icfg.getReturnSitesOfCallAt(callSite)) {







 //compute return-flow function





 // compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);







 //TODO: create concrete d2, this d2 is currently an abstracted version





 D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);







 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, entry.getValue().keySet());





 Set<D> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);







 //for each incoming-call value













 for(D d4: entry.getValue().keySet())





 // for each incoming-call value







 for(D d5: targets) {





 for (D callerTargetFact : callerTargetFacts) {







 // If we have not changed anything in the callee, we do not need the facts





 callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetFact);







 // from there. Even if we change something: If we don't need the concrete





 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);







 // path, we can skip the callee in the predecessor chain





 }







 D d5p = d5;









 /*	D predVal = entry.getValue().get(d4);









							if (d5.equals(predVal))









								d5p = predVal;









							else if (setJumpPredecessors)









								d5.setPredecessor(predVal);*/









 









 // Set the calling context









 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5p);









 









 propagate(d4, retSiteC, d5p_restoredCtx, c, false);









 }









 }





 }







 }





 }







 





 



...@@ -379,7 +367,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -379,7 +367,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 for(N c: callers) {





 for(N c: callers) {







 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {





 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);







 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, Collections.singleton(zeroValue));





 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c);







 for(D d5: targets)





 for(D d5: targets)







 propagate(zeroValue, retSiteC, d5, c, true);





 propagate(zeroValue, retSiteC, d5, c, true);







 }





 }



...@@ -400,11 +388,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -400,11 +388,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param retFunction The return flow function to compute





	 * @param retFunction The return flow function to compute







	 * @param d2 The abstraction at the exit node in the callee





	 * @param d2 The abstraction at the exit node in the callee







	 * @param callSite The call site





	 * @param callSite The call site







	 * @param callerSideDs The abstractions at the call site









	 * @return The set of caller-side abstractions at the return site





	 * @return The set of caller-side abstractions at the return site







	 */





	 */







 protected Set<D> computeReturnFlowFunction





 protected Set<D> computeReturnFlowFunction







 (FlowFunction<D> retFunction, D d2, N callSite, Collection<D> callerSideDs) {





 (FlowFunction<D> retFunction, D d2, N callSite) {







 return retFunction.computeTargets(d2);





 return retFunction.computeTargets(d2);







 }





 }

















...@@ -501,40 +488,47 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -501,40 +488,47 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);





 logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);







 }





 }







 }





 }







 









 























 private Set<Pair<N, D>> endSummary(M m, D d3) {





 private Set<SummaryEdge<D, N>> endSummary(M m, final D d3) {







 Set<Pair<N, D>> map = endSummary.get(new Pair<M, D>(m, d3));





 Set<SummaryEdge<D, N>> map = endSummary.get(m);







 return map;





 if(map == null)









 return null;









 









 return Sets.filter(map, new Predicate<SummaryEdge<D,N>>() {









 @Override









 public boolean apply(SummaryEdge<D, N> edge) {









 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3);









 }









 });







 }





 }





















 private boolean addEndSummary(M m, D d1, N eP, D d2) {





 private boolean addEndSummary(M m, SummaryEdge<D,N> summaryEdge) {







 Set<Pair<N, D>> summaries = endSummary.putIfAbsentElseGet





 Set<SummaryEdge<D, N>> summaries = endSummary.putIfAbsentElseGet







 (new Pair<M, D>(m, d1), new ConcurrentHashSet<Pair<N, D>>());





 (m, new ConcurrentHashSet<SummaryEdge<D, N>>());







 return summaries.add(new Pair<N, D>(eP, d2));





 return summaries.add(summaryEdge);







 } 





 } 





















 protected Map<D, MyConcurrentHashMap<N, Map<D, D>>> incoming(M m) {





 protected Set<IncomingEdge<D, N>> incoming(M m) {







 MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>> result = incoming.get(m);





 Set<IncomingEdge<D, N>> result = incoming.get(m);







 if(result == null)





 if(result == null)







 return new HashMap<>();





 return Collections.emptySet();







 else





 else







 return result;





 return result;







 }





 }







 





 







 protected Map<N, Map<D, D>> incoming(D d1, M m) {





 protected Set<IncomingEdge<D, N>> incoming(M m, final D abstractCalleeSourceFact) {







 Map<D, MyConcurrentHashMap<N, Map<D, D>>> summariesPerMethod = incoming(m);





 Set<IncomingEdge<D, N>> result = incoming(m);







 Map<N, Map<D, D>> map = summariesPerMethod.get(d1);





 return Sets.filter(result, new Predicate<IncomingEdge<D,N>>() {







 return map;





 @Override









 public boolean apply(IncomingEdge<D, N> edge) {









 return AccessPathUtil.isPrefixOf(abstractCalleeSourceFact, edge.getCalleeSourceFact());









 }









 });







 }





 }







 





 







 protected boolean addIncoming(M m, D d3, N n, D d1, D d2) {





 protected boolean addIncoming(M m, IncomingEdge<D, N> incomingEdge) {







 MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>> summaries = incoming.putIfAbsentElseGet





 Set<IncomingEdge<D,N>> set = incoming.putIfAbsentElseGet(m, new ConcurrentHashSet<IncomingEdge<D,N>>());







 (m, new MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>>());





 return set.add(incomingEdge);







 MyConcurrentHashMap<N, Map<D, D>> summariesPerCallSite = summaries.putIfAbsentElseGet(d3, new MyConcurrentHashMap<N, Map<D,D>>());









 Map<D, D> set = summariesPerCallSite.putIfAbsentElseGet(n, new ConcurrentHashMap<D, D>());









 return set.put(d1, d2) == null;









 }





 }







 





 







 /**





 /**



......















src/heros/alias/FlowFunctions.java








View file @ 3b064347








...@@ -7,6 +7,7 @@
...@@ -7,6 +7,7 @@






 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Eric Bodden - initial API and implementation









 *     Johannes Lerch, Johannes Späth - extension for field sensitivity







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















......















src/heros/alias/IncomingEdge.java



0 → 100644







View file @ 3b064347














/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros.alias;



















public class IncomingEdge<D, N> {



















 private D calleeSourceFact;









 private N callSite;









 private D callerSourceFact;









 private D callerCallSiteFact;









 









 public IncomingEdge(D calleeSourceFact, N callSite, D callerSourceFact, D callerCallSiteFact) {









 super();









 this.calleeSourceFact = calleeSourceFact;









 this.callSite = callSite;









 this.callerSourceFact = callerSourceFact;









 this.callerCallSiteFact = callerCallSiteFact;









 }









 









 public D getCalleeSourceFact() {









 return calleeSourceFact;









 }









 









 public D getCallerCallSiteFact() {









 return callerCallSiteFact;









 }









 









 public D getCallerSourceFact() {









 return callerSourceFact;









 }









 









 public N getCallSite() {









 return callSite;









 }



















 @Override









 public int hashCode() {









 final int prime = 31;









 int result = 1;









 result = prime * result + ((callSite == null) ? 0 : callSite.hashCode());









 result = prime * result + ((calleeSourceFact == null) ? 0 : calleeSourceFact.hashCode());









 result = prime * result + ((callerCallSiteFact == null) ? 0 : callerCallSiteFact.hashCode());









 result = prime * result + ((callerSourceFact == null) ? 0 : callerSourceFact.hashCode());









 return result;









 }



















 @Override









 public boolean equals(Object obj) {









 if (this == obj)









 return true;









 if (obj == null)









 return false;









 if (!(obj instanceof IncomingEdge))









 return false;









 IncomingEdge other = (IncomingEdge) obj;









 if (callSite == null) {









 if (other.callSite != null)









 return false;









 } else if (!callSite.equals(other.callSite))









 return false;









 if (calleeSourceFact == null) {









 if (other.calleeSourceFact != null)









 return false;









 } else if (!calleeSourceFact.equals(other.calleeSourceFact))









 return false;









 if (callerCallSiteFact == null) {









 if (other.callerCallSiteFact != null)









 return false;









 } else if (!callerCallSiteFact.equals(other.callerCallSiteFact))









 return false;









 if (callerSourceFact == null) {









 if (other.callerSourceFact != null)









 return false;









 } else if (!callerSourceFact.equals(other.callerSourceFact))









 return false;









 return true;









 }









 









 









}















src/heros/alias/SummaryEdge.java



0 → 100644







View file @ 3b064347














/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros.alias;



















public class SummaryEdge<D, N> {



















 private D sourceFact;









 private N targetStmt;









 private D targetFact;









 









 public SummaryEdge(D sourceFact, N targetStmt, D targetFact) {









 this.sourceFact = sourceFact;









 this.targetStmt = targetStmt;









 this.targetFact = targetFact;









 }



















 @Override









 public int hashCode() {









 final int prime = 31;









 int result = 1;









 result = prime * result + ((sourceFact == null) ? 0 : sourceFact.hashCode());









 result = prime * result + ((targetFact == null) ? 0 : targetFact.hashCode());









 result = prime * result + ((targetStmt == null) ? 0 : targetStmt.hashCode());









 return result;









 }









 









 @Override









 public boolean equals(Object obj) {









 if (this == obj)









 return true;









 if (obj == null)









 return false;









 if (!(obj instanceof SummaryEdge))









 return false;









 SummaryEdge other = (SummaryEdge) obj;









 if (sourceFact == null) {









 if (other.sourceFact != null)









 return false;









 } else if (!sourceFact.equals(other.sourceFact))









 return false;









 if (targetFact == null) {









 if (other.targetFact != null)









 return false;









 } else if (!targetFact.equals(other.targetFact))









 return false;









 if (targetStmt == null) {









 if (other.targetStmt != null)









 return false;









 } else if (!targetStmt.equals(other.targetStmt))









 return false;









 return true;









 }



















 public D getSourceFact() {









 return sourceFact;









 }









 









 public D getTargetFact() {









 return targetFact;









 }









 









 public N getTargetStmt() {









 return targetStmt;









 }









 









}















test/heros/alias/AccessPathUtilTest.java



0 → 100644







View file @ 3b064347














/*******************************************************************************









 * Copyright (c) 2014 Eric Bodden.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Eric Bodden - initial API and implementation









 ******************************************************************************/









package heros.alias;



















import static org.junit.Assert.assertEquals;









import static org.junit.Assert.assertFalse;









import static org.junit.Assert.assertTrue;



















import org.junit.Test;



















public class AccessPathUtilTest {



















 @Test









 public void testBaseValuePrefixOfFieldAccess() {









 assertTrue(AccessPathUtil.isPrefixOf(new Fact("a"), new Fact("a.f")));









 assertFalse(AccessPathUtil.isPrefixOf(new Fact("a.f"), new Fact("a")));









 }









 









 @Test









 public void testBaseValueIdentity() {









 assertTrue(AccessPathUtil.isPrefixOf(new Fact("a"), new Fact("a")));









 }









 









 @Test









 public void testFieldAccessPrefixOfFieldAccess() {









 assertTrue(AccessPathUtil.isPrefixOf(new Fact("a.b"), new Fact("a.b.c")));









 assertFalse(AccessPathUtil.isPrefixOf(new Fact("a.b.c"), new Fact("a.b")));









 }









 









 @Test









 public void testAbstractedSummary() {









 assertEquals(new Fact("z.f"), AccessPathUtil.applyAbstractedSummary(new Fact("a.f"), new SummaryEdge<>(new Fact("a"), null, new Fact("z"))));









 }









 









 @Test









 public void testAbstractedFieldAccessSummary() {









 assertEquals(new Fact("z.b.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.b.c"), new SummaryEdge<>(new Fact("a.b"), null, new Fact("z.b"))));









 }









 









 @Test









 public void testSummaryIntroducesFieldAccess() {









 assertEquals(new Fact("z.b.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.c"), new SummaryEdge<>(new Fact("a"), null, new Fact("z.b"))));









 }









 









 @Test









 public void testSummaryRemovesFieldAccess() {









 assertEquals(new Fact("z.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.b.c"), new SummaryEdge<>(new Fact("a.b"), null, new Fact("z"))));









 }









 









 @Test









 public void testNonAbstractedSummary() {









 assertEquals(new Fact("z"), AccessPathUtil.applyAbstractedSummary(new Fact("a"), new SummaryEdge<>(new Fact("a"), null, new Fact("z"))));









 }









}















test/heros/alias/FieldSensitiveSolverTest.java








View file @ 3b064347








...@@ -53,11 +53,31 @@ public class FieldSensitiveSolverTest {
...@@ -53,11 +53,31 @@ public class FieldSensitiveSolverTest {






 }





 }







 





 







 @Test





 @Test







 public void hold() {





 public void reuseSummaryForBaseValue() {







 helper.method("bar", 





 helper.method("bar", 







 startPoints("a"),





 startPoints("a"),







 normalStmt("a").succ("b", flow("0", "1")),





 normalStmt("a").succ("b", flow("0", "1")),







 writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),





 writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),









 callSite("c").calls("foo", flow("2.field", "3.field")).retSite("retC", flow("2.field", "2.field")));









 









 helper.method("foo",startPoints("d"),









 normalStmt("d").succ("e", flow("3", "4")),









 normalStmt("e").succ("f", flow("4","4")),









 exitStmt("f").returns(over("c"), to("retC"), flow("4.field", "5.field")).returns(over("g"), to("retG"), flow("4.anotherField", "6.anotherField")));



















 helper.method("xyz", 









 startPoints("g"),









 callSite("g").calls("foo", flow("0", "3.anotherField")).retSite("retG", kill("0")));









 









 helper.runSolver(false, "a", "g");









 }









 









 @Test









 public void hold() {









 helper.method("bar", 









 startPoints("a"),









 normalStmt("a").succ("b", flow("0", "1")),









 writeFieldStmt("b", "field").succ("c", flow("1", "2.field")),







 callSite("c").calls("foo", flow("2.field", "3.field")));





 callSite("c").calls("foo", flow("2.field", "3.field")));







 





 







 helper.method("foo",startPoints("d"),





 helper.method("foo",startPoints("d"),



...@@ -71,11 +91,11 @@ public class FieldSensitiveSolverTest {
...@@ -71,11 +91,11 @@ public class FieldSensitiveSolverTest {






 helper.method("bar", 





 helper.method("bar", 







 startPoints("a"),





 startPoints("a"),







 normalStmt("a").succ("b", flow("0", "1")),





 normalStmt("a").succ("b", flow("0", "1")),







 writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),





 writeFieldStmt("b", "field").succ("c", flow("1", "2.field")),







 callSite("c").calls("foo", flow("2.field", "3.field")));





 callSite("c").calls("foo", flow("2.field", "3.field")));







 





 







 helper.method("foo",startPoints("d"),





 helper.method("foo",startPoints("d"),







 readFieldStmt("d", "notfield").succ("e", flow("3", "3"), flow("3.notfield")),





 readFieldStmt("d", "notfield").succ("e", flow("3", "3"), kill("3.notfield")),







 normalStmt("e").succ("f", flow("3","4")));





 normalStmt("e").succ("f", flow("3","4")));







 





 







 helper.method("xyz",





 helper.method("xyz",



......

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
3b064347


authored
Oct 22, 2014
by


Johannes Lerch



Browse files




use of abstracted summaries







parent
f5ac702c













Changes
9




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPathUtil.java



0 → 100644







View file @ 3b064347














/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros.alias;



















public class AccessPathUtil {



















 public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {









 if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))









 return false; 









 









 FieldReference[] prefixAccessPath = prefixCandidate.getAccessPath();









 FieldReference[] factAccessPath = fact.getAccessPath();









 if(prefixAccessPath.length > factAccessPath.length)









 return false;









 









 for(int i=0; i<prefixAccessPath.length; i++) {









 if(!prefixAccessPath[i].equals(factAccessPath[i]))









 return false;









 }









 









 return true;









 }









 









 public static <D extends FieldSensitiveFact<?, D>> D applyAbstractedSummary(D sourceFact, SummaryEdge<D, ?> summary) {









 if(!isPrefixOf(summary.getSourceFact(), sourceFact))









 throw new IllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'", summary, sourceFact));









 









 FieldReference[] abstractAccessPath = summary.getSourceFact().getAccessPath();









 FieldReference[] concreteAccessPath = sourceFact.getAccessPath();









 FieldReference[] targetAccessPath = summary.getTargetFact().getAccessPath();









 









 FieldReference[] resultAccessPath = new FieldReference[targetAccessPath.length + concreteAccessPath.length - abstractAccessPath.length];



















 //copy old access path









 System.arraycopy(targetAccessPath, 0, resultAccessPath, 0, targetAccessPath.length);









 









 //copy delta access path that was omitted while creating the abstracted source fact









 System.arraycopy(concreteAccessPath, abstractAccessPath.length, resultAccessPath, targetAccessPath.length, concreteAccessPath.length - abstractAccessPath.length);









 









 return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);









 }









}















src/heros/alias/FieldReference.java








View file @ 3b064347












/*******************************************************************************





/*******************************************************************************







 * Copyright (c) 2014 Eric Bodden.





 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.







 * All rights reserved. This program and the accompanying materials





 * All rights reserved. This program and the accompanying materials







 * are made available under the terms of the GNU Lesser Public License v2.1





 * are made available under the terms of the GNU Lesser Public License v2.1







 * which accompanies this distribution, and is available at





 * which accompanies this distribution, and is available at







 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html





 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html







 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Johannes Lerch, Johannes Späth - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















......















src/heros/alias/FieldSensitiveFact.java








View file @ 3b064347












/*******************************************************************************





/*******************************************************************************







 * Copyright (c) 2014 Eric Bodden.





 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.







 * All rights reserved. This program and the accompanying materials





 * All rights reserved. This program and the accompanying materials







 * are made available under the terms of the GNU Lesser Public License v2.1





 * are made available under the terms of the GNU Lesser Public License v2.1







 * which accompanies this distribution, and is available at





 * which accompanies this distribution, and is available at







 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html





 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html







 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Johannes Lerch, Johannes Späth - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















......















src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 3b064347












/*******************************************************************************





/*******************************************************************************







 * Copyright (c) 2014 Eric Bodden.





 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.







 * All rights reserved. This program and the accompanying materials





 * All rights reserved. This program and the accompanying materials







 * are made available under the terms of the GNU Lesser Public License v2.1





 * are made available under the terms of the GNU Lesser Public License v2.1







 * which accompanies this distribution, and is available at





 * which accompanies this distribution, and is available at







 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html





 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html







 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Johannes Lerch, Johannes Späth - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















...@@ -24,7 +24,9 @@ import java.util.concurrent.TimeUnit;
...@@ -24,7 +24,9 @@ import java.util.concurrent.TimeUnit;






import org.slf4j.Logger;





import org.slf4j.Logger;







import org.slf4j.LoggerFactory;





import org.slf4j.LoggerFactory;























import com.google.common.base.Predicate;







import com.google.common.cache.CacheBuilder;





import com.google.common.cache.CacheBuilder;









import com.google.common.collect.Sets;





















import heros.DontSynchronize;





import heros.DontSynchronize;







import heros.FlowFunction;





import heros.FlowFunction;



...@@ -63,14 +65,14 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -63,14 +65,14 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //stores summaries that were queried before they were computed





 //stores summaries that were queried before they were computed







 //see CC 2010 paper by Naeem, Lhotak and Rodriguez





 //see CC 2010 paper by Naeem, Lhotak and Rodriguez







 @SynchronizedBy("consistent lock on 'incoming'")





 @SynchronizedBy("consistent lock on 'incoming'")







 protected final MyConcurrentHashMap<Pair<M,D>,Set<Pair<N,D>>> endSummary =





 protected final MyConcurrentHashMap<M,Set<SummaryEdge<D, N>>> endSummary =







 new MyConcurrentHashMap<Pair<M,D>, Set<Pair<N,D>>>();





 new MyConcurrentHashMap<M, Set<SummaryEdge<D, N>>>();







 





 







 //edges going along calls





 //edges going along calls







 //see CC 2010 paper by Naeem, Lhotak and Rodriguez





 //see CC 2010 paper by Naeem, Lhotak and Rodriguez







 @SynchronizedBy("consistent lock on field")





 @SynchronizedBy("consistent lock on field")







 protected final MyConcurrentHashMap<M, MyConcurrentHashMap<D,MyConcurrentHashMap<N,Map<D, D>>>> incoming =





 protected final MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>> incoming =







 new MyConcurrentHashMap<M, MyConcurrentHashMap<D,MyConcurrentHashMap<N,Map<D, D>>>>();





 new MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>>();







 





 







 @DontSynchronize("stateless")





 @DontSynchronize("stateless")







 protected final FlowFunctions<N, D, M> flowFunctions;





 protected final FlowFunctions<N, D, M> flowFunctions;



...@@ -229,36 +231,34 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -229,36 +231,34 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //for each callee's start point(s)





 //for each callee's start point(s)







 for(N sP: startPointsOf) {





 for(N sP: startPointsOf) {







 //create initial self-loop





 //create initial self-loop







 D abstractStartPointFact = d3.cloneWithAccessPath(new FieldReference.Any());





 D abstractStartPointFact = d3.cloneWithAccessPath();







 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15





 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15







 }





 }







 





 







 //register the fact that <sp,d3> has an incoming edge from <n,d2>





 //register the fact that <sp,d3> has an incoming edge from <n,d2>







 //line 15.1 of Naeem/Lhotak/Rodriguez





 //line 15.1 of Naeem/Lhotak/Rodriguez







 if (!addIncoming(sCalledProcN,d3,n,d1,d2))





 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3,n,d1,d2)))







 continue;





 continue;







 





 







 //TODO: Resume edges that are on hold and match this d3





 //TODO: Resume edges that are on hold and match this d3







 





 







 //line 15.2





 //line 15.2







 //TODO: include more abstract d3 summaries as well





 Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3);







 Set<Pair<N, D>> endSumm = endSummary(sCalledProcN, d3);









 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez







 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,





 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,







 //create new caller-side jump functions to the return sites





 //create new caller-side jump functions to the return sites







 //because we have observed a potentially new incoming edge into <sP,d3>





 //because we have observed a potentially new incoming edge into <sP,d3>







 if (endSumm != null)





 if (endSumm != null)







 for(Pair<N, D> entry: endSumm) {





 for(SummaryEdge<D, N> summary: endSumm) {







 N eP = entry.getO1();





 D d4 = AccessPathUtil.applyAbstractedSummary(d3, summary);







 D d4 = entry.getO2();





 







 //for each return site





 //for each return site







 for(N retSiteN: returnSiteNs) {





 for(N retSiteN: returnSiteNs) {







 //compute return-flow function





 //compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);







 //for each target value of the function





 //for each target value of the function







 //TODO: Map abstracted d4 back (using the summary)





 for(D d5: computeReturnFlowFunction(retFunction, d4, n)) {







 for(D d5: computeReturnFlowFunction(retFunction, d4, n, Collections.singleton(d2))) {









 // If we have not changed anything in the callee, we do not need the facts





 // If we have not changed anything in the callee, we do not need the facts







 // from there. Even if we change something: If we don't need the concrete





 // from there. Even if we change something: If we don't need the concrete







 // path, we can skip the callee in the predecessor chain





 // path, we can skip the callee in the predecessor chain



...@@ -332,42 +332,30 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -332,42 +332,30 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 





 







 //line 21.1 of Naeem/Lhotak/Rodriguez





 //line 21.1 of Naeem/Lhotak/Rodriguez







 //register end-summary





 //register end-summary







 if (!addEndSummary(methodThatNeedsSummary, d1, n, d2))





 SummaryEdge<D, N> summaryEdge = new SummaryEdge<D, N>(d1, n, d2);









 if (!addEndSummary(methodThatNeedsSummary, summaryEdge))







 return;





 return;







 





 







 //TODO: include more abstract d1 values in incoming set





 Set<IncomingEdge<D, N>> inc = incoming(methodThatNeedsSummary, d1);







 Map<N,Map<D, D>> inc = incoming(d1, methodThatNeedsSummary);









 





 







 //for each incoming call edge already processed





 //for each incoming call edge already processed







 //(see processCall(..))





 //(see processCall(..))







 if (inc != null)





 if (inc != null)







 for (Entry<N,Map<D, D>> entry: inc.entrySet()) {





 for (IncomingEdge<D, N> incomingEdge : inc) {







 //line 22





 // line 22







 N c = entry.getKey();





 N callSite = incomingEdge.getCallSite();







 //for each return site





 // for each return site







 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {





 for (N retSiteC : icfg.getReturnSitesOfCallAt(callSite)) {







 //compute return-flow function





 // compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);







 //TODO: create concrete d2, this d2 is currently an abstracted version





 D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);







 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, entry.getValue().keySet());





 Set<D> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);







 //for each incoming-call value













 for(D d4: entry.getValue().keySet())





 // for each incoming-call value







 for(D d5: targets) {





 for (D callerTargetFact : callerTargetFacts) {







 // If we have not changed anything in the callee, we do not need the facts





 callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetFact);







 // from there. Even if we change something: If we don't need the concrete





 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);







 // path, we can skip the callee in the predecessor chain





 }







 D d5p = d5;









 /*	D predVal = entry.getValue().get(d4);









							if (d5.equals(predVal))









								d5p = predVal;









							else if (setJumpPredecessors)









								d5.setPredecessor(predVal);*/









 









 // Set the calling context









 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5p);









 









 propagate(d4, retSiteC, d5p_restoredCtx, c, false);









 }









 }





 }







 }





 }







 





 



...@@ -379,7 +367,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -379,7 +367,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 for(N c: callers) {





 for(N c: callers) {







 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {





 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);







 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, Collections.singleton(zeroValue));





 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c);







 for(D d5: targets)





 for(D d5: targets)







 propagate(zeroValue, retSiteC, d5, c, true);





 propagate(zeroValue, retSiteC, d5, c, true);







 }





 }



...@@ -400,11 +388,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -400,11 +388,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param retFunction The return flow function to compute





	 * @param retFunction The return flow function to compute







	 * @param d2 The abstraction at the exit node in the callee





	 * @param d2 The abstraction at the exit node in the callee







	 * @param callSite The call site





	 * @param callSite The call site







	 * @param callerSideDs The abstractions at the call site









	 * @return The set of caller-side abstractions at the return site





	 * @return The set of caller-side abstractions at the return site







	 */





	 */







 protected Set<D> computeReturnFlowFunction





 protected Set<D> computeReturnFlowFunction







 (FlowFunction<D> retFunction, D d2, N callSite, Collection<D> callerSideDs) {





 (FlowFunction<D> retFunction, D d2, N callSite) {







 return retFunction.computeTargets(d2);





 return retFunction.computeTargets(d2);







 }





 }

















...@@ -501,40 +488,47 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -501,40 +488,47 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);





 logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);







 }





 }







 }





 }







 









 























 private Set<Pair<N, D>> endSummary(M m, D d3) {





 private Set<SummaryEdge<D, N>> endSummary(M m, final D d3) {







 Set<Pair<N, D>> map = endSummary.get(new Pair<M, D>(m, d3));





 Set<SummaryEdge<D, N>> map = endSummary.get(m);







 return map;





 if(map == null)









 return null;









 









 return Sets.filter(map, new Predicate<SummaryEdge<D,N>>() {









 @Override









 public boolean apply(SummaryEdge<D, N> edge) {









 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3);









 }









 });







 }





 }





















 private boolean addEndSummary(M m, D d1, N eP, D d2) {





 private boolean addEndSummary(M m, SummaryEdge<D,N> summaryEdge) {







 Set<Pair<N, D>> summaries = endSummary.putIfAbsentElseGet





 Set<SummaryEdge<D, N>> summaries = endSummary.putIfAbsentElseGet







 (new Pair<M, D>(m, d1), new ConcurrentHashSet<Pair<N, D>>());





 (m, new ConcurrentHashSet<SummaryEdge<D, N>>());







 return summaries.add(new Pair<N, D>(eP, d2));





 return summaries.add(summaryEdge);







 } 





 } 





















 protected Map<D, MyConcurrentHashMap<N, Map<D, D>>> incoming(M m) {





 protected Set<IncomingEdge<D, N>> incoming(M m) {







 MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>> result = incoming.get(m);





 Set<IncomingEdge<D, N>> result = incoming.get(m);







 if(result == null)





 if(result == null)







 return new HashMap<>();





 return Collections.emptySet();







 else





 else







 return result;





 return result;







 }





 }







 





 







 protected Map<N, Map<D, D>> incoming(D d1, M m) {





 protected Set<IncomingEdge<D, N>> incoming(M m, final D abstractCalleeSourceFact) {







 Map<D, MyConcurrentHashMap<N, Map<D, D>>> summariesPerMethod = incoming(m);





 Set<IncomingEdge<D, N>> result = incoming(m);







 Map<N, Map<D, D>> map = summariesPerMethod.get(d1);





 return Sets.filter(result, new Predicate<IncomingEdge<D,N>>() {







 return map;





 @Override









 public boolean apply(IncomingEdge<D, N> edge) {









 return AccessPathUtil.isPrefixOf(abstractCalleeSourceFact, edge.getCalleeSourceFact());









 }









 });







 }





 }







 





 







 protected boolean addIncoming(M m, D d3, N n, D d1, D d2) {





 protected boolean addIncoming(M m, IncomingEdge<D, N> incomingEdge) {







 MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>> summaries = incoming.putIfAbsentElseGet





 Set<IncomingEdge<D,N>> set = incoming.putIfAbsentElseGet(m, new ConcurrentHashSet<IncomingEdge<D,N>>());







 (m, new MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>>());





 return set.add(incomingEdge);







 MyConcurrentHashMap<N, Map<D, D>> summariesPerCallSite = summaries.putIfAbsentElseGet(d3, new MyConcurrentHashMap<N, Map<D,D>>());









 Map<D, D> set = summariesPerCallSite.putIfAbsentElseGet(n, new ConcurrentHashMap<D, D>());









 return set.put(d1, d2) == null;









 }





 }







 





 







 /**





 /**



......















src/heros/alias/FlowFunctions.java








View file @ 3b064347








...@@ -7,6 +7,7 @@
...@@ -7,6 +7,7 @@






 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Eric Bodden - initial API and implementation









 *     Johannes Lerch, Johannes Späth - extension for field sensitivity







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















......















src/heros/alias/IncomingEdge.java



0 → 100644







View file @ 3b064347














/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros.alias;



















public class IncomingEdge<D, N> {



















 private D calleeSourceFact;









 private N callSite;









 private D callerSourceFact;









 private D callerCallSiteFact;









 









 public IncomingEdge(D calleeSourceFact, N callSite, D callerSourceFact, D callerCallSiteFact) {









 super();









 this.calleeSourceFact = calleeSourceFact;









 this.callSite = callSite;









 this.callerSourceFact = callerSourceFact;









 this.callerCallSiteFact = callerCallSiteFact;









 }









 









 public D getCalleeSourceFact() {









 return calleeSourceFact;









 }









 









 public D getCallerCallSiteFact() {









 return callerCallSiteFact;









 }









 









 public D getCallerSourceFact() {









 return callerSourceFact;









 }









 









 public N getCallSite() {









 return callSite;









 }



















 @Override









 public int hashCode() {









 final int prime = 31;









 int result = 1;









 result = prime * result + ((callSite == null) ? 0 : callSite.hashCode());









 result = prime * result + ((calleeSourceFact == null) ? 0 : calleeSourceFact.hashCode());









 result = prime * result + ((callerCallSiteFact == null) ? 0 : callerCallSiteFact.hashCode());









 result = prime * result + ((callerSourceFact == null) ? 0 : callerSourceFact.hashCode());









 return result;









 }



















 @Override









 public boolean equals(Object obj) {









 if (this == obj)









 return true;









 if (obj == null)









 return false;









 if (!(obj instanceof IncomingEdge))









 return false;









 IncomingEdge other = (IncomingEdge) obj;









 if (callSite == null) {









 if (other.callSite != null)









 return false;









 } else if (!callSite.equals(other.callSite))









 return false;









 if (calleeSourceFact == null) {









 if (other.calleeSourceFact != null)









 return false;









 } else if (!calleeSourceFact.equals(other.calleeSourceFact))









 return false;









 if (callerCallSiteFact == null) {









 if (other.callerCallSiteFact != null)









 return false;









 } else if (!callerCallSiteFact.equals(other.callerCallSiteFact))









 return false;









 if (callerSourceFact == null) {









 if (other.callerSourceFact != null)









 return false;









 } else if (!callerSourceFact.equals(other.callerSourceFact))









 return false;









 return true;









 }









 









 









}















src/heros/alias/SummaryEdge.java



0 → 100644







View file @ 3b064347














/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros.alias;



















public class SummaryEdge<D, N> {



















 private D sourceFact;









 private N targetStmt;









 private D targetFact;









 









 public SummaryEdge(D sourceFact, N targetStmt, D targetFact) {









 this.sourceFact = sourceFact;









 this.targetStmt = targetStmt;









 this.targetFact = targetFact;









 }



















 @Override









 public int hashCode() {









 final int prime = 31;









 int result = 1;









 result = prime * result + ((sourceFact == null) ? 0 : sourceFact.hashCode());









 result = prime * result + ((targetFact == null) ? 0 : targetFact.hashCode());









 result = prime * result + ((targetStmt == null) ? 0 : targetStmt.hashCode());









 return result;









 }









 









 @Override









 public boolean equals(Object obj) {









 if (this == obj)









 return true;









 if (obj == null)









 return false;









 if (!(obj instanceof SummaryEdge))









 return false;









 SummaryEdge other = (SummaryEdge) obj;









 if (sourceFact == null) {









 if (other.sourceFact != null)









 return false;









 } else if (!sourceFact.equals(other.sourceFact))









 return false;









 if (targetFact == null) {









 if (other.targetFact != null)









 return false;









 } else if (!targetFact.equals(other.targetFact))









 return false;









 if (targetStmt == null) {









 if (other.targetStmt != null)









 return false;









 } else if (!targetStmt.equals(other.targetStmt))









 return false;









 return true;









 }



















 public D getSourceFact() {









 return sourceFact;









 }









 









 public D getTargetFact() {









 return targetFact;









 }









 









 public N getTargetStmt() {









 return targetStmt;









 }









 









}















test/heros/alias/AccessPathUtilTest.java



0 → 100644







View file @ 3b064347














/*******************************************************************************









 * Copyright (c) 2014 Eric Bodden.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Eric Bodden - initial API and implementation









 ******************************************************************************/









package heros.alias;



















import static org.junit.Assert.assertEquals;









import static org.junit.Assert.assertFalse;









import static org.junit.Assert.assertTrue;



















import org.junit.Test;



















public class AccessPathUtilTest {



















 @Test









 public void testBaseValuePrefixOfFieldAccess() {









 assertTrue(AccessPathUtil.isPrefixOf(new Fact("a"), new Fact("a.f")));









 assertFalse(AccessPathUtil.isPrefixOf(new Fact("a.f"), new Fact("a")));









 }









 









 @Test









 public void testBaseValueIdentity() {









 assertTrue(AccessPathUtil.isPrefixOf(new Fact("a"), new Fact("a")));









 }









 









 @Test









 public void testFieldAccessPrefixOfFieldAccess() {









 assertTrue(AccessPathUtil.isPrefixOf(new Fact("a.b"), new Fact("a.b.c")));









 assertFalse(AccessPathUtil.isPrefixOf(new Fact("a.b.c"), new Fact("a.b")));









 }









 









 @Test









 public void testAbstractedSummary() {









 assertEquals(new Fact("z.f"), AccessPathUtil.applyAbstractedSummary(new Fact("a.f"), new SummaryEdge<>(new Fact("a"), null, new Fact("z"))));









 }









 









 @Test









 public void testAbstractedFieldAccessSummary() {









 assertEquals(new Fact("z.b.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.b.c"), new SummaryEdge<>(new Fact("a.b"), null, new Fact("z.b"))));









 }









 









 @Test









 public void testSummaryIntroducesFieldAccess() {









 assertEquals(new Fact("z.b.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.c"), new SummaryEdge<>(new Fact("a"), null, new Fact("z.b"))));









 }









 









 @Test









 public void testSummaryRemovesFieldAccess() {









 assertEquals(new Fact("z.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.b.c"), new SummaryEdge<>(new Fact("a.b"), null, new Fact("z"))));









 }









 









 @Test









 public void testNonAbstractedSummary() {









 assertEquals(new Fact("z"), AccessPathUtil.applyAbstractedSummary(new Fact("a"), new SummaryEdge<>(new Fact("a"), null, new Fact("z"))));









 }









}















test/heros/alias/FieldSensitiveSolverTest.java








View file @ 3b064347








...@@ -53,11 +53,31 @@ public class FieldSensitiveSolverTest {
...@@ -53,11 +53,31 @@ public class FieldSensitiveSolverTest {






 }





 }







 





 







 @Test





 @Test







 public void hold() {





 public void reuseSummaryForBaseValue() {







 helper.method("bar", 





 helper.method("bar", 







 startPoints("a"),





 startPoints("a"),







 normalStmt("a").succ("b", flow("0", "1")),





 normalStmt("a").succ("b", flow("0", "1")),







 writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),





 writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),









 callSite("c").calls("foo", flow("2.field", "3.field")).retSite("retC", flow("2.field", "2.field")));









 









 helper.method("foo",startPoints("d"),









 normalStmt("d").succ("e", flow("3", "4")),









 normalStmt("e").succ("f", flow("4","4")),









 exitStmt("f").returns(over("c"), to("retC"), flow("4.field", "5.field")).returns(over("g"), to("retG"), flow("4.anotherField", "6.anotherField")));



















 helper.method("xyz", 









 startPoints("g"),









 callSite("g").calls("foo", flow("0", "3.anotherField")).retSite("retG", kill("0")));









 









 helper.runSolver(false, "a", "g");









 }









 









 @Test









 public void hold() {









 helper.method("bar", 









 startPoints("a"),









 normalStmt("a").succ("b", flow("0", "1")),









 writeFieldStmt("b", "field").succ("c", flow("1", "2.field")),







 callSite("c").calls("foo", flow("2.field", "3.field")));





 callSite("c").calls("foo", flow("2.field", "3.field")));







 





 







 helper.method("foo",startPoints("d"),





 helper.method("foo",startPoints("d"),



...@@ -71,11 +91,11 @@ public class FieldSensitiveSolverTest {
...@@ -71,11 +91,11 @@ public class FieldSensitiveSolverTest {






 helper.method("bar", 





 helper.method("bar", 







 startPoints("a"),





 startPoints("a"),







 normalStmt("a").succ("b", flow("0", "1")),





 normalStmt("a").succ("b", flow("0", "1")),







 writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),





 writeFieldStmt("b", "field").succ("c", flow("1", "2.field")),







 callSite("c").calls("foo", flow("2.field", "3.field")));





 callSite("c").calls("foo", flow("2.field", "3.field")));







 





 







 helper.method("foo",startPoints("d"),





 helper.method("foo",startPoints("d"),







 readFieldStmt("d", "notfield").succ("e", flow("3", "3"), flow("3.notfield")),





 readFieldStmt("d", "notfield").succ("e", flow("3", "3"), kill("3.notfield")),







 normalStmt("e").succ("f", flow("3","4")));





 normalStmt("e").succ("f", flow("3","4")));







 





 







 helper.method("xyz",





 helper.method("xyz",



......

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
3b064347


authored
Oct 22, 2014
by


Johannes Lerch



Browse files



Commit
3b064347


authored
Oct 22, 2014
by


Johannes Lerch

3b064347authoredbyJohannes Lerch

use of abstracted summaries






parent
f5ac702c
















parent
f5ac702c





parent












Changes
9
9


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/alias/AccessPathUtil.java



0 → 100644







View file @ 3b064347














/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros.alias;



















public class AccessPathUtil {



















 public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {









 if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))









 return false; 









 









 FieldReference[] prefixAccessPath = prefixCandidate.getAccessPath();









 FieldReference[] factAccessPath = fact.getAccessPath();









 if(prefixAccessPath.length > factAccessPath.length)









 return false;









 









 for(int i=0; i<prefixAccessPath.length; i++) {









 if(!prefixAccessPath[i].equals(factAccessPath[i]))









 return false;









 }









 









 return true;









 }









 









 public static <D extends FieldSensitiveFact<?, D>> D applyAbstractedSummary(D sourceFact, SummaryEdge<D, ?> summary) {









 if(!isPrefixOf(summary.getSourceFact(), sourceFact))









 throw new IllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'", summary, sourceFact));









 









 FieldReference[] abstractAccessPath = summary.getSourceFact().getAccessPath();









 FieldReference[] concreteAccessPath = sourceFact.getAccessPath();









 FieldReference[] targetAccessPath = summary.getTargetFact().getAccessPath();









 









 FieldReference[] resultAccessPath = new FieldReference[targetAccessPath.length + concreteAccessPath.length - abstractAccessPath.length];



















 //copy old access path









 System.arraycopy(targetAccessPath, 0, resultAccessPath, 0, targetAccessPath.length);









 









 //copy delta access path that was omitted while creating the abstracted source fact









 System.arraycopy(concreteAccessPath, abstractAccessPath.length, resultAccessPath, targetAccessPath.length, concreteAccessPath.length - abstractAccessPath.length);









 









 return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);









 }









}















src/heros/alias/FieldReference.java








View file @ 3b064347












/*******************************************************************************





/*******************************************************************************







 * Copyright (c) 2014 Eric Bodden.





 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.







 * All rights reserved. This program and the accompanying materials





 * All rights reserved. This program and the accompanying materials







 * are made available under the terms of the GNU Lesser Public License v2.1





 * are made available under the terms of the GNU Lesser Public License v2.1







 * which accompanies this distribution, and is available at





 * which accompanies this distribution, and is available at







 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html





 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html







 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Johannes Lerch, Johannes Späth - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















......















src/heros/alias/FieldSensitiveFact.java








View file @ 3b064347












/*******************************************************************************





/*******************************************************************************







 * Copyright (c) 2014 Eric Bodden.





 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.







 * All rights reserved. This program and the accompanying materials





 * All rights reserved. This program and the accompanying materials







 * are made available under the terms of the GNU Lesser Public License v2.1





 * are made available under the terms of the GNU Lesser Public License v2.1







 * which accompanies this distribution, and is available at





 * which accompanies this distribution, and is available at







 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html





 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html







 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Johannes Lerch, Johannes Späth - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















......















src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 3b064347












/*******************************************************************************





/*******************************************************************************







 * Copyright (c) 2014 Eric Bodden.





 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.







 * All rights reserved. This program and the accompanying materials





 * All rights reserved. This program and the accompanying materials







 * are made available under the terms of the GNU Lesser Public License v2.1





 * are made available under the terms of the GNU Lesser Public License v2.1







 * which accompanies this distribution, and is available at





 * which accompanies this distribution, and is available at







 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html





 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html







 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Johannes Lerch, Johannes Späth - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















...@@ -24,7 +24,9 @@ import java.util.concurrent.TimeUnit;
...@@ -24,7 +24,9 @@ import java.util.concurrent.TimeUnit;






import org.slf4j.Logger;





import org.slf4j.Logger;







import org.slf4j.LoggerFactory;





import org.slf4j.LoggerFactory;























import com.google.common.base.Predicate;







import com.google.common.cache.CacheBuilder;





import com.google.common.cache.CacheBuilder;









import com.google.common.collect.Sets;





















import heros.DontSynchronize;





import heros.DontSynchronize;







import heros.FlowFunction;





import heros.FlowFunction;



...@@ -63,14 +65,14 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -63,14 +65,14 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //stores summaries that were queried before they were computed





 //stores summaries that were queried before they were computed







 //see CC 2010 paper by Naeem, Lhotak and Rodriguez





 //see CC 2010 paper by Naeem, Lhotak and Rodriguez







 @SynchronizedBy("consistent lock on 'incoming'")





 @SynchronizedBy("consistent lock on 'incoming'")







 protected final MyConcurrentHashMap<Pair<M,D>,Set<Pair<N,D>>> endSummary =





 protected final MyConcurrentHashMap<M,Set<SummaryEdge<D, N>>> endSummary =







 new MyConcurrentHashMap<Pair<M,D>, Set<Pair<N,D>>>();





 new MyConcurrentHashMap<M, Set<SummaryEdge<D, N>>>();







 





 







 //edges going along calls





 //edges going along calls







 //see CC 2010 paper by Naeem, Lhotak and Rodriguez





 //see CC 2010 paper by Naeem, Lhotak and Rodriguez







 @SynchronizedBy("consistent lock on field")





 @SynchronizedBy("consistent lock on field")







 protected final MyConcurrentHashMap<M, MyConcurrentHashMap<D,MyConcurrentHashMap<N,Map<D, D>>>> incoming =





 protected final MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>> incoming =







 new MyConcurrentHashMap<M, MyConcurrentHashMap<D,MyConcurrentHashMap<N,Map<D, D>>>>();





 new MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>>();







 





 







 @DontSynchronize("stateless")





 @DontSynchronize("stateless")







 protected final FlowFunctions<N, D, M> flowFunctions;





 protected final FlowFunctions<N, D, M> flowFunctions;



...@@ -229,36 +231,34 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -229,36 +231,34 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //for each callee's start point(s)





 //for each callee's start point(s)







 for(N sP: startPointsOf) {





 for(N sP: startPointsOf) {







 //create initial self-loop





 //create initial self-loop







 D abstractStartPointFact = d3.cloneWithAccessPath(new FieldReference.Any());





 D abstractStartPointFact = d3.cloneWithAccessPath();







 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15





 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15







 }





 }







 





 







 //register the fact that <sp,d3> has an incoming edge from <n,d2>





 //register the fact that <sp,d3> has an incoming edge from <n,d2>







 //line 15.1 of Naeem/Lhotak/Rodriguez





 //line 15.1 of Naeem/Lhotak/Rodriguez







 if (!addIncoming(sCalledProcN,d3,n,d1,d2))





 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3,n,d1,d2)))







 continue;





 continue;







 





 







 //TODO: Resume edges that are on hold and match this d3





 //TODO: Resume edges that are on hold and match this d3







 





 







 //line 15.2





 //line 15.2







 //TODO: include more abstract d3 summaries as well





 Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3);







 Set<Pair<N, D>> endSumm = endSummary(sCalledProcN, d3);









 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez







 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,





 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,







 //create new caller-side jump functions to the return sites





 //create new caller-side jump functions to the return sites







 //because we have observed a potentially new incoming edge into <sP,d3>





 //because we have observed a potentially new incoming edge into <sP,d3>







 if (endSumm != null)





 if (endSumm != null)







 for(Pair<N, D> entry: endSumm) {





 for(SummaryEdge<D, N> summary: endSumm) {







 N eP = entry.getO1();





 D d4 = AccessPathUtil.applyAbstractedSummary(d3, summary);







 D d4 = entry.getO2();





 







 //for each return site





 //for each return site







 for(N retSiteN: returnSiteNs) {





 for(N retSiteN: returnSiteNs) {







 //compute return-flow function





 //compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);







 //for each target value of the function





 //for each target value of the function







 //TODO: Map abstracted d4 back (using the summary)





 for(D d5: computeReturnFlowFunction(retFunction, d4, n)) {







 for(D d5: computeReturnFlowFunction(retFunction, d4, n, Collections.singleton(d2))) {









 // If we have not changed anything in the callee, we do not need the facts





 // If we have not changed anything in the callee, we do not need the facts







 // from there. Even if we change something: If we don't need the concrete





 // from there. Even if we change something: If we don't need the concrete







 // path, we can skip the callee in the predecessor chain





 // path, we can skip the callee in the predecessor chain



...@@ -332,42 +332,30 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -332,42 +332,30 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 





 







 //line 21.1 of Naeem/Lhotak/Rodriguez





 //line 21.1 of Naeem/Lhotak/Rodriguez







 //register end-summary





 //register end-summary







 if (!addEndSummary(methodThatNeedsSummary, d1, n, d2))





 SummaryEdge<D, N> summaryEdge = new SummaryEdge<D, N>(d1, n, d2);









 if (!addEndSummary(methodThatNeedsSummary, summaryEdge))







 return;





 return;







 





 







 //TODO: include more abstract d1 values in incoming set





 Set<IncomingEdge<D, N>> inc = incoming(methodThatNeedsSummary, d1);







 Map<N,Map<D, D>> inc = incoming(d1, methodThatNeedsSummary);









 





 







 //for each incoming call edge already processed





 //for each incoming call edge already processed







 //(see processCall(..))





 //(see processCall(..))







 if (inc != null)





 if (inc != null)







 for (Entry<N,Map<D, D>> entry: inc.entrySet()) {





 for (IncomingEdge<D, N> incomingEdge : inc) {







 //line 22





 // line 22







 N c = entry.getKey();





 N callSite = incomingEdge.getCallSite();







 //for each return site





 // for each return site







 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {





 for (N retSiteC : icfg.getReturnSitesOfCallAt(callSite)) {







 //compute return-flow function





 // compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);







 //TODO: create concrete d2, this d2 is currently an abstracted version





 D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);







 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, entry.getValue().keySet());





 Set<D> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);







 //for each incoming-call value













 for(D d4: entry.getValue().keySet())





 // for each incoming-call value







 for(D d5: targets) {





 for (D callerTargetFact : callerTargetFacts) {







 // If we have not changed anything in the callee, we do not need the facts





 callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetFact);







 // from there. Even if we change something: If we don't need the concrete





 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);







 // path, we can skip the callee in the predecessor chain





 }







 D d5p = d5;









 /*	D predVal = entry.getValue().get(d4);









							if (d5.equals(predVal))









								d5p = predVal;









							else if (setJumpPredecessors)









								d5.setPredecessor(predVal);*/









 









 // Set the calling context









 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5p);









 









 propagate(d4, retSiteC, d5p_restoredCtx, c, false);









 }









 }





 }







 }





 }







 





 



...@@ -379,7 +367,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -379,7 +367,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 for(N c: callers) {





 for(N c: callers) {







 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {





 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);







 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, Collections.singleton(zeroValue));





 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c);







 for(D d5: targets)





 for(D d5: targets)







 propagate(zeroValue, retSiteC, d5, c, true);





 propagate(zeroValue, retSiteC, d5, c, true);







 }





 }



...@@ -400,11 +388,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -400,11 +388,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param retFunction The return flow function to compute





	 * @param retFunction The return flow function to compute







	 * @param d2 The abstraction at the exit node in the callee





	 * @param d2 The abstraction at the exit node in the callee







	 * @param callSite The call site





	 * @param callSite The call site







	 * @param callerSideDs The abstractions at the call site









	 * @return The set of caller-side abstractions at the return site





	 * @return The set of caller-side abstractions at the return site







	 */





	 */







 protected Set<D> computeReturnFlowFunction





 protected Set<D> computeReturnFlowFunction







 (FlowFunction<D> retFunction, D d2, N callSite, Collection<D> callerSideDs) {





 (FlowFunction<D> retFunction, D d2, N callSite) {







 return retFunction.computeTargets(d2);





 return retFunction.computeTargets(d2);







 }





 }

















...@@ -501,40 +488,47 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -501,40 +488,47 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);





 logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);







 }





 }







 }





 }







 









 























 private Set<Pair<N, D>> endSummary(M m, D d3) {





 private Set<SummaryEdge<D, N>> endSummary(M m, final D d3) {







 Set<Pair<N, D>> map = endSummary.get(new Pair<M, D>(m, d3));





 Set<SummaryEdge<D, N>> map = endSummary.get(m);







 return map;





 if(map == null)









 return null;









 









 return Sets.filter(map, new Predicate<SummaryEdge<D,N>>() {









 @Override









 public boolean apply(SummaryEdge<D, N> edge) {









 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3);









 }









 });







 }





 }





















 private boolean addEndSummary(M m, D d1, N eP, D d2) {





 private boolean addEndSummary(M m, SummaryEdge<D,N> summaryEdge) {







 Set<Pair<N, D>> summaries = endSummary.putIfAbsentElseGet





 Set<SummaryEdge<D, N>> summaries = endSummary.putIfAbsentElseGet







 (new Pair<M, D>(m, d1), new ConcurrentHashSet<Pair<N, D>>());





 (m, new ConcurrentHashSet<SummaryEdge<D, N>>());







 return summaries.add(new Pair<N, D>(eP, d2));





 return summaries.add(summaryEdge);







 } 





 } 





















 protected Map<D, MyConcurrentHashMap<N, Map<D, D>>> incoming(M m) {





 protected Set<IncomingEdge<D, N>> incoming(M m) {







 MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>> result = incoming.get(m);





 Set<IncomingEdge<D, N>> result = incoming.get(m);







 if(result == null)





 if(result == null)







 return new HashMap<>();





 return Collections.emptySet();







 else





 else







 return result;





 return result;







 }





 }







 





 







 protected Map<N, Map<D, D>> incoming(D d1, M m) {





 protected Set<IncomingEdge<D, N>> incoming(M m, final D abstractCalleeSourceFact) {







 Map<D, MyConcurrentHashMap<N, Map<D, D>>> summariesPerMethod = incoming(m);





 Set<IncomingEdge<D, N>> result = incoming(m);







 Map<N, Map<D, D>> map = summariesPerMethod.get(d1);





 return Sets.filter(result, new Predicate<IncomingEdge<D,N>>() {







 return map;





 @Override









 public boolean apply(IncomingEdge<D, N> edge) {









 return AccessPathUtil.isPrefixOf(abstractCalleeSourceFact, edge.getCalleeSourceFact());









 }









 });







 }





 }







 





 







 protected boolean addIncoming(M m, D d3, N n, D d1, D d2) {





 protected boolean addIncoming(M m, IncomingEdge<D, N> incomingEdge) {







 MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>> summaries = incoming.putIfAbsentElseGet





 Set<IncomingEdge<D,N>> set = incoming.putIfAbsentElseGet(m, new ConcurrentHashSet<IncomingEdge<D,N>>());







 (m, new MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>>());





 return set.add(incomingEdge);







 MyConcurrentHashMap<N, Map<D, D>> summariesPerCallSite = summaries.putIfAbsentElseGet(d3, new MyConcurrentHashMap<N, Map<D,D>>());









 Map<D, D> set = summariesPerCallSite.putIfAbsentElseGet(n, new ConcurrentHashMap<D, D>());









 return set.put(d1, d2) == null;









 }





 }







 





 







 /**





 /**



......















src/heros/alias/FlowFunctions.java








View file @ 3b064347








...@@ -7,6 +7,7 @@
...@@ -7,6 +7,7 @@






 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Eric Bodden - initial API and implementation









 *     Johannes Lerch, Johannes Späth - extension for field sensitivity







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















......















src/heros/alias/IncomingEdge.java



0 → 100644







View file @ 3b064347














/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros.alias;



















public class IncomingEdge<D, N> {



















 private D calleeSourceFact;









 private N callSite;









 private D callerSourceFact;









 private D callerCallSiteFact;









 









 public IncomingEdge(D calleeSourceFact, N callSite, D callerSourceFact, D callerCallSiteFact) {









 super();









 this.calleeSourceFact = calleeSourceFact;









 this.callSite = callSite;









 this.callerSourceFact = callerSourceFact;









 this.callerCallSiteFact = callerCallSiteFact;









 }









 









 public D getCalleeSourceFact() {









 return calleeSourceFact;









 }









 









 public D getCallerCallSiteFact() {









 return callerCallSiteFact;









 }









 









 public D getCallerSourceFact() {









 return callerSourceFact;









 }









 









 public N getCallSite() {









 return callSite;









 }



















 @Override









 public int hashCode() {









 final int prime = 31;









 int result = 1;









 result = prime * result + ((callSite == null) ? 0 : callSite.hashCode());









 result = prime * result + ((calleeSourceFact == null) ? 0 : calleeSourceFact.hashCode());









 result = prime * result + ((callerCallSiteFact == null) ? 0 : callerCallSiteFact.hashCode());









 result = prime * result + ((callerSourceFact == null) ? 0 : callerSourceFact.hashCode());









 return result;









 }



















 @Override









 public boolean equals(Object obj) {









 if (this == obj)









 return true;









 if (obj == null)









 return false;









 if (!(obj instanceof IncomingEdge))









 return false;









 IncomingEdge other = (IncomingEdge) obj;









 if (callSite == null) {









 if (other.callSite != null)









 return false;









 } else if (!callSite.equals(other.callSite))









 return false;









 if (calleeSourceFact == null) {









 if (other.calleeSourceFact != null)









 return false;









 } else if (!calleeSourceFact.equals(other.calleeSourceFact))









 return false;









 if (callerCallSiteFact == null) {









 if (other.callerCallSiteFact != null)









 return false;









 } else if (!callerCallSiteFact.equals(other.callerCallSiteFact))









 return false;









 if (callerSourceFact == null) {









 if (other.callerSourceFact != null)









 return false;









 } else if (!callerSourceFact.equals(other.callerSourceFact))









 return false;









 return true;









 }









 









 









}















src/heros/alias/SummaryEdge.java



0 → 100644







View file @ 3b064347














/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros.alias;



















public class SummaryEdge<D, N> {



















 private D sourceFact;









 private N targetStmt;









 private D targetFact;









 









 public SummaryEdge(D sourceFact, N targetStmt, D targetFact) {









 this.sourceFact = sourceFact;









 this.targetStmt = targetStmt;









 this.targetFact = targetFact;









 }



















 @Override









 public int hashCode() {









 final int prime = 31;









 int result = 1;









 result = prime * result + ((sourceFact == null) ? 0 : sourceFact.hashCode());









 result = prime * result + ((targetFact == null) ? 0 : targetFact.hashCode());









 result = prime * result + ((targetStmt == null) ? 0 : targetStmt.hashCode());









 return result;









 }









 









 @Override









 public boolean equals(Object obj) {









 if (this == obj)









 return true;









 if (obj == null)









 return false;









 if (!(obj instanceof SummaryEdge))









 return false;









 SummaryEdge other = (SummaryEdge) obj;









 if (sourceFact == null) {









 if (other.sourceFact != null)









 return false;









 } else if (!sourceFact.equals(other.sourceFact))









 return false;









 if (targetFact == null) {









 if (other.targetFact != null)









 return false;









 } else if (!targetFact.equals(other.targetFact))









 return false;









 if (targetStmt == null) {









 if (other.targetStmt != null)









 return false;









 } else if (!targetStmt.equals(other.targetStmt))









 return false;









 return true;









 }



















 public D getSourceFact() {









 return sourceFact;









 }









 









 public D getTargetFact() {









 return targetFact;









 }









 









 public N getTargetStmt() {









 return targetStmt;









 }









 









}















test/heros/alias/AccessPathUtilTest.java



0 → 100644







View file @ 3b064347














/*******************************************************************************









 * Copyright (c) 2014 Eric Bodden.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Eric Bodden - initial API and implementation









 ******************************************************************************/









package heros.alias;



















import static org.junit.Assert.assertEquals;









import static org.junit.Assert.assertFalse;









import static org.junit.Assert.assertTrue;



















import org.junit.Test;



















public class AccessPathUtilTest {



















 @Test









 public void testBaseValuePrefixOfFieldAccess() {









 assertTrue(AccessPathUtil.isPrefixOf(new Fact("a"), new Fact("a.f")));









 assertFalse(AccessPathUtil.isPrefixOf(new Fact("a.f"), new Fact("a")));









 }









 









 @Test









 public void testBaseValueIdentity() {









 assertTrue(AccessPathUtil.isPrefixOf(new Fact("a"), new Fact("a")));









 }









 









 @Test









 public void testFieldAccessPrefixOfFieldAccess() {









 assertTrue(AccessPathUtil.isPrefixOf(new Fact("a.b"), new Fact("a.b.c")));









 assertFalse(AccessPathUtil.isPrefixOf(new Fact("a.b.c"), new Fact("a.b")));









 }









 









 @Test









 public void testAbstractedSummary() {









 assertEquals(new Fact("z.f"), AccessPathUtil.applyAbstractedSummary(new Fact("a.f"), new SummaryEdge<>(new Fact("a"), null, new Fact("z"))));









 }









 









 @Test









 public void testAbstractedFieldAccessSummary() {









 assertEquals(new Fact("z.b.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.b.c"), new SummaryEdge<>(new Fact("a.b"), null, new Fact("z.b"))));









 }









 









 @Test









 public void testSummaryIntroducesFieldAccess() {









 assertEquals(new Fact("z.b.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.c"), new SummaryEdge<>(new Fact("a"), null, new Fact("z.b"))));









 }









 









 @Test









 public void testSummaryRemovesFieldAccess() {









 assertEquals(new Fact("z.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.b.c"), new SummaryEdge<>(new Fact("a.b"), null, new Fact("z"))));









 }









 









 @Test









 public void testNonAbstractedSummary() {









 assertEquals(new Fact("z"), AccessPathUtil.applyAbstractedSummary(new Fact("a"), new SummaryEdge<>(new Fact("a"), null, new Fact("z"))));









 }









}















test/heros/alias/FieldSensitiveSolverTest.java








View file @ 3b064347








...@@ -53,11 +53,31 @@ public class FieldSensitiveSolverTest {
...@@ -53,11 +53,31 @@ public class FieldSensitiveSolverTest {






 }





 }







 





 







 @Test





 @Test







 public void hold() {





 public void reuseSummaryForBaseValue() {







 helper.method("bar", 





 helper.method("bar", 







 startPoints("a"),





 startPoints("a"),







 normalStmt("a").succ("b", flow("0", "1")),





 normalStmt("a").succ("b", flow("0", "1")),







 writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),





 writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),









 callSite("c").calls("foo", flow("2.field", "3.field")).retSite("retC", flow("2.field", "2.field")));









 









 helper.method("foo",startPoints("d"),









 normalStmt("d").succ("e", flow("3", "4")),









 normalStmt("e").succ("f", flow("4","4")),









 exitStmt("f").returns(over("c"), to("retC"), flow("4.field", "5.field")).returns(over("g"), to("retG"), flow("4.anotherField", "6.anotherField")));



















 helper.method("xyz", 









 startPoints("g"),









 callSite("g").calls("foo", flow("0", "3.anotherField")).retSite("retG", kill("0")));









 









 helper.runSolver(false, "a", "g");









 }









 









 @Test









 public void hold() {









 helper.method("bar", 









 startPoints("a"),









 normalStmt("a").succ("b", flow("0", "1")),









 writeFieldStmt("b", "field").succ("c", flow("1", "2.field")),







 callSite("c").calls("foo", flow("2.field", "3.field")));





 callSite("c").calls("foo", flow("2.field", "3.field")));







 





 







 helper.method("foo",startPoints("d"),





 helper.method("foo",startPoints("d"),



...@@ -71,11 +91,11 @@ public class FieldSensitiveSolverTest {
...@@ -71,11 +91,11 @@ public class FieldSensitiveSolverTest {






 helper.method("bar", 





 helper.method("bar", 







 startPoints("a"),





 startPoints("a"),







 normalStmt("a").succ("b", flow("0", "1")),





 normalStmt("a").succ("b", flow("0", "1")),







 writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),





 writeFieldStmt("b", "field").succ("c", flow("1", "2.field")),







 callSite("c").calls("foo", flow("2.field", "3.field")));





 callSite("c").calls("foo", flow("2.field", "3.field")));







 





 







 helper.method("foo",startPoints("d"),





 helper.method("foo",startPoints("d"),







 readFieldStmt("d", "notfield").succ("e", flow("3", "3"), flow("3.notfield")),





 readFieldStmt("d", "notfield").succ("e", flow("3", "3"), kill("3.notfield")),







 normalStmt("e").succ("f", flow("3","4")));





 normalStmt("e").succ("f", flow("3","4")));







 





 







 helper.method("xyz",





 helper.method("xyz",



......















src/heros/alias/AccessPathUtil.java



0 → 100644







View file @ 3b064347














/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros.alias;



















public class AccessPathUtil {



















 public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {









 if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))









 return false; 









 









 FieldReference[] prefixAccessPath = prefixCandidate.getAccessPath();









 FieldReference[] factAccessPath = fact.getAccessPath();









 if(prefixAccessPath.length > factAccessPath.length)









 return false;









 









 for(int i=0; i<prefixAccessPath.length; i++) {









 if(!prefixAccessPath[i].equals(factAccessPath[i]))









 return false;









 }









 









 return true;









 }









 









 public static <D extends FieldSensitiveFact<?, D>> D applyAbstractedSummary(D sourceFact, SummaryEdge<D, ?> summary) {









 if(!isPrefixOf(summary.getSourceFact(), sourceFact))









 throw new IllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'", summary, sourceFact));









 









 FieldReference[] abstractAccessPath = summary.getSourceFact().getAccessPath();









 FieldReference[] concreteAccessPath = sourceFact.getAccessPath();









 FieldReference[] targetAccessPath = summary.getTargetFact().getAccessPath();









 









 FieldReference[] resultAccessPath = new FieldReference[targetAccessPath.length + concreteAccessPath.length - abstractAccessPath.length];



















 //copy old access path









 System.arraycopy(targetAccessPath, 0, resultAccessPath, 0, targetAccessPath.length);









 









 //copy delta access path that was omitted while creating the abstracted source fact









 System.arraycopy(concreteAccessPath, abstractAccessPath.length, resultAccessPath, targetAccessPath.length, concreteAccessPath.length - abstractAccessPath.length);









 









 return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);









 }









}













src/heros/alias/AccessPathUtil.java



0 → 100644







View file @ 3b064347








src/heros/alias/AccessPathUtil.java



0 → 100644









View file @ 3b064347


3b064347











/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros.alias;



















public class AccessPathUtil {



















 public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {









 if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))









 return false; 









 









 FieldReference[] prefixAccessPath = prefixCandidate.getAccessPath();









 FieldReference[] factAccessPath = fact.getAccessPath();









 if(prefixAccessPath.length > factAccessPath.length)









 return false;









 









 for(int i=0; i<prefixAccessPath.length; i++) {









 if(!prefixAccessPath[i].equals(factAccessPath[i]))









 return false;









 }









 









 return true;









 }









 









 public static <D extends FieldSensitiveFact<?, D>> D applyAbstractedSummary(D sourceFact, SummaryEdge<D, ?> summary) {









 if(!isPrefixOf(summary.getSourceFact(), sourceFact))









 throw new IllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'", summary, sourceFact));









 









 FieldReference[] abstractAccessPath = summary.getSourceFact().getAccessPath();









 FieldReference[] concreteAccessPath = sourceFact.getAccessPath();









 FieldReference[] targetAccessPath = summary.getTargetFact().getAccessPath();









 









 FieldReference[] resultAccessPath = new FieldReference[targetAccessPath.length + concreteAccessPath.length - abstractAccessPath.length];



















 //copy old access path









 System.arraycopy(targetAccessPath, 0, resultAccessPath, 0, targetAccessPath.length);









 









 //copy delta access path that was omitted while creating the abstracted source fact









 System.arraycopy(concreteAccessPath, abstractAccessPath.length, resultAccessPath, targetAccessPath.length, concreteAccessPath.length - abstractAccessPath.length);









 









 return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);









 }









}















/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros.alias;



















public class AccessPathUtil {



















 public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {









 if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))









 return false; 









 









 FieldReference[] prefixAccessPath = prefixCandidate.getAccessPath();









 FieldReference[] factAccessPath = fact.getAccessPath();









 if(prefixAccessPath.length > factAccessPath.length)









 return false;









 









 for(int i=0; i<prefixAccessPath.length; i++) {









 if(!prefixAccessPath[i].equals(factAccessPath[i]))









 return false;









 }









 









 return true;









 }









 









 public static <D extends FieldSensitiveFact<?, D>> D applyAbstractedSummary(D sourceFact, SummaryEdge<D, ?> summary) {









 if(!isPrefixOf(summary.getSourceFact(), sourceFact))









 throw new IllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'", summary, sourceFact));









 









 FieldReference[] abstractAccessPath = summary.getSourceFact().getAccessPath();









 FieldReference[] concreteAccessPath = sourceFact.getAccessPath();









 FieldReference[] targetAccessPath = summary.getTargetFact().getAccessPath();









 









 FieldReference[] resultAccessPath = new FieldReference[targetAccessPath.length + concreteAccessPath.length - abstractAccessPath.length];



















 //copy old access path









 System.arraycopy(targetAccessPath, 0, resultAccessPath, 0, targetAccessPath.length);









 









 //copy delta access path that was omitted while creating the abstracted source fact









 System.arraycopy(concreteAccessPath, abstractAccessPath.length, resultAccessPath, targetAccessPath.length, concreteAccessPath.length - abstractAccessPath.length);









 









 return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);









 }









}












/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros.alias;



















public class AccessPathUtil {



















 public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {









 if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))









 return false; 









 









 FieldReference[] prefixAccessPath = prefixCandidate.getAccessPath();









 FieldReference[] factAccessPath = fact.getAccessPath();









 if(prefixAccessPath.length > factAccessPath.length)









 return false;









 









 for(int i=0; i<prefixAccessPath.length; i++) {









 if(!prefixAccessPath[i].equals(factAccessPath[i]))









 return false;









 }









 









 return true;









 }









 









 public static <D extends FieldSensitiveFact<?, D>> D applyAbstractedSummary(D sourceFact, SummaryEdge<D, ?> summary) {









 if(!isPrefixOf(summary.getSourceFact(), sourceFact))









 throw new IllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'", summary, sourceFact));









 









 FieldReference[] abstractAccessPath = summary.getSourceFact().getAccessPath();









 FieldReference[] concreteAccessPath = sourceFact.getAccessPath();









 FieldReference[] targetAccessPath = summary.getTargetFact().getAccessPath();









 









 FieldReference[] resultAccessPath = new FieldReference[targetAccessPath.length + concreteAccessPath.length - abstractAccessPath.length];



















 //copy old access path









 System.arraycopy(targetAccessPath, 0, resultAccessPath, 0, targetAccessPath.length);









 









 //copy delta access path that was omitted while creating the abstracted source fact









 System.arraycopy(concreteAccessPath, abstractAccessPath.length, resultAccessPath, targetAccessPath.length, concreteAccessPath.length - abstractAccessPath.length);









 









 return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);









 }









}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2014 Johannes Lerch. * Copyright (c) 2014 Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;public class AccessPathUtil {publicclassAccessPathUtil{ public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {publicstatic<DextendsFieldSensitiveFact<?,D>>booleanisPrefixOf(DprefixCandidate,Dfact){ if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue())) return false; returnfalse;  FieldReference[] prefixAccessPath = prefixCandidate.getAccessPath();FieldReference[]prefixAccessPath=prefixCandidate.getAccessPath(); FieldReference[] factAccessPath = fact.getAccessPath();FieldReference[]factAccessPath=fact.getAccessPath(); if(prefixAccessPath.length > factAccessPath.length)if(prefixAccessPath.length>factAccessPath.length) return false;returnfalse;  for(int i=0; i<prefixAccessPath.length; i++) {for(inti=0;i<prefixAccessPath.length;i++){ if(!prefixAccessPath[i].equals(factAccessPath[i]))if(!prefixAccessPath[i].equals(factAccessPath[i])) return false;returnfalse; }}  return true;returntrue; }}  public static <D extends FieldSensitiveFact<?, D>> D applyAbstractedSummary(D sourceFact, SummaryEdge<D, ?> summary) {publicstatic<DextendsFieldSensitiveFact<?,D>>DapplyAbstractedSummary(DsourceFact,SummaryEdge<D,?>summary){ if(!isPrefixOf(summary.getSourceFact(), sourceFact))if(!isPrefixOf(summary.getSourceFact(),sourceFact)) throw new IllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'", summary, sourceFact));thrownewIllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'",summary,sourceFact));  FieldReference[] abstractAccessPath = summary.getSourceFact().getAccessPath();FieldReference[]abstractAccessPath=summary.getSourceFact().getAccessPath(); FieldReference[] concreteAccessPath = sourceFact.getAccessPath();FieldReference[]concreteAccessPath=sourceFact.getAccessPath(); FieldReference[] targetAccessPath = summary.getTargetFact().getAccessPath();FieldReference[]targetAccessPath=summary.getTargetFact().getAccessPath();  FieldReference[] resultAccessPath = new FieldReference[targetAccessPath.length + concreteAccessPath.length - abstractAccessPath.length];FieldReference[]resultAccessPath=newFieldReference[targetAccessPath.length+concreteAccessPath.length-abstractAccessPath.length]; //copy old access path//copy old access path System.arraycopy(targetAccessPath, 0, resultAccessPath, 0, targetAccessPath.length);System.arraycopy(targetAccessPath,0,resultAccessPath,0,targetAccessPath.length);  //copy delta access path that was omitted while creating the abstracted source fact//copy delta access path that was omitted while creating the abstracted source fact System.arraycopy(concreteAccessPath, abstractAccessPath.length, resultAccessPath, targetAccessPath.length, concreteAccessPath.length - abstractAccessPath.length);System.arraycopy(concreteAccessPath,abstractAccessPath.length,resultAccessPath,targetAccessPath.length,concreteAccessPath.length-abstractAccessPath.length);  return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);returnsummary.getTargetFact().cloneWithAccessPath(resultAccessPath); }}}}








src/heros/alias/FieldReference.java








View file @ 3b064347












/*******************************************************************************





/*******************************************************************************







 * Copyright (c) 2014 Eric Bodden.





 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.







 * All rights reserved. This program and the accompanying materials





 * All rights reserved. This program and the accompanying materials







 * are made available under the terms of the GNU Lesser Public License v2.1





 * are made available under the terms of the GNU Lesser Public License v2.1







 * which accompanies this distribution, and is available at





 * which accompanies this distribution, and is available at







 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html





 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html







 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Johannes Lerch, Johannes Späth - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















......













src/heros/alias/FieldReference.java








View file @ 3b064347








src/heros/alias/FieldReference.java










View file @ 3b064347


3b064347









/*******************************************************************************





/*******************************************************************************







 * Copyright (c) 2014 Eric Bodden.





 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.







 * All rights reserved. This program and the accompanying materials





 * All rights reserved. This program and the accompanying materials







 * are made available under the terms of the GNU Lesser Public License v2.1





 * are made available under the terms of the GNU Lesser Public License v2.1







 * which accompanies this distribution, and is available at





 * which accompanies this distribution, and is available at







 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html





 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html







 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Johannes Lerch, Johannes Späth - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















......













/*******************************************************************************





/*******************************************************************************







 * Copyright (c) 2014 Eric Bodden.





 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.







 * All rights reserved. This program and the accompanying materials





 * All rights reserved. This program and the accompanying materials







 * are made available under the terms of the GNU Lesser Public License v2.1





 * are made available under the terms of the GNU Lesser Public License v2.1







 * which accompanies this distribution, and is available at





 * which accompanies this distribution, and is available at







 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html





 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html







 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Johannes Lerch, Johannes Späth - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















......










/*******************************************************************************





/*******************************************************************************







 * Copyright (c) 2014 Eric Bodden.





 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.







 * All rights reserved. This program and the accompanying materials





 * All rights reserved. This program and the accompanying materials







 * are made available under the terms of the GNU Lesser Public License v2.1





 * are made available under the terms of the GNU Lesser Public License v2.1







 * which accompanies this distribution, and is available at





 * which accompanies this distribution, and is available at







 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html





 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html







 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Johannes Lerch, Johannes Späth - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















......


/*******************************************************************************/*******************************************************************************/*******************************************************************************/******************************************************************************* * Copyright (c) 2014 Eric Bodden. * Copyright (c) 2014 Eric Bodden.Eric Bodden * Copyright (c) 2014 Johannes Lerch, Johannes Späth. * Copyright (c) 2014 Johannes Lerch, Johannes Späth.Johannes Lerch, Johannes Späth * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  *  *  * Contributors: * Contributors: * Contributors: * Contributors: *     Eric Bodden - initial API and implementation *     Eric Bodden - initial API and implementationEric Bodden *     Johannes Lerch, Johannes Späth - initial API and implementation *     Johannes Lerch, Johannes Späth - initial API and implementationJohannes Lerch, Johannes Späth ******************************************************************************/ ******************************************************************************/ ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;package heros.alias;packageheros.alias;








src/heros/alias/FieldSensitiveFact.java








View file @ 3b064347












/*******************************************************************************





/*******************************************************************************







 * Copyright (c) 2014 Eric Bodden.





 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.







 * All rights reserved. This program and the accompanying materials





 * All rights reserved. This program and the accompanying materials







 * are made available under the terms of the GNU Lesser Public License v2.1





 * are made available under the terms of the GNU Lesser Public License v2.1







 * which accompanies this distribution, and is available at





 * which accompanies this distribution, and is available at







 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html





 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html







 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Johannes Lerch, Johannes Späth - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















......













src/heros/alias/FieldSensitiveFact.java








View file @ 3b064347








src/heros/alias/FieldSensitiveFact.java










View file @ 3b064347


3b064347









/*******************************************************************************





/*******************************************************************************







 * Copyright (c) 2014 Eric Bodden.





 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.







 * All rights reserved. This program and the accompanying materials





 * All rights reserved. This program and the accompanying materials







 * are made available under the terms of the GNU Lesser Public License v2.1





 * are made available under the terms of the GNU Lesser Public License v2.1







 * which accompanies this distribution, and is available at





 * which accompanies this distribution, and is available at







 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html





 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html







 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Johannes Lerch, Johannes Späth - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















......













/*******************************************************************************





/*******************************************************************************







 * Copyright (c) 2014 Eric Bodden.





 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.







 * All rights reserved. This program and the accompanying materials





 * All rights reserved. This program and the accompanying materials







 * are made available under the terms of the GNU Lesser Public License v2.1





 * are made available under the terms of the GNU Lesser Public License v2.1







 * which accompanies this distribution, and is available at





 * which accompanies this distribution, and is available at







 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html





 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html







 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Johannes Lerch, Johannes Späth - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















......










/*******************************************************************************





/*******************************************************************************







 * Copyright (c) 2014 Eric Bodden.





 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.







 * All rights reserved. This program and the accompanying materials





 * All rights reserved. This program and the accompanying materials







 * are made available under the terms of the GNU Lesser Public License v2.1





 * are made available under the terms of the GNU Lesser Public License v2.1







 * which accompanies this distribution, and is available at





 * which accompanies this distribution, and is available at







 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html





 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html







 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Johannes Lerch, Johannes Späth - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















......


/*******************************************************************************/*******************************************************************************/*******************************************************************************/******************************************************************************* * Copyright (c) 2014 Eric Bodden. * Copyright (c) 2014 Eric Bodden.Eric Bodden * Copyright (c) 2014 Johannes Lerch, Johannes Späth. * Copyright (c) 2014 Johannes Lerch, Johannes Späth.Johannes Lerch, Johannes Späth * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  *  *  * Contributors: * Contributors: * Contributors: * Contributors: *     Eric Bodden - initial API and implementation *     Eric Bodden - initial API and implementationEric Bodden *     Johannes Lerch, Johannes Späth - initial API and implementation *     Johannes Lerch, Johannes Späth - initial API and implementationJohannes Lerch, Johannes Späth ******************************************************************************/ ******************************************************************************/ ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;package heros.alias;packageheros.alias;








src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 3b064347












/*******************************************************************************





/*******************************************************************************







 * Copyright (c) 2014 Eric Bodden.





 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.







 * All rights reserved. This program and the accompanying materials





 * All rights reserved. This program and the accompanying materials







 * are made available under the terms of the GNU Lesser Public License v2.1





 * are made available under the terms of the GNU Lesser Public License v2.1







 * which accompanies this distribution, and is available at





 * which accompanies this distribution, and is available at







 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html





 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html







 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Johannes Lerch, Johannes Späth - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















...@@ -24,7 +24,9 @@ import java.util.concurrent.TimeUnit;
...@@ -24,7 +24,9 @@ import java.util.concurrent.TimeUnit;






import org.slf4j.Logger;





import org.slf4j.Logger;







import org.slf4j.LoggerFactory;





import org.slf4j.LoggerFactory;























import com.google.common.base.Predicate;







import com.google.common.cache.CacheBuilder;





import com.google.common.cache.CacheBuilder;









import com.google.common.collect.Sets;





















import heros.DontSynchronize;





import heros.DontSynchronize;







import heros.FlowFunction;





import heros.FlowFunction;



...@@ -63,14 +65,14 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -63,14 +65,14 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //stores summaries that were queried before they were computed





 //stores summaries that were queried before they were computed







 //see CC 2010 paper by Naeem, Lhotak and Rodriguez





 //see CC 2010 paper by Naeem, Lhotak and Rodriguez







 @SynchronizedBy("consistent lock on 'incoming'")





 @SynchronizedBy("consistent lock on 'incoming'")







 protected final MyConcurrentHashMap<Pair<M,D>,Set<Pair<N,D>>> endSummary =





 protected final MyConcurrentHashMap<M,Set<SummaryEdge<D, N>>> endSummary =







 new MyConcurrentHashMap<Pair<M,D>, Set<Pair<N,D>>>();





 new MyConcurrentHashMap<M, Set<SummaryEdge<D, N>>>();







 





 







 //edges going along calls





 //edges going along calls







 //see CC 2010 paper by Naeem, Lhotak and Rodriguez





 //see CC 2010 paper by Naeem, Lhotak and Rodriguez







 @SynchronizedBy("consistent lock on field")





 @SynchronizedBy("consistent lock on field")







 protected final MyConcurrentHashMap<M, MyConcurrentHashMap<D,MyConcurrentHashMap<N,Map<D, D>>>> incoming =





 protected final MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>> incoming =







 new MyConcurrentHashMap<M, MyConcurrentHashMap<D,MyConcurrentHashMap<N,Map<D, D>>>>();





 new MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>>();







 





 







 @DontSynchronize("stateless")





 @DontSynchronize("stateless")







 protected final FlowFunctions<N, D, M> flowFunctions;





 protected final FlowFunctions<N, D, M> flowFunctions;



...@@ -229,36 +231,34 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -229,36 +231,34 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //for each callee's start point(s)





 //for each callee's start point(s)







 for(N sP: startPointsOf) {





 for(N sP: startPointsOf) {







 //create initial self-loop





 //create initial self-loop







 D abstractStartPointFact = d3.cloneWithAccessPath(new FieldReference.Any());





 D abstractStartPointFact = d3.cloneWithAccessPath();







 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15





 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15







 }





 }







 





 







 //register the fact that <sp,d3> has an incoming edge from <n,d2>





 //register the fact that <sp,d3> has an incoming edge from <n,d2>







 //line 15.1 of Naeem/Lhotak/Rodriguez





 //line 15.1 of Naeem/Lhotak/Rodriguez







 if (!addIncoming(sCalledProcN,d3,n,d1,d2))





 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3,n,d1,d2)))







 continue;





 continue;







 





 







 //TODO: Resume edges that are on hold and match this d3





 //TODO: Resume edges that are on hold and match this d3







 





 







 //line 15.2





 //line 15.2







 //TODO: include more abstract d3 summaries as well





 Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3);







 Set<Pair<N, D>> endSumm = endSummary(sCalledProcN, d3);









 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez







 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,





 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,







 //create new caller-side jump functions to the return sites





 //create new caller-side jump functions to the return sites







 //because we have observed a potentially new incoming edge into <sP,d3>





 //because we have observed a potentially new incoming edge into <sP,d3>







 if (endSumm != null)





 if (endSumm != null)







 for(Pair<N, D> entry: endSumm) {





 for(SummaryEdge<D, N> summary: endSumm) {







 N eP = entry.getO1();





 D d4 = AccessPathUtil.applyAbstractedSummary(d3, summary);







 D d4 = entry.getO2();





 







 //for each return site





 //for each return site







 for(N retSiteN: returnSiteNs) {





 for(N retSiteN: returnSiteNs) {







 //compute return-flow function





 //compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);







 //for each target value of the function





 //for each target value of the function







 //TODO: Map abstracted d4 back (using the summary)





 for(D d5: computeReturnFlowFunction(retFunction, d4, n)) {







 for(D d5: computeReturnFlowFunction(retFunction, d4, n, Collections.singleton(d2))) {









 // If we have not changed anything in the callee, we do not need the facts





 // If we have not changed anything in the callee, we do not need the facts







 // from there. Even if we change something: If we don't need the concrete





 // from there. Even if we change something: If we don't need the concrete







 // path, we can skip the callee in the predecessor chain





 // path, we can skip the callee in the predecessor chain



...@@ -332,42 +332,30 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -332,42 +332,30 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 





 







 //line 21.1 of Naeem/Lhotak/Rodriguez





 //line 21.1 of Naeem/Lhotak/Rodriguez







 //register end-summary





 //register end-summary







 if (!addEndSummary(methodThatNeedsSummary, d1, n, d2))





 SummaryEdge<D, N> summaryEdge = new SummaryEdge<D, N>(d1, n, d2);









 if (!addEndSummary(methodThatNeedsSummary, summaryEdge))







 return;





 return;







 





 







 //TODO: include more abstract d1 values in incoming set





 Set<IncomingEdge<D, N>> inc = incoming(methodThatNeedsSummary, d1);







 Map<N,Map<D, D>> inc = incoming(d1, methodThatNeedsSummary);









 





 







 //for each incoming call edge already processed





 //for each incoming call edge already processed







 //(see processCall(..))





 //(see processCall(..))







 if (inc != null)





 if (inc != null)







 for (Entry<N,Map<D, D>> entry: inc.entrySet()) {





 for (IncomingEdge<D, N> incomingEdge : inc) {







 //line 22





 // line 22







 N c = entry.getKey();





 N callSite = incomingEdge.getCallSite();







 //for each return site





 // for each return site







 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {





 for (N retSiteC : icfg.getReturnSitesOfCallAt(callSite)) {







 //compute return-flow function





 // compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);







 //TODO: create concrete d2, this d2 is currently an abstracted version





 D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);







 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, entry.getValue().keySet());





 Set<D> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);







 //for each incoming-call value













 for(D d4: entry.getValue().keySet())





 // for each incoming-call value







 for(D d5: targets) {





 for (D callerTargetFact : callerTargetFacts) {







 // If we have not changed anything in the callee, we do not need the facts





 callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetFact);







 // from there. Even if we change something: If we don't need the concrete





 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);







 // path, we can skip the callee in the predecessor chain





 }







 D d5p = d5;









 /*	D predVal = entry.getValue().get(d4);









							if (d5.equals(predVal))









								d5p = predVal;









							else if (setJumpPredecessors)









								d5.setPredecessor(predVal);*/









 









 // Set the calling context









 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5p);









 









 propagate(d4, retSiteC, d5p_restoredCtx, c, false);









 }









 }





 }







 }





 }







 





 



...@@ -379,7 +367,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -379,7 +367,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 for(N c: callers) {





 for(N c: callers) {







 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {





 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);







 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, Collections.singleton(zeroValue));





 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c);







 for(D d5: targets)





 for(D d5: targets)







 propagate(zeroValue, retSiteC, d5, c, true);





 propagate(zeroValue, retSiteC, d5, c, true);







 }





 }



...@@ -400,11 +388,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -400,11 +388,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param retFunction The return flow function to compute





	 * @param retFunction The return flow function to compute







	 * @param d2 The abstraction at the exit node in the callee





	 * @param d2 The abstraction at the exit node in the callee







	 * @param callSite The call site





	 * @param callSite The call site







	 * @param callerSideDs The abstractions at the call site









	 * @return The set of caller-side abstractions at the return site





	 * @return The set of caller-side abstractions at the return site







	 */





	 */







 protected Set<D> computeReturnFlowFunction





 protected Set<D> computeReturnFlowFunction







 (FlowFunction<D> retFunction, D d2, N callSite, Collection<D> callerSideDs) {





 (FlowFunction<D> retFunction, D d2, N callSite) {







 return retFunction.computeTargets(d2);





 return retFunction.computeTargets(d2);







 }





 }

















...@@ -501,40 +488,47 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -501,40 +488,47 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);





 logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);







 }





 }







 }





 }







 









 























 private Set<Pair<N, D>> endSummary(M m, D d3) {





 private Set<SummaryEdge<D, N>> endSummary(M m, final D d3) {







 Set<Pair<N, D>> map = endSummary.get(new Pair<M, D>(m, d3));





 Set<SummaryEdge<D, N>> map = endSummary.get(m);







 return map;





 if(map == null)









 return null;









 









 return Sets.filter(map, new Predicate<SummaryEdge<D,N>>() {









 @Override









 public boolean apply(SummaryEdge<D, N> edge) {









 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3);









 }









 });







 }





 }





















 private boolean addEndSummary(M m, D d1, N eP, D d2) {





 private boolean addEndSummary(M m, SummaryEdge<D,N> summaryEdge) {







 Set<Pair<N, D>> summaries = endSummary.putIfAbsentElseGet





 Set<SummaryEdge<D, N>> summaries = endSummary.putIfAbsentElseGet







 (new Pair<M, D>(m, d1), new ConcurrentHashSet<Pair<N, D>>());





 (m, new ConcurrentHashSet<SummaryEdge<D, N>>());







 return summaries.add(new Pair<N, D>(eP, d2));





 return summaries.add(summaryEdge);







 } 





 } 





















 protected Map<D, MyConcurrentHashMap<N, Map<D, D>>> incoming(M m) {





 protected Set<IncomingEdge<D, N>> incoming(M m) {







 MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>> result = incoming.get(m);





 Set<IncomingEdge<D, N>> result = incoming.get(m);







 if(result == null)





 if(result == null)







 return new HashMap<>();





 return Collections.emptySet();







 else





 else







 return result;





 return result;







 }





 }







 





 







 protected Map<N, Map<D, D>> incoming(D d1, M m) {





 protected Set<IncomingEdge<D, N>> incoming(M m, final D abstractCalleeSourceFact) {







 Map<D, MyConcurrentHashMap<N, Map<D, D>>> summariesPerMethod = incoming(m);





 Set<IncomingEdge<D, N>> result = incoming(m);







 Map<N, Map<D, D>> map = summariesPerMethod.get(d1);





 return Sets.filter(result, new Predicate<IncomingEdge<D,N>>() {







 return map;





 @Override









 public boolean apply(IncomingEdge<D, N> edge) {









 return AccessPathUtil.isPrefixOf(abstractCalleeSourceFact, edge.getCalleeSourceFact());









 }









 });







 }





 }







 





 







 protected boolean addIncoming(M m, D d3, N n, D d1, D d2) {





 protected boolean addIncoming(M m, IncomingEdge<D, N> incomingEdge) {







 MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>> summaries = incoming.putIfAbsentElseGet





 Set<IncomingEdge<D,N>> set = incoming.putIfAbsentElseGet(m, new ConcurrentHashSet<IncomingEdge<D,N>>());







 (m, new MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>>());





 return set.add(incomingEdge);







 MyConcurrentHashMap<N, Map<D, D>> summariesPerCallSite = summaries.putIfAbsentElseGet(d3, new MyConcurrentHashMap<N, Map<D,D>>());









 Map<D, D> set = summariesPerCallSite.putIfAbsentElseGet(n, new ConcurrentHashMap<D, D>());









 return set.put(d1, d2) == null;









 }





 }







 





 







 /**





 /**



......













src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 3b064347








src/heros/alias/FieldSensitiveIFDSSolver.java










View file @ 3b064347


3b064347









/*******************************************************************************





/*******************************************************************************







 * Copyright (c) 2014 Eric Bodden.





 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.







 * All rights reserved. This program and the accompanying materials





 * All rights reserved. This program and the accompanying materials







 * are made available under the terms of the GNU Lesser Public License v2.1





 * are made available under the terms of the GNU Lesser Public License v2.1







 * which accompanies this distribution, and is available at





 * which accompanies this distribution, and is available at







 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html





 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html







 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Johannes Lerch, Johannes Späth - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















...@@ -24,7 +24,9 @@ import java.util.concurrent.TimeUnit;
...@@ -24,7 +24,9 @@ import java.util.concurrent.TimeUnit;






import org.slf4j.Logger;





import org.slf4j.Logger;







import org.slf4j.LoggerFactory;





import org.slf4j.LoggerFactory;























import com.google.common.base.Predicate;







import com.google.common.cache.CacheBuilder;





import com.google.common.cache.CacheBuilder;









import com.google.common.collect.Sets;





















import heros.DontSynchronize;





import heros.DontSynchronize;







import heros.FlowFunction;





import heros.FlowFunction;



...@@ -63,14 +65,14 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -63,14 +65,14 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //stores summaries that were queried before they were computed





 //stores summaries that were queried before they were computed







 //see CC 2010 paper by Naeem, Lhotak and Rodriguez





 //see CC 2010 paper by Naeem, Lhotak and Rodriguez







 @SynchronizedBy("consistent lock on 'incoming'")





 @SynchronizedBy("consistent lock on 'incoming'")







 protected final MyConcurrentHashMap<Pair<M,D>,Set<Pair<N,D>>> endSummary =





 protected final MyConcurrentHashMap<M,Set<SummaryEdge<D, N>>> endSummary =







 new MyConcurrentHashMap<Pair<M,D>, Set<Pair<N,D>>>();





 new MyConcurrentHashMap<M, Set<SummaryEdge<D, N>>>();







 





 







 //edges going along calls





 //edges going along calls







 //see CC 2010 paper by Naeem, Lhotak and Rodriguez





 //see CC 2010 paper by Naeem, Lhotak and Rodriguez







 @SynchronizedBy("consistent lock on field")





 @SynchronizedBy("consistent lock on field")







 protected final MyConcurrentHashMap<M, MyConcurrentHashMap<D,MyConcurrentHashMap<N,Map<D, D>>>> incoming =





 protected final MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>> incoming =







 new MyConcurrentHashMap<M, MyConcurrentHashMap<D,MyConcurrentHashMap<N,Map<D, D>>>>();





 new MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>>();







 





 







 @DontSynchronize("stateless")





 @DontSynchronize("stateless")







 protected final FlowFunctions<N, D, M> flowFunctions;





 protected final FlowFunctions<N, D, M> flowFunctions;



...@@ -229,36 +231,34 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -229,36 +231,34 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //for each callee's start point(s)





 //for each callee's start point(s)







 for(N sP: startPointsOf) {





 for(N sP: startPointsOf) {







 //create initial self-loop





 //create initial self-loop







 D abstractStartPointFact = d3.cloneWithAccessPath(new FieldReference.Any());





 D abstractStartPointFact = d3.cloneWithAccessPath();







 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15





 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15







 }





 }







 





 







 //register the fact that <sp,d3> has an incoming edge from <n,d2>





 //register the fact that <sp,d3> has an incoming edge from <n,d2>







 //line 15.1 of Naeem/Lhotak/Rodriguez





 //line 15.1 of Naeem/Lhotak/Rodriguez







 if (!addIncoming(sCalledProcN,d3,n,d1,d2))





 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3,n,d1,d2)))







 continue;





 continue;







 





 







 //TODO: Resume edges that are on hold and match this d3





 //TODO: Resume edges that are on hold and match this d3







 





 







 //line 15.2





 //line 15.2







 //TODO: include more abstract d3 summaries as well





 Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3);







 Set<Pair<N, D>> endSumm = endSummary(sCalledProcN, d3);









 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez







 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,





 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,







 //create new caller-side jump functions to the return sites





 //create new caller-side jump functions to the return sites







 //because we have observed a potentially new incoming edge into <sP,d3>





 //because we have observed a potentially new incoming edge into <sP,d3>







 if (endSumm != null)





 if (endSumm != null)







 for(Pair<N, D> entry: endSumm) {





 for(SummaryEdge<D, N> summary: endSumm) {







 N eP = entry.getO1();





 D d4 = AccessPathUtil.applyAbstractedSummary(d3, summary);







 D d4 = entry.getO2();





 







 //for each return site





 //for each return site







 for(N retSiteN: returnSiteNs) {





 for(N retSiteN: returnSiteNs) {







 //compute return-flow function





 //compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);







 //for each target value of the function





 //for each target value of the function







 //TODO: Map abstracted d4 back (using the summary)





 for(D d5: computeReturnFlowFunction(retFunction, d4, n)) {







 for(D d5: computeReturnFlowFunction(retFunction, d4, n, Collections.singleton(d2))) {









 // If we have not changed anything in the callee, we do not need the facts





 // If we have not changed anything in the callee, we do not need the facts







 // from there. Even if we change something: If we don't need the concrete





 // from there. Even if we change something: If we don't need the concrete







 // path, we can skip the callee in the predecessor chain





 // path, we can skip the callee in the predecessor chain



...@@ -332,42 +332,30 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -332,42 +332,30 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 





 







 //line 21.1 of Naeem/Lhotak/Rodriguez





 //line 21.1 of Naeem/Lhotak/Rodriguez







 //register end-summary





 //register end-summary







 if (!addEndSummary(methodThatNeedsSummary, d1, n, d2))





 SummaryEdge<D, N> summaryEdge = new SummaryEdge<D, N>(d1, n, d2);









 if (!addEndSummary(methodThatNeedsSummary, summaryEdge))







 return;





 return;







 





 







 //TODO: include more abstract d1 values in incoming set





 Set<IncomingEdge<D, N>> inc = incoming(methodThatNeedsSummary, d1);







 Map<N,Map<D, D>> inc = incoming(d1, methodThatNeedsSummary);









 





 







 //for each incoming call edge already processed





 //for each incoming call edge already processed







 //(see processCall(..))





 //(see processCall(..))







 if (inc != null)





 if (inc != null)







 for (Entry<N,Map<D, D>> entry: inc.entrySet()) {





 for (IncomingEdge<D, N> incomingEdge : inc) {







 //line 22





 // line 22







 N c = entry.getKey();





 N callSite = incomingEdge.getCallSite();







 //for each return site





 // for each return site







 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {





 for (N retSiteC : icfg.getReturnSitesOfCallAt(callSite)) {







 //compute return-flow function





 // compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);







 //TODO: create concrete d2, this d2 is currently an abstracted version





 D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);







 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, entry.getValue().keySet());





 Set<D> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);







 //for each incoming-call value













 for(D d4: entry.getValue().keySet())





 // for each incoming-call value







 for(D d5: targets) {





 for (D callerTargetFact : callerTargetFacts) {







 // If we have not changed anything in the callee, we do not need the facts





 callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetFact);







 // from there. Even if we change something: If we don't need the concrete





 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);







 // path, we can skip the callee in the predecessor chain





 }







 D d5p = d5;









 /*	D predVal = entry.getValue().get(d4);









							if (d5.equals(predVal))









								d5p = predVal;









							else if (setJumpPredecessors)









								d5.setPredecessor(predVal);*/









 









 // Set the calling context









 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5p);









 









 propagate(d4, retSiteC, d5p_restoredCtx, c, false);









 }









 }





 }







 }





 }







 





 



...@@ -379,7 +367,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -379,7 +367,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 for(N c: callers) {





 for(N c: callers) {







 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {





 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);







 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, Collections.singleton(zeroValue));





 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c);







 for(D d5: targets)





 for(D d5: targets)







 propagate(zeroValue, retSiteC, d5, c, true);





 propagate(zeroValue, retSiteC, d5, c, true);







 }





 }



...@@ -400,11 +388,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -400,11 +388,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param retFunction The return flow function to compute





	 * @param retFunction The return flow function to compute







	 * @param d2 The abstraction at the exit node in the callee





	 * @param d2 The abstraction at the exit node in the callee







	 * @param callSite The call site





	 * @param callSite The call site







	 * @param callerSideDs The abstractions at the call site









	 * @return The set of caller-side abstractions at the return site





	 * @return The set of caller-side abstractions at the return site







	 */





	 */







 protected Set<D> computeReturnFlowFunction





 protected Set<D> computeReturnFlowFunction







 (FlowFunction<D> retFunction, D d2, N callSite, Collection<D> callerSideDs) {





 (FlowFunction<D> retFunction, D d2, N callSite) {







 return retFunction.computeTargets(d2);





 return retFunction.computeTargets(d2);







 }





 }

















...@@ -501,40 +488,47 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -501,40 +488,47 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);





 logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);







 }





 }







 }





 }







 









 























 private Set<Pair<N, D>> endSummary(M m, D d3) {





 private Set<SummaryEdge<D, N>> endSummary(M m, final D d3) {







 Set<Pair<N, D>> map = endSummary.get(new Pair<M, D>(m, d3));





 Set<SummaryEdge<D, N>> map = endSummary.get(m);







 return map;





 if(map == null)









 return null;









 









 return Sets.filter(map, new Predicate<SummaryEdge<D,N>>() {









 @Override









 public boolean apply(SummaryEdge<D, N> edge) {









 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3);









 }









 });







 }





 }





















 private boolean addEndSummary(M m, D d1, N eP, D d2) {





 private boolean addEndSummary(M m, SummaryEdge<D,N> summaryEdge) {







 Set<Pair<N, D>> summaries = endSummary.putIfAbsentElseGet





 Set<SummaryEdge<D, N>> summaries = endSummary.putIfAbsentElseGet







 (new Pair<M, D>(m, d1), new ConcurrentHashSet<Pair<N, D>>());





 (m, new ConcurrentHashSet<SummaryEdge<D, N>>());







 return summaries.add(new Pair<N, D>(eP, d2));





 return summaries.add(summaryEdge);







 } 





 } 





















 protected Map<D, MyConcurrentHashMap<N, Map<D, D>>> incoming(M m) {





 protected Set<IncomingEdge<D, N>> incoming(M m) {







 MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>> result = incoming.get(m);





 Set<IncomingEdge<D, N>> result = incoming.get(m);







 if(result == null)





 if(result == null)







 return new HashMap<>();





 return Collections.emptySet();







 else





 else







 return result;





 return result;







 }





 }







 





 







 protected Map<N, Map<D, D>> incoming(D d1, M m) {





 protected Set<IncomingEdge<D, N>> incoming(M m, final D abstractCalleeSourceFact) {







 Map<D, MyConcurrentHashMap<N, Map<D, D>>> summariesPerMethod = incoming(m);





 Set<IncomingEdge<D, N>> result = incoming(m);







 Map<N, Map<D, D>> map = summariesPerMethod.get(d1);





 return Sets.filter(result, new Predicate<IncomingEdge<D,N>>() {







 return map;





 @Override









 public boolean apply(IncomingEdge<D, N> edge) {









 return AccessPathUtil.isPrefixOf(abstractCalleeSourceFact, edge.getCalleeSourceFact());









 }









 });







 }





 }







 





 







 protected boolean addIncoming(M m, D d3, N n, D d1, D d2) {





 protected boolean addIncoming(M m, IncomingEdge<D, N> incomingEdge) {







 MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>> summaries = incoming.putIfAbsentElseGet





 Set<IncomingEdge<D,N>> set = incoming.putIfAbsentElseGet(m, new ConcurrentHashSet<IncomingEdge<D,N>>());







 (m, new MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>>());





 return set.add(incomingEdge);







 MyConcurrentHashMap<N, Map<D, D>> summariesPerCallSite = summaries.putIfAbsentElseGet(d3, new MyConcurrentHashMap<N, Map<D,D>>());









 Map<D, D> set = summariesPerCallSite.putIfAbsentElseGet(n, new ConcurrentHashMap<D, D>());









 return set.put(d1, d2) == null;









 }





 }







 





 







 /**





 /**



......













/*******************************************************************************





/*******************************************************************************







 * Copyright (c) 2014 Eric Bodden.





 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.







 * All rights reserved. This program and the accompanying materials





 * All rights reserved. This program and the accompanying materials







 * are made available under the terms of the GNU Lesser Public License v2.1





 * are made available under the terms of the GNU Lesser Public License v2.1







 * which accompanies this distribution, and is available at





 * which accompanies this distribution, and is available at







 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html





 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html







 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Johannes Lerch, Johannes Späth - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















...@@ -24,7 +24,9 @@ import java.util.concurrent.TimeUnit;
...@@ -24,7 +24,9 @@ import java.util.concurrent.TimeUnit;






import org.slf4j.Logger;





import org.slf4j.Logger;







import org.slf4j.LoggerFactory;





import org.slf4j.LoggerFactory;























import com.google.common.base.Predicate;







import com.google.common.cache.CacheBuilder;





import com.google.common.cache.CacheBuilder;









import com.google.common.collect.Sets;





















import heros.DontSynchronize;





import heros.DontSynchronize;







import heros.FlowFunction;





import heros.FlowFunction;



...@@ -63,14 +65,14 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -63,14 +65,14 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //stores summaries that were queried before they were computed





 //stores summaries that were queried before they were computed







 //see CC 2010 paper by Naeem, Lhotak and Rodriguez





 //see CC 2010 paper by Naeem, Lhotak and Rodriguez







 @SynchronizedBy("consistent lock on 'incoming'")





 @SynchronizedBy("consistent lock on 'incoming'")







 protected final MyConcurrentHashMap<Pair<M,D>,Set<Pair<N,D>>> endSummary =





 protected final MyConcurrentHashMap<M,Set<SummaryEdge<D, N>>> endSummary =







 new MyConcurrentHashMap<Pair<M,D>, Set<Pair<N,D>>>();





 new MyConcurrentHashMap<M, Set<SummaryEdge<D, N>>>();







 





 







 //edges going along calls





 //edges going along calls







 //see CC 2010 paper by Naeem, Lhotak and Rodriguez





 //see CC 2010 paper by Naeem, Lhotak and Rodriguez







 @SynchronizedBy("consistent lock on field")





 @SynchronizedBy("consistent lock on field")







 protected final MyConcurrentHashMap<M, MyConcurrentHashMap<D,MyConcurrentHashMap<N,Map<D, D>>>> incoming =





 protected final MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>> incoming =







 new MyConcurrentHashMap<M, MyConcurrentHashMap<D,MyConcurrentHashMap<N,Map<D, D>>>>();





 new MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>>();







 





 







 @DontSynchronize("stateless")





 @DontSynchronize("stateless")







 protected final FlowFunctions<N, D, M> flowFunctions;





 protected final FlowFunctions<N, D, M> flowFunctions;



...@@ -229,36 +231,34 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -229,36 +231,34 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //for each callee's start point(s)





 //for each callee's start point(s)







 for(N sP: startPointsOf) {





 for(N sP: startPointsOf) {







 //create initial self-loop





 //create initial self-loop







 D abstractStartPointFact = d3.cloneWithAccessPath(new FieldReference.Any());





 D abstractStartPointFact = d3.cloneWithAccessPath();







 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15





 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15







 }





 }







 





 







 //register the fact that <sp,d3> has an incoming edge from <n,d2>





 //register the fact that <sp,d3> has an incoming edge from <n,d2>







 //line 15.1 of Naeem/Lhotak/Rodriguez





 //line 15.1 of Naeem/Lhotak/Rodriguez







 if (!addIncoming(sCalledProcN,d3,n,d1,d2))





 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3,n,d1,d2)))







 continue;





 continue;







 





 







 //TODO: Resume edges that are on hold and match this d3





 //TODO: Resume edges that are on hold and match this d3







 





 







 //line 15.2





 //line 15.2







 //TODO: include more abstract d3 summaries as well





 Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3);







 Set<Pair<N, D>> endSumm = endSummary(sCalledProcN, d3);









 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez







 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,





 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,







 //create new caller-side jump functions to the return sites





 //create new caller-side jump functions to the return sites







 //because we have observed a potentially new incoming edge into <sP,d3>





 //because we have observed a potentially new incoming edge into <sP,d3>







 if (endSumm != null)





 if (endSumm != null)







 for(Pair<N, D> entry: endSumm) {





 for(SummaryEdge<D, N> summary: endSumm) {







 N eP = entry.getO1();





 D d4 = AccessPathUtil.applyAbstractedSummary(d3, summary);







 D d4 = entry.getO2();





 







 //for each return site





 //for each return site







 for(N retSiteN: returnSiteNs) {





 for(N retSiteN: returnSiteNs) {







 //compute return-flow function





 //compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);







 //for each target value of the function





 //for each target value of the function







 //TODO: Map abstracted d4 back (using the summary)





 for(D d5: computeReturnFlowFunction(retFunction, d4, n)) {







 for(D d5: computeReturnFlowFunction(retFunction, d4, n, Collections.singleton(d2))) {









 // If we have not changed anything in the callee, we do not need the facts





 // If we have not changed anything in the callee, we do not need the facts







 // from there. Even if we change something: If we don't need the concrete





 // from there. Even if we change something: If we don't need the concrete







 // path, we can skip the callee in the predecessor chain





 // path, we can skip the callee in the predecessor chain



...@@ -332,42 +332,30 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -332,42 +332,30 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 





 







 //line 21.1 of Naeem/Lhotak/Rodriguez





 //line 21.1 of Naeem/Lhotak/Rodriguez







 //register end-summary





 //register end-summary







 if (!addEndSummary(methodThatNeedsSummary, d1, n, d2))





 SummaryEdge<D, N> summaryEdge = new SummaryEdge<D, N>(d1, n, d2);









 if (!addEndSummary(methodThatNeedsSummary, summaryEdge))







 return;





 return;







 





 







 //TODO: include more abstract d1 values in incoming set





 Set<IncomingEdge<D, N>> inc = incoming(methodThatNeedsSummary, d1);







 Map<N,Map<D, D>> inc = incoming(d1, methodThatNeedsSummary);









 





 







 //for each incoming call edge already processed





 //for each incoming call edge already processed







 //(see processCall(..))





 //(see processCall(..))







 if (inc != null)





 if (inc != null)







 for (Entry<N,Map<D, D>> entry: inc.entrySet()) {





 for (IncomingEdge<D, N> incomingEdge : inc) {







 //line 22





 // line 22







 N c = entry.getKey();





 N callSite = incomingEdge.getCallSite();







 //for each return site





 // for each return site







 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {





 for (N retSiteC : icfg.getReturnSitesOfCallAt(callSite)) {







 //compute return-flow function





 // compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);







 //TODO: create concrete d2, this d2 is currently an abstracted version





 D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);







 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, entry.getValue().keySet());





 Set<D> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);







 //for each incoming-call value













 for(D d4: entry.getValue().keySet())





 // for each incoming-call value







 for(D d5: targets) {





 for (D callerTargetFact : callerTargetFacts) {







 // If we have not changed anything in the callee, we do not need the facts





 callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetFact);







 // from there. Even if we change something: If we don't need the concrete





 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);







 // path, we can skip the callee in the predecessor chain





 }







 D d5p = d5;









 /*	D predVal = entry.getValue().get(d4);









							if (d5.equals(predVal))









								d5p = predVal;









							else if (setJumpPredecessors)









								d5.setPredecessor(predVal);*/









 









 // Set the calling context









 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5p);









 









 propagate(d4, retSiteC, d5p_restoredCtx, c, false);









 }









 }





 }







 }





 }







 





 



...@@ -379,7 +367,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -379,7 +367,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 for(N c: callers) {





 for(N c: callers) {







 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {





 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);







 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, Collections.singleton(zeroValue));





 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c);







 for(D d5: targets)





 for(D d5: targets)







 propagate(zeroValue, retSiteC, d5, c, true);





 propagate(zeroValue, retSiteC, d5, c, true);







 }





 }



...@@ -400,11 +388,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -400,11 +388,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param retFunction The return flow function to compute





	 * @param retFunction The return flow function to compute







	 * @param d2 The abstraction at the exit node in the callee





	 * @param d2 The abstraction at the exit node in the callee







	 * @param callSite The call site





	 * @param callSite The call site







	 * @param callerSideDs The abstractions at the call site









	 * @return The set of caller-side abstractions at the return site





	 * @return The set of caller-side abstractions at the return site







	 */





	 */







 protected Set<D> computeReturnFlowFunction





 protected Set<D> computeReturnFlowFunction







 (FlowFunction<D> retFunction, D d2, N callSite, Collection<D> callerSideDs) {





 (FlowFunction<D> retFunction, D d2, N callSite) {







 return retFunction.computeTargets(d2);





 return retFunction.computeTargets(d2);







 }





 }

















...@@ -501,40 +488,47 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -501,40 +488,47 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);





 logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);







 }





 }







 }





 }







 









 























 private Set<Pair<N, D>> endSummary(M m, D d3) {





 private Set<SummaryEdge<D, N>> endSummary(M m, final D d3) {







 Set<Pair<N, D>> map = endSummary.get(new Pair<M, D>(m, d3));





 Set<SummaryEdge<D, N>> map = endSummary.get(m);







 return map;





 if(map == null)









 return null;









 









 return Sets.filter(map, new Predicate<SummaryEdge<D,N>>() {









 @Override









 public boolean apply(SummaryEdge<D, N> edge) {









 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3);









 }









 });







 }





 }





















 private boolean addEndSummary(M m, D d1, N eP, D d2) {





 private boolean addEndSummary(M m, SummaryEdge<D,N> summaryEdge) {







 Set<Pair<N, D>> summaries = endSummary.putIfAbsentElseGet





 Set<SummaryEdge<D, N>> summaries = endSummary.putIfAbsentElseGet







 (new Pair<M, D>(m, d1), new ConcurrentHashSet<Pair<N, D>>());





 (m, new ConcurrentHashSet<SummaryEdge<D, N>>());







 return summaries.add(new Pair<N, D>(eP, d2));





 return summaries.add(summaryEdge);







 } 





 } 





















 protected Map<D, MyConcurrentHashMap<N, Map<D, D>>> incoming(M m) {





 protected Set<IncomingEdge<D, N>> incoming(M m) {







 MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>> result = incoming.get(m);





 Set<IncomingEdge<D, N>> result = incoming.get(m);







 if(result == null)





 if(result == null)







 return new HashMap<>();





 return Collections.emptySet();







 else





 else







 return result;





 return result;







 }





 }







 





 







 protected Map<N, Map<D, D>> incoming(D d1, M m) {





 protected Set<IncomingEdge<D, N>> incoming(M m, final D abstractCalleeSourceFact) {







 Map<D, MyConcurrentHashMap<N, Map<D, D>>> summariesPerMethod = incoming(m);





 Set<IncomingEdge<D, N>> result = incoming(m);







 Map<N, Map<D, D>> map = summariesPerMethod.get(d1);





 return Sets.filter(result, new Predicate<IncomingEdge<D,N>>() {







 return map;





 @Override









 public boolean apply(IncomingEdge<D, N> edge) {









 return AccessPathUtil.isPrefixOf(abstractCalleeSourceFact, edge.getCalleeSourceFact());









 }









 });







 }





 }







 





 







 protected boolean addIncoming(M m, D d3, N n, D d1, D d2) {





 protected boolean addIncoming(M m, IncomingEdge<D, N> incomingEdge) {







 MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>> summaries = incoming.putIfAbsentElseGet





 Set<IncomingEdge<D,N>> set = incoming.putIfAbsentElseGet(m, new ConcurrentHashSet<IncomingEdge<D,N>>());







 (m, new MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>>());





 return set.add(incomingEdge);







 MyConcurrentHashMap<N, Map<D, D>> summariesPerCallSite = summaries.putIfAbsentElseGet(d3, new MyConcurrentHashMap<N, Map<D,D>>());









 Map<D, D> set = summariesPerCallSite.putIfAbsentElseGet(n, new ConcurrentHashMap<D, D>());









 return set.put(d1, d2) == null;









 }





 }







 





 







 /**





 /**



......










/*******************************************************************************





/*******************************************************************************







 * Copyright (c) 2014 Eric Bodden.





 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.







 * All rights reserved. This program and the accompanying materials





 * All rights reserved. This program and the accompanying materials







 * are made available under the terms of the GNU Lesser Public License v2.1





 * are made available under the terms of the GNU Lesser Public License v2.1







 * which accompanies this distribution, and is available at





 * which accompanies this distribution, and is available at







 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html





 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html







 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Johannes Lerch, Johannes Späth - initial API and implementation







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















...@@ -24,7 +24,9 @@ import java.util.concurrent.TimeUnit;
...@@ -24,7 +24,9 @@ import java.util.concurrent.TimeUnit;






import org.slf4j.Logger;





import org.slf4j.Logger;







import org.slf4j.LoggerFactory;





import org.slf4j.LoggerFactory;























import com.google.common.base.Predicate;







import com.google.common.cache.CacheBuilder;





import com.google.common.cache.CacheBuilder;









import com.google.common.collect.Sets;





















import heros.DontSynchronize;





import heros.DontSynchronize;







import heros.FlowFunction;





import heros.FlowFunction;



...@@ -63,14 +65,14 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -63,14 +65,14 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //stores summaries that were queried before they were computed





 //stores summaries that were queried before they were computed







 //see CC 2010 paper by Naeem, Lhotak and Rodriguez





 //see CC 2010 paper by Naeem, Lhotak and Rodriguez







 @SynchronizedBy("consistent lock on 'incoming'")





 @SynchronizedBy("consistent lock on 'incoming'")







 protected final MyConcurrentHashMap<Pair<M,D>,Set<Pair<N,D>>> endSummary =





 protected final MyConcurrentHashMap<M,Set<SummaryEdge<D, N>>> endSummary =







 new MyConcurrentHashMap<Pair<M,D>, Set<Pair<N,D>>>();





 new MyConcurrentHashMap<M, Set<SummaryEdge<D, N>>>();







 





 







 //edges going along calls





 //edges going along calls







 //see CC 2010 paper by Naeem, Lhotak and Rodriguez





 //see CC 2010 paper by Naeem, Lhotak and Rodriguez







 @SynchronizedBy("consistent lock on field")





 @SynchronizedBy("consistent lock on field")







 protected final MyConcurrentHashMap<M, MyConcurrentHashMap<D,MyConcurrentHashMap<N,Map<D, D>>>> incoming =





 protected final MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>> incoming =







 new MyConcurrentHashMap<M, MyConcurrentHashMap<D,MyConcurrentHashMap<N,Map<D, D>>>>();





 new MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>>();







 





 







 @DontSynchronize("stateless")





 @DontSynchronize("stateless")







 protected final FlowFunctions<N, D, M> flowFunctions;





 protected final FlowFunctions<N, D, M> flowFunctions;



...@@ -229,36 +231,34 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -229,36 +231,34 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //for each callee's start point(s)





 //for each callee's start point(s)







 for(N sP: startPointsOf) {





 for(N sP: startPointsOf) {







 //create initial self-loop





 //create initial self-loop







 D abstractStartPointFact = d3.cloneWithAccessPath(new FieldReference.Any());





 D abstractStartPointFact = d3.cloneWithAccessPath();







 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15





 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15







 }





 }







 





 







 //register the fact that <sp,d3> has an incoming edge from <n,d2>





 //register the fact that <sp,d3> has an incoming edge from <n,d2>







 //line 15.1 of Naeem/Lhotak/Rodriguez





 //line 15.1 of Naeem/Lhotak/Rodriguez







 if (!addIncoming(sCalledProcN,d3,n,d1,d2))





 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3,n,d1,d2)))







 continue;





 continue;







 





 







 //TODO: Resume edges that are on hold and match this d3





 //TODO: Resume edges that are on hold and match this d3







 





 







 //line 15.2





 //line 15.2







 //TODO: include more abstract d3 summaries as well





 Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3);







 Set<Pair<N, D>> endSumm = endSummary(sCalledProcN, d3);









 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez







 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,





 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,







 //create new caller-side jump functions to the return sites





 //create new caller-side jump functions to the return sites







 //because we have observed a potentially new incoming edge into <sP,d3>





 //because we have observed a potentially new incoming edge into <sP,d3>







 if (endSumm != null)





 if (endSumm != null)







 for(Pair<N, D> entry: endSumm) {





 for(SummaryEdge<D, N> summary: endSumm) {







 N eP = entry.getO1();





 D d4 = AccessPathUtil.applyAbstractedSummary(d3, summary);







 D d4 = entry.getO2();





 







 //for each return site





 //for each return site







 for(N retSiteN: returnSiteNs) {





 for(N retSiteN: returnSiteNs) {







 //compute return-flow function





 //compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);







 //for each target value of the function





 //for each target value of the function







 //TODO: Map abstracted d4 back (using the summary)





 for(D d5: computeReturnFlowFunction(retFunction, d4, n)) {







 for(D d5: computeReturnFlowFunction(retFunction, d4, n, Collections.singleton(d2))) {









 // If we have not changed anything in the callee, we do not need the facts





 // If we have not changed anything in the callee, we do not need the facts







 // from there. Even if we change something: If we don't need the concrete





 // from there. Even if we change something: If we don't need the concrete







 // path, we can skip the callee in the predecessor chain





 // path, we can skip the callee in the predecessor chain



...@@ -332,42 +332,30 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -332,42 +332,30 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 





 







 //line 21.1 of Naeem/Lhotak/Rodriguez





 //line 21.1 of Naeem/Lhotak/Rodriguez







 //register end-summary





 //register end-summary







 if (!addEndSummary(methodThatNeedsSummary, d1, n, d2))





 SummaryEdge<D, N> summaryEdge = new SummaryEdge<D, N>(d1, n, d2);









 if (!addEndSummary(methodThatNeedsSummary, summaryEdge))







 return;





 return;







 





 







 //TODO: include more abstract d1 values in incoming set





 Set<IncomingEdge<D, N>> inc = incoming(methodThatNeedsSummary, d1);







 Map<N,Map<D, D>> inc = incoming(d1, methodThatNeedsSummary);









 





 







 //for each incoming call edge already processed





 //for each incoming call edge already processed







 //(see processCall(..))





 //(see processCall(..))







 if (inc != null)





 if (inc != null)







 for (Entry<N,Map<D, D>> entry: inc.entrySet()) {





 for (IncomingEdge<D, N> incomingEdge : inc) {







 //line 22





 // line 22







 N c = entry.getKey();





 N callSite = incomingEdge.getCallSite();







 //for each return site





 // for each return site







 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {





 for (N retSiteC : icfg.getReturnSitesOfCallAt(callSite)) {







 //compute return-flow function





 // compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);







 //TODO: create concrete d2, this d2 is currently an abstracted version





 D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);







 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, entry.getValue().keySet());





 Set<D> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);







 //for each incoming-call value













 for(D d4: entry.getValue().keySet())





 // for each incoming-call value







 for(D d5: targets) {





 for (D callerTargetFact : callerTargetFacts) {







 // If we have not changed anything in the callee, we do not need the facts





 callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetFact);







 // from there. Even if we change something: If we don't need the concrete





 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);







 // path, we can skip the callee in the predecessor chain





 }







 D d5p = d5;









 /*	D predVal = entry.getValue().get(d4);









							if (d5.equals(predVal))









								d5p = predVal;









							else if (setJumpPredecessors)









								d5.setPredecessor(predVal);*/









 









 // Set the calling context









 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5p);









 









 propagate(d4, retSiteC, d5p_restoredCtx, c, false);









 }









 }





 }







 }





 }







 





 



...@@ -379,7 +367,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -379,7 +367,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 for(N c: callers) {





 for(N c: callers) {







 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {





 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);







 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, Collections.singleton(zeroValue));





 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c);







 for(D d5: targets)





 for(D d5: targets)







 propagate(zeroValue, retSiteC, d5, c, true);





 propagate(zeroValue, retSiteC, d5, c, true);







 }





 }



...@@ -400,11 +388,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -400,11 +388,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param retFunction The return flow function to compute





	 * @param retFunction The return flow function to compute







	 * @param d2 The abstraction at the exit node in the callee





	 * @param d2 The abstraction at the exit node in the callee







	 * @param callSite The call site





	 * @param callSite The call site







	 * @param callerSideDs The abstractions at the call site









	 * @return The set of caller-side abstractions at the return site





	 * @return The set of caller-side abstractions at the return site







	 */





	 */







 protected Set<D> computeReturnFlowFunction





 protected Set<D> computeReturnFlowFunction







 (FlowFunction<D> retFunction, D d2, N callSite, Collection<D> callerSideDs) {





 (FlowFunction<D> retFunction, D d2, N callSite) {







 return retFunction.computeTargets(d2);





 return retFunction.computeTargets(d2);







 }





 }

















...@@ -501,40 +488,47 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -501,40 +488,47 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);





 logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);







 }





 }







 }





 }







 









 























 private Set<Pair<N, D>> endSummary(M m, D d3) {





 private Set<SummaryEdge<D, N>> endSummary(M m, final D d3) {







 Set<Pair<N, D>> map = endSummary.get(new Pair<M, D>(m, d3));





 Set<SummaryEdge<D, N>> map = endSummary.get(m);







 return map;





 if(map == null)









 return null;









 









 return Sets.filter(map, new Predicate<SummaryEdge<D,N>>() {









 @Override









 public boolean apply(SummaryEdge<D, N> edge) {









 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3);









 }









 });







 }





 }





















 private boolean addEndSummary(M m, D d1, N eP, D d2) {





 private boolean addEndSummary(M m, SummaryEdge<D,N> summaryEdge) {







 Set<Pair<N, D>> summaries = endSummary.putIfAbsentElseGet





 Set<SummaryEdge<D, N>> summaries = endSummary.putIfAbsentElseGet







 (new Pair<M, D>(m, d1), new ConcurrentHashSet<Pair<N, D>>());





 (m, new ConcurrentHashSet<SummaryEdge<D, N>>());







 return summaries.add(new Pair<N, D>(eP, d2));





 return summaries.add(summaryEdge);







 } 





 } 





















 protected Map<D, MyConcurrentHashMap<N, Map<D, D>>> incoming(M m) {





 protected Set<IncomingEdge<D, N>> incoming(M m) {







 MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>> result = incoming.get(m);





 Set<IncomingEdge<D, N>> result = incoming.get(m);







 if(result == null)





 if(result == null)







 return new HashMap<>();





 return Collections.emptySet();







 else





 else







 return result;





 return result;







 }





 }







 





 







 protected Map<N, Map<D, D>> incoming(D d1, M m) {





 protected Set<IncomingEdge<D, N>> incoming(M m, final D abstractCalleeSourceFact) {







 Map<D, MyConcurrentHashMap<N, Map<D, D>>> summariesPerMethod = incoming(m);





 Set<IncomingEdge<D, N>> result = incoming(m);







 Map<N, Map<D, D>> map = summariesPerMethod.get(d1);





 return Sets.filter(result, new Predicate<IncomingEdge<D,N>>() {







 return map;





 @Override









 public boolean apply(IncomingEdge<D, N> edge) {









 return AccessPathUtil.isPrefixOf(abstractCalleeSourceFact, edge.getCalleeSourceFact());









 }









 });







 }





 }







 





 







 protected boolean addIncoming(M m, D d3, N n, D d1, D d2) {





 protected boolean addIncoming(M m, IncomingEdge<D, N> incomingEdge) {







 MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>> summaries = incoming.putIfAbsentElseGet





 Set<IncomingEdge<D,N>> set = incoming.putIfAbsentElseGet(m, new ConcurrentHashSet<IncomingEdge<D,N>>());







 (m, new MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>>());





 return set.add(incomingEdge);







 MyConcurrentHashMap<N, Map<D, D>> summariesPerCallSite = summaries.putIfAbsentElseGet(d3, new MyConcurrentHashMap<N, Map<D,D>>());









 Map<D, D> set = summariesPerCallSite.putIfAbsentElseGet(n, new ConcurrentHashMap<D, D>());









 return set.put(d1, d2) == null;









 }





 }







 





 







 /**





 /**



......


/*******************************************************************************/*******************************************************************************/*******************************************************************************/******************************************************************************* * Copyright (c) 2014 Eric Bodden. * Copyright (c) 2014 Eric Bodden.Eric Bodden * Copyright (c) 2014 Johannes Lerch, Johannes Späth. * Copyright (c) 2014 Johannes Lerch, Johannes Späth.Johannes Lerch, Johannes Späth * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  *  *  * Contributors: * Contributors: * Contributors: * Contributors: *     Eric Bodden - initial API and implementation *     Eric Bodden - initial API and implementationEric Bodden *     Johannes Lerch, Johannes Späth - initial API and implementation *     Johannes Lerch, Johannes Späth - initial API and implementationJohannes Lerch, Johannes Späth ******************************************************************************/ ******************************************************************************/ ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;package heros.alias;packageheros.alias;import org.slf4j.Logger;importorg.slf4j.Logger;import org.slf4j.Logger;importorg.slf4j.Logger;import org.slf4j.LoggerFactory;importorg.slf4j.LoggerFactory;import org.slf4j.LoggerFactory;importorg.slf4j.LoggerFactory;import com.google.common.base.Predicate;importcom.google.common.base.Predicate;import com.google.common.cache.CacheBuilder;importcom.google.common.cache.CacheBuilder;import com.google.common.cache.CacheBuilder;importcom.google.common.cache.CacheBuilder;import com.google.common.collect.Sets;importcom.google.common.collect.Sets;import heros.DontSynchronize;importheros.DontSynchronize;import heros.DontSynchronize;importheros.DontSynchronize;import heros.FlowFunction;importheros.FlowFunction;import heros.FlowFunction;importheros.FlowFunction; //stores summaries that were queried before they were computed//stores summaries that were queried before they were computed //stores summaries that were queried before they were computed//stores summaries that were queried before they were computed //see CC 2010 paper by Naeem, Lhotak and Rodriguez//see CC 2010 paper by Naeem, Lhotak and Rodriguez //see CC 2010 paper by Naeem, Lhotak and Rodriguez//see CC 2010 paper by Naeem, Lhotak and Rodriguez @SynchronizedBy("consistent lock on 'incoming'")@SynchronizedBy("consistent lock on 'incoming'") @SynchronizedBy("consistent lock on 'incoming'")@SynchronizedBy("consistent lock on 'incoming'") protected final MyConcurrentHashMap<Pair<M,D>,Set<Pair<N,D>>> endSummary =protectedfinalMyConcurrentHashMap<PairPair<<MM,,DD>,>,SetSet<<PairPair<<NN,,DD>>>endSummary= protected final MyConcurrentHashMap<M,Set<SummaryEdge<D, N>>> endSummary =protectedfinalMyConcurrentHashMap<MM,,SetSet<<SummaryEdgeSummaryEdge<<DD,, NN>>>endSummary= new MyConcurrentHashMap<Pair<M,D>, Set<Pair<N,D>>>();newMyConcurrentHashMap<PairPair<<MM,,DD>,>, SetSet<<PairPair<<NN,,DD>>>(); new MyConcurrentHashMap<M, Set<SummaryEdge<D, N>>>();newMyConcurrentHashMap<MM,, SetSet<<SummaryEdgeSummaryEdge<<DD,, NN>>>();   //edges going along calls//edges going along calls //edges going along calls//edges going along calls //see CC 2010 paper by Naeem, Lhotak and Rodriguez//see CC 2010 paper by Naeem, Lhotak and Rodriguez //see CC 2010 paper by Naeem, Lhotak and Rodriguez//see CC 2010 paper by Naeem, Lhotak and Rodriguez @SynchronizedBy("consistent lock on field")@SynchronizedBy("consistent lock on field") @SynchronizedBy("consistent lock on field")@SynchronizedBy("consistent lock on field") protected final MyConcurrentHashMap<M, MyConcurrentHashMap<D,MyConcurrentHashMap<N,Map<D, D>>>> incoming =protectedfinalMyConcurrentHashMap<M,MyConcurrentHashMapMyConcurrentHashMap<<DD,,MyConcurrentHashMapMyConcurrentHashMap<<NN,,MapMap<D,DD>>>>>incoming= protected final MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>> incoming =protectedfinalMyConcurrentHashMap<M,SetSet<<IncomingEdgeIncomingEdge<D,NN>>>incoming= new MyConcurrentHashMap<M, MyConcurrentHashMap<D,MyConcurrentHashMap<N,Map<D, D>>>>();newMyConcurrentHashMap<M,MyConcurrentHashMapMyConcurrentHashMap<<DD,,MyConcurrentHashMapMyConcurrentHashMap<<NN,,MapMap<D,DD>>>>();> new MyConcurrentHashMap<M, Set<IncomingEdge<D, N>>>();newMyConcurrentHashMap<M,SetSet<<IncomingEdgeIncomingEdge<D,NN>>>();   @DontSynchronize("stateless")@DontSynchronize("stateless") @DontSynchronize("stateless")@DontSynchronize("stateless") protected final FlowFunctions<N, D, M> flowFunctions;protectedfinalFlowFunctions<N,D,M>flowFunctions; protected final FlowFunctions<N, D, M> flowFunctions;protectedfinalFlowFunctions<N,D,M>flowFunctions; //for each callee's start point(s)//for each callee's start point(s) //for each callee's start point(s)//for each callee's start point(s) for(N sP: startPointsOf) {for(NsP:startPointsOf){ for(N sP: startPointsOf) {for(NsP:startPointsOf){ //create initial self-loop//create initial self-loop //create initial self-loop//create initial self-loop D abstractStartPointFact = d3.cloneWithAccessPath(new FieldReference.Any());DabstractStartPointFact=d3.cloneWithAccessPath(newnew FieldReferenceFieldReference..AnyAny());() D abstractStartPointFact = d3.cloneWithAccessPath();DabstractStartPointFact=d3.cloneWithAccessPath(); propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15propagate(abstractStartPointFact,sP,abstractStartPointFact,n,false);//line 15 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15propagate(abstractStartPointFact,sP,abstractStartPointFact,n,false);//line 15 }} }}   //register the fact that <sp,d3> has an incoming edge from <n,d2>//register the fact that <sp,d3> has an incoming edge from <n,d2> //register the fact that <sp,d3> has an incoming edge from <n,d2>//register the fact that <sp,d3> has an incoming edge from <n,d2> //line 15.1 of Naeem/Lhotak/Rodriguez//line 15.1 of Naeem/Lhotak/Rodriguez //line 15.1 of Naeem/Lhotak/Rodriguez//line 15.1 of Naeem/Lhotak/Rodriguez if (!addIncoming(sCalledProcN,d3,n,d1,d2))if(!addIncoming(sCalledProcN,d3,n,d1,d2)) if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3,n,d1,d2)))if(!addIncoming(sCalledProcN, newnew IncomingEdgeIncomingEdge<<DD,, NN>(>(d3,n,d1,d2)))) continue;continue; continue;continue;   //TODO: Resume edges that are on hold and match this d3//TODO: Resume edges that are on hold and match this d3 //TODO: Resume edges that are on hold and match this d3//TODO: Resume edges that are on hold and match this d3   //line 15.2//line 15.2 //line 15.2//line 15.2 //TODO: include more abstract d3 summaries as well//TODO: include more abstract d3 summaries as well Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3);Set<SummaryEdge<D,N>>endSumm=endSummary(sCalledProcN,d3); Set<Pair<N, D>> endSumm = endSummary(sCalledProcN, d3);Set<Pair<N,D>>endSumm=endSummary(sCalledProcN,d3);   //still line 15.2 of Naeem/Lhotak/Rodriguez//still line 15.2 of Naeem/Lhotak/Rodriguez //still line 15.2 of Naeem/Lhotak/Rodriguez//still line 15.2 of Naeem/Lhotak/Rodriguez //for each already-queried exit value <eP,d4> reachable from <sP,d3>,//for each already-queried exit value <eP,d4> reachable from <sP,d3>, //for each already-queried exit value <eP,d4> reachable from <sP,d3>,//for each already-queried exit value <eP,d4> reachable from <sP,d3>, //create new caller-side jump functions to the return sites//create new caller-side jump functions to the return sites //create new caller-side jump functions to the return sites//create new caller-side jump functions to the return sites //because we have observed a potentially new incoming edge into <sP,d3>//because we have observed a potentially new incoming edge into <sP,d3> //because we have observed a potentially new incoming edge into <sP,d3>//because we have observed a potentially new incoming edge into <sP,d3> if (endSumm != null)if(endSumm!=null) if (endSumm != null)if(endSumm!=null) for(Pair<N, D> entry: endSumm) {for(PairPair<<NN,DD>entry:entendSumm){ for(SummaryEdge<D, N> summary: endSumm) {for(SummaryEdgeSummaryEdge<<DD,NN>summary:summaendSumm){ N eP = entry.getO1();NN ePeP == entryentry..getO1getO1();( D d4 = AccessPathUtil.applyAbstractedSummary(d3, summary);DD d4d4 == AccessPathUtilAccessPathUtil..applyAbstractedSummaryapplyAbstractedSummary((d3d3,, summarysummary); D d4 = entry.getO2();DD d4d4 == entryentry..getO2getO2();();  //for each return site//for each return site //for each return site//for each return site for(N retSiteN: returnSiteNs) {for(NretSiteN:returnSiteNs){ for(N retSiteN: returnSiteNs) {for(NretSiteN:returnSiteNs){ //compute return-flow function//compute return-flow function //compute return-flow function//compute return-flow function FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);FlowFunction<D>retFunction=flowFunctions.getReturnFlowFunction(n,sCalledProcN,ePeP,retSiteN); FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);FlowFunction<D>retFunction=flowFunctions.getReturnFlowFunction(n,sCalledProcN,summarysummary..getTargetStmtgetTargetStmt(),()retSiteN); //for each target value of the function//for each target value of the function //for each target value of the function//for each target value of the function //TODO: Map abstracted d4 back (using the summary)//TODO: Map abstracted d4 back (using the summary) for(D d5: computeReturnFlowFunction(retFunction, d4, n)) {for(Dd5:computeReturnFlowFunction(retFunction,d4,n)){ for(D d5: computeReturnFlowFunction(retFunction, d4, n, Collections.singleton(d2))) {for(Dd5:computeReturnFlowFunction(retFunction,d4,n,Collections.singleton(d2))){ // If we have not changed anything in the callee, we do not need the facts// If we have not changed anything in the callee, we do not need the facts // If we have not changed anything in the callee, we do not need the facts// If we have not changed anything in the callee, we do not need the facts // from there. Even if we change something: If we don't need the concrete// from there. Even if we change something: If we don't need the concrete // from there. Even if we change something: If we don't need the concrete// from there. Even if we change something: If we don't need the concrete // path, we can skip the callee in the predecessor chain// path, we can skip the callee in the predecessor chain // path, we can skip the callee in the predecessor chain// path, we can skip the callee in the predecessor chain   //line 21.1 of Naeem/Lhotak/Rodriguez//line 21.1 of Naeem/Lhotak/Rodriguez //line 21.1 of Naeem/Lhotak/Rodriguez//line 21.1 of Naeem/Lhotak/Rodriguez //register end-summary//register end-summary //register end-summary//register end-summary if (!addEndSummary(methodThatNeedsSummary, d1, n, d2))if(!addEndSummary(methodThatNeedsSummary,d1,n,d2)) SummaryEdge<D, N> summaryEdge = new SummaryEdge<D, N>(d1, n, d2);SummaryEdge<D,N>summaryEdge=newSummaryEdge<D,N>(d1,n,d2); if (!addEndSummary(methodThatNeedsSummary, summaryEdge))if(!addEndSummary(methodThatNeedsSummary,summaryEdge)) return;return; return;return;   //TODO: include more abstract d1 values in incoming set//TODO: include more abstract d1 values in incoming set Set<IncomingEdge<D, N>> inc = incoming(methodThatNeedsSummary, d1);Set<IncomingEdge<D,N>>inc=incoming(methodThatNeedsSummary,d1); Map<N,Map<D, D>> inc = incoming(d1, methodThatNeedsSummary);Map<N,Map<D,D>>inc=incoming(d1,methodThatNeedsSummary);   //for each incoming call edge already processed//for each incoming call edge already processed //for each incoming call edge already processed//for each incoming call edge already processed //(see processCall(..))//(see processCall(..)) //(see processCall(..))//(see processCall(..)) if (inc != null)if(inc!=null) if (inc != null)if(inc!=null) for (Entry<N,Map<D, D>> entry: inc.entrySet()) {for(Entry<N,Map<D,D>>entry:inc.entrySet()){ for (IncomingEdge<D, N> incomingEdge : inc) {for(IncomingEdge<D,N>incomingEdge:inc){ //line 22//line 22 // line 22// line 22 N c = entry.getKey();Nc=entry.getKey(); N callSite = incomingEdge.getCallSite();NcallSite=incomingEdge.getCallSite(); //for each return site//for each return site // for each return site// for each return site for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {for(NretSiteC:icfg.getReturnSitesOfCallAt(c)){ for (N retSiteC : icfg.getReturnSitesOfCallAt(callSite)) {for(NretSiteC:icfg.getReturnSitesOfCallAt(callSite)){ //compute return-flow function//compute return-flow function // compute return-flow function// compute return-flow function FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);FlowFunction<D>retFunction=flowFunctions.getReturnFlowFunction(c,methodThatNeedsSummary,n,retSiteC); FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);FlowFunction<D>retFunction=flowFunctions.getReturnFlowFunction(callSite,methodThatNeedsSummary,n,retSiteC); //TODO: create concrete d2, this d2 is currently an abstracted version//TODO: create concrete d2, this d2 is currently an abstracted version D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);DconcreteCalleeExitFact=AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(),summaryEdge); Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, entry.getValue().keySet());Set<D>targets=computeReturnFlowFunction(retFunction,d2,c,entry.getValue().keySet()); Set<D> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);Set<D>callerTargetFacts=computeReturnFlowFunction(retFunction,concreteCalleeExitFact,callSite); //for each incoming-call value//for each incoming-call value for(D d4: entry.getValue().keySet())for(Dd4:entry.getValue().keySet()) // for each incoming-call value// for each incoming-call value for(D d5: targets) {for(Dd5:targets){ for (D callerTargetFact : callerTargetFacts) {for(DcallerTargetFact:callerTargetFacts){ // If we have not changed anything in the callee, we do not need the facts// If we have not changed anything in the callee, we do not need the facts callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetFact);callerTargetFact=restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(),callerTargetFact); // from there. Even if we change something: If we don't need the concrete// from there. Even if we change something: If we don't need the concrete propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);propagate(incomingEdge.getCallerSourceFact(),retSiteC,callerTargetFact,callSite,false); // path, we can skip the callee in the predecessor chain// path, we can skip the callee in the predecessor chain }} D d5p = d5;Dd5p=d5; /*	D predVal = entry.getValue().get(d4);/*	D predVal = entry.getValue().get(d4);							if (d5.equals(predVal))							if (d5.equals(predVal))								d5p = predVal;								d5p = predVal;							else if (setJumpPredecessors)							else if (setJumpPredecessors)								d5.setPredecessor(predVal);*/								d5.setPredecessor(predVal);*/  // Set the calling context// Set the calling context D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5p);Dd5p_restoredCtx=restoreContextOnReturnedFact(d2,d5p);  propagate(d4, retSiteC, d5p_restoredCtx, c, false);propagate(d4,retSiteC,d5p_restoredCtx,c,false); }} }} }} }} }}   for(N c: callers) {for(Nc:callers){ for(N c: callers) {for(Nc:callers){ for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {for(NretSiteC:icfg.getReturnSitesOfCallAt(c)){ for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {for(NretSiteC:icfg.getReturnSitesOfCallAt(c)){ FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);FlowFunction<D>retFunction=flowFunctions.getReturnFlowFunction(c,methodThatNeedsSummary,n,retSiteC); FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);FlowFunction<D>retFunction=flowFunctions.getReturnFlowFunction(c,methodThatNeedsSummary,n,retSiteC); Set<D> targets = computeReturnFlowFunction(retFunction, d2, c, Collections.singleton(zeroValue));Set<D>targets=computeReturnFlowFunction(retFunction,d2,c,, CollectionsCollections..singletonsingleton((zeroValuezeroValue));) Set<D> targets = computeReturnFlowFunction(retFunction, d2, c);Set<D>targets=computeReturnFlowFunction(retFunction,d2,c); for(D d5: targets)for(Dd5:targets) for(D d5: targets)for(Dd5:targets) propagate(zeroValue, retSiteC, d5, c, true);propagate(zeroValue,retSiteC,d5,c,true); propagate(zeroValue, retSiteC, d5, c, true);propagate(zeroValue,retSiteC,d5,c,true); }} }}	 * @param retFunction The return flow function to compute	 * @param retFunction The return flow function to compute	 * @param retFunction The return flow function to compute	 * @param retFunction The return flow function to compute	 * @param d2 The abstraction at the exit node in the callee	 * @param d2 The abstraction at the exit node in the callee	 * @param d2 The abstraction at the exit node in the callee	 * @param d2 The abstraction at the exit node in the callee	 * @param callSite The call site	 * @param callSite The call site	 * @param callSite The call site	 * @param callSite The call site	 * @param callerSideDs The abstractions at the call site	 * @param callerSideDs The abstractions at the call site	 * @return The set of caller-side abstractions at the return site	 * @return The set of caller-side abstractions at the return site	 * @return The set of caller-side abstractions at the return site	 * @return The set of caller-side abstractions at the return site	 */	 */	 */	 */ protected Set<D> computeReturnFlowFunctionprotectedSet<D>computeReturnFlowFunction protected Set<D> computeReturnFlowFunctionprotectedSet<D>computeReturnFlowFunction (FlowFunction<D> retFunction, D d2, N callSite, Collection<D> callerSideDs) {(FlowFunction<D>retFunction,Dd2,NcallSite,, CollectionCollection<<DD>> callerSideDscallerSideDs){ (FlowFunction<D> retFunction, D d2, N callSite) {(FlowFunction<D>retFunction,Dd2,NcallSite){ return retFunction.computeTargets(d2);returnretFunction.computeTargets(d2); return retFunction.computeTargets(d2);returnretFunction.computeTargets(d2); }} }} logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);logger.trace("EDGE: <{},{}> -> <{},{}>",icfg.getMethodOf(target),sourceVal,target,targetVal); logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);logger.trace("EDGE: <{},{}> -> <{},{}>",icfg.getMethodOf(target),sourceVal,target,targetVal); }} }} }} }}   private Set<Pair<N, D>> endSummary(M m, D d3) {privateSet<Pair<N,D>>endSummary(Mm,Dd3){ private Set<SummaryEdge<D, N>> endSummary(M m, final D d3) {privateSet<SummaryEdge<D,N>>endSummary(Mm,finalDd3){ Set<Pair<N, D>> map = endSummary.get(new Pair<M, D>(m, d3));Set<Pair<N,D>>map=endSummary.get(newPair<M,D>(m,d3)); Set<SummaryEdge<D, N>> map = endSummary.get(m);Set<SummaryEdge<D,N>>map=endSummary.get(m); return map;returnmap; if(map == null)if(map==null) return null;returnnull;  return Sets.filter(map, new Predicate<SummaryEdge<D,N>>() {returnSets.filter(map,newPredicate<SummaryEdge<D,N>>(){ @Override@Override public boolean apply(SummaryEdge<D, N> edge) {publicbooleanapply(SummaryEdge<D,N>edge){ return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3);returnAccessPathUtil.isPrefixOf(edge.getSourceFact(),d3); }} });}); }} }} private boolean addEndSummary(M m, D d1, N eP, D d2) {privatebooleanaddEndSummary(Mm,DD d1d1,, NN ePeP,, DD d2d2){ private boolean addEndSummary(M m, SummaryEdge<D,N> summaryEdge) {privatebooleanaddEndSummary(Mm,SummaryEdgeSummaryEdge<<DD,,NN>> summaryEdgesummaryEdge){ Set<Pair<N, D>> summaries = endSummary.putIfAbsentElseGetSet<PairPair<<NN,DD>>summaries=endSummary.putIfAbsentElseGet Set<SummaryEdge<D, N>> summaries = endSummary.putIfAbsentElseGetSet<SummaryEdgeSummaryEdge<<DD,NN>>summaries=endSummary.putIfAbsentElseGet (new Pair<M, D>(m, d1), new ConcurrentHashSet<Pair<N, D>>());(newnew PairPair<<MM,, DD>(>(mm,, d1d1),)newConcurrentHashSet<PairPair<<NN,DD>>()); (m, new ConcurrentHashSet<SummaryEdge<D, N>>());(mm,newConcurrentHashSet<SummaryEdgeSummaryEdge<<DD,NN>>()); return summaries.add(new Pair<N, D>(eP, d2));returnsummaries.add(newnew PairPair<<NN,, DD>(>(ePeP,, d2d2));) return summaries.add(summaryEdge);returnsummaries.add(summaryEdgesummaryEdge); } } } } protected Map<D, MyConcurrentHashMap<N, Map<D, D>>> incoming(M m) {protectedMapMap<<DD,, MyConcurrentHashMapMyConcurrentHashMap<<NN,, MapMap<D,DD>>>>incoming(Mm){ protected Set<IncomingEdge<D, N>> incoming(M m) {protectedSetSet<<IncomingEdgeIncomingEdge<D,NN>>incoming(Mm){ MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>> result = incoming.get(m);MyConcurrentHashMapMyConcurrentHashMap<<DD,, MyConcurrentHashMapMyConcurrentHashMap<<NN,, MapMap<D,DD>>>>result=incoming.get(m); Set<IncomingEdge<D, N>> result = incoming.get(m);SetSet<<IncomingEdgeIncomingEdge<D,NN>>result=incoming.get(m); if(result == null)if(result==null) if(result == null)if(result==null) return new HashMap<>();returnnewnew HashMapHashMap<>();<> return Collections.emptySet();returnCollectionsCollections..emptySetemptySet(); elseelse elseelse return result;returnresult; return result;returnresult; }} }}   protected Map<N, Map<D, D>> incoming(D d1, M m) {protectedMap<N,Map<D,D>>incoming(Dd1,Mm){ protected Set<IncomingEdge<D, N>> incoming(M m, final D abstractCalleeSourceFact) {protectedSet<IncomingEdge<D,N>>incoming(Mm,finalDabstractCalleeSourceFact){ Map<D, MyConcurrentHashMap<N, Map<D, D>>> summariesPerMethod = incoming(m);Map<D,MyConcurrentHashMap<N,Map<D,D>>>summariesPerMethod=incoming(m); Set<IncomingEdge<D, N>> result = incoming(m);Set<IncomingEdge<D,N>>result=incoming(m); Map<N, Map<D, D>> map = summariesPerMethod.get(d1);Map<N,Map<D,D>>map=summariesPerMethod.get(d1); return Sets.filter(result, new Predicate<IncomingEdge<D,N>>() {returnSets.filter(result,newPredicate<IncomingEdge<D,N>>(){ return map;returnmap; @Override@Override public boolean apply(IncomingEdge<D, N> edge) {publicbooleanapply(IncomingEdge<D,N>edge){ return AccessPathUtil.isPrefixOf(abstractCalleeSourceFact, edge.getCalleeSourceFact());returnAccessPathUtil.isPrefixOf(abstractCalleeSourceFact,edge.getCalleeSourceFact()); }} });}); }} }}   protected boolean addIncoming(M m, D d3, N n, D d1, D d2) {protectedbooleanaddIncoming(Mm,Dd3,Nn,Dd1,Dd2){ protected boolean addIncoming(M m, IncomingEdge<D, N> incomingEdge) {protectedbooleanaddIncoming(Mm,IncomingEdge<D,N>incomingEdge){ MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>> summaries = incoming.putIfAbsentElseGetMyConcurrentHashMap<D,MyConcurrentHashMap<N,Map<D,D>>>summaries=incoming.putIfAbsentElseGet Set<IncomingEdge<D,N>> set = incoming.putIfAbsentElseGet(m, new ConcurrentHashSet<IncomingEdge<D,N>>());Set<IncomingEdge<D,N>>set=incoming.putIfAbsentElseGet(m,newConcurrentHashSet<IncomingEdge<D,N>>()); (m, new MyConcurrentHashMap<D, MyConcurrentHashMap<N, Map<D, D>>>());(m,newMyConcurrentHashMap<D,MyConcurrentHashMap<N,Map<D,D>>>()); return set.add(incomingEdge);returnset.add(incomingEdge); MyConcurrentHashMap<N, Map<D, D>> summariesPerCallSite = summaries.putIfAbsentElseGet(d3, new MyConcurrentHashMap<N, Map<D,D>>());MyConcurrentHashMap<N,Map<D,D>>summariesPerCallSite=summaries.putIfAbsentElseGet(d3,newMyConcurrentHashMap<N,Map<D,D>>()); Map<D, D> set = summariesPerCallSite.putIfAbsentElseGet(n, new ConcurrentHashMap<D, D>());Map<D,D>set=summariesPerCallSite.putIfAbsentElseGet(n,newConcurrentHashMap<D,D>()); return set.put(d1, d2) == null;returnset.put(d1,d2)==null; }} }}   /**/** /**/**








src/heros/alias/FlowFunctions.java








View file @ 3b064347








...@@ -7,6 +7,7 @@
...@@ -7,6 +7,7 @@






 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Eric Bodden - initial API and implementation









 *     Johannes Lerch, Johannes Späth - extension for field sensitivity







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















......













src/heros/alias/FlowFunctions.java








View file @ 3b064347








src/heros/alias/FlowFunctions.java










View file @ 3b064347


3b064347





...@@ -7,6 +7,7 @@
...@@ -7,6 +7,7 @@






 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Eric Bodden - initial API and implementation









 *     Johannes Lerch, Johannes Späth - extension for field sensitivity







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















......









...@@ -7,6 +7,7 @@
...@@ -7,6 +7,7 @@






 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Eric Bodden - initial API and implementation









 *     Johannes Lerch, Johannes Späth - extension for field sensitivity







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















......






...@@ -7,6 +7,7 @@
...@@ -7,6 +7,7 @@






 * 





 * 







 * Contributors:





 * Contributors:







 *     Eric Bodden - initial API and implementation





 *     Eric Bodden - initial API and implementation









 *     Johannes Lerch, Johannes Späth - extension for field sensitivity







 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;

















......


 *  *  *  *  * Contributors: * Contributors: * Contributors: * Contributors: *     Eric Bodden - initial API and implementation *     Eric Bodden - initial API and implementation *     Eric Bodden - initial API and implementation *     Eric Bodden - initial API and implementation *     Johannes Lerch, Johannes Späth - extension for field sensitivity *     Johannes Lerch, Johannes Späth - extension for field sensitivity ******************************************************************************/ ******************************************************************************/ ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;package heros.alias;packageheros.alias;








src/heros/alias/IncomingEdge.java



0 → 100644







View file @ 3b064347














/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros.alias;



















public class IncomingEdge<D, N> {



















 private D calleeSourceFact;









 private N callSite;









 private D callerSourceFact;









 private D callerCallSiteFact;









 









 public IncomingEdge(D calleeSourceFact, N callSite, D callerSourceFact, D callerCallSiteFact) {









 super();









 this.calleeSourceFact = calleeSourceFact;









 this.callSite = callSite;









 this.callerSourceFact = callerSourceFact;









 this.callerCallSiteFact = callerCallSiteFact;









 }









 









 public D getCalleeSourceFact() {









 return calleeSourceFact;









 }









 









 public D getCallerCallSiteFact() {









 return callerCallSiteFact;









 }









 









 public D getCallerSourceFact() {









 return callerSourceFact;









 }









 









 public N getCallSite() {









 return callSite;









 }



















 @Override









 public int hashCode() {









 final int prime = 31;









 int result = 1;









 result = prime * result + ((callSite == null) ? 0 : callSite.hashCode());









 result = prime * result + ((calleeSourceFact == null) ? 0 : calleeSourceFact.hashCode());









 result = prime * result + ((callerCallSiteFact == null) ? 0 : callerCallSiteFact.hashCode());









 result = prime * result + ((callerSourceFact == null) ? 0 : callerSourceFact.hashCode());









 return result;









 }



















 @Override









 public boolean equals(Object obj) {









 if (this == obj)









 return true;









 if (obj == null)









 return false;









 if (!(obj instanceof IncomingEdge))









 return false;









 IncomingEdge other = (IncomingEdge) obj;









 if (callSite == null) {









 if (other.callSite != null)









 return false;









 } else if (!callSite.equals(other.callSite))









 return false;









 if (calleeSourceFact == null) {









 if (other.calleeSourceFact != null)









 return false;









 } else if (!calleeSourceFact.equals(other.calleeSourceFact))









 return false;









 if (callerCallSiteFact == null) {









 if (other.callerCallSiteFact != null)









 return false;









 } else if (!callerCallSiteFact.equals(other.callerCallSiteFact))









 return false;









 if (callerSourceFact == null) {









 if (other.callerSourceFact != null)









 return false;









 } else if (!callerSourceFact.equals(other.callerSourceFact))









 return false;









 return true;









 }









 









 









}













src/heros/alias/IncomingEdge.java



0 → 100644







View file @ 3b064347








src/heros/alias/IncomingEdge.java



0 → 100644









View file @ 3b064347


3b064347











/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros.alias;



















public class IncomingEdge<D, N> {



















 private D calleeSourceFact;









 private N callSite;









 private D callerSourceFact;









 private D callerCallSiteFact;









 









 public IncomingEdge(D calleeSourceFact, N callSite, D callerSourceFact, D callerCallSiteFact) {









 super();









 this.calleeSourceFact = calleeSourceFact;









 this.callSite = callSite;









 this.callerSourceFact = callerSourceFact;









 this.callerCallSiteFact = callerCallSiteFact;









 }









 









 public D getCalleeSourceFact() {









 return calleeSourceFact;









 }









 









 public D getCallerCallSiteFact() {









 return callerCallSiteFact;









 }









 









 public D getCallerSourceFact() {









 return callerSourceFact;









 }









 









 public N getCallSite() {









 return callSite;









 }



















 @Override









 public int hashCode() {









 final int prime = 31;









 int result = 1;









 result = prime * result + ((callSite == null) ? 0 : callSite.hashCode());









 result = prime * result + ((calleeSourceFact == null) ? 0 : calleeSourceFact.hashCode());









 result = prime * result + ((callerCallSiteFact == null) ? 0 : callerCallSiteFact.hashCode());









 result = prime * result + ((callerSourceFact == null) ? 0 : callerSourceFact.hashCode());









 return result;









 }



















 @Override









 public boolean equals(Object obj) {









 if (this == obj)









 return true;









 if (obj == null)









 return false;









 if (!(obj instanceof IncomingEdge))









 return false;









 IncomingEdge other = (IncomingEdge) obj;









 if (callSite == null) {









 if (other.callSite != null)









 return false;









 } else if (!callSite.equals(other.callSite))









 return false;









 if (calleeSourceFact == null) {









 if (other.calleeSourceFact != null)









 return false;









 } else if (!calleeSourceFact.equals(other.calleeSourceFact))









 return false;









 if (callerCallSiteFact == null) {









 if (other.callerCallSiteFact != null)









 return false;









 } else if (!callerCallSiteFact.equals(other.callerCallSiteFact))









 return false;









 if (callerSourceFact == null) {









 if (other.callerSourceFact != null)









 return false;









 } else if (!callerSourceFact.equals(other.callerSourceFact))









 return false;









 return true;









 }









 









 









}















/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros.alias;



















public class IncomingEdge<D, N> {



















 private D calleeSourceFact;









 private N callSite;









 private D callerSourceFact;









 private D callerCallSiteFact;









 









 public IncomingEdge(D calleeSourceFact, N callSite, D callerSourceFact, D callerCallSiteFact) {









 super();









 this.calleeSourceFact = calleeSourceFact;









 this.callSite = callSite;









 this.callerSourceFact = callerSourceFact;









 this.callerCallSiteFact = callerCallSiteFact;









 }









 









 public D getCalleeSourceFact() {









 return calleeSourceFact;









 }









 









 public D getCallerCallSiteFact() {









 return callerCallSiteFact;









 }









 









 public D getCallerSourceFact() {









 return callerSourceFact;









 }









 









 public N getCallSite() {









 return callSite;









 }



















 @Override









 public int hashCode() {









 final int prime = 31;









 int result = 1;









 result = prime * result + ((callSite == null) ? 0 : callSite.hashCode());









 result = prime * result + ((calleeSourceFact == null) ? 0 : calleeSourceFact.hashCode());









 result = prime * result + ((callerCallSiteFact == null) ? 0 : callerCallSiteFact.hashCode());









 result = prime * result + ((callerSourceFact == null) ? 0 : callerSourceFact.hashCode());









 return result;









 }



















 @Override









 public boolean equals(Object obj) {









 if (this == obj)









 return true;









 if (obj == null)









 return false;









 if (!(obj instanceof IncomingEdge))









 return false;









 IncomingEdge other = (IncomingEdge) obj;









 if (callSite == null) {









 if (other.callSite != null)









 return false;









 } else if (!callSite.equals(other.callSite))









 return false;









 if (calleeSourceFact == null) {









 if (other.calleeSourceFact != null)









 return false;









 } else if (!calleeSourceFact.equals(other.calleeSourceFact))









 return false;









 if (callerCallSiteFact == null) {









 if (other.callerCallSiteFact != null)









 return false;









 } else if (!callerCallSiteFact.equals(other.callerCallSiteFact))









 return false;









 if (callerSourceFact == null) {









 if (other.callerSourceFact != null)









 return false;









 } else if (!callerSourceFact.equals(other.callerSourceFact))









 return false;









 return true;









 }









 









 









}












/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros.alias;



















public class IncomingEdge<D, N> {



















 private D calleeSourceFact;









 private N callSite;









 private D callerSourceFact;









 private D callerCallSiteFact;









 









 public IncomingEdge(D calleeSourceFact, N callSite, D callerSourceFact, D callerCallSiteFact) {









 super();









 this.calleeSourceFact = calleeSourceFact;









 this.callSite = callSite;









 this.callerSourceFact = callerSourceFact;









 this.callerCallSiteFact = callerCallSiteFact;









 }









 









 public D getCalleeSourceFact() {









 return calleeSourceFact;









 }









 









 public D getCallerCallSiteFact() {









 return callerCallSiteFact;









 }









 









 public D getCallerSourceFact() {









 return callerSourceFact;









 }









 









 public N getCallSite() {









 return callSite;









 }



















 @Override









 public int hashCode() {









 final int prime = 31;









 int result = 1;









 result = prime * result + ((callSite == null) ? 0 : callSite.hashCode());









 result = prime * result + ((calleeSourceFact == null) ? 0 : calleeSourceFact.hashCode());









 result = prime * result + ((callerCallSiteFact == null) ? 0 : callerCallSiteFact.hashCode());









 result = prime * result + ((callerSourceFact == null) ? 0 : callerSourceFact.hashCode());









 return result;









 }



















 @Override









 public boolean equals(Object obj) {









 if (this == obj)









 return true;









 if (obj == null)









 return false;









 if (!(obj instanceof IncomingEdge))









 return false;









 IncomingEdge other = (IncomingEdge) obj;









 if (callSite == null) {









 if (other.callSite != null)









 return false;









 } else if (!callSite.equals(other.callSite))









 return false;









 if (calleeSourceFact == null) {









 if (other.calleeSourceFact != null)









 return false;









 } else if (!calleeSourceFact.equals(other.calleeSourceFact))









 return false;









 if (callerCallSiteFact == null) {









 if (other.callerCallSiteFact != null)









 return false;









 } else if (!callerCallSiteFact.equals(other.callerCallSiteFact))









 return false;









 if (callerSourceFact == null) {









 if (other.callerSourceFact != null)









 return false;









 } else if (!callerSourceFact.equals(other.callerSourceFact))









 return false;









 return true;









 }









 









 









}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2014 Johannes Lerch. * Copyright (c) 2014 Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;public class IncomingEdge<D, N> {publicclassIncomingEdge<D,N>{ private D calleeSourceFact;privateDcalleeSourceFact; private N callSite;privateNcallSite; private D callerSourceFact;privateDcallerSourceFact; private D callerCallSiteFact;privateDcallerCallSiteFact;  public IncomingEdge(D calleeSourceFact, N callSite, D callerSourceFact, D callerCallSiteFact) {publicIncomingEdge(DcalleeSourceFact,NcallSite,DcallerSourceFact,DcallerCallSiteFact){ super();super(); this.calleeSourceFact = calleeSourceFact;this.calleeSourceFact=calleeSourceFact; this.callSite = callSite;this.callSite=callSite; this.callerSourceFact = callerSourceFact;this.callerSourceFact=callerSourceFact; this.callerCallSiteFact = callerCallSiteFact;this.callerCallSiteFact=callerCallSiteFact; }}  public D getCalleeSourceFact() {publicDgetCalleeSourceFact(){ return calleeSourceFact;returncalleeSourceFact; }}  public D getCallerCallSiteFact() {publicDgetCallerCallSiteFact(){ return callerCallSiteFact;returncallerCallSiteFact; }}  public D getCallerSourceFact() {publicDgetCallerSourceFact(){ return callerSourceFact;returncallerSourceFact; }}  public N getCallSite() {publicNgetCallSite(){ return callSite;returncallSite; }} @Override@Override public int hashCode() {publicinthashCode(){ final int prime = 31;finalintprime=31; int result = 1;intresult=1; result = prime * result + ((callSite == null) ? 0 : callSite.hashCode());result=prime*result+((callSite==null)?0:callSite.hashCode()); result = prime * result + ((calleeSourceFact == null) ? 0 : calleeSourceFact.hashCode());result=prime*result+((calleeSourceFact==null)?0:calleeSourceFact.hashCode()); result = prime * result + ((callerCallSiteFact == null) ? 0 : callerCallSiteFact.hashCode());result=prime*result+((callerCallSiteFact==null)?0:callerCallSiteFact.hashCode()); result = prime * result + ((callerSourceFact == null) ? 0 : callerSourceFact.hashCode());result=prime*result+((callerSourceFact==null)?0:callerSourceFact.hashCode()); return result;returnresult; }} @Override@Override public boolean equals(Object obj) {publicbooleanequals(Objectobj){ if (this == obj)if(this==obj) return true;returntrue; if (obj == null)if(obj==null) return false;returnfalse; if (!(obj instanceof IncomingEdge))if(!(objinstanceofIncomingEdge)) return false;returnfalse; IncomingEdge other = (IncomingEdge) obj;IncomingEdgeother=(IncomingEdge)obj; if (callSite == null) {if(callSite==null){ if (other.callSite != null)if(other.callSite!=null) return false;returnfalse; } else if (!callSite.equals(other.callSite))}elseif(!callSite.equals(other.callSite)) return false;returnfalse; if (calleeSourceFact == null) {if(calleeSourceFact==null){ if (other.calleeSourceFact != null)if(other.calleeSourceFact!=null) return false;returnfalse; } else if (!calleeSourceFact.equals(other.calleeSourceFact))}elseif(!calleeSourceFact.equals(other.calleeSourceFact)) return false;returnfalse; if (callerCallSiteFact == null) {if(callerCallSiteFact==null){ if (other.callerCallSiteFact != null)if(other.callerCallSiteFact!=null) return false;returnfalse; } else if (!callerCallSiteFact.equals(other.callerCallSiteFact))}elseif(!callerCallSiteFact.equals(other.callerCallSiteFact)) return false;returnfalse; if (callerSourceFact == null) {if(callerSourceFact==null){ if (other.callerSourceFact != null)if(other.callerSourceFact!=null) return false;returnfalse; } else if (!callerSourceFact.equals(other.callerSourceFact))}elseif(!callerSourceFact.equals(other.callerSourceFact)) return false;returnfalse; return true;returntrue; }}  }}








src/heros/alias/SummaryEdge.java



0 → 100644







View file @ 3b064347














/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros.alias;



















public class SummaryEdge<D, N> {



















 private D sourceFact;









 private N targetStmt;









 private D targetFact;









 









 public SummaryEdge(D sourceFact, N targetStmt, D targetFact) {









 this.sourceFact = sourceFact;









 this.targetStmt = targetStmt;









 this.targetFact = targetFact;









 }



















 @Override









 public int hashCode() {









 final int prime = 31;









 int result = 1;









 result = prime * result + ((sourceFact == null) ? 0 : sourceFact.hashCode());









 result = prime * result + ((targetFact == null) ? 0 : targetFact.hashCode());









 result = prime * result + ((targetStmt == null) ? 0 : targetStmt.hashCode());









 return result;









 }









 









 @Override









 public boolean equals(Object obj) {









 if (this == obj)









 return true;









 if (obj == null)









 return false;









 if (!(obj instanceof SummaryEdge))









 return false;









 SummaryEdge other = (SummaryEdge) obj;









 if (sourceFact == null) {









 if (other.sourceFact != null)









 return false;









 } else if (!sourceFact.equals(other.sourceFact))









 return false;









 if (targetFact == null) {









 if (other.targetFact != null)









 return false;









 } else if (!targetFact.equals(other.targetFact))









 return false;









 if (targetStmt == null) {









 if (other.targetStmt != null)









 return false;









 } else if (!targetStmt.equals(other.targetStmt))









 return false;









 return true;









 }



















 public D getSourceFact() {









 return sourceFact;









 }









 









 public D getTargetFact() {









 return targetFact;









 }









 









 public N getTargetStmt() {









 return targetStmt;









 }









 









}













src/heros/alias/SummaryEdge.java



0 → 100644







View file @ 3b064347








src/heros/alias/SummaryEdge.java



0 → 100644









View file @ 3b064347


3b064347











/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros.alias;



















public class SummaryEdge<D, N> {



















 private D sourceFact;









 private N targetStmt;









 private D targetFact;









 









 public SummaryEdge(D sourceFact, N targetStmt, D targetFact) {









 this.sourceFact = sourceFact;









 this.targetStmt = targetStmt;









 this.targetFact = targetFact;









 }



















 @Override









 public int hashCode() {









 final int prime = 31;









 int result = 1;









 result = prime * result + ((sourceFact == null) ? 0 : sourceFact.hashCode());









 result = prime * result + ((targetFact == null) ? 0 : targetFact.hashCode());









 result = prime * result + ((targetStmt == null) ? 0 : targetStmt.hashCode());









 return result;









 }









 









 @Override









 public boolean equals(Object obj) {









 if (this == obj)









 return true;









 if (obj == null)









 return false;









 if (!(obj instanceof SummaryEdge))









 return false;









 SummaryEdge other = (SummaryEdge) obj;









 if (sourceFact == null) {









 if (other.sourceFact != null)









 return false;









 } else if (!sourceFact.equals(other.sourceFact))









 return false;









 if (targetFact == null) {









 if (other.targetFact != null)









 return false;









 } else if (!targetFact.equals(other.targetFact))









 return false;









 if (targetStmt == null) {









 if (other.targetStmt != null)









 return false;









 } else if (!targetStmt.equals(other.targetStmt))









 return false;









 return true;









 }



















 public D getSourceFact() {









 return sourceFact;









 }









 









 public D getTargetFact() {









 return targetFact;









 }









 









 public N getTargetStmt() {









 return targetStmt;









 }









 









}















/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros.alias;



















public class SummaryEdge<D, N> {



















 private D sourceFact;









 private N targetStmt;









 private D targetFact;









 









 public SummaryEdge(D sourceFact, N targetStmt, D targetFact) {









 this.sourceFact = sourceFact;









 this.targetStmt = targetStmt;









 this.targetFact = targetFact;









 }



















 @Override









 public int hashCode() {









 final int prime = 31;









 int result = 1;









 result = prime * result + ((sourceFact == null) ? 0 : sourceFact.hashCode());









 result = prime * result + ((targetFact == null) ? 0 : targetFact.hashCode());









 result = prime * result + ((targetStmt == null) ? 0 : targetStmt.hashCode());









 return result;









 }









 









 @Override









 public boolean equals(Object obj) {









 if (this == obj)









 return true;









 if (obj == null)









 return false;









 if (!(obj instanceof SummaryEdge))









 return false;









 SummaryEdge other = (SummaryEdge) obj;









 if (sourceFact == null) {









 if (other.sourceFact != null)









 return false;









 } else if (!sourceFact.equals(other.sourceFact))









 return false;









 if (targetFact == null) {









 if (other.targetFact != null)









 return false;









 } else if (!targetFact.equals(other.targetFact))









 return false;









 if (targetStmt == null) {









 if (other.targetStmt != null)









 return false;









 } else if (!targetStmt.equals(other.targetStmt))









 return false;









 return true;









 }



















 public D getSourceFact() {









 return sourceFact;









 }









 









 public D getTargetFact() {









 return targetFact;









 }









 









 public N getTargetStmt() {









 return targetStmt;









 }









 









}












/*******************************************************************************









 * Copyright (c) 2014 Johannes Lerch.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Johannes Lerch - initial API and implementation









 ******************************************************************************/









package heros.alias;



















public class SummaryEdge<D, N> {



















 private D sourceFact;









 private N targetStmt;









 private D targetFact;









 









 public SummaryEdge(D sourceFact, N targetStmt, D targetFact) {









 this.sourceFact = sourceFact;









 this.targetStmt = targetStmt;









 this.targetFact = targetFact;









 }



















 @Override









 public int hashCode() {









 final int prime = 31;









 int result = 1;









 result = prime * result + ((sourceFact == null) ? 0 : sourceFact.hashCode());









 result = prime * result + ((targetFact == null) ? 0 : targetFact.hashCode());









 result = prime * result + ((targetStmt == null) ? 0 : targetStmt.hashCode());









 return result;









 }









 









 @Override









 public boolean equals(Object obj) {









 if (this == obj)









 return true;









 if (obj == null)









 return false;









 if (!(obj instanceof SummaryEdge))









 return false;









 SummaryEdge other = (SummaryEdge) obj;









 if (sourceFact == null) {









 if (other.sourceFact != null)









 return false;









 } else if (!sourceFact.equals(other.sourceFact))









 return false;









 if (targetFact == null) {









 if (other.targetFact != null)









 return false;









 } else if (!targetFact.equals(other.targetFact))









 return false;









 if (targetStmt == null) {









 if (other.targetStmt != null)









 return false;









 } else if (!targetStmt.equals(other.targetStmt))









 return false;









 return true;









 }



















 public D getSourceFact() {









 return sourceFact;









 }









 









 public D getTargetFact() {









 return targetFact;









 }









 









 public N getTargetStmt() {









 return targetStmt;









 }









 









}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2014 Johannes Lerch. * Copyright (c) 2014 Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;public class SummaryEdge<D, N> {publicclassSummaryEdge<D,N>{ private D sourceFact;privateDsourceFact; private N targetStmt;privateNtargetStmt; private D targetFact;privateDtargetFact;  public SummaryEdge(D sourceFact, N targetStmt, D targetFact) {publicSummaryEdge(DsourceFact,NtargetStmt,DtargetFact){ this.sourceFact = sourceFact;this.sourceFact=sourceFact; this.targetStmt = targetStmt;this.targetStmt=targetStmt; this.targetFact = targetFact;this.targetFact=targetFact; }} @Override@Override public int hashCode() {publicinthashCode(){ final int prime = 31;finalintprime=31; int result = 1;intresult=1; result = prime * result + ((sourceFact == null) ? 0 : sourceFact.hashCode());result=prime*result+((sourceFact==null)?0:sourceFact.hashCode()); result = prime * result + ((targetFact == null) ? 0 : targetFact.hashCode());result=prime*result+((targetFact==null)?0:targetFact.hashCode()); result = prime * result + ((targetStmt == null) ? 0 : targetStmt.hashCode());result=prime*result+((targetStmt==null)?0:targetStmt.hashCode()); return result;returnresult; }}  @Override@Override public boolean equals(Object obj) {publicbooleanequals(Objectobj){ if (this == obj)if(this==obj) return true;returntrue; if (obj == null)if(obj==null) return false;returnfalse; if (!(obj instanceof SummaryEdge))if(!(objinstanceofSummaryEdge)) return false;returnfalse; SummaryEdge other = (SummaryEdge) obj;SummaryEdgeother=(SummaryEdge)obj; if (sourceFact == null) {if(sourceFact==null){ if (other.sourceFact != null)if(other.sourceFact!=null) return false;returnfalse; } else if (!sourceFact.equals(other.sourceFact))}elseif(!sourceFact.equals(other.sourceFact)) return false;returnfalse; if (targetFact == null) {if(targetFact==null){ if (other.targetFact != null)if(other.targetFact!=null) return false;returnfalse; } else if (!targetFact.equals(other.targetFact))}elseif(!targetFact.equals(other.targetFact)) return false;returnfalse; if (targetStmt == null) {if(targetStmt==null){ if (other.targetStmt != null)if(other.targetStmt!=null) return false;returnfalse; } else if (!targetStmt.equals(other.targetStmt))}elseif(!targetStmt.equals(other.targetStmt)) return false;returnfalse; return true;returntrue; }} public D getSourceFact() {publicDgetSourceFact(){ return sourceFact;returnsourceFact; }}  public D getTargetFact() {publicDgetTargetFact(){ return targetFact;returntargetFact; }}  public N getTargetStmt() {publicNgetTargetStmt(){ return targetStmt;returntargetStmt; }} }}








test/heros/alias/AccessPathUtilTest.java



0 → 100644







View file @ 3b064347














/*******************************************************************************









 * Copyright (c) 2014 Eric Bodden.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Eric Bodden - initial API and implementation









 ******************************************************************************/









package heros.alias;



















import static org.junit.Assert.assertEquals;









import static org.junit.Assert.assertFalse;









import static org.junit.Assert.assertTrue;



















import org.junit.Test;



















public class AccessPathUtilTest {



















 @Test









 public void testBaseValuePrefixOfFieldAccess() {









 assertTrue(AccessPathUtil.isPrefixOf(new Fact("a"), new Fact("a.f")));









 assertFalse(AccessPathUtil.isPrefixOf(new Fact("a.f"), new Fact("a")));









 }









 









 @Test









 public void testBaseValueIdentity() {









 assertTrue(AccessPathUtil.isPrefixOf(new Fact("a"), new Fact("a")));









 }









 









 @Test









 public void testFieldAccessPrefixOfFieldAccess() {









 assertTrue(AccessPathUtil.isPrefixOf(new Fact("a.b"), new Fact("a.b.c")));









 assertFalse(AccessPathUtil.isPrefixOf(new Fact("a.b.c"), new Fact("a.b")));









 }









 









 @Test









 public void testAbstractedSummary() {









 assertEquals(new Fact("z.f"), AccessPathUtil.applyAbstractedSummary(new Fact("a.f"), new SummaryEdge<>(new Fact("a"), null, new Fact("z"))));









 }









 









 @Test









 public void testAbstractedFieldAccessSummary() {









 assertEquals(new Fact("z.b.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.b.c"), new SummaryEdge<>(new Fact("a.b"), null, new Fact("z.b"))));









 }









 









 @Test









 public void testSummaryIntroducesFieldAccess() {









 assertEquals(new Fact("z.b.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.c"), new SummaryEdge<>(new Fact("a"), null, new Fact("z.b"))));









 }









 









 @Test









 public void testSummaryRemovesFieldAccess() {









 assertEquals(new Fact("z.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.b.c"), new SummaryEdge<>(new Fact("a.b"), null, new Fact("z"))));









 }









 









 @Test









 public void testNonAbstractedSummary() {









 assertEquals(new Fact("z"), AccessPathUtil.applyAbstractedSummary(new Fact("a"), new SummaryEdge<>(new Fact("a"), null, new Fact("z"))));









 }









}













test/heros/alias/AccessPathUtilTest.java



0 → 100644







View file @ 3b064347








test/heros/alias/AccessPathUtilTest.java



0 → 100644









View file @ 3b064347


3b064347











/*******************************************************************************









 * Copyright (c) 2014 Eric Bodden.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Eric Bodden - initial API and implementation









 ******************************************************************************/









package heros.alias;



















import static org.junit.Assert.assertEquals;









import static org.junit.Assert.assertFalse;









import static org.junit.Assert.assertTrue;



















import org.junit.Test;



















public class AccessPathUtilTest {



















 @Test









 public void testBaseValuePrefixOfFieldAccess() {









 assertTrue(AccessPathUtil.isPrefixOf(new Fact("a"), new Fact("a.f")));









 assertFalse(AccessPathUtil.isPrefixOf(new Fact("a.f"), new Fact("a")));









 }









 









 @Test









 public void testBaseValueIdentity() {









 assertTrue(AccessPathUtil.isPrefixOf(new Fact("a"), new Fact("a")));









 }









 









 @Test









 public void testFieldAccessPrefixOfFieldAccess() {









 assertTrue(AccessPathUtil.isPrefixOf(new Fact("a.b"), new Fact("a.b.c")));









 assertFalse(AccessPathUtil.isPrefixOf(new Fact("a.b.c"), new Fact("a.b")));









 }









 









 @Test









 public void testAbstractedSummary() {









 assertEquals(new Fact("z.f"), AccessPathUtil.applyAbstractedSummary(new Fact("a.f"), new SummaryEdge<>(new Fact("a"), null, new Fact("z"))));









 }









 









 @Test









 public void testAbstractedFieldAccessSummary() {









 assertEquals(new Fact("z.b.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.b.c"), new SummaryEdge<>(new Fact("a.b"), null, new Fact("z.b"))));









 }









 









 @Test









 public void testSummaryIntroducesFieldAccess() {









 assertEquals(new Fact("z.b.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.c"), new SummaryEdge<>(new Fact("a"), null, new Fact("z.b"))));









 }









 









 @Test









 public void testSummaryRemovesFieldAccess() {









 assertEquals(new Fact("z.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.b.c"), new SummaryEdge<>(new Fact("a.b"), null, new Fact("z"))));









 }









 









 @Test









 public void testNonAbstractedSummary() {









 assertEquals(new Fact("z"), AccessPathUtil.applyAbstractedSummary(new Fact("a"), new SummaryEdge<>(new Fact("a"), null, new Fact("z"))));









 }









}















/*******************************************************************************









 * Copyright (c) 2014 Eric Bodden.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Eric Bodden - initial API and implementation









 ******************************************************************************/









package heros.alias;



















import static org.junit.Assert.assertEquals;









import static org.junit.Assert.assertFalse;









import static org.junit.Assert.assertTrue;



















import org.junit.Test;



















public class AccessPathUtilTest {



















 @Test









 public void testBaseValuePrefixOfFieldAccess() {









 assertTrue(AccessPathUtil.isPrefixOf(new Fact("a"), new Fact("a.f")));









 assertFalse(AccessPathUtil.isPrefixOf(new Fact("a.f"), new Fact("a")));









 }









 









 @Test









 public void testBaseValueIdentity() {









 assertTrue(AccessPathUtil.isPrefixOf(new Fact("a"), new Fact("a")));









 }









 









 @Test









 public void testFieldAccessPrefixOfFieldAccess() {









 assertTrue(AccessPathUtil.isPrefixOf(new Fact("a.b"), new Fact("a.b.c")));









 assertFalse(AccessPathUtil.isPrefixOf(new Fact("a.b.c"), new Fact("a.b")));









 }









 









 @Test









 public void testAbstractedSummary() {









 assertEquals(new Fact("z.f"), AccessPathUtil.applyAbstractedSummary(new Fact("a.f"), new SummaryEdge<>(new Fact("a"), null, new Fact("z"))));









 }









 









 @Test









 public void testAbstractedFieldAccessSummary() {









 assertEquals(new Fact("z.b.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.b.c"), new SummaryEdge<>(new Fact("a.b"), null, new Fact("z.b"))));









 }









 









 @Test









 public void testSummaryIntroducesFieldAccess() {









 assertEquals(new Fact("z.b.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.c"), new SummaryEdge<>(new Fact("a"), null, new Fact("z.b"))));









 }









 









 @Test









 public void testSummaryRemovesFieldAccess() {









 assertEquals(new Fact("z.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.b.c"), new SummaryEdge<>(new Fact("a.b"), null, new Fact("z"))));









 }









 









 @Test









 public void testNonAbstractedSummary() {









 assertEquals(new Fact("z"), AccessPathUtil.applyAbstractedSummary(new Fact("a"), new SummaryEdge<>(new Fact("a"), null, new Fact("z"))));









 }









}












/*******************************************************************************









 * Copyright (c) 2014 Eric Bodden.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Eric Bodden - initial API and implementation









 ******************************************************************************/









package heros.alias;



















import static org.junit.Assert.assertEquals;









import static org.junit.Assert.assertFalse;









import static org.junit.Assert.assertTrue;



















import org.junit.Test;



















public class AccessPathUtilTest {



















 @Test









 public void testBaseValuePrefixOfFieldAccess() {









 assertTrue(AccessPathUtil.isPrefixOf(new Fact("a"), new Fact("a.f")));









 assertFalse(AccessPathUtil.isPrefixOf(new Fact("a.f"), new Fact("a")));









 }









 









 @Test









 public void testBaseValueIdentity() {









 assertTrue(AccessPathUtil.isPrefixOf(new Fact("a"), new Fact("a")));









 }









 









 @Test









 public void testFieldAccessPrefixOfFieldAccess() {









 assertTrue(AccessPathUtil.isPrefixOf(new Fact("a.b"), new Fact("a.b.c")));









 assertFalse(AccessPathUtil.isPrefixOf(new Fact("a.b.c"), new Fact("a.b")));









 }









 









 @Test









 public void testAbstractedSummary() {









 assertEquals(new Fact("z.f"), AccessPathUtil.applyAbstractedSummary(new Fact("a.f"), new SummaryEdge<>(new Fact("a"), null, new Fact("z"))));









 }









 









 @Test









 public void testAbstractedFieldAccessSummary() {









 assertEquals(new Fact("z.b.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.b.c"), new SummaryEdge<>(new Fact("a.b"), null, new Fact("z.b"))));









 }









 









 @Test









 public void testSummaryIntroducesFieldAccess() {









 assertEquals(new Fact("z.b.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.c"), new SummaryEdge<>(new Fact("a"), null, new Fact("z.b"))));









 }









 









 @Test









 public void testSummaryRemovesFieldAccess() {









 assertEquals(new Fact("z.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.b.c"), new SummaryEdge<>(new Fact("a.b"), null, new Fact("z"))));









 }









 









 @Test









 public void testNonAbstractedSummary() {









 assertEquals(new Fact("z"), AccessPathUtil.applyAbstractedSummary(new Fact("a"), new SummaryEdge<>(new Fact("a"), null, new Fact("z"))));









 }









}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2014 Eric Bodden. * Copyright (c) 2014 Eric Bodden. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Eric Bodden - initial API and implementation *     Eric Bodden - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;import static org.junit.Assert.assertEquals;importstaticorg.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;importstaticorg.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;importstaticorg.junit.Assert.assertTrue;import org.junit.Test;importorg.junit.Test;public class AccessPathUtilTest {publicclassAccessPathUtilTest{ @Test@Test public void testBaseValuePrefixOfFieldAccess() {publicvoidtestBaseValuePrefixOfFieldAccess(){ assertTrue(AccessPathUtil.isPrefixOf(new Fact("a"), new Fact("a.f")));assertTrue(AccessPathUtil.isPrefixOf(newFact("a"),newFact("a.f"))); assertFalse(AccessPathUtil.isPrefixOf(new Fact("a.f"), new Fact("a")));assertFalse(AccessPathUtil.isPrefixOf(newFact("a.f"),newFact("a"))); }}  @Test@Test public void testBaseValueIdentity() {publicvoidtestBaseValueIdentity(){ assertTrue(AccessPathUtil.isPrefixOf(new Fact("a"), new Fact("a")));assertTrue(AccessPathUtil.isPrefixOf(newFact("a"),newFact("a"))); }}  @Test@Test public void testFieldAccessPrefixOfFieldAccess() {publicvoidtestFieldAccessPrefixOfFieldAccess(){ assertTrue(AccessPathUtil.isPrefixOf(new Fact("a.b"), new Fact("a.b.c")));assertTrue(AccessPathUtil.isPrefixOf(newFact("a.b"),newFact("a.b.c"))); assertFalse(AccessPathUtil.isPrefixOf(new Fact("a.b.c"), new Fact("a.b")));assertFalse(AccessPathUtil.isPrefixOf(newFact("a.b.c"),newFact("a.b"))); }}  @Test@Test public void testAbstractedSummary() {publicvoidtestAbstractedSummary(){ assertEquals(new Fact("z.f"), AccessPathUtil.applyAbstractedSummary(new Fact("a.f"), new SummaryEdge<>(new Fact("a"), null, new Fact("z"))));assertEquals(newFact("z.f"),AccessPathUtil.applyAbstractedSummary(newFact("a.f"),newSummaryEdge<>(newFact("a"),null,newFact("z")))); }}  @Test@Test public void testAbstractedFieldAccessSummary() {publicvoidtestAbstractedFieldAccessSummary(){ assertEquals(new Fact("z.b.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.b.c"), new SummaryEdge<>(new Fact("a.b"), null, new Fact("z.b"))));assertEquals(newFact("z.b.c"),AccessPathUtil.applyAbstractedSummary(newFact("a.b.c"),newSummaryEdge<>(newFact("a.b"),null,newFact("z.b")))); }}  @Test@Test public void testSummaryIntroducesFieldAccess() {publicvoidtestSummaryIntroducesFieldAccess(){ assertEquals(new Fact("z.b.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.c"), new SummaryEdge<>(new Fact("a"), null, new Fact("z.b"))));assertEquals(newFact("z.b.c"),AccessPathUtil.applyAbstractedSummary(newFact("a.c"),newSummaryEdge<>(newFact("a"),null,newFact("z.b")))); }}  @Test@Test public void testSummaryRemovesFieldAccess() {publicvoidtestSummaryRemovesFieldAccess(){ assertEquals(new Fact("z.c"), AccessPathUtil.applyAbstractedSummary(new Fact("a.b.c"), new SummaryEdge<>(new Fact("a.b"), null, new Fact("z"))));assertEquals(newFact("z.c"),AccessPathUtil.applyAbstractedSummary(newFact("a.b.c"),newSummaryEdge<>(newFact("a.b"),null,newFact("z")))); }}  @Test@Test public void testNonAbstractedSummary() {publicvoidtestNonAbstractedSummary(){ assertEquals(new Fact("z"), AccessPathUtil.applyAbstractedSummary(new Fact("a"), new SummaryEdge<>(new Fact("a"), null, new Fact("z"))));assertEquals(newFact("z"),AccessPathUtil.applyAbstractedSummary(newFact("a"),newSummaryEdge<>(newFact("a"),null,newFact("z")))); }}}}








test/heros/alias/FieldSensitiveSolverTest.java








View file @ 3b064347








...@@ -53,11 +53,31 @@ public class FieldSensitiveSolverTest {
...@@ -53,11 +53,31 @@ public class FieldSensitiveSolverTest {






 }





 }







 





 







 @Test





 @Test







 public void hold() {





 public void reuseSummaryForBaseValue() {







 helper.method("bar", 





 helper.method("bar", 







 startPoints("a"),





 startPoints("a"),







 normalStmt("a").succ("b", flow("0", "1")),





 normalStmt("a").succ("b", flow("0", "1")),







 writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),





 writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),









 callSite("c").calls("foo", flow("2.field", "3.field")).retSite("retC", flow("2.field", "2.field")));









 









 helper.method("foo",startPoints("d"),









 normalStmt("d").succ("e", flow("3", "4")),









 normalStmt("e").succ("f", flow("4","4")),









 exitStmt("f").returns(over("c"), to("retC"), flow("4.field", "5.field")).returns(over("g"), to("retG"), flow("4.anotherField", "6.anotherField")));



















 helper.method("xyz", 









 startPoints("g"),









 callSite("g").calls("foo", flow("0", "3.anotherField")).retSite("retG", kill("0")));









 









 helper.runSolver(false, "a", "g");









 }









 









 @Test









 public void hold() {









 helper.method("bar", 









 startPoints("a"),









 normalStmt("a").succ("b", flow("0", "1")),









 writeFieldStmt("b", "field").succ("c", flow("1", "2.field")),







 callSite("c").calls("foo", flow("2.field", "3.field")));





 callSite("c").calls("foo", flow("2.field", "3.field")));







 





 







 helper.method("foo",startPoints("d"),





 helper.method("foo",startPoints("d"),



...@@ -71,11 +91,11 @@ public class FieldSensitiveSolverTest {
...@@ -71,11 +91,11 @@ public class FieldSensitiveSolverTest {






 helper.method("bar", 





 helper.method("bar", 







 startPoints("a"),





 startPoints("a"),







 normalStmt("a").succ("b", flow("0", "1")),





 normalStmt("a").succ("b", flow("0", "1")),







 writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),





 writeFieldStmt("b", "field").succ("c", flow("1", "2.field")),







 callSite("c").calls("foo", flow("2.field", "3.field")));





 callSite("c").calls("foo", flow("2.field", "3.field")));







 





 







 helper.method("foo",startPoints("d"),





 helper.method("foo",startPoints("d"),







 readFieldStmt("d", "notfield").succ("e", flow("3", "3"), flow("3.notfield")),





 readFieldStmt("d", "notfield").succ("e", flow("3", "3"), kill("3.notfield")),







 normalStmt("e").succ("f", flow("3","4")));





 normalStmt("e").succ("f", flow("3","4")));







 





 







 helper.method("xyz",





 helper.method("xyz",



......













test/heros/alias/FieldSensitiveSolverTest.java








View file @ 3b064347








test/heros/alias/FieldSensitiveSolverTest.java










View file @ 3b064347


3b064347





...@@ -53,11 +53,31 @@ public class FieldSensitiveSolverTest {
...@@ -53,11 +53,31 @@ public class FieldSensitiveSolverTest {






 }





 }







 





 







 @Test





 @Test







 public void hold() {





 public void reuseSummaryForBaseValue() {







 helper.method("bar", 





 helper.method("bar", 







 startPoints("a"),





 startPoints("a"),







 normalStmt("a").succ("b", flow("0", "1")),





 normalStmt("a").succ("b", flow("0", "1")),







 writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),





 writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),









 callSite("c").calls("foo", flow("2.field", "3.field")).retSite("retC", flow("2.field", "2.field")));









 









 helper.method("foo",startPoints("d"),









 normalStmt("d").succ("e", flow("3", "4")),









 normalStmt("e").succ("f", flow("4","4")),









 exitStmt("f").returns(over("c"), to("retC"), flow("4.field", "5.field")).returns(over("g"), to("retG"), flow("4.anotherField", "6.anotherField")));



















 helper.method("xyz", 









 startPoints("g"),









 callSite("g").calls("foo", flow("0", "3.anotherField")).retSite("retG", kill("0")));









 









 helper.runSolver(false, "a", "g");









 }









 









 @Test









 public void hold() {









 helper.method("bar", 









 startPoints("a"),









 normalStmt("a").succ("b", flow("0", "1")),









 writeFieldStmt("b", "field").succ("c", flow("1", "2.field")),







 callSite("c").calls("foo", flow("2.field", "3.field")));





 callSite("c").calls("foo", flow("2.field", "3.field")));







 





 







 helper.method("foo",startPoints("d"),





 helper.method("foo",startPoints("d"),



...@@ -71,11 +91,11 @@ public class FieldSensitiveSolverTest {
...@@ -71,11 +91,11 @@ public class FieldSensitiveSolverTest {






 helper.method("bar", 





 helper.method("bar", 







 startPoints("a"),





 startPoints("a"),







 normalStmt("a").succ("b", flow("0", "1")),





 normalStmt("a").succ("b", flow("0", "1")),







 writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),





 writeFieldStmt("b", "field").succ("c", flow("1", "2.field")),







 callSite("c").calls("foo", flow("2.field", "3.field")));





 callSite("c").calls("foo", flow("2.field", "3.field")));







 





 







 helper.method("foo",startPoints("d"),





 helper.method("foo",startPoints("d"),







 readFieldStmt("d", "notfield").succ("e", flow("3", "3"), flow("3.notfield")),





 readFieldStmt("d", "notfield").succ("e", flow("3", "3"), kill("3.notfield")),







 normalStmt("e").succ("f", flow("3","4")));





 normalStmt("e").succ("f", flow("3","4")));







 





 







 helper.method("xyz",





 helper.method("xyz",



......









...@@ -53,11 +53,31 @@ public class FieldSensitiveSolverTest {
...@@ -53,11 +53,31 @@ public class FieldSensitiveSolverTest {






 }





 }







 





 







 @Test





 @Test







 public void hold() {





 public void reuseSummaryForBaseValue() {







 helper.method("bar", 





 helper.method("bar", 







 startPoints("a"),





 startPoints("a"),







 normalStmt("a").succ("b", flow("0", "1")),





 normalStmt("a").succ("b", flow("0", "1")),







 writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),





 writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),









 callSite("c").calls("foo", flow("2.field", "3.field")).retSite("retC", flow("2.field", "2.field")));









 









 helper.method("foo",startPoints("d"),









 normalStmt("d").succ("e", flow("3", "4")),









 normalStmt("e").succ("f", flow("4","4")),









 exitStmt("f").returns(over("c"), to("retC"), flow("4.field", "5.field")).returns(over("g"), to("retG"), flow("4.anotherField", "6.anotherField")));



















 helper.method("xyz", 









 startPoints("g"),









 callSite("g").calls("foo", flow("0", "3.anotherField")).retSite("retG", kill("0")));









 









 helper.runSolver(false, "a", "g");









 }









 









 @Test









 public void hold() {









 helper.method("bar", 









 startPoints("a"),









 normalStmt("a").succ("b", flow("0", "1")),









 writeFieldStmt("b", "field").succ("c", flow("1", "2.field")),







 callSite("c").calls("foo", flow("2.field", "3.field")));





 callSite("c").calls("foo", flow("2.field", "3.field")));







 





 







 helper.method("foo",startPoints("d"),





 helper.method("foo",startPoints("d"),



...@@ -71,11 +91,11 @@ public class FieldSensitiveSolverTest {
...@@ -71,11 +91,11 @@ public class FieldSensitiveSolverTest {






 helper.method("bar", 





 helper.method("bar", 







 startPoints("a"),





 startPoints("a"),







 normalStmt("a").succ("b", flow("0", "1")),





 normalStmt("a").succ("b", flow("0", "1")),







 writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),





 writeFieldStmt("b", "field").succ("c", flow("1", "2.field")),







 callSite("c").calls("foo", flow("2.field", "3.field")));





 callSite("c").calls("foo", flow("2.field", "3.field")));







 





 







 helper.method("foo",startPoints("d"),





 helper.method("foo",startPoints("d"),







 readFieldStmt("d", "notfield").succ("e", flow("3", "3"), flow("3.notfield")),





 readFieldStmt("d", "notfield").succ("e", flow("3", "3"), kill("3.notfield")),







 normalStmt("e").succ("f", flow("3","4")));





 normalStmt("e").succ("f", flow("3","4")));







 





 







 helper.method("xyz",





 helper.method("xyz",



......






...@@ -53,11 +53,31 @@ public class FieldSensitiveSolverTest {
...@@ -53,11 +53,31 @@ public class FieldSensitiveSolverTest {






 }





 }







 





 







 @Test





 @Test







 public void hold() {





 public void reuseSummaryForBaseValue() {







 helper.method("bar", 





 helper.method("bar", 







 startPoints("a"),





 startPoints("a"),







 normalStmt("a").succ("b", flow("0", "1")),





 normalStmt("a").succ("b", flow("0", "1")),







 writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),





 writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),









 callSite("c").calls("foo", flow("2.field", "3.field")).retSite("retC", flow("2.field", "2.field")));









 









 helper.method("foo",startPoints("d"),









 normalStmt("d").succ("e", flow("3", "4")),









 normalStmt("e").succ("f", flow("4","4")),









 exitStmt("f").returns(over("c"), to("retC"), flow("4.field", "5.field")).returns(over("g"), to("retG"), flow("4.anotherField", "6.anotherField")));



















 helper.method("xyz", 









 startPoints("g"),









 callSite("g").calls("foo", flow("0", "3.anotherField")).retSite("retG", kill("0")));









 









 helper.runSolver(false, "a", "g");









 }









 









 @Test









 public void hold() {









 helper.method("bar", 









 startPoints("a"),









 normalStmt("a").succ("b", flow("0", "1")),









 writeFieldStmt("b", "field").succ("c", flow("1", "2.field")),







 callSite("c").calls("foo", flow("2.field", "3.field")));





 callSite("c").calls("foo", flow("2.field", "3.field")));







 





 







 helper.method("foo",startPoints("d"),





 helper.method("foo",startPoints("d"),



...@@ -71,11 +91,11 @@ public class FieldSensitiveSolverTest {
...@@ -71,11 +91,11 @@ public class FieldSensitiveSolverTest {






 helper.method("bar", 





 helper.method("bar", 







 startPoints("a"),





 startPoints("a"),







 normalStmt("a").succ("b", flow("0", "1")),





 normalStmt("a").succ("b", flow("0", "1")),







 writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),





 writeFieldStmt("b", "field").succ("c", flow("1", "2.field")),







 callSite("c").calls("foo", flow("2.field", "3.field")));





 callSite("c").calls("foo", flow("2.field", "3.field")));







 





 







 helper.method("foo",startPoints("d"),





 helper.method("foo",startPoints("d"),







 readFieldStmt("d", "notfield").succ("e", flow("3", "3"), flow("3.notfield")),





 readFieldStmt("d", "notfield").succ("e", flow("3", "3"), kill("3.notfield")),







 normalStmt("e").succ("f", flow("3","4")));





 normalStmt("e").succ("f", flow("3","4")));







 





 







 helper.method("xyz",





 helper.method("xyz",



......


 }} }}   @Test@Test @Test@Test public void hold() {publicvoidholdhold(){ public void reuseSummaryForBaseValue() {publicvoidreuseSummaryForBaseValuereuseSummaryForBaseValue(){ helper.method("bar", helper.method("bar", helper.method("bar", helper.method("bar", startPoints("a"),startPoints("a"), startPoints("a"),startPoints("a"), normalStmt("a").succ("b", flow("0", "1")),normalStmt("a").succ("b",flow("0","1")), normalStmt("a").succ("b", flow("0", "1")),normalStmt("a").succ("b",flow("0","1")), writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),writeFieldStmt("b","3").succ("c",flow("1","2.field")), writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),writeFieldStmt("b","3").succ("c",flow("1","2.field")), callSite("c").calls("foo", flow("2.field", "3.field")).retSite("retC", flow("2.field", "2.field")));callSite("c").calls("foo",flow("2.field","3.field")).retSite("retC",flow("2.field","2.field")));  helper.method("foo",startPoints("d"),helper.method("foo",startPoints("d"), normalStmt("d").succ("e", flow("3", "4")),normalStmt("d").succ("e",flow("3","4")), normalStmt("e").succ("f", flow("4","4")),normalStmt("e").succ("f",flow("4","4")), exitStmt("f").returns(over("c"), to("retC"), flow("4.field", "5.field")).returns(over("g"), to("retG"), flow("4.anotherField", "6.anotherField")));exitStmt("f").returns(over("c"),to("retC"),flow("4.field","5.field")).returns(over("g"),to("retG"),flow("4.anotherField","6.anotherField"))); helper.method("xyz", helper.method("xyz", startPoints("g"),startPoints("g"), callSite("g").calls("foo", flow("0", "3.anotherField")).retSite("retG", kill("0")));callSite("g").calls("foo",flow("0","3.anotherField")).retSite("retG",kill("0")));  helper.runSolver(false, "a", "g");helper.runSolver(false,"a","g"); }}  @Test@Test public void hold() {publicvoidhold(){ helper.method("bar", helper.method("bar", startPoints("a"),startPoints("a"), normalStmt("a").succ("b", flow("0", "1")),normalStmt("a").succ("b",flow("0","1")), writeFieldStmt("b", "field").succ("c", flow("1", "2.field")),writeFieldStmt("b","field").succ("c",flow("1","2.field")), callSite("c").calls("foo", flow("2.field", "3.field")));callSite("c").calls("foo",flow("2.field","3.field"))); callSite("c").calls("foo", flow("2.field", "3.field")));callSite("c").calls("foo",flow("2.field","3.field")));   helper.method("foo",startPoints("d"),helper.method("foo",startPoints("d"), helper.method("foo",startPoints("d"),helper.method("foo",startPoints("d"), helper.method("bar", helper.method("bar", helper.method("bar", helper.method("bar", startPoints("a"),startPoints("a"), startPoints("a"),startPoints("a"), normalStmt("a").succ("b", flow("0", "1")),normalStmt("a").succ("b",flow("0","1")), normalStmt("a").succ("b", flow("0", "1")),normalStmt("a").succ("b",flow("0","1")), writeFieldStmt("b", "3").succ("c", flow("1", "2.field")),writeFieldStmt("b","3"3).succ("c",flow("1","2.field")), writeFieldStmt("b", "field").succ("c", flow("1", "2.field")),writeFieldStmt("b","field"field).succ("c",flow("1","2.field")), callSite("c").calls("foo", flow("2.field", "3.field")));callSite("c").calls("foo",flow("2.field","3.field"))); callSite("c").calls("foo", flow("2.field", "3.field")));callSite("c").calls("foo",flow("2.field","3.field")));   helper.method("foo",startPoints("d"),helper.method("foo",startPoints("d"), helper.method("foo",startPoints("d"),helper.method("foo",startPoints("d"), readFieldStmt("d", "notfield").succ("e", flow("3", "3"), flow("3.notfield")),readFieldStmt("d","notfield").succ("e",flow("3","3"),flowflow("3.notfield")), readFieldStmt("d", "notfield").succ("e", flow("3", "3"), kill("3.notfield")),readFieldStmt("d","notfield").succ("e",flow("3","3"),killkill("3.notfield")), normalStmt("e").succ("f", flow("3","4")));normalStmt("e").succ("f",flow("3","4"))); normalStmt("e").succ("f", flow("3","4")));normalStmt("e").succ("f",flow("3","4")));   helper.method("xyz",helper.method("xyz", helper.method("xyz",helper.method("xyz",









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






