



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


haskell






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Yu Liu haskell
Commits

cb6a3aaf















Commit
cb6a3aaf


authored
May 25, 2013
by


darlliu



Browse files




wot now







parent
7d732b74













Changes
4




Hide whitespace changes

Inline
Side-by-side















cybert/.nfs00000000a898a1c500005b23



0 → 100644




View file @ cb6a3aaf





File added













cybert/Cybert.hs








View file @ cb6a3aaf






......@@ -108,26 +108,26 @@ instance Show Cybert_entry where









 -- for each sample










{-end format and show routines-}










{-set operation and filtering routines-}










entriesBySym :: [Cybert_entry] -> String -> [Cybert_entry]










entriesBySym xs sym = filter (\x -> genesym x == (Just sym)) xs










entriesBySym :: String -> [Cybert_entry] -> [Cybert_entry]










entriesBySym sym xs = filter (\x -> genesym x == (Just sym)) xs





















entryByProbe :: [Cybert_entry] -> String -> Cybert_entry










entryByProbe xs p = head $ filter (\x -> probe x == p) xs










entryByProbe :: String -> [Cybert_entry] -> Cybert_entry










entryByProbe p xs = head $ filter (\x -> probe x == p) xs





















entriesBySecondaryRef :: [Cybert_entry] -> String -> String -> [Cybert_entry]










entriesBySecondaryRef xs tref ref = filter (\x -> (secondaryRefs x) M.! tref == ref) xs










entriesBySecondaryRef :: String -> String -> [Cybert_entry] -> [Cybert_entry]










entriesBySecondaryRef tref ref xs = filter (\x -> (secondaryRefs x) M.! tref == ref) xs










--lookup










entriesByFold :: [Cybert_entry] -> Float -> [Cybert_entry]










entriesByFold xs threshold = filter (\x ->pred $ mean x) xs where










entriesByFold :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByFold threshold xs = filter (\x ->pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b)= if length b < 2 then False










 else b!!1-b!!0 > threshold





















entriesByPval :: [Cybert_entry] -> Float -> [Cybert_entry]










entriesByPval xs threshold = filter (\x -> pval x < threshold) xs










entriesByPval :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByPval threshold xs = filter (\x -> pval x < threshold) xs





















entriesByUpDown :: [Cybert_entry] -> Bool -> [Cybert_entry]










entriesByUpDown xs val = filter (\x -> pred $ mean x) xs where










entriesByUpDown :: Bool -> [Cybert_entry] -> [Cybert_entry]










entriesByUpDown val xs = filter (\x -> pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b) = if length b < 2 then False










 else let bigger = (b!!1-b!!0>0)



......














cybert/cd271ex



0 → 100755




View file @ cb6a3aaf





File added













cybert/cd271ex.hs








View file @ cb6a3aaf













-- reproduce the analysis for CD271 pvals, functional stype










--










import Cybert










import Control.Monad










import Data.Maybe










extract:: Maybe [a] -> [a]










extract Nothing = []










extract (Just x) = x










main = do










 all_combined <- loadCybert "./CyberT_Output/unpaired/CD271_all_together0.txt"










 let all_up = (entriesByPval 0.05) $ (entriesByUpDown True) (extract all_combined)










 all_down = (entriesByPval 0.05) $ (entriesByUpDown False) (extract all_combined)










 ; exportGeneSyms all_up "all_up_refs.txt"










 ; exportGeneSyms all_down "all_down_refs.txt"










 ; onesM <- mapM loadCybert $ map ("./CyberT_Output/unpaired/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert ["./CyberT_Output/unpaired/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 let ones = map extract (all_combined:onesM)










 pairs = map extract (all_combined:pairsM)










 let up = map (entriesByPval 0.05) (map (entriesByUpDown True) pairs)










 down = map (entriesByPval 0.05) (map (entriesByUpDown False) pairs)










 five_up = map (filter (\x -> (foldr (\z acc -> acc + (length z)) 0 (map (filter (\y -> probe y == probe x)) up ) >= 5 ))) up










 five_down =map (filter (\x -> (foldr (\z acc -> acc + (length z)) 0 (map (filter (\y -> probe y == probe x)) down) >= 5 ))) down










 ; mapM (`exportGeneSyms` "five_up_refs.txt") five_up










 ; mapM (`exportGeneSyms` "five_down_refs.txt") five_down



























Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


haskell






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


haskell


H
H
haskell




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Yu Liu haskell
Commits

cb6a3aaf















Commit
cb6a3aaf


authored
May 25, 2013
by


darlliu



Browse files




wot now







parent
7d732b74













Changes
4




Hide whitespace changes

Inline
Side-by-side















cybert/.nfs00000000a898a1c500005b23



0 → 100644




View file @ cb6a3aaf





File added













cybert/Cybert.hs








View file @ cb6a3aaf






......@@ -108,26 +108,26 @@ instance Show Cybert_entry where









 -- for each sample










{-end format and show routines-}










{-set operation and filtering routines-}










entriesBySym :: [Cybert_entry] -> String -> [Cybert_entry]










entriesBySym xs sym = filter (\x -> genesym x == (Just sym)) xs










entriesBySym :: String -> [Cybert_entry] -> [Cybert_entry]










entriesBySym sym xs = filter (\x -> genesym x == (Just sym)) xs





















entryByProbe :: [Cybert_entry] -> String -> Cybert_entry










entryByProbe xs p = head $ filter (\x -> probe x == p) xs










entryByProbe :: String -> [Cybert_entry] -> Cybert_entry










entryByProbe p xs = head $ filter (\x -> probe x == p) xs





















entriesBySecondaryRef :: [Cybert_entry] -> String -> String -> [Cybert_entry]










entriesBySecondaryRef xs tref ref = filter (\x -> (secondaryRefs x) M.! tref == ref) xs










entriesBySecondaryRef :: String -> String -> [Cybert_entry] -> [Cybert_entry]










entriesBySecondaryRef tref ref xs = filter (\x -> (secondaryRefs x) M.! tref == ref) xs










--lookup










entriesByFold :: [Cybert_entry] -> Float -> [Cybert_entry]










entriesByFold xs threshold = filter (\x ->pred $ mean x) xs where










entriesByFold :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByFold threshold xs = filter (\x ->pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b)= if length b < 2 then False










 else b!!1-b!!0 > threshold





















entriesByPval :: [Cybert_entry] -> Float -> [Cybert_entry]










entriesByPval xs threshold = filter (\x -> pval x < threshold) xs










entriesByPval :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByPval threshold xs = filter (\x -> pval x < threshold) xs





















entriesByUpDown :: [Cybert_entry] -> Bool -> [Cybert_entry]










entriesByUpDown xs val = filter (\x -> pred $ mean x) xs where










entriesByUpDown :: Bool -> [Cybert_entry] -> [Cybert_entry]










entriesByUpDown val xs = filter (\x -> pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b) = if length b < 2 then False










 else let bigger = (b!!1-b!!0>0)



......














cybert/cd271ex



0 → 100755




View file @ cb6a3aaf





File added













cybert/cd271ex.hs








View file @ cb6a3aaf













-- reproduce the analysis for CD271 pvals, functional stype










--










import Cybert










import Control.Monad










import Data.Maybe










extract:: Maybe [a] -> [a]










extract Nothing = []










extract (Just x) = x










main = do










 all_combined <- loadCybert "./CyberT_Output/unpaired/CD271_all_together0.txt"










 let all_up = (entriesByPval 0.05) $ (entriesByUpDown True) (extract all_combined)










 all_down = (entriesByPval 0.05) $ (entriesByUpDown False) (extract all_combined)










 ; exportGeneSyms all_up "all_up_refs.txt"










 ; exportGeneSyms all_down "all_down_refs.txt"










 ; onesM <- mapM loadCybert $ map ("./CyberT_Output/unpaired/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert ["./CyberT_Output/unpaired/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 let ones = map extract (all_combined:onesM)










 pairs = map extract (all_combined:pairsM)










 let up = map (entriesByPval 0.05) (map (entriesByUpDown True) pairs)










 down = map (entriesByPval 0.05) (map (entriesByUpDown False) pairs)










 five_up = map (filter (\x -> (foldr (\z acc -> acc + (length z)) 0 (map (filter (\y -> probe y == probe x)) up ) >= 5 ))) up










 five_down =map (filter (\x -> (foldr (\z acc -> acc + (length z)) 0 (map (filter (\y -> probe y == probe x)) down) >= 5 ))) down










 ; mapM (`exportGeneSyms` "five_up_refs.txt") five_up










 ; mapM (`exportGeneSyms` "five_down_refs.txt") five_down



























Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Yu Liu haskell
Commits

cb6a3aaf







Open sidebar



Yu Liu haskell
Commits

cb6a3aaf




Open sidebar

Yu Liu haskell
Commits

cb6a3aaf


Yu LiuhaskellhaskellCommits
cb6a3aaf








Commit
cb6a3aaf


authored
May 25, 2013
by


darlliu



Browse files




wot now







parent
7d732b74













Changes
4




Hide whitespace changes

Inline
Side-by-side















cybert/.nfs00000000a898a1c500005b23



0 → 100644




View file @ cb6a3aaf





File added













cybert/Cybert.hs








View file @ cb6a3aaf






......@@ -108,26 +108,26 @@ instance Show Cybert_entry where









 -- for each sample










{-end format and show routines-}










{-set operation and filtering routines-}










entriesBySym :: [Cybert_entry] -> String -> [Cybert_entry]










entriesBySym xs sym = filter (\x -> genesym x == (Just sym)) xs










entriesBySym :: String -> [Cybert_entry] -> [Cybert_entry]










entriesBySym sym xs = filter (\x -> genesym x == (Just sym)) xs





















entryByProbe :: [Cybert_entry] -> String -> Cybert_entry










entryByProbe xs p = head $ filter (\x -> probe x == p) xs










entryByProbe :: String -> [Cybert_entry] -> Cybert_entry










entryByProbe p xs = head $ filter (\x -> probe x == p) xs





















entriesBySecondaryRef :: [Cybert_entry] -> String -> String -> [Cybert_entry]










entriesBySecondaryRef xs tref ref = filter (\x -> (secondaryRefs x) M.! tref == ref) xs










entriesBySecondaryRef :: String -> String -> [Cybert_entry] -> [Cybert_entry]










entriesBySecondaryRef tref ref xs = filter (\x -> (secondaryRefs x) M.! tref == ref) xs










--lookup










entriesByFold :: [Cybert_entry] -> Float -> [Cybert_entry]










entriesByFold xs threshold = filter (\x ->pred $ mean x) xs where










entriesByFold :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByFold threshold xs = filter (\x ->pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b)= if length b < 2 then False










 else b!!1-b!!0 > threshold





















entriesByPval :: [Cybert_entry] -> Float -> [Cybert_entry]










entriesByPval xs threshold = filter (\x -> pval x < threshold) xs










entriesByPval :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByPval threshold xs = filter (\x -> pval x < threshold) xs





















entriesByUpDown :: [Cybert_entry] -> Bool -> [Cybert_entry]










entriesByUpDown xs val = filter (\x -> pred $ mean x) xs where










entriesByUpDown :: Bool -> [Cybert_entry] -> [Cybert_entry]










entriesByUpDown val xs = filter (\x -> pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b) = if length b < 2 then False










 else let bigger = (b!!1-b!!0>0)



......














cybert/cd271ex



0 → 100755




View file @ cb6a3aaf





File added













cybert/cd271ex.hs








View file @ cb6a3aaf













-- reproduce the analysis for CD271 pvals, functional stype










--










import Cybert










import Control.Monad










import Data.Maybe










extract:: Maybe [a] -> [a]










extract Nothing = []










extract (Just x) = x










main = do










 all_combined <- loadCybert "./CyberT_Output/unpaired/CD271_all_together0.txt"










 let all_up = (entriesByPval 0.05) $ (entriesByUpDown True) (extract all_combined)










 all_down = (entriesByPval 0.05) $ (entriesByUpDown False) (extract all_combined)










 ; exportGeneSyms all_up "all_up_refs.txt"










 ; exportGeneSyms all_down "all_down_refs.txt"










 ; onesM <- mapM loadCybert $ map ("./CyberT_Output/unpaired/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert ["./CyberT_Output/unpaired/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 let ones = map extract (all_combined:onesM)










 pairs = map extract (all_combined:pairsM)










 let up = map (entriesByPval 0.05) (map (entriesByUpDown True) pairs)










 down = map (entriesByPval 0.05) (map (entriesByUpDown False) pairs)










 five_up = map (filter (\x -> (foldr (\z acc -> acc + (length z)) 0 (map (filter (\y -> probe y == probe x)) up ) >= 5 ))) up










 five_down =map (filter (\x -> (foldr (\z acc -> acc + (length z)) 0 (map (filter (\y -> probe y == probe x)) down) >= 5 ))) down










 ; mapM (`exportGeneSyms` "five_up_refs.txt") five_up










 ; mapM (`exportGeneSyms` "five_down_refs.txt") five_down



























Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
cb6a3aaf


authored
May 25, 2013
by


darlliu



Browse files




wot now







parent
7d732b74













Changes
4




Hide whitespace changes

Inline
Side-by-side















cybert/.nfs00000000a898a1c500005b23



0 → 100644




View file @ cb6a3aaf





File added













cybert/Cybert.hs








View file @ cb6a3aaf






......@@ -108,26 +108,26 @@ instance Show Cybert_entry where









 -- for each sample










{-end format and show routines-}










{-set operation and filtering routines-}










entriesBySym :: [Cybert_entry] -> String -> [Cybert_entry]










entriesBySym xs sym = filter (\x -> genesym x == (Just sym)) xs










entriesBySym :: String -> [Cybert_entry] -> [Cybert_entry]










entriesBySym sym xs = filter (\x -> genesym x == (Just sym)) xs





















entryByProbe :: [Cybert_entry] -> String -> Cybert_entry










entryByProbe xs p = head $ filter (\x -> probe x == p) xs










entryByProbe :: String -> [Cybert_entry] -> Cybert_entry










entryByProbe p xs = head $ filter (\x -> probe x == p) xs





















entriesBySecondaryRef :: [Cybert_entry] -> String -> String -> [Cybert_entry]










entriesBySecondaryRef xs tref ref = filter (\x -> (secondaryRefs x) M.! tref == ref) xs










entriesBySecondaryRef :: String -> String -> [Cybert_entry] -> [Cybert_entry]










entriesBySecondaryRef tref ref xs = filter (\x -> (secondaryRefs x) M.! tref == ref) xs










--lookup










entriesByFold :: [Cybert_entry] -> Float -> [Cybert_entry]










entriesByFold xs threshold = filter (\x ->pred $ mean x) xs where










entriesByFold :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByFold threshold xs = filter (\x ->pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b)= if length b < 2 then False










 else b!!1-b!!0 > threshold





















entriesByPval :: [Cybert_entry] -> Float -> [Cybert_entry]










entriesByPval xs threshold = filter (\x -> pval x < threshold) xs










entriesByPval :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByPval threshold xs = filter (\x -> pval x < threshold) xs





















entriesByUpDown :: [Cybert_entry] -> Bool -> [Cybert_entry]










entriesByUpDown xs val = filter (\x -> pred $ mean x) xs where










entriesByUpDown :: Bool -> [Cybert_entry] -> [Cybert_entry]










entriesByUpDown val xs = filter (\x -> pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b) = if length b < 2 then False










 else let bigger = (b!!1-b!!0>0)



......














cybert/cd271ex



0 → 100755




View file @ cb6a3aaf





File added













cybert/cd271ex.hs








View file @ cb6a3aaf













-- reproduce the analysis for CD271 pvals, functional stype










--










import Cybert










import Control.Monad










import Data.Maybe










extract:: Maybe [a] -> [a]










extract Nothing = []










extract (Just x) = x










main = do










 all_combined <- loadCybert "./CyberT_Output/unpaired/CD271_all_together0.txt"










 let all_up = (entriesByPval 0.05) $ (entriesByUpDown True) (extract all_combined)










 all_down = (entriesByPval 0.05) $ (entriesByUpDown False) (extract all_combined)










 ; exportGeneSyms all_up "all_up_refs.txt"










 ; exportGeneSyms all_down "all_down_refs.txt"










 ; onesM <- mapM loadCybert $ map ("./CyberT_Output/unpaired/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert ["./CyberT_Output/unpaired/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 let ones = map extract (all_combined:onesM)










 pairs = map extract (all_combined:pairsM)










 let up = map (entriesByPval 0.05) (map (entriesByUpDown True) pairs)










 down = map (entriesByPval 0.05) (map (entriesByUpDown False) pairs)










 five_up = map (filter (\x -> (foldr (\z acc -> acc + (length z)) 0 (map (filter (\y -> probe y == probe x)) up ) >= 5 ))) up










 five_down =map (filter (\x -> (foldr (\z acc -> acc + (length z)) 0 (map (filter (\y -> probe y == probe x)) down) >= 5 ))) down










 ; mapM (`exportGeneSyms` "five_up_refs.txt") five_up










 ; mapM (`exportGeneSyms` "five_down_refs.txt") five_down



























Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
cb6a3aaf


authored
May 25, 2013
by


darlliu



Browse files



Commit
cb6a3aaf


authored
May 25, 2013
by


darlliu

cb6a3aafauthoredbydarlliu

wot now






parent
7d732b74
















parent
7d732b74





parent












Changes
4
4


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










cybert/.nfs00000000a898a1c500005b23



0 → 100644




View file @ cb6a3aaf





File added













cybert/Cybert.hs








View file @ cb6a3aaf






......@@ -108,26 +108,26 @@ instance Show Cybert_entry where









 -- for each sample










{-end format and show routines-}










{-set operation and filtering routines-}










entriesBySym :: [Cybert_entry] -> String -> [Cybert_entry]










entriesBySym xs sym = filter (\x -> genesym x == (Just sym)) xs










entriesBySym :: String -> [Cybert_entry] -> [Cybert_entry]










entriesBySym sym xs = filter (\x -> genesym x == (Just sym)) xs





















entryByProbe :: [Cybert_entry] -> String -> Cybert_entry










entryByProbe xs p = head $ filter (\x -> probe x == p) xs










entryByProbe :: String -> [Cybert_entry] -> Cybert_entry










entryByProbe p xs = head $ filter (\x -> probe x == p) xs





















entriesBySecondaryRef :: [Cybert_entry] -> String -> String -> [Cybert_entry]










entriesBySecondaryRef xs tref ref = filter (\x -> (secondaryRefs x) M.! tref == ref) xs










entriesBySecondaryRef :: String -> String -> [Cybert_entry] -> [Cybert_entry]










entriesBySecondaryRef tref ref xs = filter (\x -> (secondaryRefs x) M.! tref == ref) xs










--lookup










entriesByFold :: [Cybert_entry] -> Float -> [Cybert_entry]










entriesByFold xs threshold = filter (\x ->pred $ mean x) xs where










entriesByFold :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByFold threshold xs = filter (\x ->pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b)= if length b < 2 then False










 else b!!1-b!!0 > threshold





















entriesByPval :: [Cybert_entry] -> Float -> [Cybert_entry]










entriesByPval xs threshold = filter (\x -> pval x < threshold) xs










entriesByPval :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByPval threshold xs = filter (\x -> pval x < threshold) xs





















entriesByUpDown :: [Cybert_entry] -> Bool -> [Cybert_entry]










entriesByUpDown xs val = filter (\x -> pred $ mean x) xs where










entriesByUpDown :: Bool -> [Cybert_entry] -> [Cybert_entry]










entriesByUpDown val xs = filter (\x -> pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b) = if length b < 2 then False










 else let bigger = (b!!1-b!!0>0)



......














cybert/cd271ex



0 → 100755




View file @ cb6a3aaf





File added













cybert/cd271ex.hs








View file @ cb6a3aaf













-- reproduce the analysis for CD271 pvals, functional stype










--










import Cybert










import Control.Monad










import Data.Maybe










extract:: Maybe [a] -> [a]










extract Nothing = []










extract (Just x) = x










main = do










 all_combined <- loadCybert "./CyberT_Output/unpaired/CD271_all_together0.txt"










 let all_up = (entriesByPval 0.05) $ (entriesByUpDown True) (extract all_combined)










 all_down = (entriesByPval 0.05) $ (entriesByUpDown False) (extract all_combined)










 ; exportGeneSyms all_up "all_up_refs.txt"










 ; exportGeneSyms all_down "all_down_refs.txt"










 ; onesM <- mapM loadCybert $ map ("./CyberT_Output/unpaired/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert ["./CyberT_Output/unpaired/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 let ones = map extract (all_combined:onesM)










 pairs = map extract (all_combined:pairsM)










 let up = map (entriesByPval 0.05) (map (entriesByUpDown True) pairs)










 down = map (entriesByPval 0.05) (map (entriesByUpDown False) pairs)










 five_up = map (filter (\x -> (foldr (\z acc -> acc + (length z)) 0 (map (filter (\y -> probe y == probe x)) up ) >= 5 ))) up










 five_down =map (filter (\x -> (foldr (\z acc -> acc + (length z)) 0 (map (filter (\y -> probe y == probe x)) down) >= 5 ))) down










 ; mapM (`exportGeneSyms` "five_up_refs.txt") five_up










 ; mapM (`exportGeneSyms` "five_down_refs.txt") five_down

























cybert/.nfs00000000a898a1c500005b23



0 → 100644




View file @ cb6a3aaf





File added











cybert/.nfs00000000a898a1c500005b23



0 → 100644




View file @ cb6a3aaf








cybert/.nfs00000000a898a1c500005b23



0 → 100644






View file @ cb6a3aaf
cb6a3aaf


File added




File added


File added









cybert/Cybert.hs








View file @ cb6a3aaf






......@@ -108,26 +108,26 @@ instance Show Cybert_entry where









 -- for each sample










{-end format and show routines-}










{-set operation and filtering routines-}










entriesBySym :: [Cybert_entry] -> String -> [Cybert_entry]










entriesBySym xs sym = filter (\x -> genesym x == (Just sym)) xs










entriesBySym :: String -> [Cybert_entry] -> [Cybert_entry]










entriesBySym sym xs = filter (\x -> genesym x == (Just sym)) xs





















entryByProbe :: [Cybert_entry] -> String -> Cybert_entry










entryByProbe xs p = head $ filter (\x -> probe x == p) xs










entryByProbe :: String -> [Cybert_entry] -> Cybert_entry










entryByProbe p xs = head $ filter (\x -> probe x == p) xs





















entriesBySecondaryRef :: [Cybert_entry] -> String -> String -> [Cybert_entry]










entriesBySecondaryRef xs tref ref = filter (\x -> (secondaryRefs x) M.! tref == ref) xs










entriesBySecondaryRef :: String -> String -> [Cybert_entry] -> [Cybert_entry]










entriesBySecondaryRef tref ref xs = filter (\x -> (secondaryRefs x) M.! tref == ref) xs










--lookup










entriesByFold :: [Cybert_entry] -> Float -> [Cybert_entry]










entriesByFold xs threshold = filter (\x ->pred $ mean x) xs where










entriesByFold :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByFold threshold xs = filter (\x ->pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b)= if length b < 2 then False










 else b!!1-b!!0 > threshold





















entriesByPval :: [Cybert_entry] -> Float -> [Cybert_entry]










entriesByPval xs threshold = filter (\x -> pval x < threshold) xs










entriesByPval :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByPval threshold xs = filter (\x -> pval x < threshold) xs





















entriesByUpDown :: [Cybert_entry] -> Bool -> [Cybert_entry]










entriesByUpDown xs val = filter (\x -> pred $ mean x) xs where










entriesByUpDown :: Bool -> [Cybert_entry] -> [Cybert_entry]










entriesByUpDown val xs = filter (\x -> pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b) = if length b < 2 then False










 else let bigger = (b!!1-b!!0>0)



......












cybert/Cybert.hs








View file @ cb6a3aaf








cybert/Cybert.hs










View file @ cb6a3aaf


cb6a3aaf



......@@ -108,26 +108,26 @@ instance Show Cybert_entry where









 -- for each sample










{-end format and show routines-}










{-set operation and filtering routines-}










entriesBySym :: [Cybert_entry] -> String -> [Cybert_entry]










entriesBySym xs sym = filter (\x -> genesym x == (Just sym)) xs










entriesBySym :: String -> [Cybert_entry] -> [Cybert_entry]










entriesBySym sym xs = filter (\x -> genesym x == (Just sym)) xs





















entryByProbe :: [Cybert_entry] -> String -> Cybert_entry










entryByProbe xs p = head $ filter (\x -> probe x == p) xs










entryByProbe :: String -> [Cybert_entry] -> Cybert_entry










entryByProbe p xs = head $ filter (\x -> probe x == p) xs





















entriesBySecondaryRef :: [Cybert_entry] -> String -> String -> [Cybert_entry]










entriesBySecondaryRef xs tref ref = filter (\x -> (secondaryRefs x) M.! tref == ref) xs










entriesBySecondaryRef :: String -> String -> [Cybert_entry] -> [Cybert_entry]










entriesBySecondaryRef tref ref xs = filter (\x -> (secondaryRefs x) M.! tref == ref) xs










--lookup










entriesByFold :: [Cybert_entry] -> Float -> [Cybert_entry]










entriesByFold xs threshold = filter (\x ->pred $ mean x) xs where










entriesByFold :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByFold threshold xs = filter (\x ->pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b)= if length b < 2 then False










 else b!!1-b!!0 > threshold





















entriesByPval :: [Cybert_entry] -> Float -> [Cybert_entry]










entriesByPval xs threshold = filter (\x -> pval x < threshold) xs










entriesByPval :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByPval threshold xs = filter (\x -> pval x < threshold) xs





















entriesByUpDown :: [Cybert_entry] -> Bool -> [Cybert_entry]










entriesByUpDown xs val = filter (\x -> pred $ mean x) xs where










entriesByUpDown :: Bool -> [Cybert_entry] -> [Cybert_entry]










entriesByUpDown val xs = filter (\x -> pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b) = if length b < 2 then False










 else let bigger = (b!!1-b!!0>0)



......






......@@ -108,26 +108,26 @@ instance Show Cybert_entry where









 -- for each sample










{-end format and show routines-}










{-set operation and filtering routines-}










entriesBySym :: [Cybert_entry] -> String -> [Cybert_entry]










entriesBySym xs sym = filter (\x -> genesym x == (Just sym)) xs










entriesBySym :: String -> [Cybert_entry] -> [Cybert_entry]










entriesBySym sym xs = filter (\x -> genesym x == (Just sym)) xs





















entryByProbe :: [Cybert_entry] -> String -> Cybert_entry










entryByProbe xs p = head $ filter (\x -> probe x == p) xs










entryByProbe :: String -> [Cybert_entry] -> Cybert_entry










entryByProbe p xs = head $ filter (\x -> probe x == p) xs





















entriesBySecondaryRef :: [Cybert_entry] -> String -> String -> [Cybert_entry]










entriesBySecondaryRef xs tref ref = filter (\x -> (secondaryRefs x) M.! tref == ref) xs










entriesBySecondaryRef :: String -> String -> [Cybert_entry] -> [Cybert_entry]










entriesBySecondaryRef tref ref xs = filter (\x -> (secondaryRefs x) M.! tref == ref) xs










--lookup










entriesByFold :: [Cybert_entry] -> Float -> [Cybert_entry]










entriesByFold xs threshold = filter (\x ->pred $ mean x) xs where










entriesByFold :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByFold threshold xs = filter (\x ->pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b)= if length b < 2 then False










 else b!!1-b!!0 > threshold





















entriesByPval :: [Cybert_entry] -> Float -> [Cybert_entry]










entriesByPval xs threshold = filter (\x -> pval x < threshold) xs










entriesByPval :: Float -> [Cybert_entry] -> [Cybert_entry]










entriesByPval threshold xs = filter (\x -> pval x < threshold) xs





















entriesByUpDown :: [Cybert_entry] -> Bool -> [Cybert_entry]










entriesByUpDown xs val = filter (\x -> pred $ mean x) xs where










entriesByUpDown :: Bool -> [Cybert_entry] -> [Cybert_entry]










entriesByUpDown val xs = filter (\x -> pred $ mean x) xs where










 pred (Left a) = False










 pred (Right b) = if length b < 2 then False










 else let bigger = (b!!1-b!!0>0)



......


 -- for each sample-- for each sample{-end format and show routines-}{-end format and show routines-}{-set operation and filtering routines-}{-set operation and filtering routines-}entriesBySym :: [Cybert_entry] -> String -> [Cybert_entry]entriesBySym::[Cybert_entry]->StringString ->-> [Cybert_entry]entriesBySym xs sym = filter (\x -> genesym x == (Just sym)) xsentriesBySymxsxs sym=filter(\x->genesymx==(Justsym))xsentriesBySym :: String -> [Cybert_entry] -> [Cybert_entry]entriesBySym::StringString ->-> [Cybert_entry]->[Cybert_entry]entriesBySym sym xs = filter (\x -> genesym x == (Just sym)) xsentriesBySymsym xsxs=filter(\x->genesymx==(Justsym))xsentryByProbe :: [Cybert_entry] -> String -> Cybert_entryentryByProbe::[Cybert_entry]->StringString ->-> Cybert_entryentryByProbe xs p = head $ filter (\x -> probe x == p) xsentryByProbexs pp=head$filter(\x->probex==p)xsentryByProbe :: String -> [Cybert_entry] -> Cybert_entryentryByProbe::StringString ->-> [Cybert_entry]->Cybert_entryentryByProbe p xs = head $ filter (\x -> probe x == p) xsentryByProbepp xs=head$filter(\x->probex==p)xsentriesBySecondaryRef :: [Cybert_entry] -> String -> String -> [Cybert_entry]entriesBySecondaryRef::[[Cybert_entryCybert_entry]] ->-> StringString ->-> StringString->[Cybert_entry]entriesBySecondaryRef xs tref ref = filter (\x -> (secondaryRefs x) M.! tref == ref) xsentriesBySecondaryRefxsxs trefref=filter(\x->(secondaryRefsx)M.!tref==ref)xsentriesBySecondaryRef :: String -> String -> [Cybert_entry] -> [Cybert_entry]entriesBySecondaryRef::StringString ->-> StringString ->-> [[Cybert_entryCybert_entry]]->[Cybert_entry]entriesBySecondaryRef tref ref xs = filter (\x -> (secondaryRefs x) M.! tref == ref) xsentriesBySecondaryReftrefrefxsxs =filter(\x->(secondaryRefsx)M.!tref==ref)xs--lookup--lookupentriesByFold :: [Cybert_entry] -> Float -> [Cybert_entry]entriesByFold::[Cybert_entry]->FloatFloat ->-> [Cybert_entry]entriesByFold xs threshold = filter (\x ->pred $ mean x) xs whereentriesByFoldxsxs threshold=filter(\x->pred$meanx)xswhereentriesByFold :: Float -> [Cybert_entry] -> [Cybert_entry]entriesByFold::FloatFloat ->-> [Cybert_entry]->[Cybert_entry]entriesByFold threshold xs = filter (\x ->pred $ mean x) xs whereentriesByFoldthresholdxsxs =filter(\x->pred$meanx)xswhere pred (Left a) = Falsepred(Lefta)=False pred (Right b)= if length b < 2 then Falsepred(Rightb)=iflengthb<2thenFalse else b!!1-b!!0 > thresholdelseb!!1-b!!0>thresholdentriesByPval :: [Cybert_entry] -> Float -> [Cybert_entry]entriesByPval::[Cybert_entry]->FloatFloat ->-> [Cybert_entry]entriesByPval xs threshold = filter (\x -> pval x < threshold) xsentriesByPvalxsxs threshold=filter(\x->pvalx<threshold)xsentriesByPval :: Float -> [Cybert_entry] -> [Cybert_entry]entriesByPval::FloatFloat ->-> [Cybert_entry]->[Cybert_entry]entriesByPval threshold xs = filter (\x -> pval x < threshold) xsentriesByPvalthresholdxsxs =filter(\x->pvalx<threshold)xsentriesByUpDown :: [Cybert_entry] -> Bool -> [Cybert_entry]entriesByUpDown::[Cybert_entry]->BoolBool ->-> [Cybert_entry]entriesByUpDown xs val = filter (\x -> pred $ mean x) xs whereentriesByUpDownxsxs val=filter(\x->pred$meanx)xswhereentriesByUpDown :: Bool -> [Cybert_entry] -> [Cybert_entry]entriesByUpDown::BoolBool ->-> [Cybert_entry]->[Cybert_entry]entriesByUpDown val xs = filter (\x -> pred $ mean x) xs whereentriesByUpDownval xsxs=filter(\x->pred$meanx)xswhere pred (Left a) = Falsepred(Lefta)=False pred (Right b) = if length b < 2 then Falsepred(Rightb)=iflengthb<2thenFalse else let bigger = (b!!1-b!!0>0)elseletbigger=(b!!1-b!!0>0)








cybert/cd271ex



0 → 100755




View file @ cb6a3aaf





File added











cybert/cd271ex



0 → 100755




View file @ cb6a3aaf








cybert/cd271ex



0 → 100755






View file @ cb6a3aaf
cb6a3aaf


File added




File added


File added









cybert/cd271ex.hs








View file @ cb6a3aaf













-- reproduce the analysis for CD271 pvals, functional stype










--










import Cybert










import Control.Monad










import Data.Maybe










extract:: Maybe [a] -> [a]










extract Nothing = []










extract (Just x) = x










main = do










 all_combined <- loadCybert "./CyberT_Output/unpaired/CD271_all_together0.txt"










 let all_up = (entriesByPval 0.05) $ (entriesByUpDown True) (extract all_combined)










 all_down = (entriesByPval 0.05) $ (entriesByUpDown False) (extract all_combined)










 ; exportGeneSyms all_up "all_up_refs.txt"










 ; exportGeneSyms all_down "all_down_refs.txt"










 ; onesM <- mapM loadCybert $ map ("./CyberT_Output/unpaired/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert ["./CyberT_Output/unpaired/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 let ones = map extract (all_combined:onesM)










 pairs = map extract (all_combined:pairsM)










 let up = map (entriesByPval 0.05) (map (entriesByUpDown True) pairs)










 down = map (entriesByPval 0.05) (map (entriesByUpDown False) pairs)










 five_up = map (filter (\x -> (foldr (\z acc -> acc + (length z)) 0 (map (filter (\y -> probe y == probe x)) up ) >= 5 ))) up










 five_down =map (filter (\x -> (foldr (\z acc -> acc + (length z)) 0 (map (filter (\y -> probe y == probe x)) down) >= 5 ))) down










 ; mapM (`exportGeneSyms` "five_up_refs.txt") five_up










 ; mapM (`exportGeneSyms` "five_down_refs.txt") five_down























cybert/cd271ex.hs








View file @ cb6a3aaf








cybert/cd271ex.hs










View file @ cb6a3aaf


cb6a3aaf










-- reproduce the analysis for CD271 pvals, functional stype










--










import Cybert










import Control.Monad










import Data.Maybe










extract:: Maybe [a] -> [a]










extract Nothing = []










extract (Just x) = x










main = do










 all_combined <- loadCybert "./CyberT_Output/unpaired/CD271_all_together0.txt"










 let all_up = (entriesByPval 0.05) $ (entriesByUpDown True) (extract all_combined)










 all_down = (entriesByPval 0.05) $ (entriesByUpDown False) (extract all_combined)










 ; exportGeneSyms all_up "all_up_refs.txt"










 ; exportGeneSyms all_down "all_down_refs.txt"










 ; onesM <- mapM loadCybert $ map ("./CyberT_Output/unpaired/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert ["./CyberT_Output/unpaired/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 let ones = map extract (all_combined:onesM)










 pairs = map extract (all_combined:pairsM)










 let up = map (entriesByPval 0.05) (map (entriesByUpDown True) pairs)










 down = map (entriesByPval 0.05) (map (entriesByUpDown False) pairs)










 five_up = map (filter (\x -> (foldr (\z acc -> acc + (length z)) 0 (map (filter (\y -> probe y == probe x)) up ) >= 5 ))) up










 five_down =map (filter (\x -> (foldr (\z acc -> acc + (length z)) 0 (map (filter (\y -> probe y == probe x)) down) >= 5 ))) down










 ; mapM (`exportGeneSyms` "five_up_refs.txt") five_up










 ; mapM (`exportGeneSyms` "five_down_refs.txt") five_down
























-- reproduce the analysis for CD271 pvals, functional stype










--










import Cybert










import Control.Monad










import Data.Maybe










extract:: Maybe [a] -> [a]










extract Nothing = []










extract (Just x) = x










main = do










 all_combined <- loadCybert "./CyberT_Output/unpaired/CD271_all_together0.txt"










 let all_up = (entriesByPval 0.05) $ (entriesByUpDown True) (extract all_combined)










 all_down = (entriesByPval 0.05) $ (entriesByUpDown False) (extract all_combined)










 ; exportGeneSyms all_up "all_up_refs.txt"










 ; exportGeneSyms all_down "all_down_refs.txt"










 ; onesM <- mapM loadCybert $ map ("./CyberT_Output/unpaired/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert ["./CyberT_Output/unpaired/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 let ones = map extract (all_combined:onesM)










 pairs = map extract (all_combined:pairsM)










 let up = map (entriesByPval 0.05) (map (entriesByUpDown True) pairs)










 down = map (entriesByPval 0.05) (map (entriesByUpDown False) pairs)










 five_up = map (filter (\x -> (foldr (\z acc -> acc + (length z)) 0 (map (filter (\y -> probe y == probe x)) up ) >= 5 ))) up










 five_down =map (filter (\x -> (foldr (\z acc -> acc + (length z)) 0 (map (filter (\y -> probe y == probe x)) down) >= 5 ))) down










 ; mapM (`exportGeneSyms` "five_up_refs.txt") five_up










 ; mapM (`exportGeneSyms` "five_down_refs.txt") five_down













-- reproduce the analysis for CD271 pvals, functional stype-- reproduce the analysis for CD271 pvals, functional stype----import CybertimportCybertimport Control.MonadimportControl.Monadimport Data.MaybeimportData.Maybeextract:: Maybe [a] -> [a]extract::Maybe[a]->[a]extract Nothing = []extractNothing=[]extract (Just x) = xextract(Justx)=xmain = domain=do all_combined <- loadCybert "./CyberT_Output/unpaired/CD271_all_together0.txt"all_combined<-loadCybert"./CyberT_Output/unpaired/CD271_all_together0.txt" let all_up = (entriesByPval 0.05) $ (entriesByUpDown True) (extract all_combined)letall_up=(entriesByPval0.05)$(entriesByUpDownTrue)(extractall_combined) all_down = (entriesByPval 0.05) $ (entriesByUpDown False) (extract all_combined)all_down=(entriesByPval0.05)$(entriesByUpDownFalse)(extractall_combined) ; exportGeneSyms all_up "all_up_refs.txt";exportGeneSymsall_up"all_up_refs.txt" ; exportGeneSyms all_down "all_down_refs.txt";exportGeneSymsall_down"all_down_refs.txt" ; onesM <- mapM loadCybert $ map ("./CyberT_Output/unpaired/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"];onesM<-mapMloadCybert$map("./CyberT_Output/unpaired/CD271_one_one"++)["0.txt","1.txt","2.txt","3.txt"] ; pairsM <- mapM loadCybert ["./CyberT_Output/unpaired/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ];pairsM<-mapMloadCybert["./CyberT_Output/unpaired/CD271_two_two_"++i++j++".txt"|i<-["1","2","3"],j<-["0","1"]] let ones = map extract (all_combined:onesM)letones=mapextract(all_combined:onesM) pairs = map extract (all_combined:pairsM)pairs=mapextract(all_combined:pairsM) let up = map (entriesByPval 0.05) (map (entriesByUpDown True) pairs)letup=map(entriesByPval0.05)(map(entriesByUpDownTrue)pairs) down = map (entriesByPval 0.05) (map (entriesByUpDown False) pairs)down=map(entriesByPval0.05)(map(entriesByUpDownFalse)pairs) five_up = map (filter (\x -> (foldr (\z acc -> acc + (length z)) 0 (map (filter (\y -> probe y == probe x)) up ) >= 5 ))) upfive_up=map(filter(\x->(foldr(\zacc->acc+(lengthz))0(map(filter(\y->probey==probex))up)>=5)))up five_down =map (filter (\x -> (foldr (\z acc -> acc + (length z)) 0 (map (filter (\y -> probe y == probe x)) down) >= 5 ))) downfive_down=map(filter(\x->(foldr(\zacc->acc+(lengthz))0(map(filter(\y->probey==probex))down)>=5)))down ; mapM (`exportGeneSyms` "five_up_refs.txt") five_up;mapM(`exportGeneSyms`"five_up_refs.txt")five_up ; mapM (`exportGeneSyms` "five_down_refs.txt") five_down;mapM(`exportGeneSyms`"five_down_refs.txt")five_down









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






