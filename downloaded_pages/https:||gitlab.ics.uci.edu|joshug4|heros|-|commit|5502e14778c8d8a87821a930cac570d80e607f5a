



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

5502e147















Commit
5502e147


authored
Jan 26, 2013
by


Eric Bodden



Browse files




further cleanups







parent
6f028b34













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/CountingThreadPoolExecutor.java



0 â†’ 100644







View file @ 5502e147













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import java.util.concurrent.BlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;





















/**










 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned










 * tasks to allow clients to await their completion. 










 */










public class CountingThreadPoolExecutor extends ThreadPoolExecutor {










 










 protected final CountLatch numRunningTasks = new CountLatch(0);





















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,










 BlockingQueue<Runnable> workQueue) {










 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);










 }





















 @Override










 protected void beforeExecute(Thread t, Runnable r) {










 numRunningTasks.increment();










 super.beforeExecute(t, r);










 }





















 @Override










 protected void afterExecute(Runnable r, Throwable t) {










 numRunningTasks.decrement();










 super.afterExecute(r, t);










 }





















 /**










	 * Awaits the completion of all spawned tasks.










	 */










 public void awaitCompletion() throws InterruptedException {










 numRunningTasks.awaitZero();










 }










 










 /**










	 * Awaits the completion of all spawned tasks.










	 */










 public void awaitCompletion(long timeout, TimeUnit unit) throws InterruptedException {










 numRunningTasks.awaitZero(timeout, unit);










 }





















}




\ No newline at end of file














src/heros/solver/IDESolver.java








View file @ 5502e147






......@@ -36,7 +36,6 @@ import java.util.Map;









import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;





















import com.google.common.base.Predicate;



......@@ -71,7 +70,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 protected ThreadPoolExecutor executor;










 protected CountingThreadPoolExecutor executor;










 










 @DontSynchronize("only used by single thread")










 protected int numThreads;



......@@ -137,9 +136,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;










 










 @SynchronizedBy("thread safe data structure")










 protected final CountLatch numRunningTasks = new CountLatch(0);





















 /**










	 * Creates a solver for the given problem, which caches flow functions and edge functions.










	 * The solver must then be started by calling {@link #solve()}.



......@@ -209,7 +205,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 public void solve(int numThreads) {










 this.numThreads = Math.max(1,numThreads);










 this.executor = new ThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);



......@@ -228,7 +224,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final long before = System.currentTimeMillis();










 //await termination of tasks










 try {










 numRunningTasks.awaitZero();










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }



......@@ -250,7 +246,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param edge the edge to process










   */










 private void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 numRunningTasks.increment();










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -260,7 +255,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param vpt










   */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 numRunningTasks.increment();










 executor.execute(vpt);










 }










 



......@@ -500,7 +494,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //await termination of tasks










 try {










 numRunningTasks.awaitZero();










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }



......@@ -517,12 +511,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 //No need to keep track of the number of tasks scheduled here, since we call shutdown










 for(int t=0;t<numThreads; t++) {










 numRunningTasks.increment();










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //await termination of tasks










 try {










 numRunningTasks.awaitZero();










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }



......@@ -693,7 +686,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 processNormalFlow(edge);










 }










 }










 numRunningTasks.decrement();










 }










 }










 



......@@ -712,7 +704,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 if(icfg.isCallStmt(n)) {










 propagateValueAtCall(nAndD, n);










 }










 numRunningTasks.decrement();










 }










 }










 



......@@ -743,7 +734,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 numRunningTasks.decrement();










 }










 }














......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

5502e147















Commit
5502e147


authored
Jan 26, 2013
by


Eric Bodden



Browse files




further cleanups







parent
6f028b34













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/CountingThreadPoolExecutor.java



0 â†’ 100644







View file @ 5502e147













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import java.util.concurrent.BlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;





















/**










 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned










 * tasks to allow clients to await their completion. 










 */










public class CountingThreadPoolExecutor extends ThreadPoolExecutor {










 










 protected final CountLatch numRunningTasks = new CountLatch(0);





















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,










 BlockingQueue<Runnable> workQueue) {










 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);










 }





















 @Override










 protected void beforeExecute(Thread t, Runnable r) {










 numRunningTasks.increment();










 super.beforeExecute(t, r);










 }





















 @Override










 protected void afterExecute(Runnable r, Throwable t) {










 numRunningTasks.decrement();










 super.afterExecute(r, t);










 }





















 /**










	 * Awaits the completion of all spawned tasks.










	 */










 public void awaitCompletion() throws InterruptedException {










 numRunningTasks.awaitZero();










 }










 










 /**










	 * Awaits the completion of all spawned tasks.










	 */










 public void awaitCompletion(long timeout, TimeUnit unit) throws InterruptedException {










 numRunningTasks.awaitZero(timeout, unit);










 }





















}




\ No newline at end of file














src/heros/solver/IDESolver.java








View file @ 5502e147






......@@ -36,7 +36,6 @@ import java.util.Map;









import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;





















import com.google.common.base.Predicate;



......@@ -71,7 +70,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 protected ThreadPoolExecutor executor;










 protected CountingThreadPoolExecutor executor;










 










 @DontSynchronize("only used by single thread")










 protected int numThreads;



......@@ -137,9 +136,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;










 










 @SynchronizedBy("thread safe data structure")










 protected final CountLatch numRunningTasks = new CountLatch(0);





















 /**










	 * Creates a solver for the given problem, which caches flow functions and edge functions.










	 * The solver must then be started by calling {@link #solve()}.



......@@ -209,7 +205,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 public void solve(int numThreads) {










 this.numThreads = Math.max(1,numThreads);










 this.executor = new ThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);



......@@ -228,7 +224,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final long before = System.currentTimeMillis();










 //await termination of tasks










 try {










 numRunningTasks.awaitZero();










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }



......@@ -250,7 +246,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param edge the edge to process










   */










 private void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 numRunningTasks.increment();










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -260,7 +255,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param vpt










   */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 numRunningTasks.increment();










 executor.execute(vpt);










 }










 



......@@ -500,7 +494,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //await termination of tasks










 try {










 numRunningTasks.awaitZero();










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }



......@@ -517,12 +511,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 //No need to keep track of the number of tasks scheduled here, since we call shutdown










 for(int t=0;t<numThreads; t++) {










 numRunningTasks.increment();










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //await termination of tasks










 try {










 numRunningTasks.awaitZero();










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }



......@@ -693,7 +686,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 processNormalFlow(edge);










 }










 }










 numRunningTasks.decrement();










 }










 }










 



......@@ -712,7 +704,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 if(icfg.isCallStmt(n)) {










 propagateValueAtCall(nAndD, n);










 }










 numRunningTasks.decrement();










 }










 }










 



......@@ -743,7 +734,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 numRunningTasks.decrement();










 }










 }














......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

5502e147







Open sidebar



Joshua Garcia heros
Commits

5502e147




Open sidebar

Joshua Garcia heros
Commits

5502e147


Joshua GarciaherosherosCommits
5502e147








Commit
5502e147


authored
Jan 26, 2013
by


Eric Bodden



Browse files




further cleanups







parent
6f028b34













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/CountingThreadPoolExecutor.java



0 â†’ 100644







View file @ 5502e147













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import java.util.concurrent.BlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;





















/**










 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned










 * tasks to allow clients to await their completion. 










 */










public class CountingThreadPoolExecutor extends ThreadPoolExecutor {










 










 protected final CountLatch numRunningTasks = new CountLatch(0);





















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,










 BlockingQueue<Runnable> workQueue) {










 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);










 }





















 @Override










 protected void beforeExecute(Thread t, Runnable r) {










 numRunningTasks.increment();










 super.beforeExecute(t, r);










 }





















 @Override










 protected void afterExecute(Runnable r, Throwable t) {










 numRunningTasks.decrement();










 super.afterExecute(r, t);










 }





















 /**










	 * Awaits the completion of all spawned tasks.










	 */










 public void awaitCompletion() throws InterruptedException {










 numRunningTasks.awaitZero();










 }










 










 /**










	 * Awaits the completion of all spawned tasks.










	 */










 public void awaitCompletion(long timeout, TimeUnit unit) throws InterruptedException {










 numRunningTasks.awaitZero(timeout, unit);










 }





















}




\ No newline at end of file














src/heros/solver/IDESolver.java








View file @ 5502e147






......@@ -36,7 +36,6 @@ import java.util.Map;









import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;





















import com.google.common.base.Predicate;



......@@ -71,7 +70,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 protected ThreadPoolExecutor executor;










 protected CountingThreadPoolExecutor executor;










 










 @DontSynchronize("only used by single thread")










 protected int numThreads;



......@@ -137,9 +136,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;










 










 @SynchronizedBy("thread safe data structure")










 protected final CountLatch numRunningTasks = new CountLatch(0);





















 /**










	 * Creates a solver for the given problem, which caches flow functions and edge functions.










	 * The solver must then be started by calling {@link #solve()}.



......@@ -209,7 +205,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 public void solve(int numThreads) {










 this.numThreads = Math.max(1,numThreads);










 this.executor = new ThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);



......@@ -228,7 +224,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final long before = System.currentTimeMillis();










 //await termination of tasks










 try {










 numRunningTasks.awaitZero();










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }



......@@ -250,7 +246,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param edge the edge to process










   */










 private void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 numRunningTasks.increment();










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -260,7 +255,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param vpt










   */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 numRunningTasks.increment();










 executor.execute(vpt);










 }










 



......@@ -500,7 +494,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //await termination of tasks










 try {










 numRunningTasks.awaitZero();










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }



......@@ -517,12 +511,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 //No need to keep track of the number of tasks scheduled here, since we call shutdown










 for(int t=0;t<numThreads; t++) {










 numRunningTasks.increment();










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //await termination of tasks










 try {










 numRunningTasks.awaitZero();










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }



......@@ -693,7 +686,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 processNormalFlow(edge);










 }










 }










 numRunningTasks.decrement();










 }










 }










 



......@@ -712,7 +704,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 if(icfg.isCallStmt(n)) {










 propagateValueAtCall(nAndD, n);










 }










 numRunningTasks.decrement();










 }










 }










 



......@@ -743,7 +734,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 numRunningTasks.decrement();










 }










 }














......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
5502e147


authored
Jan 26, 2013
by


Eric Bodden



Browse files




further cleanups







parent
6f028b34













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/CountingThreadPoolExecutor.java



0 â†’ 100644







View file @ 5502e147













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import java.util.concurrent.BlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;





















/**










 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned










 * tasks to allow clients to await their completion. 










 */










public class CountingThreadPoolExecutor extends ThreadPoolExecutor {










 










 protected final CountLatch numRunningTasks = new CountLatch(0);





















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,










 BlockingQueue<Runnable> workQueue) {










 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);










 }





















 @Override










 protected void beforeExecute(Thread t, Runnable r) {










 numRunningTasks.increment();










 super.beforeExecute(t, r);










 }





















 @Override










 protected void afterExecute(Runnable r, Throwable t) {










 numRunningTasks.decrement();










 super.afterExecute(r, t);










 }





















 /**










	 * Awaits the completion of all spawned tasks.










	 */










 public void awaitCompletion() throws InterruptedException {










 numRunningTasks.awaitZero();










 }










 










 /**










	 * Awaits the completion of all spawned tasks.










	 */










 public void awaitCompletion(long timeout, TimeUnit unit) throws InterruptedException {










 numRunningTasks.awaitZero(timeout, unit);










 }





















}




\ No newline at end of file














src/heros/solver/IDESolver.java








View file @ 5502e147






......@@ -36,7 +36,6 @@ import java.util.Map;









import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;





















import com.google.common.base.Predicate;



......@@ -71,7 +70,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 protected ThreadPoolExecutor executor;










 protected CountingThreadPoolExecutor executor;










 










 @DontSynchronize("only used by single thread")










 protected int numThreads;



......@@ -137,9 +136,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;










 










 @SynchronizedBy("thread safe data structure")










 protected final CountLatch numRunningTasks = new CountLatch(0);





















 /**










	 * Creates a solver for the given problem, which caches flow functions and edge functions.










	 * The solver must then be started by calling {@link #solve()}.



......@@ -209,7 +205,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 public void solve(int numThreads) {










 this.numThreads = Math.max(1,numThreads);










 this.executor = new ThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);



......@@ -228,7 +224,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final long before = System.currentTimeMillis();










 //await termination of tasks










 try {










 numRunningTasks.awaitZero();










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }



......@@ -250,7 +246,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param edge the edge to process










   */










 private void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 numRunningTasks.increment();










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -260,7 +255,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param vpt










   */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 numRunningTasks.increment();










 executor.execute(vpt);










 }










 



......@@ -500,7 +494,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //await termination of tasks










 try {










 numRunningTasks.awaitZero();










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }



......@@ -517,12 +511,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 //No need to keep track of the number of tasks scheduled here, since we call shutdown










 for(int t=0;t<numThreads; t++) {










 numRunningTasks.increment();










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //await termination of tasks










 try {










 numRunningTasks.awaitZero();










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }



......@@ -693,7 +686,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 processNormalFlow(edge);










 }










 }










 numRunningTasks.decrement();










 }










 }










 



......@@ -712,7 +704,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 if(icfg.isCallStmt(n)) {










 propagateValueAtCall(nAndD, n);










 }










 numRunningTasks.decrement();










 }










 }










 



......@@ -743,7 +734,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 numRunningTasks.decrement();










 }










 }














......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
5502e147


authored
Jan 26, 2013
by


Eric Bodden



Browse files



Commit
5502e147


authored
Jan 26, 2013
by


Eric Bodden

5502e147authoredbyEric Bodden

further cleanups






parent
6f028b34
















parent
6f028b34





parent












Changes
2
2


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/solver/CountingThreadPoolExecutor.java



0 â†’ 100644







View file @ 5502e147













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import java.util.concurrent.BlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;





















/**










 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned










 * tasks to allow clients to await their completion. 










 */










public class CountingThreadPoolExecutor extends ThreadPoolExecutor {










 










 protected final CountLatch numRunningTasks = new CountLatch(0);





















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,










 BlockingQueue<Runnable> workQueue) {










 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);










 }





















 @Override










 protected void beforeExecute(Thread t, Runnable r) {










 numRunningTasks.increment();










 super.beforeExecute(t, r);










 }





















 @Override










 protected void afterExecute(Runnable r, Throwable t) {










 numRunningTasks.decrement();










 super.afterExecute(r, t);










 }





















 /**










	 * Awaits the completion of all spawned tasks.










	 */










 public void awaitCompletion() throws InterruptedException {










 numRunningTasks.awaitZero();










 }










 










 /**










	 * Awaits the completion of all spawned tasks.










	 */










 public void awaitCompletion(long timeout, TimeUnit unit) throws InterruptedException {










 numRunningTasks.awaitZero(timeout, unit);










 }





















}




\ No newline at end of file














src/heros/solver/IDESolver.java








View file @ 5502e147






......@@ -36,7 +36,6 @@ import java.util.Map;









import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;





















import com.google.common.base.Predicate;



......@@ -71,7 +70,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 protected ThreadPoolExecutor executor;










 protected CountingThreadPoolExecutor executor;










 










 @DontSynchronize("only used by single thread")










 protected int numThreads;



......@@ -137,9 +136,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;










 










 @SynchronizedBy("thread safe data structure")










 protected final CountLatch numRunningTasks = new CountLatch(0);





















 /**










	 * Creates a solver for the given problem, which caches flow functions and edge functions.










	 * The solver must then be started by calling {@link #solve()}.



......@@ -209,7 +205,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 public void solve(int numThreads) {










 this.numThreads = Math.max(1,numThreads);










 this.executor = new ThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);



......@@ -228,7 +224,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final long before = System.currentTimeMillis();










 //await termination of tasks










 try {










 numRunningTasks.awaitZero();










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }



......@@ -250,7 +246,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param edge the edge to process










   */










 private void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 numRunningTasks.increment();










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -260,7 +255,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param vpt










   */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 numRunningTasks.increment();










 executor.execute(vpt);










 }










 



......@@ -500,7 +494,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //await termination of tasks










 try {










 numRunningTasks.awaitZero();










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }



......@@ -517,12 +511,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 //No need to keep track of the number of tasks scheduled here, since we call shutdown










 for(int t=0;t<numThreads; t++) {










 numRunningTasks.increment();










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //await termination of tasks










 try {










 numRunningTasks.awaitZero();










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }



......@@ -693,7 +686,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 processNormalFlow(edge);










 }










 }










 numRunningTasks.decrement();










 }










 }










 



......@@ -712,7 +704,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 if(icfg.isCallStmt(n)) {










 propagateValueAtCall(nAndD, n);










 }










 numRunningTasks.decrement();










 }










 }










 



......@@ -743,7 +734,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 numRunningTasks.decrement();










 }










 }














......














src/heros/solver/CountingThreadPoolExecutor.java



0 â†’ 100644







View file @ 5502e147













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import java.util.concurrent.BlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;





















/**










 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned










 * tasks to allow clients to await their completion. 










 */










public class CountingThreadPoolExecutor extends ThreadPoolExecutor {










 










 protected final CountLatch numRunningTasks = new CountLatch(0);





















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,










 BlockingQueue<Runnable> workQueue) {










 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);










 }





















 @Override










 protected void beforeExecute(Thread t, Runnable r) {










 numRunningTasks.increment();










 super.beforeExecute(t, r);










 }





















 @Override










 protected void afterExecute(Runnable r, Throwable t) {










 numRunningTasks.decrement();










 super.afterExecute(r, t);










 }





















 /**










	 * Awaits the completion of all spawned tasks.










	 */










 public void awaitCompletion() throws InterruptedException {










 numRunningTasks.awaitZero();










 }










 










 /**










	 * Awaits the completion of all spawned tasks.










	 */










 public void awaitCompletion(long timeout, TimeUnit unit) throws InterruptedException {










 numRunningTasks.awaitZero(timeout, unit);










 }





















}




\ No newline at end of file












src/heros/solver/CountingThreadPoolExecutor.java



0 â†’ 100644







View file @ 5502e147








src/heros/solver/CountingThreadPoolExecutor.java



0 â†’ 100644









View file @ 5502e147


5502e147










/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import java.util.concurrent.BlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;





















/**










 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned










 * tasks to allow clients to await their completion. 










 */










public class CountingThreadPoolExecutor extends ThreadPoolExecutor {










 










 protected final CountLatch numRunningTasks = new CountLatch(0);





















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,










 BlockingQueue<Runnable> workQueue) {










 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);










 }





















 @Override










 protected void beforeExecute(Thread t, Runnable r) {










 numRunningTasks.increment();










 super.beforeExecute(t, r);










 }





















 @Override










 protected void afterExecute(Runnable r, Throwable t) {










 numRunningTasks.decrement();










 super.afterExecute(r, t);










 }





















 /**










	 * Awaits the completion of all spawned tasks.










	 */










 public void awaitCompletion() throws InterruptedException {










 numRunningTasks.awaitZero();










 }










 










 /**










	 * Awaits the completion of all spawned tasks.










	 */










 public void awaitCompletion(long timeout, TimeUnit unit) throws InterruptedException {










 numRunningTasks.awaitZero(timeout, unit);










 }





















}




\ No newline at end of file













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import java.util.concurrent.BlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;





















/**










 * A {@link ThreadPoolExecutor} which keeps track of the number of spawned










 * tasks to allow clients to await their completion. 










 */










public class CountingThreadPoolExecutor extends ThreadPoolExecutor {










 










 protected final CountLatch numRunningTasks = new CountLatch(0);





















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,










 BlockingQueue<Runnable> workQueue) {










 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);










 }





















 @Override










 protected void beforeExecute(Thread t, Runnable r) {










 numRunningTasks.increment();










 super.beforeExecute(t, r);










 }





















 @Override










 protected void afterExecute(Runnable r, Throwable t) {










 numRunningTasks.decrement();










 super.afterExecute(r, t);










 }





















 /**










	 * Awaits the completion of all spawned tasks.










	 */










 public void awaitCompletion() throws InterruptedException {










 numRunningTasks.awaitZero();










 }










 










 /**










	 * Awaits the completion of all spawned tasks.










	 */










 public void awaitCompletion(long timeout, TimeUnit unit) throws InterruptedException {










 numRunningTasks.awaitZero(timeout, unit);










 }





















}




\ No newline at end of file


/*******************************************************************************/******************************************************************************* * Copyright (c) 2012 Eric Bodden. * Copyright (c) 2012 Eric Bodden. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Eric Bodden - initial API and implementation *     Eric Bodden - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.solver;packageheros.solver;import java.util.concurrent.BlockingQueue;importjava.util.concurrent.BlockingQueue;import java.util.concurrent.ThreadPoolExecutor;importjava.util.concurrent.ThreadPoolExecutor;import java.util.concurrent.TimeUnit;importjava.util.concurrent.TimeUnit;/**/** * A {@link ThreadPoolExecutor} which keeps track of the number of spawned * A {@link ThreadPoolExecutor} which keeps track of the number of spawned * tasks to allow clients to await their completion.  * tasks to allow clients to await their completion.  */ */public class CountingThreadPoolExecutor extends ThreadPoolExecutor {publicclassCountingThreadPoolExecutorextendsThreadPoolExecutor{  protected final CountLatch numRunningTasks = new CountLatch(0);protectedfinalCountLatchnumRunningTasks=newCountLatch(0); public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,publicCountingThreadPoolExecutor(intcorePoolSize,intmaximumPoolSize,longkeepAliveTime,TimeUnitunit, BlockingQueue<Runnable> workQueue) {BlockingQueue<Runnable>workQueue){ super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);super(corePoolSize,maximumPoolSize,keepAliveTime,unit,workQueue); }} @Override@Override protected void beforeExecute(Thread t, Runnable r) {protectedvoidbeforeExecute(Threadt,Runnabler){ numRunningTasks.increment();numRunningTasks.increment(); super.beforeExecute(t, r);super.beforeExecute(t,r); }} @Override@Override protected void afterExecute(Runnable r, Throwable t) {protectedvoidafterExecute(Runnabler,Throwablet){ numRunningTasks.decrement();numRunningTasks.decrement(); super.afterExecute(r, t);super.afterExecute(r,t); }} /**/**	 * Awaits the completion of all spawned tasks.	 * Awaits the completion of all spawned tasks.	 */	 */ public void awaitCompletion() throws InterruptedException {publicvoidawaitCompletion()throwsInterruptedException{ numRunningTasks.awaitZero();numRunningTasks.awaitZero(); }}  /**/**	 * Awaits the completion of all spawned tasks.	 * Awaits the completion of all spawned tasks.	 */	 */ public void awaitCompletion(long timeout, TimeUnit unit) throws InterruptedException {publicvoidawaitCompletion(longtimeout,TimeUnitunit)throwsInterruptedException{ numRunningTasks.awaitZero(timeout, unit);numRunningTasks.awaitZero(timeout,unit); }}}}








src/heros/solver/IDESolver.java








View file @ 5502e147






......@@ -36,7 +36,6 @@ import java.util.Map;









import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;





















import com.google.common.base.Predicate;



......@@ -71,7 +70,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 protected ThreadPoolExecutor executor;










 protected CountingThreadPoolExecutor executor;










 










 @DontSynchronize("only used by single thread")










 protected int numThreads;



......@@ -137,9 +136,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;










 










 @SynchronizedBy("thread safe data structure")










 protected final CountLatch numRunningTasks = new CountLatch(0);





















 /**










	 * Creates a solver for the given problem, which caches flow functions and edge functions.










	 * The solver must then be started by calling {@link #solve()}.



......@@ -209,7 +205,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 public void solve(int numThreads) {










 this.numThreads = Math.max(1,numThreads);










 this.executor = new ThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);



......@@ -228,7 +224,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final long before = System.currentTimeMillis();










 //await termination of tasks










 try {










 numRunningTasks.awaitZero();










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }



......@@ -250,7 +246,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param edge the edge to process










   */










 private void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 numRunningTasks.increment();










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -260,7 +255,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param vpt










   */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 numRunningTasks.increment();










 executor.execute(vpt);










 }










 



......@@ -500,7 +494,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //await termination of tasks










 try {










 numRunningTasks.awaitZero();










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }



......@@ -517,12 +511,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 //No need to keep track of the number of tasks scheduled here, since we call shutdown










 for(int t=0;t<numThreads; t++) {










 numRunningTasks.increment();










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //await termination of tasks










 try {










 numRunningTasks.awaitZero();










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }



......@@ -693,7 +686,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 processNormalFlow(edge);










 }










 }










 numRunningTasks.decrement();










 }










 }










 



......@@ -712,7 +704,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 if(icfg.isCallStmt(n)) {










 propagateValueAtCall(nAndD, n);










 }










 numRunningTasks.decrement();










 }










 }










 



......@@ -743,7 +734,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 numRunningTasks.decrement();










 }










 }














......












src/heros/solver/IDESolver.java








View file @ 5502e147








src/heros/solver/IDESolver.java










View file @ 5502e147


5502e147



......@@ -36,7 +36,6 @@ import java.util.Map;









import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;





















import com.google.common.base.Predicate;



......@@ -71,7 +70,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 protected ThreadPoolExecutor executor;










 protected CountingThreadPoolExecutor executor;










 










 @DontSynchronize("only used by single thread")










 protected int numThreads;



......@@ -137,9 +136,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;










 










 @SynchronizedBy("thread safe data structure")










 protected final CountLatch numRunningTasks = new CountLatch(0);





















 /**










	 * Creates a solver for the given problem, which caches flow functions and edge functions.










	 * The solver must then be started by calling {@link #solve()}.



......@@ -209,7 +205,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 public void solve(int numThreads) {










 this.numThreads = Math.max(1,numThreads);










 this.executor = new ThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);



......@@ -228,7 +224,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final long before = System.currentTimeMillis();










 //await termination of tasks










 try {










 numRunningTasks.awaitZero();










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }



......@@ -250,7 +246,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param edge the edge to process










   */










 private void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 numRunningTasks.increment();










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -260,7 +255,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param vpt










   */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 numRunningTasks.increment();










 executor.execute(vpt);










 }










 



......@@ -500,7 +494,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //await termination of tasks










 try {










 numRunningTasks.awaitZero();










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }



......@@ -517,12 +511,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 //No need to keep track of the number of tasks scheduled here, since we call shutdown










 for(int t=0;t<numThreads; t++) {










 numRunningTasks.increment();










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //await termination of tasks










 try {










 numRunningTasks.awaitZero();










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }



......@@ -693,7 +686,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 processNormalFlow(edge);










 }










 }










 numRunningTasks.decrement();










 }










 }










 



......@@ -712,7 +704,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 if(icfg.isCallStmt(n)) {










 propagateValueAtCall(nAndD, n);










 }










 numRunningTasks.decrement();










 }










 }










 



......@@ -743,7 +734,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 numRunningTasks.decrement();










 }










 }














......






......@@ -36,7 +36,6 @@ import java.util.Map;









import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;





















import com.google.common.base.Predicate;



......@@ -71,7 +70,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 protected ThreadPoolExecutor executor;










 protected CountingThreadPoolExecutor executor;










 










 @DontSynchronize("only used by single thread")










 protected int numThreads;



......@@ -137,9 +136,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;










 










 @SynchronizedBy("thread safe data structure")










 protected final CountLatch numRunningTasks = new CountLatch(0);





















 /**










	 * Creates a solver for the given problem, which caches flow functions and edge functions.










	 * The solver must then be started by calling {@link #solve()}.



......@@ -209,7 +205,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 public void solve(int numThreads) {










 this.numThreads = Math.max(1,numThreads);










 this.executor = new ThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);



......@@ -228,7 +224,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final long before = System.currentTimeMillis();










 //await termination of tasks










 try {










 numRunningTasks.awaitZero();










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }



......@@ -250,7 +246,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param edge the edge to process










   */










 private void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 numRunningTasks.increment();










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -260,7 +255,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param vpt










   */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 numRunningTasks.increment();










 executor.execute(vpt);










 }










 



......@@ -500,7 +494,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //await termination of tasks










 try {










 numRunningTasks.awaitZero();










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }



......@@ -517,12 +511,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 //No need to keep track of the number of tasks scheduled here, since we call shutdown










 for(int t=0;t<numThreads; t++) {










 numRunningTasks.increment();










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //await termination of tasks










 try {










 numRunningTasks.awaitZero();










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }



......@@ -693,7 +686,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 processNormalFlow(edge);










 }










 }










 numRunningTasks.decrement();










 }










 }










 



......@@ -712,7 +704,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 if(icfg.isCallStmt(n)) {










 propagateValueAtCall(nAndD, n);










 }










 numRunningTasks.decrement();










 }










 }










 



......@@ -743,7 +734,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 numRunningTasks.decrement();










 }










 }














......


import java.util.Map.Entry;importjava.util.Map.Entry;import java.util.Set;importjava.util.Set;import java.util.concurrent.LinkedBlockingQueue;importjava.util.concurrent.LinkedBlockingQueue;import java.util.concurrent.ThreadPoolExecutor;importjava.util.concurrent.ThreadPoolExecutor;import java.util.concurrent.TimeUnit;importjava.util.concurrent.TimeUnit;import com.google.common.base.Predicate;importcom.google.common.base.Predicate;  //executor for dispatching individual compute jobs (may be multi-threaded)//executor for dispatching individual compute jobs (may be multi-threaded) @DontSynchronize("only used by single thread")@DontSynchronize("only used by single thread") protected ThreadPoolExecutor executor;protectedThreadPoolExecutorexecutor; protected CountingThreadPoolExecutor executor;protectedCountingThreadPoolExecutorCountingexecutor;  @DontSynchronize("only used by single thread")@DontSynchronize("only used by single thread") protected int numThreads;protectedintnumThreads; @DontSynchronize("readOnly")@DontSynchronize("readOnly") protected final boolean followReturnsPastSeeds;protectedfinalbooleanfollowReturnsPastSeeds;  @SynchronizedBy("thread safe data structure")@SynchronizedBy("thread safe data structure") protected final CountLatch numRunningTasks = new CountLatch(0);protectedfinalCountLatchnumRunningTasks=newCountLatch(0); /**/**	 * Creates a solver for the given problem, which caches flow functions and edge functions.	 * Creates a solver for the given problem, which caches flow functions and edge functions.	 * The solver must then be started by calling {@link #solve()}.	 * The solver must then be started by calling {@link #solve()}.	 */	 */ public void solve(int numThreads) {publicvoidsolve(intnumThreads){ this.numThreads = Math.max(1,numThreads);this.numThreads=Math.max(1,numThreads); this.executor = new ThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());this.executor=newThreadPoolExecutor(1,this.numThreads,30,TimeUnit.SECONDS,newLinkedBlockingQueue<Runnable>()); this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());this.executor=newCountingThreadPoolExecutorCounting(1,this.numThreads,30,TimeUnit.SECONDS,newLinkedBlockingQueue<Runnable>());  for(N startPoint: initialSeeds) {for(NstartPoint:initialSeeds){ propagate(zeroValue, startPoint, zeroValue, allTop);propagate(zeroValue,startPoint,zeroValue,allTop); final long before = System.currentTimeMillis();finallongbefore=System.currentTimeMillis(); //await termination of tasks//await termination of tasks try {try{ numRunningTasks.awaitZero();numRunningTasksnumRunningTasks..awaitZeroawaitZero(); executor.awaitCompletion();executorexecutor..awaitCompletionawaitCompletion(); } catch (InterruptedException e) {}catch(InterruptedExceptione){ e.printStackTrace();e.printStackTrace(); }}   * @param edge the edge to process   * @param edge the edge to process   */   */ private void scheduleEdgeProcessing(PathEdge<N,D,M> edge){privatevoidscheduleEdgeProcessing(PathEdge<N,D,M>edge){ numRunningTasks.increment();numRunningTasks.increment(); executor.execute(new PathEdgeProcessingTask(edge));executor.execute(newPathEdgeProcessingTask(edge)); propagationCount++;propagationCount++; }}   * @param vpt   * @param vpt   */   */ private void scheduleValueProcessing(ValuePropagationTask vpt){privatevoidscheduleValueProcessing(ValuePropagationTaskvpt){ numRunningTasks.increment();numRunningTasks.increment(); executor.execute(vpt);executor.execute(vpt); }}   //await termination of tasks//await termination of tasks try {try{ numRunningTasks.awaitZero();numRunningTasksnumRunningTasks..awaitZeroawaitZero(); executor.awaitCompletion();executorexecutor..awaitCompletionawaitCompletion(); } catch (InterruptedException e) {}catch(InterruptedExceptione){ e.printStackTrace();e.printStackTrace(); }} }} //No need to keep track of the number of tasks scheduled here, since we call shutdown//No need to keep track of the number of tasks scheduled here, since we call shutdown for(int t=0;t<numThreads; t++) {for(intt=0;t<numThreads;t++){ numRunningTasks.increment();numRunningTasks.increment(); executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));executor.execute(newValueComputationTask(nonCallStartNodesArray,t)); }} //await termination of tasks//await termination of tasks try {try{ numRunningTasks.awaitZero();numRunningTasksnumRunningTasks..awaitZeroawaitZero(); executor.awaitCompletion();executorexecutor..awaitCompletionawaitCompletion(); } catch (InterruptedException e) {}catch(InterruptedExceptione){ e.printStackTrace();e.printStackTrace(); }} processNormalFlow(edge);processNormalFlow(edge); }} }} numRunningTasks.decrement();numRunningTasks.decrement(); }} }}  if(icfg.isCallStmt(n)) {if(icfg.isCallStmt(n)){ propagateValueAtCall(nAndD, n);propagateValueAtCall(nAndD,n); }} numRunningTasks.decrement();numRunningTasks.decrement(); }} }}  }} }} }} numRunningTasks.decrement();numRunningTasks.decrement(); }} }}









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






