



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

65687218















Commit
65687218


authored
Jun 11, 2014
by


Johannes Lerch



Browse files




Additional tests for BiDiSolver







parent
c455fd16













Changes
2




Hide whitespace changes

Inline
Side-by-side















test/heros/BiDiIFDSSolverTest.java








View file @ 65687218






......@@ -10,22 +10,40 @@









 ******************************************************************************/










package heros;





















import org.junit.Before;










import java.util.Collection;










import java.util.LinkedList;





















import org.junit.Test;










import static heros.utilities.TestHelper.*;










import org.junit.runner.RunWith;










import org.junit.runners.Parameterized;










import org.junit.runners.Parameterized.Parameters;





















import com.google.common.collect.Lists;





















import static heros.utilities.TestHelper.*;










import heros.utilities.TestHelper;










import heros.utilities.TestHelper.TabulationProblemExchange;





















@RunWith(Parameterized.class)










public class BiDiIFDSSolverTest {





















 private TestHelper forwardHelper;










 private TestHelper backwardHelper;










 private TabulationProblemExchange exchange;










 










 @Before










 public void before() {










 public BiDiIFDSSolverTest(TabulationProblemExchange exchange) {










  this.exchange = exchange;










 forwardHelper = new TestHelper();










 backwardHelper = new TestHelper();










 }





















 @Parameters(name="{0}")










 public static Collection<Object[]> parameters() {










 LinkedList<Object[]> result = Lists.newLinkedList();










 result.add(new Object[] {TabulationProblemExchange.AsSpecified});










 result.add(new Object[] {TabulationProblemExchange.ExchangeForwardAndBackward});










 return result;










 }










 










 @Test










 public void happyPath() {



......@@ -41,6 +59,128 @@ public class BiDiIFDSSolverTest {









 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").expectArtificalFlow(flow("2")));










 










 forwardHelper.runBiDiSolver(backwardHelper, "b");










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void unbalancedReturnsInBothDirections() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),










 normalStmt("b").succ("c", flow("0", "1")),










 exitStmt("c").returns(over("y"), to("z"), flow("1", "2")));










 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(flow("2")));










 










 backwardHelper.method("foo",










 startPoints("c"),










 normalStmt("c").succ("b"),










 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").returns(over("y"), to("x"), flow("2", "3")));










 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(flow("3")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void unbalancedReturnsNonMatchingCallSites() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),










 normalStmt("b").succ("c", flow("0", "1")),










 exitStmt("c").returns(over("y1"), to("z"), flow("1", "2")));










 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(/*none*/));










 










 backwardHelper.method("foo",










 startPoints("c"),










 normalStmt("c").succ("b"),










 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").returns(over("y2"), to("x"), flow("2", "3")));










 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(/*none*/));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void returnsOnlyOneDirection() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),










 normalStmt("b").succ("c", flow("0", "1")),










 exitStmt("c").returns(over("y"), to("z"), flow("1", "2")));










 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(/*none*/));










 










 backwardHelper.method("foo",










 startPoints("c"),










 normalStmt("c").succ("b"),










 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").returns(over("y"), to("x"), kill("2")));










 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(/*none*/));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void reuseSummary() {










 forwardHelper.method("foo",










 startPoints(),










 normalStmt("a").succ("b", flow("0", "1")),










 callSite("b").calls("bar", flow("1", "2")).retSite("c", kill("1")),










 callSite("c").calls("bar", flow("1", "2")).retSite("d", kill("1")),










 exitStmt("d").expectArtificalFlow(kill("1")));










 










 forwardHelper.method("bar",










 startPoints("x"),










 normalStmt("x").succ("y", flow("2", "2")),










 exitStmt("y").returns(over("b"), to("c"), flow("2", "1"))










 .returns(over("c"), to("d"), flow("2", "1")));










 










 backwardHelper.method("foo",










 startPoints(),










 exitStmt("a").expectArtificalFlow(kill("0")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "a");










 }










 










 @Test










 public void multipleSeedsPreventReusingSummary() {










 forwardHelper.method("foo",










 startPoints(),










 normalStmt("a1").succ("b", flow("0", "1")),










 normalStmt("a2").succ("b", flow("0", "1")),










 callSite("b").calls("bar", flow(times(2), "1", "2")).retSite("c", kill(times(2), "1")),










 callSite("c").calls("bar", flow(times(2), "1", "2")).retSite("d", kill(times(2), "1")),










 exitStmt("d").expectArtificalFlow(kill(times(2), "1")));










 










 forwardHelper.method("bar",










 startPoints("x"),










 normalStmt("x").succ("y", flow("2", "2")),










 exitStmt("y").returns(over("b"), to("c"), flow(times(2), "2", "1"))










 .returns(over("c"), to("d"), flow(times(2), "2", "1")));










 










 backwardHelper.method("foo",










 startPoints(),










 exitStmt("a1").expectArtificalFlow(kill("0")),










 exitStmt("a2").expectArtificalFlow(kill("0")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "a1", "a2");










 }










 










}














test/heros/utilities/TestHelper.java








View file @ 65687218






......@@ -29,10 +29,12 @@ import com.google.common.base.Function;









import com.google.common.base.Joiner;










import com.google.common.base.Predicate;










import com.google.common.collect.HashMultimap;










import com.google.common.collect.HashMultiset;










import com.google.common.collect.Iterables;










import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Multimap;










import com.google.common.collect.Multiset;










import com.google.common.collect.Sets;





















public class TestHelper {



......@@ -43,7 +45,7 @@ public class TestHelper {









 private List<Call2ReturnEdge> call2retEdges = Lists.newLinkedList();










 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, Method> stmt2method = Maps.newHashMap();










 private Set<ExpectedFlowFunction> remainingFlowFunctions = Sets.newHashSet();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();





















 public MethodHelper method(String methodName, Statement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new Method(methodName));



......@@ -82,12 +84,28 @@ public class TestHelper {









 return new Statement(returnSite);










 }










 










 public static ExpectedFlowFunction kill(String source) {










 return kill(1, source);










 }










 










 public static ExpectedFlowFunction kill(int times, String source) {










 return new ExpectedFlowFunction(times, new Fact(source));










 }





















 public static ExpectedFlowFunction flow(String source, String... targets) {










 return flow(1, source, targets);










 }










 










 public static ExpectedFlowFunction flow(int times, String source, String... targets) {










 Fact[] targetFacts = new Fact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new Fact(targets[i]);










 }










 return new ExpectedFlowFunction(new Fact(source), targetFacts);










 return new ExpectedFlowFunction(times, new Fact(source), targetFacts);










 }










 










 public static int times(int times) {










 return times;










 }





















 public InterproceduralCFG<Statement, Method> buildIcfg() {



......@@ -227,7 +245,9 @@ public class TestHelper {




















 public void edges(Collection<Edge> edges) {










 for(Edge edge : edges) {










 remainingFlowFunctions.addAll(Lists.newArrayList(edge.flowFunctions));










 for(ExpectedFlowFunction ff : edge.flowFunctions) {










 remainingFlowFunctions.add(ff, ff.times);










 }










 










 edge.accept(new EdgeVisitor() {










 @Override



......@@ -270,8 +290,10 @@ public class TestHelper {









 public final Fact source;










 public final Fact[] targets;










 public Edge edge;










 private int times;





















 public ExpectedFlowFunction(Fact source, Fact... targets) {










 public ExpectedFlowFunction(int times, Fact source, Fact... targets) {










 this.times = times;










 this.source = source;










 this.targets = targets;










 }



......@@ -475,10 +497,15 @@ public class TestHelper {









 assertAllFlowFunctionsUsed();










 }










 










 public void runBiDiSolver(TestHelper backwardHelper, final String...initialSeeds) {










 BiDiIFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new BiDiIFDSSolver<>(










 createTabulationProblem(true, initialSeeds), 










 backwardHelper.createTabulationProblem(true, initialSeeds));










 










 public static enum TabulationProblemExchange {AsSpecified, ExchangeForwardAndBackward};










 public void runBiDiSolver(TestHelper backwardHelper, TabulationProblemExchange direction, final String...initialSeeds) {










 BiDiIFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver =










 direction == TabulationProblemExchange.AsSpecified ? 










 new BiDiIFDSSolver<>(createTabulationProblem(true, initialSeeds), 










 backwardHelper.createTabulationProblem(true, initialSeeds)) :










 new BiDiIFDSSolver<>(backwardHelper.createTabulationProblem(true, initialSeeds), 










 createTabulationProblem(true, initialSeeds));










 










 solver.solve();










 assertAllFlowFunctionsUsed();



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

65687218















Commit
65687218


authored
Jun 11, 2014
by


Johannes Lerch



Browse files




Additional tests for BiDiSolver







parent
c455fd16













Changes
2




Hide whitespace changes

Inline
Side-by-side















test/heros/BiDiIFDSSolverTest.java








View file @ 65687218






......@@ -10,22 +10,40 @@









 ******************************************************************************/










package heros;





















import org.junit.Before;










import java.util.Collection;










import java.util.LinkedList;





















import org.junit.Test;










import static heros.utilities.TestHelper.*;










import org.junit.runner.RunWith;










import org.junit.runners.Parameterized;










import org.junit.runners.Parameterized.Parameters;





















import com.google.common.collect.Lists;





















import static heros.utilities.TestHelper.*;










import heros.utilities.TestHelper;










import heros.utilities.TestHelper.TabulationProblemExchange;





















@RunWith(Parameterized.class)










public class BiDiIFDSSolverTest {





















 private TestHelper forwardHelper;










 private TestHelper backwardHelper;










 private TabulationProblemExchange exchange;










 










 @Before










 public void before() {










 public BiDiIFDSSolverTest(TabulationProblemExchange exchange) {










  this.exchange = exchange;










 forwardHelper = new TestHelper();










 backwardHelper = new TestHelper();










 }





















 @Parameters(name="{0}")










 public static Collection<Object[]> parameters() {










 LinkedList<Object[]> result = Lists.newLinkedList();










 result.add(new Object[] {TabulationProblemExchange.AsSpecified});










 result.add(new Object[] {TabulationProblemExchange.ExchangeForwardAndBackward});










 return result;










 }










 










 @Test










 public void happyPath() {



......@@ -41,6 +59,128 @@ public class BiDiIFDSSolverTest {









 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").expectArtificalFlow(flow("2")));










 










 forwardHelper.runBiDiSolver(backwardHelper, "b");










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void unbalancedReturnsInBothDirections() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),










 normalStmt("b").succ("c", flow("0", "1")),










 exitStmt("c").returns(over("y"), to("z"), flow("1", "2")));










 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(flow("2")));










 










 backwardHelper.method("foo",










 startPoints("c"),










 normalStmt("c").succ("b"),










 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").returns(over("y"), to("x"), flow("2", "3")));










 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(flow("3")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void unbalancedReturnsNonMatchingCallSites() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),










 normalStmt("b").succ("c", flow("0", "1")),










 exitStmt("c").returns(over("y1"), to("z"), flow("1", "2")));










 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(/*none*/));










 










 backwardHelper.method("foo",










 startPoints("c"),










 normalStmt("c").succ("b"),










 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").returns(over("y2"), to("x"), flow("2", "3")));










 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(/*none*/));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void returnsOnlyOneDirection() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),










 normalStmt("b").succ("c", flow("0", "1")),










 exitStmt("c").returns(over("y"), to("z"), flow("1", "2")));










 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(/*none*/));










 










 backwardHelper.method("foo",










 startPoints("c"),










 normalStmt("c").succ("b"),










 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").returns(over("y"), to("x"), kill("2")));










 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(/*none*/));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void reuseSummary() {










 forwardHelper.method("foo",










 startPoints(),










 normalStmt("a").succ("b", flow("0", "1")),










 callSite("b").calls("bar", flow("1", "2")).retSite("c", kill("1")),










 callSite("c").calls("bar", flow("1", "2")).retSite("d", kill("1")),










 exitStmt("d").expectArtificalFlow(kill("1")));










 










 forwardHelper.method("bar",










 startPoints("x"),










 normalStmt("x").succ("y", flow("2", "2")),










 exitStmt("y").returns(over("b"), to("c"), flow("2", "1"))










 .returns(over("c"), to("d"), flow("2", "1")));










 










 backwardHelper.method("foo",










 startPoints(),










 exitStmt("a").expectArtificalFlow(kill("0")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "a");










 }










 










 @Test










 public void multipleSeedsPreventReusingSummary() {










 forwardHelper.method("foo",










 startPoints(),










 normalStmt("a1").succ("b", flow("0", "1")),










 normalStmt("a2").succ("b", flow("0", "1")),










 callSite("b").calls("bar", flow(times(2), "1", "2")).retSite("c", kill(times(2), "1")),










 callSite("c").calls("bar", flow(times(2), "1", "2")).retSite("d", kill(times(2), "1")),










 exitStmt("d").expectArtificalFlow(kill(times(2), "1")));










 










 forwardHelper.method("bar",










 startPoints("x"),










 normalStmt("x").succ("y", flow("2", "2")),










 exitStmt("y").returns(over("b"), to("c"), flow(times(2), "2", "1"))










 .returns(over("c"), to("d"), flow(times(2), "2", "1")));










 










 backwardHelper.method("foo",










 startPoints(),










 exitStmt("a1").expectArtificalFlow(kill("0")),










 exitStmt("a2").expectArtificalFlow(kill("0")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "a1", "a2");










 }










 










}














test/heros/utilities/TestHelper.java








View file @ 65687218






......@@ -29,10 +29,12 @@ import com.google.common.base.Function;









import com.google.common.base.Joiner;










import com.google.common.base.Predicate;










import com.google.common.collect.HashMultimap;










import com.google.common.collect.HashMultiset;










import com.google.common.collect.Iterables;










import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Multimap;










import com.google.common.collect.Multiset;










import com.google.common.collect.Sets;





















public class TestHelper {



......@@ -43,7 +45,7 @@ public class TestHelper {









 private List<Call2ReturnEdge> call2retEdges = Lists.newLinkedList();










 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, Method> stmt2method = Maps.newHashMap();










 private Set<ExpectedFlowFunction> remainingFlowFunctions = Sets.newHashSet();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();





















 public MethodHelper method(String methodName, Statement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new Method(methodName));



......@@ -82,12 +84,28 @@ public class TestHelper {









 return new Statement(returnSite);










 }










 










 public static ExpectedFlowFunction kill(String source) {










 return kill(1, source);










 }










 










 public static ExpectedFlowFunction kill(int times, String source) {










 return new ExpectedFlowFunction(times, new Fact(source));










 }





















 public static ExpectedFlowFunction flow(String source, String... targets) {










 return flow(1, source, targets);










 }










 










 public static ExpectedFlowFunction flow(int times, String source, String... targets) {










 Fact[] targetFacts = new Fact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new Fact(targets[i]);










 }










 return new ExpectedFlowFunction(new Fact(source), targetFacts);










 return new ExpectedFlowFunction(times, new Fact(source), targetFacts);










 }










 










 public static int times(int times) {










 return times;










 }





















 public InterproceduralCFG<Statement, Method> buildIcfg() {



......@@ -227,7 +245,9 @@ public class TestHelper {




















 public void edges(Collection<Edge> edges) {










 for(Edge edge : edges) {










 remainingFlowFunctions.addAll(Lists.newArrayList(edge.flowFunctions));










 for(ExpectedFlowFunction ff : edge.flowFunctions) {










 remainingFlowFunctions.add(ff, ff.times);










 }










 










 edge.accept(new EdgeVisitor() {










 @Override



......@@ -270,8 +290,10 @@ public class TestHelper {









 public final Fact source;










 public final Fact[] targets;










 public Edge edge;










 private int times;





















 public ExpectedFlowFunction(Fact source, Fact... targets) {










 public ExpectedFlowFunction(int times, Fact source, Fact... targets) {










 this.times = times;










 this.source = source;










 this.targets = targets;










 }



......@@ -475,10 +497,15 @@ public class TestHelper {









 assertAllFlowFunctionsUsed();










 }










 










 public void runBiDiSolver(TestHelper backwardHelper, final String...initialSeeds) {










 BiDiIFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new BiDiIFDSSolver<>(










 createTabulationProblem(true, initialSeeds), 










 backwardHelper.createTabulationProblem(true, initialSeeds));










 










 public static enum TabulationProblemExchange {AsSpecified, ExchangeForwardAndBackward};










 public void runBiDiSolver(TestHelper backwardHelper, TabulationProblemExchange direction, final String...initialSeeds) {










 BiDiIFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver =










 direction == TabulationProblemExchange.AsSpecified ? 










 new BiDiIFDSSolver<>(createTabulationProblem(true, initialSeeds), 










 backwardHelper.createTabulationProblem(true, initialSeeds)) :










 new BiDiIFDSSolver<>(backwardHelper.createTabulationProblem(true, initialSeeds), 










 createTabulationProblem(true, initialSeeds));










 










 solver.solve();










 assertAllFlowFunctionsUsed();



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

65687218







Open sidebar



Joshua Garcia heros
Commits

65687218




Open sidebar

Joshua Garcia heros
Commits

65687218


Joshua GarciaherosherosCommits
65687218








Commit
65687218


authored
Jun 11, 2014
by


Johannes Lerch



Browse files




Additional tests for BiDiSolver







parent
c455fd16













Changes
2




Hide whitespace changes

Inline
Side-by-side















test/heros/BiDiIFDSSolverTest.java








View file @ 65687218






......@@ -10,22 +10,40 @@









 ******************************************************************************/










package heros;





















import org.junit.Before;










import java.util.Collection;










import java.util.LinkedList;





















import org.junit.Test;










import static heros.utilities.TestHelper.*;










import org.junit.runner.RunWith;










import org.junit.runners.Parameterized;










import org.junit.runners.Parameterized.Parameters;





















import com.google.common.collect.Lists;





















import static heros.utilities.TestHelper.*;










import heros.utilities.TestHelper;










import heros.utilities.TestHelper.TabulationProblemExchange;





















@RunWith(Parameterized.class)










public class BiDiIFDSSolverTest {





















 private TestHelper forwardHelper;










 private TestHelper backwardHelper;










 private TabulationProblemExchange exchange;










 










 @Before










 public void before() {










 public BiDiIFDSSolverTest(TabulationProblemExchange exchange) {










  this.exchange = exchange;










 forwardHelper = new TestHelper();










 backwardHelper = new TestHelper();










 }





















 @Parameters(name="{0}")










 public static Collection<Object[]> parameters() {










 LinkedList<Object[]> result = Lists.newLinkedList();










 result.add(new Object[] {TabulationProblemExchange.AsSpecified});










 result.add(new Object[] {TabulationProblemExchange.ExchangeForwardAndBackward});










 return result;










 }










 










 @Test










 public void happyPath() {



......@@ -41,6 +59,128 @@ public class BiDiIFDSSolverTest {









 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").expectArtificalFlow(flow("2")));










 










 forwardHelper.runBiDiSolver(backwardHelper, "b");










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void unbalancedReturnsInBothDirections() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),










 normalStmt("b").succ("c", flow("0", "1")),










 exitStmt("c").returns(over("y"), to("z"), flow("1", "2")));










 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(flow("2")));










 










 backwardHelper.method("foo",










 startPoints("c"),










 normalStmt("c").succ("b"),










 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").returns(over("y"), to("x"), flow("2", "3")));










 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(flow("3")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void unbalancedReturnsNonMatchingCallSites() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),










 normalStmt("b").succ("c", flow("0", "1")),










 exitStmt("c").returns(over("y1"), to("z"), flow("1", "2")));










 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(/*none*/));










 










 backwardHelper.method("foo",










 startPoints("c"),










 normalStmt("c").succ("b"),










 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").returns(over("y2"), to("x"), flow("2", "3")));










 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(/*none*/));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void returnsOnlyOneDirection() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),










 normalStmt("b").succ("c", flow("0", "1")),










 exitStmt("c").returns(over("y"), to("z"), flow("1", "2")));










 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(/*none*/));










 










 backwardHelper.method("foo",










 startPoints("c"),










 normalStmt("c").succ("b"),










 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").returns(over("y"), to("x"), kill("2")));










 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(/*none*/));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void reuseSummary() {










 forwardHelper.method("foo",










 startPoints(),










 normalStmt("a").succ("b", flow("0", "1")),










 callSite("b").calls("bar", flow("1", "2")).retSite("c", kill("1")),










 callSite("c").calls("bar", flow("1", "2")).retSite("d", kill("1")),










 exitStmt("d").expectArtificalFlow(kill("1")));










 










 forwardHelper.method("bar",










 startPoints("x"),










 normalStmt("x").succ("y", flow("2", "2")),










 exitStmt("y").returns(over("b"), to("c"), flow("2", "1"))










 .returns(over("c"), to("d"), flow("2", "1")));










 










 backwardHelper.method("foo",










 startPoints(),










 exitStmt("a").expectArtificalFlow(kill("0")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "a");










 }










 










 @Test










 public void multipleSeedsPreventReusingSummary() {










 forwardHelper.method("foo",










 startPoints(),










 normalStmt("a1").succ("b", flow("0", "1")),










 normalStmt("a2").succ("b", flow("0", "1")),










 callSite("b").calls("bar", flow(times(2), "1", "2")).retSite("c", kill(times(2), "1")),










 callSite("c").calls("bar", flow(times(2), "1", "2")).retSite("d", kill(times(2), "1")),










 exitStmt("d").expectArtificalFlow(kill(times(2), "1")));










 










 forwardHelper.method("bar",










 startPoints("x"),










 normalStmt("x").succ("y", flow("2", "2")),










 exitStmt("y").returns(over("b"), to("c"), flow(times(2), "2", "1"))










 .returns(over("c"), to("d"), flow(times(2), "2", "1")));










 










 backwardHelper.method("foo",










 startPoints(),










 exitStmt("a1").expectArtificalFlow(kill("0")),










 exitStmt("a2").expectArtificalFlow(kill("0")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "a1", "a2");










 }










 










}














test/heros/utilities/TestHelper.java








View file @ 65687218






......@@ -29,10 +29,12 @@ import com.google.common.base.Function;









import com.google.common.base.Joiner;










import com.google.common.base.Predicate;










import com.google.common.collect.HashMultimap;










import com.google.common.collect.HashMultiset;










import com.google.common.collect.Iterables;










import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Multimap;










import com.google.common.collect.Multiset;










import com.google.common.collect.Sets;





















public class TestHelper {



......@@ -43,7 +45,7 @@ public class TestHelper {









 private List<Call2ReturnEdge> call2retEdges = Lists.newLinkedList();










 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, Method> stmt2method = Maps.newHashMap();










 private Set<ExpectedFlowFunction> remainingFlowFunctions = Sets.newHashSet();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();





















 public MethodHelper method(String methodName, Statement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new Method(methodName));



......@@ -82,12 +84,28 @@ public class TestHelper {









 return new Statement(returnSite);










 }










 










 public static ExpectedFlowFunction kill(String source) {










 return kill(1, source);










 }










 










 public static ExpectedFlowFunction kill(int times, String source) {










 return new ExpectedFlowFunction(times, new Fact(source));










 }





















 public static ExpectedFlowFunction flow(String source, String... targets) {










 return flow(1, source, targets);










 }










 










 public static ExpectedFlowFunction flow(int times, String source, String... targets) {










 Fact[] targetFacts = new Fact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new Fact(targets[i]);










 }










 return new ExpectedFlowFunction(new Fact(source), targetFacts);










 return new ExpectedFlowFunction(times, new Fact(source), targetFacts);










 }










 










 public static int times(int times) {










 return times;










 }





















 public InterproceduralCFG<Statement, Method> buildIcfg() {



......@@ -227,7 +245,9 @@ public class TestHelper {




















 public void edges(Collection<Edge> edges) {










 for(Edge edge : edges) {










 remainingFlowFunctions.addAll(Lists.newArrayList(edge.flowFunctions));










 for(ExpectedFlowFunction ff : edge.flowFunctions) {










 remainingFlowFunctions.add(ff, ff.times);










 }










 










 edge.accept(new EdgeVisitor() {










 @Override



......@@ -270,8 +290,10 @@ public class TestHelper {









 public final Fact source;










 public final Fact[] targets;










 public Edge edge;










 private int times;





















 public ExpectedFlowFunction(Fact source, Fact... targets) {










 public ExpectedFlowFunction(int times, Fact source, Fact... targets) {










 this.times = times;










 this.source = source;










 this.targets = targets;










 }



......@@ -475,10 +497,15 @@ public class TestHelper {









 assertAllFlowFunctionsUsed();










 }










 










 public void runBiDiSolver(TestHelper backwardHelper, final String...initialSeeds) {










 BiDiIFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new BiDiIFDSSolver<>(










 createTabulationProblem(true, initialSeeds), 










 backwardHelper.createTabulationProblem(true, initialSeeds));










 










 public static enum TabulationProblemExchange {AsSpecified, ExchangeForwardAndBackward};










 public void runBiDiSolver(TestHelper backwardHelper, TabulationProblemExchange direction, final String...initialSeeds) {










 BiDiIFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver =










 direction == TabulationProblemExchange.AsSpecified ? 










 new BiDiIFDSSolver<>(createTabulationProblem(true, initialSeeds), 










 backwardHelper.createTabulationProblem(true, initialSeeds)) :










 new BiDiIFDSSolver<>(backwardHelper.createTabulationProblem(true, initialSeeds), 










 createTabulationProblem(true, initialSeeds));










 










 solver.solve();










 assertAllFlowFunctionsUsed();



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
65687218


authored
Jun 11, 2014
by


Johannes Lerch



Browse files




Additional tests for BiDiSolver







parent
c455fd16













Changes
2




Hide whitespace changes

Inline
Side-by-side















test/heros/BiDiIFDSSolverTest.java








View file @ 65687218






......@@ -10,22 +10,40 @@









 ******************************************************************************/










package heros;





















import org.junit.Before;










import java.util.Collection;










import java.util.LinkedList;





















import org.junit.Test;










import static heros.utilities.TestHelper.*;










import org.junit.runner.RunWith;










import org.junit.runners.Parameterized;










import org.junit.runners.Parameterized.Parameters;





















import com.google.common.collect.Lists;





















import static heros.utilities.TestHelper.*;










import heros.utilities.TestHelper;










import heros.utilities.TestHelper.TabulationProblemExchange;





















@RunWith(Parameterized.class)










public class BiDiIFDSSolverTest {





















 private TestHelper forwardHelper;










 private TestHelper backwardHelper;










 private TabulationProblemExchange exchange;










 










 @Before










 public void before() {










 public BiDiIFDSSolverTest(TabulationProblemExchange exchange) {










  this.exchange = exchange;










 forwardHelper = new TestHelper();










 backwardHelper = new TestHelper();










 }





















 @Parameters(name="{0}")










 public static Collection<Object[]> parameters() {










 LinkedList<Object[]> result = Lists.newLinkedList();










 result.add(new Object[] {TabulationProblemExchange.AsSpecified});










 result.add(new Object[] {TabulationProblemExchange.ExchangeForwardAndBackward});










 return result;










 }










 










 @Test










 public void happyPath() {



......@@ -41,6 +59,128 @@ public class BiDiIFDSSolverTest {









 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").expectArtificalFlow(flow("2")));










 










 forwardHelper.runBiDiSolver(backwardHelper, "b");










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void unbalancedReturnsInBothDirections() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),










 normalStmt("b").succ("c", flow("0", "1")),










 exitStmt("c").returns(over("y"), to("z"), flow("1", "2")));










 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(flow("2")));










 










 backwardHelper.method("foo",










 startPoints("c"),










 normalStmt("c").succ("b"),










 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").returns(over("y"), to("x"), flow("2", "3")));










 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(flow("3")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void unbalancedReturnsNonMatchingCallSites() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),










 normalStmt("b").succ("c", flow("0", "1")),










 exitStmt("c").returns(over("y1"), to("z"), flow("1", "2")));










 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(/*none*/));










 










 backwardHelper.method("foo",










 startPoints("c"),










 normalStmt("c").succ("b"),










 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").returns(over("y2"), to("x"), flow("2", "3")));










 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(/*none*/));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void returnsOnlyOneDirection() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),










 normalStmt("b").succ("c", flow("0", "1")),










 exitStmt("c").returns(over("y"), to("z"), flow("1", "2")));










 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(/*none*/));










 










 backwardHelper.method("foo",










 startPoints("c"),










 normalStmt("c").succ("b"),










 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").returns(over("y"), to("x"), kill("2")));










 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(/*none*/));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void reuseSummary() {










 forwardHelper.method("foo",










 startPoints(),










 normalStmt("a").succ("b", flow("0", "1")),










 callSite("b").calls("bar", flow("1", "2")).retSite("c", kill("1")),










 callSite("c").calls("bar", flow("1", "2")).retSite("d", kill("1")),










 exitStmt("d").expectArtificalFlow(kill("1")));










 










 forwardHelper.method("bar",










 startPoints("x"),










 normalStmt("x").succ("y", flow("2", "2")),










 exitStmt("y").returns(over("b"), to("c"), flow("2", "1"))










 .returns(over("c"), to("d"), flow("2", "1")));










 










 backwardHelper.method("foo",










 startPoints(),










 exitStmt("a").expectArtificalFlow(kill("0")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "a");










 }










 










 @Test










 public void multipleSeedsPreventReusingSummary() {










 forwardHelper.method("foo",










 startPoints(),










 normalStmt("a1").succ("b", flow("0", "1")),










 normalStmt("a2").succ("b", flow("0", "1")),










 callSite("b").calls("bar", flow(times(2), "1", "2")).retSite("c", kill(times(2), "1")),










 callSite("c").calls("bar", flow(times(2), "1", "2")).retSite("d", kill(times(2), "1")),










 exitStmt("d").expectArtificalFlow(kill(times(2), "1")));










 










 forwardHelper.method("bar",










 startPoints("x"),










 normalStmt("x").succ("y", flow("2", "2")),










 exitStmt("y").returns(over("b"), to("c"), flow(times(2), "2", "1"))










 .returns(over("c"), to("d"), flow(times(2), "2", "1")));










 










 backwardHelper.method("foo",










 startPoints(),










 exitStmt("a1").expectArtificalFlow(kill("0")),










 exitStmt("a2").expectArtificalFlow(kill("0")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "a1", "a2");










 }










 










}














test/heros/utilities/TestHelper.java








View file @ 65687218






......@@ -29,10 +29,12 @@ import com.google.common.base.Function;









import com.google.common.base.Joiner;










import com.google.common.base.Predicate;










import com.google.common.collect.HashMultimap;










import com.google.common.collect.HashMultiset;










import com.google.common.collect.Iterables;










import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Multimap;










import com.google.common.collect.Multiset;










import com.google.common.collect.Sets;





















public class TestHelper {



......@@ -43,7 +45,7 @@ public class TestHelper {









 private List<Call2ReturnEdge> call2retEdges = Lists.newLinkedList();










 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, Method> stmt2method = Maps.newHashMap();










 private Set<ExpectedFlowFunction> remainingFlowFunctions = Sets.newHashSet();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();





















 public MethodHelper method(String methodName, Statement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new Method(methodName));



......@@ -82,12 +84,28 @@ public class TestHelper {









 return new Statement(returnSite);










 }










 










 public static ExpectedFlowFunction kill(String source) {










 return kill(1, source);










 }










 










 public static ExpectedFlowFunction kill(int times, String source) {










 return new ExpectedFlowFunction(times, new Fact(source));










 }





















 public static ExpectedFlowFunction flow(String source, String... targets) {










 return flow(1, source, targets);










 }










 










 public static ExpectedFlowFunction flow(int times, String source, String... targets) {










 Fact[] targetFacts = new Fact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new Fact(targets[i]);










 }










 return new ExpectedFlowFunction(new Fact(source), targetFacts);










 return new ExpectedFlowFunction(times, new Fact(source), targetFacts);










 }










 










 public static int times(int times) {










 return times;










 }





















 public InterproceduralCFG<Statement, Method> buildIcfg() {



......@@ -227,7 +245,9 @@ public class TestHelper {




















 public void edges(Collection<Edge> edges) {










 for(Edge edge : edges) {










 remainingFlowFunctions.addAll(Lists.newArrayList(edge.flowFunctions));










 for(ExpectedFlowFunction ff : edge.flowFunctions) {










 remainingFlowFunctions.add(ff, ff.times);










 }










 










 edge.accept(new EdgeVisitor() {










 @Override



......@@ -270,8 +290,10 @@ public class TestHelper {









 public final Fact source;










 public final Fact[] targets;










 public Edge edge;










 private int times;





















 public ExpectedFlowFunction(Fact source, Fact... targets) {










 public ExpectedFlowFunction(int times, Fact source, Fact... targets) {










 this.times = times;










 this.source = source;










 this.targets = targets;










 }



......@@ -475,10 +497,15 @@ public class TestHelper {









 assertAllFlowFunctionsUsed();










 }










 










 public void runBiDiSolver(TestHelper backwardHelper, final String...initialSeeds) {










 BiDiIFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new BiDiIFDSSolver<>(










 createTabulationProblem(true, initialSeeds), 










 backwardHelper.createTabulationProblem(true, initialSeeds));










 










 public static enum TabulationProblemExchange {AsSpecified, ExchangeForwardAndBackward};










 public void runBiDiSolver(TestHelper backwardHelper, TabulationProblemExchange direction, final String...initialSeeds) {










 BiDiIFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver =










 direction == TabulationProblemExchange.AsSpecified ? 










 new BiDiIFDSSolver<>(createTabulationProblem(true, initialSeeds), 










 backwardHelper.createTabulationProblem(true, initialSeeds)) :










 new BiDiIFDSSolver<>(backwardHelper.createTabulationProblem(true, initialSeeds), 










 createTabulationProblem(true, initialSeeds));










 










 solver.solve();










 assertAllFlowFunctionsUsed();



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
65687218


authored
Jun 11, 2014
by


Johannes Lerch



Browse files



Commit
65687218


authored
Jun 11, 2014
by


Johannes Lerch

65687218authoredbyJohannes Lerch

Additional tests for BiDiSolver






parent
c455fd16
















parent
c455fd16





parent












Changes
2
2


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










test/heros/BiDiIFDSSolverTest.java








View file @ 65687218






......@@ -10,22 +10,40 @@









 ******************************************************************************/










package heros;





















import org.junit.Before;










import java.util.Collection;










import java.util.LinkedList;





















import org.junit.Test;










import static heros.utilities.TestHelper.*;










import org.junit.runner.RunWith;










import org.junit.runners.Parameterized;










import org.junit.runners.Parameterized.Parameters;





















import com.google.common.collect.Lists;





















import static heros.utilities.TestHelper.*;










import heros.utilities.TestHelper;










import heros.utilities.TestHelper.TabulationProblemExchange;





















@RunWith(Parameterized.class)










public class BiDiIFDSSolverTest {





















 private TestHelper forwardHelper;










 private TestHelper backwardHelper;










 private TabulationProblemExchange exchange;










 










 @Before










 public void before() {










 public BiDiIFDSSolverTest(TabulationProblemExchange exchange) {










  this.exchange = exchange;










 forwardHelper = new TestHelper();










 backwardHelper = new TestHelper();










 }





















 @Parameters(name="{0}")










 public static Collection<Object[]> parameters() {










 LinkedList<Object[]> result = Lists.newLinkedList();










 result.add(new Object[] {TabulationProblemExchange.AsSpecified});










 result.add(new Object[] {TabulationProblemExchange.ExchangeForwardAndBackward});










 return result;










 }










 










 @Test










 public void happyPath() {



......@@ -41,6 +59,128 @@ public class BiDiIFDSSolverTest {









 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").expectArtificalFlow(flow("2")));










 










 forwardHelper.runBiDiSolver(backwardHelper, "b");










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void unbalancedReturnsInBothDirections() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),










 normalStmt("b").succ("c", flow("0", "1")),










 exitStmt("c").returns(over("y"), to("z"), flow("1", "2")));










 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(flow("2")));










 










 backwardHelper.method("foo",










 startPoints("c"),










 normalStmt("c").succ("b"),










 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").returns(over("y"), to("x"), flow("2", "3")));










 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(flow("3")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void unbalancedReturnsNonMatchingCallSites() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),










 normalStmt("b").succ("c", flow("0", "1")),










 exitStmt("c").returns(over("y1"), to("z"), flow("1", "2")));










 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(/*none*/));










 










 backwardHelper.method("foo",










 startPoints("c"),










 normalStmt("c").succ("b"),










 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").returns(over("y2"), to("x"), flow("2", "3")));










 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(/*none*/));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void returnsOnlyOneDirection() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),










 normalStmt("b").succ("c", flow("0", "1")),










 exitStmt("c").returns(over("y"), to("z"), flow("1", "2")));










 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(/*none*/));










 










 backwardHelper.method("foo",










 startPoints("c"),










 normalStmt("c").succ("b"),










 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").returns(over("y"), to("x"), kill("2")));










 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(/*none*/));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void reuseSummary() {










 forwardHelper.method("foo",










 startPoints(),










 normalStmt("a").succ("b", flow("0", "1")),










 callSite("b").calls("bar", flow("1", "2")).retSite("c", kill("1")),










 callSite("c").calls("bar", flow("1", "2")).retSite("d", kill("1")),










 exitStmt("d").expectArtificalFlow(kill("1")));










 










 forwardHelper.method("bar",










 startPoints("x"),










 normalStmt("x").succ("y", flow("2", "2")),










 exitStmt("y").returns(over("b"), to("c"), flow("2", "1"))










 .returns(over("c"), to("d"), flow("2", "1")));










 










 backwardHelper.method("foo",










 startPoints(),










 exitStmt("a").expectArtificalFlow(kill("0")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "a");










 }










 










 @Test










 public void multipleSeedsPreventReusingSummary() {










 forwardHelper.method("foo",










 startPoints(),










 normalStmt("a1").succ("b", flow("0", "1")),










 normalStmt("a2").succ("b", flow("0", "1")),










 callSite("b").calls("bar", flow(times(2), "1", "2")).retSite("c", kill(times(2), "1")),










 callSite("c").calls("bar", flow(times(2), "1", "2")).retSite("d", kill(times(2), "1")),










 exitStmt("d").expectArtificalFlow(kill(times(2), "1")));










 










 forwardHelper.method("bar",










 startPoints("x"),










 normalStmt("x").succ("y", flow("2", "2")),










 exitStmt("y").returns(over("b"), to("c"), flow(times(2), "2", "1"))










 .returns(over("c"), to("d"), flow(times(2), "2", "1")));










 










 backwardHelper.method("foo",










 startPoints(),










 exitStmt("a1").expectArtificalFlow(kill("0")),










 exitStmt("a2").expectArtificalFlow(kill("0")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "a1", "a2");










 }










 










}














test/heros/utilities/TestHelper.java








View file @ 65687218






......@@ -29,10 +29,12 @@ import com.google.common.base.Function;









import com.google.common.base.Joiner;










import com.google.common.base.Predicate;










import com.google.common.collect.HashMultimap;










import com.google.common.collect.HashMultiset;










import com.google.common.collect.Iterables;










import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Multimap;










import com.google.common.collect.Multiset;










import com.google.common.collect.Sets;





















public class TestHelper {



......@@ -43,7 +45,7 @@ public class TestHelper {









 private List<Call2ReturnEdge> call2retEdges = Lists.newLinkedList();










 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, Method> stmt2method = Maps.newHashMap();










 private Set<ExpectedFlowFunction> remainingFlowFunctions = Sets.newHashSet();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();





















 public MethodHelper method(String methodName, Statement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new Method(methodName));



......@@ -82,12 +84,28 @@ public class TestHelper {









 return new Statement(returnSite);










 }










 










 public static ExpectedFlowFunction kill(String source) {










 return kill(1, source);










 }










 










 public static ExpectedFlowFunction kill(int times, String source) {










 return new ExpectedFlowFunction(times, new Fact(source));










 }





















 public static ExpectedFlowFunction flow(String source, String... targets) {










 return flow(1, source, targets);










 }










 










 public static ExpectedFlowFunction flow(int times, String source, String... targets) {










 Fact[] targetFacts = new Fact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new Fact(targets[i]);










 }










 return new ExpectedFlowFunction(new Fact(source), targetFacts);










 return new ExpectedFlowFunction(times, new Fact(source), targetFacts);










 }










 










 public static int times(int times) {










 return times;










 }





















 public InterproceduralCFG<Statement, Method> buildIcfg() {



......@@ -227,7 +245,9 @@ public class TestHelper {




















 public void edges(Collection<Edge> edges) {










 for(Edge edge : edges) {










 remainingFlowFunctions.addAll(Lists.newArrayList(edge.flowFunctions));










 for(ExpectedFlowFunction ff : edge.flowFunctions) {










 remainingFlowFunctions.add(ff, ff.times);










 }










 










 edge.accept(new EdgeVisitor() {










 @Override



......@@ -270,8 +290,10 @@ public class TestHelper {









 public final Fact source;










 public final Fact[] targets;










 public Edge edge;










 private int times;





















 public ExpectedFlowFunction(Fact source, Fact... targets) {










 public ExpectedFlowFunction(int times, Fact source, Fact... targets) {










 this.times = times;










 this.source = source;










 this.targets = targets;










 }



......@@ -475,10 +497,15 @@ public class TestHelper {









 assertAllFlowFunctionsUsed();










 }










 










 public void runBiDiSolver(TestHelper backwardHelper, final String...initialSeeds) {










 BiDiIFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new BiDiIFDSSolver<>(










 createTabulationProblem(true, initialSeeds), 










 backwardHelper.createTabulationProblem(true, initialSeeds));










 










 public static enum TabulationProblemExchange {AsSpecified, ExchangeForwardAndBackward};










 public void runBiDiSolver(TestHelper backwardHelper, TabulationProblemExchange direction, final String...initialSeeds) {










 BiDiIFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver =










 direction == TabulationProblemExchange.AsSpecified ? 










 new BiDiIFDSSolver<>(createTabulationProblem(true, initialSeeds), 










 backwardHelper.createTabulationProblem(true, initialSeeds)) :










 new BiDiIFDSSolver<>(backwardHelper.createTabulationProblem(true, initialSeeds), 










 createTabulationProblem(true, initialSeeds));










 










 solver.solve();










 assertAllFlowFunctionsUsed();



......














test/heros/BiDiIFDSSolverTest.java








View file @ 65687218






......@@ -10,22 +10,40 @@









 ******************************************************************************/










package heros;





















import org.junit.Before;










import java.util.Collection;










import java.util.LinkedList;





















import org.junit.Test;










import static heros.utilities.TestHelper.*;










import org.junit.runner.RunWith;










import org.junit.runners.Parameterized;










import org.junit.runners.Parameterized.Parameters;





















import com.google.common.collect.Lists;





















import static heros.utilities.TestHelper.*;










import heros.utilities.TestHelper;










import heros.utilities.TestHelper.TabulationProblemExchange;





















@RunWith(Parameterized.class)










public class BiDiIFDSSolverTest {





















 private TestHelper forwardHelper;










 private TestHelper backwardHelper;










 private TabulationProblemExchange exchange;










 










 @Before










 public void before() {










 public BiDiIFDSSolverTest(TabulationProblemExchange exchange) {










  this.exchange = exchange;










 forwardHelper = new TestHelper();










 backwardHelper = new TestHelper();










 }





















 @Parameters(name="{0}")










 public static Collection<Object[]> parameters() {










 LinkedList<Object[]> result = Lists.newLinkedList();










 result.add(new Object[] {TabulationProblemExchange.AsSpecified});










 result.add(new Object[] {TabulationProblemExchange.ExchangeForwardAndBackward});










 return result;










 }










 










 @Test










 public void happyPath() {



......@@ -41,6 +59,128 @@ public class BiDiIFDSSolverTest {









 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").expectArtificalFlow(flow("2")));










 










 forwardHelper.runBiDiSolver(backwardHelper, "b");










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void unbalancedReturnsInBothDirections() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),










 normalStmt("b").succ("c", flow("0", "1")),










 exitStmt("c").returns(over("y"), to("z"), flow("1", "2")));










 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(flow("2")));










 










 backwardHelper.method("foo",










 startPoints("c"),










 normalStmt("c").succ("b"),










 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").returns(over("y"), to("x"), flow("2", "3")));










 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(flow("3")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void unbalancedReturnsNonMatchingCallSites() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),










 normalStmt("b").succ("c", flow("0", "1")),










 exitStmt("c").returns(over("y1"), to("z"), flow("1", "2")));










 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(/*none*/));










 










 backwardHelper.method("foo",










 startPoints("c"),










 normalStmt("c").succ("b"),










 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").returns(over("y2"), to("x"), flow("2", "3")));










 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(/*none*/));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void returnsOnlyOneDirection() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),










 normalStmt("b").succ("c", flow("0", "1")),










 exitStmt("c").returns(over("y"), to("z"), flow("1", "2")));










 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(/*none*/));










 










 backwardHelper.method("foo",










 startPoints("c"),










 normalStmt("c").succ("b"),










 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").returns(over("y"), to("x"), kill("2")));










 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(/*none*/));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void reuseSummary() {










 forwardHelper.method("foo",










 startPoints(),










 normalStmt("a").succ("b", flow("0", "1")),










 callSite("b").calls("bar", flow("1", "2")).retSite("c", kill("1")),










 callSite("c").calls("bar", flow("1", "2")).retSite("d", kill("1")),










 exitStmt("d").expectArtificalFlow(kill("1")));










 










 forwardHelper.method("bar",










 startPoints("x"),










 normalStmt("x").succ("y", flow("2", "2")),










 exitStmt("y").returns(over("b"), to("c"), flow("2", "1"))










 .returns(over("c"), to("d"), flow("2", "1")));










 










 backwardHelper.method("foo",










 startPoints(),










 exitStmt("a").expectArtificalFlow(kill("0")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "a");










 }










 










 @Test










 public void multipleSeedsPreventReusingSummary() {










 forwardHelper.method("foo",










 startPoints(),










 normalStmt("a1").succ("b", flow("0", "1")),










 normalStmt("a2").succ("b", flow("0", "1")),










 callSite("b").calls("bar", flow(times(2), "1", "2")).retSite("c", kill(times(2), "1")),










 callSite("c").calls("bar", flow(times(2), "1", "2")).retSite("d", kill(times(2), "1")),










 exitStmt("d").expectArtificalFlow(kill(times(2), "1")));










 










 forwardHelper.method("bar",










 startPoints("x"),










 normalStmt("x").succ("y", flow("2", "2")),










 exitStmt("y").returns(over("b"), to("c"), flow(times(2), "2", "1"))










 .returns(over("c"), to("d"), flow(times(2), "2", "1")));










 










 backwardHelper.method("foo",










 startPoints(),










 exitStmt("a1").expectArtificalFlow(kill("0")),










 exitStmt("a2").expectArtificalFlow(kill("0")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "a1", "a2");










 }










 










}












test/heros/BiDiIFDSSolverTest.java








View file @ 65687218








test/heros/BiDiIFDSSolverTest.java










View file @ 65687218


65687218



......@@ -10,22 +10,40 @@









 ******************************************************************************/










package heros;





















import org.junit.Before;










import java.util.Collection;










import java.util.LinkedList;





















import org.junit.Test;










import static heros.utilities.TestHelper.*;










import org.junit.runner.RunWith;










import org.junit.runners.Parameterized;










import org.junit.runners.Parameterized.Parameters;





















import com.google.common.collect.Lists;





















import static heros.utilities.TestHelper.*;










import heros.utilities.TestHelper;










import heros.utilities.TestHelper.TabulationProblemExchange;





















@RunWith(Parameterized.class)










public class BiDiIFDSSolverTest {





















 private TestHelper forwardHelper;










 private TestHelper backwardHelper;










 private TabulationProblemExchange exchange;










 










 @Before










 public void before() {










 public BiDiIFDSSolverTest(TabulationProblemExchange exchange) {










  this.exchange = exchange;










 forwardHelper = new TestHelper();










 backwardHelper = new TestHelper();










 }





















 @Parameters(name="{0}")










 public static Collection<Object[]> parameters() {










 LinkedList<Object[]> result = Lists.newLinkedList();










 result.add(new Object[] {TabulationProblemExchange.AsSpecified});










 result.add(new Object[] {TabulationProblemExchange.ExchangeForwardAndBackward});










 return result;










 }










 










 @Test










 public void happyPath() {



......@@ -41,6 +59,128 @@ public class BiDiIFDSSolverTest {









 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").expectArtificalFlow(flow("2")));










 










 forwardHelper.runBiDiSolver(backwardHelper, "b");










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void unbalancedReturnsInBothDirections() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),










 normalStmt("b").succ("c", flow("0", "1")),










 exitStmt("c").returns(over("y"), to("z"), flow("1", "2")));










 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(flow("2")));










 










 backwardHelper.method("foo",










 startPoints("c"),










 normalStmt("c").succ("b"),










 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").returns(over("y"), to("x"), flow("2", "3")));










 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(flow("3")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void unbalancedReturnsNonMatchingCallSites() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),










 normalStmt("b").succ("c", flow("0", "1")),










 exitStmt("c").returns(over("y1"), to("z"), flow("1", "2")));










 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(/*none*/));










 










 backwardHelper.method("foo",










 startPoints("c"),










 normalStmt("c").succ("b"),










 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").returns(over("y2"), to("x"), flow("2", "3")));










 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(/*none*/));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void returnsOnlyOneDirection() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),










 normalStmt("b").succ("c", flow("0", "1")),










 exitStmt("c").returns(over("y"), to("z"), flow("1", "2")));










 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(/*none*/));










 










 backwardHelper.method("foo",










 startPoints("c"),










 normalStmt("c").succ("b"),










 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").returns(over("y"), to("x"), kill("2")));










 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(/*none*/));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void reuseSummary() {










 forwardHelper.method("foo",










 startPoints(),










 normalStmt("a").succ("b", flow("0", "1")),










 callSite("b").calls("bar", flow("1", "2")).retSite("c", kill("1")),










 callSite("c").calls("bar", flow("1", "2")).retSite("d", kill("1")),










 exitStmt("d").expectArtificalFlow(kill("1")));










 










 forwardHelper.method("bar",










 startPoints("x"),










 normalStmt("x").succ("y", flow("2", "2")),










 exitStmt("y").returns(over("b"), to("c"), flow("2", "1"))










 .returns(over("c"), to("d"), flow("2", "1")));










 










 backwardHelper.method("foo",










 startPoints(),










 exitStmt("a").expectArtificalFlow(kill("0")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "a");










 }










 










 @Test










 public void multipleSeedsPreventReusingSummary() {










 forwardHelper.method("foo",










 startPoints(),










 normalStmt("a1").succ("b", flow("0", "1")),










 normalStmt("a2").succ("b", flow("0", "1")),










 callSite("b").calls("bar", flow(times(2), "1", "2")).retSite("c", kill(times(2), "1")),










 callSite("c").calls("bar", flow(times(2), "1", "2")).retSite("d", kill(times(2), "1")),










 exitStmt("d").expectArtificalFlow(kill(times(2), "1")));










 










 forwardHelper.method("bar",










 startPoints("x"),










 normalStmt("x").succ("y", flow("2", "2")),










 exitStmt("y").returns(over("b"), to("c"), flow(times(2), "2", "1"))










 .returns(over("c"), to("d"), flow(times(2), "2", "1")));










 










 backwardHelper.method("foo",










 startPoints(),










 exitStmt("a1").expectArtificalFlow(kill("0")),










 exitStmt("a2").expectArtificalFlow(kill("0")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "a1", "a2");










 }










 










}






......@@ -10,22 +10,40 @@









 ******************************************************************************/










package heros;





















import org.junit.Before;










import java.util.Collection;










import java.util.LinkedList;





















import org.junit.Test;










import static heros.utilities.TestHelper.*;










import org.junit.runner.RunWith;










import org.junit.runners.Parameterized;










import org.junit.runners.Parameterized.Parameters;





















import com.google.common.collect.Lists;





















import static heros.utilities.TestHelper.*;










import heros.utilities.TestHelper;










import heros.utilities.TestHelper.TabulationProblemExchange;





















@RunWith(Parameterized.class)










public class BiDiIFDSSolverTest {





















 private TestHelper forwardHelper;










 private TestHelper backwardHelper;










 private TabulationProblemExchange exchange;










 










 @Before










 public void before() {










 public BiDiIFDSSolverTest(TabulationProblemExchange exchange) {










  this.exchange = exchange;










 forwardHelper = new TestHelper();










 backwardHelper = new TestHelper();










 }





















 @Parameters(name="{0}")










 public static Collection<Object[]> parameters() {










 LinkedList<Object[]> result = Lists.newLinkedList();










 result.add(new Object[] {TabulationProblemExchange.AsSpecified});










 result.add(new Object[] {TabulationProblemExchange.ExchangeForwardAndBackward});










 return result;










 }










 










 @Test










 public void happyPath() {



......@@ -41,6 +59,128 @@ public class BiDiIFDSSolverTest {









 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").expectArtificalFlow(flow("2")));










 










 forwardHelper.runBiDiSolver(backwardHelper, "b");










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void unbalancedReturnsInBothDirections() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),










 normalStmt("b").succ("c", flow("0", "1")),










 exitStmt("c").returns(over("y"), to("z"), flow("1", "2")));










 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(flow("2")));










 










 backwardHelper.method("foo",










 startPoints("c"),










 normalStmt("c").succ("b"),










 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").returns(over("y"), to("x"), flow("2", "3")));










 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(flow("3")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void unbalancedReturnsNonMatchingCallSites() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),










 normalStmt("b").succ("c", flow("0", "1")),










 exitStmt("c").returns(over("y1"), to("z"), flow("1", "2")));










 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(/*none*/));










 










 backwardHelper.method("foo",










 startPoints("c"),










 normalStmt("c").succ("b"),










 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").returns(over("y2"), to("x"), flow("2", "3")));










 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(/*none*/));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void returnsOnlyOneDirection() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),










 normalStmt("b").succ("c", flow("0", "1")),










 exitStmt("c").returns(over("y"), to("z"), flow("1", "2")));










 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(/*none*/));










 










 backwardHelper.method("foo",










 startPoints("c"),










 normalStmt("c").succ("b"),










 normalStmt("b").succ("a", flow("0", "2")),










 exitStmt("a").returns(over("y"), to("x"), kill("2")));










 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(/*none*/));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }










 










 @Test










 public void reuseSummary() {










 forwardHelper.method("foo",










 startPoints(),










 normalStmt("a").succ("b", flow("0", "1")),










 callSite("b").calls("bar", flow("1", "2")).retSite("c", kill("1")),










 callSite("c").calls("bar", flow("1", "2")).retSite("d", kill("1")),










 exitStmt("d").expectArtificalFlow(kill("1")));










 










 forwardHelper.method("bar",










 startPoints("x"),










 normalStmt("x").succ("y", flow("2", "2")),










 exitStmt("y").returns(over("b"), to("c"), flow("2", "1"))










 .returns(over("c"), to("d"), flow("2", "1")));










 










 backwardHelper.method("foo",










 startPoints(),










 exitStmt("a").expectArtificalFlow(kill("0")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "a");










 }










 










 @Test










 public void multipleSeedsPreventReusingSummary() {










 forwardHelper.method("foo",










 startPoints(),










 normalStmt("a1").succ("b", flow("0", "1")),










 normalStmt("a2").succ("b", flow("0", "1")),










 callSite("b").calls("bar", flow(times(2), "1", "2")).retSite("c", kill(times(2), "1")),










 callSite("c").calls("bar", flow(times(2), "1", "2")).retSite("d", kill(times(2), "1")),










 exitStmt("d").expectArtificalFlow(kill(times(2), "1")));










 










 forwardHelper.method("bar",










 startPoints("x"),










 normalStmt("x").succ("y", flow("2", "2")),










 exitStmt("y").returns(over("b"), to("c"), flow(times(2), "2", "1"))










 .returns(over("c"), to("d"), flow(times(2), "2", "1")));










 










 backwardHelper.method("foo",










 startPoints(),










 exitStmt("a1").expectArtificalFlow(kill("0")),










 exitStmt("a2").expectArtificalFlow(kill("0")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "a1", "a2");










 }










 










}


 ******************************************************************************/ ******************************************************************************/package heros;packageheros;import org.junit.Before;importorg.junit.Before;import java.util.Collection;importjava.util.Collection;import java.util.LinkedList;importjava.util.LinkedList;import org.junit.Test;importorg.junit.Test;import static heros.utilities.TestHelper.*;importstaticheros.utilities.TestHelper.*;import org.junit.runner.RunWith;importorg.junit.runner.RunWith;import org.junit.runners.Parameterized;importorg.junit.runners.Parameterized;import org.junit.runners.Parameterized.Parameters;importorg.junit.runners.Parameterized.Parameters;import com.google.common.collect.Lists;importcom.google.common.collect.Lists;import static heros.utilities.TestHelper.*;importstaticheros.utilities.TestHelper.*;import heros.utilities.TestHelper;importheros.utilities.TestHelper;import heros.utilities.TestHelper.TabulationProblemExchange;importheros.utilities.TestHelper.TabulationProblemExchange;@RunWith(Parameterized.class)@RunWith(Parameterized.class)public class BiDiIFDSSolverTest {publicclassBiDiIFDSSolverTest{ private TestHelper forwardHelper;privateTestHelperforwardHelper; private TestHelper backwardHelper;privateTestHelperbackwardHelper; private TabulationProblemExchange exchange;privateTabulationProblemExchangeexchange;  @Before@Before@Before public void before() {publicpublic voidvoid beforebefore()() {{ public BiDiIFDSSolverTest(TabulationProblemExchange exchange) {publicpublic BiDiIFDSSolverTestBiDiIFDSSolverTest((TabulationProblemExchangeTabulationProblemExchange exchangeexchange)) {{  this.exchange = exchange; thisthis..exchangeexchange == exchangeexchange;; forwardHelper = new TestHelper();forwardHelper=newTestHelper(); backwardHelper = new TestHelper();backwardHelper=newTestHelper(); }} @Parameters(name="{0}")@Parameters(name="{0}") public static Collection<Object[]> parameters() {publicstaticCollection<Object[]>parameters(){ LinkedList<Object[]> result = Lists.newLinkedList();LinkedList<Object[]>result=Lists.newLinkedList(); result.add(new Object[] {TabulationProblemExchange.AsSpecified});result.add(newObject[]{TabulationProblemExchange.AsSpecified}); result.add(new Object[] {TabulationProblemExchange.ExchangeForwardAndBackward});result.add(newObject[]{TabulationProblemExchange.ExchangeForwardAndBackward}); return result;returnresult; }}  @Test@Test public void happyPath() {publicvoidhappyPath(){ normalStmt("b").succ("a", flow("0", "2")),normalStmt("b").succ("a",flow("0","2")), exitStmt("a").expectArtificalFlow(flow("2")));exitStmt("a").expectArtificalFlow(flow("2")));  forwardHelper.runBiDiSolver(backwardHelper, "b");forwardHelper.runBiDiSolver(backwardHelper,"b"); forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");forwardHelper.runBiDiSolver(backwardHelper,exchange,"b"); }}  @Test@Test public void unbalancedReturnsInBothDirections() {publicvoidunbalancedReturnsInBothDirections(){ forwardHelper.method("foo",forwardHelper.method("foo", startPoints("a"),startPoints("a"), normalStmt("a").succ("b"),normalStmt("a").succ("b"), normalStmt("b").succ("c", flow("0", "1")),normalStmt("b").succ("c",flow("0","1")), exitStmt("c").returns(over("y"), to("z"), flow("1", "2")));exitStmt("c").returns(over("y"),to("z"),flow("1","2")));  forwardHelper.method("bar",forwardHelper.method("bar", startPoints(),startPoints(), exitStmt("z").expectArtificalFlow(flow("2")));exitStmt("z").expectArtificalFlow(flow("2")));  backwardHelper.method("foo",backwardHelper.method("foo", startPoints("c"),startPoints("c"), normalStmt("c").succ("b"),normalStmt("c").succ("b"), normalStmt("b").succ("a", flow("0", "2")),normalStmt("b").succ("a",flow("0","2")), exitStmt("a").returns(over("y"), to("x"), flow("2", "3")));exitStmt("a").returns(over("y"),to("x"),flow("2","3")));  backwardHelper.method("bar",backwardHelper.method("bar", startPoints(),startPoints(), exitStmt("x").expectArtificalFlow(flow("3")));exitStmt("x").expectArtificalFlow(flow("3")));  forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");forwardHelper.runBiDiSolver(backwardHelper,exchange,"b"); }}  @Test@Test public void unbalancedReturnsNonMatchingCallSites() {publicvoidunbalancedReturnsNonMatchingCallSites(){ forwardHelper.method("foo",forwardHelper.method("foo", startPoints("a"),startPoints("a"), normalStmt("a").succ("b"),normalStmt("a").succ("b"), normalStmt("b").succ("c", flow("0", "1")),normalStmt("b").succ("c",flow("0","1")), exitStmt("c").returns(over("y1"), to("z"), flow("1", "2")));exitStmt("c").returns(over("y1"),to("z"),flow("1","2")));  forwardHelper.method("bar",forwardHelper.method("bar", startPoints(),startPoints(), exitStmt("z").expectArtificalFlow(/*none*/));exitStmt("z").expectArtificalFlow(/*none*/));  backwardHelper.method("foo",backwardHelper.method("foo", startPoints("c"),startPoints("c"), normalStmt("c").succ("b"),normalStmt("c").succ("b"), normalStmt("b").succ("a", flow("0", "2")),normalStmt("b").succ("a",flow("0","2")), exitStmt("a").returns(over("y2"), to("x"), flow("2", "3")));exitStmt("a").returns(over("y2"),to("x"),flow("2","3")));  backwardHelper.method("bar",backwardHelper.method("bar", startPoints(),startPoints(), exitStmt("x").expectArtificalFlow(/*none*/));exitStmt("x").expectArtificalFlow(/*none*/));  forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");forwardHelper.runBiDiSolver(backwardHelper,exchange,"b"); }}  @Test@Test public void returnsOnlyOneDirection() {publicvoidreturnsOnlyOneDirection(){ forwardHelper.method("foo",forwardHelper.method("foo", startPoints("a"),startPoints("a"), normalStmt("a").succ("b"),normalStmt("a").succ("b"), normalStmt("b").succ("c", flow("0", "1")),normalStmt("b").succ("c",flow("0","1")), exitStmt("c").returns(over("y"), to("z"), flow("1", "2")));exitStmt("c").returns(over("y"),to("z"),flow("1","2")));  forwardHelper.method("bar",forwardHelper.method("bar", startPoints(),startPoints(), exitStmt("z").expectArtificalFlow(/*none*/));exitStmt("z").expectArtificalFlow(/*none*/));  backwardHelper.method("foo",backwardHelper.method("foo", startPoints("c"),startPoints("c"), normalStmt("c").succ("b"),normalStmt("c").succ("b"), normalStmt("b").succ("a", flow("0", "2")),normalStmt("b").succ("a",flow("0","2")), exitStmt("a").returns(over("y"), to("x"), kill("2")));exitStmt("a").returns(over("y"),to("x"),kill("2")));  backwardHelper.method("bar",backwardHelper.method("bar", startPoints(),startPoints(), exitStmt("x").expectArtificalFlow(/*none*/));exitStmt("x").expectArtificalFlow(/*none*/));  forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");forwardHelper.runBiDiSolver(backwardHelper,exchange,"b"); }}  @Test@Test public void reuseSummary() {publicvoidreuseSummary(){ forwardHelper.method("foo",forwardHelper.method("foo", startPoints(),startPoints(), normalStmt("a").succ("b", flow("0", "1")),normalStmt("a").succ("b",flow("0","1")), callSite("b").calls("bar", flow("1", "2")).retSite("c", kill("1")),callSite("b").calls("bar",flow("1","2")).retSite("c",kill("1")), callSite("c").calls("bar", flow("1", "2")).retSite("d", kill("1")),callSite("c").calls("bar",flow("1","2")).retSite("d",kill("1")), exitStmt("d").expectArtificalFlow(kill("1")));exitStmt("d").expectArtificalFlow(kill("1")));  forwardHelper.method("bar",forwardHelper.method("bar", startPoints("x"),startPoints("x"), normalStmt("x").succ("y", flow("2", "2")),normalStmt("x").succ("y",flow("2","2")), exitStmt("y").returns(over("b"), to("c"), flow("2", "1"))exitStmt("y").returns(over("b"),to("c"),flow("2","1")) .returns(over("c"), to("d"), flow("2", "1")));.returns(over("c"),to("d"),flow("2","1")));  backwardHelper.method("foo",backwardHelper.method("foo", startPoints(),startPoints(), exitStmt("a").expectArtificalFlow(kill("0")));exitStmt("a").expectArtificalFlow(kill("0")));  forwardHelper.runBiDiSolver(backwardHelper, exchange, "a");forwardHelper.runBiDiSolver(backwardHelper,exchange,"a"); }}  @Test@Test public void multipleSeedsPreventReusingSummary() {publicvoidmultipleSeedsPreventReusingSummary(){ forwardHelper.method("foo",forwardHelper.method("foo", startPoints(),startPoints(), normalStmt("a1").succ("b", flow("0", "1")),normalStmt("a1").succ("b",flow("0","1")), normalStmt("a2").succ("b", flow("0", "1")),normalStmt("a2").succ("b",flow("0","1")), callSite("b").calls("bar", flow(times(2), "1", "2")).retSite("c", kill(times(2), "1")),callSite("b").calls("bar",flow(times(2),"1","2")).retSite("c",kill(times(2),"1")), callSite("c").calls("bar", flow(times(2), "1", "2")).retSite("d", kill(times(2), "1")),callSite("c").calls("bar",flow(times(2),"1","2")).retSite("d",kill(times(2),"1")), exitStmt("d").expectArtificalFlow(kill(times(2), "1")));exitStmt("d").expectArtificalFlow(kill(times(2),"1")));  forwardHelper.method("bar",forwardHelper.method("bar", startPoints("x"),startPoints("x"), normalStmt("x").succ("y", flow("2", "2")),normalStmt("x").succ("y",flow("2","2")), exitStmt("y").returns(over("b"), to("c"), flow(times(2), "2", "1"))exitStmt("y").returns(over("b"),to("c"),flow(times(2),"2","1")) .returns(over("c"), to("d"), flow(times(2), "2", "1")));.returns(over("c"),to("d"),flow(times(2),"2","1")));  backwardHelper.method("foo",backwardHelper.method("foo", startPoints(),startPoints(), exitStmt("a1").expectArtificalFlow(kill("0")),exitStmt("a1").expectArtificalFlow(kill("0")), exitStmt("a2").expectArtificalFlow(kill("0")));exitStmt("a2").expectArtificalFlow(kill("0")));  forwardHelper.runBiDiSolver(backwardHelper, exchange, "a1", "a2");forwardHelper.runBiDiSolver(backwardHelper,exchange,"a1","a2"); }} }}








test/heros/utilities/TestHelper.java








View file @ 65687218






......@@ -29,10 +29,12 @@ import com.google.common.base.Function;









import com.google.common.base.Joiner;










import com.google.common.base.Predicate;










import com.google.common.collect.HashMultimap;










import com.google.common.collect.HashMultiset;










import com.google.common.collect.Iterables;










import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Multimap;










import com.google.common.collect.Multiset;










import com.google.common.collect.Sets;





















public class TestHelper {



......@@ -43,7 +45,7 @@ public class TestHelper {









 private List<Call2ReturnEdge> call2retEdges = Lists.newLinkedList();










 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, Method> stmt2method = Maps.newHashMap();










 private Set<ExpectedFlowFunction> remainingFlowFunctions = Sets.newHashSet();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();





















 public MethodHelper method(String methodName, Statement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new Method(methodName));



......@@ -82,12 +84,28 @@ public class TestHelper {









 return new Statement(returnSite);










 }










 










 public static ExpectedFlowFunction kill(String source) {










 return kill(1, source);










 }










 










 public static ExpectedFlowFunction kill(int times, String source) {










 return new ExpectedFlowFunction(times, new Fact(source));










 }





















 public static ExpectedFlowFunction flow(String source, String... targets) {










 return flow(1, source, targets);










 }










 










 public static ExpectedFlowFunction flow(int times, String source, String... targets) {










 Fact[] targetFacts = new Fact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new Fact(targets[i]);










 }










 return new ExpectedFlowFunction(new Fact(source), targetFacts);










 return new ExpectedFlowFunction(times, new Fact(source), targetFacts);










 }










 










 public static int times(int times) {










 return times;










 }





















 public InterproceduralCFG<Statement, Method> buildIcfg() {



......@@ -227,7 +245,9 @@ public class TestHelper {




















 public void edges(Collection<Edge> edges) {










 for(Edge edge : edges) {










 remainingFlowFunctions.addAll(Lists.newArrayList(edge.flowFunctions));










 for(ExpectedFlowFunction ff : edge.flowFunctions) {










 remainingFlowFunctions.add(ff, ff.times);










 }










 










 edge.accept(new EdgeVisitor() {










 @Override



......@@ -270,8 +290,10 @@ public class TestHelper {









 public final Fact source;










 public final Fact[] targets;










 public Edge edge;










 private int times;





















 public ExpectedFlowFunction(Fact source, Fact... targets) {










 public ExpectedFlowFunction(int times, Fact source, Fact... targets) {










 this.times = times;










 this.source = source;










 this.targets = targets;










 }



......@@ -475,10 +497,15 @@ public class TestHelper {









 assertAllFlowFunctionsUsed();










 }










 










 public void runBiDiSolver(TestHelper backwardHelper, final String...initialSeeds) {










 BiDiIFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new BiDiIFDSSolver<>(










 createTabulationProblem(true, initialSeeds), 










 backwardHelper.createTabulationProblem(true, initialSeeds));










 










 public static enum TabulationProblemExchange {AsSpecified, ExchangeForwardAndBackward};










 public void runBiDiSolver(TestHelper backwardHelper, TabulationProblemExchange direction, final String...initialSeeds) {










 BiDiIFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver =










 direction == TabulationProblemExchange.AsSpecified ? 










 new BiDiIFDSSolver<>(createTabulationProblem(true, initialSeeds), 










 backwardHelper.createTabulationProblem(true, initialSeeds)) :










 new BiDiIFDSSolver<>(backwardHelper.createTabulationProblem(true, initialSeeds), 










 createTabulationProblem(true, initialSeeds));










 










 solver.solve();










 assertAllFlowFunctionsUsed();



......












test/heros/utilities/TestHelper.java








View file @ 65687218








test/heros/utilities/TestHelper.java










View file @ 65687218


65687218



......@@ -29,10 +29,12 @@ import com.google.common.base.Function;









import com.google.common.base.Joiner;










import com.google.common.base.Predicate;










import com.google.common.collect.HashMultimap;










import com.google.common.collect.HashMultiset;










import com.google.common.collect.Iterables;










import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Multimap;










import com.google.common.collect.Multiset;










import com.google.common.collect.Sets;





















public class TestHelper {



......@@ -43,7 +45,7 @@ public class TestHelper {









 private List<Call2ReturnEdge> call2retEdges = Lists.newLinkedList();










 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, Method> stmt2method = Maps.newHashMap();










 private Set<ExpectedFlowFunction> remainingFlowFunctions = Sets.newHashSet();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();





















 public MethodHelper method(String methodName, Statement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new Method(methodName));



......@@ -82,12 +84,28 @@ public class TestHelper {









 return new Statement(returnSite);










 }










 










 public static ExpectedFlowFunction kill(String source) {










 return kill(1, source);










 }










 










 public static ExpectedFlowFunction kill(int times, String source) {










 return new ExpectedFlowFunction(times, new Fact(source));










 }





















 public static ExpectedFlowFunction flow(String source, String... targets) {










 return flow(1, source, targets);










 }










 










 public static ExpectedFlowFunction flow(int times, String source, String... targets) {










 Fact[] targetFacts = new Fact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new Fact(targets[i]);










 }










 return new ExpectedFlowFunction(new Fact(source), targetFacts);










 return new ExpectedFlowFunction(times, new Fact(source), targetFacts);










 }










 










 public static int times(int times) {










 return times;










 }





















 public InterproceduralCFG<Statement, Method> buildIcfg() {



......@@ -227,7 +245,9 @@ public class TestHelper {




















 public void edges(Collection<Edge> edges) {










 for(Edge edge : edges) {










 remainingFlowFunctions.addAll(Lists.newArrayList(edge.flowFunctions));










 for(ExpectedFlowFunction ff : edge.flowFunctions) {










 remainingFlowFunctions.add(ff, ff.times);










 }










 










 edge.accept(new EdgeVisitor() {










 @Override



......@@ -270,8 +290,10 @@ public class TestHelper {









 public final Fact source;










 public final Fact[] targets;










 public Edge edge;










 private int times;





















 public ExpectedFlowFunction(Fact source, Fact... targets) {










 public ExpectedFlowFunction(int times, Fact source, Fact... targets) {










 this.times = times;










 this.source = source;










 this.targets = targets;










 }



......@@ -475,10 +497,15 @@ public class TestHelper {









 assertAllFlowFunctionsUsed();










 }










 










 public void runBiDiSolver(TestHelper backwardHelper, final String...initialSeeds) {










 BiDiIFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new BiDiIFDSSolver<>(










 createTabulationProblem(true, initialSeeds), 










 backwardHelper.createTabulationProblem(true, initialSeeds));










 










 public static enum TabulationProblemExchange {AsSpecified, ExchangeForwardAndBackward};










 public void runBiDiSolver(TestHelper backwardHelper, TabulationProblemExchange direction, final String...initialSeeds) {










 BiDiIFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver =










 direction == TabulationProblemExchange.AsSpecified ? 










 new BiDiIFDSSolver<>(createTabulationProblem(true, initialSeeds), 










 backwardHelper.createTabulationProblem(true, initialSeeds)) :










 new BiDiIFDSSolver<>(backwardHelper.createTabulationProblem(true, initialSeeds), 










 createTabulationProblem(true, initialSeeds));










 










 solver.solve();










 assertAllFlowFunctionsUsed();



......






......@@ -29,10 +29,12 @@ import com.google.common.base.Function;









import com.google.common.base.Joiner;










import com.google.common.base.Predicate;










import com.google.common.collect.HashMultimap;










import com.google.common.collect.HashMultiset;










import com.google.common.collect.Iterables;










import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Multimap;










import com.google.common.collect.Multiset;










import com.google.common.collect.Sets;





















public class TestHelper {



......@@ -43,7 +45,7 @@ public class TestHelper {









 private List<Call2ReturnEdge> call2retEdges = Lists.newLinkedList();










 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, Method> stmt2method = Maps.newHashMap();










 private Set<ExpectedFlowFunction> remainingFlowFunctions = Sets.newHashSet();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();





















 public MethodHelper method(String methodName, Statement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new Method(methodName));



......@@ -82,12 +84,28 @@ public class TestHelper {









 return new Statement(returnSite);










 }










 










 public static ExpectedFlowFunction kill(String source) {










 return kill(1, source);










 }










 










 public static ExpectedFlowFunction kill(int times, String source) {










 return new ExpectedFlowFunction(times, new Fact(source));










 }





















 public static ExpectedFlowFunction flow(String source, String... targets) {










 return flow(1, source, targets);










 }










 










 public static ExpectedFlowFunction flow(int times, String source, String... targets) {










 Fact[] targetFacts = new Fact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new Fact(targets[i]);










 }










 return new ExpectedFlowFunction(new Fact(source), targetFacts);










 return new ExpectedFlowFunction(times, new Fact(source), targetFacts);










 }










 










 public static int times(int times) {










 return times;










 }





















 public InterproceduralCFG<Statement, Method> buildIcfg() {



......@@ -227,7 +245,9 @@ public class TestHelper {




















 public void edges(Collection<Edge> edges) {










 for(Edge edge : edges) {










 remainingFlowFunctions.addAll(Lists.newArrayList(edge.flowFunctions));










 for(ExpectedFlowFunction ff : edge.flowFunctions) {










 remainingFlowFunctions.add(ff, ff.times);










 }










 










 edge.accept(new EdgeVisitor() {










 @Override



......@@ -270,8 +290,10 @@ public class TestHelper {









 public final Fact source;










 public final Fact[] targets;










 public Edge edge;










 private int times;





















 public ExpectedFlowFunction(Fact source, Fact... targets) {










 public ExpectedFlowFunction(int times, Fact source, Fact... targets) {










 this.times = times;










 this.source = source;










 this.targets = targets;










 }



......@@ -475,10 +497,15 @@ public class TestHelper {









 assertAllFlowFunctionsUsed();










 }










 










 public void runBiDiSolver(TestHelper backwardHelper, final String...initialSeeds) {










 BiDiIFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new BiDiIFDSSolver<>(










 createTabulationProblem(true, initialSeeds), 










 backwardHelper.createTabulationProblem(true, initialSeeds));










 










 public static enum TabulationProblemExchange {AsSpecified, ExchangeForwardAndBackward};










 public void runBiDiSolver(TestHelper backwardHelper, TabulationProblemExchange direction, final String...initialSeeds) {










 BiDiIFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver =










 direction == TabulationProblemExchange.AsSpecified ? 










 new BiDiIFDSSolver<>(createTabulationProblem(true, initialSeeds), 










 backwardHelper.createTabulationProblem(true, initialSeeds)) :










 new BiDiIFDSSolver<>(backwardHelper.createTabulationProblem(true, initialSeeds), 










 createTabulationProblem(true, initialSeeds));










 










 solver.solve();










 assertAllFlowFunctionsUsed();



......


import com.google.common.base.Joiner;importcom.google.common.base.Joiner;import com.google.common.base.Predicate;importcom.google.common.base.Predicate;import com.google.common.collect.HashMultimap;importcom.google.common.collect.HashMultimap;import com.google.common.collect.HashMultiset;importcom.google.common.collect.HashMultiset;import com.google.common.collect.Iterables;importcom.google.common.collect.Iterables;import com.google.common.collect.Lists;importcom.google.common.collect.Lists;import com.google.common.collect.Maps;importcom.google.common.collect.Maps;import com.google.common.collect.Multimap;importcom.google.common.collect.Multimap;import com.google.common.collect.Multiset;importcom.google.common.collect.Multiset;import com.google.common.collect.Sets;importcom.google.common.collect.Sets;public class TestHelper {publicclassTestHelper{ private List<Call2ReturnEdge> call2retEdges = Lists.newLinkedList();privateList<Call2ReturnEdge>call2retEdges=Lists.newLinkedList(); private List<ReturnEdge> returnEdges = Lists.newLinkedList();privateList<ReturnEdge>returnEdges=Lists.newLinkedList(); private Map<Statement, Method> stmt2method = Maps.newHashMap();privateMap<Statement,Method>stmt2method=Maps.newHashMap(); private Set<ExpectedFlowFunction> remainingFlowFunctions = Sets.newHashSet();privateSetS<ExpectedFlowFunction>remainingFlowFunctions=SetsSets..newHashSetnewHashSet(); private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();privateMultisetMultis<ExpectedFlowFunction>remainingFlowFunctions=HashMultisetHashMultiset..createcreate(); public MethodHelper method(String methodName, Statement[] startingPoints, EdgeBuilder... edgeBuilders) {publicMethodHelpermethod(StringmethodName,Statement[]startingPoints,EdgeBuilder...edgeBuilders){ MethodHelper methodHelper = new MethodHelper(new Method(methodName));MethodHelpermethodHelper=newMethodHelper(newMethod(methodName)); return new Statement(returnSite);returnnewStatement(returnSite); }}  public static ExpectedFlowFunction kill(String source) {publicstaticExpectedFlowFunctionkill(Stringsource){ return kill(1, source);returnkill(1,source); }}  public static ExpectedFlowFunction kill(int times, String source) {publicstaticExpectedFlowFunctionkill(inttimes,Stringsource){ return new ExpectedFlowFunction(times, new Fact(source));returnnewExpectedFlowFunction(times,newFact(source)); }} public static ExpectedFlowFunction flow(String source, String... targets) {publicstaticExpectedFlowFunctionflow(Stringsource,String...targets){ return flow(1, source, targets);returnflow(1,source,targets); }}  public static ExpectedFlowFunction flow(int times, String source, String... targets) {publicstaticExpectedFlowFunctionflow(inttimes,Stringsource,String...targets){ Fact[] targetFacts = new Fact[targets.length];Fact[]targetFacts=newFact[targets.length]; for(int i=0; i<targets.length; i++) {for(inti=0;i<targets.length;i++){ targetFacts[i] = new Fact(targets[i]);targetFacts[i]=newFact(targets[i]); }} return new ExpectedFlowFunction(new Fact(source), targetFacts);returnnewExpectedFlowFunction(newFact(source),targetFacts); return new ExpectedFlowFunction(times, new Fact(source), targetFacts);returnnewExpectedFlowFunction(times,newFact(source),targetFacts); }}  public static int times(int times) {publicstaticinttimes(inttimes){ return times;returntimes; }} public InterproceduralCFG<Statement, Method> buildIcfg() {publicInterproceduralCFG<Statement,Method>buildIcfg(){ public void edges(Collection<Edge> edges) {publicvoidedges(Collection<Edge>edges){ for(Edge edge : edges) {for(Edgeedge:edges){ remainingFlowFunctions.addAll(Lists.newArrayList(edge.flowFunctions));remainingFlowFunctions.addAll(Lists.newArrayList(edge.flowFunctions)); for(ExpectedFlowFunction ff : edge.flowFunctions) {for(ExpectedFlowFunctionff:edge.flowFunctions){ remainingFlowFunctions.add(ff, ff.times);remainingFlowFunctions.add(ff,ff.times); }}  edge.accept(new EdgeVisitor() {edge.accept(newEdgeVisitor(){ @Override@Override public final Fact source;publicfinalFactsource; public final Fact[] targets;publicfinalFact[]targets; public Edge edge;publicEdgeedge; private int times;privateinttimes; public ExpectedFlowFunction(Fact source, Fact... targets) {publicExpectedFlowFunction(Factsource,Fact...targets){ public ExpectedFlowFunction(int times, Fact source, Fact... targets) {publicExpectedFlowFunction(inttimes,Factsource,Fact...targets){ this.times = times;this.times=times; this.source = source;this.source=source; this.targets = targets;this.targets=targets; }} assertAllFlowFunctionsUsed();assertAllFlowFunctionsUsed(); }}  public void runBiDiSolver(TestHelper backwardHelper, final String...initialSeeds) {publicvoidrunBiDiSolver(TestHelperbackwardHelper,finalString...initialSeeds){ BiDiIFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver = new BiDiIFDSSolver<>(BiDiIFDSSolver<Statement,Fact,Method,InterproceduralCFG<Statement,Method>>solver=newBiDiIFDSSolver<>( createTabulationProblem(true, initialSeeds), createTabulationProblem(true,initialSeeds), backwardHelper.createTabulationProblem(true, initialSeeds));backwardHelper.createTabulationProblem(true,initialSeeds));  public static enum TabulationProblemExchange {AsSpecified, ExchangeForwardAndBackward};publicstaticenumTabulationProblemExchange{AsSpecified,ExchangeForwardAndBackward}; public void runBiDiSolver(TestHelper backwardHelper, TabulationProblemExchange direction, final String...initialSeeds) {publicvoidrunBiDiSolver(TestHelperbackwardHelper,TabulationProblemExchangedirection,finalString...initialSeeds){ BiDiIFDSSolver<Statement, Fact, Method, InterproceduralCFG<Statement, Method>> solver =BiDiIFDSSolver<Statement,Fact,Method,InterproceduralCFG<Statement,Method>>solver= direction == TabulationProblemExchange.AsSpecified ? direction==TabulationProblemExchange.AsSpecified? new BiDiIFDSSolver<>(createTabulationProblem(true, initialSeeds), newBiDiIFDSSolver<>(createTabulationProblem(true,initialSeeds), backwardHelper.createTabulationProblem(true, initialSeeds)) :backwardHelper.createTabulationProblem(true,initialSeeds)): new BiDiIFDSSolver<>(backwardHelper.createTabulationProblem(true, initialSeeds), newBiDiIFDSSolver<>(backwardHelper.createTabulationProblem(true,initialSeeds), createTabulationProblem(true, initialSeeds));createTabulationProblem(true,initialSeeds));  solver.solve();solver.solve(); assertAllFlowFunctionsUsed();assertAllFlowFunctionsUsed();









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






