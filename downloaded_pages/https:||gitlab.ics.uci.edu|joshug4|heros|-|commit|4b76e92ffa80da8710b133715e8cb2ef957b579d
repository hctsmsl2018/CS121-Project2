



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

4b76e92f















Commit
4b76e92f


authored
Jan 17, 2014
by


Steven Arzt



Browse files




generalized some return types







parent
3b6c322d













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/InterproceduralCFG.java








View file @ 4b76e92f






......@@ -10,6 +10,7 @@









 ******************************************************************************/










package heros;





















import java.util.Collection;










import java.util.List;










import java.util.Set;














......@@ -51,7 +52,7 @@ public interface InterproceduralCFG<N,M>  {









	 * Returns all start points of a given method. There may be










	 * more than one start point in case of a backward analysis.










	 */










 public Set<N> getStartPointsOf(M m);










 public Collection<N> getStartPointsOf(M m);





















 /**










	 * Returns all statements to which a call could return.



......@@ -59,7 +60,7 @@ public interface InterproceduralCFG<N,M>  {









	 * We, however, use as return site the successor statements, of which










	 * there can be many in case of exceptional flow.










	 */










 public List<N> getReturnSitesOfCallAt(N n);










 public Collection<N> getReturnSitesOfCallAt(N n);





















 /**










	 * Returns <code>true</code> if the given statement is a call site.



......














src/heros/solver/IDESolver.java








View file @ 4b76e92f






......@@ -27,24 +27,25 @@ import heros.SynchronizedBy;









import heros.ZeroedFlowFunctions;










import heros.edgefunc.EdgeIdentity;





















import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;










import com.google.common.collect.HashBasedTable;










import com.google.common.collect.Maps;










import com.google.common.collect.Table;










import com.google.common.collect.Table.Cell;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;
































/**



......@@ -308,7 +309,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 final D d2 = edge.factAtTarget();










 EdgeFunction<V> f = jumpFunction(edge);










 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);










 Collection<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);










 










 //for each possible callee










 Set<M> callees = icfg.getCalleesOfCallAt(n);



......@@ -320,7 +321,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> res = computeCallFlowFunction(function, d1, d2);










 










 //for each callee's start point(s)










 Set<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 for(N sP: startPointsOf) {










 //for each result node of the call-flow function










 for(D d3: res) {



......@@ -418,7 +419,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final D d2 = edge.factAtTarget();










 










 //for each of the method's start points, determine incoming calls










 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);










 Collection<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);










 Map<N,Set<D>> inc = new HashMap<N,Set<D>>();










 for(N sP: startPointsOf) {










 //line 21.1 of Naeem/Lhotak/Rodriguez



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

4b76e92f















Commit
4b76e92f


authored
Jan 17, 2014
by


Steven Arzt



Browse files




generalized some return types







parent
3b6c322d













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/InterproceduralCFG.java








View file @ 4b76e92f






......@@ -10,6 +10,7 @@









 ******************************************************************************/










package heros;





















import java.util.Collection;










import java.util.List;










import java.util.Set;














......@@ -51,7 +52,7 @@ public interface InterproceduralCFG<N,M>  {









	 * Returns all start points of a given method. There may be










	 * more than one start point in case of a backward analysis.










	 */










 public Set<N> getStartPointsOf(M m);










 public Collection<N> getStartPointsOf(M m);





















 /**










	 * Returns all statements to which a call could return.



......@@ -59,7 +60,7 @@ public interface InterproceduralCFG<N,M>  {









	 * We, however, use as return site the successor statements, of which










	 * there can be many in case of exceptional flow.










	 */










 public List<N> getReturnSitesOfCallAt(N n);










 public Collection<N> getReturnSitesOfCallAt(N n);





















 /**










	 * Returns <code>true</code> if the given statement is a call site.



......














src/heros/solver/IDESolver.java








View file @ 4b76e92f






......@@ -27,24 +27,25 @@ import heros.SynchronizedBy;









import heros.ZeroedFlowFunctions;










import heros.edgefunc.EdgeIdentity;





















import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;










import com.google.common.collect.HashBasedTable;










import com.google.common.collect.Maps;










import com.google.common.collect.Table;










import com.google.common.collect.Table.Cell;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;
































/**



......@@ -308,7 +309,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 final D d2 = edge.factAtTarget();










 EdgeFunction<V> f = jumpFunction(edge);










 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);










 Collection<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);










 










 //for each possible callee










 Set<M> callees = icfg.getCalleesOfCallAt(n);



......@@ -320,7 +321,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> res = computeCallFlowFunction(function, d1, d2);










 










 //for each callee's start point(s)










 Set<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 for(N sP: startPointsOf) {










 //for each result node of the call-flow function










 for(D d3: res) {



......@@ -418,7 +419,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final D d2 = edge.factAtTarget();










 










 //for each of the method's start points, determine incoming calls










 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);










 Collection<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);










 Map<N,Set<D>> inc = new HashMap<N,Set<D>>();










 for(N sP: startPointsOf) {










 //line 21.1 of Naeem/Lhotak/Rodriguez



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

4b76e92f







Open sidebar



Joshua Garcia heros
Commits

4b76e92f




Open sidebar

Joshua Garcia heros
Commits

4b76e92f


Joshua GarciaherosherosCommits
4b76e92f








Commit
4b76e92f


authored
Jan 17, 2014
by


Steven Arzt



Browse files




generalized some return types







parent
3b6c322d













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/InterproceduralCFG.java








View file @ 4b76e92f






......@@ -10,6 +10,7 @@









 ******************************************************************************/










package heros;





















import java.util.Collection;










import java.util.List;










import java.util.Set;














......@@ -51,7 +52,7 @@ public interface InterproceduralCFG<N,M>  {









	 * Returns all start points of a given method. There may be










	 * more than one start point in case of a backward analysis.










	 */










 public Set<N> getStartPointsOf(M m);










 public Collection<N> getStartPointsOf(M m);





















 /**










	 * Returns all statements to which a call could return.



......@@ -59,7 +60,7 @@ public interface InterproceduralCFG<N,M>  {









	 * We, however, use as return site the successor statements, of which










	 * there can be many in case of exceptional flow.










	 */










 public List<N> getReturnSitesOfCallAt(N n);










 public Collection<N> getReturnSitesOfCallAt(N n);





















 /**










	 * Returns <code>true</code> if the given statement is a call site.



......














src/heros/solver/IDESolver.java








View file @ 4b76e92f






......@@ -27,24 +27,25 @@ import heros.SynchronizedBy;









import heros.ZeroedFlowFunctions;










import heros.edgefunc.EdgeIdentity;





















import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;










import com.google.common.collect.HashBasedTable;










import com.google.common.collect.Maps;










import com.google.common.collect.Table;










import com.google.common.collect.Table.Cell;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;
































/**



......@@ -308,7 +309,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 final D d2 = edge.factAtTarget();










 EdgeFunction<V> f = jumpFunction(edge);










 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);










 Collection<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);










 










 //for each possible callee










 Set<M> callees = icfg.getCalleesOfCallAt(n);



......@@ -320,7 +321,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> res = computeCallFlowFunction(function, d1, d2);










 










 //for each callee's start point(s)










 Set<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 for(N sP: startPointsOf) {










 //for each result node of the call-flow function










 for(D d3: res) {



......@@ -418,7 +419,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final D d2 = edge.factAtTarget();










 










 //for each of the method's start points, determine incoming calls










 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);










 Collection<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);










 Map<N,Set<D>> inc = new HashMap<N,Set<D>>();










 for(N sP: startPointsOf) {










 //line 21.1 of Naeem/Lhotak/Rodriguez



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
4b76e92f


authored
Jan 17, 2014
by


Steven Arzt



Browse files




generalized some return types







parent
3b6c322d













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/InterproceduralCFG.java








View file @ 4b76e92f






......@@ -10,6 +10,7 @@









 ******************************************************************************/










package heros;





















import java.util.Collection;










import java.util.List;










import java.util.Set;














......@@ -51,7 +52,7 @@ public interface InterproceduralCFG<N,M>  {









	 * Returns all start points of a given method. There may be










	 * more than one start point in case of a backward analysis.










	 */










 public Set<N> getStartPointsOf(M m);










 public Collection<N> getStartPointsOf(M m);





















 /**










	 * Returns all statements to which a call could return.



......@@ -59,7 +60,7 @@ public interface InterproceduralCFG<N,M>  {









	 * We, however, use as return site the successor statements, of which










	 * there can be many in case of exceptional flow.










	 */










 public List<N> getReturnSitesOfCallAt(N n);










 public Collection<N> getReturnSitesOfCallAt(N n);





















 /**










	 * Returns <code>true</code> if the given statement is a call site.



......














src/heros/solver/IDESolver.java








View file @ 4b76e92f






......@@ -27,24 +27,25 @@ import heros.SynchronizedBy;









import heros.ZeroedFlowFunctions;










import heros.edgefunc.EdgeIdentity;





















import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;










import com.google.common.collect.HashBasedTable;










import com.google.common.collect.Maps;










import com.google.common.collect.Table;










import com.google.common.collect.Table.Cell;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;
































/**



......@@ -308,7 +309,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 final D d2 = edge.factAtTarget();










 EdgeFunction<V> f = jumpFunction(edge);










 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);










 Collection<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);










 










 //for each possible callee










 Set<M> callees = icfg.getCalleesOfCallAt(n);



......@@ -320,7 +321,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> res = computeCallFlowFunction(function, d1, d2);










 










 //for each callee's start point(s)










 Set<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 for(N sP: startPointsOf) {










 //for each result node of the call-flow function










 for(D d3: res) {



......@@ -418,7 +419,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final D d2 = edge.factAtTarget();










 










 //for each of the method's start points, determine incoming calls










 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);










 Collection<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);










 Map<N,Set<D>> inc = new HashMap<N,Set<D>>();










 for(N sP: startPointsOf) {










 //line 21.1 of Naeem/Lhotak/Rodriguez



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
4b76e92f


authored
Jan 17, 2014
by


Steven Arzt



Browse files



Commit
4b76e92f


authored
Jan 17, 2014
by


Steven Arzt

4b76e92fauthoredbySteven Arzt

generalized some return types






parent
3b6c322d
















parent
3b6c322d





parent












Changes
2
2


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/InterproceduralCFG.java








View file @ 4b76e92f






......@@ -10,6 +10,7 @@









 ******************************************************************************/










package heros;





















import java.util.Collection;










import java.util.List;










import java.util.Set;














......@@ -51,7 +52,7 @@ public interface InterproceduralCFG<N,M>  {









	 * Returns all start points of a given method. There may be










	 * more than one start point in case of a backward analysis.










	 */










 public Set<N> getStartPointsOf(M m);










 public Collection<N> getStartPointsOf(M m);





















 /**










	 * Returns all statements to which a call could return.



......@@ -59,7 +60,7 @@ public interface InterproceduralCFG<N,M>  {









	 * We, however, use as return site the successor statements, of which










	 * there can be many in case of exceptional flow.










	 */










 public List<N> getReturnSitesOfCallAt(N n);










 public Collection<N> getReturnSitesOfCallAt(N n);





















 /**










	 * Returns <code>true</code> if the given statement is a call site.



......














src/heros/solver/IDESolver.java








View file @ 4b76e92f






......@@ -27,24 +27,25 @@ import heros.SynchronizedBy;









import heros.ZeroedFlowFunctions;










import heros.edgefunc.EdgeIdentity;





















import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;










import com.google.common.collect.HashBasedTable;










import com.google.common.collect.Maps;










import com.google.common.collect.Table;










import com.google.common.collect.Table.Cell;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;
































/**



......@@ -308,7 +309,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 final D d2 = edge.factAtTarget();










 EdgeFunction<V> f = jumpFunction(edge);










 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);










 Collection<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);










 










 //for each possible callee










 Set<M> callees = icfg.getCalleesOfCallAt(n);



......@@ -320,7 +321,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> res = computeCallFlowFunction(function, d1, d2);










 










 //for each callee's start point(s)










 Set<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 for(N sP: startPointsOf) {










 //for each result node of the call-flow function










 for(D d3: res) {



......@@ -418,7 +419,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final D d2 = edge.factAtTarget();










 










 //for each of the method's start points, determine incoming calls










 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);










 Collection<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);










 Map<N,Set<D>> inc = new HashMap<N,Set<D>>();










 for(N sP: startPointsOf) {










 //line 21.1 of Naeem/Lhotak/Rodriguez



......














src/heros/InterproceduralCFG.java








View file @ 4b76e92f






......@@ -10,6 +10,7 @@









 ******************************************************************************/










package heros;





















import java.util.Collection;










import java.util.List;










import java.util.Set;














......@@ -51,7 +52,7 @@ public interface InterproceduralCFG<N,M>  {









	 * Returns all start points of a given method. There may be










	 * more than one start point in case of a backward analysis.










	 */










 public Set<N> getStartPointsOf(M m);










 public Collection<N> getStartPointsOf(M m);





















 /**










	 * Returns all statements to which a call could return.



......@@ -59,7 +60,7 @@ public interface InterproceduralCFG<N,M>  {









	 * We, however, use as return site the successor statements, of which










	 * there can be many in case of exceptional flow.










	 */










 public List<N> getReturnSitesOfCallAt(N n);










 public Collection<N> getReturnSitesOfCallAt(N n);





















 /**










	 * Returns <code>true</code> if the given statement is a call site.



......












src/heros/InterproceduralCFG.java








View file @ 4b76e92f








src/heros/InterproceduralCFG.java










View file @ 4b76e92f


4b76e92f



......@@ -10,6 +10,7 @@









 ******************************************************************************/










package heros;





















import java.util.Collection;










import java.util.List;










import java.util.Set;














......@@ -51,7 +52,7 @@ public interface InterproceduralCFG<N,M>  {









	 * Returns all start points of a given method. There may be










	 * more than one start point in case of a backward analysis.










	 */










 public Set<N> getStartPointsOf(M m);










 public Collection<N> getStartPointsOf(M m);





















 /**










	 * Returns all statements to which a call could return.



......@@ -59,7 +60,7 @@ public interface InterproceduralCFG<N,M>  {









	 * We, however, use as return site the successor statements, of which










	 * there can be many in case of exceptional flow.










	 */










 public List<N> getReturnSitesOfCallAt(N n);










 public Collection<N> getReturnSitesOfCallAt(N n);





















 /**










	 * Returns <code>true</code> if the given statement is a call site.



......






......@@ -10,6 +10,7 @@









 ******************************************************************************/










package heros;





















import java.util.Collection;










import java.util.List;










import java.util.Set;














......@@ -51,7 +52,7 @@ public interface InterproceduralCFG<N,M>  {









	 * Returns all start points of a given method. There may be










	 * more than one start point in case of a backward analysis.










	 */










 public Set<N> getStartPointsOf(M m);










 public Collection<N> getStartPointsOf(M m);





















 /**










	 * Returns all statements to which a call could return.



......@@ -59,7 +60,7 @@ public interface InterproceduralCFG<N,M>  {









	 * We, however, use as return site the successor statements, of which










	 * there can be many in case of exceptional flow.










	 */










 public List<N> getReturnSitesOfCallAt(N n);










 public Collection<N> getReturnSitesOfCallAt(N n);





















 /**










	 * Returns <code>true</code> if the given statement is a call site.



......


 ******************************************************************************/ ******************************************************************************/package heros;packageheros;import java.util.Collection;importjava.util.Collection;import java.util.List;importjava.util.List;import java.util.Set;importjava.util.Set;	 * Returns all start points of a given method. There may be	 * Returns all start points of a given method. There may be	 * more than one start point in case of a backward analysis.	 * more than one start point in case of a backward analysis.	 */	 */ public Set<N> getStartPointsOf(M m);publicSetSet<N>getStartPointsOf(Mm); public Collection<N> getStartPointsOf(M m);publicCollectionCollection<N>getStartPointsOf(Mm); /**/**	 * Returns all statements to which a call could return.	 * Returns all statements to which a call could return.	 * We, however, use as return site the successor statements, of which	 * We, however, use as return site the successor statements, of which	 * there can be many in case of exceptional flow.	 * there can be many in case of exceptional flow.	 */	 */ public List<N> getReturnSitesOfCallAt(N n);publicListList<N>getReturnSitesOfCallAt(Nn); public Collection<N> getReturnSitesOfCallAt(N n);publicCollectionCollection<N>getReturnSitesOfCallAt(Nn); /**/**	 * Returns <code>true</code> if the given statement is a call site.	 * Returns <code>true</code> if the given statement is a call site.








src/heros/solver/IDESolver.java








View file @ 4b76e92f






......@@ -27,24 +27,25 @@ import heros.SynchronizedBy;









import heros.ZeroedFlowFunctions;










import heros.edgefunc.EdgeIdentity;





















import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;










import com.google.common.collect.HashBasedTable;










import com.google.common.collect.Maps;










import com.google.common.collect.Table;










import com.google.common.collect.Table.Cell;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;
































/**



......@@ -308,7 +309,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 final D d2 = edge.factAtTarget();










 EdgeFunction<V> f = jumpFunction(edge);










 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);










 Collection<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);










 










 //for each possible callee










 Set<M> callees = icfg.getCalleesOfCallAt(n);



......@@ -320,7 +321,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> res = computeCallFlowFunction(function, d1, d2);










 










 //for each callee's start point(s)










 Set<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 for(N sP: startPointsOf) {










 //for each result node of the call-flow function










 for(D d3: res) {



......@@ -418,7 +419,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final D d2 = edge.factAtTarget();










 










 //for each of the method's start points, determine incoming calls










 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);










 Collection<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);










 Map<N,Set<D>> inc = new HashMap<N,Set<D>>();










 for(N sP: startPointsOf) {










 //line 21.1 of Naeem/Lhotak/Rodriguez



......












src/heros/solver/IDESolver.java








View file @ 4b76e92f








src/heros/solver/IDESolver.java










View file @ 4b76e92f


4b76e92f



......@@ -27,24 +27,25 @@ import heros.SynchronizedBy;









import heros.ZeroedFlowFunctions;










import heros.edgefunc.EdgeIdentity;





















import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;










import com.google.common.collect.HashBasedTable;










import com.google.common.collect.Maps;










import com.google.common.collect.Table;










import com.google.common.collect.Table.Cell;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;
































/**



......@@ -308,7 +309,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 final D d2 = edge.factAtTarget();










 EdgeFunction<V> f = jumpFunction(edge);










 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);










 Collection<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);










 










 //for each possible callee










 Set<M> callees = icfg.getCalleesOfCallAt(n);



......@@ -320,7 +321,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> res = computeCallFlowFunction(function, d1, d2);










 










 //for each callee's start point(s)










 Set<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 for(N sP: startPointsOf) {










 //for each result node of the call-flow function










 for(D d3: res) {



......@@ -418,7 +419,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final D d2 = edge.factAtTarget();










 










 //for each of the method's start points, determine incoming calls










 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);










 Collection<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);










 Map<N,Set<D>> inc = new HashMap<N,Set<D>>();










 for(N sP: startPointsOf) {










 //line 21.1 of Naeem/Lhotak/Rodriguez



......






......@@ -27,24 +27,25 @@ import heros.SynchronizedBy;









import heros.ZeroedFlowFunctions;










import heros.edgefunc.EdgeIdentity;





















import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;










import com.google.common.collect.HashBasedTable;










import com.google.common.collect.Maps;










import com.google.common.collect.Table;










import com.google.common.collect.Table.Cell;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;
































/**



......@@ -308,7 +309,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 final D d2 = edge.factAtTarget();










 EdgeFunction<V> f = jumpFunction(edge);










 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);










 Collection<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);










 










 //for each possible callee










 Set<M> callees = icfg.getCalleesOfCallAt(n);



......@@ -320,7 +321,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> res = computeCallFlowFunction(function, d1, d2);










 










 //for each callee's start point(s)










 Set<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 for(N sP: startPointsOf) {










 //for each result node of the call-flow function










 for(D d3: res) {



......@@ -418,7 +419,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final D d2 = edge.factAtTarget();










 










 //for each of the method's start points, determine incoming calls










 Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);










 Collection<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);










 Map<N,Set<D>> inc = new HashMap<N,Set<D>>();










 for(N sP: startPointsOf) {










 //line 21.1 of Naeem/Lhotak/Rodriguez



......


import heros.ZeroedFlowFunctions;importheros.ZeroedFlowFunctions;import heros.edgefunc.EdgeIdentity;importheros.edgefunc.EdgeIdentity;import java.util.Collection;importjava.util.Collection;import java.util.Collections;importjava.util.Collections;import java.util.HashMap;importjava.util.HashMap;import java.util.HashSet;importjava.util.HashSet;import java.util.List;importjava.util.List;import java.util.Map;importjava.util.Map;import java.util.Map.Entry;importjava.util.Map.Entry;import java.util.Set;importjava.util.Set;import java.util.concurrent.LinkedBlockingQueue;importjava.util.concurrent.LinkedBlockingQueue;import java.util.concurrent.TimeUnit;importjava.util.concurrent.TimeUnit;import org.slf4j.Logger;importorg.slf4j.Logger;import org.slf4j.LoggerFactory;importorg.slf4j.LoggerFactory;import com.google.common.base.Predicate;importcom.google.common.base.Predicate;import com.google.common.cache.CacheBuilder;importcom.google.common.cache.CacheBuilder;import com.google.common.collect.HashBasedTable;importcom.google.common.collect.HashBasedTable;import com.google.common.collect.Maps;importcom.google.common.collect.Maps;import com.google.common.collect.Table;importcom.google.common.collect.Table;import com.google.common.collect.Table.Cell;importcom.google.common.collect.Table.Cell;import org.slf4j.Logger;importorg.slf4j.Logger;import org.slf4j.LoggerFactory;importorg.slf4j.LoggerFactory;/**/** final D d2 = edge.factAtTarget();finalDd2=edge.factAtTarget(); EdgeFunction<V> f = jumpFunction(edge);EdgeFunction<V>f=jumpFunction(edge); List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);ListList<N>returnSiteNs=icfg.getReturnSitesOfCallAt(n); Collection<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);CollectionCollection<N>returnSiteNs=icfg.getReturnSitesOfCallAt(n);  //for each possible callee//for each possible callee Set<M> callees = icfg.getCalleesOfCallAt(n);Set<M>callees=icfg.getCalleesOfCallAt(n); Set<D> res = computeCallFlowFunction(function, d1, d2);Set<D>res=computeCallFlowFunction(function,d1,d2);  //for each callee's start point(s)//for each callee's start point(s) Set<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);SetSet<N>startPointsOf=icfg.getStartPointsOf(sCalledProcN); Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);CollectionCollection<N>startPointsOf=icfg.getStartPointsOf(sCalledProcN); for(N sP: startPointsOf) {for(NsP:startPointsOf){ //for each result node of the call-flow function//for each result node of the call-flow function for(D d3: res) {for(Dd3:res){ final D d2 = edge.factAtTarget();finalDd2=edge.factAtTarget();  //for each of the method's start points, determine incoming calls//for each of the method's start points, determine incoming calls Set<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);SetSet<N>startPointsOf=icfg.getStartPointsOf(methodThatNeedsSummary); Collection<N> startPointsOf = icfg.getStartPointsOf(methodThatNeedsSummary);CollectionCollection<N>startPointsOf=icfg.getStartPointsOf(methodThatNeedsSummary); Map<N,Set<D>> inc = new HashMap<N,Set<D>>();Map<N,Set<D>>inc=newHashMap<N,Set<D>>(); for(N sP: startPointsOf) {for(NsP:startPointsOf){ //line 21.1 of Naeem/Lhotak/Rodriguez//line 21.1 of Naeem/Lhotak/Rodriguez









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






