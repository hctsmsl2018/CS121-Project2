



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab






Sign in




Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab






Sign in




Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab






Sign in




Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros

Commits



















herossrcheros
















08 Jan, 2015
1 commit









Bugfix, Helper functions, and renaming

·
b131fd75


Johannes Lerch authored Jan 08, 2015






b131fd75










07 Jan, 2015
2 commits









"interest/concrretization" edges in callers are no longer propagated as

·
05779cea




Johannes Lerch authored Jan 07, 2015

normal path edges, but immediately registered as jump functions to avoid
duplications and avoidable merges





05779cea













cleaning code

·
1cd34e9e


Johannes Lerch authored Jan 07, 2015






1cd34e9e










05 Jan, 2015
1 commit









handling for writing fields / excluding access paths

·
ec76098b


Johannes Lerch authored Jan 05, 2015






ec76098b










10 Dec, 2014
1 commit









Bug/test fixes

·
7527a0d4


Johannes Lerch authored Dec 10, 2014






7527a0d4










27 Nov, 2014
1 commit









handling the case that incoming edge is prefix of existing summary

·
8d40408f


Johannes Lerch authored Nov 27, 2014






8d40408f










25 Nov, 2014
1 commit









edges on hold + resume

·
dea31cae


Johannes Lerch authored Nov 25, 2014






dea31cae










13 Nov, 2014
1 commit









annotated facts (WIP)

·
9176fc7c


Johannes Lerch authored Nov 13, 2014






9176fc7c










22 Oct, 2014
1 commit









use of abstracted summaries

·
3b064347


Johannes Lerch authored Oct 22, 2014






3b064347










15 Oct, 2014
1 commit









FieldSensitiveIFDSSolver - concept outline

·
f5ac702c


Johannes Späth authored Oct 15, 2014






f5ac702c










25 Sep, 2014
1 commit









Introducing more abstract/flexible version of PathTrackingIFDSSolver

·
ddde660b


Johannes Lerch authored Sep 26, 2014






ddde660b










08 Aug, 2014
1 commit









opened up interface

·
6a296cfc


Eric Bodden authored Aug 08, 2014






6a296cfc










25 Jun, 2014
7 commits









Using LeakKey to identify leaks not only on the basis of equal source

·
dd4a3cde




Johannes Lerch authored Jun 25, 2014

statements, but also equal call sites to which the flow leaks.





dd4a3cde













Introducing wrapper method propagateUnbalancedReturnFlow, which by

·
6fd38817




Johannes Lerch authored Jun 25, 2014

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.





6fd38817













Removed unnecessary call to decrement before reset.

·
663aa65d


Johannes Lerch authored Jun 25, 2014






663aa65d













Not removing keys of paused edges as it is not guaranteed that in the

·
d7737fda




Johannes Lerch authored Jun 25, 2014

meantime no other thread has added new entries to the set stored as
value of the map.





d7737fda













Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver

·
6016a868


Johannes Lerch authored Jun 18, 2014






6016a868













store calling context in abstraction to enable context sensitive path

·
26b9e710




Johannes Lerch authored Jun 13, 2014

building





26b9e710













Change to IDESolver to behave consistent in cases in which summaries can

·
cbce681e




Johannes Lerch authored Jun 11, 2014

be applied inside processCall and cases in which they are applied in
processExit, i.e., in the latter computeReturnFlowFunction was called
only once for multiple source values on the caller side.





cbce681e










09 Jun, 2014
1 commit









Add nullness check of CacheBuilder

·
c16c1f89


sleepingpig authored Jun 09, 2014






c16c1f89










23 Apr, 2014
1 commit









now caching the hash code of the Pair class

·
f3b1b1f1


Steven Arzt authored Apr 23, 2014






f3b1b1f1










02 Apr, 2014
1 commit









generalized ICFG types

·
3d7cf977


Steven Arzt authored Apr 02, 2014






3d7cf977










03 Mar, 2014
1 commit









Added missing restoreContext call in processCall

·
81655ff1


Johannes Lerch authored Mar 03, 2014






81655ff1










28 Feb, 2014
1 commit









Enabling possibility to reuse summaries in callees by setting source

·
2c10ea10




Johannes Lerch authored Feb 28, 2014

statement to null and restoring original source statement when returning
context sensitively.





2c10ea10










17 Jan, 2014
2 commits









generalized some return types

·
4b76e92f


Steven Arzt authored Jan 17, 2014






4b76e92f













caching hash value

·
3b6c322d


Steven Arzt authored Jan 17, 2014






3b6c322d










15 Jan, 2014
1 commit









generalized a data structure

·
0b0c5ba4


Steven Arzt authored Jan 15, 2014






0b0c5ba4










24 Dec, 2013
3 commits









cleaned up code

·
f21c884a


Eric Bodden authored Dec 24, 2013






f21c884a













made Gen and Transfer use TwoElementSet

·
802bc2dc


Eric Bodden authored Dec 24, 2013






802bc2dc













added class TwoElementSet, which implements exactly what the name says; useful...

·
c52d9928




Eric Bodden authored Dec 24, 2013

added class TwoElementSet, which implements exactly what the name says; useful for use within FlowFunction, as it is much more efficient than using a two-element HashSet





c52d9928










15 Dec, 2013
1 commit









cleaned up code

·
a278d4f7


Eric Bodden authored Dec 15, 2013






a278d4f7










28 Nov, 2013
1 commit









pulled up the LinkedNode interface onto the first level

·
3980d99f


Steven Arzt authored Nov 28, 2013






3980d99f










31 Oct, 2013
2 commits









made the path cache for joining abstraction protected instead of private

·
4d3ab595


Steven Arzt authored Oct 31, 2013






4d3ab595













added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066










28 Oct, 2013
5 commits









Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b




Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b













comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf













added union flow function

·
52970dcc


Eric Bodden authored Oct 28, 2013






52970dcc













fixed comment

·
2a1414bb


Eric Bodden authored Oct 28, 2013






2a1414bb













suppress warning

·
864f77c6


Eric Bodden authored Oct 28, 2013






864f77c6










26 Oct, 2013
1 commit









Better be careful with executors: If they are shutting down, no new tasks may...

·
3cad6e8e




Steven Arzt authored Oct 26, 2013

Better be careful with executors: If they are shutting down, no new tasks may be submitted - otherwise, we will just trigger another pointless exception. Secondly, if we increment the number of active executors and only afterwards actually submit the task, we have to make sure that the submission goes through - otherwise out counter is off by one! I now decrement it again if the executor rejects the new task.





3cad6e8e



















H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros

Commits



















herossrcheros
















08 Jan, 2015
1 commit









Bugfix, Helper functions, and renaming

·
b131fd75


Johannes Lerch authored Jan 08, 2015






b131fd75










07 Jan, 2015
2 commits









"interest/concrretization" edges in callers are no longer propagated as

·
05779cea




Johannes Lerch authored Jan 07, 2015

normal path edges, but immediately registered as jump functions to avoid
duplications and avoidable merges





05779cea













cleaning code

·
1cd34e9e


Johannes Lerch authored Jan 07, 2015






1cd34e9e










05 Jan, 2015
1 commit









handling for writing fields / excluding access paths

·
ec76098b


Johannes Lerch authored Jan 05, 2015






ec76098b










10 Dec, 2014
1 commit









Bug/test fixes

·
7527a0d4


Johannes Lerch authored Dec 10, 2014






7527a0d4










27 Nov, 2014
1 commit









handling the case that incoming edge is prefix of existing summary

·
8d40408f


Johannes Lerch authored Nov 27, 2014






8d40408f










25 Nov, 2014
1 commit









edges on hold + resume

·
dea31cae


Johannes Lerch authored Nov 25, 2014






dea31cae










13 Nov, 2014
1 commit









annotated facts (WIP)

·
9176fc7c


Johannes Lerch authored Nov 13, 2014






9176fc7c










22 Oct, 2014
1 commit









use of abstracted summaries

·
3b064347


Johannes Lerch authored Oct 22, 2014






3b064347










15 Oct, 2014
1 commit









FieldSensitiveIFDSSolver - concept outline

·
f5ac702c


Johannes Späth authored Oct 15, 2014






f5ac702c










25 Sep, 2014
1 commit









Introducing more abstract/flexible version of PathTrackingIFDSSolver

·
ddde660b


Johannes Lerch authored Sep 26, 2014






ddde660b










08 Aug, 2014
1 commit









opened up interface

·
6a296cfc


Eric Bodden authored Aug 08, 2014






6a296cfc










25 Jun, 2014
7 commits









Using LeakKey to identify leaks not only on the basis of equal source

·
dd4a3cde




Johannes Lerch authored Jun 25, 2014

statements, but also equal call sites to which the flow leaks.





dd4a3cde













Introducing wrapper method propagateUnbalancedReturnFlow, which by

·
6fd38817




Johannes Lerch authored Jun 25, 2014

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.





6fd38817













Removed unnecessary call to decrement before reset.

·
663aa65d


Johannes Lerch authored Jun 25, 2014






663aa65d













Not removing keys of paused edges as it is not guaranteed that in the

·
d7737fda




Johannes Lerch authored Jun 25, 2014

meantime no other thread has added new entries to the set stored as
value of the map.





d7737fda













Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver

·
6016a868


Johannes Lerch authored Jun 18, 2014






6016a868













store calling context in abstraction to enable context sensitive path

·
26b9e710




Johannes Lerch authored Jun 13, 2014

building





26b9e710













Change to IDESolver to behave consistent in cases in which summaries can

·
cbce681e




Johannes Lerch authored Jun 11, 2014

be applied inside processCall and cases in which they are applied in
processExit, i.e., in the latter computeReturnFlowFunction was called
only once for multiple source values on the caller side.





cbce681e










09 Jun, 2014
1 commit









Add nullness check of CacheBuilder

·
c16c1f89


sleepingpig authored Jun 09, 2014






c16c1f89










23 Apr, 2014
1 commit









now caching the hash code of the Pair class

·
f3b1b1f1


Steven Arzt authored Apr 23, 2014






f3b1b1f1










02 Apr, 2014
1 commit









generalized ICFG types

·
3d7cf977


Steven Arzt authored Apr 02, 2014






3d7cf977










03 Mar, 2014
1 commit









Added missing restoreContext call in processCall

·
81655ff1


Johannes Lerch authored Mar 03, 2014






81655ff1










28 Feb, 2014
1 commit









Enabling possibility to reuse summaries in callees by setting source

·
2c10ea10




Johannes Lerch authored Feb 28, 2014

statement to null and restoring original source statement when returning
context sensitively.





2c10ea10










17 Jan, 2014
2 commits









generalized some return types

·
4b76e92f


Steven Arzt authored Jan 17, 2014






4b76e92f













caching hash value

·
3b6c322d


Steven Arzt authored Jan 17, 2014






3b6c322d










15 Jan, 2014
1 commit









generalized a data structure

·
0b0c5ba4


Steven Arzt authored Jan 15, 2014






0b0c5ba4










24 Dec, 2013
3 commits









cleaned up code

·
f21c884a


Eric Bodden authored Dec 24, 2013






f21c884a













made Gen and Transfer use TwoElementSet

·
802bc2dc


Eric Bodden authored Dec 24, 2013






802bc2dc













added class TwoElementSet, which implements exactly what the name says; useful...

·
c52d9928




Eric Bodden authored Dec 24, 2013

added class TwoElementSet, which implements exactly what the name says; useful for use within FlowFunction, as it is much more efficient than using a two-element HashSet





c52d9928










15 Dec, 2013
1 commit









cleaned up code

·
a278d4f7


Eric Bodden authored Dec 15, 2013






a278d4f7










28 Nov, 2013
1 commit









pulled up the LinkedNode interface onto the first level

·
3980d99f


Steven Arzt authored Nov 28, 2013






3980d99f










31 Oct, 2013
2 commits









made the path cache for joining abstraction protected instead of private

·
4d3ab595


Steven Arzt authored Oct 31, 2013






4d3ab595













added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066










28 Oct, 2013
5 commits









Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b




Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b













comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf













added union flow function

·
52970dcc


Eric Bodden authored Oct 28, 2013






52970dcc













fixed comment

·
2a1414bb


Eric Bodden authored Oct 28, 2013






2a1414bb













suppress warning

·
864f77c6


Eric Bodden authored Oct 28, 2013






864f77c6










26 Oct, 2013
1 commit









Better be careful with executors: If they are shutting down, no new tasks may...

·
3cad6e8e




Steven Arzt authored Oct 26, 2013

Better be careful with executors: If they are shutting down, no new tasks may be submitted - otherwise, we will just trigger another pointless exception. Secondly, if we increment the number of active executors and only afterwards actually submit the task, we have to make sure that the submission goes through - otherwise out counter is off by one! I now decrement it again if the executor rejects the new task.





3cad6e8e


















Open sidebar



Joshua Garcia heros

Commits







Open sidebar



Joshua Garcia heros

Commits




Open sidebar

Joshua Garcia heros

Commits


Joshua Garciaherosheros
Commits












herossrcheros
















08 Jan, 2015
1 commit









Bugfix, Helper functions, and renaming

·
b131fd75


Johannes Lerch authored Jan 08, 2015






b131fd75










07 Jan, 2015
2 commits









"interest/concrretization" edges in callers are no longer propagated as

·
05779cea




Johannes Lerch authored Jan 07, 2015

normal path edges, but immediately registered as jump functions to avoid
duplications and avoidable merges





05779cea













cleaning code

·
1cd34e9e


Johannes Lerch authored Jan 07, 2015






1cd34e9e










05 Jan, 2015
1 commit









handling for writing fields / excluding access paths

·
ec76098b


Johannes Lerch authored Jan 05, 2015






ec76098b










10 Dec, 2014
1 commit









Bug/test fixes

·
7527a0d4


Johannes Lerch authored Dec 10, 2014






7527a0d4










27 Nov, 2014
1 commit









handling the case that incoming edge is prefix of existing summary

·
8d40408f


Johannes Lerch authored Nov 27, 2014






8d40408f










25 Nov, 2014
1 commit









edges on hold + resume

·
dea31cae


Johannes Lerch authored Nov 25, 2014






dea31cae










13 Nov, 2014
1 commit









annotated facts (WIP)

·
9176fc7c


Johannes Lerch authored Nov 13, 2014






9176fc7c










22 Oct, 2014
1 commit









use of abstracted summaries

·
3b064347


Johannes Lerch authored Oct 22, 2014






3b064347










15 Oct, 2014
1 commit









FieldSensitiveIFDSSolver - concept outline

·
f5ac702c


Johannes Späth authored Oct 15, 2014






f5ac702c










25 Sep, 2014
1 commit









Introducing more abstract/flexible version of PathTrackingIFDSSolver

·
ddde660b


Johannes Lerch authored Sep 26, 2014






ddde660b










08 Aug, 2014
1 commit









opened up interface

·
6a296cfc


Eric Bodden authored Aug 08, 2014






6a296cfc










25 Jun, 2014
7 commits









Using LeakKey to identify leaks not only on the basis of equal source

·
dd4a3cde




Johannes Lerch authored Jun 25, 2014

statements, but also equal call sites to which the flow leaks.





dd4a3cde













Introducing wrapper method propagateUnbalancedReturnFlow, which by

·
6fd38817




Johannes Lerch authored Jun 25, 2014

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.





6fd38817













Removed unnecessary call to decrement before reset.

·
663aa65d


Johannes Lerch authored Jun 25, 2014






663aa65d













Not removing keys of paused edges as it is not guaranteed that in the

·
d7737fda




Johannes Lerch authored Jun 25, 2014

meantime no other thread has added new entries to the set stored as
value of the map.





d7737fda













Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver

·
6016a868


Johannes Lerch authored Jun 18, 2014






6016a868













store calling context in abstraction to enable context sensitive path

·
26b9e710




Johannes Lerch authored Jun 13, 2014

building





26b9e710













Change to IDESolver to behave consistent in cases in which summaries can

·
cbce681e




Johannes Lerch authored Jun 11, 2014

be applied inside processCall and cases in which they are applied in
processExit, i.e., in the latter computeReturnFlowFunction was called
only once for multiple source values on the caller side.





cbce681e










09 Jun, 2014
1 commit









Add nullness check of CacheBuilder

·
c16c1f89


sleepingpig authored Jun 09, 2014






c16c1f89










23 Apr, 2014
1 commit









now caching the hash code of the Pair class

·
f3b1b1f1


Steven Arzt authored Apr 23, 2014






f3b1b1f1










02 Apr, 2014
1 commit









generalized ICFG types

·
3d7cf977


Steven Arzt authored Apr 02, 2014






3d7cf977










03 Mar, 2014
1 commit









Added missing restoreContext call in processCall

·
81655ff1


Johannes Lerch authored Mar 03, 2014






81655ff1










28 Feb, 2014
1 commit









Enabling possibility to reuse summaries in callees by setting source

·
2c10ea10




Johannes Lerch authored Feb 28, 2014

statement to null and restoring original source statement when returning
context sensitively.





2c10ea10










17 Jan, 2014
2 commits









generalized some return types

·
4b76e92f


Steven Arzt authored Jan 17, 2014






4b76e92f













caching hash value

·
3b6c322d


Steven Arzt authored Jan 17, 2014






3b6c322d










15 Jan, 2014
1 commit









generalized a data structure

·
0b0c5ba4


Steven Arzt authored Jan 15, 2014






0b0c5ba4










24 Dec, 2013
3 commits









cleaned up code

·
f21c884a


Eric Bodden authored Dec 24, 2013






f21c884a













made Gen and Transfer use TwoElementSet

·
802bc2dc


Eric Bodden authored Dec 24, 2013






802bc2dc













added class TwoElementSet, which implements exactly what the name says; useful...

·
c52d9928




Eric Bodden authored Dec 24, 2013

added class TwoElementSet, which implements exactly what the name says; useful for use within FlowFunction, as it is much more efficient than using a two-element HashSet





c52d9928










15 Dec, 2013
1 commit









cleaned up code

·
a278d4f7


Eric Bodden authored Dec 15, 2013






a278d4f7










28 Nov, 2013
1 commit









pulled up the LinkedNode interface onto the first level

·
3980d99f


Steven Arzt authored Nov 28, 2013






3980d99f










31 Oct, 2013
2 commits









made the path cache for joining abstraction protected instead of private

·
4d3ab595


Steven Arzt authored Oct 31, 2013






4d3ab595













added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066










28 Oct, 2013
5 commits









Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b




Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b













comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf













added union flow function

·
52970dcc


Eric Bodden authored Oct 28, 2013






52970dcc













fixed comment

·
2a1414bb


Eric Bodden authored Oct 28, 2013






2a1414bb













suppress warning

·
864f77c6


Eric Bodden authored Oct 28, 2013






864f77c6










26 Oct, 2013
1 commit









Better be careful with executors: If they are shutting down, no new tasks may...

·
3cad6e8e




Steven Arzt authored Oct 26, 2013

Better be careful with executors: If they are shutting down, no new tasks may be submitted - otherwise, we will just trigger another pointless exception. Secondly, if we increment the number of active executors and only afterwards actually submit the task, we have to make sure that the submission goes through - otherwise out counter is off by one! I now decrement it again if the executor rejects the new task.





3cad6e8e























herossrcheros
















08 Jan, 2015
1 commit









Bugfix, Helper functions, and renaming

·
b131fd75


Johannes Lerch authored Jan 08, 2015






b131fd75










07 Jan, 2015
2 commits









"interest/concrretization" edges in callers are no longer propagated as

·
05779cea




Johannes Lerch authored Jan 07, 2015

normal path edges, but immediately registered as jump functions to avoid
duplications and avoidable merges





05779cea













cleaning code

·
1cd34e9e


Johannes Lerch authored Jan 07, 2015






1cd34e9e










05 Jan, 2015
1 commit









handling for writing fields / excluding access paths

·
ec76098b


Johannes Lerch authored Jan 05, 2015






ec76098b










10 Dec, 2014
1 commit









Bug/test fixes

·
7527a0d4


Johannes Lerch authored Dec 10, 2014






7527a0d4










27 Nov, 2014
1 commit









handling the case that incoming edge is prefix of existing summary

·
8d40408f


Johannes Lerch authored Nov 27, 2014






8d40408f










25 Nov, 2014
1 commit









edges on hold + resume

·
dea31cae


Johannes Lerch authored Nov 25, 2014






dea31cae










13 Nov, 2014
1 commit









annotated facts (WIP)

·
9176fc7c


Johannes Lerch authored Nov 13, 2014






9176fc7c










22 Oct, 2014
1 commit









use of abstracted summaries

·
3b064347


Johannes Lerch authored Oct 22, 2014






3b064347










15 Oct, 2014
1 commit









FieldSensitiveIFDSSolver - concept outline

·
f5ac702c


Johannes Späth authored Oct 15, 2014






f5ac702c










25 Sep, 2014
1 commit









Introducing more abstract/flexible version of PathTrackingIFDSSolver

·
ddde660b


Johannes Lerch authored Sep 26, 2014






ddde660b










08 Aug, 2014
1 commit









opened up interface

·
6a296cfc


Eric Bodden authored Aug 08, 2014






6a296cfc










25 Jun, 2014
7 commits









Using LeakKey to identify leaks not only on the basis of equal source

·
dd4a3cde




Johannes Lerch authored Jun 25, 2014

statements, but also equal call sites to which the flow leaks.





dd4a3cde













Introducing wrapper method propagateUnbalancedReturnFlow, which by

·
6fd38817




Johannes Lerch authored Jun 25, 2014

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.





6fd38817













Removed unnecessary call to decrement before reset.

·
663aa65d


Johannes Lerch authored Jun 25, 2014






663aa65d













Not removing keys of paused edges as it is not guaranteed that in the

·
d7737fda




Johannes Lerch authored Jun 25, 2014

meantime no other thread has added new entries to the set stored as
value of the map.





d7737fda













Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver

·
6016a868


Johannes Lerch authored Jun 18, 2014






6016a868













store calling context in abstraction to enable context sensitive path

·
26b9e710




Johannes Lerch authored Jun 13, 2014

building





26b9e710













Change to IDESolver to behave consistent in cases in which summaries can

·
cbce681e




Johannes Lerch authored Jun 11, 2014

be applied inside processCall and cases in which they are applied in
processExit, i.e., in the latter computeReturnFlowFunction was called
only once for multiple source values on the caller side.





cbce681e










09 Jun, 2014
1 commit









Add nullness check of CacheBuilder

·
c16c1f89


sleepingpig authored Jun 09, 2014






c16c1f89










23 Apr, 2014
1 commit









now caching the hash code of the Pair class

·
f3b1b1f1


Steven Arzt authored Apr 23, 2014






f3b1b1f1










02 Apr, 2014
1 commit









generalized ICFG types

·
3d7cf977


Steven Arzt authored Apr 02, 2014






3d7cf977










03 Mar, 2014
1 commit









Added missing restoreContext call in processCall

·
81655ff1


Johannes Lerch authored Mar 03, 2014






81655ff1










28 Feb, 2014
1 commit









Enabling possibility to reuse summaries in callees by setting source

·
2c10ea10




Johannes Lerch authored Feb 28, 2014

statement to null and restoring original source statement when returning
context sensitively.





2c10ea10










17 Jan, 2014
2 commits









generalized some return types

·
4b76e92f


Steven Arzt authored Jan 17, 2014






4b76e92f













caching hash value

·
3b6c322d


Steven Arzt authored Jan 17, 2014






3b6c322d










15 Jan, 2014
1 commit









generalized a data structure

·
0b0c5ba4


Steven Arzt authored Jan 15, 2014






0b0c5ba4










24 Dec, 2013
3 commits









cleaned up code

·
f21c884a


Eric Bodden authored Dec 24, 2013






f21c884a













made Gen and Transfer use TwoElementSet

·
802bc2dc


Eric Bodden authored Dec 24, 2013






802bc2dc













added class TwoElementSet, which implements exactly what the name says; useful...

·
c52d9928




Eric Bodden authored Dec 24, 2013

added class TwoElementSet, which implements exactly what the name says; useful for use within FlowFunction, as it is much more efficient than using a two-element HashSet





c52d9928










15 Dec, 2013
1 commit









cleaned up code

·
a278d4f7


Eric Bodden authored Dec 15, 2013






a278d4f7










28 Nov, 2013
1 commit









pulled up the LinkedNode interface onto the first level

·
3980d99f


Steven Arzt authored Nov 28, 2013






3980d99f










31 Oct, 2013
2 commits









made the path cache for joining abstraction protected instead of private

·
4d3ab595


Steven Arzt authored Oct 31, 2013






4d3ab595













added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066










28 Oct, 2013
5 commits









Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b




Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b













comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf













added union flow function

·
52970dcc


Eric Bodden authored Oct 28, 2013






52970dcc













fixed comment

·
2a1414bb


Eric Bodden authored Oct 28, 2013






2a1414bb













suppress warning

·
864f77c6


Eric Bodden authored Oct 28, 2013






864f77c6










26 Oct, 2013
1 commit









Better be careful with executors: If they are shutting down, no new tasks may...

·
3cad6e8e




Steven Arzt authored Oct 26, 2013

Better be careful with executors: If they are shutting down, no new tasks may be submitted - otherwise, we will just trigger another pointless exception. Secondly, if we increment the number of active executors and only afterwards actually submit the task, we have to make sure that the submission goes through - otherwise out counter is off by one! I now decrement it again if the executor rejects the new task.





3cad6e8e



















herossrcheros


















herossrcheros
















herossrcheros



herossrcheros













08 Jan, 2015
1 commit









Bugfix, Helper functions, and renaming

·
b131fd75


Johannes Lerch authored Jan 08, 2015






b131fd75










07 Jan, 2015
2 commits









"interest/concrretization" edges in callers are no longer propagated as

·
05779cea




Johannes Lerch authored Jan 07, 2015

normal path edges, but immediately registered as jump functions to avoid
duplications and avoidable merges





05779cea













cleaning code

·
1cd34e9e


Johannes Lerch authored Jan 07, 2015






1cd34e9e










05 Jan, 2015
1 commit









handling for writing fields / excluding access paths

·
ec76098b


Johannes Lerch authored Jan 05, 2015






ec76098b










10 Dec, 2014
1 commit









Bug/test fixes

·
7527a0d4


Johannes Lerch authored Dec 10, 2014






7527a0d4










27 Nov, 2014
1 commit









handling the case that incoming edge is prefix of existing summary

·
8d40408f


Johannes Lerch authored Nov 27, 2014






8d40408f










25 Nov, 2014
1 commit









edges on hold + resume

·
dea31cae


Johannes Lerch authored Nov 25, 2014






dea31cae










13 Nov, 2014
1 commit









annotated facts (WIP)

·
9176fc7c


Johannes Lerch authored Nov 13, 2014






9176fc7c










22 Oct, 2014
1 commit









use of abstracted summaries

·
3b064347


Johannes Lerch authored Oct 22, 2014






3b064347










15 Oct, 2014
1 commit









FieldSensitiveIFDSSolver - concept outline

·
f5ac702c


Johannes Späth authored Oct 15, 2014






f5ac702c










25 Sep, 2014
1 commit









Introducing more abstract/flexible version of PathTrackingIFDSSolver

·
ddde660b


Johannes Lerch authored Sep 26, 2014






ddde660b










08 Aug, 2014
1 commit









opened up interface

·
6a296cfc


Eric Bodden authored Aug 08, 2014






6a296cfc










25 Jun, 2014
7 commits









Using LeakKey to identify leaks not only on the basis of equal source

·
dd4a3cde




Johannes Lerch authored Jun 25, 2014

statements, but also equal call sites to which the flow leaks.





dd4a3cde













Introducing wrapper method propagateUnbalancedReturnFlow, which by

·
6fd38817




Johannes Lerch authored Jun 25, 2014

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.





6fd38817













Removed unnecessary call to decrement before reset.

·
663aa65d


Johannes Lerch authored Jun 25, 2014






663aa65d













Not removing keys of paused edges as it is not guaranteed that in the

·
d7737fda




Johannes Lerch authored Jun 25, 2014

meantime no other thread has added new entries to the set stored as
value of the map.





d7737fda













Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver

·
6016a868


Johannes Lerch authored Jun 18, 2014






6016a868













store calling context in abstraction to enable context sensitive path

·
26b9e710




Johannes Lerch authored Jun 13, 2014

building





26b9e710













Change to IDESolver to behave consistent in cases in which summaries can

·
cbce681e




Johannes Lerch authored Jun 11, 2014

be applied inside processCall and cases in which they are applied in
processExit, i.e., in the latter computeReturnFlowFunction was called
only once for multiple source values on the caller side.





cbce681e










09 Jun, 2014
1 commit









Add nullness check of CacheBuilder

·
c16c1f89


sleepingpig authored Jun 09, 2014






c16c1f89










23 Apr, 2014
1 commit









now caching the hash code of the Pair class

·
f3b1b1f1


Steven Arzt authored Apr 23, 2014






f3b1b1f1










02 Apr, 2014
1 commit









generalized ICFG types

·
3d7cf977


Steven Arzt authored Apr 02, 2014






3d7cf977










03 Mar, 2014
1 commit









Added missing restoreContext call in processCall

·
81655ff1


Johannes Lerch authored Mar 03, 2014






81655ff1










28 Feb, 2014
1 commit









Enabling possibility to reuse summaries in callees by setting source

·
2c10ea10




Johannes Lerch authored Feb 28, 2014

statement to null and restoring original source statement when returning
context sensitively.





2c10ea10










17 Jan, 2014
2 commits









generalized some return types

·
4b76e92f


Steven Arzt authored Jan 17, 2014






4b76e92f













caching hash value

·
3b6c322d


Steven Arzt authored Jan 17, 2014






3b6c322d










15 Jan, 2014
1 commit









generalized a data structure

·
0b0c5ba4


Steven Arzt authored Jan 15, 2014






0b0c5ba4










24 Dec, 2013
3 commits









cleaned up code

·
f21c884a


Eric Bodden authored Dec 24, 2013






f21c884a













made Gen and Transfer use TwoElementSet

·
802bc2dc


Eric Bodden authored Dec 24, 2013






802bc2dc













added class TwoElementSet, which implements exactly what the name says; useful...

·
c52d9928




Eric Bodden authored Dec 24, 2013

added class TwoElementSet, which implements exactly what the name says; useful for use within FlowFunction, as it is much more efficient than using a two-element HashSet





c52d9928










15 Dec, 2013
1 commit









cleaned up code

·
a278d4f7


Eric Bodden authored Dec 15, 2013






a278d4f7










28 Nov, 2013
1 commit









pulled up the LinkedNode interface onto the first level

·
3980d99f


Steven Arzt authored Nov 28, 2013






3980d99f










31 Oct, 2013
2 commits









made the path cache for joining abstraction protected instead of private

·
4d3ab595


Steven Arzt authored Oct 31, 2013






4d3ab595













added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066










28 Oct, 2013
5 commits









Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b




Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b













comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf













added union flow function

·
52970dcc


Eric Bodden authored Oct 28, 2013






52970dcc













fixed comment

·
2a1414bb


Eric Bodden authored Oct 28, 2013






2a1414bb













suppress warning

·
864f77c6


Eric Bodden authored Oct 28, 2013






864f77c6










26 Oct, 2013
1 commit









Better be careful with executors: If they are shutting down, no new tasks may...

·
3cad6e8e




Steven Arzt authored Oct 26, 2013

Better be careful with executors: If they are shutting down, no new tasks may be submitted - otherwise, we will just trigger another pointless exception. Secondly, if we increment the number of active executors and only afterwards actually submit the task, we have to make sure that the submission goes through - otherwise out counter is off by one! I now decrement it again if the executor rejects the new task.





3cad6e8e











08 Jan, 2015
1 commit
08 Jan, 20151 commit







Bugfix, Helper functions, and renaming

·
b131fd75


Johannes Lerch authored Jan 08, 2015






b131fd75














Bugfix, Helper functions, and renaming

·
b131fd75


Johannes Lerch authored Jan 08, 2015






b131fd75










Bugfix, Helper functions, and renaming

·
b131fd75


Johannes Lerch authored Jan 08, 2015






b131fd75






Bugfix, Helper functions, and renaming

·
b131fd75


Johannes Lerch authored Jan 08, 2015


·
b131fd75

Johannes Lerch authored Jan 08, 2015




b131fd75






b131fd75




b131fd75

07 Jan, 2015
2 commits
07 Jan, 20152 commits







"interest/concrretization" edges in callers are no longer propagated as

·
05779cea




Johannes Lerch authored Jan 07, 2015

normal path edges, but immediately registered as jump functions to avoid
duplications and avoidable merges





05779cea













cleaning code

·
1cd34e9e


Johannes Lerch authored Jan 07, 2015






1cd34e9e














"interest/concrretization" edges in callers are no longer propagated as

·
05779cea




Johannes Lerch authored Jan 07, 2015

normal path edges, but immediately registered as jump functions to avoid
duplications and avoidable merges





05779cea










"interest/concrretization" edges in callers are no longer propagated as

·
05779cea




Johannes Lerch authored Jan 07, 2015

normal path edges, but immediately registered as jump functions to avoid
duplications and avoidable merges





05779cea






"interest/concrretization" edges in callers are no longer propagated as

·
05779cea




Johannes Lerch authored Jan 07, 2015

normal path edges, but immediately registered as jump functions to avoid
duplications and avoidable merges

·
05779cea

Johannes Lerch authored Jan 07, 2015




05779cea






05779cea




05779cea






cleaning code

·
1cd34e9e


Johannes Lerch authored Jan 07, 2015






1cd34e9e










cleaning code

·
1cd34e9e


Johannes Lerch authored Jan 07, 2015






1cd34e9e






cleaning code

·
1cd34e9e


Johannes Lerch authored Jan 07, 2015


·
1cd34e9e

Johannes Lerch authored Jan 07, 2015




1cd34e9e






1cd34e9e




1cd34e9e

05 Jan, 2015
1 commit
05 Jan, 20151 commit







handling for writing fields / excluding access paths

·
ec76098b


Johannes Lerch authored Jan 05, 2015






ec76098b














handling for writing fields / excluding access paths

·
ec76098b


Johannes Lerch authored Jan 05, 2015






ec76098b










handling for writing fields / excluding access paths

·
ec76098b


Johannes Lerch authored Jan 05, 2015






ec76098b






handling for writing fields / excluding access paths

·
ec76098b


Johannes Lerch authored Jan 05, 2015


·
ec76098b

Johannes Lerch authored Jan 05, 2015




ec76098b






ec76098b




ec76098b

10 Dec, 2014
1 commit
10 Dec, 20141 commit







Bug/test fixes

·
7527a0d4


Johannes Lerch authored Dec 10, 2014






7527a0d4














Bug/test fixes

·
7527a0d4


Johannes Lerch authored Dec 10, 2014






7527a0d4










Bug/test fixes

·
7527a0d4


Johannes Lerch authored Dec 10, 2014






7527a0d4






Bug/test fixes

·
7527a0d4


Johannes Lerch authored Dec 10, 2014


·
7527a0d4

Johannes Lerch authored Dec 10, 2014




7527a0d4






7527a0d4




7527a0d4

27 Nov, 2014
1 commit
27 Nov, 20141 commit







handling the case that incoming edge is prefix of existing summary

·
8d40408f


Johannes Lerch authored Nov 27, 2014






8d40408f














handling the case that incoming edge is prefix of existing summary

·
8d40408f


Johannes Lerch authored Nov 27, 2014






8d40408f










handling the case that incoming edge is prefix of existing summary

·
8d40408f


Johannes Lerch authored Nov 27, 2014






8d40408f






handling the case that incoming edge is prefix of existing summary

·
8d40408f


Johannes Lerch authored Nov 27, 2014


·
8d40408f

Johannes Lerch authored Nov 27, 2014




8d40408f






8d40408f




8d40408f

25 Nov, 2014
1 commit
25 Nov, 20141 commit







edges on hold + resume

·
dea31cae


Johannes Lerch authored Nov 25, 2014






dea31cae














edges on hold + resume

·
dea31cae


Johannes Lerch authored Nov 25, 2014






dea31cae










edges on hold + resume

·
dea31cae


Johannes Lerch authored Nov 25, 2014






dea31cae






edges on hold + resume

·
dea31cae


Johannes Lerch authored Nov 25, 2014


·
dea31cae

Johannes Lerch authored Nov 25, 2014




dea31cae






dea31cae




dea31cae

13 Nov, 2014
1 commit
13 Nov, 20141 commit







annotated facts (WIP)

·
9176fc7c


Johannes Lerch authored Nov 13, 2014






9176fc7c














annotated facts (WIP)

·
9176fc7c


Johannes Lerch authored Nov 13, 2014






9176fc7c










annotated facts (WIP)

·
9176fc7c


Johannes Lerch authored Nov 13, 2014






9176fc7c






annotated facts (WIP)

·
9176fc7c


Johannes Lerch authored Nov 13, 2014


·
9176fc7c

Johannes Lerch authored Nov 13, 2014




9176fc7c






9176fc7c




9176fc7c

22 Oct, 2014
1 commit
22 Oct, 20141 commit







use of abstracted summaries

·
3b064347


Johannes Lerch authored Oct 22, 2014






3b064347














use of abstracted summaries

·
3b064347


Johannes Lerch authored Oct 22, 2014






3b064347










use of abstracted summaries

·
3b064347


Johannes Lerch authored Oct 22, 2014






3b064347






use of abstracted summaries

·
3b064347


Johannes Lerch authored Oct 22, 2014


·
3b064347

Johannes Lerch authored Oct 22, 2014




3b064347






3b064347




3b064347

15 Oct, 2014
1 commit
15 Oct, 20141 commit







FieldSensitiveIFDSSolver - concept outline

·
f5ac702c


Johannes Späth authored Oct 15, 2014






f5ac702c














FieldSensitiveIFDSSolver - concept outline

·
f5ac702c


Johannes Späth authored Oct 15, 2014






f5ac702c










FieldSensitiveIFDSSolver - concept outline

·
f5ac702c


Johannes Späth authored Oct 15, 2014






f5ac702c






FieldSensitiveIFDSSolver - concept outline

·
f5ac702c


Johannes Späth authored Oct 15, 2014


·
f5ac702c

Johannes Späth authored Oct 15, 2014




f5ac702c






f5ac702c




f5ac702c

25 Sep, 2014
1 commit
25 Sep, 20141 commit







Introducing more abstract/flexible version of PathTrackingIFDSSolver

·
ddde660b


Johannes Lerch authored Sep 26, 2014






ddde660b














Introducing more abstract/flexible version of PathTrackingIFDSSolver

·
ddde660b


Johannes Lerch authored Sep 26, 2014






ddde660b










Introducing more abstract/flexible version of PathTrackingIFDSSolver

·
ddde660b


Johannes Lerch authored Sep 26, 2014






ddde660b






Introducing more abstract/flexible version of PathTrackingIFDSSolver

·
ddde660b


Johannes Lerch authored Sep 26, 2014


·
ddde660b

Johannes Lerch authored Sep 26, 2014




ddde660b






ddde660b




ddde660b

08 Aug, 2014
1 commit
08 Aug, 20141 commit







opened up interface

·
6a296cfc


Eric Bodden authored Aug 08, 2014






6a296cfc














opened up interface

·
6a296cfc


Eric Bodden authored Aug 08, 2014






6a296cfc










opened up interface

·
6a296cfc


Eric Bodden authored Aug 08, 2014






6a296cfc






opened up interface

·
6a296cfc


Eric Bodden authored Aug 08, 2014


·
6a296cfc

Eric Bodden authored Aug 08, 2014




6a296cfc






6a296cfc




6a296cfc

25 Jun, 2014
7 commits
25 Jun, 20147 commits







Using LeakKey to identify leaks not only on the basis of equal source

·
dd4a3cde




Johannes Lerch authored Jun 25, 2014

statements, but also equal call sites to which the flow leaks.





dd4a3cde













Introducing wrapper method propagateUnbalancedReturnFlow, which by

·
6fd38817




Johannes Lerch authored Jun 25, 2014

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.





6fd38817













Removed unnecessary call to decrement before reset.

·
663aa65d


Johannes Lerch authored Jun 25, 2014






663aa65d













Not removing keys of paused edges as it is not guaranteed that in the

·
d7737fda




Johannes Lerch authored Jun 25, 2014

meantime no other thread has added new entries to the set stored as
value of the map.





d7737fda













Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver

·
6016a868


Johannes Lerch authored Jun 18, 2014






6016a868













store calling context in abstraction to enable context sensitive path

·
26b9e710




Johannes Lerch authored Jun 13, 2014

building





26b9e710













Change to IDESolver to behave consistent in cases in which summaries can

·
cbce681e




Johannes Lerch authored Jun 11, 2014

be applied inside processCall and cases in which they are applied in
processExit, i.e., in the latter computeReturnFlowFunction was called
only once for multiple source values on the caller side.





cbce681e














Using LeakKey to identify leaks not only on the basis of equal source

·
dd4a3cde




Johannes Lerch authored Jun 25, 2014

statements, but also equal call sites to which the flow leaks.





dd4a3cde










Using LeakKey to identify leaks not only on the basis of equal source

·
dd4a3cde




Johannes Lerch authored Jun 25, 2014

statements, but also equal call sites to which the flow leaks.





dd4a3cde






Using LeakKey to identify leaks not only on the basis of equal source

·
dd4a3cde




Johannes Lerch authored Jun 25, 2014

statements, but also equal call sites to which the flow leaks.

·
dd4a3cde

Johannes Lerch authored Jun 25, 2014




dd4a3cde






dd4a3cde




dd4a3cde






Introducing wrapper method propagateUnbalancedReturnFlow, which by

·
6fd38817




Johannes Lerch authored Jun 25, 2014

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.





6fd38817










Introducing wrapper method propagateUnbalancedReturnFlow, which by

·
6fd38817




Johannes Lerch authored Jun 25, 2014

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.





6fd38817






Introducing wrapper method propagateUnbalancedReturnFlow, which by

·
6fd38817




Johannes Lerch authored Jun 25, 2014

default forwards to propagate, but is overridden in BiDi to enable
pausing edges at the correct time.

·
6fd38817

Johannes Lerch authored Jun 25, 2014




6fd38817






6fd38817




6fd38817






Removed unnecessary call to decrement before reset.

·
663aa65d


Johannes Lerch authored Jun 25, 2014






663aa65d










Removed unnecessary call to decrement before reset.

·
663aa65d


Johannes Lerch authored Jun 25, 2014






663aa65d






Removed unnecessary call to decrement before reset.

·
663aa65d


Johannes Lerch authored Jun 25, 2014


·
663aa65d

Johannes Lerch authored Jun 25, 2014




663aa65d






663aa65d




663aa65d






Not removing keys of paused edges as it is not guaranteed that in the

·
d7737fda




Johannes Lerch authored Jun 25, 2014

meantime no other thread has added new entries to the set stored as
value of the map.





d7737fda










Not removing keys of paused edges as it is not guaranteed that in the

·
d7737fda




Johannes Lerch authored Jun 25, 2014

meantime no other thread has added new entries to the set stored as
value of the map.





d7737fda






Not removing keys of paused edges as it is not guaranteed that in the

·
d7737fda




Johannes Lerch authored Jun 25, 2014

meantime no other thread has added new entries to the set stored as
value of the map.

·
d7737fda

Johannes Lerch authored Jun 25, 2014




d7737fda






d7737fda




d7737fda






Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver

·
6016a868


Johannes Lerch authored Jun 18, 2014






6016a868










Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver

·
6016a868


Johannes Lerch authored Jun 18, 2014






6016a868






Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver

·
6016a868


Johannes Lerch authored Jun 18, 2014


·
6016a868

Johannes Lerch authored Jun 18, 2014




6016a868






6016a868




6016a868






store calling context in abstraction to enable context sensitive path

·
26b9e710




Johannes Lerch authored Jun 13, 2014

building





26b9e710










store calling context in abstraction to enable context sensitive path

·
26b9e710




Johannes Lerch authored Jun 13, 2014

building





26b9e710






store calling context in abstraction to enable context sensitive path

·
26b9e710




Johannes Lerch authored Jun 13, 2014

building

·
26b9e710

Johannes Lerch authored Jun 13, 2014




26b9e710






26b9e710




26b9e710






Change to IDESolver to behave consistent in cases in which summaries can

·
cbce681e




Johannes Lerch authored Jun 11, 2014

be applied inside processCall and cases in which they are applied in
processExit, i.e., in the latter computeReturnFlowFunction was called
only once for multiple source values on the caller side.





cbce681e










Change to IDESolver to behave consistent in cases in which summaries can

·
cbce681e




Johannes Lerch authored Jun 11, 2014

be applied inside processCall and cases in which they are applied in
processExit, i.e., in the latter computeReturnFlowFunction was called
only once for multiple source values on the caller side.





cbce681e






Change to IDESolver to behave consistent in cases in which summaries can

·
cbce681e




Johannes Lerch authored Jun 11, 2014

be applied inside processCall and cases in which they are applied in
processExit, i.e., in the latter computeReturnFlowFunction was called
only once for multiple source values on the caller side.

·
cbce681e

Johannes Lerch authored Jun 11, 2014




cbce681e






cbce681e




cbce681e

09 Jun, 2014
1 commit
09 Jun, 20141 commit







Add nullness check of CacheBuilder

·
c16c1f89


sleepingpig authored Jun 09, 2014






c16c1f89














Add nullness check of CacheBuilder

·
c16c1f89


sleepingpig authored Jun 09, 2014






c16c1f89










Add nullness check of CacheBuilder

·
c16c1f89


sleepingpig authored Jun 09, 2014






c16c1f89






Add nullness check of CacheBuilder

·
c16c1f89


sleepingpig authored Jun 09, 2014


·
c16c1f89

sleepingpig authored Jun 09, 2014




c16c1f89






c16c1f89




c16c1f89

23 Apr, 2014
1 commit
23 Apr, 20141 commit







now caching the hash code of the Pair class

·
f3b1b1f1


Steven Arzt authored Apr 23, 2014






f3b1b1f1














now caching the hash code of the Pair class

·
f3b1b1f1


Steven Arzt authored Apr 23, 2014






f3b1b1f1










now caching the hash code of the Pair class

·
f3b1b1f1


Steven Arzt authored Apr 23, 2014






f3b1b1f1






now caching the hash code of the Pair class

·
f3b1b1f1


Steven Arzt authored Apr 23, 2014


·
f3b1b1f1

Steven Arzt authored Apr 23, 2014




f3b1b1f1






f3b1b1f1




f3b1b1f1

02 Apr, 2014
1 commit
02 Apr, 20141 commit







generalized ICFG types

·
3d7cf977


Steven Arzt authored Apr 02, 2014






3d7cf977














generalized ICFG types

·
3d7cf977


Steven Arzt authored Apr 02, 2014






3d7cf977










generalized ICFG types

·
3d7cf977


Steven Arzt authored Apr 02, 2014






3d7cf977






generalized ICFG types

·
3d7cf977


Steven Arzt authored Apr 02, 2014


·
3d7cf977

Steven Arzt authored Apr 02, 2014




3d7cf977






3d7cf977




3d7cf977

03 Mar, 2014
1 commit
03 Mar, 20141 commit







Added missing restoreContext call in processCall

·
81655ff1


Johannes Lerch authored Mar 03, 2014






81655ff1














Added missing restoreContext call in processCall

·
81655ff1


Johannes Lerch authored Mar 03, 2014






81655ff1










Added missing restoreContext call in processCall

·
81655ff1


Johannes Lerch authored Mar 03, 2014






81655ff1






Added missing restoreContext call in processCall

·
81655ff1


Johannes Lerch authored Mar 03, 2014


·
81655ff1

Johannes Lerch authored Mar 03, 2014




81655ff1






81655ff1




81655ff1

28 Feb, 2014
1 commit
28 Feb, 20141 commit







Enabling possibility to reuse summaries in callees by setting source

·
2c10ea10




Johannes Lerch authored Feb 28, 2014

statement to null and restoring original source statement when returning
context sensitively.





2c10ea10














Enabling possibility to reuse summaries in callees by setting source

·
2c10ea10




Johannes Lerch authored Feb 28, 2014

statement to null and restoring original source statement when returning
context sensitively.





2c10ea10










Enabling possibility to reuse summaries in callees by setting source

·
2c10ea10




Johannes Lerch authored Feb 28, 2014

statement to null and restoring original source statement when returning
context sensitively.





2c10ea10






Enabling possibility to reuse summaries in callees by setting source

·
2c10ea10




Johannes Lerch authored Feb 28, 2014

statement to null and restoring original source statement when returning
context sensitively.

·
2c10ea10

Johannes Lerch authored Feb 28, 2014




2c10ea10






2c10ea10




2c10ea10

17 Jan, 2014
2 commits
17 Jan, 20142 commits







generalized some return types

·
4b76e92f


Steven Arzt authored Jan 17, 2014






4b76e92f













caching hash value

·
3b6c322d


Steven Arzt authored Jan 17, 2014






3b6c322d














generalized some return types

·
4b76e92f


Steven Arzt authored Jan 17, 2014






4b76e92f










generalized some return types

·
4b76e92f


Steven Arzt authored Jan 17, 2014






4b76e92f






generalized some return types

·
4b76e92f


Steven Arzt authored Jan 17, 2014


·
4b76e92f

Steven Arzt authored Jan 17, 2014




4b76e92f






4b76e92f




4b76e92f






caching hash value

·
3b6c322d


Steven Arzt authored Jan 17, 2014






3b6c322d










caching hash value

·
3b6c322d


Steven Arzt authored Jan 17, 2014






3b6c322d






caching hash value

·
3b6c322d


Steven Arzt authored Jan 17, 2014


·
3b6c322d

Steven Arzt authored Jan 17, 2014




3b6c322d






3b6c322d




3b6c322d

15 Jan, 2014
1 commit
15 Jan, 20141 commit







generalized a data structure

·
0b0c5ba4


Steven Arzt authored Jan 15, 2014






0b0c5ba4














generalized a data structure

·
0b0c5ba4


Steven Arzt authored Jan 15, 2014






0b0c5ba4










generalized a data structure

·
0b0c5ba4


Steven Arzt authored Jan 15, 2014






0b0c5ba4






generalized a data structure

·
0b0c5ba4


Steven Arzt authored Jan 15, 2014


·
0b0c5ba4

Steven Arzt authored Jan 15, 2014




0b0c5ba4






0b0c5ba4




0b0c5ba4

24 Dec, 2013
3 commits
24 Dec, 20133 commits







cleaned up code

·
f21c884a


Eric Bodden authored Dec 24, 2013






f21c884a













made Gen and Transfer use TwoElementSet

·
802bc2dc


Eric Bodden authored Dec 24, 2013






802bc2dc













added class TwoElementSet, which implements exactly what the name says; useful...

·
c52d9928




Eric Bodden authored Dec 24, 2013

added class TwoElementSet, which implements exactly what the name says; useful for use within FlowFunction, as it is much more efficient than using a two-element HashSet





c52d9928














cleaned up code

·
f21c884a


Eric Bodden authored Dec 24, 2013






f21c884a










cleaned up code

·
f21c884a


Eric Bodden authored Dec 24, 2013






f21c884a






cleaned up code

·
f21c884a


Eric Bodden authored Dec 24, 2013


·
f21c884a

Eric Bodden authored Dec 24, 2013




f21c884a






f21c884a




f21c884a






made Gen and Transfer use TwoElementSet

·
802bc2dc


Eric Bodden authored Dec 24, 2013






802bc2dc










made Gen and Transfer use TwoElementSet

·
802bc2dc


Eric Bodden authored Dec 24, 2013






802bc2dc






made Gen and Transfer use TwoElementSet

·
802bc2dc


Eric Bodden authored Dec 24, 2013


·
802bc2dc

Eric Bodden authored Dec 24, 2013




802bc2dc






802bc2dc




802bc2dc






added class TwoElementSet, which implements exactly what the name says; useful...

·
c52d9928




Eric Bodden authored Dec 24, 2013

added class TwoElementSet, which implements exactly what the name says; useful for use within FlowFunction, as it is much more efficient than using a two-element HashSet





c52d9928










added class TwoElementSet, which implements exactly what the name says; useful...

·
c52d9928




Eric Bodden authored Dec 24, 2013

added class TwoElementSet, which implements exactly what the name says; useful for use within FlowFunction, as it is much more efficient than using a two-element HashSet





c52d9928






added class TwoElementSet, which implements exactly what the name says; useful...

·
c52d9928




Eric Bodden authored Dec 24, 2013

added class TwoElementSet, which implements exactly what the name says; useful for use within FlowFunction, as it is much more efficient than using a two-element HashSet

·
c52d9928

Eric Bodden authored Dec 24, 2013




c52d9928






c52d9928




c52d9928

15 Dec, 2013
1 commit
15 Dec, 20131 commit







cleaned up code

·
a278d4f7


Eric Bodden authored Dec 15, 2013






a278d4f7














cleaned up code

·
a278d4f7


Eric Bodden authored Dec 15, 2013






a278d4f7










cleaned up code

·
a278d4f7


Eric Bodden authored Dec 15, 2013






a278d4f7






cleaned up code

·
a278d4f7


Eric Bodden authored Dec 15, 2013


·
a278d4f7

Eric Bodden authored Dec 15, 2013




a278d4f7






a278d4f7




a278d4f7

28 Nov, 2013
1 commit
28 Nov, 20131 commit







pulled up the LinkedNode interface onto the first level

·
3980d99f


Steven Arzt authored Nov 28, 2013






3980d99f














pulled up the LinkedNode interface onto the first level

·
3980d99f


Steven Arzt authored Nov 28, 2013






3980d99f










pulled up the LinkedNode interface onto the first level

·
3980d99f


Steven Arzt authored Nov 28, 2013






3980d99f






pulled up the LinkedNode interface onto the first level

·
3980d99f


Steven Arzt authored Nov 28, 2013


·
3980d99f

Steven Arzt authored Nov 28, 2013




3980d99f






3980d99f




3980d99f

31 Oct, 2013
2 commits
31 Oct, 20132 commits







made the path cache for joining abstraction protected instead of private

·
4d3ab595


Steven Arzt authored Oct 31, 2013






4d3ab595













added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066














made the path cache for joining abstraction protected instead of private

·
4d3ab595


Steven Arzt authored Oct 31, 2013






4d3ab595










made the path cache for joining abstraction protected instead of private

·
4d3ab595


Steven Arzt authored Oct 31, 2013






4d3ab595






made the path cache for joining abstraction protected instead of private

·
4d3ab595


Steven Arzt authored Oct 31, 2013


·
4d3ab595

Steven Arzt authored Oct 31, 2013




4d3ab595






4d3ab595




4d3ab595






added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066










added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013






fdced066






added a function to clear the jump functions

·
fdced066


Steven Arzt authored Oct 31, 2013


·
fdced066

Steven Arzt authored Oct 31, 2013




fdced066






fdced066




fdced066

28 Oct, 2013
5 commits
28 Oct, 20135 commits







Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b




Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b













comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf













added union flow function

·
52970dcc


Eric Bodden authored Oct 28, 2013






52970dcc













fixed comment

·
2a1414bb


Eric Bodden authored Oct 28, 2013






2a1414bb













suppress warning

·
864f77c6


Eric Bodden authored Oct 28, 2013






864f77c6














Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b




Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b










Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b




Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver





3c46813b






Refactoring: Call flow function is now also computed in a protected method to...

·
3c46813b




Steven Arzt authored Oct 28, 2013

Refactoring: Call flow function is now also computed in a protected method to allow for changes in custom derived solver

·
3c46813b

Steven Arzt authored Oct 28, 2013




3c46813b






3c46813b




3c46813b






comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf










comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013






e0e1cdaf






comments

·
e0e1cdaf


Eric Bodden authored Oct 28, 2013


·
e0e1cdaf

Eric Bodden authored Oct 28, 2013




e0e1cdaf






e0e1cdaf




e0e1cdaf






added union flow function

·
52970dcc


Eric Bodden authored Oct 28, 2013






52970dcc










added union flow function

·
52970dcc


Eric Bodden authored Oct 28, 2013






52970dcc






added union flow function

·
52970dcc


Eric Bodden authored Oct 28, 2013


·
52970dcc

Eric Bodden authored Oct 28, 2013




52970dcc






52970dcc




52970dcc






fixed comment

·
2a1414bb


Eric Bodden authored Oct 28, 2013






2a1414bb










fixed comment

·
2a1414bb


Eric Bodden authored Oct 28, 2013






2a1414bb






fixed comment

·
2a1414bb


Eric Bodden authored Oct 28, 2013


·
2a1414bb

Eric Bodden authored Oct 28, 2013




2a1414bb






2a1414bb




2a1414bb






suppress warning

·
864f77c6


Eric Bodden authored Oct 28, 2013






864f77c6










suppress warning

·
864f77c6


Eric Bodden authored Oct 28, 2013






864f77c6






suppress warning

·
864f77c6


Eric Bodden authored Oct 28, 2013


·
864f77c6

Eric Bodden authored Oct 28, 2013




864f77c6






864f77c6




864f77c6

26 Oct, 2013
1 commit
26 Oct, 20131 commit







Better be careful with executors: If they are shutting down, no new tasks may...

·
3cad6e8e




Steven Arzt authored Oct 26, 2013

Better be careful with executors: If they are shutting down, no new tasks may be submitted - otherwise, we will just trigger another pointless exception. Secondly, if we increment the number of active executors and only afterwards actually submit the task, we have to make sure that the submission goes through - otherwise out counter is off by one! I now decrement it again if the executor rejects the new task.





3cad6e8e














Better be careful with executors: If they are shutting down, no new tasks may...

·
3cad6e8e




Steven Arzt authored Oct 26, 2013

Better be careful with executors: If they are shutting down, no new tasks may be submitted - otherwise, we will just trigger another pointless exception. Secondly, if we increment the number of active executors and only afterwards actually submit the task, we have to make sure that the submission goes through - otherwise out counter is off by one! I now decrement it again if the executor rejects the new task.





3cad6e8e










Better be careful with executors: If they are shutting down, no new tasks may...

·
3cad6e8e




Steven Arzt authored Oct 26, 2013

Better be careful with executors: If they are shutting down, no new tasks may be submitted - otherwise, we will just trigger another pointless exception. Secondly, if we increment the number of active executors and only afterwards actually submit the task, we have to make sure that the submission goes through - otherwise out counter is off by one! I now decrement it again if the executor rejects the new task.





3cad6e8e






Better be careful with executors: If they are shutting down, no new tasks may...

·
3cad6e8e




Steven Arzt authored Oct 26, 2013

Better be careful with executors: If they are shutting down, no new tasks may be submitted - otherwise, we will just trigger another pointless exception. Secondly, if we increment the number of active executors and only afterwards actually submit the task, we have to make sure that the submission goes through - otherwise out counter is off by one! I now decrement it again if the executor rejects the new task.

·
3cad6e8e

Steven Arzt authored Oct 26, 2013




3cad6e8e






3cad6e8e




3cad6e8e






