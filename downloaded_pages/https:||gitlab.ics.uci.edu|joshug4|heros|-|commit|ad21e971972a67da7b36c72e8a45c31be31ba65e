



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

ad21e971















Commit
ad21e971


authored
Jan 29, 2015
by


Johannes Lerch



Browse files




field-sensitive version of the BiDi solver 







parent
1021f5a2













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/BiDiFieldSensitiveIFDSSolver.java



0 â†’ 100644







View file @ ad21e971













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.alias;
































import heros.InterproceduralCFG;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.solver.PathEdge;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 * 










 * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * reportable paths.  










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * 				reportable paths.










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiFieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSensitiveFact<BaseValue, FieldRef, D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> backwardProblem;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiFieldSensitiveIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> forwardProblem, IFDSTabulationProblem<N, FieldRef,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 }










 










 public void solve() { 










 fwSolver = createSingleDirectionSolver(forwardProblem, "FW");










 bwSolver = createSingleDirectionSolver(backwardProblem, "BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 










 fwSolver.solve();










 bwSolver.solve();










 










 while(bwSolver.hasWork() || fwSolver.hasWork()) {










 fwSolver.awaitCompletionComputeValuesAndShutdown();










 bwSolver.awaitCompletionComputeValuesAndShutdown();










 }










 }










 










 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N relatedCallSite;










 private PathEdge<N, AbstractionWithSourceStmt> edge;










 










 public PausedEdge(PathEdge<N, AbstractionWithSourceStmt> edge,










 N relatedCallSite) {










 this.edge = edge;










 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void propagateUnbalancedReturnFlow(PathEdge<N,AbstractionWithSourceStmt> edge,










 /* deliberately exposed to clients */ N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(edge, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge pausedEdge = new PausedEdge(edge, relatedCallSite);










 existingPausedEdges.add(pausedEdge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(pausedEdge)) {










 super.propagateUnbalancedReturnFlow(edge, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, pausedEdge);










 }










 }





















 @Override










 protected void propagate(PathEdge<N,AbstractionWithSourceStmt> edge,










 /* deliberately exposed to clients */ N relatedCallSite,










 /* deliberately exposed to clients */ boolean isUnbalancedReturn) {










 










 if(isUnbalancedReturn) {










 assert edge.factAtSource().getSourceStmt()==null : "source value should have no statement attached";










 










 super.propagate(new PathEdge<N, AbstractionWithSourceStmt>(edge.factAtSource(), edge.getTarget(), 










 new AbstractionWithSourceStmt(edge.factAtTarget().getAbstraction(), relatedCallSite)), 










 relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(edge, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 d5.getAbstraction().setCallingContext(d4.getAbstraction());










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.edge, edge.relatedCallSite);










 }










 }










 }










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements FieldSensitiveFact<BaseValue, FieldRef, AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 public D getAbstraction() {










 return abstraction;










 }










 










 public N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 @Override










 public void addNeighbor(BiDiFieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D, M, I>.AbstractionWithSourceStmt originalAbstraction) {










 abstraction.addNeighbor(originalAbstraction.abstraction);










 }





















 @Override










 public BaseValue getBaseValue() {










 return abstraction.getBaseValue();










 }





















 @Override










 public AccessPath<FieldRef> getAccessPath() {










 return abstraction.getAccessPath();










 }





















 @Override










 public BiDiFieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D, M, I>.AbstractionWithSourceStmt cloneWithAccessPath(










 AccessPath<FieldRef> accessPath) {










 return new AbstractionWithSourceStmt(abstraction.cloneWithAccessPath(accessPath), source);










 }





















 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private class AugmentedTabulationProblem implements IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt,M,I> {





















 private final IFDSTabulationProblem<N,FieldRef,D,M,I> delegate;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N,FieldRef, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N,FieldRef, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, FieldRef, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N,FieldRef, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 Set<ConstrainedFact<FieldRef, D>> origTargets = originalFunctions.getCallFlowFunction(callStmt, destinationMethod).computeTargets(










 source.getAbstraction());





















 Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> res = Sets.newHashSet();










 for (ConstrainedFact<FieldRef, D> d : origTargets) {










 res.add(new ConstrainedFact<FieldRef, AbstractionWithSourceStmt>(new AbstractionWithSourceStmt(d.getFact(), null), d.getConstraint()));










 }










 return res;










 }










 };










 }





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<FieldRef, D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<ConstrainedFact<FieldRef, D>> origTargets = originalFunction.computeTargets(originalAbstraction);










 










 Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> res = Sets.newHashSet();










 for(ConstrainedFact<FieldRef, D> d: origTargets) {










 res.add(new ConstrainedFact<FieldRef, AbstractionWithSourceStmt>(new AbstractionWithSourceStmt(d.getFact(), source.getSourceStmt()), d.getConstraint()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }





















 }





















}














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ ad21e971






......@@ -161,22 +161,26 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * shuts down the executor and returns.










	 */










 protected void awaitCompletionComputeValuesAndShutdown() {










 {










 //run executor and await termination of tasks










 runExecutorAndAwaitCompletion();










 }










//		{










//			//run executor and await termination of tasks










//			runExecutorAndAwaitCompletion();










//		}










 if(logger.isDebugEnabled())










 printStats();





















 //ask executor to shut down;










 //this will cause new submissions to the executor to be rejected,










 //but at this point all tasks should have completed anyway










 executor.shutdown();










//		executor.shutdown();










 //similarly here: we await termination, but this should happen instantaneously,










 //as all tasks should have completed










 runExecutorAndAwaitCompletion();










 }





















 protected boolean hasWork() {










 return !worklist.isEmpty();










 }










 










 /**










	 * Runs execution, re-throwing exceptions that might be thrown during its execution.










	 */



......@@ -408,7 +412,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 Set<ConstrainedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(ConstrainedFact<FieldRef, D> d5: targets)










 propagate(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c, true);










 propagateUnbalancedReturnFlow(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c);










 }










 }










 //in cases where there are no callers, the return statement would normally not be processed at all;



......@@ -566,6 +570,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return d5;










 }










 










 protected void propagateUnbalancedReturnFlow(PathEdge<N,D> edge,










 /* deliberately exposed to clients */ N relatedCallSite) {










 propagate(edge, relatedCallSite, true);










 }










 










 /**










	 * Propagates the flow further down the exploded super graph. 



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

ad21e971















Commit
ad21e971


authored
Jan 29, 2015
by


Johannes Lerch



Browse files




field-sensitive version of the BiDi solver 







parent
1021f5a2













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/BiDiFieldSensitiveIFDSSolver.java



0 â†’ 100644







View file @ ad21e971













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.alias;
































import heros.InterproceduralCFG;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.solver.PathEdge;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 * 










 * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * reportable paths.  










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * 				reportable paths.










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiFieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSensitiveFact<BaseValue, FieldRef, D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> backwardProblem;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiFieldSensitiveIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> forwardProblem, IFDSTabulationProblem<N, FieldRef,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 }










 










 public void solve() { 










 fwSolver = createSingleDirectionSolver(forwardProblem, "FW");










 bwSolver = createSingleDirectionSolver(backwardProblem, "BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 










 fwSolver.solve();










 bwSolver.solve();










 










 while(bwSolver.hasWork() || fwSolver.hasWork()) {










 fwSolver.awaitCompletionComputeValuesAndShutdown();










 bwSolver.awaitCompletionComputeValuesAndShutdown();










 }










 }










 










 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N relatedCallSite;










 private PathEdge<N, AbstractionWithSourceStmt> edge;










 










 public PausedEdge(PathEdge<N, AbstractionWithSourceStmt> edge,










 N relatedCallSite) {










 this.edge = edge;










 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void propagateUnbalancedReturnFlow(PathEdge<N,AbstractionWithSourceStmt> edge,










 /* deliberately exposed to clients */ N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(edge, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge pausedEdge = new PausedEdge(edge, relatedCallSite);










 existingPausedEdges.add(pausedEdge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(pausedEdge)) {










 super.propagateUnbalancedReturnFlow(edge, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, pausedEdge);










 }










 }





















 @Override










 protected void propagate(PathEdge<N,AbstractionWithSourceStmt> edge,










 /* deliberately exposed to clients */ N relatedCallSite,










 /* deliberately exposed to clients */ boolean isUnbalancedReturn) {










 










 if(isUnbalancedReturn) {










 assert edge.factAtSource().getSourceStmt()==null : "source value should have no statement attached";










 










 super.propagate(new PathEdge<N, AbstractionWithSourceStmt>(edge.factAtSource(), edge.getTarget(), 










 new AbstractionWithSourceStmt(edge.factAtTarget().getAbstraction(), relatedCallSite)), 










 relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(edge, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 d5.getAbstraction().setCallingContext(d4.getAbstraction());










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.edge, edge.relatedCallSite);










 }










 }










 }










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements FieldSensitiveFact<BaseValue, FieldRef, AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 public D getAbstraction() {










 return abstraction;










 }










 










 public N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 @Override










 public void addNeighbor(BiDiFieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D, M, I>.AbstractionWithSourceStmt originalAbstraction) {










 abstraction.addNeighbor(originalAbstraction.abstraction);










 }





















 @Override










 public BaseValue getBaseValue() {










 return abstraction.getBaseValue();










 }





















 @Override










 public AccessPath<FieldRef> getAccessPath() {










 return abstraction.getAccessPath();










 }





















 @Override










 public BiDiFieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D, M, I>.AbstractionWithSourceStmt cloneWithAccessPath(










 AccessPath<FieldRef> accessPath) {










 return new AbstractionWithSourceStmt(abstraction.cloneWithAccessPath(accessPath), source);










 }





















 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private class AugmentedTabulationProblem implements IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt,M,I> {





















 private final IFDSTabulationProblem<N,FieldRef,D,M,I> delegate;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N,FieldRef, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N,FieldRef, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, FieldRef, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N,FieldRef, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 Set<ConstrainedFact<FieldRef, D>> origTargets = originalFunctions.getCallFlowFunction(callStmt, destinationMethod).computeTargets(










 source.getAbstraction());





















 Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> res = Sets.newHashSet();










 for (ConstrainedFact<FieldRef, D> d : origTargets) {










 res.add(new ConstrainedFact<FieldRef, AbstractionWithSourceStmt>(new AbstractionWithSourceStmt(d.getFact(), null), d.getConstraint()));










 }










 return res;










 }










 };










 }





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<FieldRef, D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<ConstrainedFact<FieldRef, D>> origTargets = originalFunction.computeTargets(originalAbstraction);










 










 Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> res = Sets.newHashSet();










 for(ConstrainedFact<FieldRef, D> d: origTargets) {










 res.add(new ConstrainedFact<FieldRef, AbstractionWithSourceStmt>(new AbstractionWithSourceStmt(d.getFact(), source.getSourceStmt()), d.getConstraint()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }





















 }





















}














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ ad21e971






......@@ -161,22 +161,26 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * shuts down the executor and returns.










	 */










 protected void awaitCompletionComputeValuesAndShutdown() {










 {










 //run executor and await termination of tasks










 runExecutorAndAwaitCompletion();










 }










//		{










//			//run executor and await termination of tasks










//			runExecutorAndAwaitCompletion();










//		}










 if(logger.isDebugEnabled())










 printStats();





















 //ask executor to shut down;










 //this will cause new submissions to the executor to be rejected,










 //but at this point all tasks should have completed anyway










 executor.shutdown();










//		executor.shutdown();










 //similarly here: we await termination, but this should happen instantaneously,










 //as all tasks should have completed










 runExecutorAndAwaitCompletion();










 }





















 protected boolean hasWork() {










 return !worklist.isEmpty();










 }










 










 /**










	 * Runs execution, re-throwing exceptions that might be thrown during its execution.










	 */



......@@ -408,7 +412,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 Set<ConstrainedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(ConstrainedFact<FieldRef, D> d5: targets)










 propagate(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c, true);










 propagateUnbalancedReturnFlow(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c);










 }










 }










 //in cases where there are no callers, the return statement would normally not be processed at all;



......@@ -566,6 +570,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return d5;










 }










 










 protected void propagateUnbalancedReturnFlow(PathEdge<N,D> edge,










 /* deliberately exposed to clients */ N relatedCallSite) {










 propagate(edge, relatedCallSite, true);










 }










 










 /**










	 * Propagates the flow further down the exploded super graph. 



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

ad21e971







Open sidebar



Joshua Garcia heros
Commits

ad21e971




Open sidebar

Joshua Garcia heros
Commits

ad21e971


Joshua GarciaherosherosCommits
ad21e971








Commit
ad21e971


authored
Jan 29, 2015
by


Johannes Lerch



Browse files




field-sensitive version of the BiDi solver 







parent
1021f5a2













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/BiDiFieldSensitiveIFDSSolver.java



0 â†’ 100644







View file @ ad21e971













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.alias;
































import heros.InterproceduralCFG;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.solver.PathEdge;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 * 










 * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * reportable paths.  










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * 				reportable paths.










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiFieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSensitiveFact<BaseValue, FieldRef, D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> backwardProblem;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiFieldSensitiveIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> forwardProblem, IFDSTabulationProblem<N, FieldRef,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 }










 










 public void solve() { 










 fwSolver = createSingleDirectionSolver(forwardProblem, "FW");










 bwSolver = createSingleDirectionSolver(backwardProblem, "BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 










 fwSolver.solve();










 bwSolver.solve();










 










 while(bwSolver.hasWork() || fwSolver.hasWork()) {










 fwSolver.awaitCompletionComputeValuesAndShutdown();










 bwSolver.awaitCompletionComputeValuesAndShutdown();










 }










 }










 










 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N relatedCallSite;










 private PathEdge<N, AbstractionWithSourceStmt> edge;










 










 public PausedEdge(PathEdge<N, AbstractionWithSourceStmt> edge,










 N relatedCallSite) {










 this.edge = edge;










 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void propagateUnbalancedReturnFlow(PathEdge<N,AbstractionWithSourceStmt> edge,










 /* deliberately exposed to clients */ N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(edge, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge pausedEdge = new PausedEdge(edge, relatedCallSite);










 existingPausedEdges.add(pausedEdge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(pausedEdge)) {










 super.propagateUnbalancedReturnFlow(edge, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, pausedEdge);










 }










 }





















 @Override










 protected void propagate(PathEdge<N,AbstractionWithSourceStmt> edge,










 /* deliberately exposed to clients */ N relatedCallSite,










 /* deliberately exposed to clients */ boolean isUnbalancedReturn) {










 










 if(isUnbalancedReturn) {










 assert edge.factAtSource().getSourceStmt()==null : "source value should have no statement attached";










 










 super.propagate(new PathEdge<N, AbstractionWithSourceStmt>(edge.factAtSource(), edge.getTarget(), 










 new AbstractionWithSourceStmt(edge.factAtTarget().getAbstraction(), relatedCallSite)), 










 relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(edge, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 d5.getAbstraction().setCallingContext(d4.getAbstraction());










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.edge, edge.relatedCallSite);










 }










 }










 }










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements FieldSensitiveFact<BaseValue, FieldRef, AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 public D getAbstraction() {










 return abstraction;










 }










 










 public N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 @Override










 public void addNeighbor(BiDiFieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D, M, I>.AbstractionWithSourceStmt originalAbstraction) {










 abstraction.addNeighbor(originalAbstraction.abstraction);










 }





















 @Override










 public BaseValue getBaseValue() {










 return abstraction.getBaseValue();










 }





















 @Override










 public AccessPath<FieldRef> getAccessPath() {










 return abstraction.getAccessPath();










 }





















 @Override










 public BiDiFieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D, M, I>.AbstractionWithSourceStmt cloneWithAccessPath(










 AccessPath<FieldRef> accessPath) {










 return new AbstractionWithSourceStmt(abstraction.cloneWithAccessPath(accessPath), source);










 }





















 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private class AugmentedTabulationProblem implements IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt,M,I> {





















 private final IFDSTabulationProblem<N,FieldRef,D,M,I> delegate;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N,FieldRef, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N,FieldRef, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, FieldRef, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N,FieldRef, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 Set<ConstrainedFact<FieldRef, D>> origTargets = originalFunctions.getCallFlowFunction(callStmt, destinationMethod).computeTargets(










 source.getAbstraction());





















 Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> res = Sets.newHashSet();










 for (ConstrainedFact<FieldRef, D> d : origTargets) {










 res.add(new ConstrainedFact<FieldRef, AbstractionWithSourceStmt>(new AbstractionWithSourceStmt(d.getFact(), null), d.getConstraint()));










 }










 return res;










 }










 };










 }





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<FieldRef, D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<ConstrainedFact<FieldRef, D>> origTargets = originalFunction.computeTargets(originalAbstraction);










 










 Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> res = Sets.newHashSet();










 for(ConstrainedFact<FieldRef, D> d: origTargets) {










 res.add(new ConstrainedFact<FieldRef, AbstractionWithSourceStmt>(new AbstractionWithSourceStmt(d.getFact(), source.getSourceStmt()), d.getConstraint()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }





















 }





















}














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ ad21e971






......@@ -161,22 +161,26 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * shuts down the executor and returns.










	 */










 protected void awaitCompletionComputeValuesAndShutdown() {










 {










 //run executor and await termination of tasks










 runExecutorAndAwaitCompletion();










 }










//		{










//			//run executor and await termination of tasks










//			runExecutorAndAwaitCompletion();










//		}










 if(logger.isDebugEnabled())










 printStats();





















 //ask executor to shut down;










 //this will cause new submissions to the executor to be rejected,










 //but at this point all tasks should have completed anyway










 executor.shutdown();










//		executor.shutdown();










 //similarly here: we await termination, but this should happen instantaneously,










 //as all tasks should have completed










 runExecutorAndAwaitCompletion();










 }





















 protected boolean hasWork() {










 return !worklist.isEmpty();










 }










 










 /**










	 * Runs execution, re-throwing exceptions that might be thrown during its execution.










	 */



......@@ -408,7 +412,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 Set<ConstrainedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(ConstrainedFact<FieldRef, D> d5: targets)










 propagate(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c, true);










 propagateUnbalancedReturnFlow(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c);










 }










 }










 //in cases where there are no callers, the return statement would normally not be processed at all;



......@@ -566,6 +570,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return d5;










 }










 










 protected void propagateUnbalancedReturnFlow(PathEdge<N,D> edge,










 /* deliberately exposed to clients */ N relatedCallSite) {










 propagate(edge, relatedCallSite, true);










 }










 










 /**










	 * Propagates the flow further down the exploded super graph. 



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
ad21e971


authored
Jan 29, 2015
by


Johannes Lerch



Browse files




field-sensitive version of the BiDi solver 







parent
1021f5a2













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/BiDiFieldSensitiveIFDSSolver.java



0 â†’ 100644







View file @ ad21e971













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.alias;
































import heros.InterproceduralCFG;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.solver.PathEdge;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 * 










 * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * reportable paths.  










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * 				reportable paths.










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiFieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSensitiveFact<BaseValue, FieldRef, D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> backwardProblem;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiFieldSensitiveIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> forwardProblem, IFDSTabulationProblem<N, FieldRef,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 }










 










 public void solve() { 










 fwSolver = createSingleDirectionSolver(forwardProblem, "FW");










 bwSolver = createSingleDirectionSolver(backwardProblem, "BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 










 fwSolver.solve();










 bwSolver.solve();










 










 while(bwSolver.hasWork() || fwSolver.hasWork()) {










 fwSolver.awaitCompletionComputeValuesAndShutdown();










 bwSolver.awaitCompletionComputeValuesAndShutdown();










 }










 }










 










 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N relatedCallSite;










 private PathEdge<N, AbstractionWithSourceStmt> edge;










 










 public PausedEdge(PathEdge<N, AbstractionWithSourceStmt> edge,










 N relatedCallSite) {










 this.edge = edge;










 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void propagateUnbalancedReturnFlow(PathEdge<N,AbstractionWithSourceStmt> edge,










 /* deliberately exposed to clients */ N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(edge, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge pausedEdge = new PausedEdge(edge, relatedCallSite);










 existingPausedEdges.add(pausedEdge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(pausedEdge)) {










 super.propagateUnbalancedReturnFlow(edge, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, pausedEdge);










 }










 }





















 @Override










 protected void propagate(PathEdge<N,AbstractionWithSourceStmt> edge,










 /* deliberately exposed to clients */ N relatedCallSite,










 /* deliberately exposed to clients */ boolean isUnbalancedReturn) {










 










 if(isUnbalancedReturn) {










 assert edge.factAtSource().getSourceStmt()==null : "source value should have no statement attached";










 










 super.propagate(new PathEdge<N, AbstractionWithSourceStmt>(edge.factAtSource(), edge.getTarget(), 










 new AbstractionWithSourceStmt(edge.factAtTarget().getAbstraction(), relatedCallSite)), 










 relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(edge, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 d5.getAbstraction().setCallingContext(d4.getAbstraction());










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.edge, edge.relatedCallSite);










 }










 }










 }










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements FieldSensitiveFact<BaseValue, FieldRef, AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 public D getAbstraction() {










 return abstraction;










 }










 










 public N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 @Override










 public void addNeighbor(BiDiFieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D, M, I>.AbstractionWithSourceStmt originalAbstraction) {










 abstraction.addNeighbor(originalAbstraction.abstraction);










 }





















 @Override










 public BaseValue getBaseValue() {










 return abstraction.getBaseValue();










 }





















 @Override










 public AccessPath<FieldRef> getAccessPath() {










 return abstraction.getAccessPath();










 }





















 @Override










 public BiDiFieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D, M, I>.AbstractionWithSourceStmt cloneWithAccessPath(










 AccessPath<FieldRef> accessPath) {










 return new AbstractionWithSourceStmt(abstraction.cloneWithAccessPath(accessPath), source);










 }





















 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private class AugmentedTabulationProblem implements IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt,M,I> {





















 private final IFDSTabulationProblem<N,FieldRef,D,M,I> delegate;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N,FieldRef, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N,FieldRef, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, FieldRef, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N,FieldRef, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 Set<ConstrainedFact<FieldRef, D>> origTargets = originalFunctions.getCallFlowFunction(callStmt, destinationMethod).computeTargets(










 source.getAbstraction());





















 Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> res = Sets.newHashSet();










 for (ConstrainedFact<FieldRef, D> d : origTargets) {










 res.add(new ConstrainedFact<FieldRef, AbstractionWithSourceStmt>(new AbstractionWithSourceStmt(d.getFact(), null), d.getConstraint()));










 }










 return res;










 }










 };










 }





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<FieldRef, D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<ConstrainedFact<FieldRef, D>> origTargets = originalFunction.computeTargets(originalAbstraction);










 










 Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> res = Sets.newHashSet();










 for(ConstrainedFact<FieldRef, D> d: origTargets) {










 res.add(new ConstrainedFact<FieldRef, AbstractionWithSourceStmt>(new AbstractionWithSourceStmt(d.getFact(), source.getSourceStmt()), d.getConstraint()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }





















 }





















}














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ ad21e971






......@@ -161,22 +161,26 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * shuts down the executor and returns.










	 */










 protected void awaitCompletionComputeValuesAndShutdown() {










 {










 //run executor and await termination of tasks










 runExecutorAndAwaitCompletion();










 }










//		{










//			//run executor and await termination of tasks










//			runExecutorAndAwaitCompletion();










//		}










 if(logger.isDebugEnabled())










 printStats();





















 //ask executor to shut down;










 //this will cause new submissions to the executor to be rejected,










 //but at this point all tasks should have completed anyway










 executor.shutdown();










//		executor.shutdown();










 //similarly here: we await termination, but this should happen instantaneously,










 //as all tasks should have completed










 runExecutorAndAwaitCompletion();










 }





















 protected boolean hasWork() {










 return !worklist.isEmpty();










 }










 










 /**










	 * Runs execution, re-throwing exceptions that might be thrown during its execution.










	 */



......@@ -408,7 +412,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 Set<ConstrainedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(ConstrainedFact<FieldRef, D> d5: targets)










 propagate(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c, true);










 propagateUnbalancedReturnFlow(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c);










 }










 }










 //in cases where there are no callers, the return statement would normally not be processed at all;



......@@ -566,6 +570,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return d5;










 }










 










 protected void propagateUnbalancedReturnFlow(PathEdge<N,D> edge,










 /* deliberately exposed to clients */ N relatedCallSite) {










 propagate(edge, relatedCallSite, true);










 }










 










 /**










	 * Propagates the flow further down the exploded super graph. 



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
ad21e971


authored
Jan 29, 2015
by


Johannes Lerch



Browse files



Commit
ad21e971


authored
Jan 29, 2015
by


Johannes Lerch

ad21e971authoredbyJohannes Lerch

field-sensitive version of the BiDi solver 






parent
1021f5a2
















parent
1021f5a2





parent












Changes
2
2


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/alias/BiDiFieldSensitiveIFDSSolver.java



0 â†’ 100644







View file @ ad21e971













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.alias;
































import heros.InterproceduralCFG;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.solver.PathEdge;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 * 










 * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * reportable paths.  










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * 				reportable paths.










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiFieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSensitiveFact<BaseValue, FieldRef, D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> backwardProblem;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiFieldSensitiveIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> forwardProblem, IFDSTabulationProblem<N, FieldRef,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 }










 










 public void solve() { 










 fwSolver = createSingleDirectionSolver(forwardProblem, "FW");










 bwSolver = createSingleDirectionSolver(backwardProblem, "BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 










 fwSolver.solve();










 bwSolver.solve();










 










 while(bwSolver.hasWork() || fwSolver.hasWork()) {










 fwSolver.awaitCompletionComputeValuesAndShutdown();










 bwSolver.awaitCompletionComputeValuesAndShutdown();










 }










 }










 










 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N relatedCallSite;










 private PathEdge<N, AbstractionWithSourceStmt> edge;










 










 public PausedEdge(PathEdge<N, AbstractionWithSourceStmt> edge,










 N relatedCallSite) {










 this.edge = edge;










 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void propagateUnbalancedReturnFlow(PathEdge<N,AbstractionWithSourceStmt> edge,










 /* deliberately exposed to clients */ N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(edge, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge pausedEdge = new PausedEdge(edge, relatedCallSite);










 existingPausedEdges.add(pausedEdge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(pausedEdge)) {










 super.propagateUnbalancedReturnFlow(edge, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, pausedEdge);










 }










 }





















 @Override










 protected void propagate(PathEdge<N,AbstractionWithSourceStmt> edge,










 /* deliberately exposed to clients */ N relatedCallSite,










 /* deliberately exposed to clients */ boolean isUnbalancedReturn) {










 










 if(isUnbalancedReturn) {










 assert edge.factAtSource().getSourceStmt()==null : "source value should have no statement attached";










 










 super.propagate(new PathEdge<N, AbstractionWithSourceStmt>(edge.factAtSource(), edge.getTarget(), 










 new AbstractionWithSourceStmt(edge.factAtTarget().getAbstraction(), relatedCallSite)), 










 relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(edge, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 d5.getAbstraction().setCallingContext(d4.getAbstraction());










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.edge, edge.relatedCallSite);










 }










 }










 }










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements FieldSensitiveFact<BaseValue, FieldRef, AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 public D getAbstraction() {










 return abstraction;










 }










 










 public N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 @Override










 public void addNeighbor(BiDiFieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D, M, I>.AbstractionWithSourceStmt originalAbstraction) {










 abstraction.addNeighbor(originalAbstraction.abstraction);










 }





















 @Override










 public BaseValue getBaseValue() {










 return abstraction.getBaseValue();










 }





















 @Override










 public AccessPath<FieldRef> getAccessPath() {










 return abstraction.getAccessPath();










 }





















 @Override










 public BiDiFieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D, M, I>.AbstractionWithSourceStmt cloneWithAccessPath(










 AccessPath<FieldRef> accessPath) {










 return new AbstractionWithSourceStmt(abstraction.cloneWithAccessPath(accessPath), source);










 }





















 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private class AugmentedTabulationProblem implements IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt,M,I> {





















 private final IFDSTabulationProblem<N,FieldRef,D,M,I> delegate;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N,FieldRef, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N,FieldRef, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, FieldRef, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N,FieldRef, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 Set<ConstrainedFact<FieldRef, D>> origTargets = originalFunctions.getCallFlowFunction(callStmt, destinationMethod).computeTargets(










 source.getAbstraction());





















 Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> res = Sets.newHashSet();










 for (ConstrainedFact<FieldRef, D> d : origTargets) {










 res.add(new ConstrainedFact<FieldRef, AbstractionWithSourceStmt>(new AbstractionWithSourceStmt(d.getFact(), null), d.getConstraint()));










 }










 return res;










 }










 };










 }





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<FieldRef, D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<ConstrainedFact<FieldRef, D>> origTargets = originalFunction.computeTargets(originalAbstraction);










 










 Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> res = Sets.newHashSet();










 for(ConstrainedFact<FieldRef, D> d: origTargets) {










 res.add(new ConstrainedFact<FieldRef, AbstractionWithSourceStmt>(new AbstractionWithSourceStmt(d.getFact(), source.getSourceStmt()), d.getConstraint()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }





















 }





















}














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ ad21e971






......@@ -161,22 +161,26 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * shuts down the executor and returns.










	 */










 protected void awaitCompletionComputeValuesAndShutdown() {










 {










 //run executor and await termination of tasks










 runExecutorAndAwaitCompletion();










 }










//		{










//			//run executor and await termination of tasks










//			runExecutorAndAwaitCompletion();










//		}










 if(logger.isDebugEnabled())










 printStats();





















 //ask executor to shut down;










 //this will cause new submissions to the executor to be rejected,










 //but at this point all tasks should have completed anyway










 executor.shutdown();










//		executor.shutdown();










 //similarly here: we await termination, but this should happen instantaneously,










 //as all tasks should have completed










 runExecutorAndAwaitCompletion();










 }





















 protected boolean hasWork() {










 return !worklist.isEmpty();










 }










 










 /**










	 * Runs execution, re-throwing exceptions that might be thrown during its execution.










	 */



......@@ -408,7 +412,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 Set<ConstrainedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(ConstrainedFact<FieldRef, D> d5: targets)










 propagate(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c, true);










 propagateUnbalancedReturnFlow(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c);










 }










 }










 //in cases where there are no callers, the return statement would normally not be processed at all;



......@@ -566,6 +570,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return d5;










 }










 










 protected void propagateUnbalancedReturnFlow(PathEdge<N,D> edge,










 /* deliberately exposed to clients */ N relatedCallSite) {










 propagate(edge, relatedCallSite, true);










 }










 










 /**










	 * Propagates the flow further down the exploded super graph. 



......














src/heros/alias/BiDiFieldSensitiveIFDSSolver.java



0 â†’ 100644







View file @ ad21e971













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.alias;
































import heros.InterproceduralCFG;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.solver.PathEdge;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 * 










 * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * reportable paths.  










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * 				reportable paths.










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiFieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSensitiveFact<BaseValue, FieldRef, D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> backwardProblem;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiFieldSensitiveIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> forwardProblem, IFDSTabulationProblem<N, FieldRef,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 }










 










 public void solve() { 










 fwSolver = createSingleDirectionSolver(forwardProblem, "FW");










 bwSolver = createSingleDirectionSolver(backwardProblem, "BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 










 fwSolver.solve();










 bwSolver.solve();










 










 while(bwSolver.hasWork() || fwSolver.hasWork()) {










 fwSolver.awaitCompletionComputeValuesAndShutdown();










 bwSolver.awaitCompletionComputeValuesAndShutdown();










 }










 }










 










 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N relatedCallSite;










 private PathEdge<N, AbstractionWithSourceStmt> edge;










 










 public PausedEdge(PathEdge<N, AbstractionWithSourceStmt> edge,










 N relatedCallSite) {










 this.edge = edge;










 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void propagateUnbalancedReturnFlow(PathEdge<N,AbstractionWithSourceStmt> edge,










 /* deliberately exposed to clients */ N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(edge, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge pausedEdge = new PausedEdge(edge, relatedCallSite);










 existingPausedEdges.add(pausedEdge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(pausedEdge)) {










 super.propagateUnbalancedReturnFlow(edge, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, pausedEdge);










 }










 }





















 @Override










 protected void propagate(PathEdge<N,AbstractionWithSourceStmt> edge,










 /* deliberately exposed to clients */ N relatedCallSite,










 /* deliberately exposed to clients */ boolean isUnbalancedReturn) {










 










 if(isUnbalancedReturn) {










 assert edge.factAtSource().getSourceStmt()==null : "source value should have no statement attached";










 










 super.propagate(new PathEdge<N, AbstractionWithSourceStmt>(edge.factAtSource(), edge.getTarget(), 










 new AbstractionWithSourceStmt(edge.factAtTarget().getAbstraction(), relatedCallSite)), 










 relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(edge, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 d5.getAbstraction().setCallingContext(d4.getAbstraction());










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.edge, edge.relatedCallSite);










 }










 }










 }










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements FieldSensitiveFact<BaseValue, FieldRef, AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 public D getAbstraction() {










 return abstraction;










 }










 










 public N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 @Override










 public void addNeighbor(BiDiFieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D, M, I>.AbstractionWithSourceStmt originalAbstraction) {










 abstraction.addNeighbor(originalAbstraction.abstraction);










 }





















 @Override










 public BaseValue getBaseValue() {










 return abstraction.getBaseValue();










 }





















 @Override










 public AccessPath<FieldRef> getAccessPath() {










 return abstraction.getAccessPath();










 }





















 @Override










 public BiDiFieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D, M, I>.AbstractionWithSourceStmt cloneWithAccessPath(










 AccessPath<FieldRef> accessPath) {










 return new AbstractionWithSourceStmt(abstraction.cloneWithAccessPath(accessPath), source);










 }





















 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private class AugmentedTabulationProblem implements IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt,M,I> {





















 private final IFDSTabulationProblem<N,FieldRef,D,M,I> delegate;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N,FieldRef, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N,FieldRef, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, FieldRef, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N,FieldRef, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 Set<ConstrainedFact<FieldRef, D>> origTargets = originalFunctions.getCallFlowFunction(callStmt, destinationMethod).computeTargets(










 source.getAbstraction());





















 Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> res = Sets.newHashSet();










 for (ConstrainedFact<FieldRef, D> d : origTargets) {










 res.add(new ConstrainedFact<FieldRef, AbstractionWithSourceStmt>(new AbstractionWithSourceStmt(d.getFact(), null), d.getConstraint()));










 }










 return res;










 }










 };










 }





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<FieldRef, D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<ConstrainedFact<FieldRef, D>> origTargets = originalFunction.computeTargets(originalAbstraction);










 










 Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> res = Sets.newHashSet();










 for(ConstrainedFact<FieldRef, D> d: origTargets) {










 res.add(new ConstrainedFact<FieldRef, AbstractionWithSourceStmt>(new AbstractionWithSourceStmt(d.getFact(), source.getSourceStmt()), d.getConstraint()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }





















 }





















}












src/heros/alias/BiDiFieldSensitiveIFDSSolver.java



0 â†’ 100644







View file @ ad21e971








src/heros/alias/BiDiFieldSensitiveIFDSSolver.java



0 â†’ 100644









View file @ ad21e971


ad21e971










/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.alias;
































import heros.InterproceduralCFG;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.solver.PathEdge;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 * 










 * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * reportable paths.  










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * 				reportable paths.










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiFieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSensitiveFact<BaseValue, FieldRef, D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> backwardProblem;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiFieldSensitiveIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> forwardProblem, IFDSTabulationProblem<N, FieldRef,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 }










 










 public void solve() { 










 fwSolver = createSingleDirectionSolver(forwardProblem, "FW");










 bwSolver = createSingleDirectionSolver(backwardProblem, "BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 










 fwSolver.solve();










 bwSolver.solve();










 










 while(bwSolver.hasWork() || fwSolver.hasWork()) {










 fwSolver.awaitCompletionComputeValuesAndShutdown();










 bwSolver.awaitCompletionComputeValuesAndShutdown();










 }










 }










 










 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N relatedCallSite;










 private PathEdge<N, AbstractionWithSourceStmt> edge;










 










 public PausedEdge(PathEdge<N, AbstractionWithSourceStmt> edge,










 N relatedCallSite) {










 this.edge = edge;










 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void propagateUnbalancedReturnFlow(PathEdge<N,AbstractionWithSourceStmt> edge,










 /* deliberately exposed to clients */ N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(edge, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge pausedEdge = new PausedEdge(edge, relatedCallSite);










 existingPausedEdges.add(pausedEdge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(pausedEdge)) {










 super.propagateUnbalancedReturnFlow(edge, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, pausedEdge);










 }










 }





















 @Override










 protected void propagate(PathEdge<N,AbstractionWithSourceStmt> edge,










 /* deliberately exposed to clients */ N relatedCallSite,










 /* deliberately exposed to clients */ boolean isUnbalancedReturn) {










 










 if(isUnbalancedReturn) {










 assert edge.factAtSource().getSourceStmt()==null : "source value should have no statement attached";










 










 super.propagate(new PathEdge<N, AbstractionWithSourceStmt>(edge.factAtSource(), edge.getTarget(), 










 new AbstractionWithSourceStmt(edge.factAtTarget().getAbstraction(), relatedCallSite)), 










 relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(edge, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 d5.getAbstraction().setCallingContext(d4.getAbstraction());










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.edge, edge.relatedCallSite);










 }










 }










 }










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements FieldSensitiveFact<BaseValue, FieldRef, AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 public D getAbstraction() {










 return abstraction;










 }










 










 public N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 @Override










 public void addNeighbor(BiDiFieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D, M, I>.AbstractionWithSourceStmt originalAbstraction) {










 abstraction.addNeighbor(originalAbstraction.abstraction);










 }





















 @Override










 public BaseValue getBaseValue() {










 return abstraction.getBaseValue();










 }





















 @Override










 public AccessPath<FieldRef> getAccessPath() {










 return abstraction.getAccessPath();










 }





















 @Override










 public BiDiFieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D, M, I>.AbstractionWithSourceStmt cloneWithAccessPath(










 AccessPath<FieldRef> accessPath) {










 return new AbstractionWithSourceStmt(abstraction.cloneWithAccessPath(accessPath), source);










 }





















 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private class AugmentedTabulationProblem implements IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt,M,I> {





















 private final IFDSTabulationProblem<N,FieldRef,D,M,I> delegate;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N,FieldRef, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N,FieldRef, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, FieldRef, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N,FieldRef, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 Set<ConstrainedFact<FieldRef, D>> origTargets = originalFunctions.getCallFlowFunction(callStmt, destinationMethod).computeTargets(










 source.getAbstraction());





















 Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> res = Sets.newHashSet();










 for (ConstrainedFact<FieldRef, D> d : origTargets) {










 res.add(new ConstrainedFact<FieldRef, AbstractionWithSourceStmt>(new AbstractionWithSourceStmt(d.getFact(), null), d.getConstraint()));










 }










 return res;










 }










 };










 }





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<FieldRef, D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<ConstrainedFact<FieldRef, D>> origTargets = originalFunction.computeTargets(originalAbstraction);










 










 Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> res = Sets.newHashSet();










 for(ConstrainedFact<FieldRef, D> d: origTargets) {










 res.add(new ConstrainedFact<FieldRef, AbstractionWithSourceStmt>(new AbstractionWithSourceStmt(d.getFact(), source.getSourceStmt()), d.getConstraint()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }





















 }





















}













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.alias;
































import heros.InterproceduralCFG;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.solver.PathEdge;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 * 










 * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * reportable paths.  










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * 				reportable paths.










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiFieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSensitiveFact<BaseValue, FieldRef, D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> backwardProblem;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiFieldSensitiveIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> forwardProblem, IFDSTabulationProblem<N, FieldRef,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 }










 










 public void solve() { 










 fwSolver = createSingleDirectionSolver(forwardProblem, "FW");










 bwSolver = createSingleDirectionSolver(backwardProblem, "BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 










 fwSolver.solve();










 bwSolver.solve();










 










 while(bwSolver.hasWork() || fwSolver.hasWork()) {










 fwSolver.awaitCompletionComputeValuesAndShutdown();










 bwSolver.awaitCompletionComputeValuesAndShutdown();










 }










 }










 










 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N relatedCallSite;










 private PathEdge<N, AbstractionWithSourceStmt> edge;










 










 public PausedEdge(PathEdge<N, AbstractionWithSourceStmt> edge,










 N relatedCallSite) {










 this.edge = edge;










 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void propagateUnbalancedReturnFlow(PathEdge<N,AbstractionWithSourceStmt> edge,










 /* deliberately exposed to clients */ N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(edge, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge pausedEdge = new PausedEdge(edge, relatedCallSite);










 existingPausedEdges.add(pausedEdge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(pausedEdge)) {










 super.propagateUnbalancedReturnFlow(edge, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, pausedEdge);










 }










 }





















 @Override










 protected void propagate(PathEdge<N,AbstractionWithSourceStmt> edge,










 /* deliberately exposed to clients */ N relatedCallSite,










 /* deliberately exposed to clients */ boolean isUnbalancedReturn) {










 










 if(isUnbalancedReturn) {










 assert edge.factAtSource().getSourceStmt()==null : "source value should have no statement attached";










 










 super.propagate(new PathEdge<N, AbstractionWithSourceStmt>(edge.factAtSource(), edge.getTarget(), 










 new AbstractionWithSourceStmt(edge.factAtTarget().getAbstraction(), relatedCallSite)), 










 relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(edge, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 d5.getAbstraction().setCallingContext(d4.getAbstraction());










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.edge, edge.relatedCallSite);










 }










 }










 }










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements FieldSensitiveFact<BaseValue, FieldRef, AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 public D getAbstraction() {










 return abstraction;










 }










 










 public N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 @Override










 public void addNeighbor(BiDiFieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D, M, I>.AbstractionWithSourceStmt originalAbstraction) {










 abstraction.addNeighbor(originalAbstraction.abstraction);










 }





















 @Override










 public BaseValue getBaseValue() {










 return abstraction.getBaseValue();










 }





















 @Override










 public AccessPath<FieldRef> getAccessPath() {










 return abstraction.getAccessPath();










 }





















 @Override










 public BiDiFieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D, M, I>.AbstractionWithSourceStmt cloneWithAccessPath(










 AccessPath<FieldRef> accessPath) {










 return new AbstractionWithSourceStmt(abstraction.cloneWithAccessPath(accessPath), source);










 }





















 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private class AugmentedTabulationProblem implements IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt,M,I> {





















 private final IFDSTabulationProblem<N,FieldRef,D,M,I> delegate;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N,FieldRef, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N,FieldRef, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, FieldRef, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N,FieldRef, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 Set<ConstrainedFact<FieldRef, D>> origTargets = originalFunctions.getCallFlowFunction(callStmt, destinationMethod).computeTargets(










 source.getAbstraction());





















 Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> res = Sets.newHashSet();










 for (ConstrainedFact<FieldRef, D> d : origTargets) {










 res.add(new ConstrainedFact<FieldRef, AbstractionWithSourceStmt>(new AbstractionWithSourceStmt(d.getFact(), null), d.getConstraint()));










 }










 return res;










 }










 };










 }





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<FieldRef, AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {










 @Override










 public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<FieldRef, D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<ConstrainedFact<FieldRef, D>> origTargets = originalFunction.computeTargets(originalAbstraction);










 










 Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> res = Sets.newHashSet();










 for(ConstrainedFact<FieldRef, D> d: origTargets) {










 res.add(new ConstrainedFact<FieldRef, AbstractionWithSourceStmt>(new AbstractionWithSourceStmt(d.getFact(), source.getSourceStmt()), d.getConstraint()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }





















 }





















}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2012 Eric Bodden. * Copyright (c) 2012 Eric Bodden. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Eric Bodden - initial API and implementation *     Eric Bodden - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;import heros.InterproceduralCFG;importheros.InterproceduralCFG;import heros.alias.FlowFunction.ConstrainedFact;importheros.alias.FlowFunction.ConstrainedFact;import heros.solver.PathEdge;importheros.solver.PathEdge;import java.util.Collections;importjava.util.Collections;import java.util.HashMap;importjava.util.HashMap;import java.util.HashSet;importjava.util.HashSet;import java.util.Map;importjava.util.Map;import java.util.Map.Entry;importjava.util.Map.Entry;import java.util.Set;importjava.util.Set;import java.util.concurrent.ConcurrentMap;importjava.util.concurrent.ConcurrentMap;import java.util.concurrent.LinkedBlockingQueue;importjava.util.concurrent.LinkedBlockingQueue;import java.util.concurrent.TimeUnit;importjava.util.concurrent.TimeUnit;import com.google.common.collect.Maps;importcom.google.common.collect.Maps;import com.google.common.collect.Sets;importcom.google.common.collect.Sets;/**/** * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions. * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions. *  *  * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}. * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}. * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever). * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever). * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their * computed paths are realizable at the same time. * computed paths are realizable at the same time. *  *  * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form * reportable paths.   * reportable paths.   * * * @param <N> see {@link IFDSSolver} * @param <N> see {@link IFDSSolver} * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form * 				reportable paths. * 				reportable paths. * @param <M> see {@link IFDSSolver} * @param <M> see {@link IFDSSolver} * @param <I> see {@link IFDSSolver} * @param <I> see {@link IFDSSolver} */ */public class BiDiFieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSensitiveFact<BaseValue, FieldRef, D>, M, I extends InterproceduralCFG<N, M>> {publicclassBiDiFieldSensitiveIFDSSolver<N,BaseValue,FieldRef,DextendsFieldSensitiveFact<BaseValue,FieldRef,D>,M,IextendsInterproceduralCFG<N,M>>{ private final IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> forwardProblem;privatefinalIFDSTabulationProblem<N,FieldRef,AbstractionWithSourceStmt,M,I>forwardProblem; private final IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> backwardProblem;privatefinalIFDSTabulationProblem<N,FieldRef,AbstractionWithSourceStmt,M,I>backwardProblem; private SingleDirectionSolver fwSolver;privateSingleDirectionSolverfwSolver; private SingleDirectionSolver bwSolver;privateSingleDirectionSolverbwSolver; /**/**	 * Instantiates a {@link BiDiFieldSensitiveIFDSSolver} with the associated forward and backward problem.	 * Instantiates a {@link BiDiFieldSensitiveIFDSSolver} with the associated forward and backward problem.	 */	 */ public BiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> forwardProblem, IFDSTabulationProblem<N, FieldRef,D,M,I> backwardProblem) {publicBiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I>forwardProblem,IFDSTabulationProblem<N,FieldRef,D,M,I>backwardProblem){ if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {if(!forwardProblem.followReturnsPastSeeds()||!backwardProblem.followReturnsPastSeeds()){ throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); thrownewIllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); }} this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);this.forwardProblem=newAugmentedTabulationProblem(forwardProblem); this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);this.backwardProblem=newAugmentedTabulationProblem(backwardProblem); }}  public void solve() { publicvoidsolve(){ fwSolver = createSingleDirectionSolver(forwardProblem, "FW");fwSolver=createSingleDirectionSolver(forwardProblem,"FW"); bwSolver = createSingleDirectionSolver(backwardProblem, "BW");bwSolver=createSingleDirectionSolver(backwardProblem,"BW"); fwSolver.otherSolver = bwSolver;fwSolver.otherSolver=bwSolver; bwSolver.otherSolver = fwSolver;bwSolver.otherSolver=fwSolver;   fwSolver.solve();fwSolver.solve(); bwSolver.solve();bwSolver.solve();  while(bwSolver.hasWork() || fwSolver.hasWork()) {while(bwSolver.hasWork()||fwSolver.hasWork()){ fwSolver.awaitCompletionComputeValuesAndShutdown();fwSolver.awaitCompletionComputeValuesAndShutdown(); bwSolver.awaitCompletionComputeValuesAndShutdown();bwSolver.awaitCompletionComputeValuesAndShutdown(); }} }}  /**/**	 * Creates a solver to be used for each single analysis direction.	 * Creates a solver to be used for each single analysis direction.	 */	 */ protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> problem, String debugName) {protectedSingleDirectionSolvercreateSingleDirectionSolver(IFDSTabulationProblem<N,FieldRef,AbstractionWithSourceStmt,M,I>problem,StringdebugName){ return new SingleDirectionSolver(problem, debugName);returnnewSingleDirectionSolver(problem,debugName); }}  private class PausedEdge {privateclassPausedEdge{ private N relatedCallSite;privateNrelatedCallSite; private PathEdge<N, AbstractionWithSourceStmt> edge;privatePathEdge<N,AbstractionWithSourceStmt>edge;  public PausedEdge(PathEdge<N, AbstractionWithSourceStmt> edge,publicPausedEdge(PathEdge<N,AbstractionWithSourceStmt>edge, N relatedCallSite) {NrelatedCallSite){ this.edge = edge;this.edge=edge; this.relatedCallSite = relatedCallSite;this.relatedCallSite=relatedCallSite; }} }} /**/**	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.	 *	 *	 */	 */ private static class LeakKey<N> {privatestaticclassLeakKey<N>{ private N sourceStmt;privateNsourceStmt; private N relatedCallSite;privateNrelatedCallSite;  public LeakKey(N sourceStmt, N relatedCallSite) {publicLeakKey(NsourceStmt,NrelatedCallSite){ this.sourceStmt = sourceStmt;this.sourceStmt=sourceStmt; this.relatedCallSite = relatedCallSite;this.relatedCallSite=relatedCallSite; }}  @Override@Override public int hashCode() {publicinthashCode(){ final int prime = 31;finalintprime=31; int result = 1;intresult=1; result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());result=prime*result+((relatedCallSite==null)?0:relatedCallSite.hashCode()); result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());result=prime*result+((sourceStmt==null)?0:sourceStmt.hashCode()); return result;returnresult; }}  @SuppressWarnings("rawtypes")@SuppressWarnings("rawtypes") @Override@Override public boolean equals(Object obj) {publicbooleanequals(Objectobj){ if (this == obj)if(this==obj) return true;returntrue; if (obj == null)if(obj==null) return false;returnfalse; if (!(obj instanceof LeakKey))if(!(objinstanceofLeakKey)) return false;returnfalse; LeakKey other = (LeakKey) obj;LeakKeyother=(LeakKey)obj; if (relatedCallSite == null) {if(relatedCallSite==null){ if (other.relatedCallSite != null)if(other.relatedCallSite!=null) return false;returnfalse; } else if (!relatedCallSite.equals(other.relatedCallSite))}elseif(!relatedCallSite.equals(other.relatedCallSite)) return false;returnfalse; if (sourceStmt == null) {if(sourceStmt==null){ if (other.sourceStmt != null)if(other.sourceStmt!=null) return false;returnfalse; } else if (!sourceStmt.equals(other.sourceStmt))}elseif(!sourceStmt.equals(other.sourceStmt)) return false;returnfalse; return true;returntrue; }} }}  /**/**	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.	 */	 */ protected class SingleDirectionSolver extends FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, AbstractionWithSourceStmt, M, I> {protectedclassSingleDirectionSolverextendsFieldSensitiveIFDSSolver<N,BaseValue,FieldRef,AbstractionWithSourceStmt,M,I>{ private final String debugName;privatefinalStringdebugName; private SingleDirectionSolver otherSolver;privateSingleDirectionSolverotherSolver; private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());privateSet<LeakKey<N>>leakedSources=Collections.newSetFromMap(Maps.<LeakKey<N>,Boolean>newConcurrentMap()); private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =privateConcurrentMap<LeakKey<N>,Set<PausedEdge>>pausedPathEdges= Maps.newConcurrentMap();Maps.newConcurrentMap(); public SingleDirectionSolver(IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {publicSingleDirectionSolver(IFDSTabulationProblem<N,FieldRef,AbstractionWithSourceStmt,M,I>ifdsProblem,StringdebugName){ super(ifdsProblem);super(ifdsProblem); this.debugName = debugName;this.debugName=debugName; }}  @Override@Override protected void propagateUnbalancedReturnFlow(PathEdge<N,AbstractionWithSourceStmt> edge,protectedvoidpropagateUnbalancedReturnFlow(PathEdge<N,AbstractionWithSourceStmt>edge, /* deliberately exposed to clients */ N relatedCallSite) {/* deliberately exposed to clients */NrelatedCallSite){ //if an edge is originating from ZERO then to us this signifies an unbalanced return edge//if an edge is originating from ZERO then to us this signifies an unbalanced return edge N sourceStmt = edge.factAtTarget().getSourceStmt();NsourceStmt=edge.factAtTarget().getSourceStmt(); //we mark the fact that this solver would like to "leak" this edge to the caller//we mark the fact that this solver would like to "leak" this edge to the caller LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);LeakKey<N>leakKey=newLeakKey<N>(sourceStmt,relatedCallSite); leakedSources.add(leakKey);leakedSources.add(leakKey); if(otherSolver.hasLeaked(leakKey)) {if(otherSolver.hasLeaked(leakKey)){ //if the other solver has leaked already then unpause its edges and continue//if the other solver has leaked already then unpause its edges and continue otherSolver.unpausePathEdgesForSource(leakKey);otherSolver.unpausePathEdgesForSource(leakKey); super.propagateUnbalancedReturnFlow(edge, relatedCallSite);super.propagateUnbalancedReturnFlow(edge,relatedCallSite); } else {}else{ //otherwise we pause this solver's edge and don't continue//otherwise we pause this solver's edge and don't continue Set<PausedEdge> newPausedEdges = Set<PausedEdge>newPausedEdges= Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); Collections.newSetFromMap(Maps.<PausedEdge,Boolean>newConcurrentMap()); Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);Set<PausedEdge>existingPausedEdges=pausedPathEdges.putIfAbsent(leakKey,newPausedEdges); if(existingPausedEdges==null)if(existingPausedEdges==null) existingPausedEdges=newPausedEdges;existingPausedEdges=newPausedEdges;  PausedEdge pausedEdge = new PausedEdge(edge, relatedCallSite);PausedEdgepausedEdge=newPausedEdge(edge,relatedCallSite); existingPausedEdges.add(pausedEdge);existingPausedEdges.add(pausedEdge);  //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused//if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(pausedEdge)) {if(otherSolver.hasLeaked(leakKey)&&existingPausedEdges.remove(pausedEdge)){ super.propagateUnbalancedReturnFlow(edge, relatedCallSite);super.propagateUnbalancedReturnFlow(edge,relatedCallSite); }}  logger.debug(" ++ PAUSE {}: {}", debugName, pausedEdge);logger.debug(" ++ PAUSE {}: {}",debugName,pausedEdge); }} }} @Override@Override protected void propagate(PathEdge<N,AbstractionWithSourceStmt> edge,protectedvoidpropagate(PathEdge<N,AbstractionWithSourceStmt>edge, /* deliberately exposed to clients */ N relatedCallSite,/* deliberately exposed to clients */NrelatedCallSite, /* deliberately exposed to clients */ boolean isUnbalancedReturn) {/* deliberately exposed to clients */booleanisUnbalancedReturn){  if(isUnbalancedReturn) {if(isUnbalancedReturn){ assert edge.factAtSource().getSourceStmt()==null : "source value should have no statement attached";assertedge.factAtSource().getSourceStmt()==null:"source value should have no statement attached";  super.propagate(new PathEdge<N, AbstractionWithSourceStmt>(edge.factAtSource(), edge.getTarget(), super.propagate(newPathEdge<N,AbstractionWithSourceStmt>(edge.factAtSource(),edge.getTarget(), new AbstractionWithSourceStmt(edge.factAtTarget().getAbstraction(), relatedCallSite)), newAbstractionWithSourceStmt(edge.factAtTarget().getAbstraction(),relatedCallSite)), relatedCallSite, isUnbalancedReturn);relatedCallSite,isUnbalancedReturn); } else { }else{ super.propagate(edge, relatedCallSite, isUnbalancedReturn);super.propagate(edge,relatedCallSite,isUnbalancedReturn); }} }}  @Override@Override protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {protectedAbstractionWithSourceStmtrestoreContextOnReturnedFact(AbstractionWithSourceStmtd4,AbstractionWithSourceStmtd5){ d5.getAbstraction().setCallingContext(d4.getAbstraction());d5.getAbstraction().setCallingContext(d4.getAbstraction()); return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());returnnewAbstractionWithSourceStmt(d5.getAbstraction(),d4.getSourceStmt()); }}  /**/**		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source		 * to its caller.		 * to its caller.		 */		 */ private boolean hasLeaked(LeakKey<N> leakKey) {privatebooleanhasLeaked(LeakKey<N>leakKey){ return leakedSources.contains(leakKey);returnleakedSources.contains(leakKey); }}  /**/**		 * Unpauses all edges associated with the given source statement.		 * Unpauses all edges associated with the given source statement.		 */		 */ private void unpausePathEdgesForSource(LeakKey<N> leakKey) {privatevoidunpausePathEdgesForSource(LeakKey<N>leakKey){ Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);Set<PausedEdge>pausedEdges=pausedPathEdges.get(leakKey); if(pausedEdges!=null) {if(pausedEdges!=null){ for(PausedEdge edge: pausedEdges) {for(PausedEdgeedge:pausedEdges){ if(pausedEdges.remove(edge)) {if(pausedEdges.remove(edge)){ if(DEBUG)if(DEBUG) logger.debug("-- UNPAUSE {}: {}",debugName, edge);logger.debug("-- UNPAUSE {}: {}",debugName,edge); super.propagateUnbalancedReturnFlow(edge.edge, edge.relatedCallSite);super.propagateUnbalancedReturnFlow(edge.edge,edge.relatedCallSite); }} }} }} }}  protected String getDebugName() {protectedStringgetDebugName(){ return debugName;returndebugName; }} }} /**/**	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the	 * abstraction the source statement from which this fact originated. 	 * abstraction the source statement from which this fact originated. 	 */	 */ public class AbstractionWithSourceStmt implements FieldSensitiveFact<BaseValue, FieldRef, AbstractionWithSourceStmt> {publicclassAbstractionWithSourceStmtimplementsFieldSensitiveFact<BaseValue,FieldRef,AbstractionWithSourceStmt>{ protected final D abstraction;protectedfinalDabstraction; protected final N source;protectedfinalNsource;  private AbstractionWithSourceStmt(D abstraction, N source) {privateAbstractionWithSourceStmt(Dabstraction,Nsource){ this.abstraction = abstraction;this.abstraction=abstraction; this.source = source;this.source=source; }} public D getAbstraction() {publicDgetAbstraction(){ return abstraction;returnabstraction; }}  public N getSourceStmt() {publicNgetSourceStmt(){ return source;returnsource; } }  @Override@Override public String toString() {publicStringtoString(){ if(source!=null)if(source!=null) return ""+abstraction+"-@-"+source+"";return""+abstraction+"-@-"+source+""; elseelse return abstraction.toString();returnabstraction.toString(); }} @Override@Override public int hashCode() {publicinthashCode(){ final int prime = 31;finalintprime=31; int result = 1;intresult=1; result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());result=prime*result+((abstraction==null)?0:abstraction.hashCode()); result = prime * result + ((source == null) ? 0 : source.hashCode());result=prime*result+((source==null)?0:source.hashCode()); return result;returnresult; }} @Override@Override public boolean equals(Object obj) {publicbooleanequals(Objectobj){ if (this == obj)if(this==obj) return true;returntrue; if (obj == null)if(obj==null) return false;returnfalse; if (getClass() != obj.getClass())if(getClass()!=obj.getClass()) return false;returnfalse; @SuppressWarnings("unchecked")@SuppressWarnings("unchecked") AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;AbstractionWithSourceStmtother=(AbstractionWithSourceStmt)obj; if (abstraction == null) {if(abstraction==null){ if (other.abstraction != null)if(other.abstraction!=null) return false;returnfalse; } else if (!abstraction.equals(other.abstraction))}elseif(!abstraction.equals(other.abstraction)) return false;returnfalse; if (source == null) {if(source==null){ if (other.source != null)if(other.source!=null) return false;returnfalse; } else if (!source.equals(other.source))}elseif(!source.equals(other.source)) return false;returnfalse; return true;returntrue; }} @Override@Override public void setCallingContext(AbstractionWithSourceStmt callingContext) {publicvoidsetCallingContext(AbstractionWithSourceStmtcallingContext){ abstraction.setCallingContext(callingContext.getAbstraction());abstraction.setCallingContext(callingContext.getAbstraction()); }} @Override@Override public void addNeighbor(BiDiFieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D, M, I>.AbstractionWithSourceStmt originalAbstraction) {publicvoidaddNeighbor(BiDiFieldSensitiveIFDSSolver<N,BaseValue,FieldRef,D,M,I>.AbstractionWithSourceStmtoriginalAbstraction){ abstraction.addNeighbor(originalAbstraction.abstraction);abstraction.addNeighbor(originalAbstraction.abstraction); }} @Override@Override public BaseValue getBaseValue() {publicBaseValuegetBaseValue(){ return abstraction.getBaseValue();returnabstraction.getBaseValue(); }} @Override@Override public AccessPath<FieldRef> getAccessPath() {publicAccessPath<FieldRef>getAccessPath(){ return abstraction.getAccessPath();returnabstraction.getAccessPath(); }} @Override@Override public BiDiFieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D, M, I>.AbstractionWithSourceStmt cloneWithAccessPath(publicBiDiFieldSensitiveIFDSSolver<N,BaseValue,FieldRef,D,M,I>.AbstractionWithSourceStmtcloneWithAccessPath( AccessPath<FieldRef> accessPath) {AccessPath<FieldRef>accessPath){ return new AbstractionWithSourceStmt(abstraction.cloneWithAccessPath(accessPath), source);returnnewAbstractionWithSourceStmt(abstraction.cloneWithAccessPath(accessPath),source); }} }}  /**/**	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.	 */	 */ private class AugmentedTabulationProblem implements IFDSTabulationProblem<N, FieldRef, AbstractionWithSourceStmt,M,I> {privateclassAugmentedTabulationProblemimplementsIFDSTabulationProblem<N,FieldRef,AbstractionWithSourceStmt,M,I>{ private final IFDSTabulationProblem<N,FieldRef,D,M,I> delegate;privatefinalIFDSTabulationProblem<N,FieldRef,D,M,I>delegate; private final AbstractionWithSourceStmt ZERO;privatefinalAbstractionWithSourceStmtZERO; private final FlowFunctions<N,FieldRef, D, M> originalFunctions;privatefinalFlowFunctions<N,FieldRef,D,M>originalFunctions;  public AugmentedTabulationProblem(IFDSTabulationProblem<N,FieldRef, D, M, I> delegate) {publicAugmentedTabulationProblem(IFDSTabulationProblem<N,FieldRef,D,M,I>delegate){ this.delegate = delegate;this.delegate=delegate; originalFunctions = this.delegate.flowFunctions();originalFunctions=this.delegate.flowFunctions(); ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);ZERO=newAbstractionWithSourceStmt(delegate.zeroValue(),null); }} @Override@Override public FlowFunctions<N, FieldRef, AbstractionWithSourceStmt, M> flowFunctions() {publicFlowFunctions<N,FieldRef,AbstractionWithSourceStmt,M>flowFunctions(){ return new FlowFunctions<N,FieldRef, AbstractionWithSourceStmt, M>() {returnnewFlowFunctions<N,FieldRef,AbstractionWithSourceStmt,M>(){ @Override@Override public FlowFunction<FieldRef, AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {publicFlowFunction<FieldRef,AbstractionWithSourceStmt>getNormalFlowFunction(finalNcurr,finalNsucc){ return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {returnnewFlowFunction<FieldRef,AbstractionWithSourceStmt>(){ @Override@Override public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {publicSet<ConstrainedFact<FieldRef,AbstractionWithSourceStmt>>computeTargets(AbstractionWithSourceStmtsource){ return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));returncopyOverSourceStmts(source,originalFunctions.getNormalFlowFunction(curr,succ)); }} };}; }} @Override@Override public FlowFunction<FieldRef, AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {publicFlowFunction<FieldRef,AbstractionWithSourceStmt>getCallFlowFunction(finalNcallStmt,finalMdestinationMethod){ return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {returnnewFlowFunction<FieldRef,AbstractionWithSourceStmt>(){ @Override@Override public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {publicSet<ConstrainedFact<FieldRef,AbstractionWithSourceStmt>>computeTargets(AbstractionWithSourceStmtsource){ Set<ConstrainedFact<FieldRef, D>> origTargets = originalFunctions.getCallFlowFunction(callStmt, destinationMethod).computeTargets(Set<ConstrainedFact<FieldRef,D>>origTargets=originalFunctions.getCallFlowFunction(callStmt,destinationMethod).computeTargets( source.getAbstraction());source.getAbstraction()); Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> res = Sets.newHashSet();Set<ConstrainedFact<FieldRef,AbstractionWithSourceStmt>>res=Sets.newHashSet(); for (ConstrainedFact<FieldRef, D> d : origTargets) {for(ConstrainedFact<FieldRef,D>d:origTargets){ res.add(new ConstrainedFact<FieldRef, AbstractionWithSourceStmt>(new AbstractionWithSourceStmt(d.getFact(), null), d.getConstraint()));res.add(newConstrainedFact<FieldRef,AbstractionWithSourceStmt>(newAbstractionWithSourceStmt(d.getFact(),null),d.getConstraint())); }} return res;returnres; }} };}; }} @Override@Override public FlowFunction<FieldRef, AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {publicFlowFunction<FieldRef,AbstractionWithSourceStmt>getReturnFlowFunction(finalNcallSite,finalMcalleeMethod,finalNexitStmt,finalNreturnSite){ return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {returnnewFlowFunction<FieldRef,AbstractionWithSourceStmt>(){ @Override@Override public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {publicSet<ConstrainedFact<FieldRef,AbstractionWithSourceStmt>>computeTargets(AbstractionWithSourceStmtsource){ return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));returncopyOverSourceStmts(source,originalFunctions.getReturnFlowFunction(callSite,calleeMethod,exitStmt,returnSite)); }} };}; }} @Override@Override public FlowFunction<FieldRef, AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {publicFlowFunction<FieldRef,AbstractionWithSourceStmt>getCallToReturnFlowFunction(finalNcallSite,finalNreturnSite){ return new FlowFunction<FieldRef, AbstractionWithSourceStmt>() {returnnewFlowFunction<FieldRef,AbstractionWithSourceStmt>(){ @Override@Override public Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> computeTargets(AbstractionWithSourceStmt source) {publicSet<ConstrainedFact<FieldRef,AbstractionWithSourceStmt>>computeTargets(AbstractionWithSourceStmtsource){ return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));returncopyOverSourceStmts(source,originalFunctions.getCallToReturnFlowFunction(callSite,returnSite)); }} };}; }}  private Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<FieldRef, D> originalFunction) {privateSet<ConstrainedFact<FieldRef,AbstractionWithSourceStmt>>copyOverSourceStmts(AbstractionWithSourceStmtsource,FlowFunction<FieldRef,D>originalFunction){ D originalAbstraction = source.getAbstraction();DoriginalAbstraction=source.getAbstraction(); Set<ConstrainedFact<FieldRef, D>> origTargets = originalFunction.computeTargets(originalAbstraction);Set<ConstrainedFact<FieldRef,D>>origTargets=originalFunction.computeTargets(originalAbstraction);  Set<ConstrainedFact<FieldRef, AbstractionWithSourceStmt>> res = Sets.newHashSet();Set<ConstrainedFact<FieldRef,AbstractionWithSourceStmt>>res=Sets.newHashSet(); for(ConstrainedFact<FieldRef, D> d: origTargets) {for(ConstrainedFact<FieldRef,D>d:origTargets){ res.add(new ConstrainedFact<FieldRef, AbstractionWithSourceStmt>(new AbstractionWithSourceStmt(d.getFact(), source.getSourceStmt()), d.getConstraint()));res.add(newConstrainedFact<FieldRef,AbstractionWithSourceStmt>(newAbstractionWithSourceStmt(d.getFact(),source.getSourceStmt()),d.getConstraint())); }} return res;returnres; }} };}; }}  //delegate methods follow//delegate methods follow public boolean followReturnsPastSeeds() {publicbooleanfollowReturnsPastSeeds(){ return delegate.followReturnsPastSeeds();returndelegate.followReturnsPastSeeds(); }} public boolean autoAddZero() {publicbooleanautoAddZero(){ return delegate.autoAddZero();returndelegate.autoAddZero(); }} public int numThreads() {publicintnumThreads(){ return delegate.numThreads();returndelegate.numThreads(); }} public boolean computeValues() {publicbooleancomputeValues(){ return delegate.computeValues();returndelegate.computeValues(); }} public I interproceduralCFG() {publicIinterproceduralCFG(){ return delegate.interproceduralCFG();returndelegate.interproceduralCFG(); }} /* attaches the original seed statement to the abstraction/* attaches the original seed statement to the abstraction		 */		 */ public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {publicMap<N,Set<AbstractionWithSourceStmt>>initialSeeds(){ Map<N, Set<D>> originalSeeds = delegate.initialSeeds();Map<N,Set<D>>originalSeeds=delegate.initialSeeds(); Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();Map<N,Set<AbstractionWithSourceStmt>>res=newHashMap<N,Set<AbstractionWithSourceStmt>>(); for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {for(Entry<N,Set<D>>entry:originalSeeds.entrySet()){ N stmt = entry.getKey();Nstmt=entry.getKey(); Set<D> seeds = entry.getValue();Set<D>seeds=entry.getValue(); Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();Set<AbstractionWithSourceStmt>resSet=newHashSet<AbstractionWithSourceStmt>(); for (D d : seeds) {for(Dd:seeds){ //attach source stmt to abstraction//attach source stmt to abstraction resSet.add(new AbstractionWithSourceStmt(d, stmt));resSet.add(newAbstractionWithSourceStmt(d,stmt)); }} res.put(stmt, resSet);res.put(stmt,resSet); } } return res;returnres; }} public AbstractionWithSourceStmt zeroValue() {publicAbstractionWithSourceStmtzeroValue(){ return ZERO;returnZERO; }} }}}}








src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ ad21e971






......@@ -161,22 +161,26 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * shuts down the executor and returns.










	 */










 protected void awaitCompletionComputeValuesAndShutdown() {










 {










 //run executor and await termination of tasks










 runExecutorAndAwaitCompletion();










 }










//		{










//			//run executor and await termination of tasks










//			runExecutorAndAwaitCompletion();










//		}










 if(logger.isDebugEnabled())










 printStats();





















 //ask executor to shut down;










 //this will cause new submissions to the executor to be rejected,










 //but at this point all tasks should have completed anyway










 executor.shutdown();










//		executor.shutdown();










 //similarly here: we await termination, but this should happen instantaneously,










 //as all tasks should have completed










 runExecutorAndAwaitCompletion();










 }





















 protected boolean hasWork() {










 return !worklist.isEmpty();










 }










 










 /**










	 * Runs execution, re-throwing exceptions that might be thrown during its execution.










	 */



......@@ -408,7 +412,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 Set<ConstrainedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(ConstrainedFact<FieldRef, D> d5: targets)










 propagate(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c, true);










 propagateUnbalancedReturnFlow(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c);










 }










 }










 //in cases where there are no callers, the return statement would normally not be processed at all;



......@@ -566,6 +570,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return d5;










 }










 










 protected void propagateUnbalancedReturnFlow(PathEdge<N,D> edge,










 /* deliberately exposed to clients */ N relatedCallSite) {










 propagate(edge, relatedCallSite, true);










 }










 










 /**










	 * Propagates the flow further down the exploded super graph. 



......












src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ ad21e971








src/heros/alias/FieldSensitiveIFDSSolver.java










View file @ ad21e971


ad21e971



......@@ -161,22 +161,26 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * shuts down the executor and returns.










	 */










 protected void awaitCompletionComputeValuesAndShutdown() {










 {










 //run executor and await termination of tasks










 runExecutorAndAwaitCompletion();










 }










//		{










//			//run executor and await termination of tasks










//			runExecutorAndAwaitCompletion();










//		}










 if(logger.isDebugEnabled())










 printStats();





















 //ask executor to shut down;










 //this will cause new submissions to the executor to be rejected,










 //but at this point all tasks should have completed anyway










 executor.shutdown();










//		executor.shutdown();










 //similarly here: we await termination, but this should happen instantaneously,










 //as all tasks should have completed










 runExecutorAndAwaitCompletion();










 }





















 protected boolean hasWork() {










 return !worklist.isEmpty();










 }










 










 /**










	 * Runs execution, re-throwing exceptions that might be thrown during its execution.










	 */



......@@ -408,7 +412,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 Set<ConstrainedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(ConstrainedFact<FieldRef, D> d5: targets)










 propagate(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c, true);










 propagateUnbalancedReturnFlow(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c);










 }










 }










 //in cases where there are no callers, the return statement would normally not be processed at all;



......@@ -566,6 +570,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return d5;










 }










 










 protected void propagateUnbalancedReturnFlow(PathEdge<N,D> edge,










 /* deliberately exposed to clients */ N relatedCallSite) {










 propagate(edge, relatedCallSite, true);










 }










 










 /**










	 * Propagates the flow further down the exploded super graph. 



......






......@@ -161,22 +161,26 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









	 * shuts down the executor and returns.










	 */










 protected void awaitCompletionComputeValuesAndShutdown() {










 {










 //run executor and await termination of tasks










 runExecutorAndAwaitCompletion();










 }










//		{










//			//run executor and await termination of tasks










//			runExecutorAndAwaitCompletion();










//		}










 if(logger.isDebugEnabled())










 printStats();





















 //ask executor to shut down;










 //this will cause new submissions to the executor to be rejected,










 //but at this point all tasks should have completed anyway










 executor.shutdown();










//		executor.shutdown();










 //similarly here: we await termination, but this should happen instantaneously,










 //as all tasks should have completed










 runExecutorAndAwaitCompletion();










 }





















 protected boolean hasWork() {










 return !worklist.isEmpty();










 }










 










 /**










	 * Runs execution, re-throwing exceptions that might be thrown during its execution.










	 */



......@@ -408,7 +412,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 Set<ConstrainedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(ConstrainedFact<FieldRef, D> d5: targets)










 propagate(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c, true);










 propagateUnbalancedReturnFlow(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c);










 }










 }










 //in cases where there are no callers, the return statement would normally not be processed at all;



......@@ -566,6 +570,10 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return d5;










 }










 










 protected void propagateUnbalancedReturnFlow(PathEdge<N,D> edge,










 /* deliberately exposed to clients */ N relatedCallSite) {










 propagate(edge, relatedCallSite, true);










 }










 










 /**










	 * Propagates the flow further down the exploded super graph. 



......


	 * shuts down the executor and returns.	 * shuts down the executor and returns.	 */	 */ protected void awaitCompletionComputeValuesAndShutdown() {protectedvoidawaitCompletionComputeValuesAndShutdown(){ {{ //run executor and await termination of tasks//run executor and await termination of tasks runExecutorAndAwaitCompletion();runExecutorAndAwaitCompletion(); }}//		{//		{////			//run executor and await termination of tasks//			//run executor and await termination of tasks////			runExecutorAndAwaitCompletion();//			runExecutorAndAwaitCompletion();////		}//		}// if(logger.isDebugEnabled())if(logger.isDebugEnabled()) printStats();printStats(); //ask executor to shut down;//ask executor to shut down; //this will cause new submissions to the executor to be rejected,//this will cause new submissions to the executor to be rejected, //but at this point all tasks should have completed anyway//but at this point all tasks should have completed anyway executor.shutdown();executor.shutdown();//		executor.shutdown();//		executor.shutdown();// //similarly here: we await termination, but this should happen instantaneously,//similarly here: we await termination, but this should happen instantaneously, //as all tasks should have completed//as all tasks should have completed runExecutorAndAwaitCompletion();runExecutorAndAwaitCompletion(); }} protected boolean hasWork() {protectedbooleanhasWork(){ return !worklist.isEmpty();return!worklist.isEmpty(); }}  /**/**	 * Runs execution, re-throwing exceptions that might be thrown during its execution.	 * Runs execution, re-throwing exceptions that might be thrown during its execution.	 */	 */ FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);FlowFunction<FieldRef,D>retFunction=flowFunctions.getReturnFlowFunction(c,methodThatNeedsSummary,n,retSiteC); Set<ConstrainedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);Set<ConstrainedFact<FieldRef,D>>targets=computeReturnFlowFunction(retFunction,d2,c); for(ConstrainedFact<FieldRef, D> d5: targets)for(ConstrainedFact<FieldRef,D>d5:targets) propagate(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c, true);propagate(newPathEdge<>(zeroValue,retSiteC,d5.getFact()),c,, truetrue); propagateUnbalancedReturnFlow(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c);propagateUnbalancedReturnFlowUnbalancedReturnFlow(newPathEdge<>(zeroValue,retSiteC,d5.getFact()),c); }} }} //in cases where there are no callers, the return statement would normally not be processed at all;//in cases where there are no callers, the return statement would normally not be processed at all; return d5;returnd5; }}  protected void propagateUnbalancedReturnFlow(PathEdge<N,D> edge,protectedvoidpropagateUnbalancedReturnFlow(PathEdge<N,D>edge, /* deliberately exposed to clients */ N relatedCallSite) {/* deliberately exposed to clients */NrelatedCallSite){ propagate(edge, relatedCallSite, true);propagate(edge,relatedCallSite,true); }}  /**/**	 * Propagates the flow further down the exploded super graph. 	 * Propagates the flow further down the exploded super graph. 









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






