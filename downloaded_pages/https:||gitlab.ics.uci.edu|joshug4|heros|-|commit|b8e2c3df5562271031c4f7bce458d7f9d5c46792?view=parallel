



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

b8e2c3df















Commit
b8e2c3df


authored
Jul 06, 2013
by


Eric Bodden



Browse files




changed signature of "propagate" to include original call site for return and call flows


modified bidi solver to changed attached source statement on return






parent
eec2141c













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ b8e2c3df








...@@ -10,6 +10,7 @@
...@@ -10,6 +10,7 @@






 ******************************************************************************/





 ******************************************************************************/







package heros.solver;





package heros.solver;























import heros.EdgeFunction;







import heros.FlowFunction;





import heros.FlowFunction;







import heros.FlowFunctions;





import heros.FlowFunctions;







import heros.IFDSTabulationProblem;





import heros.IFDSTabulationProblem;



...@@ -60,7 +61,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -60,7 +61,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 private SingleDirectionSolver otherSolver;





 private SingleDirectionSolver otherSolver;







 private Set<N> leakedSources = new HashSet<N>();





 private Set<N> leakedSources = new HashSet<N>();







 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =





 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =







 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();





 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();









 private boolean inProcessExit = false;





















 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {





 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {







 super(ifdsProblem);





 super(ifdsProblem);



...@@ -70,16 +72,37 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -70,16 +72,37 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 @Override





 @Override







 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {





 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {







 N sourceStmt = edge.factAtTarget().getSourceStmt();





 N sourceStmt = edge.factAtTarget().getSourceStmt();









 leakedSources.add(sourceStmt);







 if(otherSolver.hasLeaked(sourceStmt)) {





 if(otherSolver.hasLeaked(sourceStmt)) {







 otherSolver.unpausePathEdgesForSource(sourceStmt);





 otherSolver.unpausePathEdgesForSource(sourceStmt);









 inProcessExit = true;







 super.processExit(edge);





 super.processExit(edge);









 inProcessExit = false;







 } else {





 } else {







 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);





 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);







 if(pausedEdges==null) pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();





 if(pausedEdges==null) {









 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();









 pausedPathEdges.put(sourceStmt,pausedEdges);









 } 







 pausedEdges.add(edge);





 pausedEdges.add(edge);









 System.err.println("PAUSE "+debugName+": "+edge);







 } 





 } 







 }





 }







 





 









 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal,









 EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite) {









 if(inProcessExit) {









 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";









 









 //attach target statement as new "source" statement to track









 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(),relatedCallSite);









 









 super.propagate(sourceVal, target, targetVal, f, relatedCallSite);









 } else { 









 super.propagate(sourceVal, target, targetVal, f, relatedCallSite);









 }









 }









 







 private boolean hasLeaked(N sourceStmt) {





 private boolean hasLeaked(N sourceStmt) {







 return leakedSources.contains(sourceStmt);





 return leakedSources.contains(sourceStmt);







 }





 }



...@@ -88,6 +111,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -88,6 +111,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);





 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);







 if(pausedEdges!=null) {





 if(pausedEdges!=null) {







 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {





 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {









 System.err.println("UNPAUSE "+debugName+": "+pausedEdge);







 super.processExit(pausedEdge);





 super.processExit(pausedEdge);







 }





 }







 }





 }



......















src/heros/solver/IDESolver.java








View file @ b8e2c3df








...@@ -198,12 +198,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -198,12 +198,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






	 * Schedules the processing of initial seeds, initiating the analysis.





	 * Schedules the processing of initial seeds, initiating the analysis.







	 * Clients should only call this methods if performing synchronization on





	 * Clients should only call this methods if performing synchronization on







	 * their own. Normally, {@link #solve()} should be called instead.





	 * their own. Normally, {@link #solve()} should be called instead.







   */





	 */







 protected void submitInitialSeeds() {





 protected void submitInitialSeeds() {







 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {





 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {







 N startPoint = seed.getKey();





 N startPoint = seed.getKey();







 for(D val: seed.getValue()) {





 for(D val: seed.getValue()) {







 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v());





 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v(), null);







 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));





 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));







 }





 }







 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());





 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());



...@@ -301,7 +301,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -301,7 +301,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //for each result node of the call-flow function





 //for each result node of the call-flow function







 for(D d3: res) {





 for(D d3: res) {







 //create initial self-loop





 //create initial self-loop







 propagate(d3, sP, d3, EdgeIdentity.<V>v()); //line 15





 propagate(d3, sP, d3, EdgeIdentity.<V>v(), n); //line 15







 





 







 //register the fact that <sp,d3> has an incoming edge from <n,d2>





 //register the fact that <sp,d3> has an incoming edge from <n,d2>







 Set<Cell<N, D, EdgeFunction<V>>> endSumm;





 Set<Cell<N, D, EdgeFunction<V>>> endSumm;



...@@ -333,7 +333,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -333,7 +333,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);







 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 





 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 







 propagate(d1, retSiteN, d5, f.composeWith(fPrime));





 propagate(d1, retSiteN, d5, f.composeWith(fPrime), n);







 }





 }







 }





 }







 }





 }



...@@ -347,7 +347,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -347,7 +347,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {





 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {







 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);





 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);







 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));





 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n);







 }





 }







 }





 }







 }





 }



...@@ -408,7 +408,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -408,7 +408,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> f3 = valAndFunc.getValue();





 EdgeFunction<V> f3 = valAndFunc.getValue();







 if(!f3.equalTo(allTop)) {





 if(!f3.equalTo(allTop)) {







 D d3 = valAndFunc.getKey();





 D d3 = valAndFunc.getKey();







 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));





 propagate(d3, retSiteC, d5, f3.composeWith(fPrime), c);







 }





 }







 }





 }







 }





 }



...@@ -435,7 +435,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -435,7 +435,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 Set<D> targets = retFunction.computeTargets(d2);





 Set<D> targets = retFunction.computeTargets(d2);







 for(D d5: targets) {





 for(D d5: targets) {







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 propagate(zeroValue, retSiteC, d5, f.composeWith(f5));





 propagate(zeroValue, retSiteC, d5, f.composeWith(f5), c);







 }





 }







 }





 }







 }





 }



...@@ -467,12 +467,22 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -467,12 +467,22 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 Set<D> res = flowFunction.computeTargets(d2);





 Set<D> res = flowFunction.computeTargets(d2);







 for (D d3 : res) {





 for (D d3 : res) {







 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));





 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));







 propagate(d1, m, d3, fprime); 





 propagate(d1, m, d3, fprime, null); 







 }





 }







 }





 }







 }





 }







 





 







 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f) {





 /**









	 * Propagates the flow further down the exploded super graph, merging any edge function that might









	 * already have been computed for targetVal at target. 









	 * @param sourceVal the source value of the propagated summary edge









	 * @param target the target statement









	 * @param targetVal the target value at the target statement









	 * @param f the new edge function computed from (s0,sourceVal) to (target,targetVal) 









	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise









	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 









	 */









 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f, /* deliberately exposed to clients */ N relatedCallSite) {







 EdgeFunction<V> jumpFnE;





 EdgeFunction<V> jumpFnE;







 EdgeFunction<V> fPrime;





 EdgeFunction<V> fPrime;







 boolean newFunction;





 boolean newFunction;



...@@ -697,7 +707,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -697,7 +707,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 protected CountingThreadPoolExecutor getExecutor() {





 protected CountingThreadPoolExecutor getExecutor() {







 return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());





 return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());







 }





 }













 







 /**





 /**







	 * Returns a String used to identify the output of this solver in debug mode.





	 * Returns a String used to identify the output of this solver in debug mode.







	 * Subclasses can overwrite this string to distinguish the output from different solvers.





	 * Subclasses can overwrite this string to distinguish the output from different solvers.



......

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

b8e2c3df















Commit
b8e2c3df


authored
Jul 06, 2013
by


Eric Bodden



Browse files




changed signature of "propagate" to include original call site for return and call flows


modified bidi solver to changed attached source statement on return






parent
eec2141c













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ b8e2c3df








...@@ -10,6 +10,7 @@
...@@ -10,6 +10,7 @@






 ******************************************************************************/





 ******************************************************************************/







package heros.solver;





package heros.solver;























import heros.EdgeFunction;







import heros.FlowFunction;





import heros.FlowFunction;







import heros.FlowFunctions;





import heros.FlowFunctions;







import heros.IFDSTabulationProblem;





import heros.IFDSTabulationProblem;



...@@ -60,7 +61,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -60,7 +61,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 private SingleDirectionSolver otherSolver;





 private SingleDirectionSolver otherSolver;







 private Set<N> leakedSources = new HashSet<N>();





 private Set<N> leakedSources = new HashSet<N>();







 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =





 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =







 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();





 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();









 private boolean inProcessExit = false;





















 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {





 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {







 super(ifdsProblem);





 super(ifdsProblem);



...@@ -70,16 +72,37 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -70,16 +72,37 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 @Override





 @Override







 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {





 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {







 N sourceStmt = edge.factAtTarget().getSourceStmt();





 N sourceStmt = edge.factAtTarget().getSourceStmt();









 leakedSources.add(sourceStmt);







 if(otherSolver.hasLeaked(sourceStmt)) {





 if(otherSolver.hasLeaked(sourceStmt)) {







 otherSolver.unpausePathEdgesForSource(sourceStmt);





 otherSolver.unpausePathEdgesForSource(sourceStmt);









 inProcessExit = true;







 super.processExit(edge);





 super.processExit(edge);









 inProcessExit = false;







 } else {





 } else {







 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);





 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);







 if(pausedEdges==null) pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();





 if(pausedEdges==null) {









 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();









 pausedPathEdges.put(sourceStmt,pausedEdges);









 } 







 pausedEdges.add(edge);





 pausedEdges.add(edge);









 System.err.println("PAUSE "+debugName+": "+edge);







 } 





 } 







 }





 }







 





 









 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal,









 EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite) {









 if(inProcessExit) {









 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";









 









 //attach target statement as new "source" statement to track









 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(),relatedCallSite);









 









 super.propagate(sourceVal, target, targetVal, f, relatedCallSite);









 } else { 









 super.propagate(sourceVal, target, targetVal, f, relatedCallSite);









 }









 }









 







 private boolean hasLeaked(N sourceStmt) {





 private boolean hasLeaked(N sourceStmt) {







 return leakedSources.contains(sourceStmt);





 return leakedSources.contains(sourceStmt);







 }





 }



...@@ -88,6 +111,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -88,6 +111,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);





 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);







 if(pausedEdges!=null) {





 if(pausedEdges!=null) {







 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {





 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {









 System.err.println("UNPAUSE "+debugName+": "+pausedEdge);







 super.processExit(pausedEdge);





 super.processExit(pausedEdge);







 }





 }







 }





 }



......















src/heros/solver/IDESolver.java








View file @ b8e2c3df








...@@ -198,12 +198,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -198,12 +198,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






	 * Schedules the processing of initial seeds, initiating the analysis.





	 * Schedules the processing of initial seeds, initiating the analysis.







	 * Clients should only call this methods if performing synchronization on





	 * Clients should only call this methods if performing synchronization on







	 * their own. Normally, {@link #solve()} should be called instead.





	 * their own. Normally, {@link #solve()} should be called instead.







   */





	 */







 protected void submitInitialSeeds() {





 protected void submitInitialSeeds() {







 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {





 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {







 N startPoint = seed.getKey();





 N startPoint = seed.getKey();







 for(D val: seed.getValue()) {





 for(D val: seed.getValue()) {







 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v());





 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v(), null);







 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));





 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));







 }





 }







 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());





 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());



...@@ -301,7 +301,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -301,7 +301,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //for each result node of the call-flow function





 //for each result node of the call-flow function







 for(D d3: res) {





 for(D d3: res) {







 //create initial self-loop





 //create initial self-loop







 propagate(d3, sP, d3, EdgeIdentity.<V>v()); //line 15





 propagate(d3, sP, d3, EdgeIdentity.<V>v(), n); //line 15







 





 







 //register the fact that <sp,d3> has an incoming edge from <n,d2>





 //register the fact that <sp,d3> has an incoming edge from <n,d2>







 Set<Cell<N, D, EdgeFunction<V>>> endSumm;





 Set<Cell<N, D, EdgeFunction<V>>> endSumm;



...@@ -333,7 +333,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -333,7 +333,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);







 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 





 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 







 propagate(d1, retSiteN, d5, f.composeWith(fPrime));





 propagate(d1, retSiteN, d5, f.composeWith(fPrime), n);







 }





 }







 }





 }







 }





 }



...@@ -347,7 +347,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -347,7 +347,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {





 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {







 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);





 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);







 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));





 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n);







 }





 }







 }





 }







 }





 }



...@@ -408,7 +408,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -408,7 +408,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> f3 = valAndFunc.getValue();





 EdgeFunction<V> f3 = valAndFunc.getValue();







 if(!f3.equalTo(allTop)) {





 if(!f3.equalTo(allTop)) {







 D d3 = valAndFunc.getKey();





 D d3 = valAndFunc.getKey();







 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));





 propagate(d3, retSiteC, d5, f3.composeWith(fPrime), c);







 }





 }







 }





 }







 }





 }



...@@ -435,7 +435,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -435,7 +435,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 Set<D> targets = retFunction.computeTargets(d2);





 Set<D> targets = retFunction.computeTargets(d2);







 for(D d5: targets) {





 for(D d5: targets) {







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 propagate(zeroValue, retSiteC, d5, f.composeWith(f5));





 propagate(zeroValue, retSiteC, d5, f.composeWith(f5), c);







 }





 }







 }





 }







 }





 }



...@@ -467,12 +467,22 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -467,12 +467,22 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 Set<D> res = flowFunction.computeTargets(d2);





 Set<D> res = flowFunction.computeTargets(d2);







 for (D d3 : res) {





 for (D d3 : res) {







 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));





 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));







 propagate(d1, m, d3, fprime); 





 propagate(d1, m, d3, fprime, null); 







 }





 }







 }





 }







 }





 }







 





 







 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f) {





 /**









	 * Propagates the flow further down the exploded super graph, merging any edge function that might









	 * already have been computed for targetVal at target. 









	 * @param sourceVal the source value of the propagated summary edge









	 * @param target the target statement









	 * @param targetVal the target value at the target statement









	 * @param f the new edge function computed from (s0,sourceVal) to (target,targetVal) 









	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise









	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 









	 */









 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f, /* deliberately exposed to clients */ N relatedCallSite) {







 EdgeFunction<V> jumpFnE;





 EdgeFunction<V> jumpFnE;







 EdgeFunction<V> fPrime;





 EdgeFunction<V> fPrime;







 boolean newFunction;





 boolean newFunction;



...@@ -697,7 +707,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -697,7 +707,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 protected CountingThreadPoolExecutor getExecutor() {





 protected CountingThreadPoolExecutor getExecutor() {







 return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());





 return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());







 }





 }













 







 /**





 /**







	 * Returns a String used to identify the output of this solver in debug mode.





	 * Returns a String used to identify the output of this solver in debug mode.







	 * Subclasses can overwrite this string to distinguish the output from different solvers.





	 * Subclasses can overwrite this string to distinguish the output from different solvers.



......

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

b8e2c3df







Open sidebar



Joshua Garcia heros
Commits

b8e2c3df




Open sidebar

Joshua Garcia heros
Commits

b8e2c3df


Joshua GarciaherosherosCommits
b8e2c3df








Commit
b8e2c3df


authored
Jul 06, 2013
by


Eric Bodden



Browse files




changed signature of "propagate" to include original call site for return and call flows


modified bidi solver to changed attached source statement on return






parent
eec2141c













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ b8e2c3df








...@@ -10,6 +10,7 @@
...@@ -10,6 +10,7 @@






 ******************************************************************************/





 ******************************************************************************/







package heros.solver;





package heros.solver;























import heros.EdgeFunction;







import heros.FlowFunction;





import heros.FlowFunction;







import heros.FlowFunctions;





import heros.FlowFunctions;







import heros.IFDSTabulationProblem;





import heros.IFDSTabulationProblem;



...@@ -60,7 +61,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -60,7 +61,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 private SingleDirectionSolver otherSolver;





 private SingleDirectionSolver otherSolver;







 private Set<N> leakedSources = new HashSet<N>();





 private Set<N> leakedSources = new HashSet<N>();







 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =





 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =







 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();





 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();









 private boolean inProcessExit = false;





















 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {





 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {







 super(ifdsProblem);





 super(ifdsProblem);



...@@ -70,16 +72,37 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -70,16 +72,37 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 @Override





 @Override







 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {





 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {







 N sourceStmt = edge.factAtTarget().getSourceStmt();





 N sourceStmt = edge.factAtTarget().getSourceStmt();









 leakedSources.add(sourceStmt);







 if(otherSolver.hasLeaked(sourceStmt)) {





 if(otherSolver.hasLeaked(sourceStmt)) {







 otherSolver.unpausePathEdgesForSource(sourceStmt);





 otherSolver.unpausePathEdgesForSource(sourceStmt);









 inProcessExit = true;







 super.processExit(edge);





 super.processExit(edge);









 inProcessExit = false;







 } else {





 } else {







 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);





 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);







 if(pausedEdges==null) pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();





 if(pausedEdges==null) {









 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();









 pausedPathEdges.put(sourceStmt,pausedEdges);









 } 







 pausedEdges.add(edge);





 pausedEdges.add(edge);









 System.err.println("PAUSE "+debugName+": "+edge);







 } 





 } 







 }





 }







 





 









 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal,









 EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite) {









 if(inProcessExit) {









 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";









 









 //attach target statement as new "source" statement to track









 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(),relatedCallSite);









 









 super.propagate(sourceVal, target, targetVal, f, relatedCallSite);









 } else { 









 super.propagate(sourceVal, target, targetVal, f, relatedCallSite);









 }









 }









 







 private boolean hasLeaked(N sourceStmt) {





 private boolean hasLeaked(N sourceStmt) {







 return leakedSources.contains(sourceStmt);





 return leakedSources.contains(sourceStmt);







 }





 }



...@@ -88,6 +111,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -88,6 +111,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);





 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);







 if(pausedEdges!=null) {





 if(pausedEdges!=null) {







 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {





 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {









 System.err.println("UNPAUSE "+debugName+": "+pausedEdge);







 super.processExit(pausedEdge);





 super.processExit(pausedEdge);







 }





 }







 }





 }



......















src/heros/solver/IDESolver.java








View file @ b8e2c3df








...@@ -198,12 +198,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -198,12 +198,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






	 * Schedules the processing of initial seeds, initiating the analysis.





	 * Schedules the processing of initial seeds, initiating the analysis.







	 * Clients should only call this methods if performing synchronization on





	 * Clients should only call this methods if performing synchronization on







	 * their own. Normally, {@link #solve()} should be called instead.





	 * their own. Normally, {@link #solve()} should be called instead.







   */





	 */







 protected void submitInitialSeeds() {





 protected void submitInitialSeeds() {







 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {





 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {







 N startPoint = seed.getKey();





 N startPoint = seed.getKey();







 for(D val: seed.getValue()) {





 for(D val: seed.getValue()) {







 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v());





 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v(), null);







 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));





 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));







 }





 }







 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());





 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());



...@@ -301,7 +301,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -301,7 +301,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //for each result node of the call-flow function





 //for each result node of the call-flow function







 for(D d3: res) {





 for(D d3: res) {







 //create initial self-loop





 //create initial self-loop







 propagate(d3, sP, d3, EdgeIdentity.<V>v()); //line 15





 propagate(d3, sP, d3, EdgeIdentity.<V>v(), n); //line 15







 





 







 //register the fact that <sp,d3> has an incoming edge from <n,d2>





 //register the fact that <sp,d3> has an incoming edge from <n,d2>







 Set<Cell<N, D, EdgeFunction<V>>> endSumm;





 Set<Cell<N, D, EdgeFunction<V>>> endSumm;



...@@ -333,7 +333,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -333,7 +333,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);







 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 





 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 







 propagate(d1, retSiteN, d5, f.composeWith(fPrime));





 propagate(d1, retSiteN, d5, f.composeWith(fPrime), n);







 }





 }







 }





 }







 }





 }



...@@ -347,7 +347,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -347,7 +347,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {





 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {







 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);





 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);







 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));





 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n);







 }





 }







 }





 }







 }





 }



...@@ -408,7 +408,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -408,7 +408,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> f3 = valAndFunc.getValue();





 EdgeFunction<V> f3 = valAndFunc.getValue();







 if(!f3.equalTo(allTop)) {





 if(!f3.equalTo(allTop)) {







 D d3 = valAndFunc.getKey();





 D d3 = valAndFunc.getKey();







 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));





 propagate(d3, retSiteC, d5, f3.composeWith(fPrime), c);







 }





 }







 }





 }







 }





 }



...@@ -435,7 +435,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -435,7 +435,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 Set<D> targets = retFunction.computeTargets(d2);





 Set<D> targets = retFunction.computeTargets(d2);







 for(D d5: targets) {





 for(D d5: targets) {







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 propagate(zeroValue, retSiteC, d5, f.composeWith(f5));





 propagate(zeroValue, retSiteC, d5, f.composeWith(f5), c);







 }





 }







 }





 }







 }





 }



...@@ -467,12 +467,22 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -467,12 +467,22 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 Set<D> res = flowFunction.computeTargets(d2);





 Set<D> res = flowFunction.computeTargets(d2);







 for (D d3 : res) {





 for (D d3 : res) {







 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));





 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));







 propagate(d1, m, d3, fprime); 





 propagate(d1, m, d3, fprime, null); 







 }





 }







 }





 }







 }





 }







 





 







 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f) {





 /**









	 * Propagates the flow further down the exploded super graph, merging any edge function that might









	 * already have been computed for targetVal at target. 









	 * @param sourceVal the source value of the propagated summary edge









	 * @param target the target statement









	 * @param targetVal the target value at the target statement









	 * @param f the new edge function computed from (s0,sourceVal) to (target,targetVal) 









	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise









	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 









	 */









 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f, /* deliberately exposed to clients */ N relatedCallSite) {







 EdgeFunction<V> jumpFnE;





 EdgeFunction<V> jumpFnE;







 EdgeFunction<V> fPrime;





 EdgeFunction<V> fPrime;







 boolean newFunction;





 boolean newFunction;



...@@ -697,7 +707,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -697,7 +707,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 protected CountingThreadPoolExecutor getExecutor() {





 protected CountingThreadPoolExecutor getExecutor() {







 return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());





 return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());







 }





 }













 







 /**





 /**







	 * Returns a String used to identify the output of this solver in debug mode.





	 * Returns a String used to identify the output of this solver in debug mode.







	 * Subclasses can overwrite this string to distinguish the output from different solvers.





	 * Subclasses can overwrite this string to distinguish the output from different solvers.



......

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
b8e2c3df


authored
Jul 06, 2013
by


Eric Bodden



Browse files




changed signature of "propagate" to include original call site for return and call flows


modified bidi solver to changed attached source statement on return






parent
eec2141c













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ b8e2c3df








...@@ -10,6 +10,7 @@
...@@ -10,6 +10,7 @@






 ******************************************************************************/





 ******************************************************************************/







package heros.solver;





package heros.solver;























import heros.EdgeFunction;







import heros.FlowFunction;





import heros.FlowFunction;







import heros.FlowFunctions;





import heros.FlowFunctions;







import heros.IFDSTabulationProblem;





import heros.IFDSTabulationProblem;



...@@ -60,7 +61,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -60,7 +61,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 private SingleDirectionSolver otherSolver;





 private SingleDirectionSolver otherSolver;







 private Set<N> leakedSources = new HashSet<N>();





 private Set<N> leakedSources = new HashSet<N>();







 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =





 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =







 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();





 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();









 private boolean inProcessExit = false;





















 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {





 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {







 super(ifdsProblem);





 super(ifdsProblem);



...@@ -70,16 +72,37 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -70,16 +72,37 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 @Override





 @Override







 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {





 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {







 N sourceStmt = edge.factAtTarget().getSourceStmt();





 N sourceStmt = edge.factAtTarget().getSourceStmt();









 leakedSources.add(sourceStmt);







 if(otherSolver.hasLeaked(sourceStmt)) {





 if(otherSolver.hasLeaked(sourceStmt)) {







 otherSolver.unpausePathEdgesForSource(sourceStmt);





 otherSolver.unpausePathEdgesForSource(sourceStmt);









 inProcessExit = true;







 super.processExit(edge);





 super.processExit(edge);









 inProcessExit = false;







 } else {





 } else {







 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);





 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);







 if(pausedEdges==null) pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();





 if(pausedEdges==null) {









 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();









 pausedPathEdges.put(sourceStmt,pausedEdges);









 } 







 pausedEdges.add(edge);





 pausedEdges.add(edge);









 System.err.println("PAUSE "+debugName+": "+edge);







 } 





 } 







 }





 }







 





 









 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal,









 EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite) {









 if(inProcessExit) {









 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";









 









 //attach target statement as new "source" statement to track









 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(),relatedCallSite);









 









 super.propagate(sourceVal, target, targetVal, f, relatedCallSite);









 } else { 









 super.propagate(sourceVal, target, targetVal, f, relatedCallSite);









 }









 }









 







 private boolean hasLeaked(N sourceStmt) {





 private boolean hasLeaked(N sourceStmt) {







 return leakedSources.contains(sourceStmt);





 return leakedSources.contains(sourceStmt);







 }





 }



...@@ -88,6 +111,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -88,6 +111,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);





 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);







 if(pausedEdges!=null) {





 if(pausedEdges!=null) {







 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {





 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {









 System.err.println("UNPAUSE "+debugName+": "+pausedEdge);







 super.processExit(pausedEdge);





 super.processExit(pausedEdge);







 }





 }







 }





 }



......















src/heros/solver/IDESolver.java








View file @ b8e2c3df








...@@ -198,12 +198,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -198,12 +198,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






	 * Schedules the processing of initial seeds, initiating the analysis.





	 * Schedules the processing of initial seeds, initiating the analysis.







	 * Clients should only call this methods if performing synchronization on





	 * Clients should only call this methods if performing synchronization on







	 * their own. Normally, {@link #solve()} should be called instead.





	 * their own. Normally, {@link #solve()} should be called instead.







   */





	 */







 protected void submitInitialSeeds() {





 protected void submitInitialSeeds() {







 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {





 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {







 N startPoint = seed.getKey();





 N startPoint = seed.getKey();







 for(D val: seed.getValue()) {





 for(D val: seed.getValue()) {







 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v());





 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v(), null);







 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));





 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));







 }





 }







 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());





 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());



...@@ -301,7 +301,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -301,7 +301,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //for each result node of the call-flow function





 //for each result node of the call-flow function







 for(D d3: res) {





 for(D d3: res) {







 //create initial self-loop





 //create initial self-loop







 propagate(d3, sP, d3, EdgeIdentity.<V>v()); //line 15





 propagate(d3, sP, d3, EdgeIdentity.<V>v(), n); //line 15







 





 







 //register the fact that <sp,d3> has an incoming edge from <n,d2>





 //register the fact that <sp,d3> has an incoming edge from <n,d2>







 Set<Cell<N, D, EdgeFunction<V>>> endSumm;





 Set<Cell<N, D, EdgeFunction<V>>> endSumm;



...@@ -333,7 +333,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -333,7 +333,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);







 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 





 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 







 propagate(d1, retSiteN, d5, f.composeWith(fPrime));





 propagate(d1, retSiteN, d5, f.composeWith(fPrime), n);







 }





 }







 }





 }







 }





 }



...@@ -347,7 +347,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -347,7 +347,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {





 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {







 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);





 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);







 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));





 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n);







 }





 }







 }





 }







 }





 }



...@@ -408,7 +408,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -408,7 +408,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> f3 = valAndFunc.getValue();





 EdgeFunction<V> f3 = valAndFunc.getValue();







 if(!f3.equalTo(allTop)) {





 if(!f3.equalTo(allTop)) {







 D d3 = valAndFunc.getKey();





 D d3 = valAndFunc.getKey();







 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));





 propagate(d3, retSiteC, d5, f3.composeWith(fPrime), c);







 }





 }







 }





 }







 }





 }



...@@ -435,7 +435,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -435,7 +435,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 Set<D> targets = retFunction.computeTargets(d2);





 Set<D> targets = retFunction.computeTargets(d2);







 for(D d5: targets) {





 for(D d5: targets) {







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 propagate(zeroValue, retSiteC, d5, f.composeWith(f5));





 propagate(zeroValue, retSiteC, d5, f.composeWith(f5), c);







 }





 }







 }





 }







 }





 }



...@@ -467,12 +467,22 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -467,12 +467,22 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 Set<D> res = flowFunction.computeTargets(d2);





 Set<D> res = flowFunction.computeTargets(d2);







 for (D d3 : res) {





 for (D d3 : res) {







 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));





 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));







 propagate(d1, m, d3, fprime); 





 propagate(d1, m, d3, fprime, null); 







 }





 }







 }





 }







 }





 }







 





 







 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f) {





 /**









	 * Propagates the flow further down the exploded super graph, merging any edge function that might









	 * already have been computed for targetVal at target. 









	 * @param sourceVal the source value of the propagated summary edge









	 * @param target the target statement









	 * @param targetVal the target value at the target statement









	 * @param f the new edge function computed from (s0,sourceVal) to (target,targetVal) 









	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise









	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 









	 */









 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f, /* deliberately exposed to clients */ N relatedCallSite) {







 EdgeFunction<V> jumpFnE;





 EdgeFunction<V> jumpFnE;







 EdgeFunction<V> fPrime;





 EdgeFunction<V> fPrime;







 boolean newFunction;





 boolean newFunction;



...@@ -697,7 +707,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -697,7 +707,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 protected CountingThreadPoolExecutor getExecutor() {





 protected CountingThreadPoolExecutor getExecutor() {







 return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());





 return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());







 }





 }













 







 /**





 /**







	 * Returns a String used to identify the output of this solver in debug mode.





	 * Returns a String used to identify the output of this solver in debug mode.







	 * Subclasses can overwrite this string to distinguish the output from different solvers.





	 * Subclasses can overwrite this string to distinguish the output from different solvers.



......

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
b8e2c3df


authored
Jul 06, 2013
by


Eric Bodden



Browse files



Commit
b8e2c3df


authored
Jul 06, 2013
by


Eric Bodden

b8e2c3dfauthoredbyEric Bodden

changed signature of "propagate" to include original call site for return and call flows


modified bidi solver to changed attached source statement on return





parent
eec2141c
















parent
eec2141c





parent












Changes
2
2


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/solver/BiDiIFDSSolver.java








View file @ b8e2c3df








...@@ -10,6 +10,7 @@
...@@ -10,6 +10,7 @@






 ******************************************************************************/





 ******************************************************************************/







package heros.solver;





package heros.solver;























import heros.EdgeFunction;







import heros.FlowFunction;





import heros.FlowFunction;







import heros.FlowFunctions;





import heros.FlowFunctions;







import heros.IFDSTabulationProblem;





import heros.IFDSTabulationProblem;



...@@ -60,7 +61,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -60,7 +61,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 private SingleDirectionSolver otherSolver;





 private SingleDirectionSolver otherSolver;







 private Set<N> leakedSources = new HashSet<N>();





 private Set<N> leakedSources = new HashSet<N>();







 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =





 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =







 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();





 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();









 private boolean inProcessExit = false;





















 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {





 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {







 super(ifdsProblem);





 super(ifdsProblem);



...@@ -70,16 +72,37 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -70,16 +72,37 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 @Override





 @Override







 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {





 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {







 N sourceStmt = edge.factAtTarget().getSourceStmt();





 N sourceStmt = edge.factAtTarget().getSourceStmt();









 leakedSources.add(sourceStmt);







 if(otherSolver.hasLeaked(sourceStmt)) {





 if(otherSolver.hasLeaked(sourceStmt)) {







 otherSolver.unpausePathEdgesForSource(sourceStmt);





 otherSolver.unpausePathEdgesForSource(sourceStmt);









 inProcessExit = true;







 super.processExit(edge);





 super.processExit(edge);









 inProcessExit = false;







 } else {





 } else {







 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);





 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);







 if(pausedEdges==null) pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();





 if(pausedEdges==null) {









 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();









 pausedPathEdges.put(sourceStmt,pausedEdges);









 } 







 pausedEdges.add(edge);





 pausedEdges.add(edge);









 System.err.println("PAUSE "+debugName+": "+edge);







 } 





 } 







 }





 }







 





 









 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal,









 EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite) {









 if(inProcessExit) {









 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";









 









 //attach target statement as new "source" statement to track









 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(),relatedCallSite);









 









 super.propagate(sourceVal, target, targetVal, f, relatedCallSite);









 } else { 









 super.propagate(sourceVal, target, targetVal, f, relatedCallSite);









 }









 }









 







 private boolean hasLeaked(N sourceStmt) {





 private boolean hasLeaked(N sourceStmt) {







 return leakedSources.contains(sourceStmt);





 return leakedSources.contains(sourceStmt);







 }





 }



...@@ -88,6 +111,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -88,6 +111,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);





 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);







 if(pausedEdges!=null) {





 if(pausedEdges!=null) {







 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {





 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {









 System.err.println("UNPAUSE "+debugName+": "+pausedEdge);







 super.processExit(pausedEdge);





 super.processExit(pausedEdge);







 }





 }







 }





 }



......















src/heros/solver/IDESolver.java








View file @ b8e2c3df








...@@ -198,12 +198,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -198,12 +198,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






	 * Schedules the processing of initial seeds, initiating the analysis.





	 * Schedules the processing of initial seeds, initiating the analysis.







	 * Clients should only call this methods if performing synchronization on





	 * Clients should only call this methods if performing synchronization on







	 * their own. Normally, {@link #solve()} should be called instead.





	 * their own. Normally, {@link #solve()} should be called instead.







   */





	 */







 protected void submitInitialSeeds() {





 protected void submitInitialSeeds() {







 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {





 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {







 N startPoint = seed.getKey();





 N startPoint = seed.getKey();







 for(D val: seed.getValue()) {





 for(D val: seed.getValue()) {







 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v());





 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v(), null);







 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));





 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));







 }





 }







 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());





 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());



...@@ -301,7 +301,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -301,7 +301,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //for each result node of the call-flow function





 //for each result node of the call-flow function







 for(D d3: res) {





 for(D d3: res) {







 //create initial self-loop





 //create initial self-loop







 propagate(d3, sP, d3, EdgeIdentity.<V>v()); //line 15





 propagate(d3, sP, d3, EdgeIdentity.<V>v(), n); //line 15







 





 







 //register the fact that <sp,d3> has an incoming edge from <n,d2>





 //register the fact that <sp,d3> has an incoming edge from <n,d2>







 Set<Cell<N, D, EdgeFunction<V>>> endSumm;





 Set<Cell<N, D, EdgeFunction<V>>> endSumm;



...@@ -333,7 +333,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -333,7 +333,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);







 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 





 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 







 propagate(d1, retSiteN, d5, f.composeWith(fPrime));





 propagate(d1, retSiteN, d5, f.composeWith(fPrime), n);







 }





 }







 }





 }







 }





 }



...@@ -347,7 +347,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -347,7 +347,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {





 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {







 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);





 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);







 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));





 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n);







 }





 }







 }





 }







 }





 }



...@@ -408,7 +408,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -408,7 +408,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> f3 = valAndFunc.getValue();





 EdgeFunction<V> f3 = valAndFunc.getValue();







 if(!f3.equalTo(allTop)) {





 if(!f3.equalTo(allTop)) {







 D d3 = valAndFunc.getKey();





 D d3 = valAndFunc.getKey();







 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));





 propagate(d3, retSiteC, d5, f3.composeWith(fPrime), c);







 }





 }







 }





 }







 }





 }



...@@ -435,7 +435,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -435,7 +435,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 Set<D> targets = retFunction.computeTargets(d2);





 Set<D> targets = retFunction.computeTargets(d2);







 for(D d5: targets) {





 for(D d5: targets) {







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 propagate(zeroValue, retSiteC, d5, f.composeWith(f5));





 propagate(zeroValue, retSiteC, d5, f.composeWith(f5), c);







 }





 }







 }





 }







 }





 }



...@@ -467,12 +467,22 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -467,12 +467,22 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 Set<D> res = flowFunction.computeTargets(d2);





 Set<D> res = flowFunction.computeTargets(d2);







 for (D d3 : res) {





 for (D d3 : res) {







 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));





 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));







 propagate(d1, m, d3, fprime); 





 propagate(d1, m, d3, fprime, null); 







 }





 }







 }





 }







 }





 }







 





 







 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f) {





 /**









	 * Propagates the flow further down the exploded super graph, merging any edge function that might









	 * already have been computed for targetVal at target. 









	 * @param sourceVal the source value of the propagated summary edge









	 * @param target the target statement









	 * @param targetVal the target value at the target statement









	 * @param f the new edge function computed from (s0,sourceVal) to (target,targetVal) 









	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise









	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 









	 */









 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f, /* deliberately exposed to clients */ N relatedCallSite) {







 EdgeFunction<V> jumpFnE;





 EdgeFunction<V> jumpFnE;







 EdgeFunction<V> fPrime;





 EdgeFunction<V> fPrime;







 boolean newFunction;





 boolean newFunction;



...@@ -697,7 +707,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -697,7 +707,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 protected CountingThreadPoolExecutor getExecutor() {





 protected CountingThreadPoolExecutor getExecutor() {







 return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());





 return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());







 }





 }













 







 /**





 /**







	 * Returns a String used to identify the output of this solver in debug mode.





	 * Returns a String used to identify the output of this solver in debug mode.







	 * Subclasses can overwrite this string to distinguish the output from different solvers.





	 * Subclasses can overwrite this string to distinguish the output from different solvers.



......















src/heros/solver/BiDiIFDSSolver.java








View file @ b8e2c3df








...@@ -10,6 +10,7 @@
...@@ -10,6 +10,7 @@






 ******************************************************************************/





 ******************************************************************************/







package heros.solver;





package heros.solver;























import heros.EdgeFunction;







import heros.FlowFunction;





import heros.FlowFunction;







import heros.FlowFunctions;





import heros.FlowFunctions;







import heros.IFDSTabulationProblem;





import heros.IFDSTabulationProblem;



...@@ -60,7 +61,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -60,7 +61,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 private SingleDirectionSolver otherSolver;





 private SingleDirectionSolver otherSolver;







 private Set<N> leakedSources = new HashSet<N>();





 private Set<N> leakedSources = new HashSet<N>();







 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =





 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =







 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();





 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();









 private boolean inProcessExit = false;





















 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {





 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {







 super(ifdsProblem);





 super(ifdsProblem);



...@@ -70,16 +72,37 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -70,16 +72,37 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 @Override





 @Override







 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {





 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {







 N sourceStmt = edge.factAtTarget().getSourceStmt();





 N sourceStmt = edge.factAtTarget().getSourceStmt();









 leakedSources.add(sourceStmt);







 if(otherSolver.hasLeaked(sourceStmt)) {





 if(otherSolver.hasLeaked(sourceStmt)) {







 otherSolver.unpausePathEdgesForSource(sourceStmt);





 otherSolver.unpausePathEdgesForSource(sourceStmt);









 inProcessExit = true;







 super.processExit(edge);





 super.processExit(edge);









 inProcessExit = false;







 } else {





 } else {







 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);





 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);







 if(pausedEdges==null) pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();





 if(pausedEdges==null) {









 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();









 pausedPathEdges.put(sourceStmt,pausedEdges);









 } 







 pausedEdges.add(edge);





 pausedEdges.add(edge);









 System.err.println("PAUSE "+debugName+": "+edge);







 } 





 } 







 }





 }







 





 









 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal,









 EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite) {









 if(inProcessExit) {









 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";









 









 //attach target statement as new "source" statement to track









 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(),relatedCallSite);









 









 super.propagate(sourceVal, target, targetVal, f, relatedCallSite);









 } else { 









 super.propagate(sourceVal, target, targetVal, f, relatedCallSite);









 }









 }









 







 private boolean hasLeaked(N sourceStmt) {





 private boolean hasLeaked(N sourceStmt) {







 return leakedSources.contains(sourceStmt);





 return leakedSources.contains(sourceStmt);







 }





 }



...@@ -88,6 +111,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -88,6 +111,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);





 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);







 if(pausedEdges!=null) {





 if(pausedEdges!=null) {







 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {





 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {









 System.err.println("UNPAUSE "+debugName+": "+pausedEdge);







 super.processExit(pausedEdge);





 super.processExit(pausedEdge);







 }





 }







 }





 }



......













src/heros/solver/BiDiIFDSSolver.java








View file @ b8e2c3df








src/heros/solver/BiDiIFDSSolver.java










View file @ b8e2c3df


b8e2c3df





...@@ -10,6 +10,7 @@
...@@ -10,6 +10,7 @@






 ******************************************************************************/





 ******************************************************************************/







package heros.solver;





package heros.solver;























import heros.EdgeFunction;







import heros.FlowFunction;





import heros.FlowFunction;







import heros.FlowFunctions;





import heros.FlowFunctions;







import heros.IFDSTabulationProblem;





import heros.IFDSTabulationProblem;



...@@ -60,7 +61,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -60,7 +61,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 private SingleDirectionSolver otherSolver;





 private SingleDirectionSolver otherSolver;







 private Set<N> leakedSources = new HashSet<N>();





 private Set<N> leakedSources = new HashSet<N>();







 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =





 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =







 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();





 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();









 private boolean inProcessExit = false;





















 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {





 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {







 super(ifdsProblem);





 super(ifdsProblem);



...@@ -70,16 +72,37 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -70,16 +72,37 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 @Override





 @Override







 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {





 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {







 N sourceStmt = edge.factAtTarget().getSourceStmt();





 N sourceStmt = edge.factAtTarget().getSourceStmt();









 leakedSources.add(sourceStmt);







 if(otherSolver.hasLeaked(sourceStmt)) {





 if(otherSolver.hasLeaked(sourceStmt)) {







 otherSolver.unpausePathEdgesForSource(sourceStmt);





 otherSolver.unpausePathEdgesForSource(sourceStmt);









 inProcessExit = true;







 super.processExit(edge);





 super.processExit(edge);









 inProcessExit = false;







 } else {





 } else {







 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);





 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);







 if(pausedEdges==null) pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();





 if(pausedEdges==null) {









 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();









 pausedPathEdges.put(sourceStmt,pausedEdges);









 } 







 pausedEdges.add(edge);





 pausedEdges.add(edge);









 System.err.println("PAUSE "+debugName+": "+edge);







 } 





 } 







 }





 }







 





 









 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal,









 EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite) {









 if(inProcessExit) {









 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";









 









 //attach target statement as new "source" statement to track









 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(),relatedCallSite);









 









 super.propagate(sourceVal, target, targetVal, f, relatedCallSite);









 } else { 









 super.propagate(sourceVal, target, targetVal, f, relatedCallSite);









 }









 }









 







 private boolean hasLeaked(N sourceStmt) {





 private boolean hasLeaked(N sourceStmt) {







 return leakedSources.contains(sourceStmt);





 return leakedSources.contains(sourceStmt);







 }





 }



...@@ -88,6 +111,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -88,6 +111,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);





 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);







 if(pausedEdges!=null) {





 if(pausedEdges!=null) {







 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {





 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {









 System.err.println("UNPAUSE "+debugName+": "+pausedEdge);







 super.processExit(pausedEdge);





 super.processExit(pausedEdge);







 }





 }







 }





 }



......









...@@ -10,6 +10,7 @@
...@@ -10,6 +10,7 @@






 ******************************************************************************/





 ******************************************************************************/







package heros.solver;





package heros.solver;























import heros.EdgeFunction;







import heros.FlowFunction;





import heros.FlowFunction;







import heros.FlowFunctions;





import heros.FlowFunctions;







import heros.IFDSTabulationProblem;





import heros.IFDSTabulationProblem;



...@@ -60,7 +61,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -60,7 +61,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 private SingleDirectionSolver otherSolver;





 private SingleDirectionSolver otherSolver;







 private Set<N> leakedSources = new HashSet<N>();





 private Set<N> leakedSources = new HashSet<N>();







 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =





 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =







 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();





 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();









 private boolean inProcessExit = false;





















 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {





 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {







 super(ifdsProblem);





 super(ifdsProblem);



...@@ -70,16 +72,37 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -70,16 +72,37 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 @Override





 @Override







 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {





 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {







 N sourceStmt = edge.factAtTarget().getSourceStmt();





 N sourceStmt = edge.factAtTarget().getSourceStmt();









 leakedSources.add(sourceStmt);







 if(otherSolver.hasLeaked(sourceStmt)) {





 if(otherSolver.hasLeaked(sourceStmt)) {







 otherSolver.unpausePathEdgesForSource(sourceStmt);





 otherSolver.unpausePathEdgesForSource(sourceStmt);









 inProcessExit = true;







 super.processExit(edge);





 super.processExit(edge);









 inProcessExit = false;







 } else {





 } else {







 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);





 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);







 if(pausedEdges==null) pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();





 if(pausedEdges==null) {









 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();









 pausedPathEdges.put(sourceStmt,pausedEdges);









 } 







 pausedEdges.add(edge);





 pausedEdges.add(edge);









 System.err.println("PAUSE "+debugName+": "+edge);







 } 





 } 







 }





 }







 





 









 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal,









 EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite) {









 if(inProcessExit) {









 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";









 









 //attach target statement as new "source" statement to track









 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(),relatedCallSite);









 









 super.propagate(sourceVal, target, targetVal, f, relatedCallSite);









 } else { 









 super.propagate(sourceVal, target, targetVal, f, relatedCallSite);









 }









 }









 







 private boolean hasLeaked(N sourceStmt) {





 private boolean hasLeaked(N sourceStmt) {







 return leakedSources.contains(sourceStmt);





 return leakedSources.contains(sourceStmt);







 }





 }



...@@ -88,6 +111,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -88,6 +111,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);





 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);







 if(pausedEdges!=null) {





 if(pausedEdges!=null) {







 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {





 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {









 System.err.println("UNPAUSE "+debugName+": "+pausedEdge);







 super.processExit(pausedEdge);





 super.processExit(pausedEdge);







 }





 }







 }





 }



......






...@@ -10,6 +10,7 @@
...@@ -10,6 +10,7 @@






 ******************************************************************************/





 ******************************************************************************/







package heros.solver;





package heros.solver;























import heros.EdgeFunction;







import heros.FlowFunction;





import heros.FlowFunction;







import heros.FlowFunctions;





import heros.FlowFunctions;







import heros.IFDSTabulationProblem;





import heros.IFDSTabulationProblem;



...@@ -60,7 +61,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -60,7 +61,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 private SingleDirectionSolver otherSolver;





 private SingleDirectionSolver otherSolver;







 private Set<N> leakedSources = new HashSet<N>();





 private Set<N> leakedSources = new HashSet<N>();







 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =





 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =







 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();





 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();









 private boolean inProcessExit = false;





















 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {





 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {







 super(ifdsProblem);





 super(ifdsProblem);



...@@ -70,16 +72,37 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -70,16 +72,37 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 @Override





 @Override







 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {





 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {







 N sourceStmt = edge.factAtTarget().getSourceStmt();





 N sourceStmt = edge.factAtTarget().getSourceStmt();









 leakedSources.add(sourceStmt);







 if(otherSolver.hasLeaked(sourceStmt)) {





 if(otherSolver.hasLeaked(sourceStmt)) {







 otherSolver.unpausePathEdgesForSource(sourceStmt);





 otherSolver.unpausePathEdgesForSource(sourceStmt);









 inProcessExit = true;







 super.processExit(edge);





 super.processExit(edge);









 inProcessExit = false;







 } else {





 } else {







 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);





 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);







 if(pausedEdges==null) pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();





 if(pausedEdges==null) {









 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();









 pausedPathEdges.put(sourceStmt,pausedEdges);









 } 







 pausedEdges.add(edge);





 pausedEdges.add(edge);









 System.err.println("PAUSE "+debugName+": "+edge);







 } 





 } 







 }





 }







 





 









 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal,









 EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite) {









 if(inProcessExit) {









 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";









 









 //attach target statement as new "source" statement to track









 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(),relatedCallSite);









 









 super.propagate(sourceVal, target, targetVal, f, relatedCallSite);









 } else { 









 super.propagate(sourceVal, target, targetVal, f, relatedCallSite);









 }









 }









 







 private boolean hasLeaked(N sourceStmt) {





 private boolean hasLeaked(N sourceStmt) {







 return leakedSources.contains(sourceStmt);





 return leakedSources.contains(sourceStmt);







 }





 }



...@@ -88,6 +111,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -88,6 +111,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);





 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);







 if(pausedEdges!=null) {





 if(pausedEdges!=null) {







 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {





 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {









 System.err.println("UNPAUSE "+debugName+": "+pausedEdge);







 super.processExit(pausedEdge);





 super.processExit(pausedEdge);







 }





 }







 }





 }



......


 ******************************************************************************/ ******************************************************************************/ ******************************************************************************/ ******************************************************************************/package heros.solver;packageheros.solver;package heros.solver;packageheros.solver;import heros.EdgeFunction;importheros.EdgeFunction;import heros.FlowFunction;importheros.FlowFunction;import heros.FlowFunction;importheros.FlowFunction;import heros.FlowFunctions;importheros.FlowFunctions;import heros.FlowFunctions;importheros.FlowFunctions;import heros.IFDSTabulationProblem;importheros.IFDSTabulationProblem;import heros.IFDSTabulationProblem;importheros.IFDSTabulationProblem; private SingleDirectionSolver otherSolver;privateSingleDirectionSolverotherSolver; private SingleDirectionSolver otherSolver;privateSingleDirectionSolverotherSolver; private Set<N> leakedSources = new HashSet<N>();privateSet<N>leakedSources=newHashSet<N>(); private Set<N> leakedSources = new HashSet<N>();privateSet<N>leakedSources=newHashSet<N>(); private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =privateMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>pausedPathEdges= private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =privateMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>pausedPathEdges= new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();newHashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>(); new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();newHashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>(); private boolean inProcessExit = false;privatebooleaninProcessExit=false; private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {privateSingleDirectionSolver(IFDSTabulationProblem<N,AbstractionWithSourceStmt<N,D>,M,I>ifdsProblem,StringdebugName){ private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {privateSingleDirectionSolver(IFDSTabulationProblem<N,AbstractionWithSourceStmt<N,D>,M,I>ifdsProblem,StringdebugName){ super(ifdsProblem);super(ifdsProblem); super(ifdsProblem);super(ifdsProblem); @Override@Override @Override@Override protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {protectedvoidprocessExit(PathEdge<N,AbstractionWithSourceStmt<N,D>>edge){ protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {protectedvoidprocessExit(PathEdge<N,AbstractionWithSourceStmt<N,D>>edge){ N sourceStmt = edge.factAtTarget().getSourceStmt();NsourceStmt=edge.factAtTarget().getSourceStmt(); N sourceStmt = edge.factAtTarget().getSourceStmt();NsourceStmt=edge.factAtTarget().getSourceStmt(); leakedSources.add(sourceStmt);leakedSources.add(sourceStmt); if(otherSolver.hasLeaked(sourceStmt)) {if(otherSolver.hasLeaked(sourceStmt)){ if(otherSolver.hasLeaked(sourceStmt)) {if(otherSolver.hasLeaked(sourceStmt)){ otherSolver.unpausePathEdgesForSource(sourceStmt);otherSolver.unpausePathEdgesForSource(sourceStmt); otherSolver.unpausePathEdgesForSource(sourceStmt);otherSolver.unpausePathEdgesForSource(sourceStmt); inProcessExit = true;inProcessExit=true; super.processExit(edge);super.processExit(edge); super.processExit(edge);super.processExit(edge); inProcessExit = false;inProcessExit=false; } else {}else{ } else {}else{ Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>pausedEdges=pausedPathEdges.get(sourceStmt); Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>pausedEdges=pausedPathEdges.get(sourceStmt); if(pausedEdges==null) pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();if(pausedEdges==null)pausedEdges=newHashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>(); if(pausedEdges==null) {if(pausedEdges==null){ pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();pausedEdges=newHashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>(); pausedPathEdges.put(sourceStmt,pausedEdges);pausedPathEdges.put(sourceStmt,pausedEdges); } } pausedEdges.add(edge);pausedEdges.add(edge); pausedEdges.add(edge);pausedEdges.add(edge); System.err.println("PAUSE "+debugName+": "+edge);System.err.println("PAUSE "+debugName+": "+edge); } } } } }} }}   protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal,protectedvoidpropagate(AbstractionWithSourceStmt<N,D>sourceVal,Ntarget,AbstractionWithSourceStmt<N,D>targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite) {EdgeFunction<IFDSSolver.BinaryDomain>f,NrelatedCallSite){ if(inProcessExit) {if(inProcessExit){ assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";assertsourceVal.getSourceStmt()==null:"source value should have no statement attached";  //attach target statement as new "source" statement to track//attach target statement as new "source" statement to track targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(),relatedCallSite);targetVal=newAbstractionWithSourceStmt<N,D>(targetVal.getAbstraction(),relatedCallSite);  super.propagate(sourceVal, target, targetVal, f, relatedCallSite);super.propagate(sourceVal,target,targetVal,f,relatedCallSite); } else { }else{ super.propagate(sourceVal, target, targetVal, f, relatedCallSite);super.propagate(sourceVal,target,targetVal,f,relatedCallSite); }} }}  private boolean hasLeaked(N sourceStmt) {privatebooleanhasLeaked(NsourceStmt){ private boolean hasLeaked(N sourceStmt) {privatebooleanhasLeaked(NsourceStmt){ return leakedSources.contains(sourceStmt);returnleakedSources.contains(sourceStmt); return leakedSources.contains(sourceStmt);returnleakedSources.contains(sourceStmt); }} }} Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>pausedEdges=pausedPathEdges.get(sourceStmt); Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>pausedEdges=pausedPathEdges.get(sourceStmt); if(pausedEdges!=null) {if(pausedEdges!=null){ if(pausedEdges!=null) {if(pausedEdges!=null){ for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {for(PathEdge<N,AbstractionWithSourceStmt<N,D>>pausedEdge:pausedEdges){ for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {for(PathEdge<N,AbstractionWithSourceStmt<N,D>>pausedEdge:pausedEdges){ System.err.println("UNPAUSE "+debugName+": "+pausedEdge);System.err.println("UNPAUSE "+debugName+": "+pausedEdge); super.processExit(pausedEdge);super.processExit(pausedEdge); super.processExit(pausedEdge);super.processExit(pausedEdge); }} }} }} }}








src/heros/solver/IDESolver.java








View file @ b8e2c3df








...@@ -198,12 +198,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -198,12 +198,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






	 * Schedules the processing of initial seeds, initiating the analysis.





	 * Schedules the processing of initial seeds, initiating the analysis.







	 * Clients should only call this methods if performing synchronization on





	 * Clients should only call this methods if performing synchronization on







	 * their own. Normally, {@link #solve()} should be called instead.





	 * their own. Normally, {@link #solve()} should be called instead.







   */





	 */







 protected void submitInitialSeeds() {





 protected void submitInitialSeeds() {







 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {





 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {







 N startPoint = seed.getKey();





 N startPoint = seed.getKey();







 for(D val: seed.getValue()) {





 for(D val: seed.getValue()) {







 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v());





 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v(), null);







 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));





 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));







 }





 }







 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());





 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());



...@@ -301,7 +301,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -301,7 +301,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //for each result node of the call-flow function





 //for each result node of the call-flow function







 for(D d3: res) {





 for(D d3: res) {







 //create initial self-loop





 //create initial self-loop







 propagate(d3, sP, d3, EdgeIdentity.<V>v()); //line 15





 propagate(d3, sP, d3, EdgeIdentity.<V>v(), n); //line 15







 





 







 //register the fact that <sp,d3> has an incoming edge from <n,d2>





 //register the fact that <sp,d3> has an incoming edge from <n,d2>







 Set<Cell<N, D, EdgeFunction<V>>> endSumm;





 Set<Cell<N, D, EdgeFunction<V>>> endSumm;



...@@ -333,7 +333,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -333,7 +333,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);







 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 





 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 







 propagate(d1, retSiteN, d5, f.composeWith(fPrime));





 propagate(d1, retSiteN, d5, f.composeWith(fPrime), n);







 }





 }







 }





 }







 }





 }



...@@ -347,7 +347,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -347,7 +347,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {





 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {







 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);





 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);







 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));





 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n);







 }





 }







 }





 }







 }





 }



...@@ -408,7 +408,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -408,7 +408,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> f3 = valAndFunc.getValue();





 EdgeFunction<V> f3 = valAndFunc.getValue();







 if(!f3.equalTo(allTop)) {





 if(!f3.equalTo(allTop)) {







 D d3 = valAndFunc.getKey();





 D d3 = valAndFunc.getKey();







 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));





 propagate(d3, retSiteC, d5, f3.composeWith(fPrime), c);







 }





 }







 }





 }







 }





 }



...@@ -435,7 +435,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -435,7 +435,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 Set<D> targets = retFunction.computeTargets(d2);





 Set<D> targets = retFunction.computeTargets(d2);







 for(D d5: targets) {





 for(D d5: targets) {







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 propagate(zeroValue, retSiteC, d5, f.composeWith(f5));





 propagate(zeroValue, retSiteC, d5, f.composeWith(f5), c);







 }





 }







 }





 }







 }





 }



...@@ -467,12 +467,22 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -467,12 +467,22 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 Set<D> res = flowFunction.computeTargets(d2);





 Set<D> res = flowFunction.computeTargets(d2);







 for (D d3 : res) {





 for (D d3 : res) {







 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));





 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));







 propagate(d1, m, d3, fprime); 





 propagate(d1, m, d3, fprime, null); 







 }





 }







 }





 }







 }





 }







 





 







 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f) {





 /**









	 * Propagates the flow further down the exploded super graph, merging any edge function that might









	 * already have been computed for targetVal at target. 









	 * @param sourceVal the source value of the propagated summary edge









	 * @param target the target statement









	 * @param targetVal the target value at the target statement









	 * @param f the new edge function computed from (s0,sourceVal) to (target,targetVal) 









	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise









	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 









	 */









 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f, /* deliberately exposed to clients */ N relatedCallSite) {







 EdgeFunction<V> jumpFnE;





 EdgeFunction<V> jumpFnE;







 EdgeFunction<V> fPrime;





 EdgeFunction<V> fPrime;







 boolean newFunction;





 boolean newFunction;



...@@ -697,7 +707,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -697,7 +707,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 protected CountingThreadPoolExecutor getExecutor() {





 protected CountingThreadPoolExecutor getExecutor() {







 return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());





 return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());







 }





 }













 







 /**





 /**







	 * Returns a String used to identify the output of this solver in debug mode.





	 * Returns a String used to identify the output of this solver in debug mode.







	 * Subclasses can overwrite this string to distinguish the output from different solvers.





	 * Subclasses can overwrite this string to distinguish the output from different solvers.



......













src/heros/solver/IDESolver.java








View file @ b8e2c3df








src/heros/solver/IDESolver.java










View file @ b8e2c3df


b8e2c3df





...@@ -198,12 +198,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -198,12 +198,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






	 * Schedules the processing of initial seeds, initiating the analysis.





	 * Schedules the processing of initial seeds, initiating the analysis.







	 * Clients should only call this methods if performing synchronization on





	 * Clients should only call this methods if performing synchronization on







	 * their own. Normally, {@link #solve()} should be called instead.





	 * their own. Normally, {@link #solve()} should be called instead.







   */





	 */







 protected void submitInitialSeeds() {





 protected void submitInitialSeeds() {







 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {





 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {







 N startPoint = seed.getKey();





 N startPoint = seed.getKey();







 for(D val: seed.getValue()) {





 for(D val: seed.getValue()) {







 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v());





 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v(), null);







 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));





 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));







 }





 }







 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());





 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());



...@@ -301,7 +301,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -301,7 +301,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //for each result node of the call-flow function





 //for each result node of the call-flow function







 for(D d3: res) {





 for(D d3: res) {







 //create initial self-loop





 //create initial self-loop







 propagate(d3, sP, d3, EdgeIdentity.<V>v()); //line 15





 propagate(d3, sP, d3, EdgeIdentity.<V>v(), n); //line 15







 





 







 //register the fact that <sp,d3> has an incoming edge from <n,d2>





 //register the fact that <sp,d3> has an incoming edge from <n,d2>







 Set<Cell<N, D, EdgeFunction<V>>> endSumm;





 Set<Cell<N, D, EdgeFunction<V>>> endSumm;



...@@ -333,7 +333,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -333,7 +333,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);







 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 





 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 







 propagate(d1, retSiteN, d5, f.composeWith(fPrime));





 propagate(d1, retSiteN, d5, f.composeWith(fPrime), n);







 }





 }







 }





 }







 }





 }



...@@ -347,7 +347,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -347,7 +347,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {





 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {







 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);





 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);







 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));





 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n);







 }





 }







 }





 }







 }





 }



...@@ -408,7 +408,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -408,7 +408,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> f3 = valAndFunc.getValue();





 EdgeFunction<V> f3 = valAndFunc.getValue();







 if(!f3.equalTo(allTop)) {





 if(!f3.equalTo(allTop)) {







 D d3 = valAndFunc.getKey();





 D d3 = valAndFunc.getKey();







 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));





 propagate(d3, retSiteC, d5, f3.composeWith(fPrime), c);







 }





 }







 }





 }







 }





 }



...@@ -435,7 +435,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -435,7 +435,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 Set<D> targets = retFunction.computeTargets(d2);





 Set<D> targets = retFunction.computeTargets(d2);







 for(D d5: targets) {





 for(D d5: targets) {







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 propagate(zeroValue, retSiteC, d5, f.composeWith(f5));





 propagate(zeroValue, retSiteC, d5, f.composeWith(f5), c);







 }





 }







 }





 }







 }





 }



...@@ -467,12 +467,22 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -467,12 +467,22 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 Set<D> res = flowFunction.computeTargets(d2);





 Set<D> res = flowFunction.computeTargets(d2);







 for (D d3 : res) {





 for (D d3 : res) {







 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));





 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));







 propagate(d1, m, d3, fprime); 





 propagate(d1, m, d3, fprime, null); 







 }





 }







 }





 }







 }





 }







 





 







 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f) {





 /**









	 * Propagates the flow further down the exploded super graph, merging any edge function that might









	 * already have been computed for targetVal at target. 









	 * @param sourceVal the source value of the propagated summary edge









	 * @param target the target statement









	 * @param targetVal the target value at the target statement









	 * @param f the new edge function computed from (s0,sourceVal) to (target,targetVal) 









	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise









	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 









	 */









 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f, /* deliberately exposed to clients */ N relatedCallSite) {







 EdgeFunction<V> jumpFnE;





 EdgeFunction<V> jumpFnE;







 EdgeFunction<V> fPrime;





 EdgeFunction<V> fPrime;







 boolean newFunction;





 boolean newFunction;



...@@ -697,7 +707,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -697,7 +707,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 protected CountingThreadPoolExecutor getExecutor() {





 protected CountingThreadPoolExecutor getExecutor() {







 return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());





 return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());







 }





 }













 







 /**





 /**







	 * Returns a String used to identify the output of this solver in debug mode.





	 * Returns a String used to identify the output of this solver in debug mode.







	 * Subclasses can overwrite this string to distinguish the output from different solvers.





	 * Subclasses can overwrite this string to distinguish the output from different solvers.



......









...@@ -198,12 +198,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -198,12 +198,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






	 * Schedules the processing of initial seeds, initiating the analysis.





	 * Schedules the processing of initial seeds, initiating the analysis.







	 * Clients should only call this methods if performing synchronization on





	 * Clients should only call this methods if performing synchronization on







	 * their own. Normally, {@link #solve()} should be called instead.





	 * their own. Normally, {@link #solve()} should be called instead.







   */





	 */







 protected void submitInitialSeeds() {





 protected void submitInitialSeeds() {







 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {





 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {







 N startPoint = seed.getKey();





 N startPoint = seed.getKey();







 for(D val: seed.getValue()) {





 for(D val: seed.getValue()) {







 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v());





 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v(), null);







 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));





 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));







 }





 }







 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());





 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());



...@@ -301,7 +301,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -301,7 +301,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //for each result node of the call-flow function





 //for each result node of the call-flow function







 for(D d3: res) {





 for(D d3: res) {







 //create initial self-loop





 //create initial self-loop







 propagate(d3, sP, d3, EdgeIdentity.<V>v()); //line 15





 propagate(d3, sP, d3, EdgeIdentity.<V>v(), n); //line 15







 





 







 //register the fact that <sp,d3> has an incoming edge from <n,d2>





 //register the fact that <sp,d3> has an incoming edge from <n,d2>







 Set<Cell<N, D, EdgeFunction<V>>> endSumm;





 Set<Cell<N, D, EdgeFunction<V>>> endSumm;



...@@ -333,7 +333,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -333,7 +333,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);







 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 





 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 







 propagate(d1, retSiteN, d5, f.composeWith(fPrime));





 propagate(d1, retSiteN, d5, f.composeWith(fPrime), n);







 }





 }







 }





 }







 }





 }



...@@ -347,7 +347,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -347,7 +347,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {





 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {







 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);





 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);







 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));





 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n);







 }





 }







 }





 }







 }





 }



...@@ -408,7 +408,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -408,7 +408,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> f3 = valAndFunc.getValue();





 EdgeFunction<V> f3 = valAndFunc.getValue();







 if(!f3.equalTo(allTop)) {





 if(!f3.equalTo(allTop)) {







 D d3 = valAndFunc.getKey();





 D d3 = valAndFunc.getKey();







 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));





 propagate(d3, retSiteC, d5, f3.composeWith(fPrime), c);







 }





 }







 }





 }







 }





 }



...@@ -435,7 +435,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -435,7 +435,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 Set<D> targets = retFunction.computeTargets(d2);





 Set<D> targets = retFunction.computeTargets(d2);







 for(D d5: targets) {





 for(D d5: targets) {







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 propagate(zeroValue, retSiteC, d5, f.composeWith(f5));





 propagate(zeroValue, retSiteC, d5, f.composeWith(f5), c);







 }





 }







 }





 }







 }





 }



...@@ -467,12 +467,22 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -467,12 +467,22 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 Set<D> res = flowFunction.computeTargets(d2);





 Set<D> res = flowFunction.computeTargets(d2);







 for (D d3 : res) {





 for (D d3 : res) {







 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));





 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));







 propagate(d1, m, d3, fprime); 





 propagate(d1, m, d3, fprime, null); 







 }





 }







 }





 }







 }





 }







 





 







 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f) {





 /**









	 * Propagates the flow further down the exploded super graph, merging any edge function that might









	 * already have been computed for targetVal at target. 









	 * @param sourceVal the source value of the propagated summary edge









	 * @param target the target statement









	 * @param targetVal the target value at the target statement









	 * @param f the new edge function computed from (s0,sourceVal) to (target,targetVal) 









	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise









	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 









	 */









 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f, /* deliberately exposed to clients */ N relatedCallSite) {







 EdgeFunction<V> jumpFnE;





 EdgeFunction<V> jumpFnE;







 EdgeFunction<V> fPrime;





 EdgeFunction<V> fPrime;







 boolean newFunction;





 boolean newFunction;



...@@ -697,7 +707,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -697,7 +707,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 protected CountingThreadPoolExecutor getExecutor() {





 protected CountingThreadPoolExecutor getExecutor() {







 return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());





 return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());







 }





 }













 







 /**





 /**







	 * Returns a String used to identify the output of this solver in debug mode.





	 * Returns a String used to identify the output of this solver in debug mode.







	 * Subclasses can overwrite this string to distinguish the output from different solvers.





	 * Subclasses can overwrite this string to distinguish the output from different solvers.



......






...@@ -198,12 +198,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -198,12 +198,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






	 * Schedules the processing of initial seeds, initiating the analysis.





	 * Schedules the processing of initial seeds, initiating the analysis.







	 * Clients should only call this methods if performing synchronization on





	 * Clients should only call this methods if performing synchronization on







	 * their own. Normally, {@link #solve()} should be called instead.





	 * their own. Normally, {@link #solve()} should be called instead.







   */





	 */







 protected void submitInitialSeeds() {





 protected void submitInitialSeeds() {







 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {





 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {







 N startPoint = seed.getKey();





 N startPoint = seed.getKey();







 for(D val: seed.getValue()) {





 for(D val: seed.getValue()) {







 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v());





 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v(), null);







 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));





 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));







 }





 }







 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());





 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());



...@@ -301,7 +301,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -301,7 +301,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //for each result node of the call-flow function





 //for each result node of the call-flow function







 for(D d3: res) {





 for(D d3: res) {







 //create initial self-loop





 //create initial self-loop







 propagate(d3, sP, d3, EdgeIdentity.<V>v()); //line 15





 propagate(d3, sP, d3, EdgeIdentity.<V>v(), n); //line 15







 





 







 //register the fact that <sp,d3> has an incoming edge from <n,d2>





 //register the fact that <sp,d3> has an incoming edge from <n,d2>







 Set<Cell<N, D, EdgeFunction<V>>> endSumm;





 Set<Cell<N, D, EdgeFunction<V>>> endSumm;



...@@ -333,7 +333,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -333,7 +333,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);







 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 





 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 







 propagate(d1, retSiteN, d5, f.composeWith(fPrime));





 propagate(d1, retSiteN, d5, f.composeWith(fPrime), n);







 }





 }







 }





 }







 }





 }



...@@ -347,7 +347,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -347,7 +347,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 flowFunctionConstructionCount++;





 flowFunctionConstructionCount++;







 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {





 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {







 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);





 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);







 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));





 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n);







 }





 }







 }





 }







 }





 }



...@@ -408,7 +408,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -408,7 +408,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> f3 = valAndFunc.getValue();





 EdgeFunction<V> f3 = valAndFunc.getValue();







 if(!f3.equalTo(allTop)) {





 if(!f3.equalTo(allTop)) {







 D d3 = valAndFunc.getKey();





 D d3 = valAndFunc.getKey();







 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));





 propagate(d3, retSiteC, d5, f3.composeWith(fPrime), c);







 }





 }







 }





 }







 }





 }



...@@ -435,7 +435,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -435,7 +435,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 Set<D> targets = retFunction.computeTargets(d2);





 Set<D> targets = retFunction.computeTargets(d2);







 for(D d5: targets) {





 for(D d5: targets) {







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 propagate(zeroValue, retSiteC, d5, f.composeWith(f5));





 propagate(zeroValue, retSiteC, d5, f.composeWith(f5), c);







 }





 }







 }





 }







 }





 }



...@@ -467,12 +467,22 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -467,12 +467,22 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 Set<D> res = flowFunction.computeTargets(d2);





 Set<D> res = flowFunction.computeTargets(d2);







 for (D d3 : res) {





 for (D d3 : res) {







 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));





 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));







 propagate(d1, m, d3, fprime); 





 propagate(d1, m, d3, fprime, null); 







 }





 }







 }





 }







 }





 }







 





 







 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f) {





 /**









	 * Propagates the flow further down the exploded super graph, merging any edge function that might









	 * already have been computed for targetVal at target. 









	 * @param sourceVal the source value of the propagated summary edge









	 * @param target the target statement









	 * @param targetVal the target value at the target statement









	 * @param f the new edge function computed from (s0,sourceVal) to (target,targetVal) 









	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise









	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 









	 */









 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f, /* deliberately exposed to clients */ N relatedCallSite) {







 EdgeFunction<V> jumpFnE;





 EdgeFunction<V> jumpFnE;







 EdgeFunction<V> fPrime;





 EdgeFunction<V> fPrime;







 boolean newFunction;





 boolean newFunction;



...@@ -697,7 +707,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -697,7 +707,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 protected CountingThreadPoolExecutor getExecutor() {





 protected CountingThreadPoolExecutor getExecutor() {







 return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());





 return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());







 }





 }













 







 /**





 /**







	 * Returns a String used to identify the output of this solver in debug mode.





	 * Returns a String used to identify the output of this solver in debug mode.







	 * Subclasses can overwrite this string to distinguish the output from different solvers.





	 * Subclasses can overwrite this string to distinguish the output from different solvers.



......


	 * Schedules the processing of initial seeds, initiating the analysis.	 * Schedules the processing of initial seeds, initiating the analysis.	 * Schedules the processing of initial seeds, initiating the analysis.	 * Schedules the processing of initial seeds, initiating the analysis.	 * Clients should only call this methods if performing synchronization on	 * Clients should only call this methods if performing synchronization on	 * Clients should only call this methods if performing synchronization on	 * Clients should only call this methods if performing synchronization on	 * their own. Normally, {@link #solve()} should be called instead.	 * their own. Normally, {@link #solve()} should be called instead.	 * their own. Normally, {@link #solve()} should be called instead.	 * their own. Normally, {@link #solve()} should be called instead.   */   */ 	 */	 */ protected void submitInitialSeeds() {protectedvoidsubmitInitialSeeds(){ protected void submitInitialSeeds() {protectedvoidsubmitInitialSeeds(){ for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {for(Entry<N,Set<D>>seed:initialSeeds.entrySet()){ for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {for(Entry<N,Set<D>>seed:initialSeeds.entrySet()){ N startPoint = seed.getKey();NstartPoint=seed.getKey(); N startPoint = seed.getKey();NstartPoint=seed.getKey(); for(D val: seed.getValue()) {for(Dval:seed.getValue()){ for(D val: seed.getValue()) {for(Dval:seed.getValue()){ propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v());propagate(zeroValue,startPoint,val,EdgeIdentity.<V>v()); propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v(), null);propagate(zeroValue,startPoint,val,EdgeIdentity.<V>v(),, nullnull); scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));scheduleEdgeProcessing(newPathEdge<N,D>(zeroValue,startPoint,val)); scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));scheduleEdgeProcessing(newPathEdge<N,D>(zeroValue,startPoint,val)); }} }} jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());jumpFn.addFunction(zeroValue,startPoint,zeroValue,EdgeIdentity.<V>v()); jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());jumpFn.addFunction(zeroValue,startPoint,zeroValue,EdgeIdentity.<V>v()); //for each result node of the call-flow function//for each result node of the call-flow function //for each result node of the call-flow function//for each result node of the call-flow function for(D d3: res) {for(Dd3:res){ for(D d3: res) {for(Dd3:res){ //create initial self-loop//create initial self-loop //create initial self-loop//create initial self-loop propagate(d3, sP, d3, EdgeIdentity.<V>v()); //line 15propagate(d3,sP,d3,EdgeIdentity.<V>v());//line 15 propagate(d3, sP, d3, EdgeIdentity.<V>v(), n); //line 15propagate(d3,sP,d3,EdgeIdentity.<V>v(),, nn);//line 15   //register the fact that <sp,d3> has an incoming edge from <n,d2>//register the fact that <sp,d3> has an incoming edge from <n,d2> //register the fact that <sp,d3> has an incoming edge from <n,d2>//register the fact that <sp,d3> has an incoming edge from <n,d2> Set<Cell<N, D, EdgeFunction<V>>> endSumm;Set<Cell<N,D,EdgeFunction<V>>>endSumm; Set<Cell<N, D, EdgeFunction<V>>> endSumm;Set<Cell<N,D,EdgeFunction<V>>>endSumm; EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);EdgeFunction<V>f4=edgeFunctions.getCallEdgeFunction(n,d2,sCalledProcN,d3); EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);EdgeFunction<V>f4=edgeFunctions.getCallEdgeFunction(n,d2,sCalledProcN,d3); EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);EdgeFunction<V>f5=edgeFunctions.getReturnEdgeFunction(n,sCalledProcN,eP,d4,retSiteN,d5); EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);EdgeFunction<V>f5=edgeFunctions.getReturnEdgeFunction(n,sCalledProcN,eP,d4,retSiteN,d5); EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); EdgeFunction<V>fPrime=f4.composeWith(fCalleeSummary).composeWith(f5); EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); EdgeFunction<V>fPrime=f4.composeWith(fCalleeSummary).composeWith(f5); propagate(d1, retSiteN, d5, f.composeWith(fPrime));propagate(d1,retSiteN,d5,f.composeWith(fPrime)); propagate(d1, retSiteN, d5, f.composeWith(fPrime), n);propagate(d1,retSiteN,d5,f.composeWith(fPrime),, nn); }} }} }} }} }} }} flowFunctionConstructionCount++;flowFunctionConstructionCount++; flowFunctionConstructionCount++;flowFunctionConstructionCount++; for(D d3: callToReturnFlowFunction.computeTargets(d2)) {for(Dd3:callToReturnFlowFunction.computeTargets(d2)){ for(D d3: callToReturnFlowFunction.computeTargets(d2)) {for(Dd3:callToReturnFlowFunction.computeTargets(d2)){ EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);EdgeFunction<V>edgeFnE=edgeFunctions.getCallToReturnEdgeFunction(n,d2,returnSiteN,d3); EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);EdgeFunction<V>edgeFnE=edgeFunctions.getCallToReturnEdgeFunction(n,d2,returnSiteN,d3); propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));propagate(d1,returnSiteN,d3,f.composeWith(edgeFnE)); propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n);propagate(d1,returnSiteN,d3,f.composeWith(edgeFnE),, nn); }} }} }} }} }} }} EdgeFunction<V> f3 = valAndFunc.getValue();EdgeFunction<V>f3=valAndFunc.getValue(); EdgeFunction<V> f3 = valAndFunc.getValue();EdgeFunction<V>f3=valAndFunc.getValue(); if(!f3.equalTo(allTop)) {if(!f3.equalTo(allTop)){ if(!f3.equalTo(allTop)) {if(!f3.equalTo(allTop)){ D d3 = valAndFunc.getKey();Dd3=valAndFunc.getKey(); D d3 = valAndFunc.getKey();Dd3=valAndFunc.getKey(); propagate(d3, retSiteC, d5, f3.composeWith(fPrime));propagate(d3,retSiteC,d5,f3.composeWith(fPrime)); propagate(d3, retSiteC, d5, f3.composeWith(fPrime), c);propagate(d3,retSiteC,d5,f3.composeWith(fPrime),, cc); }} }} }} }} }} }} Set<D> targets = retFunction.computeTargets(d2);Set<D>targets=retFunction.computeTargets(d2); Set<D> targets = retFunction.computeTargets(d2);Set<D>targets=retFunction.computeTargets(d2); for(D d5: targets) {for(Dd5:targets){ for(D d5: targets) {for(Dd5:targets){ EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);EdgeFunction<V>f5=edgeFunctions.getReturnEdgeFunction(c,icfg.getMethodOf(n),n,d2,retSiteC,d5); EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);EdgeFunction<V>f5=edgeFunctions.getReturnEdgeFunction(c,icfg.getMethodOf(n),n,d2,retSiteC,d5); propagate(zeroValue, retSiteC, d5, f.composeWith(f5));propagate(zeroValue,retSiteC,d5,f.composeWith(f5)); propagate(zeroValue, retSiteC, d5, f.composeWith(f5), c);propagate(zeroValue,retSiteC,d5,f.composeWith(f5),, cc); }} }} }} }} }} }} Set<D> res = flowFunction.computeTargets(d2);Set<D>res=flowFunction.computeTargets(d2); Set<D> res = flowFunction.computeTargets(d2);Set<D>res=flowFunction.computeTargets(d2); for (D d3 : res) {for(Dd3:res){ for (D d3 : res) {for(Dd3:res){ EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));EdgeFunction<V>fprime=f.composeWith(edgeFunctions.getNormalEdgeFunction(n,d2,m,d3)); EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));EdgeFunction<V>fprime=f.composeWith(edgeFunctions.getNormalEdgeFunction(n,d2,m,d3)); propagate(d1, m, d3, fprime); propagate(d1,m,d3,fprime); propagate(d1, m, d3, fprime, null); propagate(d1,m,d3,fprime,, nullnull); }} }} }} }} }} }}   protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f) {protectedvoidpropagate(DsourceVal,Ntarget,DtargetVal,EdgeFunction<V>f){ /**/**	 * Propagates the flow further down the exploded super graph, merging any edge function that might	 * Propagates the flow further down the exploded super graph, merging any edge function that might	 * already have been computed for targetVal at target. 	 * already have been computed for targetVal at target. 	 * @param sourceVal the source value of the propagated summary edge	 * @param sourceVal the source value of the propagated summary edge	 * @param target the target statement	 * @param target the target statement	 * @param targetVal the target value at the target statement	 * @param targetVal the target value at the target statement	 * @param f the new edge function computed from (s0,sourceVal) to (target,targetVal) 	 * @param f the new edge function computed from (s0,sourceVal) to (target,targetVal) 	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 	 */	 */ protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f, /* deliberately exposed to clients */ N relatedCallSite) {protectedvoidpropagate(DsourceVal,Ntarget,DtargetVal,EdgeFunction<V>f,/* deliberately exposed to clients */NrelatedCallSite){ EdgeFunction<V> jumpFnE;EdgeFunction<V>jumpFnE; EdgeFunction<V> jumpFnE;EdgeFunction<V>jumpFnE; EdgeFunction<V> fPrime;EdgeFunction<V>fPrime; EdgeFunction<V> fPrime;EdgeFunction<V>fPrime; boolean newFunction;booleannewFunction; boolean newFunction;booleannewFunction; protected CountingThreadPoolExecutor getExecutor() {protectedCountingThreadPoolExecutorgetExecutor(){ protected CountingThreadPoolExecutor getExecutor() {protectedCountingThreadPoolExecutorgetExecutor(){ return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());returnnewCountingThreadPoolExecutor(1,this.numThreads,30,TimeUnit.SECONDS,newLinkedBlockingQueue<Runnable>()); return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());returnnewCountingThreadPoolExecutor(1,this.numThreads,30,TimeUnit.SECONDS,newLinkedBlockingQueue<Runnable>()); }} }}  /**/** /**/**	 * Returns a String used to identify the output of this solver in debug mode.	 * Returns a String used to identify the output of this solver in debug mode.	 * Returns a String used to identify the output of this solver in debug mode.	 * Returns a String used to identify the output of this solver in debug mode.	 * Subclasses can overwrite this string to distinguish the output from different solvers.	 * Subclasses can overwrite this string to distinguish the output from different solvers.	 * Subclasses can overwrite this string to distinguish the output from different solvers.	 * Subclasses can overwrite this string to distinguish the output from different solvers.









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






