



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros

Commits


















a839d748a388a972cfcff4a0c13bfea19136d4f9


Switch branch/tag









heros
















06 Jul, 2013
1 commit









updated initialSeeds to include source statement

·
a839d748


Eric Bodden authored Jul 06, 2013






a839d748










05 Jul, 2013
4 commits









Merge branch 'develop' into forks/java-fw-bw

·
baaa3dc5


Eric Bodden authored Jul 05, 2013






baaa3dc5













changing initialization of analysis such that initialSeeds not is a mapping...

·
275f5783





Eric Bodden authored Jul 05, 2013

changing initialization of analysis such that initialSeeds not is a mapping from units to initial data-flow facts at these units

this is a breaking change, but the class DefaultSeeds can be used to easily convert a set of units (old format) into a default map that should work for current clients

the change was implemented to permit subtypes of IFDSTabulationProblem to overwrite facts at seeds in a convenient way





275f5783













more advances on BiDi Solver

·
0a55e6f0


Eric Bodden authored Jul 05, 2013






0a55e6f0













initial draft of BiDi Solver

·
3e910732


Eric Bodden authored Jul 05, 2013






3e910732










04 Jul, 2013
3 commits









Merge commit '987a7a4c' into develop

·
b6e78a8e


Eric Bodden authored Jul 04, 2013






b6e78a8e













bugfix: when propagating inside out into a caller that was not yet processed...

·
17895853





Eric Bodden authored Jul 04, 2013

bugfix: when propagating inside out into a caller that was not yet processed we need to create a summary edge starting at ZERO, not at the callee's flow fact!





17895853













memory improvement: do not store implicit TOP values

·
987a7a4c


Steven Arzt authored Jul 04, 2013






987a7a4c










16 Jun, 2013
1 commit









fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return...

·
0ec8bfc3





Steven Arzt authored Jun 16, 2013

fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return edge gets processed for **all callers** of the callee from which we return in cases where we haven't seen the respective call edge.

This however leads to spurious edges if we have multiple call sites for the same callee. Let us assume call site A calls foo() with jump function a and call site B calls it with b. If we now return from foo with something derived from a, we will not find an incoming edge for call site B. FollowReturnsPastSeeds thus made us propagate the value to both call sites which makes us loose context sensitivity.

Fix as follows: Only follow past seeds if we have seen no call edge into the callee at all. We can then assume that we're really running beyond the seeds of the analysis and have no other chance than propagating to all call sites.





0ec8bfc3










05 Jun, 2013
1 commit









for unbalanced problems on return statements we now use the return flow...

·
4ae358b3





Eric Bodden authored Jun 05, 2013

for unbalanced problems on return statements we now use the return flow function, not the normal flow function
the caller is then simply "null"
added some comments about this





4ae358b3










29 May, 2013
2 commits









adding synchronization on "val" due to possible race conditions (thanks to...

·
525c45fb





Eric Bodden authored May 29, 2013

adding synchronization on "val" due to possible race conditions (thanks to Damien Octeau for reporting this!)





525c45fb













Merge branch 'feature/performance-fix-for-return-edges' into develop

·
752b7288


Eric Bodden authored May 29, 2013






752b7288










14 May, 2013
3 commits









made a structure definition "protected"

·
a81e8b33


Steven Arzt authored May 14, 2013






a81e8b33













Merge branch 'develop' of https://github.com/Sable/heros into develop

·
640b0e9b


Steven Arzt authored May 14, 2013






640b0e9b













interproceduralCFG() in DefaultIFDSTabulationProblem.java can now be...

·
8ca05fa0





Steven Arzt authored May 14, 2013

interproceduralCFG() in DefaultIFDSTabulationProblem.java can now be overwritten for implementations that know that they always use a special type of icfg and this want to provide a shortcut for obtaining it





8ca05fa0










25 Apr, 2013
1 commit









performance fix for return edges; if there were N start points (e.g. in a...

·
6a91d71e





Eric Bodden authored Apr 25, 2013

performance fix for return edges; if there were N start points (e.g. in a backwards analysis) and we did an unbalanced analysis, then the return-foe function was computed N times; now this is done only once





6a91d71e










15 Mar, 2013
1 commit









Bugfix: ProcessCall computed the new jump functions for a method call at a...

·
d564bec7





Steven Arzt authored Mar 15, 2013

Bugfix: ProcessCall computed the new jump functions for a method call at a specific call and return site pair, but then propagated the results to all return sites of this call. This lead to spurious results if there were multiple return sites for a call that had non-equal fact sets on their return edges.





d564bec7










11 Mar, 2013
1 commit









Replaced the duplicate call to the icfg by an access to cached structure we have anyway

·
5c0a40f6


Steven Arzt authored Mar 11, 2013






5c0a40f6










28 Feb, 2013
2 commits









adding find bugs

·
1e7f765a


Eric Bodden authored Feb 28, 2013






1e7f765a













removed stupig bug found by findbugs !!!

·
72286798


Eric Bodden authored Feb 28, 2013






72286798










25 Feb, 2013
3 commits









removing preds-operation again

·
5997f050


Eric Bodden authored Feb 25, 2013






5997f050













Merge pull request #2 from StevenArzt/develop

·
a81af76a





Eric Bodden authored Feb 25, 2013


Added a getPredsOf() to the cfg ( similarly to the existing getSuccsOf()...





a81af76a













Added a getPredsOf() to the cfg ( similarly to the existing getSuccsOf() )

·
54050935


Steven Arzt authored Feb 25, 2013






54050935










20 Feb, 2013
1 commit









bugfix: were propagating incorrect values at return-flow edges

·
0645e494


Eric Bodden authored Feb 20, 2013






0645e494










18 Feb, 2013
3 commits









Update README.md

·
321e183e


Eric Bodden authored Feb 18, 2013






321e183e













adding logo

·
657c8aee


Eric Bodden authored Feb 18, 2013






657c8aee













adding logo

·
a3a9fbe6


Eric Bodden authored Feb 18, 2013






a3a9fbe6










14 Feb, 2013
1 commit









bug fix for value computation (need to treat initialSeeds just as method start nodes)

·
227b9337


Eric Bodden authored Feb 14, 2013






227b9337










02 Feb, 2013
1 commit









added notes on persisting summary information

·
f66df606


Eric Bodden authored Feb 02, 2013






f66df606










30 Jan, 2013
4 commits









extracted method awaitCompletionComputeValuesAndShutdown()

·
446d709e


Eric Bodden authored Jan 30, 2013






446d709e













made scheduleEdgeProcessing protected such that it can be called from the outside

·
abe1050c


Eric Bodden authored Jan 30, 2013






abe1050c













Revert "removed superfluous call to scheduleEdgeProcessing"

·
2c7e04fd





Eric Bodden authored Jan 30, 2013


This reverts commit 1747df0c.

The change was wrong; scheduleEdgeProcessing does need to be called explicitly at initialization time!





2c7e04fd













ignoring bin directory

·
9ea337d1


Eric Bodden authored Jan 30, 2013






9ea337d1










29 Jan, 2013
6 commits









fixing shutdown sequence

·
e0e51e68


Eric Bodden authored Jan 29, 2013






e0e51e68













making executor exchangeable

·
18c72755


Eric Bodden authored Jan 29, 2013






18c72755













make computation of values optional

·
357e129e


Eric Bodden authored Jan 29, 2013






357e129e













number of threads is now configured through SolverConfiguration, a new super...

·
1e7167fe





Eric Bodden authored Jan 29, 2013

number of threads is now configured through SolverConfiguration, a new super interface of IFDSTabulationProblem





1e7167fe













indentation

·
aa7b4340


Eric Bodden authored Jan 29, 2013






aa7b4340













removed superfluous call to scheduleEdgeProcessing

·
1747df0c


Eric Bodden authored Jan 29, 2013






1747df0c










28 Jan, 2013
1 commit









refactoring: autoAddZero is now set in IFDSTabulationProblem

·
4b103811


Eric Bodden authored Jan 28, 2013






4b103811



















H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros

Commits


















a839d748a388a972cfcff4a0c13bfea19136d4f9


Switch branch/tag









heros
















06 Jul, 2013
1 commit









updated initialSeeds to include source statement

·
a839d748


Eric Bodden authored Jul 06, 2013






a839d748










05 Jul, 2013
4 commits









Merge branch 'develop' into forks/java-fw-bw

·
baaa3dc5


Eric Bodden authored Jul 05, 2013






baaa3dc5













changing initialization of analysis such that initialSeeds not is a mapping...

·
275f5783





Eric Bodden authored Jul 05, 2013

changing initialization of analysis such that initialSeeds not is a mapping from units to initial data-flow facts at these units

this is a breaking change, but the class DefaultSeeds can be used to easily convert a set of units (old format) into a default map that should work for current clients

the change was implemented to permit subtypes of IFDSTabulationProblem to overwrite facts at seeds in a convenient way





275f5783













more advances on BiDi Solver

·
0a55e6f0


Eric Bodden authored Jul 05, 2013






0a55e6f0













initial draft of BiDi Solver

·
3e910732


Eric Bodden authored Jul 05, 2013






3e910732










04 Jul, 2013
3 commits









Merge commit '987a7a4c' into develop

·
b6e78a8e


Eric Bodden authored Jul 04, 2013






b6e78a8e













bugfix: when propagating inside out into a caller that was not yet processed...

·
17895853





Eric Bodden authored Jul 04, 2013

bugfix: when propagating inside out into a caller that was not yet processed we need to create a summary edge starting at ZERO, not at the callee's flow fact!





17895853













memory improvement: do not store implicit TOP values

·
987a7a4c


Steven Arzt authored Jul 04, 2013






987a7a4c










16 Jun, 2013
1 commit









fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return...

·
0ec8bfc3





Steven Arzt authored Jun 16, 2013

fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return edge gets processed for **all callers** of the callee from which we return in cases where we haven't seen the respective call edge.

This however leads to spurious edges if we have multiple call sites for the same callee. Let us assume call site A calls foo() with jump function a and call site B calls it with b. If we now return from foo with something derived from a, we will not find an incoming edge for call site B. FollowReturnsPastSeeds thus made us propagate the value to both call sites which makes us loose context sensitivity.

Fix as follows: Only follow past seeds if we have seen no call edge into the callee at all. We can then assume that we're really running beyond the seeds of the analysis and have no other chance than propagating to all call sites.





0ec8bfc3










05 Jun, 2013
1 commit









for unbalanced problems on return statements we now use the return flow...

·
4ae358b3





Eric Bodden authored Jun 05, 2013

for unbalanced problems on return statements we now use the return flow function, not the normal flow function
the caller is then simply "null"
added some comments about this





4ae358b3










29 May, 2013
2 commits









adding synchronization on "val" due to possible race conditions (thanks to...

·
525c45fb





Eric Bodden authored May 29, 2013

adding synchronization on "val" due to possible race conditions (thanks to Damien Octeau for reporting this!)





525c45fb













Merge branch 'feature/performance-fix-for-return-edges' into develop

·
752b7288


Eric Bodden authored May 29, 2013






752b7288










14 May, 2013
3 commits









made a structure definition "protected"

·
a81e8b33


Steven Arzt authored May 14, 2013






a81e8b33













Merge branch 'develop' of https://github.com/Sable/heros into develop

·
640b0e9b


Steven Arzt authored May 14, 2013






640b0e9b













interproceduralCFG() in DefaultIFDSTabulationProblem.java can now be...

·
8ca05fa0





Steven Arzt authored May 14, 2013

interproceduralCFG() in DefaultIFDSTabulationProblem.java can now be overwritten for implementations that know that they always use a special type of icfg and this want to provide a shortcut for obtaining it





8ca05fa0










25 Apr, 2013
1 commit









performance fix for return edges; if there were N start points (e.g. in a...

·
6a91d71e





Eric Bodden authored Apr 25, 2013

performance fix for return edges; if there were N start points (e.g. in a backwards analysis) and we did an unbalanced analysis, then the return-foe function was computed N times; now this is done only once





6a91d71e










15 Mar, 2013
1 commit









Bugfix: ProcessCall computed the new jump functions for a method call at a...

·
d564bec7





Steven Arzt authored Mar 15, 2013

Bugfix: ProcessCall computed the new jump functions for a method call at a specific call and return site pair, but then propagated the results to all return sites of this call. This lead to spurious results if there were multiple return sites for a call that had non-equal fact sets on their return edges.





d564bec7










11 Mar, 2013
1 commit









Replaced the duplicate call to the icfg by an access to cached structure we have anyway

·
5c0a40f6


Steven Arzt authored Mar 11, 2013






5c0a40f6










28 Feb, 2013
2 commits









adding find bugs

·
1e7f765a


Eric Bodden authored Feb 28, 2013






1e7f765a













removed stupig bug found by findbugs !!!

·
72286798


Eric Bodden authored Feb 28, 2013






72286798










25 Feb, 2013
3 commits









removing preds-operation again

·
5997f050


Eric Bodden authored Feb 25, 2013






5997f050













Merge pull request #2 from StevenArzt/develop

·
a81af76a





Eric Bodden authored Feb 25, 2013


Added a getPredsOf() to the cfg ( similarly to the existing getSuccsOf()...





a81af76a













Added a getPredsOf() to the cfg ( similarly to the existing getSuccsOf() )

·
54050935


Steven Arzt authored Feb 25, 2013






54050935










20 Feb, 2013
1 commit









bugfix: were propagating incorrect values at return-flow edges

·
0645e494


Eric Bodden authored Feb 20, 2013






0645e494










18 Feb, 2013
3 commits









Update README.md

·
321e183e


Eric Bodden authored Feb 18, 2013






321e183e













adding logo

·
657c8aee


Eric Bodden authored Feb 18, 2013






657c8aee













adding logo

·
a3a9fbe6


Eric Bodden authored Feb 18, 2013






a3a9fbe6










14 Feb, 2013
1 commit









bug fix for value computation (need to treat initialSeeds just as method start nodes)

·
227b9337


Eric Bodden authored Feb 14, 2013






227b9337










02 Feb, 2013
1 commit









added notes on persisting summary information

·
f66df606


Eric Bodden authored Feb 02, 2013






f66df606










30 Jan, 2013
4 commits









extracted method awaitCompletionComputeValuesAndShutdown()

·
446d709e


Eric Bodden authored Jan 30, 2013






446d709e













made scheduleEdgeProcessing protected such that it can be called from the outside

·
abe1050c


Eric Bodden authored Jan 30, 2013






abe1050c













Revert "removed superfluous call to scheduleEdgeProcessing"

·
2c7e04fd





Eric Bodden authored Jan 30, 2013


This reverts commit 1747df0c.

The change was wrong; scheduleEdgeProcessing does need to be called explicitly at initialization time!





2c7e04fd













ignoring bin directory

·
9ea337d1


Eric Bodden authored Jan 30, 2013






9ea337d1










29 Jan, 2013
6 commits









fixing shutdown sequence

·
e0e51e68


Eric Bodden authored Jan 29, 2013






e0e51e68













making executor exchangeable

·
18c72755


Eric Bodden authored Jan 29, 2013






18c72755













make computation of values optional

·
357e129e


Eric Bodden authored Jan 29, 2013






357e129e













number of threads is now configured through SolverConfiguration, a new super...

·
1e7167fe





Eric Bodden authored Jan 29, 2013

number of threads is now configured through SolverConfiguration, a new super interface of IFDSTabulationProblem





1e7167fe













indentation

·
aa7b4340


Eric Bodden authored Jan 29, 2013






aa7b4340













removed superfluous call to scheduleEdgeProcessing

·
1747df0c


Eric Bodden authored Jan 29, 2013






1747df0c










28 Jan, 2013
1 commit









refactoring: autoAddZero is now set in IFDSTabulationProblem

·
4b103811


Eric Bodden authored Jan 28, 2013






4b103811


















Open sidebar



Joshua Garcia heros

Commits







Open sidebar



Joshua Garcia heros

Commits




Open sidebar

Joshua Garcia heros

Commits


Joshua Garciaherosheros
Commits











a839d748a388a972cfcff4a0c13bfea19136d4f9


Switch branch/tag









heros
















06 Jul, 2013
1 commit









updated initialSeeds to include source statement

·
a839d748


Eric Bodden authored Jul 06, 2013






a839d748










05 Jul, 2013
4 commits









Merge branch 'develop' into forks/java-fw-bw

·
baaa3dc5


Eric Bodden authored Jul 05, 2013






baaa3dc5













changing initialization of analysis such that initialSeeds not is a mapping...

·
275f5783





Eric Bodden authored Jul 05, 2013

changing initialization of analysis such that initialSeeds not is a mapping from units to initial data-flow facts at these units

this is a breaking change, but the class DefaultSeeds can be used to easily convert a set of units (old format) into a default map that should work for current clients

the change was implemented to permit subtypes of IFDSTabulationProblem to overwrite facts at seeds in a convenient way





275f5783













more advances on BiDi Solver

·
0a55e6f0


Eric Bodden authored Jul 05, 2013






0a55e6f0













initial draft of BiDi Solver

·
3e910732


Eric Bodden authored Jul 05, 2013






3e910732










04 Jul, 2013
3 commits









Merge commit '987a7a4c' into develop

·
b6e78a8e


Eric Bodden authored Jul 04, 2013






b6e78a8e













bugfix: when propagating inside out into a caller that was not yet processed...

·
17895853





Eric Bodden authored Jul 04, 2013

bugfix: when propagating inside out into a caller that was not yet processed we need to create a summary edge starting at ZERO, not at the callee's flow fact!





17895853













memory improvement: do not store implicit TOP values

·
987a7a4c


Steven Arzt authored Jul 04, 2013






987a7a4c










16 Jun, 2013
1 commit









fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return...

·
0ec8bfc3





Steven Arzt authored Jun 16, 2013

fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return edge gets processed for **all callers** of the callee from which we return in cases where we haven't seen the respective call edge.

This however leads to spurious edges if we have multiple call sites for the same callee. Let us assume call site A calls foo() with jump function a and call site B calls it with b. If we now return from foo with something derived from a, we will not find an incoming edge for call site B. FollowReturnsPastSeeds thus made us propagate the value to both call sites which makes us loose context sensitivity.

Fix as follows: Only follow past seeds if we have seen no call edge into the callee at all. We can then assume that we're really running beyond the seeds of the analysis and have no other chance than propagating to all call sites.





0ec8bfc3










05 Jun, 2013
1 commit









for unbalanced problems on return statements we now use the return flow...

·
4ae358b3





Eric Bodden authored Jun 05, 2013

for unbalanced problems on return statements we now use the return flow function, not the normal flow function
the caller is then simply "null"
added some comments about this





4ae358b3










29 May, 2013
2 commits









adding synchronization on "val" due to possible race conditions (thanks to...

·
525c45fb





Eric Bodden authored May 29, 2013

adding synchronization on "val" due to possible race conditions (thanks to Damien Octeau for reporting this!)





525c45fb













Merge branch 'feature/performance-fix-for-return-edges' into develop

·
752b7288


Eric Bodden authored May 29, 2013






752b7288










14 May, 2013
3 commits









made a structure definition "protected"

·
a81e8b33


Steven Arzt authored May 14, 2013






a81e8b33













Merge branch 'develop' of https://github.com/Sable/heros into develop

·
640b0e9b


Steven Arzt authored May 14, 2013






640b0e9b













interproceduralCFG() in DefaultIFDSTabulationProblem.java can now be...

·
8ca05fa0





Steven Arzt authored May 14, 2013

interproceduralCFG() in DefaultIFDSTabulationProblem.java can now be overwritten for implementations that know that they always use a special type of icfg and this want to provide a shortcut for obtaining it





8ca05fa0










25 Apr, 2013
1 commit









performance fix for return edges; if there were N start points (e.g. in a...

·
6a91d71e





Eric Bodden authored Apr 25, 2013

performance fix for return edges; if there were N start points (e.g. in a backwards analysis) and we did an unbalanced analysis, then the return-foe function was computed N times; now this is done only once





6a91d71e










15 Mar, 2013
1 commit









Bugfix: ProcessCall computed the new jump functions for a method call at a...

·
d564bec7





Steven Arzt authored Mar 15, 2013

Bugfix: ProcessCall computed the new jump functions for a method call at a specific call and return site pair, but then propagated the results to all return sites of this call. This lead to spurious results if there were multiple return sites for a call that had non-equal fact sets on their return edges.





d564bec7










11 Mar, 2013
1 commit









Replaced the duplicate call to the icfg by an access to cached structure we have anyway

·
5c0a40f6


Steven Arzt authored Mar 11, 2013






5c0a40f6










28 Feb, 2013
2 commits









adding find bugs

·
1e7f765a


Eric Bodden authored Feb 28, 2013






1e7f765a













removed stupig bug found by findbugs !!!

·
72286798


Eric Bodden authored Feb 28, 2013






72286798










25 Feb, 2013
3 commits









removing preds-operation again

·
5997f050


Eric Bodden authored Feb 25, 2013






5997f050













Merge pull request #2 from StevenArzt/develop

·
a81af76a





Eric Bodden authored Feb 25, 2013


Added a getPredsOf() to the cfg ( similarly to the existing getSuccsOf()...





a81af76a













Added a getPredsOf() to the cfg ( similarly to the existing getSuccsOf() )

·
54050935


Steven Arzt authored Feb 25, 2013






54050935










20 Feb, 2013
1 commit









bugfix: were propagating incorrect values at return-flow edges

·
0645e494


Eric Bodden authored Feb 20, 2013






0645e494










18 Feb, 2013
3 commits









Update README.md

·
321e183e


Eric Bodden authored Feb 18, 2013






321e183e













adding logo

·
657c8aee


Eric Bodden authored Feb 18, 2013






657c8aee













adding logo

·
a3a9fbe6


Eric Bodden authored Feb 18, 2013






a3a9fbe6










14 Feb, 2013
1 commit









bug fix for value computation (need to treat initialSeeds just as method start nodes)

·
227b9337


Eric Bodden authored Feb 14, 2013






227b9337










02 Feb, 2013
1 commit









added notes on persisting summary information

·
f66df606


Eric Bodden authored Feb 02, 2013






f66df606










30 Jan, 2013
4 commits









extracted method awaitCompletionComputeValuesAndShutdown()

·
446d709e


Eric Bodden authored Jan 30, 2013






446d709e













made scheduleEdgeProcessing protected such that it can be called from the outside

·
abe1050c


Eric Bodden authored Jan 30, 2013






abe1050c













Revert "removed superfluous call to scheduleEdgeProcessing"

·
2c7e04fd





Eric Bodden authored Jan 30, 2013


This reverts commit 1747df0c.

The change was wrong; scheduleEdgeProcessing does need to be called explicitly at initialization time!





2c7e04fd













ignoring bin directory

·
9ea337d1


Eric Bodden authored Jan 30, 2013






9ea337d1










29 Jan, 2013
6 commits









fixing shutdown sequence

·
e0e51e68


Eric Bodden authored Jan 29, 2013






e0e51e68













making executor exchangeable

·
18c72755


Eric Bodden authored Jan 29, 2013






18c72755













make computation of values optional

·
357e129e


Eric Bodden authored Jan 29, 2013






357e129e













number of threads is now configured through SolverConfiguration, a new super...

·
1e7167fe





Eric Bodden authored Jan 29, 2013

number of threads is now configured through SolverConfiguration, a new super interface of IFDSTabulationProblem





1e7167fe













indentation

·
aa7b4340


Eric Bodden authored Jan 29, 2013






aa7b4340













removed superfluous call to scheduleEdgeProcessing

·
1747df0c


Eric Bodden authored Jan 29, 2013






1747df0c










28 Jan, 2013
1 commit









refactoring: autoAddZero is now set in IFDSTabulationProblem

·
4b103811


Eric Bodden authored Jan 28, 2013






4b103811






















a839d748a388a972cfcff4a0c13bfea19136d4f9


Switch branch/tag









heros
















06 Jul, 2013
1 commit









updated initialSeeds to include source statement

·
a839d748


Eric Bodden authored Jul 06, 2013






a839d748










05 Jul, 2013
4 commits









Merge branch 'develop' into forks/java-fw-bw

·
baaa3dc5


Eric Bodden authored Jul 05, 2013






baaa3dc5













changing initialization of analysis such that initialSeeds not is a mapping...

·
275f5783





Eric Bodden authored Jul 05, 2013

changing initialization of analysis such that initialSeeds not is a mapping from units to initial data-flow facts at these units

this is a breaking change, but the class DefaultSeeds can be used to easily convert a set of units (old format) into a default map that should work for current clients

the change was implemented to permit subtypes of IFDSTabulationProblem to overwrite facts at seeds in a convenient way





275f5783













more advances on BiDi Solver

·
0a55e6f0


Eric Bodden authored Jul 05, 2013






0a55e6f0













initial draft of BiDi Solver

·
3e910732


Eric Bodden authored Jul 05, 2013






3e910732










04 Jul, 2013
3 commits









Merge commit '987a7a4c' into develop

·
b6e78a8e


Eric Bodden authored Jul 04, 2013






b6e78a8e













bugfix: when propagating inside out into a caller that was not yet processed...

·
17895853





Eric Bodden authored Jul 04, 2013

bugfix: when propagating inside out into a caller that was not yet processed we need to create a summary edge starting at ZERO, not at the callee's flow fact!





17895853













memory improvement: do not store implicit TOP values

·
987a7a4c


Steven Arzt authored Jul 04, 2013






987a7a4c










16 Jun, 2013
1 commit









fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return...

·
0ec8bfc3





Steven Arzt authored Jun 16, 2013

fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return edge gets processed for **all callers** of the callee from which we return in cases where we haven't seen the respective call edge.

This however leads to spurious edges if we have multiple call sites for the same callee. Let us assume call site A calls foo() with jump function a and call site B calls it with b. If we now return from foo with something derived from a, we will not find an incoming edge for call site B. FollowReturnsPastSeeds thus made us propagate the value to both call sites which makes us loose context sensitivity.

Fix as follows: Only follow past seeds if we have seen no call edge into the callee at all. We can then assume that we're really running beyond the seeds of the analysis and have no other chance than propagating to all call sites.





0ec8bfc3










05 Jun, 2013
1 commit









for unbalanced problems on return statements we now use the return flow...

·
4ae358b3





Eric Bodden authored Jun 05, 2013

for unbalanced problems on return statements we now use the return flow function, not the normal flow function
the caller is then simply "null"
added some comments about this





4ae358b3










29 May, 2013
2 commits









adding synchronization on "val" due to possible race conditions (thanks to...

·
525c45fb





Eric Bodden authored May 29, 2013

adding synchronization on "val" due to possible race conditions (thanks to Damien Octeau for reporting this!)





525c45fb













Merge branch 'feature/performance-fix-for-return-edges' into develop

·
752b7288


Eric Bodden authored May 29, 2013






752b7288










14 May, 2013
3 commits









made a structure definition "protected"

·
a81e8b33


Steven Arzt authored May 14, 2013






a81e8b33













Merge branch 'develop' of https://github.com/Sable/heros into develop

·
640b0e9b


Steven Arzt authored May 14, 2013






640b0e9b













interproceduralCFG() in DefaultIFDSTabulationProblem.java can now be...

·
8ca05fa0





Steven Arzt authored May 14, 2013

interproceduralCFG() in DefaultIFDSTabulationProblem.java can now be overwritten for implementations that know that they always use a special type of icfg and this want to provide a shortcut for obtaining it





8ca05fa0










25 Apr, 2013
1 commit









performance fix for return edges; if there were N start points (e.g. in a...

·
6a91d71e





Eric Bodden authored Apr 25, 2013

performance fix for return edges; if there were N start points (e.g. in a backwards analysis) and we did an unbalanced analysis, then the return-foe function was computed N times; now this is done only once





6a91d71e










15 Mar, 2013
1 commit









Bugfix: ProcessCall computed the new jump functions for a method call at a...

·
d564bec7





Steven Arzt authored Mar 15, 2013

Bugfix: ProcessCall computed the new jump functions for a method call at a specific call and return site pair, but then propagated the results to all return sites of this call. This lead to spurious results if there were multiple return sites for a call that had non-equal fact sets on their return edges.





d564bec7










11 Mar, 2013
1 commit









Replaced the duplicate call to the icfg by an access to cached structure we have anyway

·
5c0a40f6


Steven Arzt authored Mar 11, 2013






5c0a40f6










28 Feb, 2013
2 commits









adding find bugs

·
1e7f765a


Eric Bodden authored Feb 28, 2013






1e7f765a













removed stupig bug found by findbugs !!!

·
72286798


Eric Bodden authored Feb 28, 2013






72286798










25 Feb, 2013
3 commits









removing preds-operation again

·
5997f050


Eric Bodden authored Feb 25, 2013






5997f050













Merge pull request #2 from StevenArzt/develop

·
a81af76a





Eric Bodden authored Feb 25, 2013


Added a getPredsOf() to the cfg ( similarly to the existing getSuccsOf()...





a81af76a













Added a getPredsOf() to the cfg ( similarly to the existing getSuccsOf() )

·
54050935


Steven Arzt authored Feb 25, 2013






54050935










20 Feb, 2013
1 commit









bugfix: were propagating incorrect values at return-flow edges

·
0645e494


Eric Bodden authored Feb 20, 2013






0645e494










18 Feb, 2013
3 commits









Update README.md

·
321e183e


Eric Bodden authored Feb 18, 2013






321e183e













adding logo

·
657c8aee


Eric Bodden authored Feb 18, 2013






657c8aee













adding logo

·
a3a9fbe6


Eric Bodden authored Feb 18, 2013






a3a9fbe6










14 Feb, 2013
1 commit









bug fix for value computation (need to treat initialSeeds just as method start nodes)

·
227b9337


Eric Bodden authored Feb 14, 2013






227b9337










02 Feb, 2013
1 commit









added notes on persisting summary information

·
f66df606


Eric Bodden authored Feb 02, 2013






f66df606










30 Jan, 2013
4 commits









extracted method awaitCompletionComputeValuesAndShutdown()

·
446d709e


Eric Bodden authored Jan 30, 2013






446d709e













made scheduleEdgeProcessing protected such that it can be called from the outside

·
abe1050c


Eric Bodden authored Jan 30, 2013






abe1050c













Revert "removed superfluous call to scheduleEdgeProcessing"

·
2c7e04fd





Eric Bodden authored Jan 30, 2013


This reverts commit 1747df0c.

The change was wrong; scheduleEdgeProcessing does need to be called explicitly at initialization time!





2c7e04fd













ignoring bin directory

·
9ea337d1


Eric Bodden authored Jan 30, 2013






9ea337d1










29 Jan, 2013
6 commits









fixing shutdown sequence

·
e0e51e68


Eric Bodden authored Jan 29, 2013






e0e51e68













making executor exchangeable

·
18c72755


Eric Bodden authored Jan 29, 2013






18c72755













make computation of values optional

·
357e129e


Eric Bodden authored Jan 29, 2013






357e129e













number of threads is now configured through SolverConfiguration, a new super...

·
1e7167fe





Eric Bodden authored Jan 29, 2013

number of threads is now configured through SolverConfiguration, a new super interface of IFDSTabulationProblem





1e7167fe













indentation

·
aa7b4340


Eric Bodden authored Jan 29, 2013






aa7b4340













removed superfluous call to scheduleEdgeProcessing

·
1747df0c


Eric Bodden authored Jan 29, 2013






1747df0c










28 Jan, 2013
1 commit









refactoring: autoAddZero is now set in IFDSTabulationProblem

·
4b103811


Eric Bodden authored Jan 28, 2013






4b103811


















a839d748a388a972cfcff4a0c13bfea19136d4f9


Switch branch/tag









heros

















a839d748a388a972cfcff4a0c13bfea19136d4f9


Switch branch/tag









heros















a839d748a388a972cfcff4a0c13bfea19136d4f9


Switch branch/tag









heros




a839d748a388a972cfcff4a0c13bfea19136d4f9


Switch branch/tag








a839d748a388a972cfcff4a0c13bfea19136d4f9


Switch branch/tag





a839d748a388a972cfcff4a0c13bfea19136d4f9

Switch branch/tag





Switch branch/tag



Switch branch/tagSwitch branch/tagheros













06 Jul, 2013
1 commit









updated initialSeeds to include source statement

·
a839d748


Eric Bodden authored Jul 06, 2013






a839d748










05 Jul, 2013
4 commits









Merge branch 'develop' into forks/java-fw-bw

·
baaa3dc5


Eric Bodden authored Jul 05, 2013






baaa3dc5













changing initialization of analysis such that initialSeeds not is a mapping...

·
275f5783





Eric Bodden authored Jul 05, 2013

changing initialization of analysis such that initialSeeds not is a mapping from units to initial data-flow facts at these units

this is a breaking change, but the class DefaultSeeds can be used to easily convert a set of units (old format) into a default map that should work for current clients

the change was implemented to permit subtypes of IFDSTabulationProblem to overwrite facts at seeds in a convenient way





275f5783













more advances on BiDi Solver

·
0a55e6f0


Eric Bodden authored Jul 05, 2013






0a55e6f0













initial draft of BiDi Solver

·
3e910732


Eric Bodden authored Jul 05, 2013






3e910732










04 Jul, 2013
3 commits









Merge commit '987a7a4c' into develop

·
b6e78a8e


Eric Bodden authored Jul 04, 2013






b6e78a8e













bugfix: when propagating inside out into a caller that was not yet processed...

·
17895853





Eric Bodden authored Jul 04, 2013

bugfix: when propagating inside out into a caller that was not yet processed we need to create a summary edge starting at ZERO, not at the callee's flow fact!





17895853













memory improvement: do not store implicit TOP values

·
987a7a4c


Steven Arzt authored Jul 04, 2013






987a7a4c










16 Jun, 2013
1 commit









fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return...

·
0ec8bfc3





Steven Arzt authored Jun 16, 2013

fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return edge gets processed for **all callers** of the callee from which we return in cases where we haven't seen the respective call edge.

This however leads to spurious edges if we have multiple call sites for the same callee. Let us assume call site A calls foo() with jump function a and call site B calls it with b. If we now return from foo with something derived from a, we will not find an incoming edge for call site B. FollowReturnsPastSeeds thus made us propagate the value to both call sites which makes us loose context sensitivity.

Fix as follows: Only follow past seeds if we have seen no call edge into the callee at all. We can then assume that we're really running beyond the seeds of the analysis and have no other chance than propagating to all call sites.





0ec8bfc3










05 Jun, 2013
1 commit









for unbalanced problems on return statements we now use the return flow...

·
4ae358b3





Eric Bodden authored Jun 05, 2013

for unbalanced problems on return statements we now use the return flow function, not the normal flow function
the caller is then simply "null"
added some comments about this





4ae358b3










29 May, 2013
2 commits









adding synchronization on "val" due to possible race conditions (thanks to...

·
525c45fb





Eric Bodden authored May 29, 2013

adding synchronization on "val" due to possible race conditions (thanks to Damien Octeau for reporting this!)





525c45fb













Merge branch 'feature/performance-fix-for-return-edges' into develop

·
752b7288


Eric Bodden authored May 29, 2013






752b7288










14 May, 2013
3 commits









made a structure definition "protected"

·
a81e8b33


Steven Arzt authored May 14, 2013






a81e8b33













Merge branch 'develop' of https://github.com/Sable/heros into develop

·
640b0e9b


Steven Arzt authored May 14, 2013






640b0e9b













interproceduralCFG() in DefaultIFDSTabulationProblem.java can now be...

·
8ca05fa0





Steven Arzt authored May 14, 2013

interproceduralCFG() in DefaultIFDSTabulationProblem.java can now be overwritten for implementations that know that they always use a special type of icfg and this want to provide a shortcut for obtaining it





8ca05fa0










25 Apr, 2013
1 commit









performance fix for return edges; if there were N start points (e.g. in a...

·
6a91d71e





Eric Bodden authored Apr 25, 2013

performance fix for return edges; if there were N start points (e.g. in a backwards analysis) and we did an unbalanced analysis, then the return-foe function was computed N times; now this is done only once





6a91d71e










15 Mar, 2013
1 commit









Bugfix: ProcessCall computed the new jump functions for a method call at a...

·
d564bec7





Steven Arzt authored Mar 15, 2013

Bugfix: ProcessCall computed the new jump functions for a method call at a specific call and return site pair, but then propagated the results to all return sites of this call. This lead to spurious results if there were multiple return sites for a call that had non-equal fact sets on their return edges.





d564bec7










11 Mar, 2013
1 commit









Replaced the duplicate call to the icfg by an access to cached structure we have anyway

·
5c0a40f6


Steven Arzt authored Mar 11, 2013






5c0a40f6










28 Feb, 2013
2 commits









adding find bugs

·
1e7f765a


Eric Bodden authored Feb 28, 2013






1e7f765a













removed stupig bug found by findbugs !!!

·
72286798


Eric Bodden authored Feb 28, 2013






72286798










25 Feb, 2013
3 commits









removing preds-operation again

·
5997f050


Eric Bodden authored Feb 25, 2013






5997f050













Merge pull request #2 from StevenArzt/develop

·
a81af76a





Eric Bodden authored Feb 25, 2013


Added a getPredsOf() to the cfg ( similarly to the existing getSuccsOf()...





a81af76a













Added a getPredsOf() to the cfg ( similarly to the existing getSuccsOf() )

·
54050935


Steven Arzt authored Feb 25, 2013






54050935










20 Feb, 2013
1 commit









bugfix: were propagating incorrect values at return-flow edges

·
0645e494


Eric Bodden authored Feb 20, 2013






0645e494










18 Feb, 2013
3 commits









Update README.md

·
321e183e


Eric Bodden authored Feb 18, 2013






321e183e













adding logo

·
657c8aee


Eric Bodden authored Feb 18, 2013






657c8aee













adding logo

·
a3a9fbe6


Eric Bodden authored Feb 18, 2013






a3a9fbe6










14 Feb, 2013
1 commit









bug fix for value computation (need to treat initialSeeds just as method start nodes)

·
227b9337


Eric Bodden authored Feb 14, 2013






227b9337










02 Feb, 2013
1 commit









added notes on persisting summary information

·
f66df606


Eric Bodden authored Feb 02, 2013






f66df606










30 Jan, 2013
4 commits









extracted method awaitCompletionComputeValuesAndShutdown()

·
446d709e


Eric Bodden authored Jan 30, 2013






446d709e













made scheduleEdgeProcessing protected such that it can be called from the outside

·
abe1050c


Eric Bodden authored Jan 30, 2013






abe1050c













Revert "removed superfluous call to scheduleEdgeProcessing"

·
2c7e04fd





Eric Bodden authored Jan 30, 2013


This reverts commit 1747df0c.

The change was wrong; scheduleEdgeProcessing does need to be called explicitly at initialization time!





2c7e04fd













ignoring bin directory

·
9ea337d1


Eric Bodden authored Jan 30, 2013






9ea337d1










29 Jan, 2013
6 commits









fixing shutdown sequence

·
e0e51e68


Eric Bodden authored Jan 29, 2013






e0e51e68













making executor exchangeable

·
18c72755


Eric Bodden authored Jan 29, 2013






18c72755













make computation of values optional

·
357e129e


Eric Bodden authored Jan 29, 2013






357e129e













number of threads is now configured through SolverConfiguration, a new super...

·
1e7167fe





Eric Bodden authored Jan 29, 2013

number of threads is now configured through SolverConfiguration, a new super interface of IFDSTabulationProblem





1e7167fe













indentation

·
aa7b4340


Eric Bodden authored Jan 29, 2013






aa7b4340













removed superfluous call to scheduleEdgeProcessing

·
1747df0c


Eric Bodden authored Jan 29, 2013






1747df0c










28 Jan, 2013
1 commit









refactoring: autoAddZero is now set in IFDSTabulationProblem

·
4b103811


Eric Bodden authored Jan 28, 2013






4b103811











06 Jul, 2013
1 commit
06 Jul, 20131 commit







updated initialSeeds to include source statement

·
a839d748


Eric Bodden authored Jul 06, 2013






a839d748














updated initialSeeds to include source statement

·
a839d748


Eric Bodden authored Jul 06, 2013






a839d748










updated initialSeeds to include source statement

·
a839d748


Eric Bodden authored Jul 06, 2013






a839d748






updated initialSeeds to include source statement

·
a839d748


Eric Bodden authored Jul 06, 2013


·
a839d748

Eric Bodden authored Jul 06, 2013




a839d748






a839d748




a839d748

05 Jul, 2013
4 commits
05 Jul, 20134 commits







Merge branch 'develop' into forks/java-fw-bw

·
baaa3dc5


Eric Bodden authored Jul 05, 2013






baaa3dc5













changing initialization of analysis such that initialSeeds not is a mapping...

·
275f5783





Eric Bodden authored Jul 05, 2013

changing initialization of analysis such that initialSeeds not is a mapping from units to initial data-flow facts at these units

this is a breaking change, but the class DefaultSeeds can be used to easily convert a set of units (old format) into a default map that should work for current clients

the change was implemented to permit subtypes of IFDSTabulationProblem to overwrite facts at seeds in a convenient way





275f5783













more advances on BiDi Solver

·
0a55e6f0


Eric Bodden authored Jul 05, 2013






0a55e6f0













initial draft of BiDi Solver

·
3e910732


Eric Bodden authored Jul 05, 2013






3e910732














Merge branch 'develop' into forks/java-fw-bw

·
baaa3dc5


Eric Bodden authored Jul 05, 2013






baaa3dc5










Merge branch 'develop' into forks/java-fw-bw

·
baaa3dc5


Eric Bodden authored Jul 05, 2013






baaa3dc5






Merge branch 'develop' into forks/java-fw-bw

·
baaa3dc5


Eric Bodden authored Jul 05, 2013


·
baaa3dc5

Eric Bodden authored Jul 05, 2013




baaa3dc5






baaa3dc5




baaa3dc5






changing initialization of analysis such that initialSeeds not is a mapping...

·
275f5783





Eric Bodden authored Jul 05, 2013

changing initialization of analysis such that initialSeeds not is a mapping from units to initial data-flow facts at these units

this is a breaking change, but the class DefaultSeeds can be used to easily convert a set of units (old format) into a default map that should work for current clients

the change was implemented to permit subtypes of IFDSTabulationProblem to overwrite facts at seeds in a convenient way





275f5783










changing initialization of analysis such that initialSeeds not is a mapping...

·
275f5783





Eric Bodden authored Jul 05, 2013

changing initialization of analysis such that initialSeeds not is a mapping from units to initial data-flow facts at these units

this is a breaking change, but the class DefaultSeeds can be used to easily convert a set of units (old format) into a default map that should work for current clients

the change was implemented to permit subtypes of IFDSTabulationProblem to overwrite facts at seeds in a convenient way





275f5783






changing initialization of analysis such that initialSeeds not is a mapping...

·
275f5783





Eric Bodden authored Jul 05, 2013

changing initialization of analysis such that initialSeeds not is a mapping from units to initial data-flow facts at these units

this is a breaking change, but the class DefaultSeeds can be used to easily convert a set of units (old format) into a default map that should work for current clients

the change was implemented to permit subtypes of IFDSTabulationProblem to overwrite facts at seeds in a convenient way

·
275f5783

Eric Bodden authored Jul 05, 2013




275f5783






275f5783




275f5783






more advances on BiDi Solver

·
0a55e6f0


Eric Bodden authored Jul 05, 2013






0a55e6f0










more advances on BiDi Solver

·
0a55e6f0


Eric Bodden authored Jul 05, 2013






0a55e6f0






more advances on BiDi Solver

·
0a55e6f0


Eric Bodden authored Jul 05, 2013


·
0a55e6f0

Eric Bodden authored Jul 05, 2013




0a55e6f0






0a55e6f0




0a55e6f0






initial draft of BiDi Solver

·
3e910732


Eric Bodden authored Jul 05, 2013






3e910732










initial draft of BiDi Solver

·
3e910732


Eric Bodden authored Jul 05, 2013






3e910732






initial draft of BiDi Solver

·
3e910732


Eric Bodden authored Jul 05, 2013


·
3e910732

Eric Bodden authored Jul 05, 2013




3e910732






3e910732




3e910732

04 Jul, 2013
3 commits
04 Jul, 20133 commits







Merge commit '987a7a4c' into develop

·
b6e78a8e


Eric Bodden authored Jul 04, 2013






b6e78a8e













bugfix: when propagating inside out into a caller that was not yet processed...

·
17895853





Eric Bodden authored Jul 04, 2013

bugfix: when propagating inside out into a caller that was not yet processed we need to create a summary edge starting at ZERO, not at the callee's flow fact!





17895853













memory improvement: do not store implicit TOP values

·
987a7a4c


Steven Arzt authored Jul 04, 2013






987a7a4c














Merge commit '987a7a4c' into develop

·
b6e78a8e


Eric Bodden authored Jul 04, 2013






b6e78a8e










Merge commit '987a7a4c' into develop

·
b6e78a8e


Eric Bodden authored Jul 04, 2013






b6e78a8e






Merge commit '987a7a4c' into develop

·
b6e78a8e


Eric Bodden authored Jul 04, 2013


·
b6e78a8e

Eric Bodden authored Jul 04, 2013




b6e78a8e






b6e78a8e




b6e78a8e






bugfix: when propagating inside out into a caller that was not yet processed...

·
17895853





Eric Bodden authored Jul 04, 2013

bugfix: when propagating inside out into a caller that was not yet processed we need to create a summary edge starting at ZERO, not at the callee's flow fact!





17895853










bugfix: when propagating inside out into a caller that was not yet processed...

·
17895853





Eric Bodden authored Jul 04, 2013

bugfix: when propagating inside out into a caller that was not yet processed we need to create a summary edge starting at ZERO, not at the callee's flow fact!





17895853






bugfix: when propagating inside out into a caller that was not yet processed...

·
17895853





Eric Bodden authored Jul 04, 2013

bugfix: when propagating inside out into a caller that was not yet processed we need to create a summary edge starting at ZERO, not at the callee's flow fact!

·
17895853

Eric Bodden authored Jul 04, 2013




17895853






17895853




17895853






memory improvement: do not store implicit TOP values

·
987a7a4c


Steven Arzt authored Jul 04, 2013






987a7a4c










memory improvement: do not store implicit TOP values

·
987a7a4c


Steven Arzt authored Jul 04, 2013






987a7a4c






memory improvement: do not store implicit TOP values

·
987a7a4c


Steven Arzt authored Jul 04, 2013


·
987a7a4c

Steven Arzt authored Jul 04, 2013




987a7a4c






987a7a4c




987a7a4c

16 Jun, 2013
1 commit
16 Jun, 20131 commit







fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return...

·
0ec8bfc3





Steven Arzt authored Jun 16, 2013

fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return edge gets processed for **all callers** of the callee from which we return in cases where we haven't seen the respective call edge.

This however leads to spurious edges if we have multiple call sites for the same callee. Let us assume call site A calls foo() with jump function a and call site B calls it with b. If we now return from foo with something derived from a, we will not find an incoming edge for call site B. FollowReturnsPastSeeds thus made us propagate the value to both call sites which makes us loose context sensitivity.

Fix as follows: Only follow past seeds if we have seen no call edge into the callee at all. We can then assume that we're really running beyond the seeds of the analysis and have no other chance than propagating to all call sites.





0ec8bfc3














fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return...

·
0ec8bfc3





Steven Arzt authored Jun 16, 2013

fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return edge gets processed for **all callers** of the callee from which we return in cases where we haven't seen the respective call edge.

This however leads to spurious edges if we have multiple call sites for the same callee. Let us assume call site A calls foo() with jump function a and call site B calls it with b. If we now return from foo with something derived from a, we will not find an incoming edge for call site B. FollowReturnsPastSeeds thus made us propagate the value to both call sites which makes us loose context sensitivity.

Fix as follows: Only follow past seeds if we have seen no call edge into the callee at all. We can then assume that we're really running beyond the seeds of the analysis and have no other chance than propagating to all call sites.





0ec8bfc3










fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return...

·
0ec8bfc3





Steven Arzt authored Jun 16, 2013

fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return edge gets processed for **all callers** of the callee from which we return in cases where we haven't seen the respective call edge.

This however leads to spurious edges if we have multiple call sites for the same callee. Let us assume call site A calls foo() with jump function a and call site B calls it with b. If we now return from foo with something derived from a, we will not find an incoming edge for call site B. FollowReturnsPastSeeds thus made us propagate the value to both call sites which makes us loose context sensitivity.

Fix as follows: Only follow past seeds if we have seen no call edge into the callee at all. We can then assume that we're really running beyond the seeds of the analysis and have no other chance than propagating to all call sites.





0ec8bfc3






fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return...

·
0ec8bfc3





Steven Arzt authored Jun 16, 2013

fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return edge gets processed for **all callers** of the callee from which we return in cases where we haven't seen the respective call edge.

This however leads to spurious edges if we have multiple call sites for the same callee. Let us assume call site A calls foo() with jump function a and call site B calls it with b. If we now return from foo with something derived from a, we will not find an incoming edge for call site B. FollowReturnsPastSeeds thus made us propagate the value to both call sites which makes us loose context sensitivity.

Fix as follows: Only follow past seeds if we have seen no call edge into the callee at all. We can then assume that we're really running beyond the seeds of the analysis and have no other chance than propagating to all call sites.

·
0ec8bfc3

Steven Arzt authored Jun 16, 2013




0ec8bfc3






0ec8bfc3




0ec8bfc3

05 Jun, 2013
1 commit
05 Jun, 20131 commit







for unbalanced problems on return statements we now use the return flow...

·
4ae358b3





Eric Bodden authored Jun 05, 2013

for unbalanced problems on return statements we now use the return flow function, not the normal flow function
the caller is then simply "null"
added some comments about this





4ae358b3














for unbalanced problems on return statements we now use the return flow...

·
4ae358b3





Eric Bodden authored Jun 05, 2013

for unbalanced problems on return statements we now use the return flow function, not the normal flow function
the caller is then simply "null"
added some comments about this





4ae358b3










for unbalanced problems on return statements we now use the return flow...

·
4ae358b3





Eric Bodden authored Jun 05, 2013

for unbalanced problems on return statements we now use the return flow function, not the normal flow function
the caller is then simply "null"
added some comments about this





4ae358b3






for unbalanced problems on return statements we now use the return flow...

·
4ae358b3





Eric Bodden authored Jun 05, 2013

for unbalanced problems on return statements we now use the return flow function, not the normal flow function
the caller is then simply "null"
added some comments about this

·
4ae358b3

Eric Bodden authored Jun 05, 2013




4ae358b3






4ae358b3




4ae358b3

29 May, 2013
2 commits
29 May, 20132 commits







adding synchronization on "val" due to possible race conditions (thanks to...

·
525c45fb





Eric Bodden authored May 29, 2013

adding synchronization on "val" due to possible race conditions (thanks to Damien Octeau for reporting this!)





525c45fb













Merge branch 'feature/performance-fix-for-return-edges' into develop

·
752b7288


Eric Bodden authored May 29, 2013






752b7288














adding synchronization on "val" due to possible race conditions (thanks to...

·
525c45fb





Eric Bodden authored May 29, 2013

adding synchronization on "val" due to possible race conditions (thanks to Damien Octeau for reporting this!)





525c45fb










adding synchronization on "val" due to possible race conditions (thanks to...

·
525c45fb





Eric Bodden authored May 29, 2013

adding synchronization on "val" due to possible race conditions (thanks to Damien Octeau for reporting this!)





525c45fb






adding synchronization on "val" due to possible race conditions (thanks to...

·
525c45fb





Eric Bodden authored May 29, 2013

adding synchronization on "val" due to possible race conditions (thanks to Damien Octeau for reporting this!)

·
525c45fb

Eric Bodden authored May 29, 2013




525c45fb






525c45fb




525c45fb






Merge branch 'feature/performance-fix-for-return-edges' into develop

·
752b7288


Eric Bodden authored May 29, 2013






752b7288










Merge branch 'feature/performance-fix-for-return-edges' into develop

·
752b7288


Eric Bodden authored May 29, 2013






752b7288






Merge branch 'feature/performance-fix-for-return-edges' into develop

·
752b7288


Eric Bodden authored May 29, 2013


·
752b7288

Eric Bodden authored May 29, 2013




752b7288






752b7288




752b7288

14 May, 2013
3 commits
14 May, 20133 commits







made a structure definition "protected"

·
a81e8b33


Steven Arzt authored May 14, 2013






a81e8b33













Merge branch 'develop' of https://github.com/Sable/heros into develop

·
640b0e9b


Steven Arzt authored May 14, 2013






640b0e9b













interproceduralCFG() in DefaultIFDSTabulationProblem.java can now be...

·
8ca05fa0





Steven Arzt authored May 14, 2013

interproceduralCFG() in DefaultIFDSTabulationProblem.java can now be overwritten for implementations that know that they always use a special type of icfg and this want to provide a shortcut for obtaining it





8ca05fa0














made a structure definition "protected"

·
a81e8b33


Steven Arzt authored May 14, 2013






a81e8b33










made a structure definition "protected"

·
a81e8b33


Steven Arzt authored May 14, 2013






a81e8b33






made a structure definition "protected"

·
a81e8b33


Steven Arzt authored May 14, 2013


·
a81e8b33

Steven Arzt authored May 14, 2013




a81e8b33






a81e8b33




a81e8b33






Merge branch 'develop' of https://github.com/Sable/heros into develop

·
640b0e9b


Steven Arzt authored May 14, 2013






640b0e9b










Merge branch 'develop' of https://github.com/Sable/heros into develop

·
640b0e9b


Steven Arzt authored May 14, 2013






640b0e9b






Merge branch 'develop' of https://github.com/Sable/heros into develop

·
640b0e9b


Steven Arzt authored May 14, 2013


·
640b0e9b

Steven Arzt authored May 14, 2013




640b0e9b






640b0e9b




640b0e9b






interproceduralCFG() in DefaultIFDSTabulationProblem.java can now be...

·
8ca05fa0





Steven Arzt authored May 14, 2013

interproceduralCFG() in DefaultIFDSTabulationProblem.java can now be overwritten for implementations that know that they always use a special type of icfg and this want to provide a shortcut for obtaining it





8ca05fa0










interproceduralCFG() in DefaultIFDSTabulationProblem.java can now be...

·
8ca05fa0





Steven Arzt authored May 14, 2013

interproceduralCFG() in DefaultIFDSTabulationProblem.java can now be overwritten for implementations that know that they always use a special type of icfg and this want to provide a shortcut for obtaining it





8ca05fa0






interproceduralCFG() in DefaultIFDSTabulationProblem.java can now be...

·
8ca05fa0





Steven Arzt authored May 14, 2013

interproceduralCFG() in DefaultIFDSTabulationProblem.java can now be overwritten for implementations that know that they always use a special type of icfg and this want to provide a shortcut for obtaining it

·
8ca05fa0

Steven Arzt authored May 14, 2013




8ca05fa0






8ca05fa0




8ca05fa0

25 Apr, 2013
1 commit
25 Apr, 20131 commit







performance fix for return edges; if there were N start points (e.g. in a...

·
6a91d71e





Eric Bodden authored Apr 25, 2013

performance fix for return edges; if there were N start points (e.g. in a backwards analysis) and we did an unbalanced analysis, then the return-foe function was computed N times; now this is done only once





6a91d71e














performance fix for return edges; if there were N start points (e.g. in a...

·
6a91d71e





Eric Bodden authored Apr 25, 2013

performance fix for return edges; if there were N start points (e.g. in a backwards analysis) and we did an unbalanced analysis, then the return-foe function was computed N times; now this is done only once





6a91d71e










performance fix for return edges; if there were N start points (e.g. in a...

·
6a91d71e





Eric Bodden authored Apr 25, 2013

performance fix for return edges; if there were N start points (e.g. in a backwards analysis) and we did an unbalanced analysis, then the return-foe function was computed N times; now this is done only once





6a91d71e






performance fix for return edges; if there were N start points (e.g. in a...

·
6a91d71e





Eric Bodden authored Apr 25, 2013

performance fix for return edges; if there were N start points (e.g. in a backwards analysis) and we did an unbalanced analysis, then the return-foe function was computed N times; now this is done only once

·
6a91d71e

Eric Bodden authored Apr 25, 2013




6a91d71e






6a91d71e




6a91d71e

15 Mar, 2013
1 commit
15 Mar, 20131 commit







Bugfix: ProcessCall computed the new jump functions for a method call at a...

·
d564bec7





Steven Arzt authored Mar 15, 2013

Bugfix: ProcessCall computed the new jump functions for a method call at a specific call and return site pair, but then propagated the results to all return sites of this call. This lead to spurious results if there were multiple return sites for a call that had non-equal fact sets on their return edges.





d564bec7














Bugfix: ProcessCall computed the new jump functions for a method call at a...

·
d564bec7





Steven Arzt authored Mar 15, 2013

Bugfix: ProcessCall computed the new jump functions for a method call at a specific call and return site pair, but then propagated the results to all return sites of this call. This lead to spurious results if there were multiple return sites for a call that had non-equal fact sets on their return edges.





d564bec7










Bugfix: ProcessCall computed the new jump functions for a method call at a...

·
d564bec7





Steven Arzt authored Mar 15, 2013

Bugfix: ProcessCall computed the new jump functions for a method call at a specific call and return site pair, but then propagated the results to all return sites of this call. This lead to spurious results if there were multiple return sites for a call that had non-equal fact sets on their return edges.





d564bec7






Bugfix: ProcessCall computed the new jump functions for a method call at a...

·
d564bec7





Steven Arzt authored Mar 15, 2013

Bugfix: ProcessCall computed the new jump functions for a method call at a specific call and return site pair, but then propagated the results to all return sites of this call. This lead to spurious results if there were multiple return sites for a call that had non-equal fact sets on their return edges.

·
d564bec7

Steven Arzt authored Mar 15, 2013




d564bec7






d564bec7




d564bec7

11 Mar, 2013
1 commit
11 Mar, 20131 commit







Replaced the duplicate call to the icfg by an access to cached structure we have anyway

·
5c0a40f6


Steven Arzt authored Mar 11, 2013






5c0a40f6














Replaced the duplicate call to the icfg by an access to cached structure we have anyway

·
5c0a40f6


Steven Arzt authored Mar 11, 2013






5c0a40f6










Replaced the duplicate call to the icfg by an access to cached structure we have anyway

·
5c0a40f6


Steven Arzt authored Mar 11, 2013






5c0a40f6






Replaced the duplicate call to the icfg by an access to cached structure we have anyway

·
5c0a40f6


Steven Arzt authored Mar 11, 2013


·
5c0a40f6

Steven Arzt authored Mar 11, 2013




5c0a40f6






5c0a40f6




5c0a40f6

28 Feb, 2013
2 commits
28 Feb, 20132 commits







adding find bugs

·
1e7f765a


Eric Bodden authored Feb 28, 2013






1e7f765a













removed stupig bug found by findbugs !!!

·
72286798


Eric Bodden authored Feb 28, 2013






72286798














adding find bugs

·
1e7f765a


Eric Bodden authored Feb 28, 2013






1e7f765a










adding find bugs

·
1e7f765a


Eric Bodden authored Feb 28, 2013






1e7f765a






adding find bugs

·
1e7f765a


Eric Bodden authored Feb 28, 2013


·
1e7f765a

Eric Bodden authored Feb 28, 2013




1e7f765a






1e7f765a




1e7f765a






removed stupig bug found by findbugs !!!

·
72286798


Eric Bodden authored Feb 28, 2013






72286798










removed stupig bug found by findbugs !!!

·
72286798


Eric Bodden authored Feb 28, 2013






72286798






removed stupig bug found by findbugs !!!

·
72286798


Eric Bodden authored Feb 28, 2013


·
72286798

Eric Bodden authored Feb 28, 2013




72286798






72286798




72286798

25 Feb, 2013
3 commits
25 Feb, 20133 commits







removing preds-operation again

·
5997f050


Eric Bodden authored Feb 25, 2013






5997f050













Merge pull request #2 from StevenArzt/develop

·
a81af76a





Eric Bodden authored Feb 25, 2013


Added a getPredsOf() to the cfg ( similarly to the existing getSuccsOf()...





a81af76a













Added a getPredsOf() to the cfg ( similarly to the existing getSuccsOf() )

·
54050935


Steven Arzt authored Feb 25, 2013






54050935














removing preds-operation again

·
5997f050


Eric Bodden authored Feb 25, 2013






5997f050










removing preds-operation again

·
5997f050


Eric Bodden authored Feb 25, 2013






5997f050






removing preds-operation again

·
5997f050


Eric Bodden authored Feb 25, 2013


·
5997f050

Eric Bodden authored Feb 25, 2013




5997f050






5997f050




5997f050






Merge pull request #2 from StevenArzt/develop

·
a81af76a





Eric Bodden authored Feb 25, 2013


Added a getPredsOf() to the cfg ( similarly to the existing getSuccsOf()...





a81af76a










Merge pull request #2 from StevenArzt/develop

·
a81af76a





Eric Bodden authored Feb 25, 2013


Added a getPredsOf() to the cfg ( similarly to the existing getSuccsOf()...





a81af76a






Merge pull request #2 from StevenArzt/develop

·
a81af76a





Eric Bodden authored Feb 25, 2013


Added a getPredsOf() to the cfg ( similarly to the existing getSuccsOf()...

·
a81af76a

Eric Bodden authored Feb 25, 2013




a81af76a






a81af76a




a81af76a






Added a getPredsOf() to the cfg ( similarly to the existing getSuccsOf() )

·
54050935


Steven Arzt authored Feb 25, 2013






54050935










Added a getPredsOf() to the cfg ( similarly to the existing getSuccsOf() )

·
54050935


Steven Arzt authored Feb 25, 2013






54050935






Added a getPredsOf() to the cfg ( similarly to the existing getSuccsOf() )

·
54050935


Steven Arzt authored Feb 25, 2013


·
54050935

Steven Arzt authored Feb 25, 2013




54050935






54050935




54050935

20 Feb, 2013
1 commit
20 Feb, 20131 commit







bugfix: were propagating incorrect values at return-flow edges

·
0645e494


Eric Bodden authored Feb 20, 2013






0645e494














bugfix: were propagating incorrect values at return-flow edges

·
0645e494


Eric Bodden authored Feb 20, 2013






0645e494










bugfix: were propagating incorrect values at return-flow edges

·
0645e494


Eric Bodden authored Feb 20, 2013






0645e494






bugfix: were propagating incorrect values at return-flow edges

·
0645e494


Eric Bodden authored Feb 20, 2013


·
0645e494

Eric Bodden authored Feb 20, 2013




0645e494






0645e494




0645e494

18 Feb, 2013
3 commits
18 Feb, 20133 commits







Update README.md

·
321e183e


Eric Bodden authored Feb 18, 2013






321e183e













adding logo

·
657c8aee


Eric Bodden authored Feb 18, 2013






657c8aee













adding logo

·
a3a9fbe6


Eric Bodden authored Feb 18, 2013






a3a9fbe6














Update README.md

·
321e183e


Eric Bodden authored Feb 18, 2013






321e183e










Update README.md

·
321e183e


Eric Bodden authored Feb 18, 2013






321e183e






Update README.md

·
321e183e


Eric Bodden authored Feb 18, 2013


·
321e183e

Eric Bodden authored Feb 18, 2013




321e183e






321e183e




321e183e






adding logo

·
657c8aee


Eric Bodden authored Feb 18, 2013






657c8aee










adding logo

·
657c8aee


Eric Bodden authored Feb 18, 2013






657c8aee






adding logo

·
657c8aee


Eric Bodden authored Feb 18, 2013


·
657c8aee

Eric Bodden authored Feb 18, 2013




657c8aee






657c8aee




657c8aee






adding logo

·
a3a9fbe6


Eric Bodden authored Feb 18, 2013






a3a9fbe6










adding logo

·
a3a9fbe6


Eric Bodden authored Feb 18, 2013






a3a9fbe6






adding logo

·
a3a9fbe6


Eric Bodden authored Feb 18, 2013


·
a3a9fbe6

Eric Bodden authored Feb 18, 2013




a3a9fbe6






a3a9fbe6




a3a9fbe6

14 Feb, 2013
1 commit
14 Feb, 20131 commit







bug fix for value computation (need to treat initialSeeds just as method start nodes)

·
227b9337


Eric Bodden authored Feb 14, 2013






227b9337














bug fix for value computation (need to treat initialSeeds just as method start nodes)

·
227b9337


Eric Bodden authored Feb 14, 2013






227b9337










bug fix for value computation (need to treat initialSeeds just as method start nodes)

·
227b9337


Eric Bodden authored Feb 14, 2013






227b9337






bug fix for value computation (need to treat initialSeeds just as method start nodes)

·
227b9337


Eric Bodden authored Feb 14, 2013


·
227b9337

Eric Bodden authored Feb 14, 2013




227b9337






227b9337




227b9337

02 Feb, 2013
1 commit
02 Feb, 20131 commit







added notes on persisting summary information

·
f66df606


Eric Bodden authored Feb 02, 2013






f66df606














added notes on persisting summary information

·
f66df606


Eric Bodden authored Feb 02, 2013






f66df606










added notes on persisting summary information

·
f66df606


Eric Bodden authored Feb 02, 2013






f66df606






added notes on persisting summary information

·
f66df606


Eric Bodden authored Feb 02, 2013


·
f66df606

Eric Bodden authored Feb 02, 2013




f66df606






f66df606




f66df606

30 Jan, 2013
4 commits
30 Jan, 20134 commits







extracted method awaitCompletionComputeValuesAndShutdown()

·
446d709e


Eric Bodden authored Jan 30, 2013






446d709e













made scheduleEdgeProcessing protected such that it can be called from the outside

·
abe1050c


Eric Bodden authored Jan 30, 2013






abe1050c













Revert "removed superfluous call to scheduleEdgeProcessing"

·
2c7e04fd





Eric Bodden authored Jan 30, 2013


This reverts commit 1747df0c.

The change was wrong; scheduleEdgeProcessing does need to be called explicitly at initialization time!





2c7e04fd













ignoring bin directory

·
9ea337d1


Eric Bodden authored Jan 30, 2013






9ea337d1














extracted method awaitCompletionComputeValuesAndShutdown()

·
446d709e


Eric Bodden authored Jan 30, 2013






446d709e










extracted method awaitCompletionComputeValuesAndShutdown()

·
446d709e


Eric Bodden authored Jan 30, 2013






446d709e






extracted method awaitCompletionComputeValuesAndShutdown()

·
446d709e


Eric Bodden authored Jan 30, 2013


·
446d709e

Eric Bodden authored Jan 30, 2013




446d709e






446d709e




446d709e






made scheduleEdgeProcessing protected such that it can be called from the outside

·
abe1050c


Eric Bodden authored Jan 30, 2013






abe1050c










made scheduleEdgeProcessing protected such that it can be called from the outside

·
abe1050c


Eric Bodden authored Jan 30, 2013






abe1050c






made scheduleEdgeProcessing protected such that it can be called from the outside

·
abe1050c


Eric Bodden authored Jan 30, 2013


·
abe1050c

Eric Bodden authored Jan 30, 2013




abe1050c






abe1050c




abe1050c






Revert "removed superfluous call to scheduleEdgeProcessing"

·
2c7e04fd





Eric Bodden authored Jan 30, 2013


This reverts commit 1747df0c.

The change was wrong; scheduleEdgeProcessing does need to be called explicitly at initialization time!





2c7e04fd










Revert "removed superfluous call to scheduleEdgeProcessing"

·
2c7e04fd





Eric Bodden authored Jan 30, 2013


This reverts commit 1747df0c.

The change was wrong; scheduleEdgeProcessing does need to be called explicitly at initialization time!





2c7e04fd






Revert "removed superfluous call to scheduleEdgeProcessing"

·
2c7e04fd





Eric Bodden authored Jan 30, 2013


This reverts commit 1747df0c.

The change was wrong; scheduleEdgeProcessing does need to be called explicitly at initialization time!

·
2c7e04fd

Eric Bodden authored Jan 30, 2013




2c7e04fd






2c7e04fd




2c7e04fd






ignoring bin directory

·
9ea337d1


Eric Bodden authored Jan 30, 2013






9ea337d1










ignoring bin directory

·
9ea337d1


Eric Bodden authored Jan 30, 2013






9ea337d1






ignoring bin directory

·
9ea337d1


Eric Bodden authored Jan 30, 2013


·
9ea337d1

Eric Bodden authored Jan 30, 2013




9ea337d1






9ea337d1




9ea337d1

29 Jan, 2013
6 commits
29 Jan, 20136 commits







fixing shutdown sequence

·
e0e51e68


Eric Bodden authored Jan 29, 2013






e0e51e68













making executor exchangeable

·
18c72755


Eric Bodden authored Jan 29, 2013






18c72755













make computation of values optional

·
357e129e


Eric Bodden authored Jan 29, 2013






357e129e













number of threads is now configured through SolverConfiguration, a new super...

·
1e7167fe





Eric Bodden authored Jan 29, 2013

number of threads is now configured through SolverConfiguration, a new super interface of IFDSTabulationProblem





1e7167fe













indentation

·
aa7b4340


Eric Bodden authored Jan 29, 2013






aa7b4340













removed superfluous call to scheduleEdgeProcessing

·
1747df0c


Eric Bodden authored Jan 29, 2013






1747df0c














fixing shutdown sequence

·
e0e51e68


Eric Bodden authored Jan 29, 2013






e0e51e68










fixing shutdown sequence

·
e0e51e68


Eric Bodden authored Jan 29, 2013






e0e51e68






fixing shutdown sequence

·
e0e51e68


Eric Bodden authored Jan 29, 2013


·
e0e51e68

Eric Bodden authored Jan 29, 2013




e0e51e68






e0e51e68




e0e51e68






making executor exchangeable

·
18c72755


Eric Bodden authored Jan 29, 2013






18c72755










making executor exchangeable

·
18c72755


Eric Bodden authored Jan 29, 2013






18c72755






making executor exchangeable

·
18c72755


Eric Bodden authored Jan 29, 2013


·
18c72755

Eric Bodden authored Jan 29, 2013




18c72755






18c72755




18c72755






make computation of values optional

·
357e129e


Eric Bodden authored Jan 29, 2013






357e129e










make computation of values optional

·
357e129e


Eric Bodden authored Jan 29, 2013






357e129e






make computation of values optional

·
357e129e


Eric Bodden authored Jan 29, 2013


·
357e129e

Eric Bodden authored Jan 29, 2013




357e129e






357e129e




357e129e






number of threads is now configured through SolverConfiguration, a new super...

·
1e7167fe





Eric Bodden authored Jan 29, 2013

number of threads is now configured through SolverConfiguration, a new super interface of IFDSTabulationProblem





1e7167fe










number of threads is now configured through SolverConfiguration, a new super...

·
1e7167fe





Eric Bodden authored Jan 29, 2013

number of threads is now configured through SolverConfiguration, a new super interface of IFDSTabulationProblem





1e7167fe






number of threads is now configured through SolverConfiguration, a new super...

·
1e7167fe





Eric Bodden authored Jan 29, 2013

number of threads is now configured through SolverConfiguration, a new super interface of IFDSTabulationProblem

·
1e7167fe

Eric Bodden authored Jan 29, 2013




1e7167fe






1e7167fe




1e7167fe






indentation

·
aa7b4340


Eric Bodden authored Jan 29, 2013






aa7b4340










indentation

·
aa7b4340


Eric Bodden authored Jan 29, 2013






aa7b4340






indentation

·
aa7b4340


Eric Bodden authored Jan 29, 2013


·
aa7b4340

Eric Bodden authored Jan 29, 2013




aa7b4340






aa7b4340




aa7b4340






removed superfluous call to scheduleEdgeProcessing

·
1747df0c


Eric Bodden authored Jan 29, 2013






1747df0c










removed superfluous call to scheduleEdgeProcessing

·
1747df0c


Eric Bodden authored Jan 29, 2013






1747df0c






removed superfluous call to scheduleEdgeProcessing

·
1747df0c


Eric Bodden authored Jan 29, 2013


·
1747df0c

Eric Bodden authored Jan 29, 2013




1747df0c






1747df0c




1747df0c

28 Jan, 2013
1 commit
28 Jan, 20131 commit







refactoring: autoAddZero is now set in IFDSTabulationProblem

·
4b103811


Eric Bodden authored Jan 28, 2013






4b103811














refactoring: autoAddZero is now set in IFDSTabulationProblem

·
4b103811


Eric Bodden authored Jan 28, 2013






4b103811










refactoring: autoAddZero is now set in IFDSTabulationProblem

·
4b103811


Eric Bodden authored Jan 28, 2013






4b103811






refactoring: autoAddZero is now set in IFDSTabulationProblem

·
4b103811


Eric Bodden authored Jan 28, 2013


·
4b103811

Eric Bodden authored Jan 28, 2013




4b103811






4b103811




4b103811






