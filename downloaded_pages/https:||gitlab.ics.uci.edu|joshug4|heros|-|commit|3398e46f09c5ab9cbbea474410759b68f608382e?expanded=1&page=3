



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

3398e46f















Commit
3398e46f


authored
Feb 25, 2015
by


Johannes Lerch



Browse files




rewrite of ifds solver







parent
55cdd2d8













Changes
45




Hide whitespace changes

Inline
Side-by-side















test/heros/alias/TestFact.java



0 â†’ 100644







View file @ 3398e46f













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















public class TestFact {





















 public final String baseValue;










 










 public TestFact(String baseValue) {










 this.baseValue = baseValue;










 }










 










 @Override










 public String toString() {










 return "[Fact "+baseValue+"]";










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((baseValue == null) ? 0 : baseValue.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof TestFact))










 return false;










 TestFact other = (TestFact) obj;










 if (baseValue == null) {










 if (other.baseValue != null)










 return false;










 } else if (!baseValue.equals(other.baseValue))










 return false;










 return true;










 } 










}














test/heros/alias/TestHelper.java








View file @ 3398e46f






......@@ -37,16 +37,21 @@ import com.google.common.collect.Sets;




















public class TestHelper {





















 private Multimap<Method, Statement> method2startPoint = HashMultimap.create();










 private Multimap<TestMethod, TestStatement> method2startPoint = HashMultimap.create();










 private List<NormalEdge> normalEdges = Lists.newLinkedList();










 private List<CallEdge> callEdges = Lists.newLinkedList();










 private List<Call2ReturnEdge> call2retEdges = Lists.newLinkedList();










 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, Method> stmt2method = Maps.newHashMap();










 private Map<TestStatement, TestMethod> stmt2method = Maps.newHashMap();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();










 private TestDebugger<TestFieldRef, TestFact, TestStatement, TestMethod, InterproceduralCFG<TestStatement, TestMethod>> debugger;





















 public MethodHelper method(String methodName, Statement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new Method(methodName));










 public TestHelper(TestDebugger<TestFieldRef, TestFact, TestStatement, TestMethod, InterproceduralCFG<TestStatement, TestMethod>> debugger) {










 this.debugger = debugger;










 }





















 public MethodHelper method(String methodName, TestStatement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new TestMethod(methodName));










 methodHelper.startPoints(startingPoints);










 for(EdgeBuilder edgeBuilder : edgeBuilders){










 methodHelper.edges(edgeBuilder.edges());



......@@ -54,32 +59,32 @@ public class TestHelper {









 return methodHelper;










 }





















 public static Statement[] startPoints(String... startingPoints) {










 Statement[] result = new Statement[startingPoints.length];










 public static TestStatement[] startPoints(String... startingPoints) {










 TestStatement[] result = new TestStatement[startingPoints.length];










 for (int i = 0; i < result.length; i++) {










 result[i] = new Statement(startingPoints[i]);










 result[i] = new TestStatement(startingPoints[i]);










 }










 return result;










 }





















 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt) {










 return new EdgeBuilder.NormalStmtBuilder(new Statement(stmt));










 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt, ExpectedFlowFunction...flowFunctions) {










 return new EdgeBuilder.NormalStmtBuilder(new TestStatement(stmt), flowFunctions);










 }










 










 public static EdgeBuilder.CallSiteBuilder callSite(String callSite) {










 return new EdgeBuilder.CallSiteBuilder(new Statement(callSite));










 return new EdgeBuilder.CallSiteBuilder(new TestStatement(callSite));










 }










 










 public static EdgeBuilder.ExitStmtBuilder exitStmt(String exitStmt) {










 return new EdgeBuilder.ExitStmtBuilder(new Statement(exitStmt));










 return new EdgeBuilder.ExitStmtBuilder(new TestStatement(exitStmt));










 }










 










 public static Statement over(String callSite) {










 return new Statement(callSite);










 public static TestStatement over(String callSite) {










 return new TestStatement(callSite);










 }










 










 public static Statement to(String returnSite) {










 return new Statement(returnSite);










 public static TestStatement to(String returnSite) {










 return new TestStatement(returnSite);










 }










 










 public static ExpectedFlowFunction kill(String source) {



......@@ -87,27 +92,87 @@ public class TestHelper {









 }










 










 public static ExpectedFlowFunction kill(int times, String source) {










 return new ExpectedFlowFunction(times, new Fact(source));










 return new ExpectedFlowFunction(times, new TestFact(source)) {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 throw new IllegalStateException();










 }










 










 @Override










 public String transformerString() {










 return "";










 }










 };










 }





















 public static Constraint<TestFieldRef> readField(String fieldName) {










 return new FlowFunction.ReadFieldConstraint<TestFieldRef>(new TestFieldRef(fieldName));










 public static AccessPathTransformer readField(final String fieldName) {










 return new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.read(new TestFieldRef(fieldName)).generate(target);










 }





















 @Override










 public String toString() {










 return "read("+fieldName+")";










 }










 };










 }










 










 public static Constraint<TestFieldRef> writeField(String fieldName) {










 return new FlowFunction.WriteFieldConstraint<TestFieldRef>(new TestFieldRef(fieldName));










 public static AccessPathTransformer prependField(final String fieldName) {










 return new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.prepend(new TestFieldRef(fieldName)).generate(target);










 }










 










 @Override










 public String toString() {










 return "prepend("+fieldName+")";










 }










 };










 }










 










 public static ExpectedFlowFunction flow(String source, Constraint<TestFieldRef> constraint, String... targets) {










 return flow(1, source, constraint, targets);










 public static AccessPathTransformer overwriteField(final String fieldName) {










 return new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.overwrite(new TestFieldRef(fieldName)).generate(target);










 }










 










 @Override










 public String toString() {










 return "write("+fieldName+")";










 }










 };










 }










 










 public static ExpectedFlowFunction flow(String source, final AccessPathTransformer transformer, String... targets) {










 return flow(1, source, transformer, targets);










 }










 










 public static ExpectedFlowFunction flow(int times, String source, Constraint<TestFieldRef> constraint, String... targets) {










 ConstrainedFact<TestFieldRef, Fact>[] targetFacts = new ConstrainedFact[targets.length];










 public static ExpectedFlowFunction flow(int times, String source, final AccessPathTransformer transformer, String... targets) {










 TestFact[] targetFacts = new TestFact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new ConstrainedFact<TestFieldRef, Fact>(new Fact(targets[i]), constraint);










 targetFacts[i] = new TestFact(targets[i]);










 }










 return new ExpectedFlowFunction(times, new Fact(source), targetFacts);










 return new ExpectedFlowFunction(times, new TestFact(source), targetFacts) {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return transformer.apply(target, accPathHandler);










 }










 










 @Override










 public String transformerString() {










 return transformer.toString();










 }










 };










 }










 










 private static interface AccessPathTransformer {





















 ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler); 










 










 }










 










 public static ExpectedFlowFunction flow(String source, String... targets) {



......@@ -115,28 +180,39 @@ public class TestHelper {









 }










 










 public static ExpectedFlowFunction flow(int times, String source, String... targets) {










 return flow(times, source, null, targets);










 return flow(times, source, new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.generate(target);










 }










 










 @Override










 public String toString() {










 return "";










 }










 










 }, targets);










 }










 










 public static int times(int times) {










 return times;










 }





















 public InterproceduralCFG<Statement, Method> buildIcfg() {










 return new InterproceduralCFG<Statement, Method>() {










 public InterproceduralCFG<TestStatement, TestMethod> buildIcfg() {










 return new InterproceduralCFG<TestStatement, TestMethod>() {





















 @Override










 public boolean isStartPoint(Statement stmt) {










 public boolean isStartPoint(TestStatement stmt) {










 return method2startPoint.values().contains(stmt);










 }





















 @Override










 public boolean isFallThroughSuccessor(Statement stmt, Statement succ) {










 public boolean isFallThroughSuccessor(TestStatement stmt, TestStatement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public boolean isExitStmt(Statement stmt) {










 public boolean isExitStmt(TestStatement stmt) {










 for(ReturnEdge edge : returnEdges) {










 if(edge.exitStmt.equals(stmt))










 return true;



......@@ -145,7 +221,7 @@ public class TestHelper {









 }





















 @Override










 public boolean isCallStmt(final Statement stmt) {










 public boolean isCallStmt(final TestStatement stmt) {










 return Iterables.any(callEdges, new Predicate<CallEdge>() {










 @Override










 public boolean apply(CallEdge edge) {



......@@ -155,13 +231,13 @@ public class TestHelper {









 }





















 @Override










 public boolean isBranchTarget(Statement stmt, Statement succ) {










 public boolean isBranchTarget(TestStatement stmt, TestStatement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public List<Statement> getSuccsOf(Statement n) {










 LinkedList<Statement> result = Lists.newLinkedList();










 public List<TestStatement> getSuccsOf(TestStatement n) {










 LinkedList<TestStatement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.unit.equals(n))










 result.add(edge.succUnit);



......@@ -170,13 +246,23 @@ public class TestHelper {









 }





















 @Override










 public Collection<Statement> getStartPointsOf(Method m) {










 public List<TestStatement> getPredsOf(TestStatement stmt) {










 LinkedList<TestStatement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.succUnit.equals(stmt))










 result.add(edge.unit);










 }










 return result;










 }





















 @Override










 public Collection<TestStatement> getStartPointsOf(TestMethod m) {










 return method2startPoint.get(m);










 }





















 @Override










 public Collection<Statement> getReturnSitesOfCallAt(Statement n) {










 Set<Statement> result = Sets.newHashSet();










 public Collection<TestStatement> getReturnSitesOfCallAt(TestStatement n) {










 Set<TestStatement> result = Sets.newHashSet();










 for (Call2ReturnEdge edge : call2retEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n))










 result.add(edge.returnSite);



......@@ -189,18 +275,21 @@ public class TestHelper {









 }





















 @Override










 public Method getMethodOf(Statement n) {










 return stmt2method.get(n);










 public TestMethod getMethodOf(TestStatement n) {










 if(stmt2method.containsKey(n))










 return stmt2method.get(n);










 else










 throw new IllegalArgumentException("Statement "+n+" is not defined in any method.");










 }





















 @Override










 public Set<Statement> getCallsFromWithin(Method m) {










 public Set<TestStatement> getCallsFromWithin(TestMethod m) {










 throw new IllegalStateException();










 }





















 @Override










 public Collection<Statement> getCallersOf(Method m) {










 Set<Statement> result = Sets.newHashSet();










 public Collection<TestStatement> getCallersOf(TestMethod m) {










 Set<TestStatement> result = Sets.newHashSet();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.destinationMethod.equals(m)) {










 result.add(edge.callSite);



......@@ -215,8 +304,8 @@ public class TestHelper {









 }





















 @Override










 public Collection<Method> getCalleesOfCallAt(Statement n) {










 List<Method> result = Lists.newLinkedList();










 public Collection<TestMethod> getCalleesOfCallAt(TestStatement n) {










 List<TestMethod> result = Lists.newLinkedList();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n)) {










 result.add(edge.destinationMethod);



......@@ -226,7 +315,7 @@ public class TestHelper {









 }





















 @Override










 public Set<Statement> allNonCallStartNodes() {










 public Set<TestStatement> allNonCallStartNodes() {










 throw new IllegalStateException();










 }










 };



......@@ -237,30 +326,31 @@ public class TestHelper {









 remainingFlowFunctions.isEmpty());










 }





















 private void addOrVerifyStmt2Method(Statement stmt, Method m) {










 private void addOrVerifyStmt2Method(TestStatement stmt, TestMethod m) {










 if (stmt2method.containsKey(stmt) && !stmt2method.get(stmt).equals(m)) {










 throw new IllegalArgumentException("Statement " + stmt + " is used in multiple methods: " + m + " and " + stmt2method.get(stmt));










 }










 stmt2method.put(stmt, m);










 }





















 public MethodHelper method(Method method) {










 public MethodHelper method(TestMethod method) {










 MethodHelper h = new MethodHelper(method);










 return h;










 }





















 public class MethodHelper {





















 private Method method;










 private TestMethod method;





















 public MethodHelper(Method method) {










 public MethodHelper(TestMethod method) {










 this.method = method;










 }





















 public void edges(Collection<Edge> edges) {










 for(Edge edge : edges) {










 for(ExpectedFlowFunction ff : edge.flowFunctions) {










 remainingFlowFunctions.add(ff, ff.times);










 if(!remainingFlowFunctions.contains(ff))










 remainingFlowFunctions.add(ff, ff.times);










 }










 










 edge.accept(new EdgeVisitor() {



......@@ -294,19 +384,26 @@ public class TestHelper {









 }










 }





















 public void startPoints(Statement[] startingPoints) {










 public void startPoints(TestStatement[] startingPoints) {










 method2startPoint.putAll(method, Lists.newArrayList(startingPoints));










 }










 }










 










 public static class ExpectedFlowFunction {










 private static String expectedFlowFunctionsToString(ExpectedFlowFunction[] flowFunctions) {










 String result = "";










 for(ExpectedFlowFunction ff : flowFunctions)










 result += ff.source+"->"+Joiner.on(",").join(ff.targets)+ff.transformerString()+", ";










 return result;










 }










 










 public static abstract class ExpectedFlowFunction {





















 public final Fact source;










 public final ConstrainedFact<TestFieldRef, Fact>[] targets;










 public final TestFact source;










 public final TestFact[] targets;










 public Edge edge;










 private int times;





















 public ExpectedFlowFunction(int times, Fact source, ConstrainedFact<TestFieldRef, Fact>... targets) {










 public ExpectedFlowFunction(int times, TestFact source, TestFact... targets) {










 this.times = times;










 this.source = source;










 this.targets = targets;



......@@ -316,6 +413,10 @@ public class TestHelper {









 public String toString() {










 return String.format("%s: %s -> {%s}", edge, source, Joiner.on(",").join(targets));










 }










 










 public abstract String transformerString();





















 public abstract FlowFunction.ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler);










 }










 










 private static interface EdgeVisitor {



......@@ -341,10 +442,10 @@ public class TestHelper {




















 public static class NormalEdge extends Edge {





















 private Statement unit;










 private Statement succUnit;










 private TestStatement unit;










 private TestStatement succUnit;





















 public NormalEdge(Statement unit, Statement succUnit, ExpectedFlowFunction...flowFunctions) {










 public NormalEdge(TestStatement unit, TestStatement succUnit, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.unit = unit;










 this.succUnit = succUnit;



......@@ -363,10 +464,10 @@ public class TestHelper {




















 public static class CallEdge extends Edge {





















 private Statement callSite;










 private Method destinationMethod;










 private TestStatement callSite;










 private TestMethod destinationMethod;





















 public CallEdge(Statement callSite, Method destinationMethod, ExpectedFlowFunction...flowFunctions) {










 public CallEdge(TestStatement callSite, TestMethod destinationMethod, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.destinationMethod = destinationMethod;



......@@ -384,10 +485,10 @@ public class TestHelper {









 }





















 public static class Call2ReturnEdge extends Edge {










 private Statement callSite;










 private Statement returnSite;










 private TestStatement callSite;










 private TestStatement returnSite;





















 public Call2ReturnEdge(Statement callSite, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 public Call2ReturnEdge(TestStatement callSite, TestStatement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.returnSite = returnSite;



......@@ -406,12 +507,12 @@ public class TestHelper {




















 public static class ReturnEdge extends Edge {





















 private Statement exitStmt;










 private Statement returnSite;










 private Statement callSite;










 private Method calleeMethod;










 private TestStatement exitStmt;










 private TestStatement returnSite;










 private TestStatement callSite;










 private TestMethod calleeMethod;





















 public ReturnEdge(Statement callSite, Statement exitStmt, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 public ReturnEdge(TestStatement callSite, TestStatement exitStmt, TestStatement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.exitStmt = exitStmt;



......@@ -438,11 +539,11 @@ public class TestHelper {









 return a.equals(b);










 }





















 public FlowFunctions<Statement, TestFieldRef, Fact, Method> flowFunctions() {










 return new FlowFunctions<Statement, TestFieldRef, Fact, Method>() {










 public FlowFunctions<TestStatement, TestFieldRef, TestFact, TestMethod> flowFunctions() {










 return new FlowFunctions<TestStatement, TestFieldRef, TestFact, TestMethod>() {





















 @Override










 public FlowFunction<TestFieldRef, Fact> getReturnFlowFunction(Statement callSite, Method calleeMethod, Statement exitStmt, Statement returnSite) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getReturnFlowFunction(TestStatement callSite, TestMethod calleeMethod, TestStatement exitStmt, TestStatement returnSite) {










 for (final ReturnEdge edge : returnEdges) {










 if (nullAwareEquals(callSite, edge.callSite) && edge.calleeMethod.equals(calleeMethod)










 && edge.exitStmt.equals(exitStmt) && nullAwareEquals(edge.returnSite, returnSite)) {



......@@ -454,17 +555,17 @@ public class TestHelper {









 }





















 @Override










 public FlowFunction<TestFieldRef, Fact> getNormalFlowFunction(final Statement curr, final Statement succ) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getNormalFlowFunction(final TestStatement curr) {










 for (final NormalEdge edge : normalEdges) {










 if (edge.unit.equals(curr) && edge.succUnit.equals(succ)) {










 if (edge.unit.equals(curr)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for %s -> %s", curr, succ));










 throw new AssertionError(String.format("No Flow Function expected for %s", curr));










 }





















 @Override










 public FlowFunction<TestFieldRef, Fact> getCallToReturnFlowFunction(Statement callSite, Statement returnSite) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getCallToReturnFlowFunction(TestStatement callSite, TestStatement returnSite) {










 for (final Call2ReturnEdge edge : call2retEdges) {










 if (edge.callSite.equals(callSite) && edge.returnSite.equals(returnSite)) {










 return createFlowFunction(edge);



......@@ -474,7 +575,7 @@ public class TestHelper {









 }





















 @Override










 public FlowFunction<TestFieldRef, Fact> getCallFlowFunction(Statement callStmt, Method destinationMethod) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getCallFlowFunction(TestStatement callStmt, TestMethod destinationMethod) {










 for (final CallEdge edge : callEdges) {










 if (edge.callSite.equals(callStmt) && edge.destinationMethod.equals(destinationMethod)) {










 return createFlowFunction(edge);



......@@ -483,20 +584,18 @@ public class TestHelper {









 throw new AssertionError(String.format("No Flow Function expected for call %s -> %s", callStmt, destinationMethod));










 }





















 private FlowFunction<TestFieldRef, Fact> createFlowFunction(final Edge edge) {










 return new FlowFunction<TestFieldRef, Fact>() {










 private FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> createFlowFunction(final Edge edge) {










 return new FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod>() {










 @Override










 public Set<ConstrainedFact<TestFieldRef, Fact>> computeTargets(Fact source) {










 Set<ConstrainedFact<TestFieldRef, Fact>> result = Sets.newHashSet();










 public Set<FlowFunction.ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod>> computeTargets(TestFact source,










 AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 Set<ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod>> result = Sets.newHashSet();










 boolean found = false;










 for (ExpectedFlowFunction ff : edge.flowFunctions) {










 if (ff.source.equals(source.cloneWithAccessPath(source.getAccessPath().setResolver(null)))) {










 if (ff.source.equals(source)) {










 if (remainingFlowFunctions.remove(ff)) {










 for(ConstrainedFact<TestFieldRef, Fact> target : ff.targets) {










 result.add(new ConstrainedFact<TestFieldRef, Fact>(










 target.getFact().cloneWithAccessPath(










 target.getFact().accessPath.setResolver(source.getAccessPath().getResolver())), 










 target.getConstraint()));










 for(TestFact target : ff.targets) {










 result.add(ff.apply(target, accPathHandler));










 }










 found = true;










 } else {



......@@ -515,17 +614,44 @@ public class TestHelper {









 }





















 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {










 FieldSensitiveIFDSSolver<Statement, String, TestFieldRef, Fact, Method, InterproceduralCFG<Statement,Method>> solver = new FieldSensitiveIFDSSolver<Statement,String, TestFieldRef ,Fact, Method, InterproceduralCFG<Statement,Method>>(createTabulationProblem(followReturnsPastSeeds, initialSeeds));










 FieldSensitiveIFDSSolver<TestStatement, TestFieldRef, TestFact, TestMethod, InterproceduralCFG<TestStatement,TestMethod>> solver = new FieldSensitiveIFDSSolver<TestStatement, TestFieldRef ,TestFact, TestMethod, InterproceduralCFG<TestStatement,TestMethod>>(










 createTabulationProblem(followReturnsPastSeeds, initialSeeds), new FactMergeHandler<TestFact>() {










 @Override










 public void merge(TestFact previousFact, TestFact currentFact) {










 }





















 @Override










 public void restoreCallingContext(TestFact factAtReturnSite, TestFact factAtCallSite) {










 }










 










 }, debugger);










 addExpectationsToDebugger();










 solver.solve();










 










 assertAllFlowFunctionsUsed();










 }










 










 










 private IFDSTabulationProblem<Statement, TestFieldRef, Fact, Method, InterproceduralCFG<Statement, Method>> createTabulationProblem(final boolean followReturnsPastSeeds, final String[] initialSeeds) {










 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();










 final FlowFunctions<Statement, TestFieldRef, Fact, Method> flowFunctions = flowFunctions();










 private void addExpectationsToDebugger() {










 for(NormalEdge edge : normalEdges) {










 debugger.expectNormalFlow(edge.unit, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 for(CallEdge edge : callEdges) {










 debugger.expectCallFlow(edge.callSite, edge.destinationMethod, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 for(Call2ReturnEdge edge : call2retEdges) {










 debugger.expectNormalFlow(edge.callSite, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 for(ReturnEdge edge : returnEdges) {










 debugger.expectReturnFlow(edge.exitStmt, edge.returnSite, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 }





















 private IFDSTabulationProblem<TestStatement, TestFieldRef, TestFact, TestMethod, InterproceduralCFG<TestStatement, TestMethod>> createTabulationProblem(final boolean followReturnsPastSeeds, final String[] initialSeeds) {










 final InterproceduralCFG<TestStatement, TestMethod> icfg = buildIcfg();










 final FlowFunctions<TestStatement, TestFieldRef, TestFact, TestMethod> flowFunctions = flowFunctions();










 










 return new IFDSTabulationProblem<Statement,TestFieldRef, Fact, Method, InterproceduralCFG<Statement, Method>>() {










 return new IFDSTabulationProblem<TestStatement,TestFieldRef, TestFact, TestMethod, InterproceduralCFG<TestStatement, TestMethod>>() {





















 @Override










 public boolean followReturnsPastSeeds() {



......@@ -548,27 +674,37 @@ public class TestHelper {









 }





















 @Override










 public FlowFunctions<Statement,TestFieldRef, Fact, Method> flowFunctions() {










 public FlowFunctions<TestStatement,TestFieldRef, TestFact, TestMethod> flowFunctions() {










 return flowFunctions;










 }





















 @Override










 public InterproceduralCFG<Statement, Method> interproceduralCFG() {










 public InterproceduralCFG<TestStatement, TestMethod> interproceduralCFG() {










 return icfg;










 }





















 @Override










 public Map<Statement, Set<Fact>> initialSeeds() {










 Map<Statement, Set<Fact>> result = Maps.newHashMap();










 public Map<TestStatement, Set<TestFact>> initialSeeds() {










 Map<TestStatement, Set<TestFact>> result = Maps.newHashMap();










 for (String stmt : initialSeeds) {










 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));










 result.put(new TestStatement(stmt), Sets.newHashSet(new TestFact("0")));










 }










 return result;










 }





















 @Override










 public Fact zeroValue() {










 return new Fact("0");










 public TestFact zeroValue() {










 return new TestFact("0");










 }










 










 @Override










 public ZeroHandler<TestFieldRef> zeroHandler() {










 return new ZeroHandler<TestFieldRef>() {










 @Override










 public boolean shouldGenerateAccessPath(AccessPath<TestFieldRef> accPath) {










 return true;










 }










 };










 }










 };










 }



......














test/heros/alias/Method.java

â†’

test/heros/alias/TestMethod.java








View file @ 3398e46f






......@@ -10,11 +10,11 @@









 ******************************************************************************/










package heros.alias;





















public class Method {










public class TestMethod {





















 public final String name;










 










 public Method(String name) {










 public TestMethod(String name) {










 this.name = name;










 }














......@@ -32,9 +32,9 @@ public class Method {









 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Method))










 if (!(obj instanceof TestMethod))










 return false;










 Method other = (Method) obj;










 TestMethod other = (TestMethod) obj;










 if (name == null) {










 if (other.name != null)










 return false;



......














test/heros/alias/Statement.java

â†’

test/heros/alias/TestStatement.java








View file @ 3398e46f






......@@ -10,11 +10,11 @@









 ******************************************************************************/










package heros.alias;





















public class Statement {










public class TestStatement {





















 public final String identifier;










 










 public Statement(String identifier) {










 public TestStatement(String identifier) {










 this.identifier = identifier;










 }














......@@ -32,9 +32,9 @@ public class Statement {









 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Statement))










 if (!(obj instanceof TestStatement))










 return false;










 Statement other = (Statement) obj;










 TestStatement other = (TestStatement) obj;










 if (identifier == null) {










 if (other.identifier != null)










 return false;



......














test/heros/utilities/TestHelper.java








View file @ 3398e46f






......@@ -15,13 +15,17 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.alias.TestStatement;










import heros.alias.TestHelper.NormalEdge;










import heros.solver.BiDiIFDSSolver;










import heros.solver.IFDSSolver;





















import java.util.Collection;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Set;





















import com.google.common.base.Joiner;










import com.google.common.base.Predicate;










import com.google.common.collect.HashMultimap;



......@@ -150,6 +154,16 @@ public class TestHelper {









 }










 return result;










 }










 










 @Override










 public List<Statement> getPredsOf(Statement stmt) {










 LinkedList<Statement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.succUnit.equals(stmt))










 result.add(edge.unit);










 }










 return result;










 }





















 @Override










 public Collection<Statement> getStartPointsOf(Method m) {



......









Prev


1


2


3


Next















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

3398e46f















Commit
3398e46f


authored
Feb 25, 2015
by


Johannes Lerch



Browse files




rewrite of ifds solver







parent
55cdd2d8













Changes
45




Hide whitespace changes

Inline
Side-by-side















test/heros/alias/TestFact.java



0 â†’ 100644







View file @ 3398e46f













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















public class TestFact {





















 public final String baseValue;










 










 public TestFact(String baseValue) {










 this.baseValue = baseValue;










 }










 










 @Override










 public String toString() {










 return "[Fact "+baseValue+"]";










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((baseValue == null) ? 0 : baseValue.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof TestFact))










 return false;










 TestFact other = (TestFact) obj;










 if (baseValue == null) {










 if (other.baseValue != null)










 return false;










 } else if (!baseValue.equals(other.baseValue))










 return false;










 return true;










 } 










}














test/heros/alias/TestHelper.java








View file @ 3398e46f






......@@ -37,16 +37,21 @@ import com.google.common.collect.Sets;




















public class TestHelper {





















 private Multimap<Method, Statement> method2startPoint = HashMultimap.create();










 private Multimap<TestMethod, TestStatement> method2startPoint = HashMultimap.create();










 private List<NormalEdge> normalEdges = Lists.newLinkedList();










 private List<CallEdge> callEdges = Lists.newLinkedList();










 private List<Call2ReturnEdge> call2retEdges = Lists.newLinkedList();










 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, Method> stmt2method = Maps.newHashMap();










 private Map<TestStatement, TestMethod> stmt2method = Maps.newHashMap();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();










 private TestDebugger<TestFieldRef, TestFact, TestStatement, TestMethod, InterproceduralCFG<TestStatement, TestMethod>> debugger;





















 public MethodHelper method(String methodName, Statement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new Method(methodName));










 public TestHelper(TestDebugger<TestFieldRef, TestFact, TestStatement, TestMethod, InterproceduralCFG<TestStatement, TestMethod>> debugger) {










 this.debugger = debugger;










 }





















 public MethodHelper method(String methodName, TestStatement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new TestMethod(methodName));










 methodHelper.startPoints(startingPoints);










 for(EdgeBuilder edgeBuilder : edgeBuilders){










 methodHelper.edges(edgeBuilder.edges());



......@@ -54,32 +59,32 @@ public class TestHelper {









 return methodHelper;










 }





















 public static Statement[] startPoints(String... startingPoints) {










 Statement[] result = new Statement[startingPoints.length];










 public static TestStatement[] startPoints(String... startingPoints) {










 TestStatement[] result = new TestStatement[startingPoints.length];










 for (int i = 0; i < result.length; i++) {










 result[i] = new Statement(startingPoints[i]);










 result[i] = new TestStatement(startingPoints[i]);










 }










 return result;










 }





















 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt) {










 return new EdgeBuilder.NormalStmtBuilder(new Statement(stmt));










 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt, ExpectedFlowFunction...flowFunctions) {










 return new EdgeBuilder.NormalStmtBuilder(new TestStatement(stmt), flowFunctions);










 }










 










 public static EdgeBuilder.CallSiteBuilder callSite(String callSite) {










 return new EdgeBuilder.CallSiteBuilder(new Statement(callSite));










 return new EdgeBuilder.CallSiteBuilder(new TestStatement(callSite));










 }










 










 public static EdgeBuilder.ExitStmtBuilder exitStmt(String exitStmt) {










 return new EdgeBuilder.ExitStmtBuilder(new Statement(exitStmt));










 return new EdgeBuilder.ExitStmtBuilder(new TestStatement(exitStmt));










 }










 










 public static Statement over(String callSite) {










 return new Statement(callSite);










 public static TestStatement over(String callSite) {










 return new TestStatement(callSite);










 }










 










 public static Statement to(String returnSite) {










 return new Statement(returnSite);










 public static TestStatement to(String returnSite) {










 return new TestStatement(returnSite);










 }










 










 public static ExpectedFlowFunction kill(String source) {



......@@ -87,27 +92,87 @@ public class TestHelper {









 }










 










 public static ExpectedFlowFunction kill(int times, String source) {










 return new ExpectedFlowFunction(times, new Fact(source));










 return new ExpectedFlowFunction(times, new TestFact(source)) {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 throw new IllegalStateException();










 }










 










 @Override










 public String transformerString() {










 return "";










 }










 };










 }





















 public static Constraint<TestFieldRef> readField(String fieldName) {










 return new FlowFunction.ReadFieldConstraint<TestFieldRef>(new TestFieldRef(fieldName));










 public static AccessPathTransformer readField(final String fieldName) {










 return new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.read(new TestFieldRef(fieldName)).generate(target);










 }





















 @Override










 public String toString() {










 return "read("+fieldName+")";










 }










 };










 }










 










 public static Constraint<TestFieldRef> writeField(String fieldName) {










 return new FlowFunction.WriteFieldConstraint<TestFieldRef>(new TestFieldRef(fieldName));










 public static AccessPathTransformer prependField(final String fieldName) {










 return new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.prepend(new TestFieldRef(fieldName)).generate(target);










 }










 










 @Override










 public String toString() {










 return "prepend("+fieldName+")";










 }










 };










 }










 










 public static ExpectedFlowFunction flow(String source, Constraint<TestFieldRef> constraint, String... targets) {










 return flow(1, source, constraint, targets);










 public static AccessPathTransformer overwriteField(final String fieldName) {










 return new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.overwrite(new TestFieldRef(fieldName)).generate(target);










 }










 










 @Override










 public String toString() {










 return "write("+fieldName+")";










 }










 };










 }










 










 public static ExpectedFlowFunction flow(String source, final AccessPathTransformer transformer, String... targets) {










 return flow(1, source, transformer, targets);










 }










 










 public static ExpectedFlowFunction flow(int times, String source, Constraint<TestFieldRef> constraint, String... targets) {










 ConstrainedFact<TestFieldRef, Fact>[] targetFacts = new ConstrainedFact[targets.length];










 public static ExpectedFlowFunction flow(int times, String source, final AccessPathTransformer transformer, String... targets) {










 TestFact[] targetFacts = new TestFact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new ConstrainedFact<TestFieldRef, Fact>(new Fact(targets[i]), constraint);










 targetFacts[i] = new TestFact(targets[i]);










 }










 return new ExpectedFlowFunction(times, new Fact(source), targetFacts);










 return new ExpectedFlowFunction(times, new TestFact(source), targetFacts) {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return transformer.apply(target, accPathHandler);










 }










 










 @Override










 public String transformerString() {










 return transformer.toString();










 }










 };










 }










 










 private static interface AccessPathTransformer {





















 ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler); 










 










 }










 










 public static ExpectedFlowFunction flow(String source, String... targets) {



......@@ -115,28 +180,39 @@ public class TestHelper {









 }










 










 public static ExpectedFlowFunction flow(int times, String source, String... targets) {










 return flow(times, source, null, targets);










 return flow(times, source, new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.generate(target);










 }










 










 @Override










 public String toString() {










 return "";










 }










 










 }, targets);










 }










 










 public static int times(int times) {










 return times;










 }





















 public InterproceduralCFG<Statement, Method> buildIcfg() {










 return new InterproceduralCFG<Statement, Method>() {










 public InterproceduralCFG<TestStatement, TestMethod> buildIcfg() {










 return new InterproceduralCFG<TestStatement, TestMethod>() {





















 @Override










 public boolean isStartPoint(Statement stmt) {










 public boolean isStartPoint(TestStatement stmt) {










 return method2startPoint.values().contains(stmt);










 }





















 @Override










 public boolean isFallThroughSuccessor(Statement stmt, Statement succ) {










 public boolean isFallThroughSuccessor(TestStatement stmt, TestStatement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public boolean isExitStmt(Statement stmt) {










 public boolean isExitStmt(TestStatement stmt) {










 for(ReturnEdge edge : returnEdges) {










 if(edge.exitStmt.equals(stmt))










 return true;



......@@ -145,7 +221,7 @@ public class TestHelper {









 }





















 @Override










 public boolean isCallStmt(final Statement stmt) {










 public boolean isCallStmt(final TestStatement stmt) {










 return Iterables.any(callEdges, new Predicate<CallEdge>() {










 @Override










 public boolean apply(CallEdge edge) {



......@@ -155,13 +231,13 @@ public class TestHelper {









 }





















 @Override










 public boolean isBranchTarget(Statement stmt, Statement succ) {










 public boolean isBranchTarget(TestStatement stmt, TestStatement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public List<Statement> getSuccsOf(Statement n) {










 LinkedList<Statement> result = Lists.newLinkedList();










 public List<TestStatement> getSuccsOf(TestStatement n) {










 LinkedList<TestStatement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.unit.equals(n))










 result.add(edge.succUnit);



......@@ -170,13 +246,23 @@ public class TestHelper {









 }





















 @Override










 public Collection<Statement> getStartPointsOf(Method m) {










 public List<TestStatement> getPredsOf(TestStatement stmt) {










 LinkedList<TestStatement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.succUnit.equals(stmt))










 result.add(edge.unit);










 }










 return result;










 }





















 @Override










 public Collection<TestStatement> getStartPointsOf(TestMethod m) {










 return method2startPoint.get(m);










 }





















 @Override










 public Collection<Statement> getReturnSitesOfCallAt(Statement n) {










 Set<Statement> result = Sets.newHashSet();










 public Collection<TestStatement> getReturnSitesOfCallAt(TestStatement n) {










 Set<TestStatement> result = Sets.newHashSet();










 for (Call2ReturnEdge edge : call2retEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n))










 result.add(edge.returnSite);



......@@ -189,18 +275,21 @@ public class TestHelper {









 }





















 @Override










 public Method getMethodOf(Statement n) {










 return stmt2method.get(n);










 public TestMethod getMethodOf(TestStatement n) {










 if(stmt2method.containsKey(n))










 return stmt2method.get(n);










 else










 throw new IllegalArgumentException("Statement "+n+" is not defined in any method.");










 }





















 @Override










 public Set<Statement> getCallsFromWithin(Method m) {










 public Set<TestStatement> getCallsFromWithin(TestMethod m) {










 throw new IllegalStateException();










 }





















 @Override










 public Collection<Statement> getCallersOf(Method m) {










 Set<Statement> result = Sets.newHashSet();










 public Collection<TestStatement> getCallersOf(TestMethod m) {










 Set<TestStatement> result = Sets.newHashSet();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.destinationMethod.equals(m)) {










 result.add(edge.callSite);



......@@ -215,8 +304,8 @@ public class TestHelper {









 }





















 @Override










 public Collection<Method> getCalleesOfCallAt(Statement n) {










 List<Method> result = Lists.newLinkedList();










 public Collection<TestMethod> getCalleesOfCallAt(TestStatement n) {










 List<TestMethod> result = Lists.newLinkedList();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n)) {










 result.add(edge.destinationMethod);



......@@ -226,7 +315,7 @@ public class TestHelper {









 }





















 @Override










 public Set<Statement> allNonCallStartNodes() {










 public Set<TestStatement> allNonCallStartNodes() {










 throw new IllegalStateException();










 }










 };



......@@ -237,30 +326,31 @@ public class TestHelper {









 remainingFlowFunctions.isEmpty());










 }





















 private void addOrVerifyStmt2Method(Statement stmt, Method m) {










 private void addOrVerifyStmt2Method(TestStatement stmt, TestMethod m) {










 if (stmt2method.containsKey(stmt) && !stmt2method.get(stmt).equals(m)) {










 throw new IllegalArgumentException("Statement " + stmt + " is used in multiple methods: " + m + " and " + stmt2method.get(stmt));










 }










 stmt2method.put(stmt, m);










 }





















 public MethodHelper method(Method method) {










 public MethodHelper method(TestMethod method) {










 MethodHelper h = new MethodHelper(method);










 return h;










 }





















 public class MethodHelper {





















 private Method method;










 private TestMethod method;





















 public MethodHelper(Method method) {










 public MethodHelper(TestMethod method) {










 this.method = method;










 }





















 public void edges(Collection<Edge> edges) {










 for(Edge edge : edges) {










 for(ExpectedFlowFunction ff : edge.flowFunctions) {










 remainingFlowFunctions.add(ff, ff.times);










 if(!remainingFlowFunctions.contains(ff))










 remainingFlowFunctions.add(ff, ff.times);










 }










 










 edge.accept(new EdgeVisitor() {



......@@ -294,19 +384,26 @@ public class TestHelper {









 }










 }





















 public void startPoints(Statement[] startingPoints) {










 public void startPoints(TestStatement[] startingPoints) {










 method2startPoint.putAll(method, Lists.newArrayList(startingPoints));










 }










 }










 










 public static class ExpectedFlowFunction {










 private static String expectedFlowFunctionsToString(ExpectedFlowFunction[] flowFunctions) {










 String result = "";










 for(ExpectedFlowFunction ff : flowFunctions)










 result += ff.source+"->"+Joiner.on(",").join(ff.targets)+ff.transformerString()+", ";










 return result;










 }










 










 public static abstract class ExpectedFlowFunction {





















 public final Fact source;










 public final ConstrainedFact<TestFieldRef, Fact>[] targets;










 public final TestFact source;










 public final TestFact[] targets;










 public Edge edge;










 private int times;





















 public ExpectedFlowFunction(int times, Fact source, ConstrainedFact<TestFieldRef, Fact>... targets) {










 public ExpectedFlowFunction(int times, TestFact source, TestFact... targets) {










 this.times = times;










 this.source = source;










 this.targets = targets;



......@@ -316,6 +413,10 @@ public class TestHelper {









 public String toString() {










 return String.format("%s: %s -> {%s}", edge, source, Joiner.on(",").join(targets));










 }










 










 public abstract String transformerString();





















 public abstract FlowFunction.ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler);










 }










 










 private static interface EdgeVisitor {



......@@ -341,10 +442,10 @@ public class TestHelper {




















 public static class NormalEdge extends Edge {





















 private Statement unit;










 private Statement succUnit;










 private TestStatement unit;










 private TestStatement succUnit;





















 public NormalEdge(Statement unit, Statement succUnit, ExpectedFlowFunction...flowFunctions) {










 public NormalEdge(TestStatement unit, TestStatement succUnit, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.unit = unit;










 this.succUnit = succUnit;



......@@ -363,10 +464,10 @@ public class TestHelper {




















 public static class CallEdge extends Edge {





















 private Statement callSite;










 private Method destinationMethod;










 private TestStatement callSite;










 private TestMethod destinationMethod;





















 public CallEdge(Statement callSite, Method destinationMethod, ExpectedFlowFunction...flowFunctions) {










 public CallEdge(TestStatement callSite, TestMethod destinationMethod, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.destinationMethod = destinationMethod;



......@@ -384,10 +485,10 @@ public class TestHelper {









 }





















 public static class Call2ReturnEdge extends Edge {










 private Statement callSite;










 private Statement returnSite;










 private TestStatement callSite;










 private TestStatement returnSite;





















 public Call2ReturnEdge(Statement callSite, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 public Call2ReturnEdge(TestStatement callSite, TestStatement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.returnSite = returnSite;



......@@ -406,12 +507,12 @@ public class TestHelper {




















 public static class ReturnEdge extends Edge {





















 private Statement exitStmt;










 private Statement returnSite;










 private Statement callSite;










 private Method calleeMethod;










 private TestStatement exitStmt;










 private TestStatement returnSite;










 private TestStatement callSite;










 private TestMethod calleeMethod;





















 public ReturnEdge(Statement callSite, Statement exitStmt, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 public ReturnEdge(TestStatement callSite, TestStatement exitStmt, TestStatement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.exitStmt = exitStmt;



......@@ -438,11 +539,11 @@ public class TestHelper {









 return a.equals(b);










 }





















 public FlowFunctions<Statement, TestFieldRef, Fact, Method> flowFunctions() {










 return new FlowFunctions<Statement, TestFieldRef, Fact, Method>() {










 public FlowFunctions<TestStatement, TestFieldRef, TestFact, TestMethod> flowFunctions() {










 return new FlowFunctions<TestStatement, TestFieldRef, TestFact, TestMethod>() {





















 @Override










 public FlowFunction<TestFieldRef, Fact> getReturnFlowFunction(Statement callSite, Method calleeMethod, Statement exitStmt, Statement returnSite) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getReturnFlowFunction(TestStatement callSite, TestMethod calleeMethod, TestStatement exitStmt, TestStatement returnSite) {










 for (final ReturnEdge edge : returnEdges) {










 if (nullAwareEquals(callSite, edge.callSite) && edge.calleeMethod.equals(calleeMethod)










 && edge.exitStmt.equals(exitStmt) && nullAwareEquals(edge.returnSite, returnSite)) {



......@@ -454,17 +555,17 @@ public class TestHelper {









 }





















 @Override










 public FlowFunction<TestFieldRef, Fact> getNormalFlowFunction(final Statement curr, final Statement succ) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getNormalFlowFunction(final TestStatement curr) {










 for (final NormalEdge edge : normalEdges) {










 if (edge.unit.equals(curr) && edge.succUnit.equals(succ)) {










 if (edge.unit.equals(curr)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for %s -> %s", curr, succ));










 throw new AssertionError(String.format("No Flow Function expected for %s", curr));










 }





















 @Override










 public FlowFunction<TestFieldRef, Fact> getCallToReturnFlowFunction(Statement callSite, Statement returnSite) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getCallToReturnFlowFunction(TestStatement callSite, TestStatement returnSite) {










 for (final Call2ReturnEdge edge : call2retEdges) {










 if (edge.callSite.equals(callSite) && edge.returnSite.equals(returnSite)) {










 return createFlowFunction(edge);



......@@ -474,7 +575,7 @@ public class TestHelper {









 }





















 @Override










 public FlowFunction<TestFieldRef, Fact> getCallFlowFunction(Statement callStmt, Method destinationMethod) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getCallFlowFunction(TestStatement callStmt, TestMethod destinationMethod) {










 for (final CallEdge edge : callEdges) {










 if (edge.callSite.equals(callStmt) && edge.destinationMethod.equals(destinationMethod)) {










 return createFlowFunction(edge);



......@@ -483,20 +584,18 @@ public class TestHelper {









 throw new AssertionError(String.format("No Flow Function expected for call %s -> %s", callStmt, destinationMethod));










 }





















 private FlowFunction<TestFieldRef, Fact> createFlowFunction(final Edge edge) {










 return new FlowFunction<TestFieldRef, Fact>() {










 private FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> createFlowFunction(final Edge edge) {










 return new FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod>() {










 @Override










 public Set<ConstrainedFact<TestFieldRef, Fact>> computeTargets(Fact source) {










 Set<ConstrainedFact<TestFieldRef, Fact>> result = Sets.newHashSet();










 public Set<FlowFunction.ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod>> computeTargets(TestFact source,










 AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 Set<ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod>> result = Sets.newHashSet();










 boolean found = false;










 for (ExpectedFlowFunction ff : edge.flowFunctions) {










 if (ff.source.equals(source.cloneWithAccessPath(source.getAccessPath().setResolver(null)))) {










 if (ff.source.equals(source)) {










 if (remainingFlowFunctions.remove(ff)) {










 for(ConstrainedFact<TestFieldRef, Fact> target : ff.targets) {










 result.add(new ConstrainedFact<TestFieldRef, Fact>(










 target.getFact().cloneWithAccessPath(










 target.getFact().accessPath.setResolver(source.getAccessPath().getResolver())), 










 target.getConstraint()));










 for(TestFact target : ff.targets) {










 result.add(ff.apply(target, accPathHandler));










 }










 found = true;










 } else {



......@@ -515,17 +614,44 @@ public class TestHelper {









 }





















 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {










 FieldSensitiveIFDSSolver<Statement, String, TestFieldRef, Fact, Method, InterproceduralCFG<Statement,Method>> solver = new FieldSensitiveIFDSSolver<Statement,String, TestFieldRef ,Fact, Method, InterproceduralCFG<Statement,Method>>(createTabulationProblem(followReturnsPastSeeds, initialSeeds));










 FieldSensitiveIFDSSolver<TestStatement, TestFieldRef, TestFact, TestMethod, InterproceduralCFG<TestStatement,TestMethod>> solver = new FieldSensitiveIFDSSolver<TestStatement, TestFieldRef ,TestFact, TestMethod, InterproceduralCFG<TestStatement,TestMethod>>(










 createTabulationProblem(followReturnsPastSeeds, initialSeeds), new FactMergeHandler<TestFact>() {










 @Override










 public void merge(TestFact previousFact, TestFact currentFact) {










 }





















 @Override










 public void restoreCallingContext(TestFact factAtReturnSite, TestFact factAtCallSite) {










 }










 










 }, debugger);










 addExpectationsToDebugger();










 solver.solve();










 










 assertAllFlowFunctionsUsed();










 }










 










 










 private IFDSTabulationProblem<Statement, TestFieldRef, Fact, Method, InterproceduralCFG<Statement, Method>> createTabulationProblem(final boolean followReturnsPastSeeds, final String[] initialSeeds) {










 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();










 final FlowFunctions<Statement, TestFieldRef, Fact, Method> flowFunctions = flowFunctions();










 private void addExpectationsToDebugger() {










 for(NormalEdge edge : normalEdges) {










 debugger.expectNormalFlow(edge.unit, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 for(CallEdge edge : callEdges) {










 debugger.expectCallFlow(edge.callSite, edge.destinationMethod, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 for(Call2ReturnEdge edge : call2retEdges) {










 debugger.expectNormalFlow(edge.callSite, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 for(ReturnEdge edge : returnEdges) {










 debugger.expectReturnFlow(edge.exitStmt, edge.returnSite, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 }





















 private IFDSTabulationProblem<TestStatement, TestFieldRef, TestFact, TestMethod, InterproceduralCFG<TestStatement, TestMethod>> createTabulationProblem(final boolean followReturnsPastSeeds, final String[] initialSeeds) {










 final InterproceduralCFG<TestStatement, TestMethod> icfg = buildIcfg();










 final FlowFunctions<TestStatement, TestFieldRef, TestFact, TestMethod> flowFunctions = flowFunctions();










 










 return new IFDSTabulationProblem<Statement,TestFieldRef, Fact, Method, InterproceduralCFG<Statement, Method>>() {










 return new IFDSTabulationProblem<TestStatement,TestFieldRef, TestFact, TestMethod, InterproceduralCFG<TestStatement, TestMethod>>() {





















 @Override










 public boolean followReturnsPastSeeds() {



......@@ -548,27 +674,37 @@ public class TestHelper {









 }





















 @Override










 public FlowFunctions<Statement,TestFieldRef, Fact, Method> flowFunctions() {










 public FlowFunctions<TestStatement,TestFieldRef, TestFact, TestMethod> flowFunctions() {










 return flowFunctions;










 }





















 @Override










 public InterproceduralCFG<Statement, Method> interproceduralCFG() {










 public InterproceduralCFG<TestStatement, TestMethod> interproceduralCFG() {










 return icfg;










 }





















 @Override










 public Map<Statement, Set<Fact>> initialSeeds() {










 Map<Statement, Set<Fact>> result = Maps.newHashMap();










 public Map<TestStatement, Set<TestFact>> initialSeeds() {










 Map<TestStatement, Set<TestFact>> result = Maps.newHashMap();










 for (String stmt : initialSeeds) {










 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));










 result.put(new TestStatement(stmt), Sets.newHashSet(new TestFact("0")));










 }










 return result;










 }





















 @Override










 public Fact zeroValue() {










 return new Fact("0");










 public TestFact zeroValue() {










 return new TestFact("0");










 }










 










 @Override










 public ZeroHandler<TestFieldRef> zeroHandler() {










 return new ZeroHandler<TestFieldRef>() {










 @Override










 public boolean shouldGenerateAccessPath(AccessPath<TestFieldRef> accPath) {










 return true;










 }










 };










 }










 };










 }



......














test/heros/alias/Method.java

â†’

test/heros/alias/TestMethod.java








View file @ 3398e46f






......@@ -10,11 +10,11 @@









 ******************************************************************************/










package heros.alias;





















public class Method {










public class TestMethod {





















 public final String name;










 










 public Method(String name) {










 public TestMethod(String name) {










 this.name = name;










 }














......@@ -32,9 +32,9 @@ public class Method {









 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Method))










 if (!(obj instanceof TestMethod))










 return false;










 Method other = (Method) obj;










 TestMethod other = (TestMethod) obj;










 if (name == null) {










 if (other.name != null)










 return false;



......














test/heros/alias/Statement.java

â†’

test/heros/alias/TestStatement.java








View file @ 3398e46f






......@@ -10,11 +10,11 @@









 ******************************************************************************/










package heros.alias;





















public class Statement {










public class TestStatement {





















 public final String identifier;










 










 public Statement(String identifier) {










 public TestStatement(String identifier) {










 this.identifier = identifier;










 }














......@@ -32,9 +32,9 @@ public class Statement {









 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Statement))










 if (!(obj instanceof TestStatement))










 return false;










 Statement other = (Statement) obj;










 TestStatement other = (TestStatement) obj;










 if (identifier == null) {










 if (other.identifier != null)










 return false;



......














test/heros/utilities/TestHelper.java








View file @ 3398e46f






......@@ -15,13 +15,17 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.alias.TestStatement;










import heros.alias.TestHelper.NormalEdge;










import heros.solver.BiDiIFDSSolver;










import heros.solver.IFDSSolver;





















import java.util.Collection;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Set;





















import com.google.common.base.Joiner;










import com.google.common.base.Predicate;










import com.google.common.collect.HashMultimap;



......@@ -150,6 +154,16 @@ public class TestHelper {









 }










 return result;










 }










 










 @Override










 public List<Statement> getPredsOf(Statement stmt) {










 LinkedList<Statement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.succUnit.equals(stmt))










 result.add(edge.unit);










 }










 return result;










 }





















 @Override










 public Collection<Statement> getStartPointsOf(Method m) {



......









Prev


1


2


3


Next















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

3398e46f







Open sidebar



Joshua Garcia heros
Commits

3398e46f




Open sidebar

Joshua Garcia heros
Commits

3398e46f


Joshua GarciaherosherosCommits
3398e46f








Commit
3398e46f


authored
Feb 25, 2015
by


Johannes Lerch



Browse files




rewrite of ifds solver







parent
55cdd2d8













Changes
45




Hide whitespace changes

Inline
Side-by-side















test/heros/alias/TestFact.java



0 â†’ 100644







View file @ 3398e46f













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















public class TestFact {





















 public final String baseValue;










 










 public TestFact(String baseValue) {










 this.baseValue = baseValue;










 }










 










 @Override










 public String toString() {










 return "[Fact "+baseValue+"]";










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((baseValue == null) ? 0 : baseValue.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof TestFact))










 return false;










 TestFact other = (TestFact) obj;










 if (baseValue == null) {










 if (other.baseValue != null)










 return false;










 } else if (!baseValue.equals(other.baseValue))










 return false;










 return true;










 } 










}














test/heros/alias/TestHelper.java








View file @ 3398e46f






......@@ -37,16 +37,21 @@ import com.google.common.collect.Sets;




















public class TestHelper {





















 private Multimap<Method, Statement> method2startPoint = HashMultimap.create();










 private Multimap<TestMethod, TestStatement> method2startPoint = HashMultimap.create();










 private List<NormalEdge> normalEdges = Lists.newLinkedList();










 private List<CallEdge> callEdges = Lists.newLinkedList();










 private List<Call2ReturnEdge> call2retEdges = Lists.newLinkedList();










 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, Method> stmt2method = Maps.newHashMap();










 private Map<TestStatement, TestMethod> stmt2method = Maps.newHashMap();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();










 private TestDebugger<TestFieldRef, TestFact, TestStatement, TestMethod, InterproceduralCFG<TestStatement, TestMethod>> debugger;





















 public MethodHelper method(String methodName, Statement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new Method(methodName));










 public TestHelper(TestDebugger<TestFieldRef, TestFact, TestStatement, TestMethod, InterproceduralCFG<TestStatement, TestMethod>> debugger) {










 this.debugger = debugger;










 }





















 public MethodHelper method(String methodName, TestStatement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new TestMethod(methodName));










 methodHelper.startPoints(startingPoints);










 for(EdgeBuilder edgeBuilder : edgeBuilders){










 methodHelper.edges(edgeBuilder.edges());



......@@ -54,32 +59,32 @@ public class TestHelper {









 return methodHelper;










 }





















 public static Statement[] startPoints(String... startingPoints) {










 Statement[] result = new Statement[startingPoints.length];










 public static TestStatement[] startPoints(String... startingPoints) {










 TestStatement[] result = new TestStatement[startingPoints.length];










 for (int i = 0; i < result.length; i++) {










 result[i] = new Statement(startingPoints[i]);










 result[i] = new TestStatement(startingPoints[i]);










 }










 return result;










 }





















 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt) {










 return new EdgeBuilder.NormalStmtBuilder(new Statement(stmt));










 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt, ExpectedFlowFunction...flowFunctions) {










 return new EdgeBuilder.NormalStmtBuilder(new TestStatement(stmt), flowFunctions);










 }










 










 public static EdgeBuilder.CallSiteBuilder callSite(String callSite) {










 return new EdgeBuilder.CallSiteBuilder(new Statement(callSite));










 return new EdgeBuilder.CallSiteBuilder(new TestStatement(callSite));










 }










 










 public static EdgeBuilder.ExitStmtBuilder exitStmt(String exitStmt) {










 return new EdgeBuilder.ExitStmtBuilder(new Statement(exitStmt));










 return new EdgeBuilder.ExitStmtBuilder(new TestStatement(exitStmt));










 }










 










 public static Statement over(String callSite) {










 return new Statement(callSite);










 public static TestStatement over(String callSite) {










 return new TestStatement(callSite);










 }










 










 public static Statement to(String returnSite) {










 return new Statement(returnSite);










 public static TestStatement to(String returnSite) {










 return new TestStatement(returnSite);










 }










 










 public static ExpectedFlowFunction kill(String source) {



......@@ -87,27 +92,87 @@ public class TestHelper {









 }










 










 public static ExpectedFlowFunction kill(int times, String source) {










 return new ExpectedFlowFunction(times, new Fact(source));










 return new ExpectedFlowFunction(times, new TestFact(source)) {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 throw new IllegalStateException();










 }










 










 @Override










 public String transformerString() {










 return "";










 }










 };










 }





















 public static Constraint<TestFieldRef> readField(String fieldName) {










 return new FlowFunction.ReadFieldConstraint<TestFieldRef>(new TestFieldRef(fieldName));










 public static AccessPathTransformer readField(final String fieldName) {










 return new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.read(new TestFieldRef(fieldName)).generate(target);










 }





















 @Override










 public String toString() {










 return "read("+fieldName+")";










 }










 };










 }










 










 public static Constraint<TestFieldRef> writeField(String fieldName) {










 return new FlowFunction.WriteFieldConstraint<TestFieldRef>(new TestFieldRef(fieldName));










 public static AccessPathTransformer prependField(final String fieldName) {










 return new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.prepend(new TestFieldRef(fieldName)).generate(target);










 }










 










 @Override










 public String toString() {










 return "prepend("+fieldName+")";










 }










 };










 }










 










 public static ExpectedFlowFunction flow(String source, Constraint<TestFieldRef> constraint, String... targets) {










 return flow(1, source, constraint, targets);










 public static AccessPathTransformer overwriteField(final String fieldName) {










 return new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.overwrite(new TestFieldRef(fieldName)).generate(target);










 }










 










 @Override










 public String toString() {










 return "write("+fieldName+")";










 }










 };










 }










 










 public static ExpectedFlowFunction flow(String source, final AccessPathTransformer transformer, String... targets) {










 return flow(1, source, transformer, targets);










 }










 










 public static ExpectedFlowFunction flow(int times, String source, Constraint<TestFieldRef> constraint, String... targets) {










 ConstrainedFact<TestFieldRef, Fact>[] targetFacts = new ConstrainedFact[targets.length];










 public static ExpectedFlowFunction flow(int times, String source, final AccessPathTransformer transformer, String... targets) {










 TestFact[] targetFacts = new TestFact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new ConstrainedFact<TestFieldRef, Fact>(new Fact(targets[i]), constraint);










 targetFacts[i] = new TestFact(targets[i]);










 }










 return new ExpectedFlowFunction(times, new Fact(source), targetFacts);










 return new ExpectedFlowFunction(times, new TestFact(source), targetFacts) {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return transformer.apply(target, accPathHandler);










 }










 










 @Override










 public String transformerString() {










 return transformer.toString();










 }










 };










 }










 










 private static interface AccessPathTransformer {





















 ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler); 










 










 }










 










 public static ExpectedFlowFunction flow(String source, String... targets) {



......@@ -115,28 +180,39 @@ public class TestHelper {









 }










 










 public static ExpectedFlowFunction flow(int times, String source, String... targets) {










 return flow(times, source, null, targets);










 return flow(times, source, new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.generate(target);










 }










 










 @Override










 public String toString() {










 return "";










 }










 










 }, targets);










 }










 










 public static int times(int times) {










 return times;










 }





















 public InterproceduralCFG<Statement, Method> buildIcfg() {










 return new InterproceduralCFG<Statement, Method>() {










 public InterproceduralCFG<TestStatement, TestMethod> buildIcfg() {










 return new InterproceduralCFG<TestStatement, TestMethod>() {





















 @Override










 public boolean isStartPoint(Statement stmt) {










 public boolean isStartPoint(TestStatement stmt) {










 return method2startPoint.values().contains(stmt);










 }





















 @Override










 public boolean isFallThroughSuccessor(Statement stmt, Statement succ) {










 public boolean isFallThroughSuccessor(TestStatement stmt, TestStatement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public boolean isExitStmt(Statement stmt) {










 public boolean isExitStmt(TestStatement stmt) {










 for(ReturnEdge edge : returnEdges) {










 if(edge.exitStmt.equals(stmt))










 return true;



......@@ -145,7 +221,7 @@ public class TestHelper {









 }





















 @Override










 public boolean isCallStmt(final Statement stmt) {










 public boolean isCallStmt(final TestStatement stmt) {










 return Iterables.any(callEdges, new Predicate<CallEdge>() {










 @Override










 public boolean apply(CallEdge edge) {



......@@ -155,13 +231,13 @@ public class TestHelper {









 }





















 @Override










 public boolean isBranchTarget(Statement stmt, Statement succ) {










 public boolean isBranchTarget(TestStatement stmt, TestStatement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public List<Statement> getSuccsOf(Statement n) {










 LinkedList<Statement> result = Lists.newLinkedList();










 public List<TestStatement> getSuccsOf(TestStatement n) {










 LinkedList<TestStatement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.unit.equals(n))










 result.add(edge.succUnit);



......@@ -170,13 +246,23 @@ public class TestHelper {









 }





















 @Override










 public Collection<Statement> getStartPointsOf(Method m) {










 public List<TestStatement> getPredsOf(TestStatement stmt) {










 LinkedList<TestStatement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.succUnit.equals(stmt))










 result.add(edge.unit);










 }










 return result;










 }





















 @Override










 public Collection<TestStatement> getStartPointsOf(TestMethod m) {










 return method2startPoint.get(m);










 }





















 @Override










 public Collection<Statement> getReturnSitesOfCallAt(Statement n) {










 Set<Statement> result = Sets.newHashSet();










 public Collection<TestStatement> getReturnSitesOfCallAt(TestStatement n) {










 Set<TestStatement> result = Sets.newHashSet();










 for (Call2ReturnEdge edge : call2retEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n))










 result.add(edge.returnSite);



......@@ -189,18 +275,21 @@ public class TestHelper {









 }





















 @Override










 public Method getMethodOf(Statement n) {










 return stmt2method.get(n);










 public TestMethod getMethodOf(TestStatement n) {










 if(stmt2method.containsKey(n))










 return stmt2method.get(n);










 else










 throw new IllegalArgumentException("Statement "+n+" is not defined in any method.");










 }





















 @Override










 public Set<Statement> getCallsFromWithin(Method m) {










 public Set<TestStatement> getCallsFromWithin(TestMethod m) {










 throw new IllegalStateException();










 }





















 @Override










 public Collection<Statement> getCallersOf(Method m) {










 Set<Statement> result = Sets.newHashSet();










 public Collection<TestStatement> getCallersOf(TestMethod m) {










 Set<TestStatement> result = Sets.newHashSet();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.destinationMethod.equals(m)) {










 result.add(edge.callSite);



......@@ -215,8 +304,8 @@ public class TestHelper {









 }





















 @Override










 public Collection<Method> getCalleesOfCallAt(Statement n) {










 List<Method> result = Lists.newLinkedList();










 public Collection<TestMethod> getCalleesOfCallAt(TestStatement n) {










 List<TestMethod> result = Lists.newLinkedList();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n)) {










 result.add(edge.destinationMethod);



......@@ -226,7 +315,7 @@ public class TestHelper {









 }





















 @Override










 public Set<Statement> allNonCallStartNodes() {










 public Set<TestStatement> allNonCallStartNodes() {










 throw new IllegalStateException();










 }










 };



......@@ -237,30 +326,31 @@ public class TestHelper {









 remainingFlowFunctions.isEmpty());










 }





















 private void addOrVerifyStmt2Method(Statement stmt, Method m) {










 private void addOrVerifyStmt2Method(TestStatement stmt, TestMethod m) {










 if (stmt2method.containsKey(stmt) && !stmt2method.get(stmt).equals(m)) {










 throw new IllegalArgumentException("Statement " + stmt + " is used in multiple methods: " + m + " and " + stmt2method.get(stmt));










 }










 stmt2method.put(stmt, m);










 }





















 public MethodHelper method(Method method) {










 public MethodHelper method(TestMethod method) {










 MethodHelper h = new MethodHelper(method);










 return h;










 }





















 public class MethodHelper {





















 private Method method;










 private TestMethod method;





















 public MethodHelper(Method method) {










 public MethodHelper(TestMethod method) {










 this.method = method;










 }





















 public void edges(Collection<Edge> edges) {










 for(Edge edge : edges) {










 for(ExpectedFlowFunction ff : edge.flowFunctions) {










 remainingFlowFunctions.add(ff, ff.times);










 if(!remainingFlowFunctions.contains(ff))










 remainingFlowFunctions.add(ff, ff.times);










 }










 










 edge.accept(new EdgeVisitor() {



......@@ -294,19 +384,26 @@ public class TestHelper {









 }










 }





















 public void startPoints(Statement[] startingPoints) {










 public void startPoints(TestStatement[] startingPoints) {










 method2startPoint.putAll(method, Lists.newArrayList(startingPoints));










 }










 }










 










 public static class ExpectedFlowFunction {










 private static String expectedFlowFunctionsToString(ExpectedFlowFunction[] flowFunctions) {










 String result = "";










 for(ExpectedFlowFunction ff : flowFunctions)










 result += ff.source+"->"+Joiner.on(",").join(ff.targets)+ff.transformerString()+", ";










 return result;










 }










 










 public static abstract class ExpectedFlowFunction {





















 public final Fact source;










 public final ConstrainedFact<TestFieldRef, Fact>[] targets;










 public final TestFact source;










 public final TestFact[] targets;










 public Edge edge;










 private int times;





















 public ExpectedFlowFunction(int times, Fact source, ConstrainedFact<TestFieldRef, Fact>... targets) {










 public ExpectedFlowFunction(int times, TestFact source, TestFact... targets) {










 this.times = times;










 this.source = source;










 this.targets = targets;



......@@ -316,6 +413,10 @@ public class TestHelper {









 public String toString() {










 return String.format("%s: %s -> {%s}", edge, source, Joiner.on(",").join(targets));










 }










 










 public abstract String transformerString();





















 public abstract FlowFunction.ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler);










 }










 










 private static interface EdgeVisitor {



......@@ -341,10 +442,10 @@ public class TestHelper {




















 public static class NormalEdge extends Edge {





















 private Statement unit;










 private Statement succUnit;










 private TestStatement unit;










 private TestStatement succUnit;





















 public NormalEdge(Statement unit, Statement succUnit, ExpectedFlowFunction...flowFunctions) {










 public NormalEdge(TestStatement unit, TestStatement succUnit, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.unit = unit;










 this.succUnit = succUnit;



......@@ -363,10 +464,10 @@ public class TestHelper {




















 public static class CallEdge extends Edge {





















 private Statement callSite;










 private Method destinationMethod;










 private TestStatement callSite;










 private TestMethod destinationMethod;





















 public CallEdge(Statement callSite, Method destinationMethod, ExpectedFlowFunction...flowFunctions) {










 public CallEdge(TestStatement callSite, TestMethod destinationMethod, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.destinationMethod = destinationMethod;



......@@ -384,10 +485,10 @@ public class TestHelper {









 }





















 public static class Call2ReturnEdge extends Edge {










 private Statement callSite;










 private Statement returnSite;










 private TestStatement callSite;










 private TestStatement returnSite;





















 public Call2ReturnEdge(Statement callSite, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 public Call2ReturnEdge(TestStatement callSite, TestStatement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.returnSite = returnSite;



......@@ -406,12 +507,12 @@ public class TestHelper {




















 public static class ReturnEdge extends Edge {





















 private Statement exitStmt;










 private Statement returnSite;










 private Statement callSite;










 private Method calleeMethod;










 private TestStatement exitStmt;










 private TestStatement returnSite;










 private TestStatement callSite;










 private TestMethod calleeMethod;





















 public ReturnEdge(Statement callSite, Statement exitStmt, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 public ReturnEdge(TestStatement callSite, TestStatement exitStmt, TestStatement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.exitStmt = exitStmt;



......@@ -438,11 +539,11 @@ public class TestHelper {









 return a.equals(b);










 }





















 public FlowFunctions<Statement, TestFieldRef, Fact, Method> flowFunctions() {










 return new FlowFunctions<Statement, TestFieldRef, Fact, Method>() {










 public FlowFunctions<TestStatement, TestFieldRef, TestFact, TestMethod> flowFunctions() {










 return new FlowFunctions<TestStatement, TestFieldRef, TestFact, TestMethod>() {





















 @Override










 public FlowFunction<TestFieldRef, Fact> getReturnFlowFunction(Statement callSite, Method calleeMethod, Statement exitStmt, Statement returnSite) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getReturnFlowFunction(TestStatement callSite, TestMethod calleeMethod, TestStatement exitStmt, TestStatement returnSite) {










 for (final ReturnEdge edge : returnEdges) {










 if (nullAwareEquals(callSite, edge.callSite) && edge.calleeMethod.equals(calleeMethod)










 && edge.exitStmt.equals(exitStmt) && nullAwareEquals(edge.returnSite, returnSite)) {



......@@ -454,17 +555,17 @@ public class TestHelper {









 }





















 @Override










 public FlowFunction<TestFieldRef, Fact> getNormalFlowFunction(final Statement curr, final Statement succ) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getNormalFlowFunction(final TestStatement curr) {










 for (final NormalEdge edge : normalEdges) {










 if (edge.unit.equals(curr) && edge.succUnit.equals(succ)) {










 if (edge.unit.equals(curr)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for %s -> %s", curr, succ));










 throw new AssertionError(String.format("No Flow Function expected for %s", curr));










 }





















 @Override










 public FlowFunction<TestFieldRef, Fact> getCallToReturnFlowFunction(Statement callSite, Statement returnSite) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getCallToReturnFlowFunction(TestStatement callSite, TestStatement returnSite) {










 for (final Call2ReturnEdge edge : call2retEdges) {










 if (edge.callSite.equals(callSite) && edge.returnSite.equals(returnSite)) {










 return createFlowFunction(edge);



......@@ -474,7 +575,7 @@ public class TestHelper {









 }





















 @Override










 public FlowFunction<TestFieldRef, Fact> getCallFlowFunction(Statement callStmt, Method destinationMethod) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getCallFlowFunction(TestStatement callStmt, TestMethod destinationMethod) {










 for (final CallEdge edge : callEdges) {










 if (edge.callSite.equals(callStmt) && edge.destinationMethod.equals(destinationMethod)) {










 return createFlowFunction(edge);



......@@ -483,20 +584,18 @@ public class TestHelper {









 throw new AssertionError(String.format("No Flow Function expected for call %s -> %s", callStmt, destinationMethod));










 }





















 private FlowFunction<TestFieldRef, Fact> createFlowFunction(final Edge edge) {










 return new FlowFunction<TestFieldRef, Fact>() {










 private FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> createFlowFunction(final Edge edge) {










 return new FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod>() {










 @Override










 public Set<ConstrainedFact<TestFieldRef, Fact>> computeTargets(Fact source) {










 Set<ConstrainedFact<TestFieldRef, Fact>> result = Sets.newHashSet();










 public Set<FlowFunction.ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod>> computeTargets(TestFact source,










 AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 Set<ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod>> result = Sets.newHashSet();










 boolean found = false;










 for (ExpectedFlowFunction ff : edge.flowFunctions) {










 if (ff.source.equals(source.cloneWithAccessPath(source.getAccessPath().setResolver(null)))) {










 if (ff.source.equals(source)) {










 if (remainingFlowFunctions.remove(ff)) {










 for(ConstrainedFact<TestFieldRef, Fact> target : ff.targets) {










 result.add(new ConstrainedFact<TestFieldRef, Fact>(










 target.getFact().cloneWithAccessPath(










 target.getFact().accessPath.setResolver(source.getAccessPath().getResolver())), 










 target.getConstraint()));










 for(TestFact target : ff.targets) {










 result.add(ff.apply(target, accPathHandler));










 }










 found = true;










 } else {



......@@ -515,17 +614,44 @@ public class TestHelper {









 }





















 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {










 FieldSensitiveIFDSSolver<Statement, String, TestFieldRef, Fact, Method, InterproceduralCFG<Statement,Method>> solver = new FieldSensitiveIFDSSolver<Statement,String, TestFieldRef ,Fact, Method, InterproceduralCFG<Statement,Method>>(createTabulationProblem(followReturnsPastSeeds, initialSeeds));










 FieldSensitiveIFDSSolver<TestStatement, TestFieldRef, TestFact, TestMethod, InterproceduralCFG<TestStatement,TestMethod>> solver = new FieldSensitiveIFDSSolver<TestStatement, TestFieldRef ,TestFact, TestMethod, InterproceduralCFG<TestStatement,TestMethod>>(










 createTabulationProblem(followReturnsPastSeeds, initialSeeds), new FactMergeHandler<TestFact>() {










 @Override










 public void merge(TestFact previousFact, TestFact currentFact) {










 }





















 @Override










 public void restoreCallingContext(TestFact factAtReturnSite, TestFact factAtCallSite) {










 }










 










 }, debugger);










 addExpectationsToDebugger();










 solver.solve();










 










 assertAllFlowFunctionsUsed();










 }










 










 










 private IFDSTabulationProblem<Statement, TestFieldRef, Fact, Method, InterproceduralCFG<Statement, Method>> createTabulationProblem(final boolean followReturnsPastSeeds, final String[] initialSeeds) {










 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();










 final FlowFunctions<Statement, TestFieldRef, Fact, Method> flowFunctions = flowFunctions();










 private void addExpectationsToDebugger() {










 for(NormalEdge edge : normalEdges) {










 debugger.expectNormalFlow(edge.unit, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 for(CallEdge edge : callEdges) {










 debugger.expectCallFlow(edge.callSite, edge.destinationMethod, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 for(Call2ReturnEdge edge : call2retEdges) {










 debugger.expectNormalFlow(edge.callSite, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 for(ReturnEdge edge : returnEdges) {










 debugger.expectReturnFlow(edge.exitStmt, edge.returnSite, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 }





















 private IFDSTabulationProblem<TestStatement, TestFieldRef, TestFact, TestMethod, InterproceduralCFG<TestStatement, TestMethod>> createTabulationProblem(final boolean followReturnsPastSeeds, final String[] initialSeeds) {










 final InterproceduralCFG<TestStatement, TestMethod> icfg = buildIcfg();










 final FlowFunctions<TestStatement, TestFieldRef, TestFact, TestMethod> flowFunctions = flowFunctions();










 










 return new IFDSTabulationProblem<Statement,TestFieldRef, Fact, Method, InterproceduralCFG<Statement, Method>>() {










 return new IFDSTabulationProblem<TestStatement,TestFieldRef, TestFact, TestMethod, InterproceduralCFG<TestStatement, TestMethod>>() {





















 @Override










 public boolean followReturnsPastSeeds() {



......@@ -548,27 +674,37 @@ public class TestHelper {









 }





















 @Override










 public FlowFunctions<Statement,TestFieldRef, Fact, Method> flowFunctions() {










 public FlowFunctions<TestStatement,TestFieldRef, TestFact, TestMethod> flowFunctions() {










 return flowFunctions;










 }





















 @Override










 public InterproceduralCFG<Statement, Method> interproceduralCFG() {










 public InterproceduralCFG<TestStatement, TestMethod> interproceduralCFG() {










 return icfg;










 }





















 @Override










 public Map<Statement, Set<Fact>> initialSeeds() {










 Map<Statement, Set<Fact>> result = Maps.newHashMap();










 public Map<TestStatement, Set<TestFact>> initialSeeds() {










 Map<TestStatement, Set<TestFact>> result = Maps.newHashMap();










 for (String stmt : initialSeeds) {










 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));










 result.put(new TestStatement(stmt), Sets.newHashSet(new TestFact("0")));










 }










 return result;










 }





















 @Override










 public Fact zeroValue() {










 return new Fact("0");










 public TestFact zeroValue() {










 return new TestFact("0");










 }










 










 @Override










 public ZeroHandler<TestFieldRef> zeroHandler() {










 return new ZeroHandler<TestFieldRef>() {










 @Override










 public boolean shouldGenerateAccessPath(AccessPath<TestFieldRef> accPath) {










 return true;










 }










 };










 }










 };










 }



......














test/heros/alias/Method.java

â†’

test/heros/alias/TestMethod.java








View file @ 3398e46f






......@@ -10,11 +10,11 @@









 ******************************************************************************/










package heros.alias;





















public class Method {










public class TestMethod {





















 public final String name;










 










 public Method(String name) {










 public TestMethod(String name) {










 this.name = name;










 }














......@@ -32,9 +32,9 @@ public class Method {









 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Method))










 if (!(obj instanceof TestMethod))










 return false;










 Method other = (Method) obj;










 TestMethod other = (TestMethod) obj;










 if (name == null) {










 if (other.name != null)










 return false;



......














test/heros/alias/Statement.java

â†’

test/heros/alias/TestStatement.java








View file @ 3398e46f






......@@ -10,11 +10,11 @@









 ******************************************************************************/










package heros.alias;





















public class Statement {










public class TestStatement {





















 public final String identifier;










 










 public Statement(String identifier) {










 public TestStatement(String identifier) {










 this.identifier = identifier;










 }














......@@ -32,9 +32,9 @@ public class Statement {









 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Statement))










 if (!(obj instanceof TestStatement))










 return false;










 Statement other = (Statement) obj;










 TestStatement other = (TestStatement) obj;










 if (identifier == null) {










 if (other.identifier != null)










 return false;



......














test/heros/utilities/TestHelper.java








View file @ 3398e46f






......@@ -15,13 +15,17 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.alias.TestStatement;










import heros.alias.TestHelper.NormalEdge;










import heros.solver.BiDiIFDSSolver;










import heros.solver.IFDSSolver;





















import java.util.Collection;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Set;





















import com.google.common.base.Joiner;










import com.google.common.base.Predicate;










import com.google.common.collect.HashMultimap;



......@@ -150,6 +154,16 @@ public class TestHelper {









 }










 return result;










 }










 










 @Override










 public List<Statement> getPredsOf(Statement stmt) {










 LinkedList<Statement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.succUnit.equals(stmt))










 result.add(edge.unit);










 }










 return result;










 }





















 @Override










 public Collection<Statement> getStartPointsOf(Method m) {



......









Prev


1


2


3


Next















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
3398e46f


authored
Feb 25, 2015
by


Johannes Lerch



Browse files




rewrite of ifds solver







parent
55cdd2d8













Changes
45




Hide whitespace changes

Inline
Side-by-side















test/heros/alias/TestFact.java



0 â†’ 100644







View file @ 3398e46f













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















public class TestFact {





















 public final String baseValue;










 










 public TestFact(String baseValue) {










 this.baseValue = baseValue;










 }










 










 @Override










 public String toString() {










 return "[Fact "+baseValue+"]";










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((baseValue == null) ? 0 : baseValue.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof TestFact))










 return false;










 TestFact other = (TestFact) obj;










 if (baseValue == null) {










 if (other.baseValue != null)










 return false;










 } else if (!baseValue.equals(other.baseValue))










 return false;










 return true;










 } 










}














test/heros/alias/TestHelper.java








View file @ 3398e46f






......@@ -37,16 +37,21 @@ import com.google.common.collect.Sets;




















public class TestHelper {





















 private Multimap<Method, Statement> method2startPoint = HashMultimap.create();










 private Multimap<TestMethod, TestStatement> method2startPoint = HashMultimap.create();










 private List<NormalEdge> normalEdges = Lists.newLinkedList();










 private List<CallEdge> callEdges = Lists.newLinkedList();










 private List<Call2ReturnEdge> call2retEdges = Lists.newLinkedList();










 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, Method> stmt2method = Maps.newHashMap();










 private Map<TestStatement, TestMethod> stmt2method = Maps.newHashMap();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();










 private TestDebugger<TestFieldRef, TestFact, TestStatement, TestMethod, InterproceduralCFG<TestStatement, TestMethod>> debugger;





















 public MethodHelper method(String methodName, Statement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new Method(methodName));










 public TestHelper(TestDebugger<TestFieldRef, TestFact, TestStatement, TestMethod, InterproceduralCFG<TestStatement, TestMethod>> debugger) {










 this.debugger = debugger;










 }





















 public MethodHelper method(String methodName, TestStatement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new TestMethod(methodName));










 methodHelper.startPoints(startingPoints);










 for(EdgeBuilder edgeBuilder : edgeBuilders){










 methodHelper.edges(edgeBuilder.edges());



......@@ -54,32 +59,32 @@ public class TestHelper {









 return methodHelper;










 }





















 public static Statement[] startPoints(String... startingPoints) {










 Statement[] result = new Statement[startingPoints.length];










 public static TestStatement[] startPoints(String... startingPoints) {










 TestStatement[] result = new TestStatement[startingPoints.length];










 for (int i = 0; i < result.length; i++) {










 result[i] = new Statement(startingPoints[i]);










 result[i] = new TestStatement(startingPoints[i]);










 }










 return result;










 }





















 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt) {










 return new EdgeBuilder.NormalStmtBuilder(new Statement(stmt));










 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt, ExpectedFlowFunction...flowFunctions) {










 return new EdgeBuilder.NormalStmtBuilder(new TestStatement(stmt), flowFunctions);










 }










 










 public static EdgeBuilder.CallSiteBuilder callSite(String callSite) {










 return new EdgeBuilder.CallSiteBuilder(new Statement(callSite));










 return new EdgeBuilder.CallSiteBuilder(new TestStatement(callSite));










 }










 










 public static EdgeBuilder.ExitStmtBuilder exitStmt(String exitStmt) {










 return new EdgeBuilder.ExitStmtBuilder(new Statement(exitStmt));










 return new EdgeBuilder.ExitStmtBuilder(new TestStatement(exitStmt));










 }










 










 public static Statement over(String callSite) {










 return new Statement(callSite);










 public static TestStatement over(String callSite) {










 return new TestStatement(callSite);










 }










 










 public static Statement to(String returnSite) {










 return new Statement(returnSite);










 public static TestStatement to(String returnSite) {










 return new TestStatement(returnSite);










 }










 










 public static ExpectedFlowFunction kill(String source) {



......@@ -87,27 +92,87 @@ public class TestHelper {









 }










 










 public static ExpectedFlowFunction kill(int times, String source) {










 return new ExpectedFlowFunction(times, new Fact(source));










 return new ExpectedFlowFunction(times, new TestFact(source)) {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 throw new IllegalStateException();










 }










 










 @Override










 public String transformerString() {










 return "";










 }










 };










 }





















 public static Constraint<TestFieldRef> readField(String fieldName) {










 return new FlowFunction.ReadFieldConstraint<TestFieldRef>(new TestFieldRef(fieldName));










 public static AccessPathTransformer readField(final String fieldName) {










 return new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.read(new TestFieldRef(fieldName)).generate(target);










 }





















 @Override










 public String toString() {










 return "read("+fieldName+")";










 }










 };










 }










 










 public static Constraint<TestFieldRef> writeField(String fieldName) {










 return new FlowFunction.WriteFieldConstraint<TestFieldRef>(new TestFieldRef(fieldName));










 public static AccessPathTransformer prependField(final String fieldName) {










 return new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.prepend(new TestFieldRef(fieldName)).generate(target);










 }










 










 @Override










 public String toString() {










 return "prepend("+fieldName+")";










 }










 };










 }










 










 public static ExpectedFlowFunction flow(String source, Constraint<TestFieldRef> constraint, String... targets) {










 return flow(1, source, constraint, targets);










 public static AccessPathTransformer overwriteField(final String fieldName) {










 return new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.overwrite(new TestFieldRef(fieldName)).generate(target);










 }










 










 @Override










 public String toString() {










 return "write("+fieldName+")";










 }










 };










 }










 










 public static ExpectedFlowFunction flow(String source, final AccessPathTransformer transformer, String... targets) {










 return flow(1, source, transformer, targets);










 }










 










 public static ExpectedFlowFunction flow(int times, String source, Constraint<TestFieldRef> constraint, String... targets) {










 ConstrainedFact<TestFieldRef, Fact>[] targetFacts = new ConstrainedFact[targets.length];










 public static ExpectedFlowFunction flow(int times, String source, final AccessPathTransformer transformer, String... targets) {










 TestFact[] targetFacts = new TestFact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new ConstrainedFact<TestFieldRef, Fact>(new Fact(targets[i]), constraint);










 targetFacts[i] = new TestFact(targets[i]);










 }










 return new ExpectedFlowFunction(times, new Fact(source), targetFacts);










 return new ExpectedFlowFunction(times, new TestFact(source), targetFacts) {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return transformer.apply(target, accPathHandler);










 }










 










 @Override










 public String transformerString() {










 return transformer.toString();










 }










 };










 }










 










 private static interface AccessPathTransformer {





















 ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler); 










 










 }










 










 public static ExpectedFlowFunction flow(String source, String... targets) {



......@@ -115,28 +180,39 @@ public class TestHelper {









 }










 










 public static ExpectedFlowFunction flow(int times, String source, String... targets) {










 return flow(times, source, null, targets);










 return flow(times, source, new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.generate(target);










 }










 










 @Override










 public String toString() {










 return "";










 }










 










 }, targets);










 }










 










 public static int times(int times) {










 return times;










 }





















 public InterproceduralCFG<Statement, Method> buildIcfg() {










 return new InterproceduralCFG<Statement, Method>() {










 public InterproceduralCFG<TestStatement, TestMethod> buildIcfg() {










 return new InterproceduralCFG<TestStatement, TestMethod>() {





















 @Override










 public boolean isStartPoint(Statement stmt) {










 public boolean isStartPoint(TestStatement stmt) {










 return method2startPoint.values().contains(stmt);










 }





















 @Override










 public boolean isFallThroughSuccessor(Statement stmt, Statement succ) {










 public boolean isFallThroughSuccessor(TestStatement stmt, TestStatement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public boolean isExitStmt(Statement stmt) {










 public boolean isExitStmt(TestStatement stmt) {










 for(ReturnEdge edge : returnEdges) {










 if(edge.exitStmt.equals(stmt))










 return true;



......@@ -145,7 +221,7 @@ public class TestHelper {









 }





















 @Override










 public boolean isCallStmt(final Statement stmt) {










 public boolean isCallStmt(final TestStatement stmt) {










 return Iterables.any(callEdges, new Predicate<CallEdge>() {










 @Override










 public boolean apply(CallEdge edge) {



......@@ -155,13 +231,13 @@ public class TestHelper {









 }





















 @Override










 public boolean isBranchTarget(Statement stmt, Statement succ) {










 public boolean isBranchTarget(TestStatement stmt, TestStatement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public List<Statement> getSuccsOf(Statement n) {










 LinkedList<Statement> result = Lists.newLinkedList();










 public List<TestStatement> getSuccsOf(TestStatement n) {










 LinkedList<TestStatement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.unit.equals(n))










 result.add(edge.succUnit);



......@@ -170,13 +246,23 @@ public class TestHelper {









 }





















 @Override










 public Collection<Statement> getStartPointsOf(Method m) {










 public List<TestStatement> getPredsOf(TestStatement stmt) {










 LinkedList<TestStatement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.succUnit.equals(stmt))










 result.add(edge.unit);










 }










 return result;










 }





















 @Override










 public Collection<TestStatement> getStartPointsOf(TestMethod m) {










 return method2startPoint.get(m);










 }





















 @Override










 public Collection<Statement> getReturnSitesOfCallAt(Statement n) {










 Set<Statement> result = Sets.newHashSet();










 public Collection<TestStatement> getReturnSitesOfCallAt(TestStatement n) {










 Set<TestStatement> result = Sets.newHashSet();










 for (Call2ReturnEdge edge : call2retEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n))










 result.add(edge.returnSite);



......@@ -189,18 +275,21 @@ public class TestHelper {









 }





















 @Override










 public Method getMethodOf(Statement n) {










 return stmt2method.get(n);










 public TestMethod getMethodOf(TestStatement n) {










 if(stmt2method.containsKey(n))










 return stmt2method.get(n);










 else










 throw new IllegalArgumentException("Statement "+n+" is not defined in any method.");










 }





















 @Override










 public Set<Statement> getCallsFromWithin(Method m) {










 public Set<TestStatement> getCallsFromWithin(TestMethod m) {










 throw new IllegalStateException();










 }





















 @Override










 public Collection<Statement> getCallersOf(Method m) {










 Set<Statement> result = Sets.newHashSet();










 public Collection<TestStatement> getCallersOf(TestMethod m) {










 Set<TestStatement> result = Sets.newHashSet();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.destinationMethod.equals(m)) {










 result.add(edge.callSite);



......@@ -215,8 +304,8 @@ public class TestHelper {









 }





















 @Override










 public Collection<Method> getCalleesOfCallAt(Statement n) {










 List<Method> result = Lists.newLinkedList();










 public Collection<TestMethod> getCalleesOfCallAt(TestStatement n) {










 List<TestMethod> result = Lists.newLinkedList();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n)) {










 result.add(edge.destinationMethod);



......@@ -226,7 +315,7 @@ public class TestHelper {









 }





















 @Override










 public Set<Statement> allNonCallStartNodes() {










 public Set<TestStatement> allNonCallStartNodes() {










 throw new IllegalStateException();










 }










 };



......@@ -237,30 +326,31 @@ public class TestHelper {









 remainingFlowFunctions.isEmpty());










 }





















 private void addOrVerifyStmt2Method(Statement stmt, Method m) {










 private void addOrVerifyStmt2Method(TestStatement stmt, TestMethod m) {










 if (stmt2method.containsKey(stmt) && !stmt2method.get(stmt).equals(m)) {










 throw new IllegalArgumentException("Statement " + stmt + " is used in multiple methods: " + m + " and " + stmt2method.get(stmt));










 }










 stmt2method.put(stmt, m);










 }





















 public MethodHelper method(Method method) {










 public MethodHelper method(TestMethod method) {










 MethodHelper h = new MethodHelper(method);










 return h;










 }





















 public class MethodHelper {





















 private Method method;










 private TestMethod method;





















 public MethodHelper(Method method) {










 public MethodHelper(TestMethod method) {










 this.method = method;










 }





















 public void edges(Collection<Edge> edges) {










 for(Edge edge : edges) {










 for(ExpectedFlowFunction ff : edge.flowFunctions) {










 remainingFlowFunctions.add(ff, ff.times);










 if(!remainingFlowFunctions.contains(ff))










 remainingFlowFunctions.add(ff, ff.times);










 }










 










 edge.accept(new EdgeVisitor() {



......@@ -294,19 +384,26 @@ public class TestHelper {









 }










 }





















 public void startPoints(Statement[] startingPoints) {










 public void startPoints(TestStatement[] startingPoints) {










 method2startPoint.putAll(method, Lists.newArrayList(startingPoints));










 }










 }










 










 public static class ExpectedFlowFunction {










 private static String expectedFlowFunctionsToString(ExpectedFlowFunction[] flowFunctions) {










 String result = "";










 for(ExpectedFlowFunction ff : flowFunctions)










 result += ff.source+"->"+Joiner.on(",").join(ff.targets)+ff.transformerString()+", ";










 return result;










 }










 










 public static abstract class ExpectedFlowFunction {





















 public final Fact source;










 public final ConstrainedFact<TestFieldRef, Fact>[] targets;










 public final TestFact source;










 public final TestFact[] targets;










 public Edge edge;










 private int times;





















 public ExpectedFlowFunction(int times, Fact source, ConstrainedFact<TestFieldRef, Fact>... targets) {










 public ExpectedFlowFunction(int times, TestFact source, TestFact... targets) {










 this.times = times;










 this.source = source;










 this.targets = targets;



......@@ -316,6 +413,10 @@ public class TestHelper {









 public String toString() {










 return String.format("%s: %s -> {%s}", edge, source, Joiner.on(",").join(targets));










 }










 










 public abstract String transformerString();





















 public abstract FlowFunction.ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler);










 }










 










 private static interface EdgeVisitor {



......@@ -341,10 +442,10 @@ public class TestHelper {




















 public static class NormalEdge extends Edge {





















 private Statement unit;










 private Statement succUnit;










 private TestStatement unit;










 private TestStatement succUnit;





















 public NormalEdge(Statement unit, Statement succUnit, ExpectedFlowFunction...flowFunctions) {










 public NormalEdge(TestStatement unit, TestStatement succUnit, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.unit = unit;










 this.succUnit = succUnit;



......@@ -363,10 +464,10 @@ public class TestHelper {




















 public static class CallEdge extends Edge {





















 private Statement callSite;










 private Method destinationMethod;










 private TestStatement callSite;










 private TestMethod destinationMethod;





















 public CallEdge(Statement callSite, Method destinationMethod, ExpectedFlowFunction...flowFunctions) {










 public CallEdge(TestStatement callSite, TestMethod destinationMethod, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.destinationMethod = destinationMethod;



......@@ -384,10 +485,10 @@ public class TestHelper {









 }





















 public static class Call2ReturnEdge extends Edge {










 private Statement callSite;










 private Statement returnSite;










 private TestStatement callSite;










 private TestStatement returnSite;





















 public Call2ReturnEdge(Statement callSite, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 public Call2ReturnEdge(TestStatement callSite, TestStatement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.returnSite = returnSite;



......@@ -406,12 +507,12 @@ public class TestHelper {




















 public static class ReturnEdge extends Edge {





















 private Statement exitStmt;










 private Statement returnSite;










 private Statement callSite;










 private Method calleeMethod;










 private TestStatement exitStmt;










 private TestStatement returnSite;










 private TestStatement callSite;










 private TestMethod calleeMethod;





















 public ReturnEdge(Statement callSite, Statement exitStmt, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 public ReturnEdge(TestStatement callSite, TestStatement exitStmt, TestStatement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.exitStmt = exitStmt;



......@@ -438,11 +539,11 @@ public class TestHelper {









 return a.equals(b);










 }





















 public FlowFunctions<Statement, TestFieldRef, Fact, Method> flowFunctions() {










 return new FlowFunctions<Statement, TestFieldRef, Fact, Method>() {










 public FlowFunctions<TestStatement, TestFieldRef, TestFact, TestMethod> flowFunctions() {










 return new FlowFunctions<TestStatement, TestFieldRef, TestFact, TestMethod>() {





















 @Override










 public FlowFunction<TestFieldRef, Fact> getReturnFlowFunction(Statement callSite, Method calleeMethod, Statement exitStmt, Statement returnSite) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getReturnFlowFunction(TestStatement callSite, TestMethod calleeMethod, TestStatement exitStmt, TestStatement returnSite) {










 for (final ReturnEdge edge : returnEdges) {










 if (nullAwareEquals(callSite, edge.callSite) && edge.calleeMethod.equals(calleeMethod)










 && edge.exitStmt.equals(exitStmt) && nullAwareEquals(edge.returnSite, returnSite)) {



......@@ -454,17 +555,17 @@ public class TestHelper {









 }





















 @Override










 public FlowFunction<TestFieldRef, Fact> getNormalFlowFunction(final Statement curr, final Statement succ) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getNormalFlowFunction(final TestStatement curr) {










 for (final NormalEdge edge : normalEdges) {










 if (edge.unit.equals(curr) && edge.succUnit.equals(succ)) {










 if (edge.unit.equals(curr)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for %s -> %s", curr, succ));










 throw new AssertionError(String.format("No Flow Function expected for %s", curr));










 }





















 @Override










 public FlowFunction<TestFieldRef, Fact> getCallToReturnFlowFunction(Statement callSite, Statement returnSite) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getCallToReturnFlowFunction(TestStatement callSite, TestStatement returnSite) {










 for (final Call2ReturnEdge edge : call2retEdges) {










 if (edge.callSite.equals(callSite) && edge.returnSite.equals(returnSite)) {










 return createFlowFunction(edge);



......@@ -474,7 +575,7 @@ public class TestHelper {









 }





















 @Override










 public FlowFunction<TestFieldRef, Fact> getCallFlowFunction(Statement callStmt, Method destinationMethod) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getCallFlowFunction(TestStatement callStmt, TestMethod destinationMethod) {










 for (final CallEdge edge : callEdges) {










 if (edge.callSite.equals(callStmt) && edge.destinationMethod.equals(destinationMethod)) {










 return createFlowFunction(edge);



......@@ -483,20 +584,18 @@ public class TestHelper {









 throw new AssertionError(String.format("No Flow Function expected for call %s -> %s", callStmt, destinationMethod));










 }





















 private FlowFunction<TestFieldRef, Fact> createFlowFunction(final Edge edge) {










 return new FlowFunction<TestFieldRef, Fact>() {










 private FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> createFlowFunction(final Edge edge) {










 return new FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod>() {










 @Override










 public Set<ConstrainedFact<TestFieldRef, Fact>> computeTargets(Fact source) {










 Set<ConstrainedFact<TestFieldRef, Fact>> result = Sets.newHashSet();










 public Set<FlowFunction.ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod>> computeTargets(TestFact source,










 AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 Set<ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod>> result = Sets.newHashSet();










 boolean found = false;










 for (ExpectedFlowFunction ff : edge.flowFunctions) {










 if (ff.source.equals(source.cloneWithAccessPath(source.getAccessPath().setResolver(null)))) {










 if (ff.source.equals(source)) {










 if (remainingFlowFunctions.remove(ff)) {










 for(ConstrainedFact<TestFieldRef, Fact> target : ff.targets) {










 result.add(new ConstrainedFact<TestFieldRef, Fact>(










 target.getFact().cloneWithAccessPath(










 target.getFact().accessPath.setResolver(source.getAccessPath().getResolver())), 










 target.getConstraint()));










 for(TestFact target : ff.targets) {










 result.add(ff.apply(target, accPathHandler));










 }










 found = true;










 } else {



......@@ -515,17 +614,44 @@ public class TestHelper {









 }





















 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {










 FieldSensitiveIFDSSolver<Statement, String, TestFieldRef, Fact, Method, InterproceduralCFG<Statement,Method>> solver = new FieldSensitiveIFDSSolver<Statement,String, TestFieldRef ,Fact, Method, InterproceduralCFG<Statement,Method>>(createTabulationProblem(followReturnsPastSeeds, initialSeeds));










 FieldSensitiveIFDSSolver<TestStatement, TestFieldRef, TestFact, TestMethod, InterproceduralCFG<TestStatement,TestMethod>> solver = new FieldSensitiveIFDSSolver<TestStatement, TestFieldRef ,TestFact, TestMethod, InterproceduralCFG<TestStatement,TestMethod>>(










 createTabulationProblem(followReturnsPastSeeds, initialSeeds), new FactMergeHandler<TestFact>() {










 @Override










 public void merge(TestFact previousFact, TestFact currentFact) {










 }





















 @Override










 public void restoreCallingContext(TestFact factAtReturnSite, TestFact factAtCallSite) {










 }










 










 }, debugger);










 addExpectationsToDebugger();










 solver.solve();










 










 assertAllFlowFunctionsUsed();










 }










 










 










 private IFDSTabulationProblem<Statement, TestFieldRef, Fact, Method, InterproceduralCFG<Statement, Method>> createTabulationProblem(final boolean followReturnsPastSeeds, final String[] initialSeeds) {










 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();










 final FlowFunctions<Statement, TestFieldRef, Fact, Method> flowFunctions = flowFunctions();










 private void addExpectationsToDebugger() {










 for(NormalEdge edge : normalEdges) {










 debugger.expectNormalFlow(edge.unit, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 for(CallEdge edge : callEdges) {










 debugger.expectCallFlow(edge.callSite, edge.destinationMethod, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 for(Call2ReturnEdge edge : call2retEdges) {










 debugger.expectNormalFlow(edge.callSite, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 for(ReturnEdge edge : returnEdges) {










 debugger.expectReturnFlow(edge.exitStmt, edge.returnSite, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 }





















 private IFDSTabulationProblem<TestStatement, TestFieldRef, TestFact, TestMethod, InterproceduralCFG<TestStatement, TestMethod>> createTabulationProblem(final boolean followReturnsPastSeeds, final String[] initialSeeds) {










 final InterproceduralCFG<TestStatement, TestMethod> icfg = buildIcfg();










 final FlowFunctions<TestStatement, TestFieldRef, TestFact, TestMethod> flowFunctions = flowFunctions();










 










 return new IFDSTabulationProblem<Statement,TestFieldRef, Fact, Method, InterproceduralCFG<Statement, Method>>() {










 return new IFDSTabulationProblem<TestStatement,TestFieldRef, TestFact, TestMethod, InterproceduralCFG<TestStatement, TestMethod>>() {





















 @Override










 public boolean followReturnsPastSeeds() {



......@@ -548,27 +674,37 @@ public class TestHelper {









 }





















 @Override










 public FlowFunctions<Statement,TestFieldRef, Fact, Method> flowFunctions() {










 public FlowFunctions<TestStatement,TestFieldRef, TestFact, TestMethod> flowFunctions() {










 return flowFunctions;










 }





















 @Override










 public InterproceduralCFG<Statement, Method> interproceduralCFG() {










 public InterproceduralCFG<TestStatement, TestMethod> interproceduralCFG() {










 return icfg;










 }





















 @Override










 public Map<Statement, Set<Fact>> initialSeeds() {










 Map<Statement, Set<Fact>> result = Maps.newHashMap();










 public Map<TestStatement, Set<TestFact>> initialSeeds() {










 Map<TestStatement, Set<TestFact>> result = Maps.newHashMap();










 for (String stmt : initialSeeds) {










 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));










 result.put(new TestStatement(stmt), Sets.newHashSet(new TestFact("0")));










 }










 return result;










 }





















 @Override










 public Fact zeroValue() {










 return new Fact("0");










 public TestFact zeroValue() {










 return new TestFact("0");










 }










 










 @Override










 public ZeroHandler<TestFieldRef> zeroHandler() {










 return new ZeroHandler<TestFieldRef>() {










 @Override










 public boolean shouldGenerateAccessPath(AccessPath<TestFieldRef> accPath) {










 return true;










 }










 };










 }










 };










 }



......














test/heros/alias/Method.java

â†’

test/heros/alias/TestMethod.java








View file @ 3398e46f






......@@ -10,11 +10,11 @@









 ******************************************************************************/










package heros.alias;





















public class Method {










public class TestMethod {





















 public final String name;










 










 public Method(String name) {










 public TestMethod(String name) {










 this.name = name;










 }














......@@ -32,9 +32,9 @@ public class Method {









 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Method))










 if (!(obj instanceof TestMethod))










 return false;










 Method other = (Method) obj;










 TestMethod other = (TestMethod) obj;










 if (name == null) {










 if (other.name != null)










 return false;



......














test/heros/alias/Statement.java

â†’

test/heros/alias/TestStatement.java








View file @ 3398e46f






......@@ -10,11 +10,11 @@









 ******************************************************************************/










package heros.alias;





















public class Statement {










public class TestStatement {





















 public final String identifier;










 










 public Statement(String identifier) {










 public TestStatement(String identifier) {










 this.identifier = identifier;










 }














......@@ -32,9 +32,9 @@ public class Statement {









 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Statement))










 if (!(obj instanceof TestStatement))










 return false;










 Statement other = (Statement) obj;










 TestStatement other = (TestStatement) obj;










 if (identifier == null) {










 if (other.identifier != null)










 return false;



......














test/heros/utilities/TestHelper.java








View file @ 3398e46f






......@@ -15,13 +15,17 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.alias.TestStatement;










import heros.alias.TestHelper.NormalEdge;










import heros.solver.BiDiIFDSSolver;










import heros.solver.IFDSSolver;





















import java.util.Collection;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Set;





















import com.google.common.base.Joiner;










import com.google.common.base.Predicate;










import com.google.common.collect.HashMultimap;



......@@ -150,6 +154,16 @@ public class TestHelper {









 }










 return result;










 }










 










 @Override










 public List<Statement> getPredsOf(Statement stmt) {










 LinkedList<Statement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.succUnit.equals(stmt))










 result.add(edge.unit);










 }










 return result;










 }





















 @Override










 public Collection<Statement> getStartPointsOf(Method m) {



......









Prev


1


2


3


Next















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
3398e46f


authored
Feb 25, 2015
by


Johannes Lerch



Browse files



Commit
3398e46f


authored
Feb 25, 2015
by


Johannes Lerch

3398e46fauthoredbyJohannes Lerch

rewrite of ifds solver






parent
55cdd2d8
















parent
55cdd2d8





parent












Changes
45
45


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










test/heros/alias/TestFact.java



0 â†’ 100644







View file @ 3398e46f













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















public class TestFact {





















 public final String baseValue;










 










 public TestFact(String baseValue) {










 this.baseValue = baseValue;










 }










 










 @Override










 public String toString() {










 return "[Fact "+baseValue+"]";










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((baseValue == null) ? 0 : baseValue.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof TestFact))










 return false;










 TestFact other = (TestFact) obj;










 if (baseValue == null) {










 if (other.baseValue != null)










 return false;










 } else if (!baseValue.equals(other.baseValue))










 return false;










 return true;










 } 










}














test/heros/alias/TestHelper.java








View file @ 3398e46f






......@@ -37,16 +37,21 @@ import com.google.common.collect.Sets;




















public class TestHelper {





















 private Multimap<Method, Statement> method2startPoint = HashMultimap.create();










 private Multimap<TestMethod, TestStatement> method2startPoint = HashMultimap.create();










 private List<NormalEdge> normalEdges = Lists.newLinkedList();










 private List<CallEdge> callEdges = Lists.newLinkedList();










 private List<Call2ReturnEdge> call2retEdges = Lists.newLinkedList();










 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, Method> stmt2method = Maps.newHashMap();










 private Map<TestStatement, TestMethod> stmt2method = Maps.newHashMap();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();










 private TestDebugger<TestFieldRef, TestFact, TestStatement, TestMethod, InterproceduralCFG<TestStatement, TestMethod>> debugger;





















 public MethodHelper method(String methodName, Statement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new Method(methodName));










 public TestHelper(TestDebugger<TestFieldRef, TestFact, TestStatement, TestMethod, InterproceduralCFG<TestStatement, TestMethod>> debugger) {










 this.debugger = debugger;










 }





















 public MethodHelper method(String methodName, TestStatement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new TestMethod(methodName));










 methodHelper.startPoints(startingPoints);










 for(EdgeBuilder edgeBuilder : edgeBuilders){










 methodHelper.edges(edgeBuilder.edges());



......@@ -54,32 +59,32 @@ public class TestHelper {









 return methodHelper;










 }





















 public static Statement[] startPoints(String... startingPoints) {










 Statement[] result = new Statement[startingPoints.length];










 public static TestStatement[] startPoints(String... startingPoints) {










 TestStatement[] result = new TestStatement[startingPoints.length];










 for (int i = 0; i < result.length; i++) {










 result[i] = new Statement(startingPoints[i]);










 result[i] = new TestStatement(startingPoints[i]);










 }










 return result;










 }





















 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt) {










 return new EdgeBuilder.NormalStmtBuilder(new Statement(stmt));










 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt, ExpectedFlowFunction...flowFunctions) {










 return new EdgeBuilder.NormalStmtBuilder(new TestStatement(stmt), flowFunctions);










 }










 










 public static EdgeBuilder.CallSiteBuilder callSite(String callSite) {










 return new EdgeBuilder.CallSiteBuilder(new Statement(callSite));










 return new EdgeBuilder.CallSiteBuilder(new TestStatement(callSite));










 }










 










 public static EdgeBuilder.ExitStmtBuilder exitStmt(String exitStmt) {










 return new EdgeBuilder.ExitStmtBuilder(new Statement(exitStmt));










 return new EdgeBuilder.ExitStmtBuilder(new TestStatement(exitStmt));










 }










 










 public static Statement over(String callSite) {










 return new Statement(callSite);










 public static TestStatement over(String callSite) {










 return new TestStatement(callSite);










 }










 










 public static Statement to(String returnSite) {










 return new Statement(returnSite);










 public static TestStatement to(String returnSite) {










 return new TestStatement(returnSite);










 }










 










 public static ExpectedFlowFunction kill(String source) {



......@@ -87,27 +92,87 @@ public class TestHelper {









 }










 










 public static ExpectedFlowFunction kill(int times, String source) {










 return new ExpectedFlowFunction(times, new Fact(source));










 return new ExpectedFlowFunction(times, new TestFact(source)) {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 throw new IllegalStateException();










 }










 










 @Override










 public String transformerString() {










 return "";










 }










 };










 }





















 public static Constraint<TestFieldRef> readField(String fieldName) {










 return new FlowFunction.ReadFieldConstraint<TestFieldRef>(new TestFieldRef(fieldName));










 public static AccessPathTransformer readField(final String fieldName) {










 return new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.read(new TestFieldRef(fieldName)).generate(target);










 }





















 @Override










 public String toString() {










 return "read("+fieldName+")";










 }










 };










 }










 










 public static Constraint<TestFieldRef> writeField(String fieldName) {










 return new FlowFunction.WriteFieldConstraint<TestFieldRef>(new TestFieldRef(fieldName));










 public static AccessPathTransformer prependField(final String fieldName) {










 return new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.prepend(new TestFieldRef(fieldName)).generate(target);










 }










 










 @Override










 public String toString() {










 return "prepend("+fieldName+")";










 }










 };










 }










 










 public static ExpectedFlowFunction flow(String source, Constraint<TestFieldRef> constraint, String... targets) {










 return flow(1, source, constraint, targets);










 public static AccessPathTransformer overwriteField(final String fieldName) {










 return new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.overwrite(new TestFieldRef(fieldName)).generate(target);










 }










 










 @Override










 public String toString() {










 return "write("+fieldName+")";










 }










 };










 }










 










 public static ExpectedFlowFunction flow(String source, final AccessPathTransformer transformer, String... targets) {










 return flow(1, source, transformer, targets);










 }










 










 public static ExpectedFlowFunction flow(int times, String source, Constraint<TestFieldRef> constraint, String... targets) {










 ConstrainedFact<TestFieldRef, Fact>[] targetFacts = new ConstrainedFact[targets.length];










 public static ExpectedFlowFunction flow(int times, String source, final AccessPathTransformer transformer, String... targets) {










 TestFact[] targetFacts = new TestFact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new ConstrainedFact<TestFieldRef, Fact>(new Fact(targets[i]), constraint);










 targetFacts[i] = new TestFact(targets[i]);










 }










 return new ExpectedFlowFunction(times, new Fact(source), targetFacts);










 return new ExpectedFlowFunction(times, new TestFact(source), targetFacts) {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return transformer.apply(target, accPathHandler);










 }










 










 @Override










 public String transformerString() {










 return transformer.toString();










 }










 };










 }










 










 private static interface AccessPathTransformer {





















 ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler); 










 










 }










 










 public static ExpectedFlowFunction flow(String source, String... targets) {



......@@ -115,28 +180,39 @@ public class TestHelper {









 }










 










 public static ExpectedFlowFunction flow(int times, String source, String... targets) {










 return flow(times, source, null, targets);










 return flow(times, source, new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.generate(target);










 }










 










 @Override










 public String toString() {










 return "";










 }










 










 }, targets);










 }










 










 public static int times(int times) {










 return times;










 }





















 public InterproceduralCFG<Statement, Method> buildIcfg() {










 return new InterproceduralCFG<Statement, Method>() {










 public InterproceduralCFG<TestStatement, TestMethod> buildIcfg() {










 return new InterproceduralCFG<TestStatement, TestMethod>() {





















 @Override










 public boolean isStartPoint(Statement stmt) {










 public boolean isStartPoint(TestStatement stmt) {










 return method2startPoint.values().contains(stmt);










 }





















 @Override










 public boolean isFallThroughSuccessor(Statement stmt, Statement succ) {










 public boolean isFallThroughSuccessor(TestStatement stmt, TestStatement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public boolean isExitStmt(Statement stmt) {










 public boolean isExitStmt(TestStatement stmt) {










 for(ReturnEdge edge : returnEdges) {










 if(edge.exitStmt.equals(stmt))










 return true;



......@@ -145,7 +221,7 @@ public class TestHelper {









 }





















 @Override










 public boolean isCallStmt(final Statement stmt) {










 public boolean isCallStmt(final TestStatement stmt) {










 return Iterables.any(callEdges, new Predicate<CallEdge>() {










 @Override










 public boolean apply(CallEdge edge) {



......@@ -155,13 +231,13 @@ public class TestHelper {









 }





















 @Override










 public boolean isBranchTarget(Statement stmt, Statement succ) {










 public boolean isBranchTarget(TestStatement stmt, TestStatement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public List<Statement> getSuccsOf(Statement n) {










 LinkedList<Statement> result = Lists.newLinkedList();










 public List<TestStatement> getSuccsOf(TestStatement n) {










 LinkedList<TestStatement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.unit.equals(n))










 result.add(edge.succUnit);



......@@ -170,13 +246,23 @@ public class TestHelper {









 }





















 @Override










 public Collection<Statement> getStartPointsOf(Method m) {










 public List<TestStatement> getPredsOf(TestStatement stmt) {










 LinkedList<TestStatement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.succUnit.equals(stmt))










 result.add(edge.unit);










 }










 return result;










 }





















 @Override










 public Collection<TestStatement> getStartPointsOf(TestMethod m) {










 return method2startPoint.get(m);










 }





















 @Override










 public Collection<Statement> getReturnSitesOfCallAt(Statement n) {










 Set<Statement> result = Sets.newHashSet();










 public Collection<TestStatement> getReturnSitesOfCallAt(TestStatement n) {










 Set<TestStatement> result = Sets.newHashSet();










 for (Call2ReturnEdge edge : call2retEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n))










 result.add(edge.returnSite);



......@@ -189,18 +275,21 @@ public class TestHelper {









 }





















 @Override










 public Method getMethodOf(Statement n) {










 return stmt2method.get(n);










 public TestMethod getMethodOf(TestStatement n) {










 if(stmt2method.containsKey(n))










 return stmt2method.get(n);










 else










 throw new IllegalArgumentException("Statement "+n+" is not defined in any method.");










 }





















 @Override










 public Set<Statement> getCallsFromWithin(Method m) {










 public Set<TestStatement> getCallsFromWithin(TestMethod m) {










 throw new IllegalStateException();










 }





















 @Override










 public Collection<Statement> getCallersOf(Method m) {










 Set<Statement> result = Sets.newHashSet();










 public Collection<TestStatement> getCallersOf(TestMethod m) {










 Set<TestStatement> result = Sets.newHashSet();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.destinationMethod.equals(m)) {










 result.add(edge.callSite);



......@@ -215,8 +304,8 @@ public class TestHelper {









 }





















 @Override










 public Collection<Method> getCalleesOfCallAt(Statement n) {










 List<Method> result = Lists.newLinkedList();










 public Collection<TestMethod> getCalleesOfCallAt(TestStatement n) {










 List<TestMethod> result = Lists.newLinkedList();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n)) {










 result.add(edge.destinationMethod);



......@@ -226,7 +315,7 @@ public class TestHelper {









 }





















 @Override










 public Set<Statement> allNonCallStartNodes() {










 public Set<TestStatement> allNonCallStartNodes() {










 throw new IllegalStateException();










 }










 };



......@@ -237,30 +326,31 @@ public class TestHelper {









 remainingFlowFunctions.isEmpty());










 }





















 private void addOrVerifyStmt2Method(Statement stmt, Method m) {










 private void addOrVerifyStmt2Method(TestStatement stmt, TestMethod m) {










 if (stmt2method.containsKey(stmt) && !stmt2method.get(stmt).equals(m)) {










 throw new IllegalArgumentException("Statement " + stmt + " is used in multiple methods: " + m + " and " + stmt2method.get(stmt));










 }










 stmt2method.put(stmt, m);










 }





















 public MethodHelper method(Method method) {










 public MethodHelper method(TestMethod method) {










 MethodHelper h = new MethodHelper(method);










 return h;










 }





















 public class MethodHelper {





















 private Method method;










 private TestMethod method;





















 public MethodHelper(Method method) {










 public MethodHelper(TestMethod method) {










 this.method = method;










 }





















 public void edges(Collection<Edge> edges) {










 for(Edge edge : edges) {










 for(ExpectedFlowFunction ff : edge.flowFunctions) {










 remainingFlowFunctions.add(ff, ff.times);










 if(!remainingFlowFunctions.contains(ff))










 remainingFlowFunctions.add(ff, ff.times);










 }










 










 edge.accept(new EdgeVisitor() {



......@@ -294,19 +384,26 @@ public class TestHelper {









 }










 }





















 public void startPoints(Statement[] startingPoints) {










 public void startPoints(TestStatement[] startingPoints) {










 method2startPoint.putAll(method, Lists.newArrayList(startingPoints));










 }










 }










 










 public static class ExpectedFlowFunction {










 private static String expectedFlowFunctionsToString(ExpectedFlowFunction[] flowFunctions) {










 String result = "";










 for(ExpectedFlowFunction ff : flowFunctions)










 result += ff.source+"->"+Joiner.on(",").join(ff.targets)+ff.transformerString()+", ";










 return result;










 }










 










 public static abstract class ExpectedFlowFunction {





















 public final Fact source;










 public final ConstrainedFact<TestFieldRef, Fact>[] targets;










 public final TestFact source;










 public final TestFact[] targets;










 public Edge edge;










 private int times;





















 public ExpectedFlowFunction(int times, Fact source, ConstrainedFact<TestFieldRef, Fact>... targets) {










 public ExpectedFlowFunction(int times, TestFact source, TestFact... targets) {










 this.times = times;










 this.source = source;










 this.targets = targets;



......@@ -316,6 +413,10 @@ public class TestHelper {









 public String toString() {










 return String.format("%s: %s -> {%s}", edge, source, Joiner.on(",").join(targets));










 }










 










 public abstract String transformerString();





















 public abstract FlowFunction.ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler);










 }










 










 private static interface EdgeVisitor {



......@@ -341,10 +442,10 @@ public class TestHelper {




















 public static class NormalEdge extends Edge {





















 private Statement unit;










 private Statement succUnit;










 private TestStatement unit;










 private TestStatement succUnit;





















 public NormalEdge(Statement unit, Statement succUnit, ExpectedFlowFunction...flowFunctions) {










 public NormalEdge(TestStatement unit, TestStatement succUnit, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.unit = unit;










 this.succUnit = succUnit;



......@@ -363,10 +464,10 @@ public class TestHelper {




















 public static class CallEdge extends Edge {





















 private Statement callSite;










 private Method destinationMethod;










 private TestStatement callSite;










 private TestMethod destinationMethod;





















 public CallEdge(Statement callSite, Method destinationMethod, ExpectedFlowFunction...flowFunctions) {










 public CallEdge(TestStatement callSite, TestMethod destinationMethod, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.destinationMethod = destinationMethod;



......@@ -384,10 +485,10 @@ public class TestHelper {









 }





















 public static class Call2ReturnEdge extends Edge {










 private Statement callSite;










 private Statement returnSite;










 private TestStatement callSite;










 private TestStatement returnSite;





















 public Call2ReturnEdge(Statement callSite, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 public Call2ReturnEdge(TestStatement callSite, TestStatement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.returnSite = returnSite;



......@@ -406,12 +507,12 @@ public class TestHelper {




















 public static class ReturnEdge extends Edge {





















 private Statement exitStmt;










 private Statement returnSite;










 private Statement callSite;










 private Method calleeMethod;










 private TestStatement exitStmt;










 private TestStatement returnSite;










 private TestStatement callSite;










 private TestMethod calleeMethod;





















 public ReturnEdge(Statement callSite, Statement exitStmt, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 public ReturnEdge(TestStatement callSite, TestStatement exitStmt, TestStatement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.exitStmt = exitStmt;



......@@ -438,11 +539,11 @@ public class TestHelper {









 return a.equals(b);










 }





















 public FlowFunctions<Statement, TestFieldRef, Fact, Method> flowFunctions() {










 return new FlowFunctions<Statement, TestFieldRef, Fact, Method>() {










 public FlowFunctions<TestStatement, TestFieldRef, TestFact, TestMethod> flowFunctions() {










 return new FlowFunctions<TestStatement, TestFieldRef, TestFact, TestMethod>() {





















 @Override










 public FlowFunction<TestFieldRef, Fact> getReturnFlowFunction(Statement callSite, Method calleeMethod, Statement exitStmt, Statement returnSite) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getReturnFlowFunction(TestStatement callSite, TestMethod calleeMethod, TestStatement exitStmt, TestStatement returnSite) {










 for (final ReturnEdge edge : returnEdges) {










 if (nullAwareEquals(callSite, edge.callSite) && edge.calleeMethod.equals(calleeMethod)










 && edge.exitStmt.equals(exitStmt) && nullAwareEquals(edge.returnSite, returnSite)) {



......@@ -454,17 +555,17 @@ public class TestHelper {









 }





















 @Override










 public FlowFunction<TestFieldRef, Fact> getNormalFlowFunction(final Statement curr, final Statement succ) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getNormalFlowFunction(final TestStatement curr) {










 for (final NormalEdge edge : normalEdges) {










 if (edge.unit.equals(curr) && edge.succUnit.equals(succ)) {










 if (edge.unit.equals(curr)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for %s -> %s", curr, succ));










 throw new AssertionError(String.format("No Flow Function expected for %s", curr));










 }





















 @Override










 public FlowFunction<TestFieldRef, Fact> getCallToReturnFlowFunction(Statement callSite, Statement returnSite) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getCallToReturnFlowFunction(TestStatement callSite, TestStatement returnSite) {










 for (final Call2ReturnEdge edge : call2retEdges) {










 if (edge.callSite.equals(callSite) && edge.returnSite.equals(returnSite)) {










 return createFlowFunction(edge);



......@@ -474,7 +575,7 @@ public class TestHelper {









 }





















 @Override










 public FlowFunction<TestFieldRef, Fact> getCallFlowFunction(Statement callStmt, Method destinationMethod) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getCallFlowFunction(TestStatement callStmt, TestMethod destinationMethod) {










 for (final CallEdge edge : callEdges) {










 if (edge.callSite.equals(callStmt) && edge.destinationMethod.equals(destinationMethod)) {










 return createFlowFunction(edge);



......@@ -483,20 +584,18 @@ public class TestHelper {









 throw new AssertionError(String.format("No Flow Function expected for call %s -> %s", callStmt, destinationMethod));










 }





















 private FlowFunction<TestFieldRef, Fact> createFlowFunction(final Edge edge) {










 return new FlowFunction<TestFieldRef, Fact>() {










 private FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> createFlowFunction(final Edge edge) {










 return new FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod>() {










 @Override










 public Set<ConstrainedFact<TestFieldRef, Fact>> computeTargets(Fact source) {










 Set<ConstrainedFact<TestFieldRef, Fact>> result = Sets.newHashSet();










 public Set<FlowFunction.ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod>> computeTargets(TestFact source,










 AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 Set<ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod>> result = Sets.newHashSet();










 boolean found = false;










 for (ExpectedFlowFunction ff : edge.flowFunctions) {










 if (ff.source.equals(source.cloneWithAccessPath(source.getAccessPath().setResolver(null)))) {










 if (ff.source.equals(source)) {










 if (remainingFlowFunctions.remove(ff)) {










 for(ConstrainedFact<TestFieldRef, Fact> target : ff.targets) {










 result.add(new ConstrainedFact<TestFieldRef, Fact>(










 target.getFact().cloneWithAccessPath(










 target.getFact().accessPath.setResolver(source.getAccessPath().getResolver())), 










 target.getConstraint()));










 for(TestFact target : ff.targets) {










 result.add(ff.apply(target, accPathHandler));










 }










 found = true;










 } else {



......@@ -515,17 +614,44 @@ public class TestHelper {









 }





















 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {










 FieldSensitiveIFDSSolver<Statement, String, TestFieldRef, Fact, Method, InterproceduralCFG<Statement,Method>> solver = new FieldSensitiveIFDSSolver<Statement,String, TestFieldRef ,Fact, Method, InterproceduralCFG<Statement,Method>>(createTabulationProblem(followReturnsPastSeeds, initialSeeds));










 FieldSensitiveIFDSSolver<TestStatement, TestFieldRef, TestFact, TestMethod, InterproceduralCFG<TestStatement,TestMethod>> solver = new FieldSensitiveIFDSSolver<TestStatement, TestFieldRef ,TestFact, TestMethod, InterproceduralCFG<TestStatement,TestMethod>>(










 createTabulationProblem(followReturnsPastSeeds, initialSeeds), new FactMergeHandler<TestFact>() {










 @Override










 public void merge(TestFact previousFact, TestFact currentFact) {










 }





















 @Override










 public void restoreCallingContext(TestFact factAtReturnSite, TestFact factAtCallSite) {










 }










 










 }, debugger);










 addExpectationsToDebugger();










 solver.solve();










 










 assertAllFlowFunctionsUsed();










 }










 










 










 private IFDSTabulationProblem<Statement, TestFieldRef, Fact, Method, InterproceduralCFG<Statement, Method>> createTabulationProblem(final boolean followReturnsPastSeeds, final String[] initialSeeds) {










 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();










 final FlowFunctions<Statement, TestFieldRef, Fact, Method> flowFunctions = flowFunctions();










 private void addExpectationsToDebugger() {










 for(NormalEdge edge : normalEdges) {










 debugger.expectNormalFlow(edge.unit, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 for(CallEdge edge : callEdges) {










 debugger.expectCallFlow(edge.callSite, edge.destinationMethod, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 for(Call2ReturnEdge edge : call2retEdges) {










 debugger.expectNormalFlow(edge.callSite, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 for(ReturnEdge edge : returnEdges) {










 debugger.expectReturnFlow(edge.exitStmt, edge.returnSite, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 }





















 private IFDSTabulationProblem<TestStatement, TestFieldRef, TestFact, TestMethod, InterproceduralCFG<TestStatement, TestMethod>> createTabulationProblem(final boolean followReturnsPastSeeds, final String[] initialSeeds) {










 final InterproceduralCFG<TestStatement, TestMethod> icfg = buildIcfg();










 final FlowFunctions<TestStatement, TestFieldRef, TestFact, TestMethod> flowFunctions = flowFunctions();










 










 return new IFDSTabulationProblem<Statement,TestFieldRef, Fact, Method, InterproceduralCFG<Statement, Method>>() {










 return new IFDSTabulationProblem<TestStatement,TestFieldRef, TestFact, TestMethod, InterproceduralCFG<TestStatement, TestMethod>>() {





















 @Override










 public boolean followReturnsPastSeeds() {



......@@ -548,27 +674,37 @@ public class TestHelper {









 }





















 @Override










 public FlowFunctions<Statement,TestFieldRef, Fact, Method> flowFunctions() {










 public FlowFunctions<TestStatement,TestFieldRef, TestFact, TestMethod> flowFunctions() {










 return flowFunctions;










 }





















 @Override










 public InterproceduralCFG<Statement, Method> interproceduralCFG() {










 public InterproceduralCFG<TestStatement, TestMethod> interproceduralCFG() {










 return icfg;










 }





















 @Override










 public Map<Statement, Set<Fact>> initialSeeds() {










 Map<Statement, Set<Fact>> result = Maps.newHashMap();










 public Map<TestStatement, Set<TestFact>> initialSeeds() {










 Map<TestStatement, Set<TestFact>> result = Maps.newHashMap();










 for (String stmt : initialSeeds) {










 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));










 result.put(new TestStatement(stmt), Sets.newHashSet(new TestFact("0")));










 }










 return result;










 }





















 @Override










 public Fact zeroValue() {










 return new Fact("0");










 public TestFact zeroValue() {










 return new TestFact("0");










 }










 










 @Override










 public ZeroHandler<TestFieldRef> zeroHandler() {










 return new ZeroHandler<TestFieldRef>() {










 @Override










 public boolean shouldGenerateAccessPath(AccessPath<TestFieldRef> accPath) {










 return true;










 }










 };










 }










 };










 }



......














test/heros/alias/Method.java

â†’

test/heros/alias/TestMethod.java








View file @ 3398e46f






......@@ -10,11 +10,11 @@









 ******************************************************************************/










package heros.alias;





















public class Method {










public class TestMethod {





















 public final String name;










 










 public Method(String name) {










 public TestMethod(String name) {










 this.name = name;










 }














......@@ -32,9 +32,9 @@ public class Method {









 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Method))










 if (!(obj instanceof TestMethod))










 return false;










 Method other = (Method) obj;










 TestMethod other = (TestMethod) obj;










 if (name == null) {










 if (other.name != null)










 return false;



......














test/heros/alias/Statement.java

â†’

test/heros/alias/TestStatement.java








View file @ 3398e46f






......@@ -10,11 +10,11 @@









 ******************************************************************************/










package heros.alias;





















public class Statement {










public class TestStatement {





















 public final String identifier;










 










 public Statement(String identifier) {










 public TestStatement(String identifier) {










 this.identifier = identifier;










 }














......@@ -32,9 +32,9 @@ public class Statement {









 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Statement))










 if (!(obj instanceof TestStatement))










 return false;










 Statement other = (Statement) obj;










 TestStatement other = (TestStatement) obj;










 if (identifier == null) {










 if (other.identifier != null)










 return false;



......














test/heros/utilities/TestHelper.java








View file @ 3398e46f






......@@ -15,13 +15,17 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.alias.TestStatement;










import heros.alias.TestHelper.NormalEdge;










import heros.solver.BiDiIFDSSolver;










import heros.solver.IFDSSolver;





















import java.util.Collection;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Set;





















import com.google.common.base.Joiner;










import com.google.common.base.Predicate;










import com.google.common.collect.HashMultimap;



......@@ -150,6 +154,16 @@ public class TestHelper {









 }










 return result;










 }










 










 @Override










 public List<Statement> getPredsOf(Statement stmt) {










 LinkedList<Statement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.succUnit.equals(stmt))










 result.add(edge.unit);










 }










 return result;










 }





















 @Override










 public Collection<Statement> getStartPointsOf(Method m) {



......









Prev


1


2


3


Next













test/heros/alias/TestFact.java



0 â†’ 100644







View file @ 3398e46f













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















public class TestFact {





















 public final String baseValue;










 










 public TestFact(String baseValue) {










 this.baseValue = baseValue;










 }










 










 @Override










 public String toString() {










 return "[Fact "+baseValue+"]";










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((baseValue == null) ? 0 : baseValue.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof TestFact))










 return false;










 TestFact other = (TestFact) obj;










 if (baseValue == null) {










 if (other.baseValue != null)










 return false;










 } else if (!baseValue.equals(other.baseValue))










 return false;










 return true;










 } 










}












test/heros/alias/TestFact.java



0 â†’ 100644







View file @ 3398e46f








test/heros/alias/TestFact.java



0 â†’ 100644









View file @ 3398e46f


3398e46f










/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















public class TestFact {





















 public final String baseValue;










 










 public TestFact(String baseValue) {










 this.baseValue = baseValue;










 }










 










 @Override










 public String toString() {










 return "[Fact "+baseValue+"]";










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((baseValue == null) ? 0 : baseValue.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof TestFact))










 return false;










 TestFact other = (TestFact) obj;










 if (baseValue == null) {










 if (other.baseValue != null)










 return false;










 } else if (!baseValue.equals(other.baseValue))










 return false;










 return true;










 } 










}













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















public class TestFact {





















 public final String baseValue;










 










 public TestFact(String baseValue) {










 this.baseValue = baseValue;










 }










 










 @Override










 public String toString() {










 return "[Fact "+baseValue+"]";










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((baseValue == null) ? 0 : baseValue.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof TestFact))










 return false;










 TestFact other = (TestFact) obj;










 if (baseValue == null) {










 if (other.baseValue != null)










 return false;










 } else if (!baseValue.equals(other.baseValue))










 return false;










 return true;










 } 










}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2014 Johannes Lerch. * Copyright (c) 2014 Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;public class TestFact {publicclassTestFact{ public final String baseValue;publicfinalStringbaseValue;  public TestFact(String baseValue) {publicTestFact(StringbaseValue){ this.baseValue = baseValue;this.baseValue=baseValue; }}  @Override@Override public String toString() {publicStringtoString(){ return "[Fact "+baseValue+"]";return"[Fact "+baseValue+"]"; }} @Override@Override public int hashCode() {publicinthashCode(){ final int prime = 31;finalintprime=31; int result = 1;intresult=1; result = prime * result + ((baseValue == null) ? 0 : baseValue.hashCode());result=prime*result+((baseValue==null)?0:baseValue.hashCode()); return result;returnresult; }} @Override@Override public boolean equals(Object obj) {publicbooleanequals(Objectobj){ if (this == obj)if(this==obj) return true;returntrue; if (obj == null)if(obj==null) return false;returnfalse; if (!(obj instanceof TestFact))if(!(objinstanceofTestFact)) return false;returnfalse; TestFact other = (TestFact) obj;TestFactother=(TestFact)obj; if (baseValue == null) {if(baseValue==null){ if (other.baseValue != null)if(other.baseValue!=null) return false;returnfalse; } else if (!baseValue.equals(other.baseValue))}elseif(!baseValue.equals(other.baseValue)) return false;returnfalse; return true;returntrue; } }}}








test/heros/alias/TestHelper.java








View file @ 3398e46f






......@@ -37,16 +37,21 @@ import com.google.common.collect.Sets;




















public class TestHelper {





















 private Multimap<Method, Statement> method2startPoint = HashMultimap.create();










 private Multimap<TestMethod, TestStatement> method2startPoint = HashMultimap.create();










 private List<NormalEdge> normalEdges = Lists.newLinkedList();










 private List<CallEdge> callEdges = Lists.newLinkedList();










 private List<Call2ReturnEdge> call2retEdges = Lists.newLinkedList();










 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, Method> stmt2method = Maps.newHashMap();










 private Map<TestStatement, TestMethod> stmt2method = Maps.newHashMap();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();










 private TestDebugger<TestFieldRef, TestFact, TestStatement, TestMethod, InterproceduralCFG<TestStatement, TestMethod>> debugger;





















 public MethodHelper method(String methodName, Statement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new Method(methodName));










 public TestHelper(TestDebugger<TestFieldRef, TestFact, TestStatement, TestMethod, InterproceduralCFG<TestStatement, TestMethod>> debugger) {










 this.debugger = debugger;










 }





















 public MethodHelper method(String methodName, TestStatement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new TestMethod(methodName));










 methodHelper.startPoints(startingPoints);










 for(EdgeBuilder edgeBuilder : edgeBuilders){










 methodHelper.edges(edgeBuilder.edges());



......@@ -54,32 +59,32 @@ public class TestHelper {









 return methodHelper;










 }





















 public static Statement[] startPoints(String... startingPoints) {










 Statement[] result = new Statement[startingPoints.length];










 public static TestStatement[] startPoints(String... startingPoints) {










 TestStatement[] result = new TestStatement[startingPoints.length];










 for (int i = 0; i < result.length; i++) {










 result[i] = new Statement(startingPoints[i]);










 result[i] = new TestStatement(startingPoints[i]);










 }










 return result;










 }





















 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt) {










 return new EdgeBuilder.NormalStmtBuilder(new Statement(stmt));










 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt, ExpectedFlowFunction...flowFunctions) {










 return new EdgeBuilder.NormalStmtBuilder(new TestStatement(stmt), flowFunctions);










 }










 










 public static EdgeBuilder.CallSiteBuilder callSite(String callSite) {










 return new EdgeBuilder.CallSiteBuilder(new Statement(callSite));










 return new EdgeBuilder.CallSiteBuilder(new TestStatement(callSite));










 }










 










 public static EdgeBuilder.ExitStmtBuilder exitStmt(String exitStmt) {










 return new EdgeBuilder.ExitStmtBuilder(new Statement(exitStmt));










 return new EdgeBuilder.ExitStmtBuilder(new TestStatement(exitStmt));










 }










 










 public static Statement over(String callSite) {










 return new Statement(callSite);










 public static TestStatement over(String callSite) {










 return new TestStatement(callSite);










 }










 










 public static Statement to(String returnSite) {










 return new Statement(returnSite);










 public static TestStatement to(String returnSite) {










 return new TestStatement(returnSite);










 }










 










 public static ExpectedFlowFunction kill(String source) {



......@@ -87,27 +92,87 @@ public class TestHelper {









 }










 










 public static ExpectedFlowFunction kill(int times, String source) {










 return new ExpectedFlowFunction(times, new Fact(source));










 return new ExpectedFlowFunction(times, new TestFact(source)) {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 throw new IllegalStateException();










 }










 










 @Override










 public String transformerString() {










 return "";










 }










 };










 }





















 public static Constraint<TestFieldRef> readField(String fieldName) {










 return new FlowFunction.ReadFieldConstraint<TestFieldRef>(new TestFieldRef(fieldName));










 public static AccessPathTransformer readField(final String fieldName) {










 return new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.read(new TestFieldRef(fieldName)).generate(target);










 }





















 @Override










 public String toString() {










 return "read("+fieldName+")";










 }










 };










 }










 










 public static Constraint<TestFieldRef> writeField(String fieldName) {










 return new FlowFunction.WriteFieldConstraint<TestFieldRef>(new TestFieldRef(fieldName));










 public static AccessPathTransformer prependField(final String fieldName) {










 return new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.prepend(new TestFieldRef(fieldName)).generate(target);










 }










 










 @Override










 public String toString() {










 return "prepend("+fieldName+")";










 }










 };










 }










 










 public static ExpectedFlowFunction flow(String source, Constraint<TestFieldRef> constraint, String... targets) {










 return flow(1, source, constraint, targets);










 public static AccessPathTransformer overwriteField(final String fieldName) {










 return new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.overwrite(new TestFieldRef(fieldName)).generate(target);










 }










 










 @Override










 public String toString() {










 return "write("+fieldName+")";










 }










 };










 }










 










 public static ExpectedFlowFunction flow(String source, final AccessPathTransformer transformer, String... targets) {










 return flow(1, source, transformer, targets);










 }










 










 public static ExpectedFlowFunction flow(int times, String source, Constraint<TestFieldRef> constraint, String... targets) {










 ConstrainedFact<TestFieldRef, Fact>[] targetFacts = new ConstrainedFact[targets.length];










 public static ExpectedFlowFunction flow(int times, String source, final AccessPathTransformer transformer, String... targets) {










 TestFact[] targetFacts = new TestFact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new ConstrainedFact<TestFieldRef, Fact>(new Fact(targets[i]), constraint);










 targetFacts[i] = new TestFact(targets[i]);










 }










 return new ExpectedFlowFunction(times, new Fact(source), targetFacts);










 return new ExpectedFlowFunction(times, new TestFact(source), targetFacts) {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return transformer.apply(target, accPathHandler);










 }










 










 @Override










 public String transformerString() {










 return transformer.toString();










 }










 };










 }










 










 private static interface AccessPathTransformer {





















 ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler); 










 










 }










 










 public static ExpectedFlowFunction flow(String source, String... targets) {



......@@ -115,28 +180,39 @@ public class TestHelper {









 }










 










 public static ExpectedFlowFunction flow(int times, String source, String... targets) {










 return flow(times, source, null, targets);










 return flow(times, source, new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.generate(target);










 }










 










 @Override










 public String toString() {










 return "";










 }










 










 }, targets);










 }










 










 public static int times(int times) {










 return times;










 }





















 public InterproceduralCFG<Statement, Method> buildIcfg() {










 return new InterproceduralCFG<Statement, Method>() {










 public InterproceduralCFG<TestStatement, TestMethod> buildIcfg() {










 return new InterproceduralCFG<TestStatement, TestMethod>() {





















 @Override










 public boolean isStartPoint(Statement stmt) {










 public boolean isStartPoint(TestStatement stmt) {










 return method2startPoint.values().contains(stmt);










 }





















 @Override










 public boolean isFallThroughSuccessor(Statement stmt, Statement succ) {










 public boolean isFallThroughSuccessor(TestStatement stmt, TestStatement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public boolean isExitStmt(Statement stmt) {










 public boolean isExitStmt(TestStatement stmt) {










 for(ReturnEdge edge : returnEdges) {










 if(edge.exitStmt.equals(stmt))










 return true;



......@@ -145,7 +221,7 @@ public class TestHelper {









 }





















 @Override










 public boolean isCallStmt(final Statement stmt) {










 public boolean isCallStmt(final TestStatement stmt) {










 return Iterables.any(callEdges, new Predicate<CallEdge>() {










 @Override










 public boolean apply(CallEdge edge) {



......@@ -155,13 +231,13 @@ public class TestHelper {









 }





















 @Override










 public boolean isBranchTarget(Statement stmt, Statement succ) {










 public boolean isBranchTarget(TestStatement stmt, TestStatement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public List<Statement> getSuccsOf(Statement n) {










 LinkedList<Statement> result = Lists.newLinkedList();










 public List<TestStatement> getSuccsOf(TestStatement n) {










 LinkedList<TestStatement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.unit.equals(n))










 result.add(edge.succUnit);



......@@ -170,13 +246,23 @@ public class TestHelper {









 }





















 @Override










 public Collection<Statement> getStartPointsOf(Method m) {










 public List<TestStatement> getPredsOf(TestStatement stmt) {










 LinkedList<TestStatement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.succUnit.equals(stmt))










 result.add(edge.unit);










 }










 return result;










 }





















 @Override










 public Collection<TestStatement> getStartPointsOf(TestMethod m) {










 return method2startPoint.get(m);










 }





















 @Override










 public Collection<Statement> getReturnSitesOfCallAt(Statement n) {










 Set<Statement> result = Sets.newHashSet();










 public Collection<TestStatement> getReturnSitesOfCallAt(TestStatement n) {










 Set<TestStatement> result = Sets.newHashSet();










 for (Call2ReturnEdge edge : call2retEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n))










 result.add(edge.returnSite);



......@@ -189,18 +275,21 @@ public class TestHelper {









 }





















 @Override










 public Method getMethodOf(Statement n) {










 return stmt2method.get(n);










 public TestMethod getMethodOf(TestStatement n) {










 if(stmt2method.containsKey(n))










 return stmt2method.get(n);










 else










 throw new IllegalArgumentException("Statement "+n+" is not defined in any method.");










 }





















 @Override










 public Set<Statement> getCallsFromWithin(Method m) {










 public Set<TestStatement> getCallsFromWithin(TestMethod m) {










 throw new IllegalStateException();










 }





















 @Override










 public Collection<Statement> getCallersOf(Method m) {










 Set<Statement> result = Sets.newHashSet();










 public Collection<TestStatement> getCallersOf(TestMethod m) {










 Set<TestStatement> result = Sets.newHashSet();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.destinationMethod.equals(m)) {










 result.add(edge.callSite);



......@@ -215,8 +304,8 @@ public class TestHelper {









 }





















 @Override










 public Collection<Method> getCalleesOfCallAt(Statement n) {










 List<Method> result = Lists.newLinkedList();










 public Collection<TestMethod> getCalleesOfCallAt(TestStatement n) {










 List<TestMethod> result = Lists.newLinkedList();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n)) {










 result.add(edge.destinationMethod);



......@@ -226,7 +315,7 @@ public class TestHelper {









 }





















 @Override










 public Set<Statement> allNonCallStartNodes() {










 public Set<TestStatement> allNonCallStartNodes() {










 throw new IllegalStateException();










 }










 };



......@@ -237,30 +326,31 @@ public class TestHelper {









 remainingFlowFunctions.isEmpty());










 }





















 private void addOrVerifyStmt2Method(Statement stmt, Method m) {










 private void addOrVerifyStmt2Method(TestStatement stmt, TestMethod m) {










 if (stmt2method.containsKey(stmt) && !stmt2method.get(stmt).equals(m)) {










 throw new IllegalArgumentException("Statement " + stmt + " is used in multiple methods: " + m + " and " + stmt2method.get(stmt));










 }










 stmt2method.put(stmt, m);










 }





















 public MethodHelper method(Method method) {










 public MethodHelper method(TestMethod method) {










 MethodHelper h = new MethodHelper(method);










 return h;










 }





















 public class MethodHelper {





















 private Method method;










 private TestMethod method;





















 public MethodHelper(Method method) {










 public MethodHelper(TestMethod method) {










 this.method = method;










 }





















 public void edges(Collection<Edge> edges) {










 for(Edge edge : edges) {










 for(ExpectedFlowFunction ff : edge.flowFunctions) {










 remainingFlowFunctions.add(ff, ff.times);










 if(!remainingFlowFunctions.contains(ff))










 remainingFlowFunctions.add(ff, ff.times);










 }










 










 edge.accept(new EdgeVisitor() {



......@@ -294,19 +384,26 @@ public class TestHelper {









 }










 }





















 public void startPoints(Statement[] startingPoints) {










 public void startPoints(TestStatement[] startingPoints) {










 method2startPoint.putAll(method, Lists.newArrayList(startingPoints));










 }










 }










 










 public static class ExpectedFlowFunction {










 private static String expectedFlowFunctionsToString(ExpectedFlowFunction[] flowFunctions) {










 String result = "";










 for(ExpectedFlowFunction ff : flowFunctions)










 result += ff.source+"->"+Joiner.on(",").join(ff.targets)+ff.transformerString()+", ";










 return result;










 }










 










 public static abstract class ExpectedFlowFunction {





















 public final Fact source;










 public final ConstrainedFact<TestFieldRef, Fact>[] targets;










 public final TestFact source;










 public final TestFact[] targets;










 public Edge edge;










 private int times;





















 public ExpectedFlowFunction(int times, Fact source, ConstrainedFact<TestFieldRef, Fact>... targets) {










 public ExpectedFlowFunction(int times, TestFact source, TestFact... targets) {










 this.times = times;










 this.source = source;










 this.targets = targets;



......@@ -316,6 +413,10 @@ public class TestHelper {









 public String toString() {










 return String.format("%s: %s -> {%s}", edge, source, Joiner.on(",").join(targets));










 }










 










 public abstract String transformerString();





















 public abstract FlowFunction.ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler);










 }










 










 private static interface EdgeVisitor {



......@@ -341,10 +442,10 @@ public class TestHelper {




















 public static class NormalEdge extends Edge {





















 private Statement unit;










 private Statement succUnit;










 private TestStatement unit;










 private TestStatement succUnit;





















 public NormalEdge(Statement unit, Statement succUnit, ExpectedFlowFunction...flowFunctions) {










 public NormalEdge(TestStatement unit, TestStatement succUnit, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.unit = unit;










 this.succUnit = succUnit;



......@@ -363,10 +464,10 @@ public class TestHelper {




















 public static class CallEdge extends Edge {





















 private Statement callSite;










 private Method destinationMethod;










 private TestStatement callSite;










 private TestMethod destinationMethod;





















 public CallEdge(Statement callSite, Method destinationMethod, ExpectedFlowFunction...flowFunctions) {










 public CallEdge(TestStatement callSite, TestMethod destinationMethod, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.destinationMethod = destinationMethod;



......@@ -384,10 +485,10 @@ public class TestHelper {









 }





















 public static class Call2ReturnEdge extends Edge {










 private Statement callSite;










 private Statement returnSite;










 private TestStatement callSite;










 private TestStatement returnSite;





















 public Call2ReturnEdge(Statement callSite, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 public Call2ReturnEdge(TestStatement callSite, TestStatement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.returnSite = returnSite;



......@@ -406,12 +507,12 @@ public class TestHelper {




















 public static class ReturnEdge extends Edge {





















 private Statement exitStmt;










 private Statement returnSite;










 private Statement callSite;










 private Method calleeMethod;










 private TestStatement exitStmt;










 private TestStatement returnSite;










 private TestStatement callSite;










 private TestMethod calleeMethod;





















 public ReturnEdge(Statement callSite, Statement exitStmt, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 public ReturnEdge(TestStatement callSite, TestStatement exitStmt, TestStatement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.exitStmt = exitStmt;



......@@ -438,11 +539,11 @@ public class TestHelper {









 return a.equals(b);










 }





















 public FlowFunctions<Statement, TestFieldRef, Fact, Method> flowFunctions() {










 return new FlowFunctions<Statement, TestFieldRef, Fact, Method>() {










 public FlowFunctions<TestStatement, TestFieldRef, TestFact, TestMethod> flowFunctions() {










 return new FlowFunctions<TestStatement, TestFieldRef, TestFact, TestMethod>() {





















 @Override










 public FlowFunction<TestFieldRef, Fact> getReturnFlowFunction(Statement callSite, Method calleeMethod, Statement exitStmt, Statement returnSite) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getReturnFlowFunction(TestStatement callSite, TestMethod calleeMethod, TestStatement exitStmt, TestStatement returnSite) {










 for (final ReturnEdge edge : returnEdges) {










 if (nullAwareEquals(callSite, edge.callSite) && edge.calleeMethod.equals(calleeMethod)










 && edge.exitStmt.equals(exitStmt) && nullAwareEquals(edge.returnSite, returnSite)) {



......@@ -454,17 +555,17 @@ public class TestHelper {









 }





















 @Override










 public FlowFunction<TestFieldRef, Fact> getNormalFlowFunction(final Statement curr, final Statement succ) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getNormalFlowFunction(final TestStatement curr) {










 for (final NormalEdge edge : normalEdges) {










 if (edge.unit.equals(curr) && edge.succUnit.equals(succ)) {










 if (edge.unit.equals(curr)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for %s -> %s", curr, succ));










 throw new AssertionError(String.format("No Flow Function expected for %s", curr));










 }





















 @Override










 public FlowFunction<TestFieldRef, Fact> getCallToReturnFlowFunction(Statement callSite, Statement returnSite) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getCallToReturnFlowFunction(TestStatement callSite, TestStatement returnSite) {










 for (final Call2ReturnEdge edge : call2retEdges) {










 if (edge.callSite.equals(callSite) && edge.returnSite.equals(returnSite)) {










 return createFlowFunction(edge);



......@@ -474,7 +575,7 @@ public class TestHelper {









 }





















 @Override










 public FlowFunction<TestFieldRef, Fact> getCallFlowFunction(Statement callStmt, Method destinationMethod) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getCallFlowFunction(TestStatement callStmt, TestMethod destinationMethod) {










 for (final CallEdge edge : callEdges) {










 if (edge.callSite.equals(callStmt) && edge.destinationMethod.equals(destinationMethod)) {










 return createFlowFunction(edge);



......@@ -483,20 +584,18 @@ public class TestHelper {









 throw new AssertionError(String.format("No Flow Function expected for call %s -> %s", callStmt, destinationMethod));










 }





















 private FlowFunction<TestFieldRef, Fact> createFlowFunction(final Edge edge) {










 return new FlowFunction<TestFieldRef, Fact>() {










 private FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> createFlowFunction(final Edge edge) {










 return new FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod>() {










 @Override










 public Set<ConstrainedFact<TestFieldRef, Fact>> computeTargets(Fact source) {










 Set<ConstrainedFact<TestFieldRef, Fact>> result = Sets.newHashSet();










 public Set<FlowFunction.ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod>> computeTargets(TestFact source,










 AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 Set<ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod>> result = Sets.newHashSet();










 boolean found = false;










 for (ExpectedFlowFunction ff : edge.flowFunctions) {










 if (ff.source.equals(source.cloneWithAccessPath(source.getAccessPath().setResolver(null)))) {










 if (ff.source.equals(source)) {










 if (remainingFlowFunctions.remove(ff)) {










 for(ConstrainedFact<TestFieldRef, Fact> target : ff.targets) {










 result.add(new ConstrainedFact<TestFieldRef, Fact>(










 target.getFact().cloneWithAccessPath(










 target.getFact().accessPath.setResolver(source.getAccessPath().getResolver())), 










 target.getConstraint()));










 for(TestFact target : ff.targets) {










 result.add(ff.apply(target, accPathHandler));










 }










 found = true;










 } else {



......@@ -515,17 +614,44 @@ public class TestHelper {









 }





















 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {










 FieldSensitiveIFDSSolver<Statement, String, TestFieldRef, Fact, Method, InterproceduralCFG<Statement,Method>> solver = new FieldSensitiveIFDSSolver<Statement,String, TestFieldRef ,Fact, Method, InterproceduralCFG<Statement,Method>>(createTabulationProblem(followReturnsPastSeeds, initialSeeds));










 FieldSensitiveIFDSSolver<TestStatement, TestFieldRef, TestFact, TestMethod, InterproceduralCFG<TestStatement,TestMethod>> solver = new FieldSensitiveIFDSSolver<TestStatement, TestFieldRef ,TestFact, TestMethod, InterproceduralCFG<TestStatement,TestMethod>>(










 createTabulationProblem(followReturnsPastSeeds, initialSeeds), new FactMergeHandler<TestFact>() {










 @Override










 public void merge(TestFact previousFact, TestFact currentFact) {










 }





















 @Override










 public void restoreCallingContext(TestFact factAtReturnSite, TestFact factAtCallSite) {










 }










 










 }, debugger);










 addExpectationsToDebugger();










 solver.solve();










 










 assertAllFlowFunctionsUsed();










 }










 










 










 private IFDSTabulationProblem<Statement, TestFieldRef, Fact, Method, InterproceduralCFG<Statement, Method>> createTabulationProblem(final boolean followReturnsPastSeeds, final String[] initialSeeds) {










 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();










 final FlowFunctions<Statement, TestFieldRef, Fact, Method> flowFunctions = flowFunctions();










 private void addExpectationsToDebugger() {










 for(NormalEdge edge : normalEdges) {










 debugger.expectNormalFlow(edge.unit, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 for(CallEdge edge : callEdges) {










 debugger.expectCallFlow(edge.callSite, edge.destinationMethod, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 for(Call2ReturnEdge edge : call2retEdges) {










 debugger.expectNormalFlow(edge.callSite, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 for(ReturnEdge edge : returnEdges) {










 debugger.expectReturnFlow(edge.exitStmt, edge.returnSite, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 }





















 private IFDSTabulationProblem<TestStatement, TestFieldRef, TestFact, TestMethod, InterproceduralCFG<TestStatement, TestMethod>> createTabulationProblem(final boolean followReturnsPastSeeds, final String[] initialSeeds) {










 final InterproceduralCFG<TestStatement, TestMethod> icfg = buildIcfg();










 final FlowFunctions<TestStatement, TestFieldRef, TestFact, TestMethod> flowFunctions = flowFunctions();










 










 return new IFDSTabulationProblem<Statement,TestFieldRef, Fact, Method, InterproceduralCFG<Statement, Method>>() {










 return new IFDSTabulationProblem<TestStatement,TestFieldRef, TestFact, TestMethod, InterproceduralCFG<TestStatement, TestMethod>>() {





















 @Override










 public boolean followReturnsPastSeeds() {



......@@ -548,27 +674,37 @@ public class TestHelper {









 }





















 @Override










 public FlowFunctions<Statement,TestFieldRef, Fact, Method> flowFunctions() {










 public FlowFunctions<TestStatement,TestFieldRef, TestFact, TestMethod> flowFunctions() {










 return flowFunctions;










 }





















 @Override










 public InterproceduralCFG<Statement, Method> interproceduralCFG() {










 public InterproceduralCFG<TestStatement, TestMethod> interproceduralCFG() {










 return icfg;










 }





















 @Override










 public Map<Statement, Set<Fact>> initialSeeds() {










 Map<Statement, Set<Fact>> result = Maps.newHashMap();










 public Map<TestStatement, Set<TestFact>> initialSeeds() {










 Map<TestStatement, Set<TestFact>> result = Maps.newHashMap();










 for (String stmt : initialSeeds) {










 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));










 result.put(new TestStatement(stmt), Sets.newHashSet(new TestFact("0")));










 }










 return result;










 }





















 @Override










 public Fact zeroValue() {










 return new Fact("0");










 public TestFact zeroValue() {










 return new TestFact("0");










 }










 










 @Override










 public ZeroHandler<TestFieldRef> zeroHandler() {










 return new ZeroHandler<TestFieldRef>() {










 @Override










 public boolean shouldGenerateAccessPath(AccessPath<TestFieldRef> accPath) {










 return true;










 }










 };










 }










 };










 }



......












test/heros/alias/TestHelper.java








View file @ 3398e46f








test/heros/alias/TestHelper.java










View file @ 3398e46f


3398e46f



......@@ -37,16 +37,21 @@ import com.google.common.collect.Sets;




















public class TestHelper {





















 private Multimap<Method, Statement> method2startPoint = HashMultimap.create();










 private Multimap<TestMethod, TestStatement> method2startPoint = HashMultimap.create();










 private List<NormalEdge> normalEdges = Lists.newLinkedList();










 private List<CallEdge> callEdges = Lists.newLinkedList();










 private List<Call2ReturnEdge> call2retEdges = Lists.newLinkedList();










 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, Method> stmt2method = Maps.newHashMap();










 private Map<TestStatement, TestMethod> stmt2method = Maps.newHashMap();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();










 private TestDebugger<TestFieldRef, TestFact, TestStatement, TestMethod, InterproceduralCFG<TestStatement, TestMethod>> debugger;





















 public MethodHelper method(String methodName, Statement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new Method(methodName));










 public TestHelper(TestDebugger<TestFieldRef, TestFact, TestStatement, TestMethod, InterproceduralCFG<TestStatement, TestMethod>> debugger) {










 this.debugger = debugger;










 }





















 public MethodHelper method(String methodName, TestStatement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new TestMethod(methodName));










 methodHelper.startPoints(startingPoints);










 for(EdgeBuilder edgeBuilder : edgeBuilders){










 methodHelper.edges(edgeBuilder.edges());



......@@ -54,32 +59,32 @@ public class TestHelper {









 return methodHelper;










 }





















 public static Statement[] startPoints(String... startingPoints) {










 Statement[] result = new Statement[startingPoints.length];










 public static TestStatement[] startPoints(String... startingPoints) {










 TestStatement[] result = new TestStatement[startingPoints.length];










 for (int i = 0; i < result.length; i++) {










 result[i] = new Statement(startingPoints[i]);










 result[i] = new TestStatement(startingPoints[i]);










 }










 return result;










 }





















 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt) {










 return new EdgeBuilder.NormalStmtBuilder(new Statement(stmt));










 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt, ExpectedFlowFunction...flowFunctions) {










 return new EdgeBuilder.NormalStmtBuilder(new TestStatement(stmt), flowFunctions);










 }










 










 public static EdgeBuilder.CallSiteBuilder callSite(String callSite) {










 return new EdgeBuilder.CallSiteBuilder(new Statement(callSite));










 return new EdgeBuilder.CallSiteBuilder(new TestStatement(callSite));










 }










 










 public static EdgeBuilder.ExitStmtBuilder exitStmt(String exitStmt) {










 return new EdgeBuilder.ExitStmtBuilder(new Statement(exitStmt));










 return new EdgeBuilder.ExitStmtBuilder(new TestStatement(exitStmt));










 }










 










 public static Statement over(String callSite) {










 return new Statement(callSite);










 public static TestStatement over(String callSite) {










 return new TestStatement(callSite);










 }










 










 public static Statement to(String returnSite) {










 return new Statement(returnSite);










 public static TestStatement to(String returnSite) {










 return new TestStatement(returnSite);










 }










 










 public static ExpectedFlowFunction kill(String source) {



......@@ -87,27 +92,87 @@ public class TestHelper {









 }










 










 public static ExpectedFlowFunction kill(int times, String source) {










 return new ExpectedFlowFunction(times, new Fact(source));










 return new ExpectedFlowFunction(times, new TestFact(source)) {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 throw new IllegalStateException();










 }










 










 @Override










 public String transformerString() {










 return "";










 }










 };










 }





















 public static Constraint<TestFieldRef> readField(String fieldName) {










 return new FlowFunction.ReadFieldConstraint<TestFieldRef>(new TestFieldRef(fieldName));










 public static AccessPathTransformer readField(final String fieldName) {










 return new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.read(new TestFieldRef(fieldName)).generate(target);










 }





















 @Override










 public String toString() {










 return "read("+fieldName+")";










 }










 };










 }










 










 public static Constraint<TestFieldRef> writeField(String fieldName) {










 return new FlowFunction.WriteFieldConstraint<TestFieldRef>(new TestFieldRef(fieldName));










 public static AccessPathTransformer prependField(final String fieldName) {










 return new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.prepend(new TestFieldRef(fieldName)).generate(target);










 }










 










 @Override










 public String toString() {










 return "prepend("+fieldName+")";










 }










 };










 }










 










 public static ExpectedFlowFunction flow(String source, Constraint<TestFieldRef> constraint, String... targets) {










 return flow(1, source, constraint, targets);










 public static AccessPathTransformer overwriteField(final String fieldName) {










 return new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.overwrite(new TestFieldRef(fieldName)).generate(target);










 }










 










 @Override










 public String toString() {










 return "write("+fieldName+")";










 }










 };










 }










 










 public static ExpectedFlowFunction flow(String source, final AccessPathTransformer transformer, String... targets) {










 return flow(1, source, transformer, targets);










 }










 










 public static ExpectedFlowFunction flow(int times, String source, Constraint<TestFieldRef> constraint, String... targets) {










 ConstrainedFact<TestFieldRef, Fact>[] targetFacts = new ConstrainedFact[targets.length];










 public static ExpectedFlowFunction flow(int times, String source, final AccessPathTransformer transformer, String... targets) {










 TestFact[] targetFacts = new TestFact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new ConstrainedFact<TestFieldRef, Fact>(new Fact(targets[i]), constraint);










 targetFacts[i] = new TestFact(targets[i]);










 }










 return new ExpectedFlowFunction(times, new Fact(source), targetFacts);










 return new ExpectedFlowFunction(times, new TestFact(source), targetFacts) {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return transformer.apply(target, accPathHandler);










 }










 










 @Override










 public String transformerString() {










 return transformer.toString();










 }










 };










 }










 










 private static interface AccessPathTransformer {





















 ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler); 










 










 }










 










 public static ExpectedFlowFunction flow(String source, String... targets) {



......@@ -115,28 +180,39 @@ public class TestHelper {









 }










 










 public static ExpectedFlowFunction flow(int times, String source, String... targets) {










 return flow(times, source, null, targets);










 return flow(times, source, new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.generate(target);










 }










 










 @Override










 public String toString() {










 return "";










 }










 










 }, targets);










 }










 










 public static int times(int times) {










 return times;










 }





















 public InterproceduralCFG<Statement, Method> buildIcfg() {










 return new InterproceduralCFG<Statement, Method>() {










 public InterproceduralCFG<TestStatement, TestMethod> buildIcfg() {










 return new InterproceduralCFG<TestStatement, TestMethod>() {





















 @Override










 public boolean isStartPoint(Statement stmt) {










 public boolean isStartPoint(TestStatement stmt) {










 return method2startPoint.values().contains(stmt);










 }





















 @Override










 public boolean isFallThroughSuccessor(Statement stmt, Statement succ) {










 public boolean isFallThroughSuccessor(TestStatement stmt, TestStatement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public boolean isExitStmt(Statement stmt) {










 public boolean isExitStmt(TestStatement stmt) {










 for(ReturnEdge edge : returnEdges) {










 if(edge.exitStmt.equals(stmt))










 return true;



......@@ -145,7 +221,7 @@ public class TestHelper {









 }





















 @Override










 public boolean isCallStmt(final Statement stmt) {










 public boolean isCallStmt(final TestStatement stmt) {










 return Iterables.any(callEdges, new Predicate<CallEdge>() {










 @Override










 public boolean apply(CallEdge edge) {



......@@ -155,13 +231,13 @@ public class TestHelper {









 }





















 @Override










 public boolean isBranchTarget(Statement stmt, Statement succ) {










 public boolean isBranchTarget(TestStatement stmt, TestStatement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public List<Statement> getSuccsOf(Statement n) {










 LinkedList<Statement> result = Lists.newLinkedList();










 public List<TestStatement> getSuccsOf(TestStatement n) {










 LinkedList<TestStatement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.unit.equals(n))










 result.add(edge.succUnit);



......@@ -170,13 +246,23 @@ public class TestHelper {









 }





















 @Override










 public Collection<Statement> getStartPointsOf(Method m) {










 public List<TestStatement> getPredsOf(TestStatement stmt) {










 LinkedList<TestStatement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.succUnit.equals(stmt))










 result.add(edge.unit);










 }










 return result;










 }





















 @Override










 public Collection<TestStatement> getStartPointsOf(TestMethod m) {










 return method2startPoint.get(m);










 }





















 @Override










 public Collection<Statement> getReturnSitesOfCallAt(Statement n) {










 Set<Statement> result = Sets.newHashSet();










 public Collection<TestStatement> getReturnSitesOfCallAt(TestStatement n) {










 Set<TestStatement> result = Sets.newHashSet();










 for (Call2ReturnEdge edge : call2retEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n))










 result.add(edge.returnSite);



......@@ -189,18 +275,21 @@ public class TestHelper {









 }





















 @Override










 public Method getMethodOf(Statement n) {










 return stmt2method.get(n);










 public TestMethod getMethodOf(TestStatement n) {










 if(stmt2method.containsKey(n))










 return stmt2method.get(n);










 else










 throw new IllegalArgumentException("Statement "+n+" is not defined in any method.");










 }





















 @Override










 public Set<Statement> getCallsFromWithin(Method m) {










 public Set<TestStatement> getCallsFromWithin(TestMethod m) {










 throw new IllegalStateException();










 }





















 @Override










 public Collection<Statement> getCallersOf(Method m) {










 Set<Statement> result = Sets.newHashSet();










 public Collection<TestStatement> getCallersOf(TestMethod m) {










 Set<TestStatement> result = Sets.newHashSet();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.destinationMethod.equals(m)) {










 result.add(edge.callSite);



......@@ -215,8 +304,8 @@ public class TestHelper {









 }





















 @Override










 public Collection<Method> getCalleesOfCallAt(Statement n) {










 List<Method> result = Lists.newLinkedList();










 public Collection<TestMethod> getCalleesOfCallAt(TestStatement n) {










 List<TestMethod> result = Lists.newLinkedList();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n)) {










 result.add(edge.destinationMethod);



......@@ -226,7 +315,7 @@ public class TestHelper {









 }





















 @Override










 public Set<Statement> allNonCallStartNodes() {










 public Set<TestStatement> allNonCallStartNodes() {










 throw new IllegalStateException();










 }










 };



......@@ -237,30 +326,31 @@ public class TestHelper {









 remainingFlowFunctions.isEmpty());










 }





















 private void addOrVerifyStmt2Method(Statement stmt, Method m) {










 private void addOrVerifyStmt2Method(TestStatement stmt, TestMethod m) {










 if (stmt2method.containsKey(stmt) && !stmt2method.get(stmt).equals(m)) {










 throw new IllegalArgumentException("Statement " + stmt + " is used in multiple methods: " + m + " and " + stmt2method.get(stmt));










 }










 stmt2method.put(stmt, m);










 }





















 public MethodHelper method(Method method) {










 public MethodHelper method(TestMethod method) {










 MethodHelper h = new MethodHelper(method);










 return h;










 }





















 public class MethodHelper {





















 private Method method;










 private TestMethod method;





















 public MethodHelper(Method method) {










 public MethodHelper(TestMethod method) {










 this.method = method;










 }





















 public void edges(Collection<Edge> edges) {










 for(Edge edge : edges) {










 for(ExpectedFlowFunction ff : edge.flowFunctions) {










 remainingFlowFunctions.add(ff, ff.times);










 if(!remainingFlowFunctions.contains(ff))










 remainingFlowFunctions.add(ff, ff.times);










 }










 










 edge.accept(new EdgeVisitor() {



......@@ -294,19 +384,26 @@ public class TestHelper {









 }










 }





















 public void startPoints(Statement[] startingPoints) {










 public void startPoints(TestStatement[] startingPoints) {










 method2startPoint.putAll(method, Lists.newArrayList(startingPoints));










 }










 }










 










 public static class ExpectedFlowFunction {










 private static String expectedFlowFunctionsToString(ExpectedFlowFunction[] flowFunctions) {










 String result = "";










 for(ExpectedFlowFunction ff : flowFunctions)










 result += ff.source+"->"+Joiner.on(",").join(ff.targets)+ff.transformerString()+", ";










 return result;










 }










 










 public static abstract class ExpectedFlowFunction {





















 public final Fact source;










 public final ConstrainedFact<TestFieldRef, Fact>[] targets;










 public final TestFact source;










 public final TestFact[] targets;










 public Edge edge;










 private int times;





















 public ExpectedFlowFunction(int times, Fact source, ConstrainedFact<TestFieldRef, Fact>... targets) {










 public ExpectedFlowFunction(int times, TestFact source, TestFact... targets) {










 this.times = times;










 this.source = source;










 this.targets = targets;



......@@ -316,6 +413,10 @@ public class TestHelper {









 public String toString() {










 return String.format("%s: %s -> {%s}", edge, source, Joiner.on(",").join(targets));










 }










 










 public abstract String transformerString();





















 public abstract FlowFunction.ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler);










 }










 










 private static interface EdgeVisitor {



......@@ -341,10 +442,10 @@ public class TestHelper {




















 public static class NormalEdge extends Edge {





















 private Statement unit;










 private Statement succUnit;










 private TestStatement unit;










 private TestStatement succUnit;





















 public NormalEdge(Statement unit, Statement succUnit, ExpectedFlowFunction...flowFunctions) {










 public NormalEdge(TestStatement unit, TestStatement succUnit, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.unit = unit;










 this.succUnit = succUnit;



......@@ -363,10 +464,10 @@ public class TestHelper {




















 public static class CallEdge extends Edge {





















 private Statement callSite;










 private Method destinationMethod;










 private TestStatement callSite;










 private TestMethod destinationMethod;





















 public CallEdge(Statement callSite, Method destinationMethod, ExpectedFlowFunction...flowFunctions) {










 public CallEdge(TestStatement callSite, TestMethod destinationMethod, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.destinationMethod = destinationMethod;



......@@ -384,10 +485,10 @@ public class TestHelper {









 }





















 public static class Call2ReturnEdge extends Edge {










 private Statement callSite;










 private Statement returnSite;










 private TestStatement callSite;










 private TestStatement returnSite;





















 public Call2ReturnEdge(Statement callSite, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 public Call2ReturnEdge(TestStatement callSite, TestStatement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.returnSite = returnSite;



......@@ -406,12 +507,12 @@ public class TestHelper {




















 public static class ReturnEdge extends Edge {





















 private Statement exitStmt;










 private Statement returnSite;










 private Statement callSite;










 private Method calleeMethod;










 private TestStatement exitStmt;










 private TestStatement returnSite;










 private TestStatement callSite;










 private TestMethod calleeMethod;





















 public ReturnEdge(Statement callSite, Statement exitStmt, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 public ReturnEdge(TestStatement callSite, TestStatement exitStmt, TestStatement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.exitStmt = exitStmt;



......@@ -438,11 +539,11 @@ public class TestHelper {









 return a.equals(b);










 }





















 public FlowFunctions<Statement, TestFieldRef, Fact, Method> flowFunctions() {










 return new FlowFunctions<Statement, TestFieldRef, Fact, Method>() {










 public FlowFunctions<TestStatement, TestFieldRef, TestFact, TestMethod> flowFunctions() {










 return new FlowFunctions<TestStatement, TestFieldRef, TestFact, TestMethod>() {





















 @Override










 public FlowFunction<TestFieldRef, Fact> getReturnFlowFunction(Statement callSite, Method calleeMethod, Statement exitStmt, Statement returnSite) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getReturnFlowFunction(TestStatement callSite, TestMethod calleeMethod, TestStatement exitStmt, TestStatement returnSite) {










 for (final ReturnEdge edge : returnEdges) {










 if (nullAwareEquals(callSite, edge.callSite) && edge.calleeMethod.equals(calleeMethod)










 && edge.exitStmt.equals(exitStmt) && nullAwareEquals(edge.returnSite, returnSite)) {



......@@ -454,17 +555,17 @@ public class TestHelper {









 }





















 @Override










 public FlowFunction<TestFieldRef, Fact> getNormalFlowFunction(final Statement curr, final Statement succ) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getNormalFlowFunction(final TestStatement curr) {










 for (final NormalEdge edge : normalEdges) {










 if (edge.unit.equals(curr) && edge.succUnit.equals(succ)) {










 if (edge.unit.equals(curr)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for %s -> %s", curr, succ));










 throw new AssertionError(String.format("No Flow Function expected for %s", curr));










 }





















 @Override










 public FlowFunction<TestFieldRef, Fact> getCallToReturnFlowFunction(Statement callSite, Statement returnSite) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getCallToReturnFlowFunction(TestStatement callSite, TestStatement returnSite) {










 for (final Call2ReturnEdge edge : call2retEdges) {










 if (edge.callSite.equals(callSite) && edge.returnSite.equals(returnSite)) {










 return createFlowFunction(edge);



......@@ -474,7 +575,7 @@ public class TestHelper {









 }





















 @Override










 public FlowFunction<TestFieldRef, Fact> getCallFlowFunction(Statement callStmt, Method destinationMethod) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getCallFlowFunction(TestStatement callStmt, TestMethod destinationMethod) {










 for (final CallEdge edge : callEdges) {










 if (edge.callSite.equals(callStmt) && edge.destinationMethod.equals(destinationMethod)) {










 return createFlowFunction(edge);



......@@ -483,20 +584,18 @@ public class TestHelper {









 throw new AssertionError(String.format("No Flow Function expected for call %s -> %s", callStmt, destinationMethod));










 }





















 private FlowFunction<TestFieldRef, Fact> createFlowFunction(final Edge edge) {










 return new FlowFunction<TestFieldRef, Fact>() {










 private FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> createFlowFunction(final Edge edge) {










 return new FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod>() {










 @Override










 public Set<ConstrainedFact<TestFieldRef, Fact>> computeTargets(Fact source) {










 Set<ConstrainedFact<TestFieldRef, Fact>> result = Sets.newHashSet();










 public Set<FlowFunction.ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod>> computeTargets(TestFact source,










 AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 Set<ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod>> result = Sets.newHashSet();










 boolean found = false;










 for (ExpectedFlowFunction ff : edge.flowFunctions) {










 if (ff.source.equals(source.cloneWithAccessPath(source.getAccessPath().setResolver(null)))) {










 if (ff.source.equals(source)) {










 if (remainingFlowFunctions.remove(ff)) {










 for(ConstrainedFact<TestFieldRef, Fact> target : ff.targets) {










 result.add(new ConstrainedFact<TestFieldRef, Fact>(










 target.getFact().cloneWithAccessPath(










 target.getFact().accessPath.setResolver(source.getAccessPath().getResolver())), 










 target.getConstraint()));










 for(TestFact target : ff.targets) {










 result.add(ff.apply(target, accPathHandler));










 }










 found = true;










 } else {



......@@ -515,17 +614,44 @@ public class TestHelper {









 }





















 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {










 FieldSensitiveIFDSSolver<Statement, String, TestFieldRef, Fact, Method, InterproceduralCFG<Statement,Method>> solver = new FieldSensitiveIFDSSolver<Statement,String, TestFieldRef ,Fact, Method, InterproceduralCFG<Statement,Method>>(createTabulationProblem(followReturnsPastSeeds, initialSeeds));










 FieldSensitiveIFDSSolver<TestStatement, TestFieldRef, TestFact, TestMethod, InterproceduralCFG<TestStatement,TestMethod>> solver = new FieldSensitiveIFDSSolver<TestStatement, TestFieldRef ,TestFact, TestMethod, InterproceduralCFG<TestStatement,TestMethod>>(










 createTabulationProblem(followReturnsPastSeeds, initialSeeds), new FactMergeHandler<TestFact>() {










 @Override










 public void merge(TestFact previousFact, TestFact currentFact) {










 }





















 @Override










 public void restoreCallingContext(TestFact factAtReturnSite, TestFact factAtCallSite) {










 }










 










 }, debugger);










 addExpectationsToDebugger();










 solver.solve();










 










 assertAllFlowFunctionsUsed();










 }










 










 










 private IFDSTabulationProblem<Statement, TestFieldRef, Fact, Method, InterproceduralCFG<Statement, Method>> createTabulationProblem(final boolean followReturnsPastSeeds, final String[] initialSeeds) {










 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();










 final FlowFunctions<Statement, TestFieldRef, Fact, Method> flowFunctions = flowFunctions();










 private void addExpectationsToDebugger() {










 for(NormalEdge edge : normalEdges) {










 debugger.expectNormalFlow(edge.unit, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 for(CallEdge edge : callEdges) {










 debugger.expectCallFlow(edge.callSite, edge.destinationMethod, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 for(Call2ReturnEdge edge : call2retEdges) {










 debugger.expectNormalFlow(edge.callSite, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 for(ReturnEdge edge : returnEdges) {










 debugger.expectReturnFlow(edge.exitStmt, edge.returnSite, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 }





















 private IFDSTabulationProblem<TestStatement, TestFieldRef, TestFact, TestMethod, InterproceduralCFG<TestStatement, TestMethod>> createTabulationProblem(final boolean followReturnsPastSeeds, final String[] initialSeeds) {










 final InterproceduralCFG<TestStatement, TestMethod> icfg = buildIcfg();










 final FlowFunctions<TestStatement, TestFieldRef, TestFact, TestMethod> flowFunctions = flowFunctions();










 










 return new IFDSTabulationProblem<Statement,TestFieldRef, Fact, Method, InterproceduralCFG<Statement, Method>>() {










 return new IFDSTabulationProblem<TestStatement,TestFieldRef, TestFact, TestMethod, InterproceduralCFG<TestStatement, TestMethod>>() {





















 @Override










 public boolean followReturnsPastSeeds() {



......@@ -548,27 +674,37 @@ public class TestHelper {









 }





















 @Override










 public FlowFunctions<Statement,TestFieldRef, Fact, Method> flowFunctions() {










 public FlowFunctions<TestStatement,TestFieldRef, TestFact, TestMethod> flowFunctions() {










 return flowFunctions;










 }





















 @Override










 public InterproceduralCFG<Statement, Method> interproceduralCFG() {










 public InterproceduralCFG<TestStatement, TestMethod> interproceduralCFG() {










 return icfg;










 }





















 @Override










 public Map<Statement, Set<Fact>> initialSeeds() {










 Map<Statement, Set<Fact>> result = Maps.newHashMap();










 public Map<TestStatement, Set<TestFact>> initialSeeds() {










 Map<TestStatement, Set<TestFact>> result = Maps.newHashMap();










 for (String stmt : initialSeeds) {










 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));










 result.put(new TestStatement(stmt), Sets.newHashSet(new TestFact("0")));










 }










 return result;










 }





















 @Override










 public Fact zeroValue() {










 return new Fact("0");










 public TestFact zeroValue() {










 return new TestFact("0");










 }










 










 @Override










 public ZeroHandler<TestFieldRef> zeroHandler() {










 return new ZeroHandler<TestFieldRef>() {










 @Override










 public boolean shouldGenerateAccessPath(AccessPath<TestFieldRef> accPath) {










 return true;










 }










 };










 }










 };










 }



......






......@@ -37,16 +37,21 @@ import com.google.common.collect.Sets;




















public class TestHelper {





















 private Multimap<Method, Statement> method2startPoint = HashMultimap.create();










 private Multimap<TestMethod, TestStatement> method2startPoint = HashMultimap.create();










 private List<NormalEdge> normalEdges = Lists.newLinkedList();










 private List<CallEdge> callEdges = Lists.newLinkedList();










 private List<Call2ReturnEdge> call2retEdges = Lists.newLinkedList();










 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, Method> stmt2method = Maps.newHashMap();










 private Map<TestStatement, TestMethod> stmt2method = Maps.newHashMap();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();










 private TestDebugger<TestFieldRef, TestFact, TestStatement, TestMethod, InterproceduralCFG<TestStatement, TestMethod>> debugger;





















 public MethodHelper method(String methodName, Statement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new Method(methodName));










 public TestHelper(TestDebugger<TestFieldRef, TestFact, TestStatement, TestMethod, InterproceduralCFG<TestStatement, TestMethod>> debugger) {










 this.debugger = debugger;










 }





















 public MethodHelper method(String methodName, TestStatement[] startingPoints, EdgeBuilder... edgeBuilders) {










 MethodHelper methodHelper = new MethodHelper(new TestMethod(methodName));










 methodHelper.startPoints(startingPoints);










 for(EdgeBuilder edgeBuilder : edgeBuilders){










 methodHelper.edges(edgeBuilder.edges());



......@@ -54,32 +59,32 @@ public class TestHelper {









 return methodHelper;










 }





















 public static Statement[] startPoints(String... startingPoints) {










 Statement[] result = new Statement[startingPoints.length];










 public static TestStatement[] startPoints(String... startingPoints) {










 TestStatement[] result = new TestStatement[startingPoints.length];










 for (int i = 0; i < result.length; i++) {










 result[i] = new Statement(startingPoints[i]);










 result[i] = new TestStatement(startingPoints[i]);










 }










 return result;










 }





















 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt) {










 return new EdgeBuilder.NormalStmtBuilder(new Statement(stmt));










 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt, ExpectedFlowFunction...flowFunctions) {










 return new EdgeBuilder.NormalStmtBuilder(new TestStatement(stmt), flowFunctions);










 }










 










 public static EdgeBuilder.CallSiteBuilder callSite(String callSite) {










 return new EdgeBuilder.CallSiteBuilder(new Statement(callSite));










 return new EdgeBuilder.CallSiteBuilder(new TestStatement(callSite));










 }










 










 public static EdgeBuilder.ExitStmtBuilder exitStmt(String exitStmt) {










 return new EdgeBuilder.ExitStmtBuilder(new Statement(exitStmt));










 return new EdgeBuilder.ExitStmtBuilder(new TestStatement(exitStmt));










 }










 










 public static Statement over(String callSite) {










 return new Statement(callSite);










 public static TestStatement over(String callSite) {










 return new TestStatement(callSite);










 }










 










 public static Statement to(String returnSite) {










 return new Statement(returnSite);










 public static TestStatement to(String returnSite) {










 return new TestStatement(returnSite);










 }










 










 public static ExpectedFlowFunction kill(String source) {



......@@ -87,27 +92,87 @@ public class TestHelper {









 }










 










 public static ExpectedFlowFunction kill(int times, String source) {










 return new ExpectedFlowFunction(times, new Fact(source));










 return new ExpectedFlowFunction(times, new TestFact(source)) {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 throw new IllegalStateException();










 }










 










 @Override










 public String transformerString() {










 return "";










 }










 };










 }





















 public static Constraint<TestFieldRef> readField(String fieldName) {










 return new FlowFunction.ReadFieldConstraint<TestFieldRef>(new TestFieldRef(fieldName));










 public static AccessPathTransformer readField(final String fieldName) {










 return new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.read(new TestFieldRef(fieldName)).generate(target);










 }





















 @Override










 public String toString() {










 return "read("+fieldName+")";










 }










 };










 }










 










 public static Constraint<TestFieldRef> writeField(String fieldName) {










 return new FlowFunction.WriteFieldConstraint<TestFieldRef>(new TestFieldRef(fieldName));










 public static AccessPathTransformer prependField(final String fieldName) {










 return new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.prepend(new TestFieldRef(fieldName)).generate(target);










 }










 










 @Override










 public String toString() {










 return "prepend("+fieldName+")";










 }










 };










 }










 










 public static ExpectedFlowFunction flow(String source, Constraint<TestFieldRef> constraint, String... targets) {










 return flow(1, source, constraint, targets);










 public static AccessPathTransformer overwriteField(final String fieldName) {










 return new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.overwrite(new TestFieldRef(fieldName)).generate(target);










 }










 










 @Override










 public String toString() {










 return "write("+fieldName+")";










 }










 };










 }










 










 public static ExpectedFlowFunction flow(String source, final AccessPathTransformer transformer, String... targets) {










 return flow(1, source, transformer, targets);










 }










 










 public static ExpectedFlowFunction flow(int times, String source, Constraint<TestFieldRef> constraint, String... targets) {










 ConstrainedFact<TestFieldRef, Fact>[] targetFacts = new ConstrainedFact[targets.length];










 public static ExpectedFlowFunction flow(int times, String source, final AccessPathTransformer transformer, String... targets) {










 TestFact[] targetFacts = new TestFact[targets.length];










 for(int i=0; i<targets.length; i++) {










 targetFacts[i] = new ConstrainedFact<TestFieldRef, Fact>(new Fact(targets[i]), constraint);










 targetFacts[i] = new TestFact(targets[i]);










 }










 return new ExpectedFlowFunction(times, new Fact(source), targetFacts);










 return new ExpectedFlowFunction(times, new TestFact(source), targetFacts) {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return transformer.apply(target, accPathHandler);










 }










 










 @Override










 public String transformerString() {










 return transformer.toString();










 }










 };










 }










 










 private static interface AccessPathTransformer {





















 ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler); 










 










 }










 










 public static ExpectedFlowFunction flow(String source, String... targets) {



......@@ -115,28 +180,39 @@ public class TestHelper {









 }










 










 public static ExpectedFlowFunction flow(int times, String source, String... targets) {










 return flow(times, source, null, targets);










 return flow(times, source, new AccessPathTransformer() {










 @Override










 public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 return accPathHandler.generate(target);










 }










 










 @Override










 public String toString() {










 return "";










 }










 










 }, targets);










 }










 










 public static int times(int times) {










 return times;










 }





















 public InterproceduralCFG<Statement, Method> buildIcfg() {










 return new InterproceduralCFG<Statement, Method>() {










 public InterproceduralCFG<TestStatement, TestMethod> buildIcfg() {










 return new InterproceduralCFG<TestStatement, TestMethod>() {





















 @Override










 public boolean isStartPoint(Statement stmt) {










 public boolean isStartPoint(TestStatement stmt) {










 return method2startPoint.values().contains(stmt);










 }





















 @Override










 public boolean isFallThroughSuccessor(Statement stmt, Statement succ) {










 public boolean isFallThroughSuccessor(TestStatement stmt, TestStatement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public boolean isExitStmt(Statement stmt) {










 public boolean isExitStmt(TestStatement stmt) {










 for(ReturnEdge edge : returnEdges) {










 if(edge.exitStmt.equals(stmt))










 return true;



......@@ -145,7 +221,7 @@ public class TestHelper {









 }





















 @Override










 public boolean isCallStmt(final Statement stmt) {










 public boolean isCallStmt(final TestStatement stmt) {










 return Iterables.any(callEdges, new Predicate<CallEdge>() {










 @Override










 public boolean apply(CallEdge edge) {



......@@ -155,13 +231,13 @@ public class TestHelper {









 }





















 @Override










 public boolean isBranchTarget(Statement stmt, Statement succ) {










 public boolean isBranchTarget(TestStatement stmt, TestStatement succ) {










 throw new IllegalStateException();










 }





















 @Override










 public List<Statement> getSuccsOf(Statement n) {










 LinkedList<Statement> result = Lists.newLinkedList();










 public List<TestStatement> getSuccsOf(TestStatement n) {










 LinkedList<TestStatement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.unit.equals(n))










 result.add(edge.succUnit);



......@@ -170,13 +246,23 @@ public class TestHelper {









 }





















 @Override










 public Collection<Statement> getStartPointsOf(Method m) {










 public List<TestStatement> getPredsOf(TestStatement stmt) {










 LinkedList<TestStatement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.succUnit.equals(stmt))










 result.add(edge.unit);










 }










 return result;










 }





















 @Override










 public Collection<TestStatement> getStartPointsOf(TestMethod m) {










 return method2startPoint.get(m);










 }





















 @Override










 public Collection<Statement> getReturnSitesOfCallAt(Statement n) {










 Set<Statement> result = Sets.newHashSet();










 public Collection<TestStatement> getReturnSitesOfCallAt(TestStatement n) {










 Set<TestStatement> result = Sets.newHashSet();










 for (Call2ReturnEdge edge : call2retEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n))










 result.add(edge.returnSite);



......@@ -189,18 +275,21 @@ public class TestHelper {









 }





















 @Override










 public Method getMethodOf(Statement n) {










 return stmt2method.get(n);










 public TestMethod getMethodOf(TestStatement n) {










 if(stmt2method.containsKey(n))










 return stmt2method.get(n);










 else










 throw new IllegalArgumentException("Statement "+n+" is not defined in any method.");










 }





















 @Override










 public Set<Statement> getCallsFromWithin(Method m) {










 public Set<TestStatement> getCallsFromWithin(TestMethod m) {










 throw new IllegalStateException();










 }





















 @Override










 public Collection<Statement> getCallersOf(Method m) {










 Set<Statement> result = Sets.newHashSet();










 public Collection<TestStatement> getCallersOf(TestMethod m) {










 Set<TestStatement> result = Sets.newHashSet();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.destinationMethod.equals(m)) {










 result.add(edge.callSite);



......@@ -215,8 +304,8 @@ public class TestHelper {









 }





















 @Override










 public Collection<Method> getCalleesOfCallAt(Statement n) {










 List<Method> result = Lists.newLinkedList();










 public Collection<TestMethod> getCalleesOfCallAt(TestStatement n) {










 List<TestMethod> result = Lists.newLinkedList();










 for (CallEdge edge : callEdges) {










 if (edge.includeInCfg && edge.callSite.equals(n)) {










 result.add(edge.destinationMethod);



......@@ -226,7 +315,7 @@ public class TestHelper {









 }





















 @Override










 public Set<Statement> allNonCallStartNodes() {










 public Set<TestStatement> allNonCallStartNodes() {










 throw new IllegalStateException();










 }










 };



......@@ -237,30 +326,31 @@ public class TestHelper {









 remainingFlowFunctions.isEmpty());










 }





















 private void addOrVerifyStmt2Method(Statement stmt, Method m) {










 private void addOrVerifyStmt2Method(TestStatement stmt, TestMethod m) {










 if (stmt2method.containsKey(stmt) && !stmt2method.get(stmt).equals(m)) {










 throw new IllegalArgumentException("Statement " + stmt + " is used in multiple methods: " + m + " and " + stmt2method.get(stmt));










 }










 stmt2method.put(stmt, m);










 }





















 public MethodHelper method(Method method) {










 public MethodHelper method(TestMethod method) {










 MethodHelper h = new MethodHelper(method);










 return h;










 }





















 public class MethodHelper {





















 private Method method;










 private TestMethod method;





















 public MethodHelper(Method method) {










 public MethodHelper(TestMethod method) {










 this.method = method;










 }





















 public void edges(Collection<Edge> edges) {










 for(Edge edge : edges) {










 for(ExpectedFlowFunction ff : edge.flowFunctions) {










 remainingFlowFunctions.add(ff, ff.times);










 if(!remainingFlowFunctions.contains(ff))










 remainingFlowFunctions.add(ff, ff.times);










 }










 










 edge.accept(new EdgeVisitor() {



......@@ -294,19 +384,26 @@ public class TestHelper {









 }










 }





















 public void startPoints(Statement[] startingPoints) {










 public void startPoints(TestStatement[] startingPoints) {










 method2startPoint.putAll(method, Lists.newArrayList(startingPoints));










 }










 }










 










 public static class ExpectedFlowFunction {










 private static String expectedFlowFunctionsToString(ExpectedFlowFunction[] flowFunctions) {










 String result = "";










 for(ExpectedFlowFunction ff : flowFunctions)










 result += ff.source+"->"+Joiner.on(",").join(ff.targets)+ff.transformerString()+", ";










 return result;










 }










 










 public static abstract class ExpectedFlowFunction {





















 public final Fact source;










 public final ConstrainedFact<TestFieldRef, Fact>[] targets;










 public final TestFact source;










 public final TestFact[] targets;










 public Edge edge;










 private int times;





















 public ExpectedFlowFunction(int times, Fact source, ConstrainedFact<TestFieldRef, Fact>... targets) {










 public ExpectedFlowFunction(int times, TestFact source, TestFact... targets) {










 this.times = times;










 this.source = source;










 this.targets = targets;



......@@ -316,6 +413,10 @@ public class TestHelper {









 public String toString() {










 return String.format("%s: %s -> {%s}", edge, source, Joiner.on(",").join(targets));










 }










 










 public abstract String transformerString();





















 public abstract FlowFunction.ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler);










 }










 










 private static interface EdgeVisitor {



......@@ -341,10 +442,10 @@ public class TestHelper {




















 public static class NormalEdge extends Edge {





















 private Statement unit;










 private Statement succUnit;










 private TestStatement unit;










 private TestStatement succUnit;





















 public NormalEdge(Statement unit, Statement succUnit, ExpectedFlowFunction...flowFunctions) {










 public NormalEdge(TestStatement unit, TestStatement succUnit, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.unit = unit;










 this.succUnit = succUnit;



......@@ -363,10 +464,10 @@ public class TestHelper {




















 public static class CallEdge extends Edge {





















 private Statement callSite;










 private Method destinationMethod;










 private TestStatement callSite;










 private TestMethod destinationMethod;





















 public CallEdge(Statement callSite, Method destinationMethod, ExpectedFlowFunction...flowFunctions) {










 public CallEdge(TestStatement callSite, TestMethod destinationMethod, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.destinationMethod = destinationMethod;



......@@ -384,10 +485,10 @@ public class TestHelper {









 }





















 public static class Call2ReturnEdge extends Edge {










 private Statement callSite;










 private Statement returnSite;










 private TestStatement callSite;










 private TestStatement returnSite;





















 public Call2ReturnEdge(Statement callSite, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 public Call2ReturnEdge(TestStatement callSite, TestStatement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.returnSite = returnSite;



......@@ -406,12 +507,12 @@ public class TestHelper {




















 public static class ReturnEdge extends Edge {





















 private Statement exitStmt;










 private Statement returnSite;










 private Statement callSite;










 private Method calleeMethod;










 private TestStatement exitStmt;










 private TestStatement returnSite;










 private TestStatement callSite;










 private TestMethod calleeMethod;





















 public ReturnEdge(Statement callSite, Statement exitStmt, Statement returnSite, ExpectedFlowFunction...flowFunctions) {










 public ReturnEdge(TestStatement callSite, TestStatement exitStmt, TestStatement returnSite, ExpectedFlowFunction...flowFunctions) {










 super(flowFunctions);










 this.callSite = callSite;










 this.exitStmt = exitStmt;



......@@ -438,11 +539,11 @@ public class TestHelper {









 return a.equals(b);










 }





















 public FlowFunctions<Statement, TestFieldRef, Fact, Method> flowFunctions() {










 return new FlowFunctions<Statement, TestFieldRef, Fact, Method>() {










 public FlowFunctions<TestStatement, TestFieldRef, TestFact, TestMethod> flowFunctions() {










 return new FlowFunctions<TestStatement, TestFieldRef, TestFact, TestMethod>() {





















 @Override










 public FlowFunction<TestFieldRef, Fact> getReturnFlowFunction(Statement callSite, Method calleeMethod, Statement exitStmt, Statement returnSite) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getReturnFlowFunction(TestStatement callSite, TestMethod calleeMethod, TestStatement exitStmt, TestStatement returnSite) {










 for (final ReturnEdge edge : returnEdges) {










 if (nullAwareEquals(callSite, edge.callSite) && edge.calleeMethod.equals(calleeMethod)










 && edge.exitStmt.equals(exitStmt) && nullAwareEquals(edge.returnSite, returnSite)) {



......@@ -454,17 +555,17 @@ public class TestHelper {









 }





















 @Override










 public FlowFunction<TestFieldRef, Fact> getNormalFlowFunction(final Statement curr, final Statement succ) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getNormalFlowFunction(final TestStatement curr) {










 for (final NormalEdge edge : normalEdges) {










 if (edge.unit.equals(curr) && edge.succUnit.equals(succ)) {










 if (edge.unit.equals(curr)) {










 return createFlowFunction(edge);










 }










 }










 throw new AssertionError(String.format("No Flow Function expected for %s -> %s", curr, succ));










 throw new AssertionError(String.format("No Flow Function expected for %s", curr));










 }





















 @Override










 public FlowFunction<TestFieldRef, Fact> getCallToReturnFlowFunction(Statement callSite, Statement returnSite) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getCallToReturnFlowFunction(TestStatement callSite, TestStatement returnSite) {










 for (final Call2ReturnEdge edge : call2retEdges) {










 if (edge.callSite.equals(callSite) && edge.returnSite.equals(returnSite)) {










 return createFlowFunction(edge);



......@@ -474,7 +575,7 @@ public class TestHelper {









 }





















 @Override










 public FlowFunction<TestFieldRef, Fact> getCallFlowFunction(Statement callStmt, Method destinationMethod) {










 public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getCallFlowFunction(TestStatement callStmt, TestMethod destinationMethod) {










 for (final CallEdge edge : callEdges) {










 if (edge.callSite.equals(callStmt) && edge.destinationMethod.equals(destinationMethod)) {










 return createFlowFunction(edge);



......@@ -483,20 +584,18 @@ public class TestHelper {









 throw new AssertionError(String.format("No Flow Function expected for call %s -> %s", callStmt, destinationMethod));










 }





















 private FlowFunction<TestFieldRef, Fact> createFlowFunction(final Edge edge) {










 return new FlowFunction<TestFieldRef, Fact>() {










 private FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> createFlowFunction(final Edge edge) {










 return new FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod>() {










 @Override










 public Set<ConstrainedFact<TestFieldRef, Fact>> computeTargets(Fact source) {










 Set<ConstrainedFact<TestFieldRef, Fact>> result = Sets.newHashSet();










 public Set<FlowFunction.ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod>> computeTargets(TestFact source,










 AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {










 Set<ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod>> result = Sets.newHashSet();










 boolean found = false;










 for (ExpectedFlowFunction ff : edge.flowFunctions) {










 if (ff.source.equals(source.cloneWithAccessPath(source.getAccessPath().setResolver(null)))) {










 if (ff.source.equals(source)) {










 if (remainingFlowFunctions.remove(ff)) {










 for(ConstrainedFact<TestFieldRef, Fact> target : ff.targets) {










 result.add(new ConstrainedFact<TestFieldRef, Fact>(










 target.getFact().cloneWithAccessPath(










 target.getFact().accessPath.setResolver(source.getAccessPath().getResolver())), 










 target.getConstraint()));










 for(TestFact target : ff.targets) {










 result.add(ff.apply(target, accPathHandler));










 }










 found = true;










 } else {



......@@ -515,17 +614,44 @@ public class TestHelper {









 }





















 public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {










 FieldSensitiveIFDSSolver<Statement, String, TestFieldRef, Fact, Method, InterproceduralCFG<Statement,Method>> solver = new FieldSensitiveIFDSSolver<Statement,String, TestFieldRef ,Fact, Method, InterproceduralCFG<Statement,Method>>(createTabulationProblem(followReturnsPastSeeds, initialSeeds));










 FieldSensitiveIFDSSolver<TestStatement, TestFieldRef, TestFact, TestMethod, InterproceduralCFG<TestStatement,TestMethod>> solver = new FieldSensitiveIFDSSolver<TestStatement, TestFieldRef ,TestFact, TestMethod, InterproceduralCFG<TestStatement,TestMethod>>(










 createTabulationProblem(followReturnsPastSeeds, initialSeeds), new FactMergeHandler<TestFact>() {










 @Override










 public void merge(TestFact previousFact, TestFact currentFact) {










 }





















 @Override










 public void restoreCallingContext(TestFact factAtReturnSite, TestFact factAtCallSite) {










 }










 










 }, debugger);










 addExpectationsToDebugger();










 solver.solve();










 










 assertAllFlowFunctionsUsed();










 }










 










 










 private IFDSTabulationProblem<Statement, TestFieldRef, Fact, Method, InterproceduralCFG<Statement, Method>> createTabulationProblem(final boolean followReturnsPastSeeds, final String[] initialSeeds) {










 final InterproceduralCFG<Statement, Method> icfg = buildIcfg();










 final FlowFunctions<Statement, TestFieldRef, Fact, Method> flowFunctions = flowFunctions();










 private void addExpectationsToDebugger() {










 for(NormalEdge edge : normalEdges) {










 debugger.expectNormalFlow(edge.unit, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 for(CallEdge edge : callEdges) {










 debugger.expectCallFlow(edge.callSite, edge.destinationMethod, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 for(Call2ReturnEdge edge : call2retEdges) {










 debugger.expectNormalFlow(edge.callSite, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 for(ReturnEdge edge : returnEdges) {










 debugger.expectReturnFlow(edge.exitStmt, edge.returnSite, expectedFlowFunctionsToString(edge.flowFunctions));










 }










 }





















 private IFDSTabulationProblem<TestStatement, TestFieldRef, TestFact, TestMethod, InterproceduralCFG<TestStatement, TestMethod>> createTabulationProblem(final boolean followReturnsPastSeeds, final String[] initialSeeds) {










 final InterproceduralCFG<TestStatement, TestMethod> icfg = buildIcfg();










 final FlowFunctions<TestStatement, TestFieldRef, TestFact, TestMethod> flowFunctions = flowFunctions();










 










 return new IFDSTabulationProblem<Statement,TestFieldRef, Fact, Method, InterproceduralCFG<Statement, Method>>() {










 return new IFDSTabulationProblem<TestStatement,TestFieldRef, TestFact, TestMethod, InterproceduralCFG<TestStatement, TestMethod>>() {





















 @Override










 public boolean followReturnsPastSeeds() {



......@@ -548,27 +674,37 @@ public class TestHelper {









 }





















 @Override










 public FlowFunctions<Statement,TestFieldRef, Fact, Method> flowFunctions() {










 public FlowFunctions<TestStatement,TestFieldRef, TestFact, TestMethod> flowFunctions() {










 return flowFunctions;










 }





















 @Override










 public InterproceduralCFG<Statement, Method> interproceduralCFG() {










 public InterproceduralCFG<TestStatement, TestMethod> interproceduralCFG() {










 return icfg;










 }





















 @Override










 public Map<Statement, Set<Fact>> initialSeeds() {










 Map<Statement, Set<Fact>> result = Maps.newHashMap();










 public Map<TestStatement, Set<TestFact>> initialSeeds() {










 Map<TestStatement, Set<TestFact>> result = Maps.newHashMap();










 for (String stmt : initialSeeds) {










 result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));










 result.put(new TestStatement(stmt), Sets.newHashSet(new TestFact("0")));










 }










 return result;










 }





















 @Override










 public Fact zeroValue() {










 return new Fact("0");










 public TestFact zeroValue() {










 return new TestFact("0");










 }










 










 @Override










 public ZeroHandler<TestFieldRef> zeroHandler() {










 return new ZeroHandler<TestFieldRef>() {










 @Override










 public boolean shouldGenerateAccessPath(AccessPath<TestFieldRef> accPath) {










 return true;










 }










 };










 }










 };










 }



......


public class TestHelper {publicclassTestHelper{ private Multimap<Method, Statement> method2startPoint = HashMultimap.create();privateMultimap<Method,Statement>method2startPoint=HashMultimap.create(); private Multimap<TestMethod, TestStatement> method2startPoint = HashMultimap.create();privateMultimap<TestMethodTest,TestStatementTest>method2startPoint=HashMultimap.create(); private List<NormalEdge> normalEdges = Lists.newLinkedList();privateList<NormalEdge>normalEdges=Lists.newLinkedList(); private List<CallEdge> callEdges = Lists.newLinkedList();privateList<CallEdge>callEdges=Lists.newLinkedList(); private List<Call2ReturnEdge> call2retEdges = Lists.newLinkedList();privateList<Call2ReturnEdge>call2retEdges=Lists.newLinkedList(); private List<ReturnEdge> returnEdges = Lists.newLinkedList();privateList<ReturnEdge>returnEdges=Lists.newLinkedList(); private Map<Statement, Method> stmt2method = Maps.newHashMap();privateMap<Statement,Method>stmt2method=Maps.newHashMap(); private Map<TestStatement, TestMethod> stmt2method = Maps.newHashMap();privateMap<TestStatementTest,TestMethodTest>stmt2method=Maps.newHashMap(); private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();privateMultiset<ExpectedFlowFunction>remainingFlowFunctions=HashMultiset.create(); private TestDebugger<TestFieldRef, TestFact, TestStatement, TestMethod, InterproceduralCFG<TestStatement, TestMethod>> debugger;privateTestDebugger<TestFieldRef,TestFact,TestStatement,TestMethod,InterproceduralCFG<TestStatement,TestMethod>>debugger; public MethodHelper method(String methodName, Statement[] startingPoints, EdgeBuilder... edgeBuilders) {publicMethodHelpermethod(StringmethodName,Statement[]startingPoints,EdgeBuilder...edgeBuilders){ MethodHelper methodHelper = new MethodHelper(new Method(methodName));MethodHelpermethodHelper=newMethodHelper(newMethod(methodName)); public TestHelper(TestDebugger<TestFieldRef, TestFact, TestStatement, TestMethod, InterproceduralCFG<TestStatement, TestMethod>> debugger) {publicTestHelper(TestDebugger<TestFieldRef,TestFact,TestStatement,TestMethod,InterproceduralCFG<TestStatement,TestMethod>>debugger){ this.debugger = debugger;this.debugger=debugger; }} public MethodHelper method(String methodName, TestStatement[] startingPoints, EdgeBuilder... edgeBuilders) {publicMethodHelpermethod(StringmethodName,TestStatement[]startingPoints,EdgeBuilder...edgeBuilders){ MethodHelper methodHelper = new MethodHelper(new TestMethod(methodName));MethodHelpermethodHelper=newMethodHelper(newTestMethod(methodName)); methodHelper.startPoints(startingPoints);methodHelper.startPoints(startingPoints); for(EdgeBuilder edgeBuilder : edgeBuilders){for(EdgeBuilderedgeBuilder:edgeBuilders){ methodHelper.edges(edgeBuilder.edges());methodHelper.edges(edgeBuilder.edges()); return methodHelper;returnmethodHelper; }} public static Statement[] startPoints(String... startingPoints) {publicstaticStatement[]startPoints(String...startingPoints){ Statement[] result = new Statement[startingPoints.length];Statement[]result=newStatement[startingPoints.length]; public static TestStatement[] startPoints(String... startingPoints) {publicstaticTestStatementTest[]startPoints(String...startingPoints){ TestStatement[] result = new TestStatement[startingPoints.length];TestStatementTest[]result=newTestStatementTest[startingPoints.length]; for (int i = 0; i < result.length; i++) {for(inti=0;i<result.length;i++){ result[i] = new Statement(startingPoints[i]);result[i]=newStatement(startingPoints[i]); result[i] = new TestStatement(startingPoints[i]);result[i]=newTestStatementTest(startingPoints[i]); }} return result;returnresult; }} public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt) {publicstaticEdgeBuilder.NormalStmtBuildernormalStmt(Stringstmt){ return new EdgeBuilder.NormalStmtBuilder(new Statement(stmt));returnnewEdgeBuilder.NormalStmtBuilder(newStatement(stmt)); public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt, ExpectedFlowFunction...flowFunctions) {publicstaticEdgeBuilder.NormalStmtBuildernormalStmt(Stringstmt,, ExpectedFlowFunctionExpectedFlowFunction......flowFunctionsflowFunctions){ return new EdgeBuilder.NormalStmtBuilder(new TestStatement(stmt), flowFunctions);returnnewEdgeBuilder.NormalStmtBuilder(newTestStatementTest(stmt),, flowFunctionsflowFunctions); }}  public static EdgeBuilder.CallSiteBuilder callSite(String callSite) {publicstaticEdgeBuilder.CallSiteBuildercallSite(StringcallSite){ return new EdgeBuilder.CallSiteBuilder(new Statement(callSite));returnnewEdgeBuilder.CallSiteBuilder(newStatement(callSite)); return new EdgeBuilder.CallSiteBuilder(new TestStatement(callSite));returnnewEdgeBuilder.CallSiteBuilder(newTestStatementTest(callSite)); }}  public static EdgeBuilder.ExitStmtBuilder exitStmt(String exitStmt) {publicstaticEdgeBuilder.ExitStmtBuilderexitStmt(StringexitStmt){ return new EdgeBuilder.ExitStmtBuilder(new Statement(exitStmt));returnnewEdgeBuilder.ExitStmtBuilder(newStatement(exitStmt)); return new EdgeBuilder.ExitStmtBuilder(new TestStatement(exitStmt));returnnewEdgeBuilder.ExitStmtBuilder(newTestStatementTest(exitStmt)); }}  public static Statement over(String callSite) {publicstaticStatementover(StringcallSite){ return new Statement(callSite);returnnewStatement(callSite); public static TestStatement over(String callSite) {publicstaticTestStatementTestover(StringcallSite){ return new TestStatement(callSite);returnnewTestStatementTest(callSite); }}  public static Statement to(String returnSite) {publicstaticStatementto(StringreturnSite){ return new Statement(returnSite);returnnewStatement(returnSite); public static TestStatement to(String returnSite) {publicstaticTestStatementTestto(StringreturnSite){ return new TestStatement(returnSite);returnnewTestStatementTest(returnSite); }}  public static ExpectedFlowFunction kill(String source) {publicstaticExpectedFlowFunctionkill(Stringsource){ }}  public static ExpectedFlowFunction kill(int times, String source) {publicstaticExpectedFlowFunctionkill(inttimes,Stringsource){ return new ExpectedFlowFunction(times, new Fact(source));returnnewExpectedFlowFunction(times,newFact(source)); return new ExpectedFlowFunction(times, new TestFact(source)) {returnnewExpectedFlowFunction(times,newTestFact(source)){ @Override@Override public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {publicConstrainedFact<TestFieldRef,TestFact,TestStatement,TestMethod>apply(TestFacttarget,AccessPathHandler<TestFieldRef,TestFact,TestStatement,TestMethod>accPathHandler){ throw new IllegalStateException();thrownewIllegalStateException(); }}  @Override@Override public String transformerString() {publicStringtransformerString(){ return "";return""; }} };}; }} public static Constraint<TestFieldRef> readField(String fieldName) {publicstaticConstraint<TestFieldRef>readField(StringfieldName){ return new FlowFunction.ReadFieldConstraint<TestFieldRef>(new TestFieldRef(fieldName));returnnewFlowFunction.ReadFieldConstraint<TestFieldRef>(newTestFieldRef(fieldName)); public static AccessPathTransformer readField(final String fieldName) {publicstaticAccessPathTransformerreadField(finalStringfieldName){ return new AccessPathTransformer() {returnnewAccessPathTransformer(){ @Override@Override public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {publicConstrainedFact<TestFieldRef,TestFact,TestStatement,TestMethod>apply(TestFacttarget,AccessPathHandler<TestFieldRef,TestFact,TestStatement,TestMethod>accPathHandler){ return accPathHandler.read(new TestFieldRef(fieldName)).generate(target);returnaccPathHandler.read(newTestFieldRef(fieldName)).generate(target); }} @Override@Override public String toString() {publicStringtoString(){ return "read("+fieldName+")";return"read("+fieldName+")"; }} };}; }}  public static Constraint<TestFieldRef> writeField(String fieldName) {publicstaticConstraint<TestFieldRef>writeField(StringfieldName){ return new FlowFunction.WriteFieldConstraint<TestFieldRef>(new TestFieldRef(fieldName));returnnewFlowFunction.WriteFieldConstraint<TestFieldRef>(newTestFieldRef(fieldName)); public static AccessPathTransformer prependField(final String fieldName) {publicstaticAccessPathTransformerprependField(finalStringfieldName){ return new AccessPathTransformer() {returnnewAccessPathTransformer(){ @Override@Override public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {publicConstrainedFact<TestFieldRef,TestFact,TestStatement,TestMethod>apply(TestFacttarget,AccessPathHandler<TestFieldRef,TestFact,TestStatement,TestMethod>accPathHandler){ return accPathHandler.prepend(new TestFieldRef(fieldName)).generate(target);returnaccPathHandler.prepend(newTestFieldRef(fieldName)).generate(target); }}  @Override@Override public String toString() {publicStringtoString(){ return "prepend("+fieldName+")";return"prepend("+fieldName+")"; }} };}; }}  public static ExpectedFlowFunction flow(String source, Constraint<TestFieldRef> constraint, String... targets) {publicstaticExpectedFlowFunctionflow(Stringsource,Constraint<TestFieldRef>constraint,String...targets){ return flow(1, source, constraint, targets);returnflow(1,source,constraint,targets); public static AccessPathTransformer overwriteField(final String fieldName) {publicstaticAccessPathTransformeroverwriteField(finalStringfieldName){ return new AccessPathTransformer() {returnnewAccessPathTransformer(){ @Override@Override public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {publicConstrainedFact<TestFieldRef,TestFact,TestStatement,TestMethod>apply(TestFacttarget,AccessPathHandler<TestFieldRef,TestFact,TestStatement,TestMethod>accPathHandler){ return accPathHandler.overwrite(new TestFieldRef(fieldName)).generate(target);returnaccPathHandler.overwrite(newTestFieldRef(fieldName)).generate(target); }}  @Override@Override public String toString() {publicStringtoString(){ return "write("+fieldName+")";return"write("+fieldName+")"; }} };}; }}  public static ExpectedFlowFunction flow(String source, final AccessPathTransformer transformer, String... targets) {publicstaticExpectedFlowFunctionflow(Stringsource,finalAccessPathTransformertransformer,String...targets){ return flow(1, source, transformer, targets);returnflow(1,source,transformer,targets); }}  public static ExpectedFlowFunction flow(int times, String source, Constraint<TestFieldRef> constraint, String... targets) {publicstaticExpectedFlowFunctionflow(inttimes,Stringsource,ConstraintConstraint<<TestFieldRefTestFieldRef>> constraintconstraint,String...targets){ ConstrainedFact<TestFieldRef, Fact>[] targetFacts = new ConstrainedFact[targets.length];ConstrainedFactConstrainedFact<<TestFieldRefTestFieldRef,, Fact>[]>targetFacts=newConstrainedFactConstrained[targets.length]; public static ExpectedFlowFunction flow(int times, String source, final AccessPathTransformer transformer, String... targets) {publicstaticExpectedFlowFunctionflow(inttimes,Stringsource,finalfinal AccessPathTransformerAccessPathTransformer transformertransformer,String...targets){ TestFact[] targetFacts = new TestFact[targets.length];TestFactTest[]targetFacts=newTestFactTest[targets.length]; for(int i=0; i<targets.length; i++) {for(inti=0;i<targets.length;i++){ targetFacts[i] = new ConstrainedFact<TestFieldRef, Fact>(new Fact(targets[i]), constraint);targetFacts[i]=newConstrainedFactConstrainedFact<<TestFieldRefTestFieldRef,, FactFact>(>(newnew Fact(targets[i]),, constraintconstraint);) targetFacts[i] = new TestFact(targets[i]);targetFacts[i]=newTestFactTest(targets[i]); }} return new ExpectedFlowFunction(times, new Fact(source), targetFacts);returnnewExpectedFlowFunction(times,newFact(source),targetFacts); return new ExpectedFlowFunction(times, new TestFact(source), targetFacts) {returnnewExpectedFlowFunction(times,newTestFact(source),targetFacts){ @Override@Override public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {publicConstrainedFact<TestFieldRef,TestFact,TestStatement,TestMethod>apply(TestFacttarget,AccessPathHandler<TestFieldRef,TestFact,TestStatement,TestMethod>accPathHandler){ return transformer.apply(target, accPathHandler);returntransformer.apply(target,accPathHandler); }}  @Override@Override public String transformerString() {publicStringtransformerString(){ return transformer.toString();returntransformer.toString(); }} };}; }}  private static interface AccessPathTransformer {privatestaticinterfaceAccessPathTransformer{ ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler); ConstrainedFact<TestFieldRef,TestFact,TestStatement,TestMethod>apply(TestFacttarget,AccessPathHandler<TestFieldRef,TestFact,TestStatement,TestMethod>accPathHandler);  }}  public static ExpectedFlowFunction flow(String source, String... targets) {publicstaticExpectedFlowFunctionflow(Stringsource,String...targets){ }}  public static ExpectedFlowFunction flow(int times, String source, String... targets) {publicstaticExpectedFlowFunctionflow(inttimes,Stringsource,String...targets){ return flow(times, source, null, targets);returnflow(times,source,null,targets); return flow(times, source, new AccessPathTransformer() {returnflow(times,source,newAccessPathTransformer(){ @Override@Override public ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {publicConstrainedFact<TestFieldRef,TestFact,TestStatement,TestMethod>apply(TestFacttarget,AccessPathHandler<TestFieldRef,TestFact,TestStatement,TestMethod>accPathHandler){ return accPathHandler.generate(target);returnaccPathHandler.generate(target); }}  @Override@Override public String toString() {publicStringtoString(){ return "";return""; }}  }, targets);},targets); }}  public static int times(int times) {publicstaticinttimes(inttimes){ return times;returntimes; }} public InterproceduralCFG<Statement, Method> buildIcfg() {publicInterproceduralCFG<Statement,Method>buildIcfg(){ return new InterproceduralCFG<Statement, Method>() {returnnewInterproceduralCFG<Statement,Method>(){ public InterproceduralCFG<TestStatement, TestMethod> buildIcfg() {publicInterproceduralCFG<TestStatementTest,TestMethodTest>buildIcfg(){ return new InterproceduralCFG<TestStatement, TestMethod>() {returnnewInterproceduralCFG<TestStatementTest,TestMethodTest>(){ @Override@Override public boolean isStartPoint(Statement stmt) {publicbooleanisStartPoint(Statementstmt){ public boolean isStartPoint(TestStatement stmt) {publicbooleanisStartPoint(TestStatementTeststmt){ return method2startPoint.values().contains(stmt);returnmethod2startPoint.values().contains(stmt); }} @Override@Override public boolean isFallThroughSuccessor(Statement stmt, Statement succ) {publicbooleanisFallThroughSuccessor(Statementstmt,Statementsucc){ public boolean isFallThroughSuccessor(TestStatement stmt, TestStatement succ) {publicbooleanisFallThroughSuccessor(TestStatementTeststmt,TestStatementTestsucc){ throw new IllegalStateException();thrownewIllegalStateException(); }} @Override@Override public boolean isExitStmt(Statement stmt) {publicbooleanisExitStmt(Statementstmt){ public boolean isExitStmt(TestStatement stmt) {publicbooleanisExitStmt(TestStatementTeststmt){ for(ReturnEdge edge : returnEdges) {for(ReturnEdgeedge:returnEdges){ if(edge.exitStmt.equals(stmt))if(edge.exitStmt.equals(stmt)) return true;returntrue; }} @Override@Override public boolean isCallStmt(final Statement stmt) {publicbooleanisCallStmt(finalStatementstmt){ public boolean isCallStmt(final TestStatement stmt) {publicbooleanisCallStmt(finalTestStatementTeststmt){ return Iterables.any(callEdges, new Predicate<CallEdge>() {returnIterables.any(callEdges,newPredicate<CallEdge>(){ @Override@Override public boolean apply(CallEdge edge) {publicbooleanapply(CallEdgeedge){ }} @Override@Override public boolean isBranchTarget(Statement stmt, Statement succ) {publicbooleanisBranchTarget(Statementstmt,Statementsucc){ public boolean isBranchTarget(TestStatement stmt, TestStatement succ) {publicbooleanisBranchTarget(TestStatementTeststmt,TestStatementTestsucc){ throw new IllegalStateException();thrownewIllegalStateException(); }} @Override@Override public List<Statement> getSuccsOf(Statement n) {publicList<Statement>getSuccsOf(Statementn){ LinkedList<Statement> result = Lists.newLinkedList();LinkedList<Statement>result=Lists.newLinkedList(); public List<TestStatement> getSuccsOf(TestStatement n) {publicList<TestStatementTest>getSuccsOf(TestStatementTestn){ LinkedList<TestStatement> result = Lists.newLinkedList();LinkedList<TestStatementTest>result=Lists.newLinkedList(); for (NormalEdge edge : normalEdges) {for(NormalEdgeedge:normalEdges){ if (edge.includeInCfg && edge.unit.equals(n))if(edge.includeInCfg&&edge.unit.equals(n)) result.add(edge.succUnit);result.add(edge.succUnit); }} @Override@Override public Collection<Statement> getStartPointsOf(Method m) {publicCollection<Statement>getStartPointsOf(Methodm){ public List<TestStatement> getPredsOf(TestStatement stmt) {publicList<TestStatement>getPredsOf(TestStatementstmt){ LinkedList<TestStatement> result = Lists.newLinkedList();LinkedList<TestStatement>result=Lists.newLinkedList(); for (NormalEdge edge : normalEdges) {for(NormalEdgeedge:normalEdges){ if (edge.includeInCfg && edge.succUnit.equals(stmt))if(edge.includeInCfg&&edge.succUnit.equals(stmt)) result.add(edge.unit);result.add(edge.unit); }} return result;returnresult; }} @Override@Override public Collection<TestStatement> getStartPointsOf(TestMethod m) {publicCollection<TestStatement>getStartPointsOf(TestMethodm){ return method2startPoint.get(m);returnmethod2startPoint.get(m); }} @Override@Override public Collection<Statement> getReturnSitesOfCallAt(Statement n) {publicCollection<Statement>getReturnSitesOfCallAt(Statementn){ Set<Statement> result = Sets.newHashSet();Set<Statement>result=Sets.newHashSet(); public Collection<TestStatement> getReturnSitesOfCallAt(TestStatement n) {publicCollection<TestStatementTest>getReturnSitesOfCallAt(TestStatementTestn){ Set<TestStatement> result = Sets.newHashSet();Set<TestStatementTest>result=Sets.newHashSet(); for (Call2ReturnEdge edge : call2retEdges) {for(Call2ReturnEdgeedge:call2retEdges){ if (edge.includeInCfg && edge.callSite.equals(n))if(edge.includeInCfg&&edge.callSite.equals(n)) result.add(edge.returnSite);result.add(edge.returnSite); }} @Override@Override public Method getMethodOf(Statement n) {publicMethodgetMethodOf(Statementn){ return stmt2method.get(n);returnstmt2method.get(n); public TestMethod getMethodOf(TestStatement n) {publicTestMethodgetMethodOf(TestStatementn){ if(stmt2method.containsKey(n))if(stmt2method.containsKey(n)) return stmt2method.get(n);returnstmt2method.get(n); elseelse throw new IllegalArgumentException("Statement "+n+" is not defined in any method.");thrownewIllegalArgumentException("Statement "+n+" is not defined in any method."); }} @Override@Override public Set<Statement> getCallsFromWithin(Method m) {publicSet<Statement>getCallsFromWithin(Methodm){ public Set<TestStatement> getCallsFromWithin(TestMethod m) {publicSet<TestStatementTest>getCallsFromWithin(TestMethodTestm){ throw new IllegalStateException();thrownewIllegalStateException(); }} @Override@Override public Collection<Statement> getCallersOf(Method m) {publicCollection<Statement>getCallersOf(Methodm){ Set<Statement> result = Sets.newHashSet();Set<Statement>result=Sets.newHashSet(); public Collection<TestStatement> getCallersOf(TestMethod m) {publicCollection<TestStatementTest>getCallersOf(TestMethodTestm){ Set<TestStatement> result = Sets.newHashSet();Set<TestStatementTest>result=Sets.newHashSet(); for (CallEdge edge : callEdges) {for(CallEdgeedge:callEdges){ if (edge.includeInCfg && edge.destinationMethod.equals(m)) {if(edge.includeInCfg&&edge.destinationMethod.equals(m)){ result.add(edge.callSite);result.add(edge.callSite); }} @Override@Override public Collection<Method> getCalleesOfCallAt(Statement n) {publicCollection<Method>getCalleesOfCallAt(Statementn){ List<Method> result = Lists.newLinkedList();List<Method>result=Lists.newLinkedList(); public Collection<TestMethod> getCalleesOfCallAt(TestStatement n) {publicCollection<TestMethodTest>getCalleesOfCallAt(TestStatementTestn){ List<TestMethod> result = Lists.newLinkedList();List<TestMethodTest>result=Lists.newLinkedList(); for (CallEdge edge : callEdges) {for(CallEdgeedge:callEdges){ if (edge.includeInCfg && edge.callSite.equals(n)) {if(edge.includeInCfg&&edge.callSite.equals(n)){ result.add(edge.destinationMethod);result.add(edge.destinationMethod); }} @Override@Override public Set<Statement> allNonCallStartNodes() {publicSet<Statement>allNonCallStartNodes(){ public Set<TestStatement> allNonCallStartNodes() {publicSet<TestStatementTest>allNonCallStartNodes(){ throw new IllegalStateException();thrownewIllegalStateException(); }} };}; remainingFlowFunctions.isEmpty());remainingFlowFunctions.isEmpty()); }} private void addOrVerifyStmt2Method(Statement stmt, Method m) {privatevoidaddOrVerifyStmt2Method(Statementstmt,Methodm){ private void addOrVerifyStmt2Method(TestStatement stmt, TestMethod m) {privatevoidaddOrVerifyStmt2Method(TestStatementTeststmt,TestMethodTestm){ if (stmt2method.containsKey(stmt) && !stmt2method.get(stmt).equals(m)) {if(stmt2method.containsKey(stmt)&&!stmt2method.get(stmt).equals(m)){ throw new IllegalArgumentException("Statement " + stmt + " is used in multiple methods: " + m + " and " + stmt2method.get(stmt));thrownewIllegalArgumentException("Statement "+stmt+" is used in multiple methods: "+m+" and "+stmt2method.get(stmt)); }} stmt2method.put(stmt, m);stmt2method.put(stmt,m); }} public MethodHelper method(Method method) {publicMethodHelpermethod(Methodmethod){ public MethodHelper method(TestMethod method) {publicMethodHelpermethod(TestMethodTestmethod){ MethodHelper h = new MethodHelper(method);MethodHelperh=newMethodHelper(method); return h;returnh; }} public class MethodHelper {publicclassMethodHelper{ private Method method;privateMethodmethod; private TestMethod method;privateTestMethodTestmethod; public MethodHelper(Method method) {publicMethodHelper(Methodmethod){ public MethodHelper(TestMethod method) {publicMethodHelper(TestMethodTestmethod){ this.method = method;this.method=method; }} public void edges(Collection<Edge> edges) {publicvoidedges(Collection<Edge>edges){ for(Edge edge : edges) {for(Edgeedge:edges){ for(ExpectedFlowFunction ff : edge.flowFunctions) {for(ExpectedFlowFunctionff:edge.flowFunctions){ remainingFlowFunctions.add(ff, ff.times);remainingFlowFunctions.add(ff,ff.times); if(!remainingFlowFunctions.contains(ff))if(!remainingFlowFunctions.contains(ff)) remainingFlowFunctions.add(ff, ff.times);remainingFlowFunctions.add(ff,ff.times); }}  edge.accept(new EdgeVisitor() {edge.accept(newEdgeVisitor(){ }} }} public void startPoints(Statement[] startingPoints) {publicvoidstartPoints(Statement[]startingPoints){ public void startPoints(TestStatement[] startingPoints) {publicvoidstartPoints(TestStatementTest[]startingPoints){ method2startPoint.putAll(method, Lists.newArrayList(startingPoints));method2startPoint.putAll(method,Lists.newArrayList(startingPoints)); }} }}  public static class ExpectedFlowFunction {publicstaticclassExpectedFlowFunction{ private static String expectedFlowFunctionsToString(ExpectedFlowFunction[] flowFunctions) {privatestaticStringexpectedFlowFunctionsToString(ExpectedFlowFunction[]flowFunctions){ String result = "";Stringresult=""; for(ExpectedFlowFunction ff : flowFunctions)for(ExpectedFlowFunctionff:flowFunctions) result += ff.source+"->"+Joiner.on(",").join(ff.targets)+ff.transformerString()+", ";result+=ff.source+"->"+Joiner.on(",").join(ff.targets)+ff.transformerString()+", "; return result;returnresult; }}  public static abstract class ExpectedFlowFunction {publicstaticabstractclassExpectedFlowFunction{ public final Fact source;publicfinalFactsource; public final ConstrainedFact<TestFieldRef, Fact>[] targets;publicfinalConstrainedFactConstrainedFact<<TestFieldRefTestFieldRef,, Fact>[]>targets; public final TestFact source;publicfinalTestFactTestsource; public final TestFact[] targets;publicfinalTestFactTest[]targets; public Edge edge;publicEdgeedge; private int times;privateinttimes; public ExpectedFlowFunction(int times, Fact source, ConstrainedFact<TestFieldRef, Fact>... targets) {publicExpectedFlowFunction(inttimes,Factsource,ConstrainedFactConstrainedFact<<TestFieldRefTestFieldRef,, Fact>...>targets){ public ExpectedFlowFunction(int times, TestFact source, TestFact... targets) {publicExpectedFlowFunction(inttimes,TestFactTestsource,TestFactTest...targets){ this.times = times;this.times=times; this.source = source;this.source=source; this.targets = targets;this.targets=targets; public String toString() {publicStringtoString(){ return String.format("%s: %s -> {%s}", edge, source, Joiner.on(",").join(targets));returnString.format("%s: %s -> {%s}",edge,source,Joiner.on(",").join(targets)); }}  public abstract String transformerString();publicabstractStringtransformerString(); public abstract FlowFunction.ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod> apply(TestFact target, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler);publicabstractFlowFunction.ConstrainedFact<TestFieldRef,TestFact,TestStatement,TestMethod>apply(TestFacttarget,AccessPathHandler<TestFieldRef,TestFact,TestStatement,TestMethod>accPathHandler); }}  private static interface EdgeVisitor {privatestaticinterfaceEdgeVisitor{ public static class NormalEdge extends Edge {publicstaticclassNormalEdgeextendsEdge{ private Statement unit;privateStatementunit; private Statement succUnit;privateStatementsuccUnit; private TestStatement unit;privateTestStatementTestunit; private TestStatement succUnit;privateTestStatementTestsuccUnit; public NormalEdge(Statement unit, Statement succUnit, ExpectedFlowFunction...flowFunctions) {publicNormalEdge(Statementunit,StatementsuccUnit,ExpectedFlowFunction...flowFunctions){ public NormalEdge(TestStatement unit, TestStatement succUnit, ExpectedFlowFunction...flowFunctions) {publicNormalEdge(TestStatementTestunit,TestStatementTestsuccUnit,ExpectedFlowFunction...flowFunctions){ super(flowFunctions);super(flowFunctions); this.unit = unit;this.unit=unit; this.succUnit = succUnit;this.succUnit=succUnit; public static class CallEdge extends Edge {publicstaticclassCallEdgeextendsEdge{ private Statement callSite;privateStatementcallSite; private Method destinationMethod;privateMethoddestinationMethod; private TestStatement callSite;privateTestStatementTestcallSite; private TestMethod destinationMethod;privateTestMethodTestdestinationMethod; public CallEdge(Statement callSite, Method destinationMethod, ExpectedFlowFunction...flowFunctions) {publicCallEdge(StatementcallSite,MethoddestinationMethod,ExpectedFlowFunction...flowFunctions){ public CallEdge(TestStatement callSite, TestMethod destinationMethod, ExpectedFlowFunction...flowFunctions) {publicCallEdge(TestStatementTestcallSite,TestMethodTestdestinationMethod,ExpectedFlowFunction...flowFunctions){ super(flowFunctions);super(flowFunctions); this.callSite = callSite;this.callSite=callSite; this.destinationMethod = destinationMethod;this.destinationMethod=destinationMethod; }} public static class Call2ReturnEdge extends Edge {publicstaticclassCall2ReturnEdgeextendsEdge{ private Statement callSite;privateStatementcallSite; private Statement returnSite;privateStatementreturnSite; private TestStatement callSite;privateTestStatementTestcallSite; private TestStatement returnSite;privateTestStatementTestreturnSite; public Call2ReturnEdge(Statement callSite, Statement returnSite, ExpectedFlowFunction...flowFunctions) {publicCall2ReturnEdge(StatementcallSite,StatementreturnSite,ExpectedFlowFunction...flowFunctions){ public Call2ReturnEdge(TestStatement callSite, TestStatement returnSite, ExpectedFlowFunction...flowFunctions) {publicCall2ReturnEdge(TestStatementTestcallSite,TestStatementTestreturnSite,ExpectedFlowFunction...flowFunctions){ super(flowFunctions);super(flowFunctions); this.callSite = callSite;this.callSite=callSite; this.returnSite = returnSite;this.returnSite=returnSite; public static class ReturnEdge extends Edge {publicstaticclassReturnEdgeextendsEdge{ private Statement exitStmt;privateStatementexitStmt; private Statement returnSite;privateStatementreturnSite; private Statement callSite;privateStatementcallSite; private Method calleeMethod;privateMethodcalleeMethod; private TestStatement exitStmt;privateTestStatementTestexitStmt; private TestStatement returnSite;privateTestStatementTestreturnSite; private TestStatement callSite;privateTestStatementTestcallSite; private TestMethod calleeMethod;privateTestMethodTestcalleeMethod; public ReturnEdge(Statement callSite, Statement exitStmt, Statement returnSite, ExpectedFlowFunction...flowFunctions) {publicReturnEdge(StatementcallSite,StatementexitStmt,StatementreturnSite,ExpectedFlowFunction...flowFunctions){ public ReturnEdge(TestStatement callSite, TestStatement exitStmt, TestStatement returnSite, ExpectedFlowFunction...flowFunctions) {publicReturnEdge(TestStatementTestcallSite,TestStatementTestexitStmt,TestStatementTestreturnSite,ExpectedFlowFunction...flowFunctions){ super(flowFunctions);super(flowFunctions); this.callSite = callSite;this.callSite=callSite; this.exitStmt = exitStmt;this.exitStmt=exitStmt; return a.equals(b);returna.equals(b); }} public FlowFunctions<Statement, TestFieldRef, Fact, Method> flowFunctions() {publicFlowFunctions<Statement,TestFieldRef,Fact,Method>flowFunctions(){ return new FlowFunctions<Statement, TestFieldRef, Fact, Method>() {returnnewFlowFunctions<Statement,TestFieldRef,Fact,Method>(){ public FlowFunctions<TestStatement, TestFieldRef, TestFact, TestMethod> flowFunctions() {publicFlowFunctions<TestStatementTest,TestFieldRef,TestFactTest,TestMethodTest>flowFunctions(){ return new FlowFunctions<TestStatement, TestFieldRef, TestFact, TestMethod>() {returnnewFlowFunctions<TestStatementTest,TestFieldRef,TestFactTest,TestMethodTest>(){ @Override@Override public FlowFunction<TestFieldRef, Fact> getReturnFlowFunction(Statement callSite, Method calleeMethod, Statement exitStmt, Statement returnSite) {publicFlowFunction<TestFieldRef,FactFact>getReturnFlowFunction(StatementcallSite,MethodcalleeMethod,StatementexitStmt,StatementreturnSite){ public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getReturnFlowFunction(TestStatement callSite, TestMethod calleeMethod, TestStatement exitStmt, TestStatement returnSite) {publicFlowFunction<TestFieldRef,TestFactTestFact,, TestStatementTestStatement,, TestMethodTestMethod>getReturnFlowFunction(TestStatementTestcallSite,TestMethodTestcalleeMethod,TestStatementTestexitStmt,TestStatementTestreturnSite){ for (final ReturnEdge edge : returnEdges) {for(finalReturnEdgeedge:returnEdges){ if (nullAwareEquals(callSite, edge.callSite) && edge.calleeMethod.equals(calleeMethod)if(nullAwareEquals(callSite,edge.callSite)&&edge.calleeMethod.equals(calleeMethod) && edge.exitStmt.equals(exitStmt) && nullAwareEquals(edge.returnSite, returnSite)) {&&edge.exitStmt.equals(exitStmt)&&nullAwareEquals(edge.returnSite,returnSite)){ }} @Override@Override public FlowFunction<TestFieldRef, Fact> getNormalFlowFunction(final Statement curr, final Statement succ) {publicFlowFunction<TestFieldRef,FactFact>getNormalFlowFunction(finalStatementcurr,, finalfinal StatementStatement succsucc){ public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getNormalFlowFunction(final TestStatement curr) {publicFlowFunction<TestFieldRef,TestFactTestFact,, TestStatementTestStatement,, TestMethodTestMethod>getNormalFlowFunction(finalTestStatementTestcurr){ for (final NormalEdge edge : normalEdges) {for(finalNormalEdgeedge:normalEdges){ if (edge.unit.equals(curr) && edge.succUnit.equals(succ)) {if(edge.unit.equals(curr) &&&& edgeedge..succUnitsuccUnit..equalsequals((succsucc))){ if (edge.unit.equals(curr)) {if(edge.unit.equals(curr)){ return createFlowFunction(edge);returncreateFlowFunction(edge); }} }} throw new AssertionError(String.format("No Flow Function expected for %s -> %s", curr, succ));thrownewAssertionError(String.format("No Flow Function expected for %s -> %s"%s -> ,curr,, succsucc)); throw new AssertionError(String.format("No Flow Function expected for %s", curr));thrownewAssertionError(String.format("No Flow Function expected for %s",curr)); }} @Override@Override public FlowFunction<TestFieldRef, Fact> getCallToReturnFlowFunction(Statement callSite, Statement returnSite) {publicFlowFunction<TestFieldRef,FactFact>getCallToReturnFlowFunction(StatementcallSite,StatementreturnSite){ public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getCallToReturnFlowFunction(TestStatement callSite, TestStatement returnSite) {publicFlowFunction<TestFieldRef,TestFactTestFact,, TestStatementTestStatement,, TestMethodTestMethod>getCallToReturnFlowFunction(TestStatementTestcallSite,TestStatementTestreturnSite){ for (final Call2ReturnEdge edge : call2retEdges) {for(finalCall2ReturnEdgeedge:call2retEdges){ if (edge.callSite.equals(callSite) && edge.returnSite.equals(returnSite)) {if(edge.callSite.equals(callSite)&&edge.returnSite.equals(returnSite)){ return createFlowFunction(edge);returncreateFlowFunction(edge); }} @Override@Override public FlowFunction<TestFieldRef, Fact> getCallFlowFunction(Statement callStmt, Method destinationMethod) {publicFlowFunction<TestFieldRef,FactFact>getCallFlowFunction(StatementcallStmt,MethoddestinationMethod){ public FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> getCallFlowFunction(TestStatement callStmt, TestMethod destinationMethod) {publicFlowFunction<TestFieldRef,TestFactTestFact,, TestStatementTestStatement,, TestMethodTestMethod>getCallFlowFunction(TestStatementTestcallStmt,TestMethodTestdestinationMethod){ for (final CallEdge edge : callEdges) {for(finalCallEdgeedge:callEdges){ if (edge.callSite.equals(callStmt) && edge.destinationMethod.equals(destinationMethod)) {if(edge.callSite.equals(callStmt)&&edge.destinationMethod.equals(destinationMethod)){ return createFlowFunction(edge);returncreateFlowFunction(edge); throw new AssertionError(String.format("No Flow Function expected for call %s -> %s", callStmt, destinationMethod));thrownewAssertionError(String.format("No Flow Function expected for call %s -> %s",callStmt,destinationMethod)); }} private FlowFunction<TestFieldRef, Fact> createFlowFunction(final Edge edge) {privateFlowFunction<TestFieldRef,FactFact>createFlowFunction(finalEdgeedge){ return new FlowFunction<TestFieldRef, Fact>() {returnnewFlowFunction<TestFieldRef,FactFact>(){ private FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod> createFlowFunction(final Edge edge) {privateFlowFunction<TestFieldRef,TestFactTestFact,, TestStatementTestStatement,, TestMethodTestMethod>createFlowFunction(finalEdgeedge){ return new FlowFunction<TestFieldRef, TestFact, TestStatement, TestMethod>() {returnnewFlowFunction<TestFieldRef,TestFactTestFact,, TestStatementTestStatement,, TestMethodTestMethod>(){ @Override@Override public Set<ConstrainedFact<TestFieldRef, Fact>> computeTargets(Fact source) {publicSet<ConstrainedFact<TestFieldRef,Fact>>computeTargets(Factsource){ Set<ConstrainedFact<TestFieldRef, Fact>> result = Sets.newHashSet();Set<ConstrainedFact<TestFieldRef,Fact>>result=Sets.newHashSet(); public Set<FlowFunction.ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod>> computeTargets(TestFact source,publicSet<FlowFunction.ConstrainedFact<TestFieldRef,TestFact,TestStatement,TestMethod>>computeTargets(TestFactsource, AccessPathHandler<TestFieldRef, TestFact, TestStatement, TestMethod> accPathHandler) {AccessPathHandler<TestFieldRef,TestFact,TestStatement,TestMethod>accPathHandler){ Set<ConstrainedFact<TestFieldRef, TestFact, TestStatement, TestMethod>> result = Sets.newHashSet();Set<ConstrainedFact<TestFieldRef,TestFact,TestStatement,TestMethod>>result=Sets.newHashSet(); boolean found = false;booleanfound=false; for (ExpectedFlowFunction ff : edge.flowFunctions) {for(ExpectedFlowFunctionff:edge.flowFunctions){ if (ff.source.equals(source.cloneWithAccessPath(source.getAccessPath().setResolver(null)))) {if(ff.source.equals(source..cloneWithAccessPathcloneWithAccessPath((sourcesource..getAccessPathgetAccessPath().().setResolversetResolver((nullnull)))))){ if (ff.source.equals(source)) {if(ff.source.equals(source)){ if (remainingFlowFunctions.remove(ff)) {if(remainingFlowFunctions.remove(ff)){ for(ConstrainedFact<TestFieldRef, Fact> target : ff.targets) {for(ConstrainedFact<TestFieldRef,Fact>target:ff.targets){ result.add(new ConstrainedFact<TestFieldRef, Fact>(result.add(newConstrainedFact<TestFieldRef,Fact>( target.getFact().cloneWithAccessPath(target.getFact().cloneWithAccessPath( target.getFact().accessPath.setResolver(source.getAccessPath().getResolver())), target.getFact().accessPath.setResolver(source.getAccessPath().getResolver())), target.getConstraint()));target.getConstraint())); for(TestFact target : ff.targets) {for(TestFacttarget:ff.targets){ result.add(ff.apply(target, accPathHandler));result.add(ff.apply(target,accPathHandler)); }} found = true;found=true; } else {}else{ }} public void runSolver(final boolean followReturnsPastSeeds, final String...initialSeeds) {publicvoidrunSolver(finalbooleanfollowReturnsPastSeeds,finalString...initialSeeds){ FieldSensitiveIFDSSolver<Statement, String, TestFieldRef, Fact, Method, InterproceduralCFG<Statement,Method>> solver = new FieldSensitiveIFDSSolver<Statement,String, TestFieldRef ,Fact, Method, InterproceduralCFG<Statement,Method>>(createTabulationProblem(followReturnsPastSeeds, initialSeeds));FieldSensitiveIFDSSolver<Statement,String,TestFieldRef,Fact,Method,InterproceduralCFG<Statement,Method>>solver=newFieldSensitiveIFDSSolver<Statement,String,TestFieldRef,Fact,Method,InterproceduralCFG<Statement,Method>>(createTabulationProblem(followReturnsPastSeeds,initialSeeds)); FieldSensitiveIFDSSolver<TestStatement, TestFieldRef, TestFact, TestMethod, InterproceduralCFG<TestStatement,TestMethod>> solver = new FieldSensitiveIFDSSolver<TestStatement, TestFieldRef ,TestFact, TestMethod, InterproceduralCFG<TestStatement,TestMethod>>(FieldSensitiveIFDSSolver<TestStatement,TestFieldRef,TestFact,TestMethod,InterproceduralCFG<TestStatement,TestMethod>>solver=newFieldSensitiveIFDSSolver<TestStatement,TestFieldRef,TestFact,TestMethod,InterproceduralCFG<TestStatement,TestMethod>>( createTabulationProblem(followReturnsPastSeeds, initialSeeds), new FactMergeHandler<TestFact>() {createTabulationProblem(followReturnsPastSeeds,initialSeeds),newFactMergeHandler<TestFact>(){ @Override@Override public void merge(TestFact previousFact, TestFact currentFact) {publicvoidmerge(TestFactpreviousFact,TestFactcurrentFact){ }} @Override@Override public void restoreCallingContext(TestFact factAtReturnSite, TestFact factAtCallSite) {publicvoidrestoreCallingContext(TestFactfactAtReturnSite,TestFactfactAtCallSite){ }}  }, debugger);},debugger); addExpectationsToDebugger();addExpectationsToDebugger(); solver.solve();solver.solve();  assertAllFlowFunctionsUsed();assertAllFlowFunctionsUsed(); }}   private IFDSTabulationProblem<Statement, TestFieldRef, Fact, Method, InterproceduralCFG<Statement, Method>> createTabulationProblem(final boolean followReturnsPastSeeds, final String[] initialSeeds) {privateIFDSTabulationProblem<Statement,TestFieldRef,Fact,Method,InterproceduralCFG<Statement,Method>>createTabulationProblem(finalbooleanfollowReturnsPastSeeds,finalString[]initialSeeds){ final InterproceduralCFG<Statement, Method> icfg = buildIcfg();finalInterproceduralCFG<Statement,Method>icfg=buildIcfg(); final FlowFunctions<Statement, TestFieldRef, Fact, Method> flowFunctions = flowFunctions();finalFlowFunctions<Statement,TestFieldRef,Fact,Method>flowFunctions=flowFunctions(); private void addExpectationsToDebugger() {privatevoidaddExpectationsToDebugger(){ for(NormalEdge edge : normalEdges) {for(NormalEdgeedge:normalEdges){ debugger.expectNormalFlow(edge.unit, expectedFlowFunctionsToString(edge.flowFunctions));debugger.expectNormalFlow(edge.unit,expectedFlowFunctionsToString(edge.flowFunctions)); }} for(CallEdge edge : callEdges) {for(CallEdgeedge:callEdges){ debugger.expectCallFlow(edge.callSite, edge.destinationMethod, expectedFlowFunctionsToString(edge.flowFunctions));debugger.expectCallFlow(edge.callSite,edge.destinationMethod,expectedFlowFunctionsToString(edge.flowFunctions)); }} for(Call2ReturnEdge edge : call2retEdges) {for(Call2ReturnEdgeedge:call2retEdges){ debugger.expectNormalFlow(edge.callSite, expectedFlowFunctionsToString(edge.flowFunctions));debugger.expectNormalFlow(edge.callSite,expectedFlowFunctionsToString(edge.flowFunctions)); }} for(ReturnEdge edge : returnEdges) {for(ReturnEdgeedge:returnEdges){ debugger.expectReturnFlow(edge.exitStmt, edge.returnSite, expectedFlowFunctionsToString(edge.flowFunctions));debugger.expectReturnFlow(edge.exitStmt,edge.returnSite,expectedFlowFunctionsToString(edge.flowFunctions)); }} }} private IFDSTabulationProblem<TestStatement, TestFieldRef, TestFact, TestMethod, InterproceduralCFG<TestStatement, TestMethod>> createTabulationProblem(final boolean followReturnsPastSeeds, final String[] initialSeeds) {privateIFDSTabulationProblem<TestStatement,TestFieldRef,TestFact,TestMethod,InterproceduralCFG<TestStatement,TestMethod>>createTabulationProblem(finalbooleanfollowReturnsPastSeeds,finalString[]initialSeeds){ final InterproceduralCFG<TestStatement, TestMethod> icfg = buildIcfg();finalInterproceduralCFG<TestStatement,TestMethod>icfg=buildIcfg(); final FlowFunctions<TestStatement, TestFieldRef, TestFact, TestMethod> flowFunctions = flowFunctions();finalFlowFunctions<TestStatement,TestFieldRef,TestFact,TestMethod>flowFunctions=flowFunctions();  return new IFDSTabulationProblem<Statement,TestFieldRef, Fact, Method, InterproceduralCFG<Statement, Method>>() {returnnewIFDSTabulationProblem<Statement,TestFieldRef,Fact,Method,InterproceduralCFG<Statement,Method>>(){ return new IFDSTabulationProblem<TestStatement,TestFieldRef, TestFact, TestMethod, InterproceduralCFG<TestStatement, TestMethod>>() {returnnewIFDSTabulationProblem<TestStatementTest,TestFieldRef,TestFactTest,TestMethodTest,InterproceduralCFG<TestStatementTest,TestMethodTest>>(){ @Override@Override public boolean followReturnsPastSeeds() {publicbooleanfollowReturnsPastSeeds(){ }} @Override@Override public FlowFunctions<Statement,TestFieldRef, Fact, Method> flowFunctions() {publicFlowFunctions<Statement,TestFieldRef,Fact,Method>flowFunctions(){ public FlowFunctions<TestStatement,TestFieldRef, TestFact, TestMethod> flowFunctions() {publicFlowFunctions<TestStatementTest,TestFieldRef,TestFactTest,TestMethodTest>flowFunctions(){ return flowFunctions;returnflowFunctions; }} @Override@Override public InterproceduralCFG<Statement, Method> interproceduralCFG() {publicInterproceduralCFG<Statement,Method>interproceduralCFG(){ public InterproceduralCFG<TestStatement, TestMethod> interproceduralCFG() {publicInterproceduralCFG<TestStatementTest,TestMethodTest>interproceduralCFG(){ return icfg;returnicfg; }} @Override@Override public Map<Statement, Set<Fact>> initialSeeds() {publicMap<Statement,Set<Fact>>initialSeeds(){ Map<Statement, Set<Fact>> result = Maps.newHashMap();Map<Statement,Set<Fact>>result=Maps.newHashMap(); public Map<TestStatement, Set<TestFact>> initialSeeds() {publicMap<TestStatementTest,Set<TestFactTest>>initialSeeds(){ Map<TestStatement, Set<TestFact>> result = Maps.newHashMap();Map<TestStatementTest,Set<TestFactTest>>result=Maps.newHashMap(); for (String stmt : initialSeeds) {for(Stringstmt:initialSeeds){ result.put(new Statement(stmt), Sets.newHashSet(new Fact("0")));result.put(newStatement(stmt),Sets.newHashSet(newFact("0"))); result.put(new TestStatement(stmt), Sets.newHashSet(new TestFact("0")));result.put(newTestStatementTest(stmt),Sets.newHashSet(newTestFactTest("0"))); }} return result;returnresult; }} @Override@Override public Fact zeroValue() {publicFactzeroValue(){ return new Fact("0");returnnewFact("0"); public TestFact zeroValue() {publicTestFactzeroValue(){ return new TestFact("0");returnnewTestFact("0"); }}  @Override@Override public ZeroHandler<TestFieldRef> zeroHandler() {publicZeroHandler<TestFieldRef>zeroHandler(){ return new ZeroHandler<TestFieldRef>() {returnnewZeroHandler<TestFieldRef>(){ @Override@Override public boolean shouldGenerateAccessPath(AccessPath<TestFieldRef> accPath) {publicbooleanshouldGenerateAccessPath(AccessPath<TestFieldRef>accPath){ return true;returntrue; }} };}; }} };}; }}








test/heros/alias/Method.java

â†’

test/heros/alias/TestMethod.java








View file @ 3398e46f






......@@ -10,11 +10,11 @@









 ******************************************************************************/










package heros.alias;





















public class Method {










public class TestMethod {





















 public final String name;










 










 public Method(String name) {










 public TestMethod(String name) {










 this.name = name;










 }














......@@ -32,9 +32,9 @@ public class Method {









 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Method))










 if (!(obj instanceof TestMethod))










 return false;










 Method other = (Method) obj;










 TestMethod other = (TestMethod) obj;










 if (name == null) {










 if (other.name != null)










 return false;



......












test/heros/alias/Method.java

â†’

test/heros/alias/TestMethod.java








View file @ 3398e46f








test/heros/alias/Method.java

â†’

test/heros/alias/TestMethod.java





Test




View file @ 3398e46f


3398e46f



......@@ -10,11 +10,11 @@









 ******************************************************************************/










package heros.alias;





















public class Method {










public class TestMethod {





















 public final String name;










 










 public Method(String name) {










 public TestMethod(String name) {










 this.name = name;










 }














......@@ -32,9 +32,9 @@ public class Method {









 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Method))










 if (!(obj instanceof TestMethod))










 return false;










 Method other = (Method) obj;










 TestMethod other = (TestMethod) obj;










 if (name == null) {










 if (other.name != null)










 return false;



......






......@@ -10,11 +10,11 @@









 ******************************************************************************/










package heros.alias;





















public class Method {










public class TestMethod {





















 public final String name;










 










 public Method(String name) {










 public TestMethod(String name) {










 this.name = name;










 }














......@@ -32,9 +32,9 @@ public class Method {









 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Method))










 if (!(obj instanceof TestMethod))










 return false;










 Method other = (Method) obj;










 TestMethod other = (TestMethod) obj;










 if (name == null) {










 if (other.name != null)










 return false;



......


 ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;public class Method {publicclassMethod{public class TestMethod {publicclassTestMethodTest{ public final String name;publicfinalStringname;  public Method(String name) {publicMethod(Stringname){ public TestMethod(String name) {publicTestMethodTest(Stringname){ this.name = name;this.name=name; }} return true;returntrue; if (obj == null)if(obj==null) return false;returnfalse; if (!(obj instanceof Method))if(!(objinstanceofMethod)) if (!(obj instanceof TestMethod))if(!(objinstanceofTestMethodTest)) return false;returnfalse; Method other = (Method) obj;Methodother=(Method)obj; TestMethod other = (TestMethod) obj;TestMethodTestother=(TestMethodTest)obj; if (name == null) {if(name==null){ if (other.name != null)if(other.name!=null) return false;returnfalse;








test/heros/alias/Statement.java

â†’

test/heros/alias/TestStatement.java








View file @ 3398e46f






......@@ -10,11 +10,11 @@









 ******************************************************************************/










package heros.alias;





















public class Statement {










public class TestStatement {





















 public final String identifier;










 










 public Statement(String identifier) {










 public TestStatement(String identifier) {










 this.identifier = identifier;










 }














......@@ -32,9 +32,9 @@ public class Statement {









 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Statement))










 if (!(obj instanceof TestStatement))










 return false;










 Statement other = (Statement) obj;










 TestStatement other = (TestStatement) obj;










 if (identifier == null) {










 if (other.identifier != null)










 return false;



......












test/heros/alias/Statement.java

â†’

test/heros/alias/TestStatement.java








View file @ 3398e46f








test/heros/alias/Statement.java

â†’

test/heros/alias/TestStatement.java





Test




View file @ 3398e46f


3398e46f



......@@ -10,11 +10,11 @@









 ******************************************************************************/










package heros.alias;





















public class Statement {










public class TestStatement {





















 public final String identifier;










 










 public Statement(String identifier) {










 public TestStatement(String identifier) {










 this.identifier = identifier;










 }














......@@ -32,9 +32,9 @@ public class Statement {









 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Statement))










 if (!(obj instanceof TestStatement))










 return false;










 Statement other = (Statement) obj;










 TestStatement other = (TestStatement) obj;










 if (identifier == null) {










 if (other.identifier != null)










 return false;



......






......@@ -10,11 +10,11 @@









 ******************************************************************************/










package heros.alias;





















public class Statement {










public class TestStatement {





















 public final String identifier;










 










 public Statement(String identifier) {










 public TestStatement(String identifier) {










 this.identifier = identifier;










 }














......@@ -32,9 +32,9 @@ public class Statement {









 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof Statement))










 if (!(obj instanceof TestStatement))










 return false;










 Statement other = (Statement) obj;










 TestStatement other = (TestStatement) obj;










 if (identifier == null) {










 if (other.identifier != null)










 return false;



......


 ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;public class Statement {publicclassStatement{public class TestStatement {publicclassTestStatementTest{ public final String identifier;publicfinalStringidentifier;  public Statement(String identifier) {publicStatement(Stringidentifier){ public TestStatement(String identifier) {publicTestStatementTest(Stringidentifier){ this.identifier = identifier;this.identifier=identifier; }} return true;returntrue; if (obj == null)if(obj==null) return false;returnfalse; if (!(obj instanceof Statement))if(!(objinstanceofStatement)) if (!(obj instanceof TestStatement))if(!(objinstanceofTestStatementTest)) return false;returnfalse; Statement other = (Statement) obj;Statementother=(Statement)obj; TestStatement other = (TestStatement) obj;TestStatementTestother=(TestStatementTest)obj; if (identifier == null) {if(identifier==null){ if (other.identifier != null)if(other.identifier!=null) return false;returnfalse;








test/heros/utilities/TestHelper.java








View file @ 3398e46f






......@@ -15,13 +15,17 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.alias.TestStatement;










import heros.alias.TestHelper.NormalEdge;










import heros.solver.BiDiIFDSSolver;










import heros.solver.IFDSSolver;





















import java.util.Collection;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Set;





















import com.google.common.base.Joiner;










import com.google.common.base.Predicate;










import com.google.common.collect.HashMultimap;



......@@ -150,6 +154,16 @@ public class TestHelper {









 }










 return result;










 }










 










 @Override










 public List<Statement> getPredsOf(Statement stmt) {










 LinkedList<Statement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.succUnit.equals(stmt))










 result.add(edge.unit);










 }










 return result;










 }





















 @Override










 public Collection<Statement> getStartPointsOf(Method m) {



......












test/heros/utilities/TestHelper.java








View file @ 3398e46f








test/heros/utilities/TestHelper.java










View file @ 3398e46f


3398e46f



......@@ -15,13 +15,17 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.alias.TestStatement;










import heros.alias.TestHelper.NormalEdge;










import heros.solver.BiDiIFDSSolver;










import heros.solver.IFDSSolver;





















import java.util.Collection;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Set;





















import com.google.common.base.Joiner;










import com.google.common.base.Predicate;










import com.google.common.collect.HashMultimap;



......@@ -150,6 +154,16 @@ public class TestHelper {









 }










 return result;










 }










 










 @Override










 public List<Statement> getPredsOf(Statement stmt) {










 LinkedList<Statement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.succUnit.equals(stmt))










 result.add(edge.unit);










 }










 return result;










 }





















 @Override










 public Collection<Statement> getStartPointsOf(Method m) {



......






......@@ -15,13 +15,17 @@ import heros.FlowFunction;









import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.alias.TestStatement;










import heros.alias.TestHelper.NormalEdge;










import heros.solver.BiDiIFDSSolver;










import heros.solver.IFDSSolver;





















import java.util.Collection;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Set;





















import com.google.common.base.Joiner;










import com.google.common.base.Predicate;










import com.google.common.collect.HashMultimap;



......@@ -150,6 +154,16 @@ public class TestHelper {









 }










 return result;










 }










 










 @Override










 public List<Statement> getPredsOf(Statement stmt) {










 LinkedList<Statement> result = Lists.newLinkedList();










 for (NormalEdge edge : normalEdges) {










 if (edge.includeInCfg && edge.succUnit.equals(stmt))










 result.add(edge.unit);










 }










 return result;










 }





















 @Override










 public Collection<Statement> getStartPointsOf(Method m) {



......


import heros.FlowFunctions;importheros.FlowFunctions;import heros.IFDSTabulationProblem;importheros.IFDSTabulationProblem;import heros.InterproceduralCFG;importheros.InterproceduralCFG;import heros.alias.TestStatement;importheros.alias.TestStatement;import heros.alias.TestHelper.NormalEdge;importheros.alias.TestHelper.NormalEdge;import heros.solver.BiDiIFDSSolver;importheros.solver.BiDiIFDSSolver;import heros.solver.IFDSSolver;importheros.solver.IFDSSolver;import java.util.Collection;importjava.util.Collection;import java.util.LinkedList;importjava.util.LinkedList;import java.util.List;importjava.util.List;import java.util.Map;importjava.util.Map;import java.util.Set;importjava.util.Set;import com.google.common.base.Joiner;importcom.google.common.base.Joiner;import com.google.common.base.Predicate;importcom.google.common.base.Predicate;import com.google.common.collect.HashMultimap;importcom.google.common.collect.HashMultimap; }} return result;returnresult; }}  @Override@Override public List<Statement> getPredsOf(Statement stmt) {publicList<Statement>getPredsOf(Statementstmt){ LinkedList<Statement> result = Lists.newLinkedList();LinkedList<Statement>result=Lists.newLinkedList(); for (NormalEdge edge : normalEdges) {for(NormalEdgeedge:normalEdges){ if (edge.includeInCfg && edge.succUnit.equals(stmt))if(edge.includeInCfg&&edge.succUnit.equals(stmt)) result.add(edge.unit);result.add(edge.unit); }} return result;returnresult; }} @Override@Override public Collection<Statement> getStartPointsOf(Method m) {publicCollection<Statement>getStartPointsOf(Methodm){



Prev


1


2


3


Next





Prev

1

2

3

Next











Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






