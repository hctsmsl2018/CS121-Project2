



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

f161c043















Commit
f161c043


authored
Jul 16, 2013
by


Eric Bodden



Browse files




first implementation of reduced summaries







parent
85653133













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/SummarizableAbstraction.java



0 → 100644







View file @ f161c043













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















public interface SummarizableAbstraction<A> {










 










 public SummarizableAbstraction<A> summarize();





















 public SummarizableAbstraction<A> expand(A fullAbstraction);





















}














src/heros/solver/IDESolver.java








View file @ f161c043






......@@ -23,6 +23,7 @@ import heros.FlowFunctions;









import heros.IDETabulationProblem;










import heros.InterproceduralCFG;










import heros.JoinLattice;










import heros.SummarizableAbstraction;










import heros.SynchronizedBy;










import heros.ZeroedFlowFunctions;










import heros.edgefunc.EdgeIdentity;



......@@ -306,6 +307,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(N sP: startPointsOf) {










 //for each result node of the call-flow function










 for(D d3: res) {










 d3 = summarize(d3);










 










 //create initial self-loop










 propagate(d3, sP, d3, EdgeIdentity.<V>v(), n, false); //line 15










 



......@@ -338,7 +341,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //update the caller-side summary function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);










 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 










 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5);










 d5 = expand(d5,d3);










 propagate(d1, retSiteN, d5, f.composeWith(fPrime), n, false);










 }










 }



......@@ -405,6 +409,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 d5 = expand(d5,d4);










 //compute composed function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);



......@@ -648,6 +653,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 private void addEndSummary(N sP, D d1, N eP, D d2, EdgeFunction<V> f) {










 d1 = summarize(d1);










 d2 = summarize(d2);










 Table<N, D, EdgeFunction<V>> summaries = endSummary.get(sP, d1);










 if(summaries==null) {










 summaries = HashBasedTable.create();



......@@ -659,6 +666,26 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 summaries.put(eP,d2,f);










 } 










 










 @SuppressWarnings("unchecked")










 private D summarize(D d) {










 if(d instanceof SummarizableAbstraction) {










 @SuppressWarnings("rawtypes")










 SummarizableAbstraction sa = (SummarizableAbstraction) d;










 d = (D) sa.summarize();










 }










 return d;










 }










 










 @SuppressWarnings("unchecked")










 private D expand(D d, D fullAbstraction) {










 if(fullAbstraction instanceof SummarizableAbstraction) {










 @SuppressWarnings("rawtypes")










 SummarizableAbstraction sa = (SummarizableAbstraction) d;










 d = (D) sa.expand(fullAbstraction);










 }










 return d;










 }





















 private Set<Entry<N, Set<D>>> incoming(D d1, N sP) {










 Map<N, Set<D>> map = incoming.get(sP, d1);










 if(map==null) return Collections.emptySet();



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

f161c043















Commit
f161c043


authored
Jul 16, 2013
by


Eric Bodden



Browse files




first implementation of reduced summaries







parent
85653133













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/SummarizableAbstraction.java



0 → 100644







View file @ f161c043













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















public interface SummarizableAbstraction<A> {










 










 public SummarizableAbstraction<A> summarize();





















 public SummarizableAbstraction<A> expand(A fullAbstraction);





















}














src/heros/solver/IDESolver.java








View file @ f161c043






......@@ -23,6 +23,7 @@ import heros.FlowFunctions;









import heros.IDETabulationProblem;










import heros.InterproceduralCFG;










import heros.JoinLattice;










import heros.SummarizableAbstraction;










import heros.SynchronizedBy;










import heros.ZeroedFlowFunctions;










import heros.edgefunc.EdgeIdentity;



......@@ -306,6 +307,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(N sP: startPointsOf) {










 //for each result node of the call-flow function










 for(D d3: res) {










 d3 = summarize(d3);










 










 //create initial self-loop










 propagate(d3, sP, d3, EdgeIdentity.<V>v(), n, false); //line 15










 



......@@ -338,7 +341,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //update the caller-side summary function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);










 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 










 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5);










 d5 = expand(d5,d3);










 propagate(d1, retSiteN, d5, f.composeWith(fPrime), n, false);










 }










 }



......@@ -405,6 +409,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 d5 = expand(d5,d4);










 //compute composed function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);



......@@ -648,6 +653,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 private void addEndSummary(N sP, D d1, N eP, D d2, EdgeFunction<V> f) {










 d1 = summarize(d1);










 d2 = summarize(d2);










 Table<N, D, EdgeFunction<V>> summaries = endSummary.get(sP, d1);










 if(summaries==null) {










 summaries = HashBasedTable.create();



......@@ -659,6 +666,26 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 summaries.put(eP,d2,f);










 } 










 










 @SuppressWarnings("unchecked")










 private D summarize(D d) {










 if(d instanceof SummarizableAbstraction) {










 @SuppressWarnings("rawtypes")










 SummarizableAbstraction sa = (SummarizableAbstraction) d;










 d = (D) sa.summarize();










 }










 return d;










 }










 










 @SuppressWarnings("unchecked")










 private D expand(D d, D fullAbstraction) {










 if(fullAbstraction instanceof SummarizableAbstraction) {










 @SuppressWarnings("rawtypes")










 SummarizableAbstraction sa = (SummarizableAbstraction) d;










 d = (D) sa.expand(fullAbstraction);










 }










 return d;










 }





















 private Set<Entry<N, Set<D>>> incoming(D d1, N sP) {










 Map<N, Set<D>> map = incoming.get(sP, d1);










 if(map==null) return Collections.emptySet();



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

f161c043







Open sidebar



Joshua Garcia heros
Commits

f161c043




Open sidebar

Joshua Garcia heros
Commits

f161c043


Joshua GarciaherosherosCommits
f161c043








Commit
f161c043


authored
Jul 16, 2013
by


Eric Bodden



Browse files




first implementation of reduced summaries







parent
85653133













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/SummarizableAbstraction.java



0 → 100644







View file @ f161c043













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















public interface SummarizableAbstraction<A> {










 










 public SummarizableAbstraction<A> summarize();





















 public SummarizableAbstraction<A> expand(A fullAbstraction);





















}














src/heros/solver/IDESolver.java








View file @ f161c043






......@@ -23,6 +23,7 @@ import heros.FlowFunctions;









import heros.IDETabulationProblem;










import heros.InterproceduralCFG;










import heros.JoinLattice;










import heros.SummarizableAbstraction;










import heros.SynchronizedBy;










import heros.ZeroedFlowFunctions;










import heros.edgefunc.EdgeIdentity;



......@@ -306,6 +307,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(N sP: startPointsOf) {










 //for each result node of the call-flow function










 for(D d3: res) {










 d3 = summarize(d3);










 










 //create initial self-loop










 propagate(d3, sP, d3, EdgeIdentity.<V>v(), n, false); //line 15










 



......@@ -338,7 +341,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //update the caller-side summary function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);










 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 










 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5);










 d5 = expand(d5,d3);










 propagate(d1, retSiteN, d5, f.composeWith(fPrime), n, false);










 }










 }



......@@ -405,6 +409,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 d5 = expand(d5,d4);










 //compute composed function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);



......@@ -648,6 +653,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 private void addEndSummary(N sP, D d1, N eP, D d2, EdgeFunction<V> f) {










 d1 = summarize(d1);










 d2 = summarize(d2);










 Table<N, D, EdgeFunction<V>> summaries = endSummary.get(sP, d1);










 if(summaries==null) {










 summaries = HashBasedTable.create();



......@@ -659,6 +666,26 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 summaries.put(eP,d2,f);










 } 










 










 @SuppressWarnings("unchecked")










 private D summarize(D d) {










 if(d instanceof SummarizableAbstraction) {










 @SuppressWarnings("rawtypes")










 SummarizableAbstraction sa = (SummarizableAbstraction) d;










 d = (D) sa.summarize();










 }










 return d;










 }










 










 @SuppressWarnings("unchecked")










 private D expand(D d, D fullAbstraction) {










 if(fullAbstraction instanceof SummarizableAbstraction) {










 @SuppressWarnings("rawtypes")










 SummarizableAbstraction sa = (SummarizableAbstraction) d;










 d = (D) sa.expand(fullAbstraction);










 }










 return d;










 }





















 private Set<Entry<N, Set<D>>> incoming(D d1, N sP) {










 Map<N, Set<D>> map = incoming.get(sP, d1);










 if(map==null) return Collections.emptySet();



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
f161c043


authored
Jul 16, 2013
by


Eric Bodden



Browse files




first implementation of reduced summaries







parent
85653133













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/SummarizableAbstraction.java



0 → 100644







View file @ f161c043













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















public interface SummarizableAbstraction<A> {










 










 public SummarizableAbstraction<A> summarize();





















 public SummarizableAbstraction<A> expand(A fullAbstraction);





















}














src/heros/solver/IDESolver.java








View file @ f161c043






......@@ -23,6 +23,7 @@ import heros.FlowFunctions;









import heros.IDETabulationProblem;










import heros.InterproceduralCFG;










import heros.JoinLattice;










import heros.SummarizableAbstraction;










import heros.SynchronizedBy;










import heros.ZeroedFlowFunctions;










import heros.edgefunc.EdgeIdentity;



......@@ -306,6 +307,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(N sP: startPointsOf) {










 //for each result node of the call-flow function










 for(D d3: res) {










 d3 = summarize(d3);










 










 //create initial self-loop










 propagate(d3, sP, d3, EdgeIdentity.<V>v(), n, false); //line 15










 



......@@ -338,7 +341,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //update the caller-side summary function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);










 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 










 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5);










 d5 = expand(d5,d3);










 propagate(d1, retSiteN, d5, f.composeWith(fPrime), n, false);










 }










 }



......@@ -405,6 +409,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 d5 = expand(d5,d4);










 //compute composed function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);



......@@ -648,6 +653,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 private void addEndSummary(N sP, D d1, N eP, D d2, EdgeFunction<V> f) {










 d1 = summarize(d1);










 d2 = summarize(d2);










 Table<N, D, EdgeFunction<V>> summaries = endSummary.get(sP, d1);










 if(summaries==null) {










 summaries = HashBasedTable.create();



......@@ -659,6 +666,26 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 summaries.put(eP,d2,f);










 } 










 










 @SuppressWarnings("unchecked")










 private D summarize(D d) {










 if(d instanceof SummarizableAbstraction) {










 @SuppressWarnings("rawtypes")










 SummarizableAbstraction sa = (SummarizableAbstraction) d;










 d = (D) sa.summarize();










 }










 return d;










 }










 










 @SuppressWarnings("unchecked")










 private D expand(D d, D fullAbstraction) {










 if(fullAbstraction instanceof SummarizableAbstraction) {










 @SuppressWarnings("rawtypes")










 SummarizableAbstraction sa = (SummarizableAbstraction) d;










 d = (D) sa.expand(fullAbstraction);










 }










 return d;










 }





















 private Set<Entry<N, Set<D>>> incoming(D d1, N sP) {










 Map<N, Set<D>> map = incoming.get(sP, d1);










 if(map==null) return Collections.emptySet();



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
f161c043


authored
Jul 16, 2013
by


Eric Bodden



Browse files



Commit
f161c043


authored
Jul 16, 2013
by


Eric Bodden

f161c043authoredbyEric Bodden

first implementation of reduced summaries






parent
85653133
















parent
85653133





parent












Changes
2
2


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/SummarizableAbstraction.java



0 → 100644







View file @ f161c043













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















public interface SummarizableAbstraction<A> {










 










 public SummarizableAbstraction<A> summarize();





















 public SummarizableAbstraction<A> expand(A fullAbstraction);





















}














src/heros/solver/IDESolver.java








View file @ f161c043






......@@ -23,6 +23,7 @@ import heros.FlowFunctions;









import heros.IDETabulationProblem;










import heros.InterproceduralCFG;










import heros.JoinLattice;










import heros.SummarizableAbstraction;










import heros.SynchronizedBy;










import heros.ZeroedFlowFunctions;










import heros.edgefunc.EdgeIdentity;



......@@ -306,6 +307,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(N sP: startPointsOf) {










 //for each result node of the call-flow function










 for(D d3: res) {










 d3 = summarize(d3);










 










 //create initial self-loop










 propagate(d3, sP, d3, EdgeIdentity.<V>v(), n, false); //line 15










 



......@@ -338,7 +341,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //update the caller-side summary function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);










 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 










 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5);










 d5 = expand(d5,d3);










 propagate(d1, retSiteN, d5, f.composeWith(fPrime), n, false);










 }










 }



......@@ -405,6 +409,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 d5 = expand(d5,d4);










 //compute composed function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);



......@@ -648,6 +653,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 private void addEndSummary(N sP, D d1, N eP, D d2, EdgeFunction<V> f) {










 d1 = summarize(d1);










 d2 = summarize(d2);










 Table<N, D, EdgeFunction<V>> summaries = endSummary.get(sP, d1);










 if(summaries==null) {










 summaries = HashBasedTable.create();



......@@ -659,6 +666,26 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 summaries.put(eP,d2,f);










 } 










 










 @SuppressWarnings("unchecked")










 private D summarize(D d) {










 if(d instanceof SummarizableAbstraction) {










 @SuppressWarnings("rawtypes")










 SummarizableAbstraction sa = (SummarizableAbstraction) d;










 d = (D) sa.summarize();










 }










 return d;










 }










 










 @SuppressWarnings("unchecked")










 private D expand(D d, D fullAbstraction) {










 if(fullAbstraction instanceof SummarizableAbstraction) {










 @SuppressWarnings("rawtypes")










 SummarizableAbstraction sa = (SummarizableAbstraction) d;










 d = (D) sa.expand(fullAbstraction);










 }










 return d;










 }





















 private Set<Entry<N, Set<D>>> incoming(D d1, N sP) {










 Map<N, Set<D>> map = incoming.get(sP, d1);










 if(map==null) return Collections.emptySet();



......














src/heros/SummarizableAbstraction.java



0 → 100644







View file @ f161c043













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















public interface SummarizableAbstraction<A> {










 










 public SummarizableAbstraction<A> summarize();





















 public SummarizableAbstraction<A> expand(A fullAbstraction);





















}












src/heros/SummarizableAbstraction.java



0 → 100644







View file @ f161c043








src/heros/SummarizableAbstraction.java



0 → 100644









View file @ f161c043


f161c043










/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















public interface SummarizableAbstraction<A> {










 










 public SummarizableAbstraction<A> summarize();





















 public SummarizableAbstraction<A> expand(A fullAbstraction);





















}













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















public interface SummarizableAbstraction<A> {










 










 public SummarizableAbstraction<A> summarize();





















 public SummarizableAbstraction<A> expand(A fullAbstraction);





















}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2012 Eric Bodden. * Copyright (c) 2012 Eric Bodden. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Eric Bodden - initial API and implementation *     Eric Bodden - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros;packageheros;public interface SummarizableAbstraction<A> {publicinterfaceSummarizableAbstraction<A>{  public SummarizableAbstraction<A> summarize();publicSummarizableAbstraction<A>summarize(); public SummarizableAbstraction<A> expand(A fullAbstraction);publicSummarizableAbstraction<A>expand(AfullAbstraction);}}








src/heros/solver/IDESolver.java








View file @ f161c043






......@@ -23,6 +23,7 @@ import heros.FlowFunctions;









import heros.IDETabulationProblem;










import heros.InterproceduralCFG;










import heros.JoinLattice;










import heros.SummarizableAbstraction;










import heros.SynchronizedBy;










import heros.ZeroedFlowFunctions;










import heros.edgefunc.EdgeIdentity;



......@@ -306,6 +307,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(N sP: startPointsOf) {










 //for each result node of the call-flow function










 for(D d3: res) {










 d3 = summarize(d3);










 










 //create initial self-loop










 propagate(d3, sP, d3, EdgeIdentity.<V>v(), n, false); //line 15










 



......@@ -338,7 +341,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //update the caller-side summary function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);










 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 










 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5);










 d5 = expand(d5,d3);










 propagate(d1, retSiteN, d5, f.composeWith(fPrime), n, false);










 }










 }



......@@ -405,6 +409,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 d5 = expand(d5,d4);










 //compute composed function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);



......@@ -648,6 +653,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 private void addEndSummary(N sP, D d1, N eP, D d2, EdgeFunction<V> f) {










 d1 = summarize(d1);










 d2 = summarize(d2);










 Table<N, D, EdgeFunction<V>> summaries = endSummary.get(sP, d1);










 if(summaries==null) {










 summaries = HashBasedTable.create();



......@@ -659,6 +666,26 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 summaries.put(eP,d2,f);










 } 










 










 @SuppressWarnings("unchecked")










 private D summarize(D d) {










 if(d instanceof SummarizableAbstraction) {










 @SuppressWarnings("rawtypes")










 SummarizableAbstraction sa = (SummarizableAbstraction) d;










 d = (D) sa.summarize();










 }










 return d;










 }










 










 @SuppressWarnings("unchecked")










 private D expand(D d, D fullAbstraction) {










 if(fullAbstraction instanceof SummarizableAbstraction) {










 @SuppressWarnings("rawtypes")










 SummarizableAbstraction sa = (SummarizableAbstraction) d;










 d = (D) sa.expand(fullAbstraction);










 }










 return d;










 }





















 private Set<Entry<N, Set<D>>> incoming(D d1, N sP) {










 Map<N, Set<D>> map = incoming.get(sP, d1);










 if(map==null) return Collections.emptySet();



......












src/heros/solver/IDESolver.java








View file @ f161c043








src/heros/solver/IDESolver.java










View file @ f161c043


f161c043



......@@ -23,6 +23,7 @@ import heros.FlowFunctions;









import heros.IDETabulationProblem;










import heros.InterproceduralCFG;










import heros.JoinLattice;










import heros.SummarizableAbstraction;










import heros.SynchronizedBy;










import heros.ZeroedFlowFunctions;










import heros.edgefunc.EdgeIdentity;



......@@ -306,6 +307,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(N sP: startPointsOf) {










 //for each result node of the call-flow function










 for(D d3: res) {










 d3 = summarize(d3);










 










 //create initial self-loop










 propagate(d3, sP, d3, EdgeIdentity.<V>v(), n, false); //line 15










 



......@@ -338,7 +341,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //update the caller-side summary function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);










 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 










 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5);










 d5 = expand(d5,d3);










 propagate(d1, retSiteN, d5, f.composeWith(fPrime), n, false);










 }










 }



......@@ -405,6 +409,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 d5 = expand(d5,d4);










 //compute composed function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);



......@@ -648,6 +653,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 private void addEndSummary(N sP, D d1, N eP, D d2, EdgeFunction<V> f) {










 d1 = summarize(d1);










 d2 = summarize(d2);










 Table<N, D, EdgeFunction<V>> summaries = endSummary.get(sP, d1);










 if(summaries==null) {










 summaries = HashBasedTable.create();



......@@ -659,6 +666,26 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 summaries.put(eP,d2,f);










 } 










 










 @SuppressWarnings("unchecked")










 private D summarize(D d) {










 if(d instanceof SummarizableAbstraction) {










 @SuppressWarnings("rawtypes")










 SummarizableAbstraction sa = (SummarizableAbstraction) d;










 d = (D) sa.summarize();










 }










 return d;










 }










 










 @SuppressWarnings("unchecked")










 private D expand(D d, D fullAbstraction) {










 if(fullAbstraction instanceof SummarizableAbstraction) {










 @SuppressWarnings("rawtypes")










 SummarizableAbstraction sa = (SummarizableAbstraction) d;










 d = (D) sa.expand(fullAbstraction);










 }










 return d;










 }





















 private Set<Entry<N, Set<D>>> incoming(D d1, N sP) {










 Map<N, Set<D>> map = incoming.get(sP, d1);










 if(map==null) return Collections.emptySet();



......






......@@ -23,6 +23,7 @@ import heros.FlowFunctions;









import heros.IDETabulationProblem;










import heros.InterproceduralCFG;










import heros.JoinLattice;










import heros.SummarizableAbstraction;










import heros.SynchronizedBy;










import heros.ZeroedFlowFunctions;










import heros.edgefunc.EdgeIdentity;



......@@ -306,6 +307,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(N sP: startPointsOf) {










 //for each result node of the call-flow function










 for(D d3: res) {










 d3 = summarize(d3);










 










 //create initial self-loop










 propagate(d3, sP, d3, EdgeIdentity.<V>v(), n, false); //line 15










 



......@@ -338,7 +341,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //update the caller-side summary function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);










 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 










 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5);










 d5 = expand(d5,d3);










 propagate(d1, retSiteN, d5, f.composeWith(fPrime), n, false);










 }










 }



......@@ -405,6 +409,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 d5 = expand(d5,d4);










 //compute composed function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);



......@@ -648,6 +653,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 private void addEndSummary(N sP, D d1, N eP, D d2, EdgeFunction<V> f) {










 d1 = summarize(d1);










 d2 = summarize(d2);










 Table<N, D, EdgeFunction<V>> summaries = endSummary.get(sP, d1);










 if(summaries==null) {










 summaries = HashBasedTable.create();



......@@ -659,6 +666,26 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 summaries.put(eP,d2,f);










 } 










 










 @SuppressWarnings("unchecked")










 private D summarize(D d) {










 if(d instanceof SummarizableAbstraction) {










 @SuppressWarnings("rawtypes")










 SummarizableAbstraction sa = (SummarizableAbstraction) d;










 d = (D) sa.summarize();










 }










 return d;










 }










 










 @SuppressWarnings("unchecked")










 private D expand(D d, D fullAbstraction) {










 if(fullAbstraction instanceof SummarizableAbstraction) {










 @SuppressWarnings("rawtypes")










 SummarizableAbstraction sa = (SummarizableAbstraction) d;










 d = (D) sa.expand(fullAbstraction);










 }










 return d;










 }





















 private Set<Entry<N, Set<D>>> incoming(D d1, N sP) {










 Map<N, Set<D>> map = incoming.get(sP, d1);










 if(map==null) return Collections.emptySet();



......


import heros.IDETabulationProblem;importheros.IDETabulationProblem;import heros.InterproceduralCFG;importheros.InterproceduralCFG;import heros.JoinLattice;importheros.JoinLattice;import heros.SummarizableAbstraction;importheros.SummarizableAbstraction;import heros.SynchronizedBy;importheros.SynchronizedBy;import heros.ZeroedFlowFunctions;importheros.ZeroedFlowFunctions;import heros.edgefunc.EdgeIdentity;importheros.edgefunc.EdgeIdentity; for(N sP: startPointsOf) {for(NsP:startPointsOf){ //for each result node of the call-flow function//for each result node of the call-flow function for(D d3: res) {for(Dd3:res){ d3 = summarize(d3);d3=summarize(d3);  //create initial self-loop//create initial self-loop propagate(d3, sP, d3, EdgeIdentity.<V>v(), n, false); //line 15propagate(d3,sP,d3,EdgeIdentity.<V>v(),n,false);//line 15  //update the caller-side summary function//update the caller-side summary function EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);EdgeFunction<V>f4=edgeFunctions.getCallEdgeFunction(n,d2,sCalledProcN,d3); EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);EdgeFunction<V>f5=edgeFunctions.getReturnEdgeFunction(n,sCalledProcN,eP,d4,retSiteN,d5); EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); EdgeFunction<V>fPrime=f4.composeWith(fCalleeSummary).composeWith(f5); EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5);EdgeFunction<V>fPrime=f4.composeWith(fCalleeSummary).composeWith(f5); d5 = expand(d5,d3);d5=expand(d5,d3); propagate(d1, retSiteN, d5, f.composeWith(fPrime), n, false);propagate(d1,retSiteN,d5,f.composeWith(fPrime),n,false); }} }} //for each target value at the return site//for each target value at the return site //line 23//line 23 for(D d5: targets) {for(Dd5:targets){ d5 = expand(d5,d4);d5=expand(d5,d4); //compute composed function//compute composed function EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);EdgeFunction<V>f4=edgeFunctions.getCallEdgeFunction(c,d4,icfg.getMethodOf(n),d1); EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);EdgeFunction<V>f5=edgeFunctions.getReturnEdgeFunction(c,icfg.getMethodOf(n),n,d2,retSiteC,d5); }} private void addEndSummary(N sP, D d1, N eP, D d2, EdgeFunction<V> f) {privatevoidaddEndSummary(NsP,Dd1,NeP,Dd2,EdgeFunction<V>f){ d1 = summarize(d1);d1=summarize(d1); d2 = summarize(d2);d2=summarize(d2); Table<N, D, EdgeFunction<V>> summaries = endSummary.get(sP, d1);Table<N,D,EdgeFunction<V>>summaries=endSummary.get(sP,d1); if(summaries==null) {if(summaries==null){ summaries = HashBasedTable.create();summaries=HashBasedTable.create(); summaries.put(eP,d2,f);summaries.put(eP,d2,f); } }  @SuppressWarnings("unchecked")@SuppressWarnings("unchecked") private D summarize(D d) {privateDsummarize(Dd){ if(d instanceof SummarizableAbstraction) {if(dinstanceofSummarizableAbstraction){ @SuppressWarnings("rawtypes")@SuppressWarnings("rawtypes") SummarizableAbstraction sa = (SummarizableAbstraction) d;SummarizableAbstractionsa=(SummarizableAbstraction)d; d = (D) sa.summarize();d=(D)sa.summarize(); }} return d;returnd; }}  @SuppressWarnings("unchecked")@SuppressWarnings("unchecked") private D expand(D d, D fullAbstraction) {privateDexpand(Dd,DfullAbstraction){ if(fullAbstraction instanceof SummarizableAbstraction) {if(fullAbstractioninstanceofSummarizableAbstraction){ @SuppressWarnings("rawtypes")@SuppressWarnings("rawtypes") SummarizableAbstraction sa = (SummarizableAbstraction) d;SummarizableAbstractionsa=(SummarizableAbstraction)d; d = (D) sa.expand(fullAbstraction);d=(D)sa.expand(fullAbstraction); }} return d;returnd; }} private Set<Entry<N, Set<D>>> incoming(D d1, N sP) {privateSet<Entry<N,Set<D>>>incoming(Dd1,NsP){ Map<N, Set<D>> map = incoming.get(sP, d1);Map<N,Set<D>>map=incoming.get(sP,d1); if(map==null) return Collections.emptySet();if(map==null)returnCollections.emptySet();









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






