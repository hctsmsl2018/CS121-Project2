



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

f7c0f2f6















Commit
f7c0f2f6


authored
Nov 29, 2012
by


Eric Bodden



Browse files




added dumping code again for Soot/Jimple versions







parent
f34c54b8













Changes
3




Hide whitespace changes

Inline
Side-by-side















src-generic/de/bodden/ide/solver/IDESolver.java








View file @ f7c0f2f6






......@@ -58,62 +58,62 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 public static CacheBuilder<Object, Object> DEFAULT_CACHE_BUILDER = CacheBuilder.newBuilder().concurrencyLevel(Runtime.getRuntime().availableProcessors()).initialCapacity(10000).softValues();










 










 private static final boolean DEBUG = false;










 protected static final boolean DEBUG = false;










 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 private ExecutorService executor;










 protected ExecutorService executor;










 










 @DontSynchronize("only used by single thread")










 private int numThreads;










 protected int numThreads;










 










 //the number of currently running tasks










 private final AtomicInteger numTasks = new AtomicInteger();










 protected final AtomicInteger numTasks = new AtomicInteger();





















 @SynchronizedBy("consistent lock on field")










 //We are using a LinkedHashSet here to enforce FIFO semantics, which leads to a breath-first construction










 //of the exploded super graph. As we observed in experiments, this can speed up the construction.










 private final Collection<PathEdge<N,D,M>> pathWorklist = new LinkedHashSet<PathEdge<N,D,M>>();










 protected final Collection<PathEdge<N,D,M>> pathWorklist = new LinkedHashSet<PathEdge<N,D,M>>();










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 private final JumpFunctions<N,D,V> jumpFn;










 protected final JumpFunctions<N,D,V> jumpFn;










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 private final SummaryFunctions<N,D,V> summaryFunctions = new SummaryFunctions<N,D,V>();










 protected final SummaryFunctions<N,D,V> summaryFunctions = new SummaryFunctions<N,D,V>();





















 @SynchronizedBy("thread safe data structure, only modified internally")










 private final I icfg;










 protected final I icfg;










 










 //stores summaries that were queried before they were computed










 //see CC 2010 paper by Naeem, Lhotak and Rodriguez










 @SynchronizedBy("consistent lock on 'incoming'")










 private final Table<N,D,Table<N,D,EdgeFunction<V>>> endSummary = HashBasedTable.create();










 protected final Table<N,D,Table<N,D,EdgeFunction<V>>> endSummary = HashBasedTable.create();





















 //edges going along calls










 //see CC 2010 paper by Naeem, Lhotak and Rodriguez










 @SynchronizedBy("consistent lock on field")










 private final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();










 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();










 










 @DontSynchronize("stateless")










 private final FlowFunctions<N, D, M> flowFunctions;










 protected final FlowFunctions<N, D, M> flowFunctions;





















 @DontSynchronize("stateless")










 private final EdgeFunctions<N,D,M,V> edgeFunctions;










 protected final EdgeFunctions<N,D,M,V> edgeFunctions;





















 @DontSynchronize("only used by single thread")










 private final Set<N> initialSeeds;










 protected final Set<N> initialSeeds;





















 @DontSynchronize("stateless")










 private final JoinLattice<V> valueLattice;










 protected final JoinLattice<V> valueLattice;










 










 @DontSynchronize("stateless")










 private final EdgeFunction<V> allTop;










 protected final EdgeFunction<V> allTop;










 










 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 private final List<Pair<N,D>> nodeWorklist = new LinkedList<Pair<N,D>>();










 protected final List<Pair<N,D>> nodeWorklist = new LinkedList<Pair<N,D>>();





















 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 private final Table<N,D,V> val = HashBasedTable.create(); 










 protected final Table<N,D,V> val = HashBasedTable.create(); 










 










 @DontSynchronize("benign races")










 public long flowFunctionApplicationCount;



......@@ -131,13 +131,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public long durationFlowFunctionApplication;





















 @DontSynchronize("stateless")










 private final D zeroValue;










 protected final D zeroValue;










 










 @DontSynchronize("readOnly")










 private final FlowFunctionCache<N,D,M> ffCache; 










 protected final FlowFunctionCache<N,D,M> ffCache; 





















 @DontSynchronize("readOnly")










 private final EdgeFunctionCache<N,D,M,V> efCache;










 protected final EdgeFunctionCache<N,D,M,V> efCache;





















 /**










	 * Creates a solver for the given problem, which caches flow functions and edge functions.



......














src-soot/soot/jimple/toolkits/ide/JimpleIDESolver.java



0 â†’ 100644







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IDESolver;





















public class JimpleIDESolver<D, V> extends IDESolver<Unit, D, SootMethod, V, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, V> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}














src-soot/soot/jimple/toolkits/ide/JimpleIFDSSolver.java



0 â†’ 100644







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IFDSSolver;





















public class JimpleIFDSSolver<D, V> extends IFDSSolver<Unit, D, SootMethod, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, ?> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

f7c0f2f6















Commit
f7c0f2f6


authored
Nov 29, 2012
by


Eric Bodden



Browse files




added dumping code again for Soot/Jimple versions







parent
f34c54b8













Changes
3




Hide whitespace changes

Inline
Side-by-side















src-generic/de/bodden/ide/solver/IDESolver.java








View file @ f7c0f2f6






......@@ -58,62 +58,62 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 public static CacheBuilder<Object, Object> DEFAULT_CACHE_BUILDER = CacheBuilder.newBuilder().concurrencyLevel(Runtime.getRuntime().availableProcessors()).initialCapacity(10000).softValues();










 










 private static final boolean DEBUG = false;










 protected static final boolean DEBUG = false;










 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 private ExecutorService executor;










 protected ExecutorService executor;










 










 @DontSynchronize("only used by single thread")










 private int numThreads;










 protected int numThreads;










 










 //the number of currently running tasks










 private final AtomicInteger numTasks = new AtomicInteger();










 protected final AtomicInteger numTasks = new AtomicInteger();





















 @SynchronizedBy("consistent lock on field")










 //We are using a LinkedHashSet here to enforce FIFO semantics, which leads to a breath-first construction










 //of the exploded super graph. As we observed in experiments, this can speed up the construction.










 private final Collection<PathEdge<N,D,M>> pathWorklist = new LinkedHashSet<PathEdge<N,D,M>>();










 protected final Collection<PathEdge<N,D,M>> pathWorklist = new LinkedHashSet<PathEdge<N,D,M>>();










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 private final JumpFunctions<N,D,V> jumpFn;










 protected final JumpFunctions<N,D,V> jumpFn;










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 private final SummaryFunctions<N,D,V> summaryFunctions = new SummaryFunctions<N,D,V>();










 protected final SummaryFunctions<N,D,V> summaryFunctions = new SummaryFunctions<N,D,V>();





















 @SynchronizedBy("thread safe data structure, only modified internally")










 private final I icfg;










 protected final I icfg;










 










 //stores summaries that were queried before they were computed










 //see CC 2010 paper by Naeem, Lhotak and Rodriguez










 @SynchronizedBy("consistent lock on 'incoming'")










 private final Table<N,D,Table<N,D,EdgeFunction<V>>> endSummary = HashBasedTable.create();










 protected final Table<N,D,Table<N,D,EdgeFunction<V>>> endSummary = HashBasedTable.create();





















 //edges going along calls










 //see CC 2010 paper by Naeem, Lhotak and Rodriguez










 @SynchronizedBy("consistent lock on field")










 private final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();










 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();










 










 @DontSynchronize("stateless")










 private final FlowFunctions<N, D, M> flowFunctions;










 protected final FlowFunctions<N, D, M> flowFunctions;





















 @DontSynchronize("stateless")










 private final EdgeFunctions<N,D,M,V> edgeFunctions;










 protected final EdgeFunctions<N,D,M,V> edgeFunctions;





















 @DontSynchronize("only used by single thread")










 private final Set<N> initialSeeds;










 protected final Set<N> initialSeeds;





















 @DontSynchronize("stateless")










 private final JoinLattice<V> valueLattice;










 protected final JoinLattice<V> valueLattice;










 










 @DontSynchronize("stateless")










 private final EdgeFunction<V> allTop;










 protected final EdgeFunction<V> allTop;










 










 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 private final List<Pair<N,D>> nodeWorklist = new LinkedList<Pair<N,D>>();










 protected final List<Pair<N,D>> nodeWorklist = new LinkedList<Pair<N,D>>();





















 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 private final Table<N,D,V> val = HashBasedTable.create(); 










 protected final Table<N,D,V> val = HashBasedTable.create(); 










 










 @DontSynchronize("benign races")










 public long flowFunctionApplicationCount;



......@@ -131,13 +131,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public long durationFlowFunctionApplication;





















 @DontSynchronize("stateless")










 private final D zeroValue;










 protected final D zeroValue;










 










 @DontSynchronize("readOnly")










 private final FlowFunctionCache<N,D,M> ffCache; 










 protected final FlowFunctionCache<N,D,M> ffCache; 





















 @DontSynchronize("readOnly")










 private final EdgeFunctionCache<N,D,M,V> efCache;










 protected final EdgeFunctionCache<N,D,M,V> efCache;





















 /**










	 * Creates a solver for the given problem, which caches flow functions and edge functions.



......














src-soot/soot/jimple/toolkits/ide/JimpleIDESolver.java



0 â†’ 100644







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IDESolver;





















public class JimpleIDESolver<D, V> extends IDESolver<Unit, D, SootMethod, V, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, V> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}














src-soot/soot/jimple/toolkits/ide/JimpleIFDSSolver.java



0 â†’ 100644







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IFDSSolver;





















public class JimpleIFDSSolver<D, V> extends IFDSSolver<Unit, D, SootMethod, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, ?> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

f7c0f2f6







Open sidebar



Joshua Garcia heros
Commits

f7c0f2f6




Open sidebar

Joshua Garcia heros
Commits

f7c0f2f6


Joshua GarciaherosherosCommits
f7c0f2f6








Commit
f7c0f2f6


authored
Nov 29, 2012
by


Eric Bodden



Browse files




added dumping code again for Soot/Jimple versions







parent
f34c54b8













Changes
3




Hide whitespace changes

Inline
Side-by-side















src-generic/de/bodden/ide/solver/IDESolver.java








View file @ f7c0f2f6






......@@ -58,62 +58,62 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 public static CacheBuilder<Object, Object> DEFAULT_CACHE_BUILDER = CacheBuilder.newBuilder().concurrencyLevel(Runtime.getRuntime().availableProcessors()).initialCapacity(10000).softValues();










 










 private static final boolean DEBUG = false;










 protected static final boolean DEBUG = false;










 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 private ExecutorService executor;










 protected ExecutorService executor;










 










 @DontSynchronize("only used by single thread")










 private int numThreads;










 protected int numThreads;










 










 //the number of currently running tasks










 private final AtomicInteger numTasks = new AtomicInteger();










 protected final AtomicInteger numTasks = new AtomicInteger();





















 @SynchronizedBy("consistent lock on field")










 //We are using a LinkedHashSet here to enforce FIFO semantics, which leads to a breath-first construction










 //of the exploded super graph. As we observed in experiments, this can speed up the construction.










 private final Collection<PathEdge<N,D,M>> pathWorklist = new LinkedHashSet<PathEdge<N,D,M>>();










 protected final Collection<PathEdge<N,D,M>> pathWorklist = new LinkedHashSet<PathEdge<N,D,M>>();










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 private final JumpFunctions<N,D,V> jumpFn;










 protected final JumpFunctions<N,D,V> jumpFn;










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 private final SummaryFunctions<N,D,V> summaryFunctions = new SummaryFunctions<N,D,V>();










 protected final SummaryFunctions<N,D,V> summaryFunctions = new SummaryFunctions<N,D,V>();





















 @SynchronizedBy("thread safe data structure, only modified internally")










 private final I icfg;










 protected final I icfg;










 










 //stores summaries that were queried before they were computed










 //see CC 2010 paper by Naeem, Lhotak and Rodriguez










 @SynchronizedBy("consistent lock on 'incoming'")










 private final Table<N,D,Table<N,D,EdgeFunction<V>>> endSummary = HashBasedTable.create();










 protected final Table<N,D,Table<N,D,EdgeFunction<V>>> endSummary = HashBasedTable.create();





















 //edges going along calls










 //see CC 2010 paper by Naeem, Lhotak and Rodriguez










 @SynchronizedBy("consistent lock on field")










 private final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();










 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();










 










 @DontSynchronize("stateless")










 private final FlowFunctions<N, D, M> flowFunctions;










 protected final FlowFunctions<N, D, M> flowFunctions;





















 @DontSynchronize("stateless")










 private final EdgeFunctions<N,D,M,V> edgeFunctions;










 protected final EdgeFunctions<N,D,M,V> edgeFunctions;





















 @DontSynchronize("only used by single thread")










 private final Set<N> initialSeeds;










 protected final Set<N> initialSeeds;





















 @DontSynchronize("stateless")










 private final JoinLattice<V> valueLattice;










 protected final JoinLattice<V> valueLattice;










 










 @DontSynchronize("stateless")










 private final EdgeFunction<V> allTop;










 protected final EdgeFunction<V> allTop;










 










 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 private final List<Pair<N,D>> nodeWorklist = new LinkedList<Pair<N,D>>();










 protected final List<Pair<N,D>> nodeWorklist = new LinkedList<Pair<N,D>>();





















 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 private final Table<N,D,V> val = HashBasedTable.create(); 










 protected final Table<N,D,V> val = HashBasedTable.create(); 










 










 @DontSynchronize("benign races")










 public long flowFunctionApplicationCount;



......@@ -131,13 +131,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public long durationFlowFunctionApplication;





















 @DontSynchronize("stateless")










 private final D zeroValue;










 protected final D zeroValue;










 










 @DontSynchronize("readOnly")










 private final FlowFunctionCache<N,D,M> ffCache; 










 protected final FlowFunctionCache<N,D,M> ffCache; 





















 @DontSynchronize("readOnly")










 private final EdgeFunctionCache<N,D,M,V> efCache;










 protected final EdgeFunctionCache<N,D,M,V> efCache;





















 /**










	 * Creates a solver for the given problem, which caches flow functions and edge functions.



......














src-soot/soot/jimple/toolkits/ide/JimpleIDESolver.java



0 â†’ 100644







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IDESolver;





















public class JimpleIDESolver<D, V> extends IDESolver<Unit, D, SootMethod, V, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, V> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}














src-soot/soot/jimple/toolkits/ide/JimpleIFDSSolver.java



0 â†’ 100644







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IFDSSolver;





















public class JimpleIFDSSolver<D, V> extends IFDSSolver<Unit, D, SootMethod, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, ?> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
f7c0f2f6


authored
Nov 29, 2012
by


Eric Bodden



Browse files




added dumping code again for Soot/Jimple versions







parent
f34c54b8













Changes
3




Hide whitespace changes

Inline
Side-by-side















src-generic/de/bodden/ide/solver/IDESolver.java








View file @ f7c0f2f6






......@@ -58,62 +58,62 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 public static CacheBuilder<Object, Object> DEFAULT_CACHE_BUILDER = CacheBuilder.newBuilder().concurrencyLevel(Runtime.getRuntime().availableProcessors()).initialCapacity(10000).softValues();










 










 private static final boolean DEBUG = false;










 protected static final boolean DEBUG = false;










 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 private ExecutorService executor;










 protected ExecutorService executor;










 










 @DontSynchronize("only used by single thread")










 private int numThreads;










 protected int numThreads;










 










 //the number of currently running tasks










 private final AtomicInteger numTasks = new AtomicInteger();










 protected final AtomicInteger numTasks = new AtomicInteger();





















 @SynchronizedBy("consistent lock on field")










 //We are using a LinkedHashSet here to enforce FIFO semantics, which leads to a breath-first construction










 //of the exploded super graph. As we observed in experiments, this can speed up the construction.










 private final Collection<PathEdge<N,D,M>> pathWorklist = new LinkedHashSet<PathEdge<N,D,M>>();










 protected final Collection<PathEdge<N,D,M>> pathWorklist = new LinkedHashSet<PathEdge<N,D,M>>();










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 private final JumpFunctions<N,D,V> jumpFn;










 protected final JumpFunctions<N,D,V> jumpFn;










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 private final SummaryFunctions<N,D,V> summaryFunctions = new SummaryFunctions<N,D,V>();










 protected final SummaryFunctions<N,D,V> summaryFunctions = new SummaryFunctions<N,D,V>();





















 @SynchronizedBy("thread safe data structure, only modified internally")










 private final I icfg;










 protected final I icfg;










 










 //stores summaries that were queried before they were computed










 //see CC 2010 paper by Naeem, Lhotak and Rodriguez










 @SynchronizedBy("consistent lock on 'incoming'")










 private final Table<N,D,Table<N,D,EdgeFunction<V>>> endSummary = HashBasedTable.create();










 protected final Table<N,D,Table<N,D,EdgeFunction<V>>> endSummary = HashBasedTable.create();





















 //edges going along calls










 //see CC 2010 paper by Naeem, Lhotak and Rodriguez










 @SynchronizedBy("consistent lock on field")










 private final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();










 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();










 










 @DontSynchronize("stateless")










 private final FlowFunctions<N, D, M> flowFunctions;










 protected final FlowFunctions<N, D, M> flowFunctions;





















 @DontSynchronize("stateless")










 private final EdgeFunctions<N,D,M,V> edgeFunctions;










 protected final EdgeFunctions<N,D,M,V> edgeFunctions;





















 @DontSynchronize("only used by single thread")










 private final Set<N> initialSeeds;










 protected final Set<N> initialSeeds;





















 @DontSynchronize("stateless")










 private final JoinLattice<V> valueLattice;










 protected final JoinLattice<V> valueLattice;










 










 @DontSynchronize("stateless")










 private final EdgeFunction<V> allTop;










 protected final EdgeFunction<V> allTop;










 










 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 private final List<Pair<N,D>> nodeWorklist = new LinkedList<Pair<N,D>>();










 protected final List<Pair<N,D>> nodeWorklist = new LinkedList<Pair<N,D>>();





















 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 private final Table<N,D,V> val = HashBasedTable.create(); 










 protected final Table<N,D,V> val = HashBasedTable.create(); 










 










 @DontSynchronize("benign races")










 public long flowFunctionApplicationCount;



......@@ -131,13 +131,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public long durationFlowFunctionApplication;





















 @DontSynchronize("stateless")










 private final D zeroValue;










 protected final D zeroValue;










 










 @DontSynchronize("readOnly")










 private final FlowFunctionCache<N,D,M> ffCache; 










 protected final FlowFunctionCache<N,D,M> ffCache; 





















 @DontSynchronize("readOnly")










 private final EdgeFunctionCache<N,D,M,V> efCache;










 protected final EdgeFunctionCache<N,D,M,V> efCache;





















 /**










	 * Creates a solver for the given problem, which caches flow functions and edge functions.



......














src-soot/soot/jimple/toolkits/ide/JimpleIDESolver.java



0 â†’ 100644







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IDESolver;





















public class JimpleIDESolver<D, V> extends IDESolver<Unit, D, SootMethod, V, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, V> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}














src-soot/soot/jimple/toolkits/ide/JimpleIFDSSolver.java



0 â†’ 100644







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IFDSSolver;





















public class JimpleIFDSSolver<D, V> extends IFDSSolver<Unit, D, SootMethod, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, ?> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
f7c0f2f6


authored
Nov 29, 2012
by


Eric Bodden



Browse files



Commit
f7c0f2f6


authored
Nov 29, 2012
by


Eric Bodden

f7c0f2f6authoredbyEric Bodden

added dumping code again for Soot/Jimple versions






parent
f34c54b8
















parent
f34c54b8





parent












Changes
3
3


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src-generic/de/bodden/ide/solver/IDESolver.java








View file @ f7c0f2f6






......@@ -58,62 +58,62 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 public static CacheBuilder<Object, Object> DEFAULT_CACHE_BUILDER = CacheBuilder.newBuilder().concurrencyLevel(Runtime.getRuntime().availableProcessors()).initialCapacity(10000).softValues();










 










 private static final boolean DEBUG = false;










 protected static final boolean DEBUG = false;










 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 private ExecutorService executor;










 protected ExecutorService executor;










 










 @DontSynchronize("only used by single thread")










 private int numThreads;










 protected int numThreads;










 










 //the number of currently running tasks










 private final AtomicInteger numTasks = new AtomicInteger();










 protected final AtomicInteger numTasks = new AtomicInteger();





















 @SynchronizedBy("consistent lock on field")










 //We are using a LinkedHashSet here to enforce FIFO semantics, which leads to a breath-first construction










 //of the exploded super graph. As we observed in experiments, this can speed up the construction.










 private final Collection<PathEdge<N,D,M>> pathWorklist = new LinkedHashSet<PathEdge<N,D,M>>();










 protected final Collection<PathEdge<N,D,M>> pathWorklist = new LinkedHashSet<PathEdge<N,D,M>>();










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 private final JumpFunctions<N,D,V> jumpFn;










 protected final JumpFunctions<N,D,V> jumpFn;










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 private final SummaryFunctions<N,D,V> summaryFunctions = new SummaryFunctions<N,D,V>();










 protected final SummaryFunctions<N,D,V> summaryFunctions = new SummaryFunctions<N,D,V>();





















 @SynchronizedBy("thread safe data structure, only modified internally")










 private final I icfg;










 protected final I icfg;










 










 //stores summaries that were queried before they were computed










 //see CC 2010 paper by Naeem, Lhotak and Rodriguez










 @SynchronizedBy("consistent lock on 'incoming'")










 private final Table<N,D,Table<N,D,EdgeFunction<V>>> endSummary = HashBasedTable.create();










 protected final Table<N,D,Table<N,D,EdgeFunction<V>>> endSummary = HashBasedTable.create();





















 //edges going along calls










 //see CC 2010 paper by Naeem, Lhotak and Rodriguez










 @SynchronizedBy("consistent lock on field")










 private final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();










 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();










 










 @DontSynchronize("stateless")










 private final FlowFunctions<N, D, M> flowFunctions;










 protected final FlowFunctions<N, D, M> flowFunctions;





















 @DontSynchronize("stateless")










 private final EdgeFunctions<N,D,M,V> edgeFunctions;










 protected final EdgeFunctions<N,D,M,V> edgeFunctions;





















 @DontSynchronize("only used by single thread")










 private final Set<N> initialSeeds;










 protected final Set<N> initialSeeds;





















 @DontSynchronize("stateless")










 private final JoinLattice<V> valueLattice;










 protected final JoinLattice<V> valueLattice;










 










 @DontSynchronize("stateless")










 private final EdgeFunction<V> allTop;










 protected final EdgeFunction<V> allTop;










 










 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 private final List<Pair<N,D>> nodeWorklist = new LinkedList<Pair<N,D>>();










 protected final List<Pair<N,D>> nodeWorklist = new LinkedList<Pair<N,D>>();





















 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 private final Table<N,D,V> val = HashBasedTable.create(); 










 protected final Table<N,D,V> val = HashBasedTable.create(); 










 










 @DontSynchronize("benign races")










 public long flowFunctionApplicationCount;



......@@ -131,13 +131,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public long durationFlowFunctionApplication;





















 @DontSynchronize("stateless")










 private final D zeroValue;










 protected final D zeroValue;










 










 @DontSynchronize("readOnly")










 private final FlowFunctionCache<N,D,M> ffCache; 










 protected final FlowFunctionCache<N,D,M> ffCache; 





















 @DontSynchronize("readOnly")










 private final EdgeFunctionCache<N,D,M,V> efCache;










 protected final EdgeFunctionCache<N,D,M,V> efCache;





















 /**










	 * Creates a solver for the given problem, which caches flow functions and edge functions.



......














src-soot/soot/jimple/toolkits/ide/JimpleIDESolver.java



0 â†’ 100644







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IDESolver;





















public class JimpleIDESolver<D, V> extends IDESolver<Unit, D, SootMethod, V, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, V> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}














src-soot/soot/jimple/toolkits/ide/JimpleIFDSSolver.java



0 â†’ 100644







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IFDSSolver;





















public class JimpleIFDSSolver<D, V> extends IFDSSolver<Unit, D, SootMethod, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, ?> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}














src-generic/de/bodden/ide/solver/IDESolver.java








View file @ f7c0f2f6






......@@ -58,62 +58,62 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 public static CacheBuilder<Object, Object> DEFAULT_CACHE_BUILDER = CacheBuilder.newBuilder().concurrencyLevel(Runtime.getRuntime().availableProcessors()).initialCapacity(10000).softValues();










 










 private static final boolean DEBUG = false;










 protected static final boolean DEBUG = false;










 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 private ExecutorService executor;










 protected ExecutorService executor;










 










 @DontSynchronize("only used by single thread")










 private int numThreads;










 protected int numThreads;










 










 //the number of currently running tasks










 private final AtomicInteger numTasks = new AtomicInteger();










 protected final AtomicInteger numTasks = new AtomicInteger();





















 @SynchronizedBy("consistent lock on field")










 //We are using a LinkedHashSet here to enforce FIFO semantics, which leads to a breath-first construction










 //of the exploded super graph. As we observed in experiments, this can speed up the construction.










 private final Collection<PathEdge<N,D,M>> pathWorklist = new LinkedHashSet<PathEdge<N,D,M>>();










 protected final Collection<PathEdge<N,D,M>> pathWorklist = new LinkedHashSet<PathEdge<N,D,M>>();










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 private final JumpFunctions<N,D,V> jumpFn;










 protected final JumpFunctions<N,D,V> jumpFn;










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 private final SummaryFunctions<N,D,V> summaryFunctions = new SummaryFunctions<N,D,V>();










 protected final SummaryFunctions<N,D,V> summaryFunctions = new SummaryFunctions<N,D,V>();





















 @SynchronizedBy("thread safe data structure, only modified internally")










 private final I icfg;










 protected final I icfg;










 










 //stores summaries that were queried before they were computed










 //see CC 2010 paper by Naeem, Lhotak and Rodriguez










 @SynchronizedBy("consistent lock on 'incoming'")










 private final Table<N,D,Table<N,D,EdgeFunction<V>>> endSummary = HashBasedTable.create();










 protected final Table<N,D,Table<N,D,EdgeFunction<V>>> endSummary = HashBasedTable.create();





















 //edges going along calls










 //see CC 2010 paper by Naeem, Lhotak and Rodriguez










 @SynchronizedBy("consistent lock on field")










 private final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();










 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();










 










 @DontSynchronize("stateless")










 private final FlowFunctions<N, D, M> flowFunctions;










 protected final FlowFunctions<N, D, M> flowFunctions;





















 @DontSynchronize("stateless")










 private final EdgeFunctions<N,D,M,V> edgeFunctions;










 protected final EdgeFunctions<N,D,M,V> edgeFunctions;





















 @DontSynchronize("only used by single thread")










 private final Set<N> initialSeeds;










 protected final Set<N> initialSeeds;





















 @DontSynchronize("stateless")










 private final JoinLattice<V> valueLattice;










 protected final JoinLattice<V> valueLattice;










 










 @DontSynchronize("stateless")










 private final EdgeFunction<V> allTop;










 protected final EdgeFunction<V> allTop;










 










 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 private final List<Pair<N,D>> nodeWorklist = new LinkedList<Pair<N,D>>();










 protected final List<Pair<N,D>> nodeWorklist = new LinkedList<Pair<N,D>>();





















 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 private final Table<N,D,V> val = HashBasedTable.create(); 










 protected final Table<N,D,V> val = HashBasedTable.create(); 










 










 @DontSynchronize("benign races")










 public long flowFunctionApplicationCount;



......@@ -131,13 +131,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public long durationFlowFunctionApplication;





















 @DontSynchronize("stateless")










 private final D zeroValue;










 protected final D zeroValue;










 










 @DontSynchronize("readOnly")










 private final FlowFunctionCache<N,D,M> ffCache; 










 protected final FlowFunctionCache<N,D,M> ffCache; 





















 @DontSynchronize("readOnly")










 private final EdgeFunctionCache<N,D,M,V> efCache;










 protected final EdgeFunctionCache<N,D,M,V> efCache;





















 /**










	 * Creates a solver for the given problem, which caches flow functions and edge functions.



......












src-generic/de/bodden/ide/solver/IDESolver.java








View file @ f7c0f2f6








src-generic/de/bodden/ide/solver/IDESolver.java










View file @ f7c0f2f6


f7c0f2f6



......@@ -58,62 +58,62 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 public static CacheBuilder<Object, Object> DEFAULT_CACHE_BUILDER = CacheBuilder.newBuilder().concurrencyLevel(Runtime.getRuntime().availableProcessors()).initialCapacity(10000).softValues();










 










 private static final boolean DEBUG = false;










 protected static final boolean DEBUG = false;










 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 private ExecutorService executor;










 protected ExecutorService executor;










 










 @DontSynchronize("only used by single thread")










 private int numThreads;










 protected int numThreads;










 










 //the number of currently running tasks










 private final AtomicInteger numTasks = new AtomicInteger();










 protected final AtomicInteger numTasks = new AtomicInteger();





















 @SynchronizedBy("consistent lock on field")










 //We are using a LinkedHashSet here to enforce FIFO semantics, which leads to a breath-first construction










 //of the exploded super graph. As we observed in experiments, this can speed up the construction.










 private final Collection<PathEdge<N,D,M>> pathWorklist = new LinkedHashSet<PathEdge<N,D,M>>();










 protected final Collection<PathEdge<N,D,M>> pathWorklist = new LinkedHashSet<PathEdge<N,D,M>>();










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 private final JumpFunctions<N,D,V> jumpFn;










 protected final JumpFunctions<N,D,V> jumpFn;










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 private final SummaryFunctions<N,D,V> summaryFunctions = new SummaryFunctions<N,D,V>();










 protected final SummaryFunctions<N,D,V> summaryFunctions = new SummaryFunctions<N,D,V>();





















 @SynchronizedBy("thread safe data structure, only modified internally")










 private final I icfg;










 protected final I icfg;










 










 //stores summaries that were queried before they were computed










 //see CC 2010 paper by Naeem, Lhotak and Rodriguez










 @SynchronizedBy("consistent lock on 'incoming'")










 private final Table<N,D,Table<N,D,EdgeFunction<V>>> endSummary = HashBasedTable.create();










 protected final Table<N,D,Table<N,D,EdgeFunction<V>>> endSummary = HashBasedTable.create();





















 //edges going along calls










 //see CC 2010 paper by Naeem, Lhotak and Rodriguez










 @SynchronizedBy("consistent lock on field")










 private final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();










 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();










 










 @DontSynchronize("stateless")










 private final FlowFunctions<N, D, M> flowFunctions;










 protected final FlowFunctions<N, D, M> flowFunctions;





















 @DontSynchronize("stateless")










 private final EdgeFunctions<N,D,M,V> edgeFunctions;










 protected final EdgeFunctions<N,D,M,V> edgeFunctions;





















 @DontSynchronize("only used by single thread")










 private final Set<N> initialSeeds;










 protected final Set<N> initialSeeds;





















 @DontSynchronize("stateless")










 private final JoinLattice<V> valueLattice;










 protected final JoinLattice<V> valueLattice;










 










 @DontSynchronize("stateless")










 private final EdgeFunction<V> allTop;










 protected final EdgeFunction<V> allTop;










 










 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 private final List<Pair<N,D>> nodeWorklist = new LinkedList<Pair<N,D>>();










 protected final List<Pair<N,D>> nodeWorklist = new LinkedList<Pair<N,D>>();





















 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 private final Table<N,D,V> val = HashBasedTable.create(); 










 protected final Table<N,D,V> val = HashBasedTable.create(); 










 










 @DontSynchronize("benign races")










 public long flowFunctionApplicationCount;



......@@ -131,13 +131,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public long durationFlowFunctionApplication;





















 @DontSynchronize("stateless")










 private final D zeroValue;










 protected final D zeroValue;










 










 @DontSynchronize("readOnly")










 private final FlowFunctionCache<N,D,M> ffCache; 










 protected final FlowFunctionCache<N,D,M> ffCache; 





















 @DontSynchronize("readOnly")










 private final EdgeFunctionCache<N,D,M,V> efCache;










 protected final EdgeFunctionCache<N,D,M,V> efCache;





















 /**










	 * Creates a solver for the given problem, which caches flow functions and edge functions.



......






......@@ -58,62 +58,62 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 public static CacheBuilder<Object, Object> DEFAULT_CACHE_BUILDER = CacheBuilder.newBuilder().concurrencyLevel(Runtime.getRuntime().availableProcessors()).initialCapacity(10000).softValues();










 










 private static final boolean DEBUG = false;










 protected static final boolean DEBUG = false;










 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 private ExecutorService executor;










 protected ExecutorService executor;










 










 @DontSynchronize("only used by single thread")










 private int numThreads;










 protected int numThreads;










 










 //the number of currently running tasks










 private final AtomicInteger numTasks = new AtomicInteger();










 protected final AtomicInteger numTasks = new AtomicInteger();





















 @SynchronizedBy("consistent lock on field")










 //We are using a LinkedHashSet here to enforce FIFO semantics, which leads to a breath-first construction










 //of the exploded super graph. As we observed in experiments, this can speed up the construction.










 private final Collection<PathEdge<N,D,M>> pathWorklist = new LinkedHashSet<PathEdge<N,D,M>>();










 protected final Collection<PathEdge<N,D,M>> pathWorklist = new LinkedHashSet<PathEdge<N,D,M>>();










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 private final JumpFunctions<N,D,V> jumpFn;










 protected final JumpFunctions<N,D,V> jumpFn;










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 private final SummaryFunctions<N,D,V> summaryFunctions = new SummaryFunctions<N,D,V>();










 protected final SummaryFunctions<N,D,V> summaryFunctions = new SummaryFunctions<N,D,V>();





















 @SynchronizedBy("thread safe data structure, only modified internally")










 private final I icfg;










 protected final I icfg;










 










 //stores summaries that were queried before they were computed










 //see CC 2010 paper by Naeem, Lhotak and Rodriguez










 @SynchronizedBy("consistent lock on 'incoming'")










 private final Table<N,D,Table<N,D,EdgeFunction<V>>> endSummary = HashBasedTable.create();










 protected final Table<N,D,Table<N,D,EdgeFunction<V>>> endSummary = HashBasedTable.create();





















 //edges going along calls










 //see CC 2010 paper by Naeem, Lhotak and Rodriguez










 @SynchronizedBy("consistent lock on field")










 private final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();










 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();










 










 @DontSynchronize("stateless")










 private final FlowFunctions<N, D, M> flowFunctions;










 protected final FlowFunctions<N, D, M> flowFunctions;





















 @DontSynchronize("stateless")










 private final EdgeFunctions<N,D,M,V> edgeFunctions;










 protected final EdgeFunctions<N,D,M,V> edgeFunctions;





















 @DontSynchronize("only used by single thread")










 private final Set<N> initialSeeds;










 protected final Set<N> initialSeeds;





















 @DontSynchronize("stateless")










 private final JoinLattice<V> valueLattice;










 protected final JoinLattice<V> valueLattice;










 










 @DontSynchronize("stateless")










 private final EdgeFunction<V> allTop;










 protected final EdgeFunction<V> allTop;










 










 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 private final List<Pair<N,D>> nodeWorklist = new LinkedList<Pair<N,D>>();










 protected final List<Pair<N,D>> nodeWorklist = new LinkedList<Pair<N,D>>();





















 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 private final Table<N,D,V> val = HashBasedTable.create(); 










 protected final Table<N,D,V> val = HashBasedTable.create(); 










 










 @DontSynchronize("benign races")










 public long flowFunctionApplicationCount;



......@@ -131,13 +131,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public long durationFlowFunctionApplication;





















 @DontSynchronize("stateless")










 private final D zeroValue;










 protected final D zeroValue;










 










 @DontSynchronize("readOnly")










 private final FlowFunctionCache<N,D,M> ffCache; 










 protected final FlowFunctionCache<N,D,M> ffCache; 





















 @DontSynchronize("readOnly")










 private final EdgeFunctionCache<N,D,M,V> efCache;










 protected final EdgeFunctionCache<N,D,M,V> efCache;





















 /**










	 * Creates a solver for the given problem, which caches flow functions and edge functions.



......


  public static CacheBuilder<Object, Object> DEFAULT_CACHE_BUILDER = CacheBuilder.newBuilder().concurrencyLevel(Runtime.getRuntime().availableProcessors()).initialCapacity(10000).softValues();publicstaticCacheBuilder<Object,Object>DEFAULT_CACHE_BUILDER=CacheBuilder.newBuilder().concurrencyLevel(Runtime.getRuntime().availableProcessors()).initialCapacity(10000).softValues();  private static final boolean DEBUG = false;privateivatestaticfinalbooleanDEBUG=false; protected static final boolean DEBUG = false;protectedotectedstaticfinalbooleanDEBUG=false;  //executor for dispatching individual compute jobs (may be multi-threaded)//executor for dispatching individual compute jobs (may be multi-threaded) @DontSynchronize("only used by single thread")@DontSynchronize("only used by single thread") private ExecutorService executor;privateivateExecutorServiceexecutor; protected ExecutorService executor;protectedotectedExecutorServiceexecutor;  @DontSynchronize("only used by single thread")@DontSynchronize("only used by single thread") private int numThreads;privateivateintnumThreads; protected int numThreads;protectedotectedintnumThreads;  //the number of currently running tasks//the number of currently running tasks private final AtomicInteger numTasks = new AtomicInteger();privateivatefinalAtomicIntegernumTasks=newAtomicInteger(); protected final AtomicInteger numTasks = new AtomicInteger();protectedotectedfinalAtomicIntegernumTasks=newAtomicInteger(); @SynchronizedBy("consistent lock on field")@SynchronizedBy("consistent lock on field") //We are using a LinkedHashSet here to enforce FIFO semantics, which leads to a breath-first construction//We are using a LinkedHashSet here to enforce FIFO semantics, which leads to a breath-first construction //of the exploded super graph. As we observed in experiments, this can speed up the construction.//of the exploded super graph. As we observed in experiments, this can speed up the construction. private final Collection<PathEdge<N,D,M>> pathWorklist = new LinkedHashSet<PathEdge<N,D,M>>();privateivatefinalCollection<PathEdge<N,D,M>>pathWorklist=newLinkedHashSet<PathEdge<N,D,M>>(); protected final Collection<PathEdge<N,D,M>> pathWorklist = new LinkedHashSet<PathEdge<N,D,M>>();protectedotectedfinalCollection<PathEdge<N,D,M>>pathWorklist=newLinkedHashSet<PathEdge<N,D,M>>();  @SynchronizedBy("thread safe data structure, consistent locking when used")@SynchronizedBy("thread safe data structure, consistent locking when used") private final JumpFunctions<N,D,V> jumpFn;privateivatefinalJumpFunctions<N,D,V>jumpFn; protected final JumpFunctions<N,D,V> jumpFn;protectedotectedfinalJumpFunctions<N,D,V>jumpFn;  @SynchronizedBy("thread safe data structure, consistent locking when used")@SynchronizedBy("thread safe data structure, consistent locking when used") private final SummaryFunctions<N,D,V> summaryFunctions = new SummaryFunctions<N,D,V>();privateivatefinalSummaryFunctions<N,D,V>summaryFunctions=newSummaryFunctions<N,D,V>(); protected final SummaryFunctions<N,D,V> summaryFunctions = new SummaryFunctions<N,D,V>();protectedotectedfinalSummaryFunctions<N,D,V>summaryFunctions=newSummaryFunctions<N,D,V>(); @SynchronizedBy("thread safe data structure, only modified internally")@SynchronizedBy("thread safe data structure, only modified internally") private final I icfg;privateivatefinalIicfg; protected final I icfg;protectedotectedfinalIicfg;  //stores summaries that were queried before they were computed//stores summaries that were queried before they were computed //see CC 2010 paper by Naeem, Lhotak and Rodriguez//see CC 2010 paper by Naeem, Lhotak and Rodriguez @SynchronizedBy("consistent lock on 'incoming'")@SynchronizedBy("consistent lock on 'incoming'") private final Table<N,D,Table<N,D,EdgeFunction<V>>> endSummary = HashBasedTable.create();privateivatefinalTable<N,D,Table<N,D,EdgeFunction<V>>>endSummary=HashBasedTable.create(); protected final Table<N,D,Table<N,D,EdgeFunction<V>>> endSummary = HashBasedTable.create();protectedotectedfinalTable<N,D,Table<N,D,EdgeFunction<V>>>endSummary=HashBasedTable.create(); //edges going along calls//edges going along calls //see CC 2010 paper by Naeem, Lhotak and Rodriguez//see CC 2010 paper by Naeem, Lhotak and Rodriguez @SynchronizedBy("consistent lock on field")@SynchronizedBy("consistent lock on field") private final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();privateivatefinalTable<N,D,Map<N,Set<D>>>incoming=HashBasedTable.create(); protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();protectedotectedfinalTable<N,D,Map<N,Set<D>>>incoming=HashBasedTable.create();  @DontSynchronize("stateless")@DontSynchronize("stateless") private final FlowFunctions<N, D, M> flowFunctions;privateivatefinalFlowFunctions<N,D,M>flowFunctions; protected final FlowFunctions<N, D, M> flowFunctions;protectedotectedfinalFlowFunctions<N,D,M>flowFunctions; @DontSynchronize("stateless")@DontSynchronize("stateless") private final EdgeFunctions<N,D,M,V> edgeFunctions;privateivatefinalEdgeFunctions<N,D,M,V>edgeFunctions; protected final EdgeFunctions<N,D,M,V> edgeFunctions;protectedotectedfinalEdgeFunctions<N,D,M,V>edgeFunctions; @DontSynchronize("only used by single thread")@DontSynchronize("only used by single thread") private final Set<N> initialSeeds;privateivatefinalSet<N>initialSeeds; protected final Set<N> initialSeeds;protectedotectedfinalSet<N>initialSeeds; @DontSynchronize("stateless")@DontSynchronize("stateless") private final JoinLattice<V> valueLattice;privateivatefinalJoinLattice<V>valueLattice; protected final JoinLattice<V> valueLattice;protectedotectedfinalJoinLattice<V>valueLattice;  @DontSynchronize("stateless")@DontSynchronize("stateless") private final EdgeFunction<V> allTop;privateivatefinalEdgeFunction<V>allTop; protected final EdgeFunction<V> allTop;protectedotectedfinalEdgeFunction<V>allTop;  @DontSynchronize("only used by single thread - phase II not parallelized (yet)")@DontSynchronize("only used by single thread - phase II not parallelized (yet)") private final List<Pair<N,D>> nodeWorklist = new LinkedList<Pair<N,D>>();privateivatefinalList<Pair<N,D>>nodeWorklist=newLinkedList<Pair<N,D>>(); protected final List<Pair<N,D>> nodeWorklist = new LinkedList<Pair<N,D>>();protectedotectedfinalList<Pair<N,D>>nodeWorklist=newLinkedList<Pair<N,D>>(); @DontSynchronize("only used by single thread - phase II not parallelized (yet)")@DontSynchronize("only used by single thread - phase II not parallelized (yet)") private final Table<N,D,V> val = HashBasedTable.create(); privateivatefinalTable<N,D,V>val=HashBasedTable.create(); protected final Table<N,D,V> val = HashBasedTable.create(); protectedotectedfinalTable<N,D,V>val=HashBasedTable.create();  @DontSynchronize("benign races")@DontSynchronize("benign races") public long flowFunctionApplicationCount;publiclongflowFunctionApplicationCount; public long durationFlowFunctionApplication;publiclongdurationFlowFunctionApplication; @DontSynchronize("stateless")@DontSynchronize("stateless") private final D zeroValue;privateivatefinalDzeroValue; protected final D zeroValue;protectedotectedfinalDzeroValue;  @DontSynchronize("readOnly")@DontSynchronize("readOnly") private final FlowFunctionCache<N,D,M> ffCache; privateivatefinalFlowFunctionCache<N,D,M>ffCache; protected final FlowFunctionCache<N,D,M> ffCache; protectedotectedfinalFlowFunctionCache<N,D,M>ffCache; @DontSynchronize("readOnly")@DontSynchronize("readOnly") private final EdgeFunctionCache<N,D,M,V> efCache;privateivatefinalEdgeFunctionCache<N,D,M,V>efCache; protected final EdgeFunctionCache<N,D,M,V> efCache;protectedotectedfinalEdgeFunctionCache<N,D,M,V>efCache; /**/**	 * Creates a solver for the given problem, which caches flow functions and edge functions.	 * Creates a solver for the given problem, which caches flow functions and edge functions.








src-soot/soot/jimple/toolkits/ide/JimpleIDESolver.java



0 â†’ 100644







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IDESolver;





















public class JimpleIDESolver<D, V> extends IDESolver<Unit, D, SootMethod, V, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, V> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}












src-soot/soot/jimple/toolkits/ide/JimpleIDESolver.java



0 â†’ 100644







View file @ f7c0f2f6








src-soot/soot/jimple/toolkits/ide/JimpleIDESolver.java



0 â†’ 100644









View file @ f7c0f2f6


f7c0f2f6










package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IDESolver;





















public class JimpleIDESolver<D, V> extends IDESolver<Unit, D, SootMethod, V, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, V> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}













package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IDESolver;





















public class JimpleIDESolver<D, V> extends IDESolver<Unit, D, SootMethod, V, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, V> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}


package soot.jimple.toolkits.ide;packagesoot.jimple.toolkits.ide;import java.io.FileNotFoundException;importjava.io.FileNotFoundException;import java.io.FileOutputStream;importjava.io.FileOutputStream;import java.io.PrintWriter;importjava.io.PrintWriter;import java.util.ArrayList;importjava.util.ArrayList;import java.util.Collections;importjava.util.Collections;import java.util.List;importjava.util.List;import soot.PatchingChain;importsoot.PatchingChain;import soot.SootMethod;importsoot.SootMethod;import soot.Unit;importsoot.Unit;import com.google.common.collect.Table.Cell;importcom.google.common.collect.Table.Cell;import de.bodden.ide.InterproceduralCFG;importde.bodden.ide.InterproceduralCFG;import de.bodden.ide.solver.IDESolver;importde.bodden.ide.solver.IDESolver;public class JimpleIDESolver<D, V> extends IDESolver<Unit, D, SootMethod, V, InterproceduralCFG<Unit,SootMethod>> {publicclassJimpleIDESolver<D,V>extendsIDESolver<Unit,D,SootMethod,V,InterproceduralCFG<Unit,SootMethod>>{ private final boolean DUMP_RESULTS;privatefinalbooleanDUMP_RESULTS; public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem) {publicJimpleIDESolver(DefaultJimpleIDETabulationProblem<D,V,InterproceduralCFG<Unit,SootMethod>>problem){ this(problem,false);this(problem,false); }}  public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {publicJimpleIDESolver(DefaultJimpleIDETabulationProblem<D,V,InterproceduralCFG<Unit,SootMethod>>problem,booleandumpResults){ super(problem);super(problem); this.DUMP_RESULTS = dumpResults;this.DUMP_RESULTS=dumpResults; }}  @Override@Override public void solve(int numThreads) {publicvoidsolve(intnumThreads){ super.solve(numThreads);super.solve(numThreads); if(DUMP_RESULTS)if(DUMP_RESULTS) dumpResults();dumpResults(); }}  public void dumpResults() {publicvoiddumpResults(){ try {try{ PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));PrintWriterout=newPrintWriter(newFileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv")); List<String> res = new ArrayList<String>();List<String>res=newArrayList<String>(); for(Cell<Unit, D, V> entry: val.cellSet()) {for(Cell<Unit,D,V>entry:val.cellSet()){ SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());SootMethodmethodOf=(SootMethod)icfg.getMethodOf(entry.getRowKey()); PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();PatchingChain<Unit>units=methodOf.getActiveBody().getUnits(); int i=0;inti=0; for (Unit unit : units) {for(Unitunit:units){ if(unit==entry.getRowKey())if(unit==entry.getRowKey()) break;break; i++;i++; }} res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue()); }} Collections.sort(res);Collections.sort(res); for (String string : res) {for(Stringstring:res){ out.println(string);out.println(string); }} out.flush();out.flush(); out.close();out.close(); } catch (FileNotFoundException e) {}catch(FileNotFoundExceptione){ e.printStackTrace();e.printStackTrace(); }} }}}}








src-soot/soot/jimple/toolkits/ide/JimpleIFDSSolver.java



0 â†’ 100644







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IFDSSolver;





















public class JimpleIFDSSolver<D, V> extends IFDSSolver<Unit, D, SootMethod, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, ?> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}












src-soot/soot/jimple/toolkits/ide/JimpleIFDSSolver.java



0 â†’ 100644







View file @ f7c0f2f6








src-soot/soot/jimple/toolkits/ide/JimpleIFDSSolver.java



0 â†’ 100644









View file @ f7c0f2f6


f7c0f2f6










package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IFDSSolver;





















public class JimpleIFDSSolver<D, V> extends IFDSSolver<Unit, D, SootMethod, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, ?> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}













package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IFDSSolver;





















public class JimpleIFDSSolver<D, V> extends IFDSSolver<Unit, D, SootMethod, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, ?> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}


package soot.jimple.toolkits.ide;packagesoot.jimple.toolkits.ide;import java.io.FileNotFoundException;importjava.io.FileNotFoundException;import java.io.FileOutputStream;importjava.io.FileOutputStream;import java.io.PrintWriter;importjava.io.PrintWriter;import java.util.ArrayList;importjava.util.ArrayList;import java.util.Collections;importjava.util.Collections;import java.util.List;importjava.util.List;import soot.PatchingChain;importsoot.PatchingChain;import soot.SootMethod;importsoot.SootMethod;import soot.Unit;importsoot.Unit;import com.google.common.collect.Table.Cell;importcom.google.common.collect.Table.Cell;import de.bodden.ide.InterproceduralCFG;importde.bodden.ide.InterproceduralCFG;import de.bodden.ide.solver.IFDSSolver;importde.bodden.ide.solver.IFDSSolver;public class JimpleIFDSSolver<D, V> extends IFDSSolver<Unit, D, SootMethod, InterproceduralCFG<Unit,SootMethod>> {publicclassJimpleIFDSSolver<D,V>extendsIFDSSolver<Unit,D,SootMethod,InterproceduralCFG<Unit,SootMethod>>{ private final boolean DUMP_RESULTS;privatefinalbooleanDUMP_RESULTS; public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem) {publicJimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D,InterproceduralCFG<Unit,SootMethod>>problem){ this(problem,false);this(problem,false); }}  public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {publicJimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D,InterproceduralCFG<Unit,SootMethod>>problem,booleandumpResults){ super(problem);super(problem); this.DUMP_RESULTS = dumpResults;this.DUMP_RESULTS=dumpResults; }}  @Override@Override public void solve(int numThreads) {publicvoidsolve(intnumThreads){ super.solve(numThreads);super.solve(numThreads); if(DUMP_RESULTS)if(DUMP_RESULTS) dumpResults();dumpResults(); }}  public void dumpResults() {publicvoiddumpResults(){ try {try{ PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));PrintWriterout=newPrintWriter(newFileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv")); List<String> res = new ArrayList<String>();List<String>res=newArrayList<String>(); for(Cell<Unit, D, ?> entry: val.cellSet()) {for(Cell<Unit,D,?>entry:val.cellSet()){ SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());SootMethodmethodOf=(SootMethod)icfg.getMethodOf(entry.getRowKey()); PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();PatchingChain<Unit>units=methodOf.getActiveBody().getUnits(); int i=0;inti=0; for (Unit unit : units) {for(Unitunit:units){ if(unit==entry.getRowKey())if(unit==entry.getRowKey()) break;break; i++;i++; }} res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue()); }} Collections.sort(res);Collections.sort(res); for (String string : res) {for(Stringstring:res){ out.println(string);out.println(string); }} out.flush();out.flush(); out.close();out.close(); } catch (FileNotFoundException e) {}catch(FileNotFoundExceptione){ e.printStackTrace();e.printStackTrace(); }} }}}}









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






