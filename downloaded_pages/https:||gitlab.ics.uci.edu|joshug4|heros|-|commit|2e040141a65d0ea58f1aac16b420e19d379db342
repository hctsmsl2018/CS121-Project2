



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

2e040141















Commit
2e040141


authored
Jan 26, 2015
by


Eric Bodden



Browse files




Final (?) fix for fix intended in 5b67f79d


It turns out that for value computation we only need to store the return sites to which we return in an unbalanced way. Then, at these sites, we *always* look up the edge function that goes to this site from the method's start point and the ZERO node! Previously, we did the look not using the ZERO node but using the original source of the path edge in the callee, which is wrong. Fortunately, the fix also makes for an easier implementation.






parent
73de2861













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 2e040141






......@@ -34,6 +34,7 @@ import java.util.HashSet;









import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentHashMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;














......@@ -94,10 +95,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 @SynchronizedBy("consistent lock on field")










 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();





















 //stores the initial values that are propagated into callers independent bottom up,










 //stores the return sites (inside callers) to which we have unbalanced returns










 //if followReturnPastSeeds is enabled










 @SynchronizedBy("consistent lock on field")










 protected final Map<N,Set<D>> callerSeeds;










 @SynchronizedBy("use of ConcurrentHashMap")










 protected final Set<N> unbalancedRetSites;





















 @DontSynchronize("stateless")










 protected final FlowFunctions<N, D, M> flowFunctions;



......@@ -188,7 +189,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 this.flowFunctions = flowFunctions;










 this.edgeFunctions = edgeFunctions;










 this.initialSeeds = tabulationProblem.initialSeeds();










 this.callerSeeds = new HashMap<N, Set<D>>();










 this.unbalancedRetSites = Collections.newSetFromMap(new ConcurrentHashMap<N, Boolean>());










 this.valueLattice = tabulationProblem.joinLattice();










 this.allTop = tabulationProblem.allTopFunction();










 this.jumpFn = new JumpFunctions<N,D,V>(allTop);



......@@ -493,14 +494,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);










 //register for value processing (2nd IDE phase)










 synchronized (callerSeeds) {










 Set<D> oldCallerSeeds = callerSeeds.get(retSiteC);










 if(oldCallerSeeds==null) {










 oldCallerSeeds = new HashSet<D>();










 callerSeeds.put(retSiteC, oldCallerSeeds);










 }










 oldCallerSeeds.add(d5);










 }










 unbalancedRetSites.add(retSiteC);










 }










 }










 }



......@@ -635,16 +629,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 private void computeValues() { 










 //Phase II(i)










 logger.debug("Computing the final values for the edge functions");










 //union of initial seeds and caller seeds










 //add caller seeds to initial seeds in an unbalanced problem










 Map<N, Set<D>> allSeeds = new HashMap<N, Set<D>>(initialSeeds);










 for(Entry<N, Set<D>> seed: callerSeeds.entrySet()) {










 Set<D> existing = allSeeds.get(seed.getKey());










 if(existing!=null) {










 existing.addAll(seed.getValue());










 } else {










 allSeeds.put(seed.getKey(), seed.getValue());










 }










 }










 for(N unbalancedRetSite: unbalancedRetSites) {










 Set<D> seeds = allSeeds.get(unbalancedRetSite);










 if(seeds==null) {










 seeds = new HashSet<D>();










 allSeeds.put(unbalancedRetSite, seeds);










 }










 seeds.add(zeroValue);










 }










 //do processing










 for(Entry<N, Set<D>> seed: allSeeds.entrySet()) {










 N startPoint = seed.getKey();



......@@ -883,8 +877,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.containsKey(n) || //our initial seeds are not necessarily method-start points but here they should be treated as such










 callerSeeds.containsKey(n)) { //the same also for "caller seeds" in case of an unbalanced problem










 initialSeeds.containsKey(n) ||  //our initial seeds are not necessarily method-start points but here they should be treated as such










 unbalancedRetSites.contains(n)) { //the same also for unbalanced return sites in an unbalanced problem










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

2e040141















Commit
2e040141


authored
Jan 26, 2015
by


Eric Bodden



Browse files




Final (?) fix for fix intended in 5b67f79d


It turns out that for value computation we only need to store the return sites to which we return in an unbalanced way. Then, at these sites, we *always* look up the edge function that goes to this site from the method's start point and the ZERO node! Previously, we did the look not using the ZERO node but using the original source of the path edge in the callee, which is wrong. Fortunately, the fix also makes for an easier implementation.






parent
73de2861













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 2e040141






......@@ -34,6 +34,7 @@ import java.util.HashSet;









import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentHashMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;














......@@ -94,10 +95,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 @SynchronizedBy("consistent lock on field")










 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();





















 //stores the initial values that are propagated into callers independent bottom up,










 //stores the return sites (inside callers) to which we have unbalanced returns










 //if followReturnPastSeeds is enabled










 @SynchronizedBy("consistent lock on field")










 protected final Map<N,Set<D>> callerSeeds;










 @SynchronizedBy("use of ConcurrentHashMap")










 protected final Set<N> unbalancedRetSites;





















 @DontSynchronize("stateless")










 protected final FlowFunctions<N, D, M> flowFunctions;



......@@ -188,7 +189,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 this.flowFunctions = flowFunctions;










 this.edgeFunctions = edgeFunctions;










 this.initialSeeds = tabulationProblem.initialSeeds();










 this.callerSeeds = new HashMap<N, Set<D>>();










 this.unbalancedRetSites = Collections.newSetFromMap(new ConcurrentHashMap<N, Boolean>());










 this.valueLattice = tabulationProblem.joinLattice();










 this.allTop = tabulationProblem.allTopFunction();










 this.jumpFn = new JumpFunctions<N,D,V>(allTop);



......@@ -493,14 +494,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);










 //register for value processing (2nd IDE phase)










 synchronized (callerSeeds) {










 Set<D> oldCallerSeeds = callerSeeds.get(retSiteC);










 if(oldCallerSeeds==null) {










 oldCallerSeeds = new HashSet<D>();










 callerSeeds.put(retSiteC, oldCallerSeeds);










 }










 oldCallerSeeds.add(d5);










 }










 unbalancedRetSites.add(retSiteC);










 }










 }










 }



......@@ -635,16 +629,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 private void computeValues() { 










 //Phase II(i)










 logger.debug("Computing the final values for the edge functions");










 //union of initial seeds and caller seeds










 //add caller seeds to initial seeds in an unbalanced problem










 Map<N, Set<D>> allSeeds = new HashMap<N, Set<D>>(initialSeeds);










 for(Entry<N, Set<D>> seed: callerSeeds.entrySet()) {










 Set<D> existing = allSeeds.get(seed.getKey());










 if(existing!=null) {










 existing.addAll(seed.getValue());










 } else {










 allSeeds.put(seed.getKey(), seed.getValue());










 }










 }










 for(N unbalancedRetSite: unbalancedRetSites) {










 Set<D> seeds = allSeeds.get(unbalancedRetSite);










 if(seeds==null) {










 seeds = new HashSet<D>();










 allSeeds.put(unbalancedRetSite, seeds);










 }










 seeds.add(zeroValue);










 }










 //do processing










 for(Entry<N, Set<D>> seed: allSeeds.entrySet()) {










 N startPoint = seed.getKey();



......@@ -883,8 +877,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.containsKey(n) || //our initial seeds are not necessarily method-start points but here they should be treated as such










 callerSeeds.containsKey(n)) { //the same also for "caller seeds" in case of an unbalanced problem










 initialSeeds.containsKey(n) ||  //our initial seeds are not necessarily method-start points but here they should be treated as such










 unbalancedRetSites.contains(n)) { //the same also for unbalanced return sites in an unbalanced problem










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

2e040141







Open sidebar



Joshua Garcia heros
Commits

2e040141




Open sidebar

Joshua Garcia heros
Commits

2e040141


Joshua GarciaherosherosCommits
2e040141








Commit
2e040141


authored
Jan 26, 2015
by


Eric Bodden



Browse files




Final (?) fix for fix intended in 5b67f79d


It turns out that for value computation we only need to store the return sites to which we return in an unbalanced way. Then, at these sites, we *always* look up the edge function that goes to this site from the method's start point and the ZERO node! Previously, we did the look not using the ZERO node but using the original source of the path edge in the callee, which is wrong. Fortunately, the fix also makes for an easier implementation.






parent
73de2861













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 2e040141






......@@ -34,6 +34,7 @@ import java.util.HashSet;









import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentHashMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;














......@@ -94,10 +95,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 @SynchronizedBy("consistent lock on field")










 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();





















 //stores the initial values that are propagated into callers independent bottom up,










 //stores the return sites (inside callers) to which we have unbalanced returns










 //if followReturnPastSeeds is enabled










 @SynchronizedBy("consistent lock on field")










 protected final Map<N,Set<D>> callerSeeds;










 @SynchronizedBy("use of ConcurrentHashMap")










 protected final Set<N> unbalancedRetSites;





















 @DontSynchronize("stateless")










 protected final FlowFunctions<N, D, M> flowFunctions;



......@@ -188,7 +189,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 this.flowFunctions = flowFunctions;










 this.edgeFunctions = edgeFunctions;










 this.initialSeeds = tabulationProblem.initialSeeds();










 this.callerSeeds = new HashMap<N, Set<D>>();










 this.unbalancedRetSites = Collections.newSetFromMap(new ConcurrentHashMap<N, Boolean>());










 this.valueLattice = tabulationProblem.joinLattice();










 this.allTop = tabulationProblem.allTopFunction();










 this.jumpFn = new JumpFunctions<N,D,V>(allTop);



......@@ -493,14 +494,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);










 //register for value processing (2nd IDE phase)










 synchronized (callerSeeds) {










 Set<D> oldCallerSeeds = callerSeeds.get(retSiteC);










 if(oldCallerSeeds==null) {










 oldCallerSeeds = new HashSet<D>();










 callerSeeds.put(retSiteC, oldCallerSeeds);










 }










 oldCallerSeeds.add(d5);










 }










 unbalancedRetSites.add(retSiteC);










 }










 }










 }



......@@ -635,16 +629,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 private void computeValues() { 










 //Phase II(i)










 logger.debug("Computing the final values for the edge functions");










 //union of initial seeds and caller seeds










 //add caller seeds to initial seeds in an unbalanced problem










 Map<N, Set<D>> allSeeds = new HashMap<N, Set<D>>(initialSeeds);










 for(Entry<N, Set<D>> seed: callerSeeds.entrySet()) {










 Set<D> existing = allSeeds.get(seed.getKey());










 if(existing!=null) {










 existing.addAll(seed.getValue());










 } else {










 allSeeds.put(seed.getKey(), seed.getValue());










 }










 }










 for(N unbalancedRetSite: unbalancedRetSites) {










 Set<D> seeds = allSeeds.get(unbalancedRetSite);










 if(seeds==null) {










 seeds = new HashSet<D>();










 allSeeds.put(unbalancedRetSite, seeds);










 }










 seeds.add(zeroValue);










 }










 //do processing










 for(Entry<N, Set<D>> seed: allSeeds.entrySet()) {










 N startPoint = seed.getKey();



......@@ -883,8 +877,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.containsKey(n) || //our initial seeds are not necessarily method-start points but here they should be treated as such










 callerSeeds.containsKey(n)) { //the same also for "caller seeds" in case of an unbalanced problem










 initialSeeds.containsKey(n) ||  //our initial seeds are not necessarily method-start points but here they should be treated as such










 unbalancedRetSites.contains(n)) { //the same also for unbalanced return sites in an unbalanced problem










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
2e040141


authored
Jan 26, 2015
by


Eric Bodden



Browse files




Final (?) fix for fix intended in 5b67f79d


It turns out that for value computation we only need to store the return sites to which we return in an unbalanced way. Then, at these sites, we *always* look up the edge function that goes to this site from the method's start point and the ZERO node! Previously, we did the look not using the ZERO node but using the original source of the path edge in the callee, which is wrong. Fortunately, the fix also makes for an easier implementation.






parent
73de2861













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 2e040141






......@@ -34,6 +34,7 @@ import java.util.HashSet;









import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentHashMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;














......@@ -94,10 +95,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 @SynchronizedBy("consistent lock on field")










 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();





















 //stores the initial values that are propagated into callers independent bottom up,










 //stores the return sites (inside callers) to which we have unbalanced returns










 //if followReturnPastSeeds is enabled










 @SynchronizedBy("consistent lock on field")










 protected final Map<N,Set<D>> callerSeeds;










 @SynchronizedBy("use of ConcurrentHashMap")










 protected final Set<N> unbalancedRetSites;





















 @DontSynchronize("stateless")










 protected final FlowFunctions<N, D, M> flowFunctions;



......@@ -188,7 +189,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 this.flowFunctions = flowFunctions;










 this.edgeFunctions = edgeFunctions;










 this.initialSeeds = tabulationProblem.initialSeeds();










 this.callerSeeds = new HashMap<N, Set<D>>();










 this.unbalancedRetSites = Collections.newSetFromMap(new ConcurrentHashMap<N, Boolean>());










 this.valueLattice = tabulationProblem.joinLattice();










 this.allTop = tabulationProblem.allTopFunction();










 this.jumpFn = new JumpFunctions<N,D,V>(allTop);



......@@ -493,14 +494,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);










 //register for value processing (2nd IDE phase)










 synchronized (callerSeeds) {










 Set<D> oldCallerSeeds = callerSeeds.get(retSiteC);










 if(oldCallerSeeds==null) {










 oldCallerSeeds = new HashSet<D>();










 callerSeeds.put(retSiteC, oldCallerSeeds);










 }










 oldCallerSeeds.add(d5);










 }










 unbalancedRetSites.add(retSiteC);










 }










 }










 }



......@@ -635,16 +629,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 private void computeValues() { 










 //Phase II(i)










 logger.debug("Computing the final values for the edge functions");










 //union of initial seeds and caller seeds










 //add caller seeds to initial seeds in an unbalanced problem










 Map<N, Set<D>> allSeeds = new HashMap<N, Set<D>>(initialSeeds);










 for(Entry<N, Set<D>> seed: callerSeeds.entrySet()) {










 Set<D> existing = allSeeds.get(seed.getKey());










 if(existing!=null) {










 existing.addAll(seed.getValue());










 } else {










 allSeeds.put(seed.getKey(), seed.getValue());










 }










 }










 for(N unbalancedRetSite: unbalancedRetSites) {










 Set<D> seeds = allSeeds.get(unbalancedRetSite);










 if(seeds==null) {










 seeds = new HashSet<D>();










 allSeeds.put(unbalancedRetSite, seeds);










 }










 seeds.add(zeroValue);










 }










 //do processing










 for(Entry<N, Set<D>> seed: allSeeds.entrySet()) {










 N startPoint = seed.getKey();



......@@ -883,8 +877,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.containsKey(n) || //our initial seeds are not necessarily method-start points but here they should be treated as such










 callerSeeds.containsKey(n)) { //the same also for "caller seeds" in case of an unbalanced problem










 initialSeeds.containsKey(n) ||  //our initial seeds are not necessarily method-start points but here they should be treated as such










 unbalancedRetSites.contains(n)) { //the same also for unbalanced return sites in an unbalanced problem










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
2e040141


authored
Jan 26, 2015
by


Eric Bodden



Browse files



Commit
2e040141


authored
Jan 26, 2015
by


Eric Bodden

2e040141authoredbyEric Bodden

Final (?) fix for fix intended in 5b67f79d


It turns out that for value computation we only need to store the return sites to which we return in an unbalanced way. Then, at these sites, we *always* look up the edge function that goes to this site from the method's start point and the ZERO node! Previously, we did the look not using the ZERO node but using the original source of the path edge in the callee, which is wrong. Fortunately, the fix also makes for an easier implementation.





parent
73de2861
















parent
73de2861





parent












Changes
1
1


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/solver/IDESolver.java








View file @ 2e040141






......@@ -34,6 +34,7 @@ import java.util.HashSet;









import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentHashMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;














......@@ -94,10 +95,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 @SynchronizedBy("consistent lock on field")










 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();





















 //stores the initial values that are propagated into callers independent bottom up,










 //stores the return sites (inside callers) to which we have unbalanced returns










 //if followReturnPastSeeds is enabled










 @SynchronizedBy("consistent lock on field")










 protected final Map<N,Set<D>> callerSeeds;










 @SynchronizedBy("use of ConcurrentHashMap")










 protected final Set<N> unbalancedRetSites;





















 @DontSynchronize("stateless")










 protected final FlowFunctions<N, D, M> flowFunctions;



......@@ -188,7 +189,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 this.flowFunctions = flowFunctions;










 this.edgeFunctions = edgeFunctions;










 this.initialSeeds = tabulationProblem.initialSeeds();










 this.callerSeeds = new HashMap<N, Set<D>>();










 this.unbalancedRetSites = Collections.newSetFromMap(new ConcurrentHashMap<N, Boolean>());










 this.valueLattice = tabulationProblem.joinLattice();










 this.allTop = tabulationProblem.allTopFunction();










 this.jumpFn = new JumpFunctions<N,D,V>(allTop);



......@@ -493,14 +494,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);










 //register for value processing (2nd IDE phase)










 synchronized (callerSeeds) {










 Set<D> oldCallerSeeds = callerSeeds.get(retSiteC);










 if(oldCallerSeeds==null) {










 oldCallerSeeds = new HashSet<D>();










 callerSeeds.put(retSiteC, oldCallerSeeds);










 }










 oldCallerSeeds.add(d5);










 }










 unbalancedRetSites.add(retSiteC);










 }










 }










 }



......@@ -635,16 +629,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 private void computeValues() { 










 //Phase II(i)










 logger.debug("Computing the final values for the edge functions");










 //union of initial seeds and caller seeds










 //add caller seeds to initial seeds in an unbalanced problem










 Map<N, Set<D>> allSeeds = new HashMap<N, Set<D>>(initialSeeds);










 for(Entry<N, Set<D>> seed: callerSeeds.entrySet()) {










 Set<D> existing = allSeeds.get(seed.getKey());










 if(existing!=null) {










 existing.addAll(seed.getValue());










 } else {










 allSeeds.put(seed.getKey(), seed.getValue());










 }










 }










 for(N unbalancedRetSite: unbalancedRetSites) {










 Set<D> seeds = allSeeds.get(unbalancedRetSite);










 if(seeds==null) {










 seeds = new HashSet<D>();










 allSeeds.put(unbalancedRetSite, seeds);










 }










 seeds.add(zeroValue);










 }










 //do processing










 for(Entry<N, Set<D>> seed: allSeeds.entrySet()) {










 N startPoint = seed.getKey();



......@@ -883,8 +877,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.containsKey(n) || //our initial seeds are not necessarily method-start points but here they should be treated as such










 callerSeeds.containsKey(n)) { //the same also for "caller seeds" in case of an unbalanced problem










 initialSeeds.containsKey(n) ||  //our initial seeds are not necessarily method-start points but here they should be treated as such










 unbalancedRetSites.contains(n)) { //the same also for unbalanced return sites in an unbalanced problem










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......














src/heros/solver/IDESolver.java








View file @ 2e040141






......@@ -34,6 +34,7 @@ import java.util.HashSet;









import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentHashMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;














......@@ -94,10 +95,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 @SynchronizedBy("consistent lock on field")










 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();





















 //stores the initial values that are propagated into callers independent bottom up,










 //stores the return sites (inside callers) to which we have unbalanced returns










 //if followReturnPastSeeds is enabled










 @SynchronizedBy("consistent lock on field")










 protected final Map<N,Set<D>> callerSeeds;










 @SynchronizedBy("use of ConcurrentHashMap")










 protected final Set<N> unbalancedRetSites;





















 @DontSynchronize("stateless")










 protected final FlowFunctions<N, D, M> flowFunctions;



......@@ -188,7 +189,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 this.flowFunctions = flowFunctions;










 this.edgeFunctions = edgeFunctions;










 this.initialSeeds = tabulationProblem.initialSeeds();










 this.callerSeeds = new HashMap<N, Set<D>>();










 this.unbalancedRetSites = Collections.newSetFromMap(new ConcurrentHashMap<N, Boolean>());










 this.valueLattice = tabulationProblem.joinLattice();










 this.allTop = tabulationProblem.allTopFunction();










 this.jumpFn = new JumpFunctions<N,D,V>(allTop);



......@@ -493,14 +494,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);










 //register for value processing (2nd IDE phase)










 synchronized (callerSeeds) {










 Set<D> oldCallerSeeds = callerSeeds.get(retSiteC);










 if(oldCallerSeeds==null) {










 oldCallerSeeds = new HashSet<D>();










 callerSeeds.put(retSiteC, oldCallerSeeds);










 }










 oldCallerSeeds.add(d5);










 }










 unbalancedRetSites.add(retSiteC);










 }










 }










 }



......@@ -635,16 +629,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 private void computeValues() { 










 //Phase II(i)










 logger.debug("Computing the final values for the edge functions");










 //union of initial seeds and caller seeds










 //add caller seeds to initial seeds in an unbalanced problem










 Map<N, Set<D>> allSeeds = new HashMap<N, Set<D>>(initialSeeds);










 for(Entry<N, Set<D>> seed: callerSeeds.entrySet()) {










 Set<D> existing = allSeeds.get(seed.getKey());










 if(existing!=null) {










 existing.addAll(seed.getValue());










 } else {










 allSeeds.put(seed.getKey(), seed.getValue());










 }










 }










 for(N unbalancedRetSite: unbalancedRetSites) {










 Set<D> seeds = allSeeds.get(unbalancedRetSite);










 if(seeds==null) {










 seeds = new HashSet<D>();










 allSeeds.put(unbalancedRetSite, seeds);










 }










 seeds.add(zeroValue);










 }










 //do processing










 for(Entry<N, Set<D>> seed: allSeeds.entrySet()) {










 N startPoint = seed.getKey();



......@@ -883,8 +877,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.containsKey(n) || //our initial seeds are not necessarily method-start points but here they should be treated as such










 callerSeeds.containsKey(n)) { //the same also for "caller seeds" in case of an unbalanced problem










 initialSeeds.containsKey(n) ||  //our initial seeds are not necessarily method-start points but here they should be treated as such










 unbalancedRetSites.contains(n)) { //the same also for unbalanced return sites in an unbalanced problem










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......












src/heros/solver/IDESolver.java








View file @ 2e040141








src/heros/solver/IDESolver.java










View file @ 2e040141


2e040141



......@@ -34,6 +34,7 @@ import java.util.HashSet;









import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentHashMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;














......@@ -94,10 +95,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 @SynchronizedBy("consistent lock on field")










 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();





















 //stores the initial values that are propagated into callers independent bottom up,










 //stores the return sites (inside callers) to which we have unbalanced returns










 //if followReturnPastSeeds is enabled










 @SynchronizedBy("consistent lock on field")










 protected final Map<N,Set<D>> callerSeeds;










 @SynchronizedBy("use of ConcurrentHashMap")










 protected final Set<N> unbalancedRetSites;





















 @DontSynchronize("stateless")










 protected final FlowFunctions<N, D, M> flowFunctions;



......@@ -188,7 +189,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 this.flowFunctions = flowFunctions;










 this.edgeFunctions = edgeFunctions;










 this.initialSeeds = tabulationProblem.initialSeeds();










 this.callerSeeds = new HashMap<N, Set<D>>();










 this.unbalancedRetSites = Collections.newSetFromMap(new ConcurrentHashMap<N, Boolean>());










 this.valueLattice = tabulationProblem.joinLattice();










 this.allTop = tabulationProblem.allTopFunction();










 this.jumpFn = new JumpFunctions<N,D,V>(allTop);



......@@ -493,14 +494,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);










 //register for value processing (2nd IDE phase)










 synchronized (callerSeeds) {










 Set<D> oldCallerSeeds = callerSeeds.get(retSiteC);










 if(oldCallerSeeds==null) {










 oldCallerSeeds = new HashSet<D>();










 callerSeeds.put(retSiteC, oldCallerSeeds);










 }










 oldCallerSeeds.add(d5);










 }










 unbalancedRetSites.add(retSiteC);










 }










 }










 }



......@@ -635,16 +629,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 private void computeValues() { 










 //Phase II(i)










 logger.debug("Computing the final values for the edge functions");










 //union of initial seeds and caller seeds










 //add caller seeds to initial seeds in an unbalanced problem










 Map<N, Set<D>> allSeeds = new HashMap<N, Set<D>>(initialSeeds);










 for(Entry<N, Set<D>> seed: callerSeeds.entrySet()) {










 Set<D> existing = allSeeds.get(seed.getKey());










 if(existing!=null) {










 existing.addAll(seed.getValue());










 } else {










 allSeeds.put(seed.getKey(), seed.getValue());










 }










 }










 for(N unbalancedRetSite: unbalancedRetSites) {










 Set<D> seeds = allSeeds.get(unbalancedRetSite);










 if(seeds==null) {










 seeds = new HashSet<D>();










 allSeeds.put(unbalancedRetSite, seeds);










 }










 seeds.add(zeroValue);










 }










 //do processing










 for(Entry<N, Set<D>> seed: allSeeds.entrySet()) {










 N startPoint = seed.getKey();



......@@ -883,8 +877,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.containsKey(n) || //our initial seeds are not necessarily method-start points but here they should be treated as such










 callerSeeds.containsKey(n)) { //the same also for "caller seeds" in case of an unbalanced problem










 initialSeeds.containsKey(n) ||  //our initial seeds are not necessarily method-start points but here they should be treated as such










 unbalancedRetSites.contains(n)) { //the same also for unbalanced return sites in an unbalanced problem










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......






......@@ -34,6 +34,7 @@ import java.util.HashSet;









import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentHashMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;














......@@ -94,10 +95,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 @SynchronizedBy("consistent lock on field")










 protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();





















 //stores the initial values that are propagated into callers independent bottom up,










 //stores the return sites (inside callers) to which we have unbalanced returns










 //if followReturnPastSeeds is enabled










 @SynchronizedBy("consistent lock on field")










 protected final Map<N,Set<D>> callerSeeds;










 @SynchronizedBy("use of ConcurrentHashMap")










 protected final Set<N> unbalancedRetSites;





















 @DontSynchronize("stateless")










 protected final FlowFunctions<N, D, M> flowFunctions;



......@@ -188,7 +189,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 this.flowFunctions = flowFunctions;










 this.edgeFunctions = edgeFunctions;










 this.initialSeeds = tabulationProblem.initialSeeds();










 this.callerSeeds = new HashMap<N, Set<D>>();










 this.unbalancedRetSites = Collections.newSetFromMap(new ConcurrentHashMap<N, Boolean>());










 this.valueLattice = tabulationProblem.joinLattice();










 this.allTop = tabulationProblem.allTopFunction();










 this.jumpFn = new JumpFunctions<N,D,V>(allTop);



......@@ -493,14 +494,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);










 //register for value processing (2nd IDE phase)










 synchronized (callerSeeds) {










 Set<D> oldCallerSeeds = callerSeeds.get(retSiteC);










 if(oldCallerSeeds==null) {










 oldCallerSeeds = new HashSet<D>();










 callerSeeds.put(retSiteC, oldCallerSeeds);










 }










 oldCallerSeeds.add(d5);










 }










 unbalancedRetSites.add(retSiteC);










 }










 }










 }



......@@ -635,16 +629,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 private void computeValues() { 










 //Phase II(i)










 logger.debug("Computing the final values for the edge functions");










 //union of initial seeds and caller seeds










 //add caller seeds to initial seeds in an unbalanced problem










 Map<N, Set<D>> allSeeds = new HashMap<N, Set<D>>(initialSeeds);










 for(Entry<N, Set<D>> seed: callerSeeds.entrySet()) {










 Set<D> existing = allSeeds.get(seed.getKey());










 if(existing!=null) {










 existing.addAll(seed.getValue());










 } else {










 allSeeds.put(seed.getKey(), seed.getValue());










 }










 }










 for(N unbalancedRetSite: unbalancedRetSites) {










 Set<D> seeds = allSeeds.get(unbalancedRetSite);










 if(seeds==null) {










 seeds = new HashSet<D>();










 allSeeds.put(unbalancedRetSite, seeds);










 }










 seeds.add(zeroValue);










 }










 //do processing










 for(Entry<N, Set<D>> seed: allSeeds.entrySet()) {










 N startPoint = seed.getKey();



......@@ -883,8 +877,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.containsKey(n) || //our initial seeds are not necessarily method-start points but here they should be treated as such










 callerSeeds.containsKey(n)) { //the same also for "caller seeds" in case of an unbalanced problem










 initialSeeds.containsKey(n) ||  //our initial seeds are not necessarily method-start points but here they should be treated as such










 unbalancedRetSites.contains(n)) { //the same also for unbalanced return sites in an unbalanced problem










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......


import java.util.Map;importjava.util.Map;import java.util.Map.Entry;importjava.util.Map.Entry;import java.util.Set;importjava.util.Set;import java.util.concurrent.ConcurrentHashMap;importjava.util.concurrent.ConcurrentHashMap;import java.util.concurrent.LinkedBlockingQueue;importjava.util.concurrent.LinkedBlockingQueue;import java.util.concurrent.TimeUnit;importjava.util.concurrent.TimeUnit; @SynchronizedBy("consistent lock on field")@SynchronizedBy("consistent lock on field") protected final Table<N,D,Map<N,Set<D>>> incoming = HashBasedTable.create();protectedfinalTable<N,D,Map<N,Set<D>>>incoming=HashBasedTable.create(); //stores the initial values that are propagated into callers independent bottom up,//stores the initial values that are propagated into callers independent bottom up,initial values that are propagated into callers independent bottom up, //stores the return sites (inside callers) to which we have unbalanced returns//stores the return sites (inside callers) to which we have unbalanced returnsreturn sites (inside callers) to which we have unbalanced returns //if followReturnPastSeeds is enabled//if followReturnPastSeeds is enabled @SynchronizedBy("consistent lock on field")@SynchronizedBy("consistent lock on field"consistent lock on field) protected final Map<N,Set<D>> callerSeeds;protectedfinalMapMap<<NN,,SetSet<<DD>>>> callerSeedscallerSeed; @SynchronizedBy("use of ConcurrentHashMap")@SynchronizedBy("use of ConcurrentHashMap"use of ConcurrentHashMap) protected final Set<N> unbalancedRetSites;protectedfinalSetSet<<NN>> unbalancedRetSitesunbalancedRetSite; @DontSynchronize("stateless")@DontSynchronize("stateless") protected final FlowFunctions<N, D, M> flowFunctions;protectedfinalFlowFunctions<N,D,M>flowFunctions; this.flowFunctions = flowFunctions;this.flowFunctions=flowFunctions; this.edgeFunctions = edgeFunctions;this.edgeFunctions=edgeFunctions; this.initialSeeds = tabulationProblem.initialSeeds();this.initialSeeds=tabulationProblem.initialSeeds(); this.callerSeeds = new HashMap<N, Set<D>>();this.callerSeedscallerSeeds == newnew HashMap<N,SetSet<<DD>>();> this.unbalancedRetSites = Collections.newSetFromMap(new ConcurrentHashMap<N, Boolean>());this.unbalancedRetSitesunbalancedRetSites == CollectionsCollections..newSetFromMapnewSetFromMap((newnew ConcurrentHashMapConcurrent<N,BooleanBoolean>());) this.valueLattice = tabulationProblem.joinLattice();this.valueLattice=tabulationProblem.joinLattice(); this.allTop = tabulationProblem.allTopFunction();this.allTop=tabulationProblem.allTopFunction(); this.jumpFn = new JumpFunctions<N,D,V>(allTop);this.jumpFn=newJumpFunctions<N,D,V>(allTop); EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);EdgeFunction<V>f5=edgeFunctions.getReturnEdgeFunction(c,icfg.getMethodOf(n),n,d2,retSiteC,d5); propagateUnbalancedReturnFlow(retSiteC, d5, f.composeWith(f5), c);propagateUnbalancedReturnFlow(retSiteC,d5,f.composeWith(f5),c); //register for value processing (2nd IDE phase)//register for value processing (2nd IDE phase) synchronized (callerSeeds) {synchronized(callerSeeds){ Set<D> oldCallerSeeds = callerSeeds.get(retSiteC);Set<D>oldCallerSeeds=callerSeeds.get(retSiteC); if(oldCallerSeeds==null) {if(oldCallerSeeds==null){ oldCallerSeeds = new HashSet<D>();oldCallerSeeds=newHashSet<D>(); callerSeeds.put(retSiteC, oldCallerSeeds);callerSeeds.put(retSiteC,oldCallerSeeds); }} oldCallerSeeds.add(d5);oldCallerSeeds.add(d5); }} unbalancedRetSites.add(retSiteC);unbalancedRetSites.add(retSiteC); }} }} }} private void computeValues() { privatevoidcomputeValues(){ //Phase II(i)//Phase II(i) logger.debug("Computing the final values for the edge functions");logger.debug("Computing the final values for the edge functions"); //union of initial seeds and caller seeds//union of initial seeds and caller seedsunion of initial seeds and caller seeds //add caller seeds to initial seeds in an unbalanced problem//add caller seeds to initial seeds in an unbalanced problemadd caller seeds to initial seeds in an unbalanced problem Map<N, Set<D>> allSeeds = new HashMap<N, Set<D>>(initialSeeds);Map<N,Set<D>>allSeeds=newHashMap<N,Set<D>>(initialSeeds); for(Entry<N, Set<D>> seed: callerSeeds.entrySet()) { forfor((EntryEntry<<NN,, SetSet<<DD>>>> seed:seed: callerSeedscallerSeeds..entrySetentrySet())(){ Set<D> existing = allSeeds.get(seed.getKey()); SetSet<<DD>> existingexisting == allSeedsallSeeds..getget((seedseed..getKeygetKey());() if(existing!=null) { ifif((existingexisting!=!null){ existing.addAll(seed.getValue()); existingexisting..addAlladdAll((seedseed..getValuegetValue());() } else { }} elseelse {{ allSeeds.put(seed.getKey(), seed.getValue()); allSeedsallSeeds..putput((seedseed..getKeygetKey(),(), seedseed..getValuegetValue());()); } }} } } for(N unbalancedRetSite: unbalancedRetSites) { forfor((NN unbalancedRetSite:unbalancedRetSite: unbalancedRetSitesunbalancedRetSites){ Set<D> seeds = allSeeds.get(unbalancedRetSite); SetSet<<DD>> seedsseeds == allSeedsallSeeds..getget((unbalancedRetSiteunbalancedRetSite); if(seeds==null) { ifif((seedsseeds===null){ seeds = new HashSet<D>(); seedsseeds == newnew HashSetHashSet<<DD>();>( allSeeds.put(unbalancedRetSite, seeds); allSeedsallSeeds..putput((unbalancedRetSiteunbalancedRetSite,, seedsseeds);); } }} seeds.add(zeroValue); seedsseeds..addadd((zeroValuezeroValue);); } } //do processing//do processing for(Entry<N, Set<D>> seed: allSeeds.entrySet()) {for(Entry<N,Set<D>>seed:allSeeds.entrySet()){ N startPoint = seed.getKey();NstartPoint=seed.getKey(); public void run() {publicvoidrun(){ N n = nAndD.getO1();Nn=nAndD.getO1(); if(icfg.isStartPoint(n) ||if(icfg.isStartPoint(n)|| initialSeeds.containsKey(n) || //our initial seeds are not necessarily method-start points but here they should be treated as suchinitialSeeds.containsKey(n)||//our initial seeds are not necessarily method-start points but here they should be treated as such callerSeeds.containsKey(n)) { //the same also for "caller seeds" in case of an unbalanced problemcallerSeedscallerSeed.containsKeyKey(n)){//the same also for "caller seeds" in case of an unbalanced problem"caller seeds" in case of initialSeeds.containsKey(n) ||  //our initial seeds are not necessarily method-start points but here they should be treated as suchinitialSeeds.containsKey(n)|| //our initial seeds are not necessarily method-start points but here they should be treated as such unbalancedRetSites.contains(n)) { //the same also for unbalanced return sites in an unbalanced problemunbalancedRetSitesunbalancedRetSite.contains(n)){//the same also for unbalanced return sites in an unbalanced problemunbalanced return sites in propagateValueAtStart(nAndD, n);propagateValueAtStart(nAndD,n); }} if(icfg.isCallStmt(n)) {if(icfg.isCallStmt(n)){









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






