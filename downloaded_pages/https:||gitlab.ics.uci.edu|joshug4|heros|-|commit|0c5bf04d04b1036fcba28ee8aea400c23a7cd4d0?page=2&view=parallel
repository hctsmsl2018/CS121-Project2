



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

0c5bf04d















Commit
0c5bf04d


authored
Nov 28, 2012
by


Eric Bodden



Browse files




moved dependencies on soot into separate package







parent
92bb16ad













Changes
43




Hide whitespace changes

Inline
Side-by-side















src/de/bodden/ide/edgefunc/AllTop.java

→

src-generic/de/bodden/ide/edgefunc/AllTop.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/edgefunc/EdgeIdentity.java

→

src-generic/de/bodden/ide/edgefunc/EdgeIdentity.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/Compose.java

→

src-generic/de/bodden/ide/flowfunc/Compose.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/Gen.java

→

src-generic/de/bodden/ide/flowfunc/Gen.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/Identity.java

→

src-generic/de/bodden/ide/flowfunc/Identity.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/Kill.java

→

src-generic/de/bodden/ide/flowfunc/Kill.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/KillAll.java

→

src-generic/de/bodden/ide/flowfunc/KillAll.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/Transfer.java

→

src-generic/de/bodden/ide/flowfunc/Transfer.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/solver/IDESolver.java

→

src-generic/de/bodden/ide/solver/IDESolver.java








View file @ 0c5bf04d












package de.bodden.ide.solver;





package de.bodden.ide.solver;



































import java.io.FileNotFoundException;









import java.io.FileOutputStream;









import java.io.PrintWriter;









import java.util.ArrayList;









import java.util.Collection;





import java.util.Collection;







import java.util.Collections;





import java.util.Collections;







import java.util.HashMap;





import java.util.HashMap;



...@@ -21,11 +17,6 @@ import java.util.concurrent.Executors;
...@@ -21,11 +17,6 @@ import java.util.concurrent.Executors;






import java.util.concurrent.TimeUnit;





import java.util.concurrent.TimeUnit;







import java.util.concurrent.atomic.AtomicInteger;





import java.util.concurrent.atomic.AtomicInteger;





















import soot.PatchingChain;









import soot.SootMethod;









import soot.Unit;









import soot.toolkits.scalar.Pair;



















import com.google.common.base.Predicate;





import com.google.common.base.Predicate;







import com.google.common.cache.CacheBuilder;





import com.google.common.cache.CacheBuilder;







import com.google.common.collect.HashBasedTable;





import com.google.common.collect.HashBasedTable;



...@@ -57,9 +48,9 @@ import de.bodden.ide.edgefunc.EdgeIdentity;
...@@ -57,9 +48,9 @@ import de.bodden.ide.edgefunc.EdgeIdentity;






 * is to produce, as much as possible, reproducible benchmarking results. We have found





 * is to produce, as much as possible, reproducible benchmarking results. We have found







 * that the iteration order can matter a lot in terms of speed.





 * that the iteration order can matter a lot in terms of speed.







 *





 *







 * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}.





 * @param <N> The type of nodes in the interprocedural control-flow graph. 







 * @param <D> The type of data-flow facts to be computed by the tabulation problem.





 * @param <D> The type of data-flow facts to be computed by the tabulation problem.







 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.





 * @param <M> The type of objects used to represent methods.







 * @param <V> The type of values to be computed along flow edges.





 * @param <V> The type of values to be computed along flow edges.







 * @param <I> The type of inter-procedural control-flow graph being used.





 * @param <I> The type of inter-procedural control-flow graph being used.







 */





 */



...@@ -69,8 +60,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -69,8 +60,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 





 







 private static final boolean DEBUG = false;





 private static final boolean DEBUG = false;







 





 







 private static final boolean DUMP_RESULTS = false;









 









 //executor for dispatching individual compute jobs (may be multi-threaded)





 //executor for dispatching individual compute jobs (may be multi-threaded)







 @DontSynchronize("only used by single thread")





 @DontSynchronize("only used by single thread")







 private ExecutorService executor;





 private ExecutorService executor;



...@@ -233,9 +222,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -233,9 +222,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 if(DEBUG) 





 if(DEBUG) 







 printStats();





 printStats();







 





 







 if(DUMP_RESULTS)









 dumpResults();









 









 executor.shutdown();





 executor.shutdown();







 }





 }

















...@@ -387,7 +373,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -387,7 +373,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 private void setVal(N nHashN, D nHashD,V l){ 





 private void setVal(N nHashN, D nHashD,V l){ 







 val.put(nHashN, nHashD,l);





 val.put(nHashN, nHashD,l);







 if(DEBUG)





 if(DEBUG)







 System.err.println("VALUE: "+((SootMethod)icfg.getMethodOf(nHashN)).getSignature()+" "+nHashN+" "+nHashD+ " " + l);





 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);







 }





 }





















 





 



...@@ -639,33 +625,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -639,33 +625,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 });





 });







 }





 }





















 public void dumpResults() {









 try {









 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));









 List<String> res = new ArrayList<String>();









 for(Cell<N, D, V> entry: val.cellSet()) {









 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());









 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();









 int i=0;









 for (Unit unit : units) {









 if(unit==entry.getRowKey())









 break;









 i++;









 }









 









 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());









 }









 Collections.sort(res);









 for (String string : res) {









 out.println(string);









 }









 out.flush();









 out.close();









 } catch (FileNotFoundException e) {









 e.printStackTrace();









 }









 }



















 public void printStats() {





 public void printStats() {







 if(DEBUG) {





 if(DEBUG) {







 if(ffCache!=null)





 if(ffCache!=null)



......















src/de/bodden/ide/solver/IFDSSolver.java

→

src-generic/de/bodden/ide/solver/IFDSSolver.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/solver/JumpFunctions.java

→

src-generic/de/bodden/ide/solver/JumpFunctions.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/solver/PathEdge.java

→

src-generic/de/bodden/ide/solver/PathEdge.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/solver/SummaryFunctions.java

→

src-generic/de/bodden/ide/solver/SummaryFunctions.java








View file @ 0c5bf04d





File moved













src-soot/soot/jimple/toolkits/ide/DefaultJimpleIDETabulationProblem.java



0 → 100644







View file @ 0c5bf04d














package soot.jimple.toolkits.ide;



















import soot.SootMethod;









import soot.Unit;









import de.bodden.ide.InterproceduralCFG;









import de.bodden.ide.template.DefaultIDETabulationProblem;



















/**









 *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods.









 */









public abstract class DefaultJimpleIDETabulationProblem<D,V,I extends InterproceduralCFG<Unit,SootMethod>>









 extends DefaultIDETabulationProblem<Unit,D,SootMethod,V,I> {



















 public DefaultJimpleIDETabulationProblem(I icfg) {









 super(icfg);









 }









 









}















src/de/bodden/ide/Main.java

→

src-soot/soot/jimple/toolkits/ide/Main.java








View file @ 0c5bf04d












package de.bodden.ide;





package soot.jimple.toolkits.ide;





















import java.util.Map;





import java.util.Map;





















import de.bodden.ide.problems.IFDSLocalInfoFlow;





import de.bodden.ide.IFDSTabulationProblem;









import de.bodden.ide.InterproceduralCFG;







import de.bodden.ide.solver.IFDSSolver;





import de.bodden.ide.solver.IFDSSolver;







import de.bodden.ide.template.JimpleBasedInterproceduralCFG;























import soot.Local;





import soot.Local;







import soot.PackManager;





import soot.PackManager;



...@@ -13,6 +13,8 @@ import soot.SceneTransformer;
...@@ -13,6 +13,8 @@ import soot.SceneTransformer;






import soot.SootMethod;





import soot.SootMethod;







import soot.Transform;





import soot.Transform;







import soot.Unit;





import soot.Unit;









import soot.jimple.toolkits.ide.exampleproblems.IFDSLocalInfoFlow;









import soot.jimple.toolkits.ide.icfg.JimpleBasedInterproceduralCFG;





















public class Main {





public class Main {

















......















src/de/bodden/ide/problems/IFDSLocalInfoFlow.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSLocalInfoFlow.java








View file @ 0c5bf04d












package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -13,7 +13,6 @@ import de.bodden.ide.flowfunc.Identity;
...@@ -13,7 +13,6 @@ import de.bodden.ide.flowfunc.Identity;






import de.bodden.ide.flowfunc.Kill;





import de.bodden.ide.flowfunc.Kill;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.flowfunc.Transfer;





import de.bodden.ide.flowfunc.Transfer;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.Local;





import soot.Local;







import soot.NullType;





import soot.NullType;



...@@ -29,8 +28,9 @@ import soot.jimple.ParameterRef;
...@@ -29,8 +28,9 @@ import soot.jimple.ParameterRef;






import soot.jimple.ReturnStmt;





import soot.jimple.ReturnStmt;







import soot.jimple.Stmt;





import soot.jimple.Stmt;







import soot.jimple.internal.JimpleLocal;





import soot.jimple.internal.JimpleLocal;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;





















public class IFDSLocalInfoFlow extends DefaultIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSLocalInfoFlow extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {





 public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {







 super(icfg); 





 super(icfg); 



......















src/de/bodden/ide/problems/IFDSPossibleTypes.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSPossibleTypes.java








View file @ 0c5bf04d












package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;
...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;






import de.bodden.ide.InterproceduralCFG;





import de.bodden.ide.InterproceduralCFG;







import de.bodden.ide.flowfunc.Identity;





import de.bodden.ide.flowfunc.Identity;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.Local;





import soot.Local;







import soot.PointsToAnalysis;





import soot.PointsToAnalysis;



...@@ -33,10 +32,11 @@ import soot.jimple.NewExpr;
...@@ -33,10 +32,11 @@ import soot.jimple.NewExpr;






import soot.jimple.Ref;





import soot.jimple.Ref;







import soot.jimple.ReturnStmt;





import soot.jimple.ReturnStmt;







import soot.jimple.Stmt;





import soot.jimple.Stmt;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;







import soot.toolkits.scalar.Pair;





import soot.toolkits.scalar.Pair;





















@SuppressWarnings("serial")





@SuppressWarnings("serial")







public class IFDSPossibleTypes extends DefaultIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSPossibleTypes extends DefaultJimpleIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {





 public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {







 super(icfg);





 super(icfg);



......















src/de/bodden/ide/problems/IFDSReachingDefinitions.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSReachingDefinitions.java








View file @ 0c5bf04d












package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;
...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;






import de.bodden.ide.InterproceduralCFG;





import de.bodden.ide.InterproceduralCFG;







import de.bodden.ide.flowfunc.Identity;





import de.bodden.ide.flowfunc.Identity;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.EquivalentValue;





import soot.EquivalentValue;







import soot.Local;





import soot.Local;



...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;
...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;






import soot.jimple.ReturnVoidStmt;





import soot.jimple.ReturnVoidStmt;







import soot.jimple.Stmt;





import soot.jimple.Stmt;







import soot.jimple.internal.JimpleLocal;





import soot.jimple.internal.JimpleLocal;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;







import soot.toolkits.scalar.Pair;





import soot.toolkits.scalar.Pair;





















public class IFDSReachingDefinitions extends DefaultIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSReachingDefinitions extends DefaultJimpleIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {







 public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {





 public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {







 super(icfg);





 super(icfg);







 }





 }



......















src/de/bodden/ide/problems/IFDSUninitializedVariables.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSUninitializedVariables.java








View file @ 0c5bf04d












package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -12,7 +12,6 @@ import de.bodden.ide.InterproceduralCFG;
...@@ -12,7 +12,6 @@ import de.bodden.ide.InterproceduralCFG;






import de.bodden.ide.flowfunc.Identity;





import de.bodden.ide.flowfunc.Identity;







import de.bodden.ide.flowfunc.Kill;





import de.bodden.ide.flowfunc.Kill;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.Local;





import soot.Local;







import soot.NullType;





import soot.NullType;



...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;
...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;






import soot.jimple.Stmt;





import soot.jimple.Stmt;







import soot.jimple.ThrowStmt;





import soot.jimple.ThrowStmt;







import soot.jimple.internal.JimpleLocal;





import soot.jimple.internal.JimpleLocal;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;







import soot.util.Chain;





import soot.util.Chain;





















public class IFDSUninitializedVariables extends DefaultIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSUninitializedVariables extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {





 public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {







 super(icfg); 





 super(icfg); 



......















src/de/bodden/ide/template/BackwardsInterproceduralCFG.java

→

src-soot/soot/jimple/toolkits/ide/icfg/BackwardsInterproceduralCFG.java








View file @ 0c5bf04d












package de.bodden.ide.template;





package soot.jimple.toolkits.ide.icfg;





















import soot.Body;





import soot.Body;







import soot.Unit;





import soot.Unit;



......










Prev


1


2


3


Next















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

0c5bf04d















Commit
0c5bf04d


authored
Nov 28, 2012
by


Eric Bodden



Browse files




moved dependencies on soot into separate package







parent
92bb16ad













Changes
43




Hide whitespace changes

Inline
Side-by-side















src/de/bodden/ide/edgefunc/AllTop.java

→

src-generic/de/bodden/ide/edgefunc/AllTop.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/edgefunc/EdgeIdentity.java

→

src-generic/de/bodden/ide/edgefunc/EdgeIdentity.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/Compose.java

→

src-generic/de/bodden/ide/flowfunc/Compose.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/Gen.java

→

src-generic/de/bodden/ide/flowfunc/Gen.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/Identity.java

→

src-generic/de/bodden/ide/flowfunc/Identity.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/Kill.java

→

src-generic/de/bodden/ide/flowfunc/Kill.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/KillAll.java

→

src-generic/de/bodden/ide/flowfunc/KillAll.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/Transfer.java

→

src-generic/de/bodden/ide/flowfunc/Transfer.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/solver/IDESolver.java

→

src-generic/de/bodden/ide/solver/IDESolver.java








View file @ 0c5bf04d












package de.bodden.ide.solver;





package de.bodden.ide.solver;



































import java.io.FileNotFoundException;









import java.io.FileOutputStream;









import java.io.PrintWriter;









import java.util.ArrayList;









import java.util.Collection;





import java.util.Collection;







import java.util.Collections;





import java.util.Collections;







import java.util.HashMap;





import java.util.HashMap;



...@@ -21,11 +17,6 @@ import java.util.concurrent.Executors;
...@@ -21,11 +17,6 @@ import java.util.concurrent.Executors;






import java.util.concurrent.TimeUnit;





import java.util.concurrent.TimeUnit;







import java.util.concurrent.atomic.AtomicInteger;





import java.util.concurrent.atomic.AtomicInteger;





















import soot.PatchingChain;









import soot.SootMethod;









import soot.Unit;









import soot.toolkits.scalar.Pair;



















import com.google.common.base.Predicate;





import com.google.common.base.Predicate;







import com.google.common.cache.CacheBuilder;





import com.google.common.cache.CacheBuilder;







import com.google.common.collect.HashBasedTable;





import com.google.common.collect.HashBasedTable;



...@@ -57,9 +48,9 @@ import de.bodden.ide.edgefunc.EdgeIdentity;
...@@ -57,9 +48,9 @@ import de.bodden.ide.edgefunc.EdgeIdentity;






 * is to produce, as much as possible, reproducible benchmarking results. We have found





 * is to produce, as much as possible, reproducible benchmarking results. We have found







 * that the iteration order can matter a lot in terms of speed.





 * that the iteration order can matter a lot in terms of speed.







 *





 *







 * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}.





 * @param <N> The type of nodes in the interprocedural control-flow graph. 







 * @param <D> The type of data-flow facts to be computed by the tabulation problem.





 * @param <D> The type of data-flow facts to be computed by the tabulation problem.







 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.





 * @param <M> The type of objects used to represent methods.







 * @param <V> The type of values to be computed along flow edges.





 * @param <V> The type of values to be computed along flow edges.







 * @param <I> The type of inter-procedural control-flow graph being used.





 * @param <I> The type of inter-procedural control-flow graph being used.







 */





 */



...@@ -69,8 +60,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -69,8 +60,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 





 







 private static final boolean DEBUG = false;





 private static final boolean DEBUG = false;







 





 







 private static final boolean DUMP_RESULTS = false;









 









 //executor for dispatching individual compute jobs (may be multi-threaded)





 //executor for dispatching individual compute jobs (may be multi-threaded)







 @DontSynchronize("only used by single thread")





 @DontSynchronize("only used by single thread")







 private ExecutorService executor;





 private ExecutorService executor;



...@@ -233,9 +222,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -233,9 +222,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 if(DEBUG) 





 if(DEBUG) 







 printStats();





 printStats();







 





 







 if(DUMP_RESULTS)









 dumpResults();









 









 executor.shutdown();





 executor.shutdown();







 }





 }

















...@@ -387,7 +373,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -387,7 +373,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 private void setVal(N nHashN, D nHashD,V l){ 





 private void setVal(N nHashN, D nHashD,V l){ 







 val.put(nHashN, nHashD,l);





 val.put(nHashN, nHashD,l);







 if(DEBUG)





 if(DEBUG)







 System.err.println("VALUE: "+((SootMethod)icfg.getMethodOf(nHashN)).getSignature()+" "+nHashN+" "+nHashD+ " " + l);





 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);







 }





 }





















 





 



...@@ -639,33 +625,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -639,33 +625,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 });





 });







 }





 }





















 public void dumpResults() {









 try {









 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));









 List<String> res = new ArrayList<String>();









 for(Cell<N, D, V> entry: val.cellSet()) {









 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());









 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();









 int i=0;









 for (Unit unit : units) {









 if(unit==entry.getRowKey())









 break;









 i++;









 }









 









 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());









 }









 Collections.sort(res);









 for (String string : res) {









 out.println(string);









 }









 out.flush();









 out.close();









 } catch (FileNotFoundException e) {









 e.printStackTrace();









 }









 }



















 public void printStats() {





 public void printStats() {







 if(DEBUG) {





 if(DEBUG) {







 if(ffCache!=null)





 if(ffCache!=null)



......















src/de/bodden/ide/solver/IFDSSolver.java

→

src-generic/de/bodden/ide/solver/IFDSSolver.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/solver/JumpFunctions.java

→

src-generic/de/bodden/ide/solver/JumpFunctions.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/solver/PathEdge.java

→

src-generic/de/bodden/ide/solver/PathEdge.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/solver/SummaryFunctions.java

→

src-generic/de/bodden/ide/solver/SummaryFunctions.java








View file @ 0c5bf04d





File moved













src-soot/soot/jimple/toolkits/ide/DefaultJimpleIDETabulationProblem.java



0 → 100644







View file @ 0c5bf04d














package soot.jimple.toolkits.ide;



















import soot.SootMethod;









import soot.Unit;









import de.bodden.ide.InterproceduralCFG;









import de.bodden.ide.template.DefaultIDETabulationProblem;



















/**









 *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods.









 */









public abstract class DefaultJimpleIDETabulationProblem<D,V,I extends InterproceduralCFG<Unit,SootMethod>>









 extends DefaultIDETabulationProblem<Unit,D,SootMethod,V,I> {



















 public DefaultJimpleIDETabulationProblem(I icfg) {









 super(icfg);









 }









 









}















src/de/bodden/ide/Main.java

→

src-soot/soot/jimple/toolkits/ide/Main.java








View file @ 0c5bf04d












package de.bodden.ide;





package soot.jimple.toolkits.ide;





















import java.util.Map;





import java.util.Map;





















import de.bodden.ide.problems.IFDSLocalInfoFlow;





import de.bodden.ide.IFDSTabulationProblem;









import de.bodden.ide.InterproceduralCFG;







import de.bodden.ide.solver.IFDSSolver;





import de.bodden.ide.solver.IFDSSolver;







import de.bodden.ide.template.JimpleBasedInterproceduralCFG;























import soot.Local;





import soot.Local;







import soot.PackManager;





import soot.PackManager;



...@@ -13,6 +13,8 @@ import soot.SceneTransformer;
...@@ -13,6 +13,8 @@ import soot.SceneTransformer;






import soot.SootMethod;





import soot.SootMethod;







import soot.Transform;





import soot.Transform;







import soot.Unit;





import soot.Unit;









import soot.jimple.toolkits.ide.exampleproblems.IFDSLocalInfoFlow;









import soot.jimple.toolkits.ide.icfg.JimpleBasedInterproceduralCFG;





















public class Main {





public class Main {

















......















src/de/bodden/ide/problems/IFDSLocalInfoFlow.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSLocalInfoFlow.java








View file @ 0c5bf04d












package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -13,7 +13,6 @@ import de.bodden.ide.flowfunc.Identity;
...@@ -13,7 +13,6 @@ import de.bodden.ide.flowfunc.Identity;






import de.bodden.ide.flowfunc.Kill;





import de.bodden.ide.flowfunc.Kill;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.flowfunc.Transfer;





import de.bodden.ide.flowfunc.Transfer;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.Local;





import soot.Local;







import soot.NullType;





import soot.NullType;



...@@ -29,8 +28,9 @@ import soot.jimple.ParameterRef;
...@@ -29,8 +28,9 @@ import soot.jimple.ParameterRef;






import soot.jimple.ReturnStmt;





import soot.jimple.ReturnStmt;







import soot.jimple.Stmt;





import soot.jimple.Stmt;







import soot.jimple.internal.JimpleLocal;





import soot.jimple.internal.JimpleLocal;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;





















public class IFDSLocalInfoFlow extends DefaultIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSLocalInfoFlow extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {





 public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {







 super(icfg); 





 super(icfg); 



......















src/de/bodden/ide/problems/IFDSPossibleTypes.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSPossibleTypes.java








View file @ 0c5bf04d












package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;
...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;






import de.bodden.ide.InterproceduralCFG;





import de.bodden.ide.InterproceduralCFG;







import de.bodden.ide.flowfunc.Identity;





import de.bodden.ide.flowfunc.Identity;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.Local;





import soot.Local;







import soot.PointsToAnalysis;





import soot.PointsToAnalysis;



...@@ -33,10 +32,11 @@ import soot.jimple.NewExpr;
...@@ -33,10 +32,11 @@ import soot.jimple.NewExpr;






import soot.jimple.Ref;





import soot.jimple.Ref;







import soot.jimple.ReturnStmt;





import soot.jimple.ReturnStmt;







import soot.jimple.Stmt;





import soot.jimple.Stmt;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;







import soot.toolkits.scalar.Pair;





import soot.toolkits.scalar.Pair;





















@SuppressWarnings("serial")





@SuppressWarnings("serial")







public class IFDSPossibleTypes extends DefaultIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSPossibleTypes extends DefaultJimpleIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {





 public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {







 super(icfg);





 super(icfg);



......















src/de/bodden/ide/problems/IFDSReachingDefinitions.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSReachingDefinitions.java








View file @ 0c5bf04d












package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;
...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;






import de.bodden.ide.InterproceduralCFG;





import de.bodden.ide.InterproceduralCFG;







import de.bodden.ide.flowfunc.Identity;





import de.bodden.ide.flowfunc.Identity;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.EquivalentValue;





import soot.EquivalentValue;







import soot.Local;





import soot.Local;



...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;
...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;






import soot.jimple.ReturnVoidStmt;





import soot.jimple.ReturnVoidStmt;







import soot.jimple.Stmt;





import soot.jimple.Stmt;







import soot.jimple.internal.JimpleLocal;





import soot.jimple.internal.JimpleLocal;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;







import soot.toolkits.scalar.Pair;





import soot.toolkits.scalar.Pair;





















public class IFDSReachingDefinitions extends DefaultIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSReachingDefinitions extends DefaultJimpleIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {







 public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {





 public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {







 super(icfg);





 super(icfg);







 }





 }



......















src/de/bodden/ide/problems/IFDSUninitializedVariables.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSUninitializedVariables.java








View file @ 0c5bf04d












package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -12,7 +12,6 @@ import de.bodden.ide.InterproceduralCFG;
...@@ -12,7 +12,6 @@ import de.bodden.ide.InterproceduralCFG;






import de.bodden.ide.flowfunc.Identity;





import de.bodden.ide.flowfunc.Identity;







import de.bodden.ide.flowfunc.Kill;





import de.bodden.ide.flowfunc.Kill;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.Local;





import soot.Local;







import soot.NullType;





import soot.NullType;



...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;
...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;






import soot.jimple.Stmt;





import soot.jimple.Stmt;







import soot.jimple.ThrowStmt;





import soot.jimple.ThrowStmt;







import soot.jimple.internal.JimpleLocal;





import soot.jimple.internal.JimpleLocal;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;







import soot.util.Chain;





import soot.util.Chain;





















public class IFDSUninitializedVariables extends DefaultIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSUninitializedVariables extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {





 public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {







 super(icfg); 





 super(icfg); 



......















src/de/bodden/ide/template/BackwardsInterproceduralCFG.java

→

src-soot/soot/jimple/toolkits/ide/icfg/BackwardsInterproceduralCFG.java








View file @ 0c5bf04d












package de.bodden.ide.template;





package soot.jimple.toolkits.ide.icfg;





















import soot.Body;





import soot.Body;







import soot.Unit;





import soot.Unit;



......










Prev


1


2


3


Next















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

0c5bf04d







Open sidebar



Joshua Garcia heros
Commits

0c5bf04d




Open sidebar

Joshua Garcia heros
Commits

0c5bf04d


Joshua GarciaherosherosCommits
0c5bf04d








Commit
0c5bf04d


authored
Nov 28, 2012
by


Eric Bodden



Browse files




moved dependencies on soot into separate package







parent
92bb16ad













Changes
43




Hide whitespace changes

Inline
Side-by-side















src/de/bodden/ide/edgefunc/AllTop.java

→

src-generic/de/bodden/ide/edgefunc/AllTop.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/edgefunc/EdgeIdentity.java

→

src-generic/de/bodden/ide/edgefunc/EdgeIdentity.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/Compose.java

→

src-generic/de/bodden/ide/flowfunc/Compose.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/Gen.java

→

src-generic/de/bodden/ide/flowfunc/Gen.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/Identity.java

→

src-generic/de/bodden/ide/flowfunc/Identity.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/Kill.java

→

src-generic/de/bodden/ide/flowfunc/Kill.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/KillAll.java

→

src-generic/de/bodden/ide/flowfunc/KillAll.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/Transfer.java

→

src-generic/de/bodden/ide/flowfunc/Transfer.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/solver/IDESolver.java

→

src-generic/de/bodden/ide/solver/IDESolver.java








View file @ 0c5bf04d












package de.bodden.ide.solver;





package de.bodden.ide.solver;



































import java.io.FileNotFoundException;









import java.io.FileOutputStream;









import java.io.PrintWriter;









import java.util.ArrayList;









import java.util.Collection;





import java.util.Collection;







import java.util.Collections;





import java.util.Collections;







import java.util.HashMap;





import java.util.HashMap;



...@@ -21,11 +17,6 @@ import java.util.concurrent.Executors;
...@@ -21,11 +17,6 @@ import java.util.concurrent.Executors;






import java.util.concurrent.TimeUnit;





import java.util.concurrent.TimeUnit;







import java.util.concurrent.atomic.AtomicInteger;





import java.util.concurrent.atomic.AtomicInteger;





















import soot.PatchingChain;









import soot.SootMethod;









import soot.Unit;









import soot.toolkits.scalar.Pair;



















import com.google.common.base.Predicate;





import com.google.common.base.Predicate;







import com.google.common.cache.CacheBuilder;





import com.google.common.cache.CacheBuilder;







import com.google.common.collect.HashBasedTable;





import com.google.common.collect.HashBasedTable;



...@@ -57,9 +48,9 @@ import de.bodden.ide.edgefunc.EdgeIdentity;
...@@ -57,9 +48,9 @@ import de.bodden.ide.edgefunc.EdgeIdentity;






 * is to produce, as much as possible, reproducible benchmarking results. We have found





 * is to produce, as much as possible, reproducible benchmarking results. We have found







 * that the iteration order can matter a lot in terms of speed.





 * that the iteration order can matter a lot in terms of speed.







 *





 *







 * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}.





 * @param <N> The type of nodes in the interprocedural control-flow graph. 







 * @param <D> The type of data-flow facts to be computed by the tabulation problem.





 * @param <D> The type of data-flow facts to be computed by the tabulation problem.







 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.





 * @param <M> The type of objects used to represent methods.







 * @param <V> The type of values to be computed along flow edges.





 * @param <V> The type of values to be computed along flow edges.







 * @param <I> The type of inter-procedural control-flow graph being used.





 * @param <I> The type of inter-procedural control-flow graph being used.







 */





 */



...@@ -69,8 +60,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -69,8 +60,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 





 







 private static final boolean DEBUG = false;





 private static final boolean DEBUG = false;







 





 







 private static final boolean DUMP_RESULTS = false;









 









 //executor for dispatching individual compute jobs (may be multi-threaded)





 //executor for dispatching individual compute jobs (may be multi-threaded)







 @DontSynchronize("only used by single thread")





 @DontSynchronize("only used by single thread")







 private ExecutorService executor;





 private ExecutorService executor;



...@@ -233,9 +222,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -233,9 +222,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 if(DEBUG) 





 if(DEBUG) 







 printStats();





 printStats();







 





 







 if(DUMP_RESULTS)









 dumpResults();









 









 executor.shutdown();





 executor.shutdown();







 }





 }

















...@@ -387,7 +373,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -387,7 +373,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 private void setVal(N nHashN, D nHashD,V l){ 





 private void setVal(N nHashN, D nHashD,V l){ 







 val.put(nHashN, nHashD,l);





 val.put(nHashN, nHashD,l);







 if(DEBUG)





 if(DEBUG)







 System.err.println("VALUE: "+((SootMethod)icfg.getMethodOf(nHashN)).getSignature()+" "+nHashN+" "+nHashD+ " " + l);





 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);







 }





 }





















 





 



...@@ -639,33 +625,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -639,33 +625,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 });





 });







 }





 }





















 public void dumpResults() {









 try {









 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));









 List<String> res = new ArrayList<String>();









 for(Cell<N, D, V> entry: val.cellSet()) {









 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());









 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();









 int i=0;









 for (Unit unit : units) {









 if(unit==entry.getRowKey())









 break;









 i++;









 }









 









 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());









 }









 Collections.sort(res);









 for (String string : res) {









 out.println(string);









 }









 out.flush();









 out.close();









 } catch (FileNotFoundException e) {









 e.printStackTrace();









 }









 }



















 public void printStats() {





 public void printStats() {







 if(DEBUG) {





 if(DEBUG) {







 if(ffCache!=null)





 if(ffCache!=null)



......















src/de/bodden/ide/solver/IFDSSolver.java

→

src-generic/de/bodden/ide/solver/IFDSSolver.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/solver/JumpFunctions.java

→

src-generic/de/bodden/ide/solver/JumpFunctions.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/solver/PathEdge.java

→

src-generic/de/bodden/ide/solver/PathEdge.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/solver/SummaryFunctions.java

→

src-generic/de/bodden/ide/solver/SummaryFunctions.java








View file @ 0c5bf04d





File moved













src-soot/soot/jimple/toolkits/ide/DefaultJimpleIDETabulationProblem.java



0 → 100644







View file @ 0c5bf04d














package soot.jimple.toolkits.ide;



















import soot.SootMethod;









import soot.Unit;









import de.bodden.ide.InterproceduralCFG;









import de.bodden.ide.template.DefaultIDETabulationProblem;



















/**









 *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods.









 */









public abstract class DefaultJimpleIDETabulationProblem<D,V,I extends InterproceduralCFG<Unit,SootMethod>>









 extends DefaultIDETabulationProblem<Unit,D,SootMethod,V,I> {



















 public DefaultJimpleIDETabulationProblem(I icfg) {









 super(icfg);









 }









 









}















src/de/bodden/ide/Main.java

→

src-soot/soot/jimple/toolkits/ide/Main.java








View file @ 0c5bf04d












package de.bodden.ide;





package soot.jimple.toolkits.ide;





















import java.util.Map;





import java.util.Map;





















import de.bodden.ide.problems.IFDSLocalInfoFlow;





import de.bodden.ide.IFDSTabulationProblem;









import de.bodden.ide.InterproceduralCFG;







import de.bodden.ide.solver.IFDSSolver;





import de.bodden.ide.solver.IFDSSolver;







import de.bodden.ide.template.JimpleBasedInterproceduralCFG;























import soot.Local;





import soot.Local;







import soot.PackManager;





import soot.PackManager;



...@@ -13,6 +13,8 @@ import soot.SceneTransformer;
...@@ -13,6 +13,8 @@ import soot.SceneTransformer;






import soot.SootMethod;





import soot.SootMethod;







import soot.Transform;





import soot.Transform;







import soot.Unit;





import soot.Unit;









import soot.jimple.toolkits.ide.exampleproblems.IFDSLocalInfoFlow;









import soot.jimple.toolkits.ide.icfg.JimpleBasedInterproceduralCFG;





















public class Main {





public class Main {

















......















src/de/bodden/ide/problems/IFDSLocalInfoFlow.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSLocalInfoFlow.java








View file @ 0c5bf04d












package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -13,7 +13,6 @@ import de.bodden.ide.flowfunc.Identity;
...@@ -13,7 +13,6 @@ import de.bodden.ide.flowfunc.Identity;






import de.bodden.ide.flowfunc.Kill;





import de.bodden.ide.flowfunc.Kill;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.flowfunc.Transfer;





import de.bodden.ide.flowfunc.Transfer;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.Local;





import soot.Local;







import soot.NullType;





import soot.NullType;



...@@ -29,8 +28,9 @@ import soot.jimple.ParameterRef;
...@@ -29,8 +28,9 @@ import soot.jimple.ParameterRef;






import soot.jimple.ReturnStmt;





import soot.jimple.ReturnStmt;







import soot.jimple.Stmt;





import soot.jimple.Stmt;







import soot.jimple.internal.JimpleLocal;





import soot.jimple.internal.JimpleLocal;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;





















public class IFDSLocalInfoFlow extends DefaultIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSLocalInfoFlow extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {





 public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {







 super(icfg); 





 super(icfg); 



......















src/de/bodden/ide/problems/IFDSPossibleTypes.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSPossibleTypes.java








View file @ 0c5bf04d












package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;
...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;






import de.bodden.ide.InterproceduralCFG;





import de.bodden.ide.InterproceduralCFG;







import de.bodden.ide.flowfunc.Identity;





import de.bodden.ide.flowfunc.Identity;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.Local;





import soot.Local;







import soot.PointsToAnalysis;





import soot.PointsToAnalysis;



...@@ -33,10 +32,11 @@ import soot.jimple.NewExpr;
...@@ -33,10 +32,11 @@ import soot.jimple.NewExpr;






import soot.jimple.Ref;





import soot.jimple.Ref;







import soot.jimple.ReturnStmt;





import soot.jimple.ReturnStmt;







import soot.jimple.Stmt;





import soot.jimple.Stmt;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;







import soot.toolkits.scalar.Pair;





import soot.toolkits.scalar.Pair;





















@SuppressWarnings("serial")





@SuppressWarnings("serial")







public class IFDSPossibleTypes extends DefaultIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSPossibleTypes extends DefaultJimpleIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {





 public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {







 super(icfg);





 super(icfg);



......















src/de/bodden/ide/problems/IFDSReachingDefinitions.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSReachingDefinitions.java








View file @ 0c5bf04d












package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;
...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;






import de.bodden.ide.InterproceduralCFG;





import de.bodden.ide.InterproceduralCFG;







import de.bodden.ide.flowfunc.Identity;





import de.bodden.ide.flowfunc.Identity;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.EquivalentValue;





import soot.EquivalentValue;







import soot.Local;





import soot.Local;



...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;
...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;






import soot.jimple.ReturnVoidStmt;





import soot.jimple.ReturnVoidStmt;







import soot.jimple.Stmt;





import soot.jimple.Stmt;







import soot.jimple.internal.JimpleLocal;





import soot.jimple.internal.JimpleLocal;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;







import soot.toolkits.scalar.Pair;





import soot.toolkits.scalar.Pair;





















public class IFDSReachingDefinitions extends DefaultIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSReachingDefinitions extends DefaultJimpleIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {







 public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {





 public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {







 super(icfg);





 super(icfg);







 }





 }



......















src/de/bodden/ide/problems/IFDSUninitializedVariables.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSUninitializedVariables.java








View file @ 0c5bf04d












package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -12,7 +12,6 @@ import de.bodden.ide.InterproceduralCFG;
...@@ -12,7 +12,6 @@ import de.bodden.ide.InterproceduralCFG;






import de.bodden.ide.flowfunc.Identity;





import de.bodden.ide.flowfunc.Identity;







import de.bodden.ide.flowfunc.Kill;





import de.bodden.ide.flowfunc.Kill;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.Local;





import soot.Local;







import soot.NullType;





import soot.NullType;



...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;
...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;






import soot.jimple.Stmt;





import soot.jimple.Stmt;







import soot.jimple.ThrowStmt;





import soot.jimple.ThrowStmt;







import soot.jimple.internal.JimpleLocal;





import soot.jimple.internal.JimpleLocal;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;







import soot.util.Chain;





import soot.util.Chain;





















public class IFDSUninitializedVariables extends DefaultIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSUninitializedVariables extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {





 public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {







 super(icfg); 





 super(icfg); 



......















src/de/bodden/ide/template/BackwardsInterproceduralCFG.java

→

src-soot/soot/jimple/toolkits/ide/icfg/BackwardsInterproceduralCFG.java








View file @ 0c5bf04d












package de.bodden.ide.template;





package soot.jimple.toolkits.ide.icfg;





















import soot.Body;





import soot.Body;







import soot.Unit;





import soot.Unit;



......










Prev


1


2


3


Next















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
0c5bf04d


authored
Nov 28, 2012
by


Eric Bodden



Browse files




moved dependencies on soot into separate package







parent
92bb16ad













Changes
43




Hide whitespace changes

Inline
Side-by-side















src/de/bodden/ide/edgefunc/AllTop.java

→

src-generic/de/bodden/ide/edgefunc/AllTop.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/edgefunc/EdgeIdentity.java

→

src-generic/de/bodden/ide/edgefunc/EdgeIdentity.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/Compose.java

→

src-generic/de/bodden/ide/flowfunc/Compose.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/Gen.java

→

src-generic/de/bodden/ide/flowfunc/Gen.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/Identity.java

→

src-generic/de/bodden/ide/flowfunc/Identity.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/Kill.java

→

src-generic/de/bodden/ide/flowfunc/Kill.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/KillAll.java

→

src-generic/de/bodden/ide/flowfunc/KillAll.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/Transfer.java

→

src-generic/de/bodden/ide/flowfunc/Transfer.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/solver/IDESolver.java

→

src-generic/de/bodden/ide/solver/IDESolver.java








View file @ 0c5bf04d












package de.bodden.ide.solver;





package de.bodden.ide.solver;



































import java.io.FileNotFoundException;









import java.io.FileOutputStream;









import java.io.PrintWriter;









import java.util.ArrayList;









import java.util.Collection;





import java.util.Collection;







import java.util.Collections;





import java.util.Collections;







import java.util.HashMap;





import java.util.HashMap;



...@@ -21,11 +17,6 @@ import java.util.concurrent.Executors;
...@@ -21,11 +17,6 @@ import java.util.concurrent.Executors;






import java.util.concurrent.TimeUnit;





import java.util.concurrent.TimeUnit;







import java.util.concurrent.atomic.AtomicInteger;





import java.util.concurrent.atomic.AtomicInteger;





















import soot.PatchingChain;









import soot.SootMethod;









import soot.Unit;









import soot.toolkits.scalar.Pair;



















import com.google.common.base.Predicate;





import com.google.common.base.Predicate;







import com.google.common.cache.CacheBuilder;





import com.google.common.cache.CacheBuilder;







import com.google.common.collect.HashBasedTable;





import com.google.common.collect.HashBasedTable;



...@@ -57,9 +48,9 @@ import de.bodden.ide.edgefunc.EdgeIdentity;
...@@ -57,9 +48,9 @@ import de.bodden.ide.edgefunc.EdgeIdentity;






 * is to produce, as much as possible, reproducible benchmarking results. We have found





 * is to produce, as much as possible, reproducible benchmarking results. We have found







 * that the iteration order can matter a lot in terms of speed.





 * that the iteration order can matter a lot in terms of speed.







 *





 *







 * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}.





 * @param <N> The type of nodes in the interprocedural control-flow graph. 







 * @param <D> The type of data-flow facts to be computed by the tabulation problem.





 * @param <D> The type of data-flow facts to be computed by the tabulation problem.







 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.





 * @param <M> The type of objects used to represent methods.







 * @param <V> The type of values to be computed along flow edges.





 * @param <V> The type of values to be computed along flow edges.







 * @param <I> The type of inter-procedural control-flow graph being used.





 * @param <I> The type of inter-procedural control-flow graph being used.







 */





 */



...@@ -69,8 +60,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -69,8 +60,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 





 







 private static final boolean DEBUG = false;





 private static final boolean DEBUG = false;







 





 







 private static final boolean DUMP_RESULTS = false;









 









 //executor for dispatching individual compute jobs (may be multi-threaded)





 //executor for dispatching individual compute jobs (may be multi-threaded)







 @DontSynchronize("only used by single thread")





 @DontSynchronize("only used by single thread")







 private ExecutorService executor;





 private ExecutorService executor;



...@@ -233,9 +222,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -233,9 +222,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 if(DEBUG) 





 if(DEBUG) 







 printStats();





 printStats();







 





 







 if(DUMP_RESULTS)









 dumpResults();









 









 executor.shutdown();





 executor.shutdown();







 }





 }

















...@@ -387,7 +373,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -387,7 +373,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 private void setVal(N nHashN, D nHashD,V l){ 





 private void setVal(N nHashN, D nHashD,V l){ 







 val.put(nHashN, nHashD,l);





 val.put(nHashN, nHashD,l);







 if(DEBUG)





 if(DEBUG)







 System.err.println("VALUE: "+((SootMethod)icfg.getMethodOf(nHashN)).getSignature()+" "+nHashN+" "+nHashD+ " " + l);





 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);







 }





 }





















 





 



...@@ -639,33 +625,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -639,33 +625,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 });





 });







 }





 }





















 public void dumpResults() {









 try {









 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));









 List<String> res = new ArrayList<String>();









 for(Cell<N, D, V> entry: val.cellSet()) {









 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());









 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();









 int i=0;









 for (Unit unit : units) {









 if(unit==entry.getRowKey())









 break;









 i++;









 }









 









 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());









 }









 Collections.sort(res);









 for (String string : res) {









 out.println(string);









 }









 out.flush();









 out.close();









 } catch (FileNotFoundException e) {









 e.printStackTrace();









 }









 }



















 public void printStats() {





 public void printStats() {







 if(DEBUG) {





 if(DEBUG) {







 if(ffCache!=null)





 if(ffCache!=null)



......















src/de/bodden/ide/solver/IFDSSolver.java

→

src-generic/de/bodden/ide/solver/IFDSSolver.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/solver/JumpFunctions.java

→

src-generic/de/bodden/ide/solver/JumpFunctions.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/solver/PathEdge.java

→

src-generic/de/bodden/ide/solver/PathEdge.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/solver/SummaryFunctions.java

→

src-generic/de/bodden/ide/solver/SummaryFunctions.java








View file @ 0c5bf04d





File moved













src-soot/soot/jimple/toolkits/ide/DefaultJimpleIDETabulationProblem.java



0 → 100644







View file @ 0c5bf04d














package soot.jimple.toolkits.ide;



















import soot.SootMethod;









import soot.Unit;









import de.bodden.ide.InterproceduralCFG;









import de.bodden.ide.template.DefaultIDETabulationProblem;



















/**









 *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods.









 */









public abstract class DefaultJimpleIDETabulationProblem<D,V,I extends InterproceduralCFG<Unit,SootMethod>>









 extends DefaultIDETabulationProblem<Unit,D,SootMethod,V,I> {



















 public DefaultJimpleIDETabulationProblem(I icfg) {









 super(icfg);









 }









 









}















src/de/bodden/ide/Main.java

→

src-soot/soot/jimple/toolkits/ide/Main.java








View file @ 0c5bf04d












package de.bodden.ide;





package soot.jimple.toolkits.ide;





















import java.util.Map;





import java.util.Map;





















import de.bodden.ide.problems.IFDSLocalInfoFlow;





import de.bodden.ide.IFDSTabulationProblem;









import de.bodden.ide.InterproceduralCFG;







import de.bodden.ide.solver.IFDSSolver;





import de.bodden.ide.solver.IFDSSolver;







import de.bodden.ide.template.JimpleBasedInterproceduralCFG;























import soot.Local;





import soot.Local;







import soot.PackManager;





import soot.PackManager;



...@@ -13,6 +13,8 @@ import soot.SceneTransformer;
...@@ -13,6 +13,8 @@ import soot.SceneTransformer;






import soot.SootMethod;





import soot.SootMethod;







import soot.Transform;





import soot.Transform;







import soot.Unit;





import soot.Unit;









import soot.jimple.toolkits.ide.exampleproblems.IFDSLocalInfoFlow;









import soot.jimple.toolkits.ide.icfg.JimpleBasedInterproceduralCFG;





















public class Main {





public class Main {

















......















src/de/bodden/ide/problems/IFDSLocalInfoFlow.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSLocalInfoFlow.java








View file @ 0c5bf04d












package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -13,7 +13,6 @@ import de.bodden.ide.flowfunc.Identity;
...@@ -13,7 +13,6 @@ import de.bodden.ide.flowfunc.Identity;






import de.bodden.ide.flowfunc.Kill;





import de.bodden.ide.flowfunc.Kill;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.flowfunc.Transfer;





import de.bodden.ide.flowfunc.Transfer;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.Local;





import soot.Local;







import soot.NullType;





import soot.NullType;



...@@ -29,8 +28,9 @@ import soot.jimple.ParameterRef;
...@@ -29,8 +28,9 @@ import soot.jimple.ParameterRef;






import soot.jimple.ReturnStmt;





import soot.jimple.ReturnStmt;







import soot.jimple.Stmt;





import soot.jimple.Stmt;







import soot.jimple.internal.JimpleLocal;





import soot.jimple.internal.JimpleLocal;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;





















public class IFDSLocalInfoFlow extends DefaultIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSLocalInfoFlow extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {





 public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {







 super(icfg); 





 super(icfg); 



......















src/de/bodden/ide/problems/IFDSPossibleTypes.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSPossibleTypes.java








View file @ 0c5bf04d












package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;
...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;






import de.bodden.ide.InterproceduralCFG;





import de.bodden.ide.InterproceduralCFG;







import de.bodden.ide.flowfunc.Identity;





import de.bodden.ide.flowfunc.Identity;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.Local;





import soot.Local;







import soot.PointsToAnalysis;





import soot.PointsToAnalysis;



...@@ -33,10 +32,11 @@ import soot.jimple.NewExpr;
...@@ -33,10 +32,11 @@ import soot.jimple.NewExpr;






import soot.jimple.Ref;





import soot.jimple.Ref;







import soot.jimple.ReturnStmt;





import soot.jimple.ReturnStmt;







import soot.jimple.Stmt;





import soot.jimple.Stmt;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;







import soot.toolkits.scalar.Pair;





import soot.toolkits.scalar.Pair;





















@SuppressWarnings("serial")





@SuppressWarnings("serial")







public class IFDSPossibleTypes extends DefaultIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSPossibleTypes extends DefaultJimpleIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {





 public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {







 super(icfg);





 super(icfg);



......















src/de/bodden/ide/problems/IFDSReachingDefinitions.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSReachingDefinitions.java








View file @ 0c5bf04d












package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;
...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;






import de.bodden.ide.InterproceduralCFG;





import de.bodden.ide.InterproceduralCFG;







import de.bodden.ide.flowfunc.Identity;





import de.bodden.ide.flowfunc.Identity;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.EquivalentValue;





import soot.EquivalentValue;







import soot.Local;





import soot.Local;



...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;
...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;






import soot.jimple.ReturnVoidStmt;





import soot.jimple.ReturnVoidStmt;







import soot.jimple.Stmt;





import soot.jimple.Stmt;







import soot.jimple.internal.JimpleLocal;





import soot.jimple.internal.JimpleLocal;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;







import soot.toolkits.scalar.Pair;





import soot.toolkits.scalar.Pair;





















public class IFDSReachingDefinitions extends DefaultIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSReachingDefinitions extends DefaultJimpleIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {







 public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {





 public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {







 super(icfg);





 super(icfg);







 }





 }



......















src/de/bodden/ide/problems/IFDSUninitializedVariables.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSUninitializedVariables.java








View file @ 0c5bf04d












package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -12,7 +12,6 @@ import de.bodden.ide.InterproceduralCFG;
...@@ -12,7 +12,6 @@ import de.bodden.ide.InterproceduralCFG;






import de.bodden.ide.flowfunc.Identity;





import de.bodden.ide.flowfunc.Identity;







import de.bodden.ide.flowfunc.Kill;





import de.bodden.ide.flowfunc.Kill;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.Local;





import soot.Local;







import soot.NullType;





import soot.NullType;



...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;
...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;






import soot.jimple.Stmt;





import soot.jimple.Stmt;







import soot.jimple.ThrowStmt;





import soot.jimple.ThrowStmt;







import soot.jimple.internal.JimpleLocal;





import soot.jimple.internal.JimpleLocal;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;







import soot.util.Chain;





import soot.util.Chain;





















public class IFDSUninitializedVariables extends DefaultIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSUninitializedVariables extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {





 public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {







 super(icfg); 





 super(icfg); 



......















src/de/bodden/ide/template/BackwardsInterproceduralCFG.java

→

src-soot/soot/jimple/toolkits/ide/icfg/BackwardsInterproceduralCFG.java








View file @ 0c5bf04d












package de.bodden.ide.template;





package soot.jimple.toolkits.ide.icfg;





















import soot.Body;





import soot.Body;







import soot.Unit;





import soot.Unit;



......










Prev


1


2


3


Next















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
0c5bf04d


authored
Nov 28, 2012
by


Eric Bodden



Browse files



Commit
0c5bf04d


authored
Nov 28, 2012
by


Eric Bodden

0c5bf04dauthoredbyEric Bodden

moved dependencies on soot into separate package






parent
92bb16ad
















parent
92bb16ad





parent












Changes
43
43


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/de/bodden/ide/edgefunc/AllTop.java

→

src-generic/de/bodden/ide/edgefunc/AllTop.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/edgefunc/EdgeIdentity.java

→

src-generic/de/bodden/ide/edgefunc/EdgeIdentity.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/Compose.java

→

src-generic/de/bodden/ide/flowfunc/Compose.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/Gen.java

→

src-generic/de/bodden/ide/flowfunc/Gen.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/Identity.java

→

src-generic/de/bodden/ide/flowfunc/Identity.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/Kill.java

→

src-generic/de/bodden/ide/flowfunc/Kill.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/KillAll.java

→

src-generic/de/bodden/ide/flowfunc/KillAll.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/flowfunc/Transfer.java

→

src-generic/de/bodden/ide/flowfunc/Transfer.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/solver/IDESolver.java

→

src-generic/de/bodden/ide/solver/IDESolver.java








View file @ 0c5bf04d












package de.bodden.ide.solver;





package de.bodden.ide.solver;



































import java.io.FileNotFoundException;









import java.io.FileOutputStream;









import java.io.PrintWriter;









import java.util.ArrayList;









import java.util.Collection;





import java.util.Collection;







import java.util.Collections;





import java.util.Collections;







import java.util.HashMap;





import java.util.HashMap;



...@@ -21,11 +17,6 @@ import java.util.concurrent.Executors;
...@@ -21,11 +17,6 @@ import java.util.concurrent.Executors;






import java.util.concurrent.TimeUnit;





import java.util.concurrent.TimeUnit;







import java.util.concurrent.atomic.AtomicInteger;





import java.util.concurrent.atomic.AtomicInteger;





















import soot.PatchingChain;









import soot.SootMethod;









import soot.Unit;









import soot.toolkits.scalar.Pair;



















import com.google.common.base.Predicate;





import com.google.common.base.Predicate;







import com.google.common.cache.CacheBuilder;





import com.google.common.cache.CacheBuilder;







import com.google.common.collect.HashBasedTable;





import com.google.common.collect.HashBasedTable;



...@@ -57,9 +48,9 @@ import de.bodden.ide.edgefunc.EdgeIdentity;
...@@ -57,9 +48,9 @@ import de.bodden.ide.edgefunc.EdgeIdentity;






 * is to produce, as much as possible, reproducible benchmarking results. We have found





 * is to produce, as much as possible, reproducible benchmarking results. We have found







 * that the iteration order can matter a lot in terms of speed.





 * that the iteration order can matter a lot in terms of speed.







 *





 *







 * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}.





 * @param <N> The type of nodes in the interprocedural control-flow graph. 







 * @param <D> The type of data-flow facts to be computed by the tabulation problem.





 * @param <D> The type of data-flow facts to be computed by the tabulation problem.







 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.





 * @param <M> The type of objects used to represent methods.







 * @param <V> The type of values to be computed along flow edges.





 * @param <V> The type of values to be computed along flow edges.







 * @param <I> The type of inter-procedural control-flow graph being used.





 * @param <I> The type of inter-procedural control-flow graph being used.







 */





 */



...@@ -69,8 +60,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -69,8 +60,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 





 







 private static final boolean DEBUG = false;





 private static final boolean DEBUG = false;







 





 







 private static final boolean DUMP_RESULTS = false;









 









 //executor for dispatching individual compute jobs (may be multi-threaded)





 //executor for dispatching individual compute jobs (may be multi-threaded)







 @DontSynchronize("only used by single thread")





 @DontSynchronize("only used by single thread")







 private ExecutorService executor;





 private ExecutorService executor;



...@@ -233,9 +222,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -233,9 +222,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 if(DEBUG) 





 if(DEBUG) 







 printStats();





 printStats();







 





 







 if(DUMP_RESULTS)









 dumpResults();









 









 executor.shutdown();





 executor.shutdown();







 }





 }

















...@@ -387,7 +373,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -387,7 +373,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 private void setVal(N nHashN, D nHashD,V l){ 





 private void setVal(N nHashN, D nHashD,V l){ 







 val.put(nHashN, nHashD,l);





 val.put(nHashN, nHashD,l);







 if(DEBUG)





 if(DEBUG)







 System.err.println("VALUE: "+((SootMethod)icfg.getMethodOf(nHashN)).getSignature()+" "+nHashN+" "+nHashD+ " " + l);





 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);







 }





 }





















 





 



...@@ -639,33 +625,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -639,33 +625,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 });





 });







 }





 }





















 public void dumpResults() {









 try {









 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));









 List<String> res = new ArrayList<String>();









 for(Cell<N, D, V> entry: val.cellSet()) {









 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());









 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();









 int i=0;









 for (Unit unit : units) {









 if(unit==entry.getRowKey())









 break;









 i++;









 }









 









 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());









 }









 Collections.sort(res);









 for (String string : res) {









 out.println(string);









 }









 out.flush();









 out.close();









 } catch (FileNotFoundException e) {









 e.printStackTrace();









 }









 }



















 public void printStats() {





 public void printStats() {







 if(DEBUG) {





 if(DEBUG) {







 if(ffCache!=null)





 if(ffCache!=null)



......















src/de/bodden/ide/solver/IFDSSolver.java

→

src-generic/de/bodden/ide/solver/IFDSSolver.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/solver/JumpFunctions.java

→

src-generic/de/bodden/ide/solver/JumpFunctions.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/solver/PathEdge.java

→

src-generic/de/bodden/ide/solver/PathEdge.java








View file @ 0c5bf04d





File moved













src/de/bodden/ide/solver/SummaryFunctions.java

→

src-generic/de/bodden/ide/solver/SummaryFunctions.java








View file @ 0c5bf04d





File moved













src-soot/soot/jimple/toolkits/ide/DefaultJimpleIDETabulationProblem.java



0 → 100644







View file @ 0c5bf04d














package soot.jimple.toolkits.ide;



















import soot.SootMethod;









import soot.Unit;









import de.bodden.ide.InterproceduralCFG;









import de.bodden.ide.template.DefaultIDETabulationProblem;



















/**









 *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods.









 */









public abstract class DefaultJimpleIDETabulationProblem<D,V,I extends InterproceduralCFG<Unit,SootMethod>>









 extends DefaultIDETabulationProblem<Unit,D,SootMethod,V,I> {



















 public DefaultJimpleIDETabulationProblem(I icfg) {









 super(icfg);









 }









 









}















src/de/bodden/ide/Main.java

→

src-soot/soot/jimple/toolkits/ide/Main.java








View file @ 0c5bf04d












package de.bodden.ide;





package soot.jimple.toolkits.ide;





















import java.util.Map;





import java.util.Map;





















import de.bodden.ide.problems.IFDSLocalInfoFlow;





import de.bodden.ide.IFDSTabulationProblem;









import de.bodden.ide.InterproceduralCFG;







import de.bodden.ide.solver.IFDSSolver;





import de.bodden.ide.solver.IFDSSolver;







import de.bodden.ide.template.JimpleBasedInterproceduralCFG;























import soot.Local;





import soot.Local;







import soot.PackManager;





import soot.PackManager;



...@@ -13,6 +13,8 @@ import soot.SceneTransformer;
...@@ -13,6 +13,8 @@ import soot.SceneTransformer;






import soot.SootMethod;





import soot.SootMethod;







import soot.Transform;





import soot.Transform;







import soot.Unit;





import soot.Unit;









import soot.jimple.toolkits.ide.exampleproblems.IFDSLocalInfoFlow;









import soot.jimple.toolkits.ide.icfg.JimpleBasedInterproceduralCFG;





















public class Main {





public class Main {

















......















src/de/bodden/ide/problems/IFDSLocalInfoFlow.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSLocalInfoFlow.java








View file @ 0c5bf04d












package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -13,7 +13,6 @@ import de.bodden.ide.flowfunc.Identity;
...@@ -13,7 +13,6 @@ import de.bodden.ide.flowfunc.Identity;






import de.bodden.ide.flowfunc.Kill;





import de.bodden.ide.flowfunc.Kill;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.flowfunc.Transfer;





import de.bodden.ide.flowfunc.Transfer;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.Local;





import soot.Local;







import soot.NullType;





import soot.NullType;



...@@ -29,8 +28,9 @@ import soot.jimple.ParameterRef;
...@@ -29,8 +28,9 @@ import soot.jimple.ParameterRef;






import soot.jimple.ReturnStmt;





import soot.jimple.ReturnStmt;







import soot.jimple.Stmt;





import soot.jimple.Stmt;







import soot.jimple.internal.JimpleLocal;





import soot.jimple.internal.JimpleLocal;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;





















public class IFDSLocalInfoFlow extends DefaultIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSLocalInfoFlow extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {





 public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {







 super(icfg); 





 super(icfg); 



......















src/de/bodden/ide/problems/IFDSPossibleTypes.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSPossibleTypes.java








View file @ 0c5bf04d












package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;
...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;






import de.bodden.ide.InterproceduralCFG;





import de.bodden.ide.InterproceduralCFG;







import de.bodden.ide.flowfunc.Identity;





import de.bodden.ide.flowfunc.Identity;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.Local;





import soot.Local;







import soot.PointsToAnalysis;





import soot.PointsToAnalysis;



...@@ -33,10 +32,11 @@ import soot.jimple.NewExpr;
...@@ -33,10 +32,11 @@ import soot.jimple.NewExpr;






import soot.jimple.Ref;





import soot.jimple.Ref;







import soot.jimple.ReturnStmt;





import soot.jimple.ReturnStmt;







import soot.jimple.Stmt;





import soot.jimple.Stmt;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;







import soot.toolkits.scalar.Pair;





import soot.toolkits.scalar.Pair;





















@SuppressWarnings("serial")





@SuppressWarnings("serial")







public class IFDSPossibleTypes extends DefaultIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSPossibleTypes extends DefaultJimpleIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {





 public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {







 super(icfg);





 super(icfg);



......















src/de/bodden/ide/problems/IFDSReachingDefinitions.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSReachingDefinitions.java








View file @ 0c5bf04d












package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;
...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;






import de.bodden.ide.InterproceduralCFG;





import de.bodden.ide.InterproceduralCFG;







import de.bodden.ide.flowfunc.Identity;





import de.bodden.ide.flowfunc.Identity;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.EquivalentValue;





import soot.EquivalentValue;







import soot.Local;





import soot.Local;



...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;
...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;






import soot.jimple.ReturnVoidStmt;





import soot.jimple.ReturnVoidStmt;







import soot.jimple.Stmt;





import soot.jimple.Stmt;







import soot.jimple.internal.JimpleLocal;





import soot.jimple.internal.JimpleLocal;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;







import soot.toolkits.scalar.Pair;





import soot.toolkits.scalar.Pair;





















public class IFDSReachingDefinitions extends DefaultIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSReachingDefinitions extends DefaultJimpleIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {







 public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {





 public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {







 super(icfg);





 super(icfg);







 }





 }



......















src/de/bodden/ide/problems/IFDSUninitializedVariables.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSUninitializedVariables.java








View file @ 0c5bf04d












package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -12,7 +12,6 @@ import de.bodden.ide.InterproceduralCFG;
...@@ -12,7 +12,6 @@ import de.bodden.ide.InterproceduralCFG;






import de.bodden.ide.flowfunc.Identity;





import de.bodden.ide.flowfunc.Identity;







import de.bodden.ide.flowfunc.Kill;





import de.bodden.ide.flowfunc.Kill;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.Local;





import soot.Local;







import soot.NullType;





import soot.NullType;



...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;
...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;






import soot.jimple.Stmt;





import soot.jimple.Stmt;







import soot.jimple.ThrowStmt;





import soot.jimple.ThrowStmt;







import soot.jimple.internal.JimpleLocal;





import soot.jimple.internal.JimpleLocal;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;







import soot.util.Chain;





import soot.util.Chain;





















public class IFDSUninitializedVariables extends DefaultIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSUninitializedVariables extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {





 public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {







 super(icfg); 





 super(icfg); 



......















src/de/bodden/ide/template/BackwardsInterproceduralCFG.java

→

src-soot/soot/jimple/toolkits/ide/icfg/BackwardsInterproceduralCFG.java








View file @ 0c5bf04d












package de.bodden.ide.template;





package soot.jimple.toolkits.ide.icfg;





















import soot.Body;





import soot.Body;







import soot.Unit;





import soot.Unit;



......










Prev


1


2


3


Next













src/de/bodden/ide/edgefunc/AllTop.java

→

src-generic/de/bodden/ide/edgefunc/AllTop.java








View file @ 0c5bf04d





File moved











src/de/bodden/ide/edgefunc/AllTop.java

→

src-generic/de/bodden/ide/edgefunc/AllTop.java








View file @ 0c5bf04d








src/de/bodden/ide/edgefunc/AllTop.java

→

src-generic/de/bodden/ide/edgefunc/AllTop.java





-generic




View file @ 0c5bf04d


0c5bf04d


File moved




File moved


File moved









src/de/bodden/ide/edgefunc/EdgeIdentity.java

→

src-generic/de/bodden/ide/edgefunc/EdgeIdentity.java








View file @ 0c5bf04d





File moved











src/de/bodden/ide/edgefunc/EdgeIdentity.java

→

src-generic/de/bodden/ide/edgefunc/EdgeIdentity.java








View file @ 0c5bf04d








src/de/bodden/ide/edgefunc/EdgeIdentity.java

→

src-generic/de/bodden/ide/edgefunc/EdgeIdentity.java





-generic




View file @ 0c5bf04d


0c5bf04d


File moved




File moved


File moved









src/de/bodden/ide/flowfunc/Compose.java

→

src-generic/de/bodden/ide/flowfunc/Compose.java








View file @ 0c5bf04d





File moved











src/de/bodden/ide/flowfunc/Compose.java

→

src-generic/de/bodden/ide/flowfunc/Compose.java








View file @ 0c5bf04d








src/de/bodden/ide/flowfunc/Compose.java

→

src-generic/de/bodden/ide/flowfunc/Compose.java





-generic




View file @ 0c5bf04d


0c5bf04d


File moved




File moved


File moved









src/de/bodden/ide/flowfunc/Gen.java

→

src-generic/de/bodden/ide/flowfunc/Gen.java








View file @ 0c5bf04d





File moved











src/de/bodden/ide/flowfunc/Gen.java

→

src-generic/de/bodden/ide/flowfunc/Gen.java








View file @ 0c5bf04d








src/de/bodden/ide/flowfunc/Gen.java

→

src-generic/de/bodden/ide/flowfunc/Gen.java





-generic




View file @ 0c5bf04d


0c5bf04d


File moved




File moved


File moved









src/de/bodden/ide/flowfunc/Identity.java

→

src-generic/de/bodden/ide/flowfunc/Identity.java








View file @ 0c5bf04d





File moved











src/de/bodden/ide/flowfunc/Identity.java

→

src-generic/de/bodden/ide/flowfunc/Identity.java








View file @ 0c5bf04d








src/de/bodden/ide/flowfunc/Identity.java

→

src-generic/de/bodden/ide/flowfunc/Identity.java





-generic




View file @ 0c5bf04d


0c5bf04d


File moved




File moved


File moved









src/de/bodden/ide/flowfunc/Kill.java

→

src-generic/de/bodden/ide/flowfunc/Kill.java








View file @ 0c5bf04d





File moved











src/de/bodden/ide/flowfunc/Kill.java

→

src-generic/de/bodden/ide/flowfunc/Kill.java








View file @ 0c5bf04d








src/de/bodden/ide/flowfunc/Kill.java

→

src-generic/de/bodden/ide/flowfunc/Kill.java





-generic




View file @ 0c5bf04d


0c5bf04d


File moved




File moved


File moved









src/de/bodden/ide/flowfunc/KillAll.java

→

src-generic/de/bodden/ide/flowfunc/KillAll.java








View file @ 0c5bf04d





File moved











src/de/bodden/ide/flowfunc/KillAll.java

→

src-generic/de/bodden/ide/flowfunc/KillAll.java








View file @ 0c5bf04d








src/de/bodden/ide/flowfunc/KillAll.java

→

src-generic/de/bodden/ide/flowfunc/KillAll.java





-generic




View file @ 0c5bf04d


0c5bf04d


File moved




File moved


File moved









src/de/bodden/ide/flowfunc/Transfer.java

→

src-generic/de/bodden/ide/flowfunc/Transfer.java








View file @ 0c5bf04d





File moved











src/de/bodden/ide/flowfunc/Transfer.java

→

src-generic/de/bodden/ide/flowfunc/Transfer.java








View file @ 0c5bf04d








src/de/bodden/ide/flowfunc/Transfer.java

→

src-generic/de/bodden/ide/flowfunc/Transfer.java





-generic




View file @ 0c5bf04d


0c5bf04d


File moved




File moved


File moved









src/de/bodden/ide/solver/IDESolver.java

→

src-generic/de/bodden/ide/solver/IDESolver.java








View file @ 0c5bf04d












package de.bodden.ide.solver;





package de.bodden.ide.solver;



































import java.io.FileNotFoundException;









import java.io.FileOutputStream;









import java.io.PrintWriter;









import java.util.ArrayList;









import java.util.Collection;





import java.util.Collection;







import java.util.Collections;





import java.util.Collections;







import java.util.HashMap;





import java.util.HashMap;



...@@ -21,11 +17,6 @@ import java.util.concurrent.Executors;
...@@ -21,11 +17,6 @@ import java.util.concurrent.Executors;






import java.util.concurrent.TimeUnit;





import java.util.concurrent.TimeUnit;







import java.util.concurrent.atomic.AtomicInteger;





import java.util.concurrent.atomic.AtomicInteger;





















import soot.PatchingChain;









import soot.SootMethod;









import soot.Unit;









import soot.toolkits.scalar.Pair;



















import com.google.common.base.Predicate;





import com.google.common.base.Predicate;







import com.google.common.cache.CacheBuilder;





import com.google.common.cache.CacheBuilder;







import com.google.common.collect.HashBasedTable;





import com.google.common.collect.HashBasedTable;



...@@ -57,9 +48,9 @@ import de.bodden.ide.edgefunc.EdgeIdentity;
...@@ -57,9 +48,9 @@ import de.bodden.ide.edgefunc.EdgeIdentity;






 * is to produce, as much as possible, reproducible benchmarking results. We have found





 * is to produce, as much as possible, reproducible benchmarking results. We have found







 * that the iteration order can matter a lot in terms of speed.





 * that the iteration order can matter a lot in terms of speed.







 *





 *







 * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}.





 * @param <N> The type of nodes in the interprocedural control-flow graph. 







 * @param <D> The type of data-flow facts to be computed by the tabulation problem.





 * @param <D> The type of data-flow facts to be computed by the tabulation problem.







 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.





 * @param <M> The type of objects used to represent methods.







 * @param <V> The type of values to be computed along flow edges.





 * @param <V> The type of values to be computed along flow edges.







 * @param <I> The type of inter-procedural control-flow graph being used.





 * @param <I> The type of inter-procedural control-flow graph being used.







 */





 */



...@@ -69,8 +60,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -69,8 +60,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 





 







 private static final boolean DEBUG = false;





 private static final boolean DEBUG = false;







 





 







 private static final boolean DUMP_RESULTS = false;









 









 //executor for dispatching individual compute jobs (may be multi-threaded)





 //executor for dispatching individual compute jobs (may be multi-threaded)







 @DontSynchronize("only used by single thread")





 @DontSynchronize("only used by single thread")







 private ExecutorService executor;





 private ExecutorService executor;



...@@ -233,9 +222,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -233,9 +222,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 if(DEBUG) 





 if(DEBUG) 







 printStats();





 printStats();







 





 







 if(DUMP_RESULTS)









 dumpResults();









 









 executor.shutdown();





 executor.shutdown();







 }





 }

















...@@ -387,7 +373,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -387,7 +373,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 private void setVal(N nHashN, D nHashD,V l){ 





 private void setVal(N nHashN, D nHashD,V l){ 







 val.put(nHashN, nHashD,l);





 val.put(nHashN, nHashD,l);







 if(DEBUG)





 if(DEBUG)







 System.err.println("VALUE: "+((SootMethod)icfg.getMethodOf(nHashN)).getSignature()+" "+nHashN+" "+nHashD+ " " + l);





 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);







 }





 }





















 





 



...@@ -639,33 +625,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -639,33 +625,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 });





 });







 }





 }





















 public void dumpResults() {









 try {









 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));









 List<String> res = new ArrayList<String>();









 for(Cell<N, D, V> entry: val.cellSet()) {









 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());









 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();









 int i=0;









 for (Unit unit : units) {









 if(unit==entry.getRowKey())









 break;









 i++;









 }









 









 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());









 }









 Collections.sort(res);









 for (String string : res) {









 out.println(string);









 }









 out.flush();









 out.close();









 } catch (FileNotFoundException e) {









 e.printStackTrace();









 }









 }



















 public void printStats() {





 public void printStats() {







 if(DEBUG) {





 if(DEBUG) {







 if(ffCache!=null)





 if(ffCache!=null)



......













src/de/bodden/ide/solver/IDESolver.java

→

src-generic/de/bodden/ide/solver/IDESolver.java








View file @ 0c5bf04d








src/de/bodden/ide/solver/IDESolver.java

→

src-generic/de/bodden/ide/solver/IDESolver.java





-generic




View file @ 0c5bf04d


0c5bf04d









package de.bodden.ide.solver;





package de.bodden.ide.solver;



































import java.io.FileNotFoundException;









import java.io.FileOutputStream;









import java.io.PrintWriter;









import java.util.ArrayList;









import java.util.Collection;





import java.util.Collection;







import java.util.Collections;





import java.util.Collections;







import java.util.HashMap;





import java.util.HashMap;



...@@ -21,11 +17,6 @@ import java.util.concurrent.Executors;
...@@ -21,11 +17,6 @@ import java.util.concurrent.Executors;






import java.util.concurrent.TimeUnit;





import java.util.concurrent.TimeUnit;







import java.util.concurrent.atomic.AtomicInteger;





import java.util.concurrent.atomic.AtomicInteger;





















import soot.PatchingChain;









import soot.SootMethod;









import soot.Unit;









import soot.toolkits.scalar.Pair;



















import com.google.common.base.Predicate;





import com.google.common.base.Predicate;







import com.google.common.cache.CacheBuilder;





import com.google.common.cache.CacheBuilder;







import com.google.common.collect.HashBasedTable;





import com.google.common.collect.HashBasedTable;



...@@ -57,9 +48,9 @@ import de.bodden.ide.edgefunc.EdgeIdentity;
...@@ -57,9 +48,9 @@ import de.bodden.ide.edgefunc.EdgeIdentity;






 * is to produce, as much as possible, reproducible benchmarking results. We have found





 * is to produce, as much as possible, reproducible benchmarking results. We have found







 * that the iteration order can matter a lot in terms of speed.





 * that the iteration order can matter a lot in terms of speed.







 *





 *







 * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}.





 * @param <N> The type of nodes in the interprocedural control-flow graph. 







 * @param <D> The type of data-flow facts to be computed by the tabulation problem.





 * @param <D> The type of data-flow facts to be computed by the tabulation problem.







 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.





 * @param <M> The type of objects used to represent methods.







 * @param <V> The type of values to be computed along flow edges.





 * @param <V> The type of values to be computed along flow edges.







 * @param <I> The type of inter-procedural control-flow graph being used.





 * @param <I> The type of inter-procedural control-flow graph being used.







 */





 */



...@@ -69,8 +60,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -69,8 +60,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 





 







 private static final boolean DEBUG = false;





 private static final boolean DEBUG = false;







 





 







 private static final boolean DUMP_RESULTS = false;









 









 //executor for dispatching individual compute jobs (may be multi-threaded)





 //executor for dispatching individual compute jobs (may be multi-threaded)







 @DontSynchronize("only used by single thread")





 @DontSynchronize("only used by single thread")







 private ExecutorService executor;





 private ExecutorService executor;



...@@ -233,9 +222,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -233,9 +222,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 if(DEBUG) 





 if(DEBUG) 







 printStats();





 printStats();







 





 







 if(DUMP_RESULTS)









 dumpResults();









 









 executor.shutdown();





 executor.shutdown();







 }





 }

















...@@ -387,7 +373,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -387,7 +373,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 private void setVal(N nHashN, D nHashD,V l){ 





 private void setVal(N nHashN, D nHashD,V l){ 







 val.put(nHashN, nHashD,l);





 val.put(nHashN, nHashD,l);







 if(DEBUG)





 if(DEBUG)







 System.err.println("VALUE: "+((SootMethod)icfg.getMethodOf(nHashN)).getSignature()+" "+nHashN+" "+nHashD+ " " + l);





 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);







 }





 }





















 





 



...@@ -639,33 +625,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -639,33 +625,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 });





 });







 }





 }





















 public void dumpResults() {









 try {









 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));









 List<String> res = new ArrayList<String>();









 for(Cell<N, D, V> entry: val.cellSet()) {









 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());









 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();









 int i=0;









 for (Unit unit : units) {









 if(unit==entry.getRowKey())









 break;









 i++;









 }









 









 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());









 }









 Collections.sort(res);









 for (String string : res) {









 out.println(string);









 }









 out.flush();









 out.close();









 } catch (FileNotFoundException e) {









 e.printStackTrace();









 }









 }



















 public void printStats() {





 public void printStats() {







 if(DEBUG) {





 if(DEBUG) {







 if(ffCache!=null)





 if(ffCache!=null)



......













package de.bodden.ide.solver;





package de.bodden.ide.solver;



































import java.io.FileNotFoundException;









import java.io.FileOutputStream;









import java.io.PrintWriter;









import java.util.ArrayList;









import java.util.Collection;





import java.util.Collection;







import java.util.Collections;





import java.util.Collections;







import java.util.HashMap;





import java.util.HashMap;



...@@ -21,11 +17,6 @@ import java.util.concurrent.Executors;
...@@ -21,11 +17,6 @@ import java.util.concurrent.Executors;






import java.util.concurrent.TimeUnit;





import java.util.concurrent.TimeUnit;







import java.util.concurrent.atomic.AtomicInteger;





import java.util.concurrent.atomic.AtomicInteger;





















import soot.PatchingChain;









import soot.SootMethod;









import soot.Unit;









import soot.toolkits.scalar.Pair;



















import com.google.common.base.Predicate;





import com.google.common.base.Predicate;







import com.google.common.cache.CacheBuilder;





import com.google.common.cache.CacheBuilder;







import com.google.common.collect.HashBasedTable;





import com.google.common.collect.HashBasedTable;



...@@ -57,9 +48,9 @@ import de.bodden.ide.edgefunc.EdgeIdentity;
...@@ -57,9 +48,9 @@ import de.bodden.ide.edgefunc.EdgeIdentity;






 * is to produce, as much as possible, reproducible benchmarking results. We have found





 * is to produce, as much as possible, reproducible benchmarking results. We have found







 * that the iteration order can matter a lot in terms of speed.





 * that the iteration order can matter a lot in terms of speed.







 *





 *







 * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}.





 * @param <N> The type of nodes in the interprocedural control-flow graph. 







 * @param <D> The type of data-flow facts to be computed by the tabulation problem.





 * @param <D> The type of data-flow facts to be computed by the tabulation problem.







 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.





 * @param <M> The type of objects used to represent methods.







 * @param <V> The type of values to be computed along flow edges.





 * @param <V> The type of values to be computed along flow edges.







 * @param <I> The type of inter-procedural control-flow graph being used.





 * @param <I> The type of inter-procedural control-flow graph being used.







 */





 */



...@@ -69,8 +60,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -69,8 +60,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 





 







 private static final boolean DEBUG = false;





 private static final boolean DEBUG = false;







 





 







 private static final boolean DUMP_RESULTS = false;









 









 //executor for dispatching individual compute jobs (may be multi-threaded)





 //executor for dispatching individual compute jobs (may be multi-threaded)







 @DontSynchronize("only used by single thread")





 @DontSynchronize("only used by single thread")







 private ExecutorService executor;





 private ExecutorService executor;



...@@ -233,9 +222,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -233,9 +222,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 if(DEBUG) 





 if(DEBUG) 







 printStats();





 printStats();







 





 







 if(DUMP_RESULTS)









 dumpResults();









 









 executor.shutdown();





 executor.shutdown();







 }





 }

















...@@ -387,7 +373,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -387,7 +373,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 private void setVal(N nHashN, D nHashD,V l){ 





 private void setVal(N nHashN, D nHashD,V l){ 







 val.put(nHashN, nHashD,l);





 val.put(nHashN, nHashD,l);







 if(DEBUG)





 if(DEBUG)







 System.err.println("VALUE: "+((SootMethod)icfg.getMethodOf(nHashN)).getSignature()+" "+nHashN+" "+nHashD+ " " + l);





 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);







 }





 }





















 





 



...@@ -639,33 +625,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -639,33 +625,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 });





 });







 }





 }





















 public void dumpResults() {









 try {









 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));









 List<String> res = new ArrayList<String>();









 for(Cell<N, D, V> entry: val.cellSet()) {









 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());









 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();









 int i=0;









 for (Unit unit : units) {









 if(unit==entry.getRowKey())









 break;









 i++;









 }









 









 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());









 }









 Collections.sort(res);









 for (String string : res) {









 out.println(string);









 }









 out.flush();









 out.close();









 } catch (FileNotFoundException e) {









 e.printStackTrace();









 }









 }



















 public void printStats() {





 public void printStats() {







 if(DEBUG) {





 if(DEBUG) {







 if(ffCache!=null)





 if(ffCache!=null)



......










package de.bodden.ide.solver;





package de.bodden.ide.solver;



































import java.io.FileNotFoundException;









import java.io.FileOutputStream;









import java.io.PrintWriter;









import java.util.ArrayList;









import java.util.Collection;





import java.util.Collection;







import java.util.Collections;





import java.util.Collections;







import java.util.HashMap;





import java.util.HashMap;



...@@ -21,11 +17,6 @@ import java.util.concurrent.Executors;
...@@ -21,11 +17,6 @@ import java.util.concurrent.Executors;






import java.util.concurrent.TimeUnit;





import java.util.concurrent.TimeUnit;







import java.util.concurrent.atomic.AtomicInteger;





import java.util.concurrent.atomic.AtomicInteger;





















import soot.PatchingChain;









import soot.SootMethod;









import soot.Unit;









import soot.toolkits.scalar.Pair;



















import com.google.common.base.Predicate;





import com.google.common.base.Predicate;







import com.google.common.cache.CacheBuilder;





import com.google.common.cache.CacheBuilder;







import com.google.common.collect.HashBasedTable;





import com.google.common.collect.HashBasedTable;



...@@ -57,9 +48,9 @@ import de.bodden.ide.edgefunc.EdgeIdentity;
...@@ -57,9 +48,9 @@ import de.bodden.ide.edgefunc.EdgeIdentity;






 * is to produce, as much as possible, reproducible benchmarking results. We have found





 * is to produce, as much as possible, reproducible benchmarking results. We have found







 * that the iteration order can matter a lot in terms of speed.





 * that the iteration order can matter a lot in terms of speed.







 *





 *







 * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}.





 * @param <N> The type of nodes in the interprocedural control-flow graph. 







 * @param <D> The type of data-flow facts to be computed by the tabulation problem.





 * @param <D> The type of data-flow facts to be computed by the tabulation problem.







 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.





 * @param <M> The type of objects used to represent methods.







 * @param <V> The type of values to be computed along flow edges.





 * @param <V> The type of values to be computed along flow edges.







 * @param <I> The type of inter-procedural control-flow graph being used.





 * @param <I> The type of inter-procedural control-flow graph being used.







 */





 */



...@@ -69,8 +60,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -69,8 +60,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 





 







 private static final boolean DEBUG = false;





 private static final boolean DEBUG = false;







 





 







 private static final boolean DUMP_RESULTS = false;









 









 //executor for dispatching individual compute jobs (may be multi-threaded)





 //executor for dispatching individual compute jobs (may be multi-threaded)







 @DontSynchronize("only used by single thread")





 @DontSynchronize("only used by single thread")







 private ExecutorService executor;





 private ExecutorService executor;



...@@ -233,9 +222,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -233,9 +222,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 if(DEBUG) 





 if(DEBUG) 







 printStats();





 printStats();







 





 







 if(DUMP_RESULTS)









 dumpResults();









 









 executor.shutdown();





 executor.shutdown();







 }





 }

















...@@ -387,7 +373,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -387,7 +373,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 private void setVal(N nHashN, D nHashD,V l){ 





 private void setVal(N nHashN, D nHashD,V l){ 







 val.put(nHashN, nHashD,l);





 val.put(nHashN, nHashD,l);







 if(DEBUG)





 if(DEBUG)







 System.err.println("VALUE: "+((SootMethod)icfg.getMethodOf(nHashN)).getSignature()+" "+nHashN+" "+nHashD+ " " + l);





 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);







 }





 }





















 





 



...@@ -639,33 +625,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -639,33 +625,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 });





 });







 }





 }





















 public void dumpResults() {









 try {









 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));









 List<String> res = new ArrayList<String>();









 for(Cell<N, D, V> entry: val.cellSet()) {









 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());









 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();









 int i=0;









 for (Unit unit : units) {









 if(unit==entry.getRowKey())









 break;









 i++;









 }









 









 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());









 }









 Collections.sort(res);









 for (String string : res) {









 out.println(string);









 }









 out.flush();









 out.close();









 } catch (FileNotFoundException e) {









 e.printStackTrace();









 }









 }



















 public void printStats() {





 public void printStats() {







 if(DEBUG) {





 if(DEBUG) {







 if(ffCache!=null)





 if(ffCache!=null)



......


package de.bodden.ide.solver;packagede.bodden.ide.solver;package de.bodden.ide.solver;packagede.bodden.ide.solver;import java.io.FileNotFoundException;importjava.io.FileNotFoundException;import java.io.FileOutputStream;importjava.io.FileOutputStream;import java.io.PrintWriter;importjava.io.PrintWriter;import java.util.ArrayList;importjava.util.ArrayList;import java.util.Collection;importjava.util.Collection;import java.util.Collection;importjava.util.Collection;import java.util.Collections;importjava.util.Collections;import java.util.Collections;importjava.util.Collections;import java.util.HashMap;importjava.util.HashMap;import java.util.HashMap;importjava.util.HashMap;import java.util.concurrent.TimeUnit;importjava.util.concurrent.TimeUnit;import java.util.concurrent.TimeUnit;importjava.util.concurrent.TimeUnit;import java.util.concurrent.atomic.AtomicInteger;importjava.util.concurrent.atomic.AtomicInteger;import java.util.concurrent.atomic.AtomicInteger;importjava.util.concurrent.atomic.AtomicInteger;import soot.PatchingChain;importsoot.PatchingChain;import soot.SootMethod;importsoot.SootMethod;import soot.Unit;importsoot.Unit;import soot.toolkits.scalar.Pair;importsoot.toolkits.scalar.Pair;import com.google.common.base.Predicate;importcom.google.common.base.Predicate;import com.google.common.base.Predicate;importcom.google.common.base.Predicate;import com.google.common.cache.CacheBuilder;importcom.google.common.cache.CacheBuilder;import com.google.common.cache.CacheBuilder;importcom.google.common.cache.CacheBuilder;import com.google.common.collect.HashBasedTable;importcom.google.common.collect.HashBasedTable;import com.google.common.collect.HashBasedTable;importcom.google.common.collect.HashBasedTable; * is to produce, as much as possible, reproducible benchmarking results. We have found * is to produce, as much as possible, reproducible benchmarking results. We have found * is to produce, as much as possible, reproducible benchmarking results. We have found * is to produce, as much as possible, reproducible benchmarking results. We have found * that the iteration order can matter a lot in terms of speed. * that the iteration order can matter a lot in terms of speed. * that the iteration order can matter a lot in terms of speed. * that the iteration order can matter a lot in terms of speed. * * * * * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}. * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}.Typically {@link Unit}. * @param <N> The type of nodes in the interprocedural control-flow graph.  * @param <N> The type of nodes in the interprocedural control-flow graph.  * @param <D> The type of data-flow facts to be computed by the tabulation problem. * @param <D> The type of data-flow facts to be computed by the tabulation problem. * @param <D> The type of data-flow facts to be computed by the tabulation problem. * @param <D> The type of data-flow facts to be computed by the tabulation problem. * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}. * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}. Typically {@link SootMethod}. * @param <M> The type of objects used to represent methods. * @param <M> The type of objects used to represent methods. * @param <V> The type of values to be computed along flow edges. * @param <V> The type of values to be computed along flow edges. * @param <V> The type of values to be computed along flow edges. * @param <V> The type of values to be computed along flow edges. * @param <I> The type of inter-procedural control-flow graph being used. * @param <I> The type of inter-procedural control-flow graph being used. * @param <I> The type of inter-procedural control-flow graph being used. * @param <I> The type of inter-procedural control-flow graph being used. */ */ */ */   private static final boolean DEBUG = false;privatestaticfinalbooleanDEBUG=false; private static final boolean DEBUG = false;privatestaticfinalbooleanDEBUG=false;   private static final boolean DUMP_RESULTS = false;privatestaticfinalbooleanDUMP_RESULTS=false;  //executor for dispatching individual compute jobs (may be multi-threaded)//executor for dispatching individual compute jobs (may be multi-threaded) //executor for dispatching individual compute jobs (may be multi-threaded)//executor for dispatching individual compute jobs (may be multi-threaded) @DontSynchronize("only used by single thread")@DontSynchronize("only used by single thread") @DontSynchronize("only used by single thread")@DontSynchronize("only used by single thread") private ExecutorService executor;privateExecutorServiceexecutor; private ExecutorService executor;privateExecutorServiceexecutor; if(DEBUG) if(DEBUG) if(DEBUG) if(DEBUG) printStats();printStats(); printStats();printStats();   if(DUMP_RESULTS)if(DUMP_RESULTS) dumpResults();dumpResults();  executor.shutdown();executor.shutdown(); executor.shutdown();executor.shutdown(); }} }} private void setVal(N nHashN, D nHashD,V l){ privatevoidsetVal(NnHashN,DnHashD,Vl){ private void setVal(N nHashN, D nHashD,V l){ privatevoidsetVal(NnHashN,DnHashD,Vl){ val.put(nHashN, nHashD,l);val.put(nHashN,nHashD,l); val.put(nHashN, nHashD,l);val.put(nHashN,nHashD,l); if(DEBUG)if(DEBUG) if(DEBUG)if(DEBUG) System.err.println("VALUE: "+((SootMethod)icfg.getMethodOf(nHashN)).getSignature()+" "+nHashN+" "+nHashD+ " " + l);System.err.println("VALUE: "+((((SootMethodSootMethod))icfg.getMethodOf(nHashN)).).getSignaturegetSignature()+()" "+nHashN+" "+nHashD+" "+l); System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+" "+l); }} }}   });}); });}); }} }} public void dumpResults() {publicvoiddumpResults(){ try {try{ PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));PrintWriterout=newPrintWriter(newFileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv")); List<String> res = new ArrayList<String>();List<String>res=newArrayList<String>(); for(Cell<N, D, V> entry: val.cellSet()) {for(Cell<N,D,V>entry:val.cellSet()){ SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());SootMethodmethodOf=(SootMethod)icfg.getMethodOf(entry.getRowKey()); PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();PatchingChain<Unit>units=methodOf.getActiveBody().getUnits(); int i=0;inti=0; for (Unit unit : units) {for(Unitunit:units){ if(unit==entry.getRowKey())if(unit==entry.getRowKey()) break;break; i++;i++; }}  res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue()); }} Collections.sort(res);Collections.sort(res); for (String string : res) {for(Stringstring:res){ out.println(string);out.println(string); }} out.flush();out.flush(); out.close();out.close(); } catch (FileNotFoundException e) {}catch(FileNotFoundExceptione){ e.printStackTrace();e.printStackTrace(); }} }} public void printStats() {publicvoidprintStats(){ public void printStats() {publicvoidprintStats(){ if(DEBUG) {if(DEBUG){ if(DEBUG) {if(DEBUG){ if(ffCache!=null)if(ffCache!=null) if(ffCache!=null)if(ffCache!=null)








src/de/bodden/ide/solver/IFDSSolver.java

→

src-generic/de/bodden/ide/solver/IFDSSolver.java








View file @ 0c5bf04d





File moved











src/de/bodden/ide/solver/IFDSSolver.java

→

src-generic/de/bodden/ide/solver/IFDSSolver.java








View file @ 0c5bf04d








src/de/bodden/ide/solver/IFDSSolver.java

→

src-generic/de/bodden/ide/solver/IFDSSolver.java





-generic




View file @ 0c5bf04d


0c5bf04d


File moved




File moved


File moved









src/de/bodden/ide/solver/JumpFunctions.java

→

src-generic/de/bodden/ide/solver/JumpFunctions.java








View file @ 0c5bf04d





File moved











src/de/bodden/ide/solver/JumpFunctions.java

→

src-generic/de/bodden/ide/solver/JumpFunctions.java








View file @ 0c5bf04d








src/de/bodden/ide/solver/JumpFunctions.java

→

src-generic/de/bodden/ide/solver/JumpFunctions.java





-generic




View file @ 0c5bf04d


0c5bf04d


File moved




File moved


File moved









src/de/bodden/ide/solver/PathEdge.java

→

src-generic/de/bodden/ide/solver/PathEdge.java








View file @ 0c5bf04d





File moved











src/de/bodden/ide/solver/PathEdge.java

→

src-generic/de/bodden/ide/solver/PathEdge.java








View file @ 0c5bf04d








src/de/bodden/ide/solver/PathEdge.java

→

src-generic/de/bodden/ide/solver/PathEdge.java





-generic




View file @ 0c5bf04d


0c5bf04d


File moved




File moved


File moved









src/de/bodden/ide/solver/SummaryFunctions.java

→

src-generic/de/bodden/ide/solver/SummaryFunctions.java








View file @ 0c5bf04d





File moved











src/de/bodden/ide/solver/SummaryFunctions.java

→

src-generic/de/bodden/ide/solver/SummaryFunctions.java








View file @ 0c5bf04d








src/de/bodden/ide/solver/SummaryFunctions.java

→

src-generic/de/bodden/ide/solver/SummaryFunctions.java





-generic




View file @ 0c5bf04d


0c5bf04d


File moved




File moved


File moved









src-soot/soot/jimple/toolkits/ide/DefaultJimpleIDETabulationProblem.java



0 → 100644







View file @ 0c5bf04d














package soot.jimple.toolkits.ide;



















import soot.SootMethod;









import soot.Unit;









import de.bodden.ide.InterproceduralCFG;









import de.bodden.ide.template.DefaultIDETabulationProblem;



















/**









 *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods.









 */









public abstract class DefaultJimpleIDETabulationProblem<D,V,I extends InterproceduralCFG<Unit,SootMethod>>









 extends DefaultIDETabulationProblem<Unit,D,SootMethod,V,I> {



















 public DefaultJimpleIDETabulationProblem(I icfg) {









 super(icfg);









 }









 









}













src-soot/soot/jimple/toolkits/ide/DefaultJimpleIDETabulationProblem.java



0 → 100644







View file @ 0c5bf04d








src-soot/soot/jimple/toolkits/ide/DefaultJimpleIDETabulationProblem.java



0 → 100644









View file @ 0c5bf04d


0c5bf04d











package soot.jimple.toolkits.ide;



















import soot.SootMethod;









import soot.Unit;









import de.bodden.ide.InterproceduralCFG;









import de.bodden.ide.template.DefaultIDETabulationProblem;



















/**









 *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods.









 */









public abstract class DefaultJimpleIDETabulationProblem<D,V,I extends InterproceduralCFG<Unit,SootMethod>>









 extends DefaultIDETabulationProblem<Unit,D,SootMethod,V,I> {



















 public DefaultJimpleIDETabulationProblem(I icfg) {









 super(icfg);









 }









 









}















package soot.jimple.toolkits.ide;



















import soot.SootMethod;









import soot.Unit;









import de.bodden.ide.InterproceduralCFG;









import de.bodden.ide.template.DefaultIDETabulationProblem;



















/**









 *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods.









 */









public abstract class DefaultJimpleIDETabulationProblem<D,V,I extends InterproceduralCFG<Unit,SootMethod>>









 extends DefaultIDETabulationProblem<Unit,D,SootMethod,V,I> {



















 public DefaultJimpleIDETabulationProblem(I icfg) {









 super(icfg);









 }









 









}












package soot.jimple.toolkits.ide;



















import soot.SootMethod;









import soot.Unit;









import de.bodden.ide.InterproceduralCFG;









import de.bodden.ide.template.DefaultIDETabulationProblem;



















/**









 *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods.









 */









public abstract class DefaultJimpleIDETabulationProblem<D,V,I extends InterproceduralCFG<Unit,SootMethod>>









 extends DefaultIDETabulationProblem<Unit,D,SootMethod,V,I> {



















 public DefaultJimpleIDETabulationProblem(I icfg) {









 super(icfg);









 }









 









}


package soot.jimple.toolkits.ide;packagesoot.jimple.toolkits.ide;import soot.SootMethod;importsoot.SootMethod;import soot.Unit;importsoot.Unit;import de.bodden.ide.InterproceduralCFG;importde.bodden.ide.InterproceduralCFG;import de.bodden.ide.template.DefaultIDETabulationProblem;importde.bodden.ide.template.DefaultIDETabulationProblem;/**/** *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods. *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods. */ */public abstract class DefaultJimpleIDETabulationProblem<D,V,I extends InterproceduralCFG<Unit,SootMethod>>publicabstractclassDefaultJimpleIDETabulationProblem<D,V,IextendsInterproceduralCFG<Unit,SootMethod>> extends DefaultIDETabulationProblem<Unit,D,SootMethod,V,I> {extendsDefaultIDETabulationProblem<Unit,D,SootMethod,V,I>{ public DefaultJimpleIDETabulationProblem(I icfg) {publicDefaultJimpleIDETabulationProblem(Iicfg){ super(icfg);super(icfg); }} }}








src/de/bodden/ide/Main.java

→

src-soot/soot/jimple/toolkits/ide/Main.java








View file @ 0c5bf04d












package de.bodden.ide;





package soot.jimple.toolkits.ide;





















import java.util.Map;





import java.util.Map;





















import de.bodden.ide.problems.IFDSLocalInfoFlow;





import de.bodden.ide.IFDSTabulationProblem;









import de.bodden.ide.InterproceduralCFG;







import de.bodden.ide.solver.IFDSSolver;





import de.bodden.ide.solver.IFDSSolver;







import de.bodden.ide.template.JimpleBasedInterproceduralCFG;























import soot.Local;





import soot.Local;







import soot.PackManager;





import soot.PackManager;



...@@ -13,6 +13,8 @@ import soot.SceneTransformer;
...@@ -13,6 +13,8 @@ import soot.SceneTransformer;






import soot.SootMethod;





import soot.SootMethod;







import soot.Transform;





import soot.Transform;







import soot.Unit;





import soot.Unit;









import soot.jimple.toolkits.ide.exampleproblems.IFDSLocalInfoFlow;









import soot.jimple.toolkits.ide.icfg.JimpleBasedInterproceduralCFG;





















public class Main {





public class Main {

















......













src/de/bodden/ide/Main.java

→

src-soot/soot/jimple/toolkits/ide/Main.java








View file @ 0c5bf04d








src/de/bodden/ide/Main.java

→

src-soot/soot/jimple/toolkits/ide/Main.java





/de/bodden-soot/soot/jimple/toolkits




View file @ 0c5bf04d


0c5bf04d









package de.bodden.ide;





package soot.jimple.toolkits.ide;





















import java.util.Map;





import java.util.Map;





















import de.bodden.ide.problems.IFDSLocalInfoFlow;





import de.bodden.ide.IFDSTabulationProblem;









import de.bodden.ide.InterproceduralCFG;







import de.bodden.ide.solver.IFDSSolver;





import de.bodden.ide.solver.IFDSSolver;







import de.bodden.ide.template.JimpleBasedInterproceduralCFG;























import soot.Local;





import soot.Local;







import soot.PackManager;





import soot.PackManager;



...@@ -13,6 +13,8 @@ import soot.SceneTransformer;
...@@ -13,6 +13,8 @@ import soot.SceneTransformer;






import soot.SootMethod;





import soot.SootMethod;







import soot.Transform;





import soot.Transform;







import soot.Unit;





import soot.Unit;









import soot.jimple.toolkits.ide.exampleproblems.IFDSLocalInfoFlow;









import soot.jimple.toolkits.ide.icfg.JimpleBasedInterproceduralCFG;





















public class Main {





public class Main {

















......













package de.bodden.ide;





package soot.jimple.toolkits.ide;





















import java.util.Map;





import java.util.Map;





















import de.bodden.ide.problems.IFDSLocalInfoFlow;





import de.bodden.ide.IFDSTabulationProblem;









import de.bodden.ide.InterproceduralCFG;







import de.bodden.ide.solver.IFDSSolver;





import de.bodden.ide.solver.IFDSSolver;







import de.bodden.ide.template.JimpleBasedInterproceduralCFG;























import soot.Local;





import soot.Local;







import soot.PackManager;





import soot.PackManager;



...@@ -13,6 +13,8 @@ import soot.SceneTransformer;
...@@ -13,6 +13,8 @@ import soot.SceneTransformer;






import soot.SootMethod;





import soot.SootMethod;







import soot.Transform;





import soot.Transform;







import soot.Unit;





import soot.Unit;









import soot.jimple.toolkits.ide.exampleproblems.IFDSLocalInfoFlow;









import soot.jimple.toolkits.ide.icfg.JimpleBasedInterproceduralCFG;





















public class Main {





public class Main {

















......










package de.bodden.ide;





package soot.jimple.toolkits.ide;





















import java.util.Map;





import java.util.Map;





















import de.bodden.ide.problems.IFDSLocalInfoFlow;





import de.bodden.ide.IFDSTabulationProblem;









import de.bodden.ide.InterproceduralCFG;







import de.bodden.ide.solver.IFDSSolver;





import de.bodden.ide.solver.IFDSSolver;







import de.bodden.ide.template.JimpleBasedInterproceduralCFG;























import soot.Local;





import soot.Local;







import soot.PackManager;





import soot.PackManager;



...@@ -13,6 +13,8 @@ import soot.SceneTransformer;
...@@ -13,6 +13,8 @@ import soot.SceneTransformer;






import soot.SootMethod;





import soot.SootMethod;







import soot.Transform;





import soot.Transform;







import soot.Unit;





import soot.Unit;









import soot.jimple.toolkits.ide.exampleproblems.IFDSLocalInfoFlow;









import soot.jimple.toolkits.ide.icfg.JimpleBasedInterproceduralCFG;





















public class Main {





public class Main {

















......


package de.bodden.ide;packagede.bodden.idede.bodden;package soot.jimple.toolkits.ide;packagesoot.jimple.toolkits.idesoot.jimple.toolkits;import java.util.Map;importjava.util.Map;import java.util.Map;importjava.util.Map;import de.bodden.ide.problems.IFDSLocalInfoFlow;importde.bodden.ide.problems.IFDSLocalInfoFlow;import de.bodden.ide.IFDSTabulationProblem;importde.bodden.ide.IFDSTabulationProblem;import de.bodden.ide.InterproceduralCFG;importde.bodden.ide.InterproceduralCFG;import de.bodden.ide.solver.IFDSSolver;importde.bodden.ide.solver.IFDSSolver;import de.bodden.ide.solver.IFDSSolver;importde.bodden.ide.solver.IFDSSolver;import de.bodden.ide.template.JimpleBasedInterproceduralCFG;importde.bodden.ide.template.JimpleBasedInterproceduralCFG;import soot.Local;importsoot.Local;import soot.Local;importsoot.Local;import soot.PackManager;importsoot.PackManager;import soot.PackManager;importsoot.PackManager;import soot.SootMethod;importsoot.SootMethod;import soot.SootMethod;importsoot.SootMethod;import soot.Transform;importsoot.Transform;import soot.Transform;importsoot.Transform;import soot.Unit;importsoot.Unit;import soot.Unit;importsoot.Unit;import soot.jimple.toolkits.ide.exampleproblems.IFDSLocalInfoFlow;importsoot.jimple.toolkits.ide.exampleproblems.IFDSLocalInfoFlow;import soot.jimple.toolkits.ide.icfg.JimpleBasedInterproceduralCFG;importsoot.jimple.toolkits.ide.icfg.JimpleBasedInterproceduralCFG;public class Main {publicclassMain{public class Main {publicclassMain{








src/de/bodden/ide/problems/IFDSLocalInfoFlow.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSLocalInfoFlow.java








View file @ 0c5bf04d












package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -13,7 +13,6 @@ import de.bodden.ide.flowfunc.Identity;
...@@ -13,7 +13,6 @@ import de.bodden.ide.flowfunc.Identity;






import de.bodden.ide.flowfunc.Kill;





import de.bodden.ide.flowfunc.Kill;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.flowfunc.Transfer;





import de.bodden.ide.flowfunc.Transfer;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.Local;





import soot.Local;







import soot.NullType;





import soot.NullType;



...@@ -29,8 +28,9 @@ import soot.jimple.ParameterRef;
...@@ -29,8 +28,9 @@ import soot.jimple.ParameterRef;






import soot.jimple.ReturnStmt;





import soot.jimple.ReturnStmt;







import soot.jimple.Stmt;





import soot.jimple.Stmt;







import soot.jimple.internal.JimpleLocal;





import soot.jimple.internal.JimpleLocal;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;





















public class IFDSLocalInfoFlow extends DefaultIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSLocalInfoFlow extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {





 public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {







 super(icfg); 





 super(icfg); 



......













src/de/bodden/ide/problems/IFDSLocalInfoFlow.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSLocalInfoFlow.java








View file @ 0c5bf04d








src/de/bodden/ide/problems/IFDSLocalInfoFlow.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSLocalInfoFlow.java





/de/bodden/ide/-soot/soot/jimple/toolkits/ide/example




View file @ 0c5bf04d


0c5bf04d









package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -13,7 +13,6 @@ import de.bodden.ide.flowfunc.Identity;
...@@ -13,7 +13,6 @@ import de.bodden.ide.flowfunc.Identity;






import de.bodden.ide.flowfunc.Kill;





import de.bodden.ide.flowfunc.Kill;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.flowfunc.Transfer;





import de.bodden.ide.flowfunc.Transfer;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.Local;





import soot.Local;







import soot.NullType;





import soot.NullType;



...@@ -29,8 +28,9 @@ import soot.jimple.ParameterRef;
...@@ -29,8 +28,9 @@ import soot.jimple.ParameterRef;






import soot.jimple.ReturnStmt;





import soot.jimple.ReturnStmt;







import soot.jimple.Stmt;





import soot.jimple.Stmt;







import soot.jimple.internal.JimpleLocal;





import soot.jimple.internal.JimpleLocal;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;





















public class IFDSLocalInfoFlow extends DefaultIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSLocalInfoFlow extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {





 public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {







 super(icfg); 





 super(icfg); 



......













package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -13,7 +13,6 @@ import de.bodden.ide.flowfunc.Identity;
...@@ -13,7 +13,6 @@ import de.bodden.ide.flowfunc.Identity;






import de.bodden.ide.flowfunc.Kill;





import de.bodden.ide.flowfunc.Kill;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.flowfunc.Transfer;





import de.bodden.ide.flowfunc.Transfer;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.Local;





import soot.Local;







import soot.NullType;





import soot.NullType;



...@@ -29,8 +28,9 @@ import soot.jimple.ParameterRef;
...@@ -29,8 +28,9 @@ import soot.jimple.ParameterRef;






import soot.jimple.ReturnStmt;





import soot.jimple.ReturnStmt;







import soot.jimple.Stmt;





import soot.jimple.Stmt;







import soot.jimple.internal.JimpleLocal;





import soot.jimple.internal.JimpleLocal;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;





















public class IFDSLocalInfoFlow extends DefaultIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSLocalInfoFlow extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {





 public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {







 super(icfg); 





 super(icfg); 



......










package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -13,7 +13,6 @@ import de.bodden.ide.flowfunc.Identity;
...@@ -13,7 +13,6 @@ import de.bodden.ide.flowfunc.Identity;






import de.bodden.ide.flowfunc.Kill;





import de.bodden.ide.flowfunc.Kill;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.flowfunc.Transfer;





import de.bodden.ide.flowfunc.Transfer;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.Local;





import soot.Local;







import soot.NullType;





import soot.NullType;



...@@ -29,8 +28,9 @@ import soot.jimple.ParameterRef;
...@@ -29,8 +28,9 @@ import soot.jimple.ParameterRef;






import soot.jimple.ReturnStmt;





import soot.jimple.ReturnStmt;







import soot.jimple.Stmt;





import soot.jimple.Stmt;







import soot.jimple.internal.JimpleLocal;





import soot.jimple.internal.JimpleLocal;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;





















public class IFDSLocalInfoFlow extends DefaultIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSLocalInfoFlow extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {





 public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {







 super(icfg); 





 super(icfg); 



......


package de.bodden.ide.problems;packagede.bodden.ide.problemsde.bodden.ide.;package soot.jimple.toolkits.ide.exampleproblems;packagesoot.jimple.toolkits.ide.exampleproblemssoot.jimple.toolkits.ide.example;import java.util.ArrayList;importjava.util.ArrayList;import java.util.ArrayList;importjava.util.ArrayList;import java.util.Collections;importjava.util.Collections;import java.util.Collections;importjava.util.Collections;import de.bodden.ide.flowfunc.Kill;importde.bodden.ide.flowfunc.Kill;import de.bodden.ide.flowfunc.Kill;importde.bodden.ide.flowfunc.Kill;import de.bodden.ide.flowfunc.KillAll;importde.bodden.ide.flowfunc.KillAll;import de.bodden.ide.flowfunc.KillAll;importde.bodden.ide.flowfunc.KillAll;import de.bodden.ide.flowfunc.Transfer;importde.bodden.ide.flowfunc.Transfer;import de.bodden.ide.flowfunc.Transfer;importde.bodden.ide.flowfunc.Transfer;import de.bodden.ide.template.DefaultIFDSTabulationProblem;importde.bodden.ide.template.DefaultIFDSTabulationProblem;import soot.Local;importsoot.Local;import soot.Local;importsoot.Local;import soot.NullType;importsoot.NullType;import soot.NullType;importsoot.NullType;import soot.jimple.ReturnStmt;importsoot.jimple.ReturnStmt;import soot.jimple.ReturnStmt;importsoot.jimple.ReturnStmt;import soot.jimple.Stmt;importsoot.jimple.Stmt;import soot.jimple.Stmt;importsoot.jimple.Stmt;import soot.jimple.internal.JimpleLocal;importsoot.jimple.internal.JimpleLocal;import soot.jimple.internal.JimpleLocal;importsoot.jimple.internal.JimpleLocal;import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;importsoot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;public class IFDSLocalInfoFlow extends DefaultIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {publicclassIFDSLocalInfoFlowextendsDefaultIFDSTabulationProblem<Local,InterproceduralCFG<Unit,SootMethod>>{public class IFDSLocalInfoFlow extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {publicclassIFDSLocalInfoFlowextendsDefaultJimpleIFDSTabulationProblemJimple<Local,InterproceduralCFG<Unit,SootMethod>>{ public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {publicIFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod>icfg){ public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {publicIFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod>icfg){ super(icfg); super(icfg); super(icfg); super(icfg);








src/de/bodden/ide/problems/IFDSPossibleTypes.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSPossibleTypes.java








View file @ 0c5bf04d












package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;
...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;






import de.bodden.ide.InterproceduralCFG;





import de.bodden.ide.InterproceduralCFG;







import de.bodden.ide.flowfunc.Identity;





import de.bodden.ide.flowfunc.Identity;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.Local;





import soot.Local;







import soot.PointsToAnalysis;





import soot.PointsToAnalysis;



...@@ -33,10 +32,11 @@ import soot.jimple.NewExpr;
...@@ -33,10 +32,11 @@ import soot.jimple.NewExpr;






import soot.jimple.Ref;





import soot.jimple.Ref;







import soot.jimple.ReturnStmt;





import soot.jimple.ReturnStmt;







import soot.jimple.Stmt;





import soot.jimple.Stmt;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;







import soot.toolkits.scalar.Pair;





import soot.toolkits.scalar.Pair;





















@SuppressWarnings("serial")





@SuppressWarnings("serial")







public class IFDSPossibleTypes extends DefaultIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSPossibleTypes extends DefaultJimpleIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {





 public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {







 super(icfg);





 super(icfg);



......













src/de/bodden/ide/problems/IFDSPossibleTypes.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSPossibleTypes.java








View file @ 0c5bf04d








src/de/bodden/ide/problems/IFDSPossibleTypes.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSPossibleTypes.java





/de/bodden/ide/-soot/soot/jimple/toolkits/ide/example




View file @ 0c5bf04d


0c5bf04d









package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;
...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;






import de.bodden.ide.InterproceduralCFG;





import de.bodden.ide.InterproceduralCFG;







import de.bodden.ide.flowfunc.Identity;





import de.bodden.ide.flowfunc.Identity;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.Local;





import soot.Local;







import soot.PointsToAnalysis;





import soot.PointsToAnalysis;



...@@ -33,10 +32,11 @@ import soot.jimple.NewExpr;
...@@ -33,10 +32,11 @@ import soot.jimple.NewExpr;






import soot.jimple.Ref;





import soot.jimple.Ref;







import soot.jimple.ReturnStmt;





import soot.jimple.ReturnStmt;







import soot.jimple.Stmt;





import soot.jimple.Stmt;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;







import soot.toolkits.scalar.Pair;





import soot.toolkits.scalar.Pair;





















@SuppressWarnings("serial")





@SuppressWarnings("serial")







public class IFDSPossibleTypes extends DefaultIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSPossibleTypes extends DefaultJimpleIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {





 public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {







 super(icfg);





 super(icfg);



......













package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;
...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;






import de.bodden.ide.InterproceduralCFG;





import de.bodden.ide.InterproceduralCFG;







import de.bodden.ide.flowfunc.Identity;





import de.bodden.ide.flowfunc.Identity;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.Local;





import soot.Local;







import soot.PointsToAnalysis;





import soot.PointsToAnalysis;



...@@ -33,10 +32,11 @@ import soot.jimple.NewExpr;
...@@ -33,10 +32,11 @@ import soot.jimple.NewExpr;






import soot.jimple.Ref;





import soot.jimple.Ref;







import soot.jimple.ReturnStmt;





import soot.jimple.ReturnStmt;







import soot.jimple.Stmt;





import soot.jimple.Stmt;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;







import soot.toolkits.scalar.Pair;





import soot.toolkits.scalar.Pair;





















@SuppressWarnings("serial")





@SuppressWarnings("serial")







public class IFDSPossibleTypes extends DefaultIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSPossibleTypes extends DefaultJimpleIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {





 public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {







 super(icfg);





 super(icfg);



......










package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;
...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;






import de.bodden.ide.InterproceduralCFG;





import de.bodden.ide.InterproceduralCFG;







import de.bodden.ide.flowfunc.Identity;





import de.bodden.ide.flowfunc.Identity;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.Local;





import soot.Local;







import soot.PointsToAnalysis;





import soot.PointsToAnalysis;



...@@ -33,10 +32,11 @@ import soot.jimple.NewExpr;
...@@ -33,10 +32,11 @@ import soot.jimple.NewExpr;






import soot.jimple.Ref;





import soot.jimple.Ref;







import soot.jimple.ReturnStmt;





import soot.jimple.ReturnStmt;







import soot.jimple.Stmt;





import soot.jimple.Stmt;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;







import soot.toolkits.scalar.Pair;





import soot.toolkits.scalar.Pair;





















@SuppressWarnings("serial")





@SuppressWarnings("serial")







public class IFDSPossibleTypes extends DefaultIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSPossibleTypes extends DefaultJimpleIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {





 public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {







 super(icfg);





 super(icfg);



......


package de.bodden.ide.problems;packagede.bodden.ide.problemsde.bodden.ide.;package soot.jimple.toolkits.ide.exampleproblems;packagesoot.jimple.toolkits.ide.exampleproblemssoot.jimple.toolkits.ide.example;import java.util.ArrayList;importjava.util.ArrayList;import java.util.ArrayList;importjava.util.ArrayList;import java.util.Collections;importjava.util.Collections;import java.util.Collections;importjava.util.Collections;import de.bodden.ide.InterproceduralCFG;importde.bodden.ide.InterproceduralCFG;import de.bodden.ide.InterproceduralCFG;importde.bodden.ide.InterproceduralCFG;import de.bodden.ide.flowfunc.Identity;importde.bodden.ide.flowfunc.Identity;import de.bodden.ide.flowfunc.Identity;importde.bodden.ide.flowfunc.Identity;import de.bodden.ide.flowfunc.KillAll;importde.bodden.ide.flowfunc.KillAll;import de.bodden.ide.flowfunc.KillAll;importde.bodden.ide.flowfunc.KillAll;import de.bodden.ide.template.DefaultIFDSTabulationProblem;importde.bodden.ide.template.DefaultIFDSTabulationProblem;import soot.Local;importsoot.Local;import soot.Local;importsoot.Local;import soot.PointsToAnalysis;importsoot.PointsToAnalysis;import soot.PointsToAnalysis;importsoot.PointsToAnalysis;import soot.jimple.Ref;importsoot.jimple.Ref;import soot.jimple.Ref;importsoot.jimple.Ref;import soot.jimple.ReturnStmt;importsoot.jimple.ReturnStmt;import soot.jimple.ReturnStmt;importsoot.jimple.ReturnStmt;import soot.jimple.Stmt;importsoot.jimple.Stmt;import soot.jimple.Stmt;importsoot.jimple.Stmt;import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;importsoot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;import soot.toolkits.scalar.Pair;importsoot.toolkits.scalar.Pair;import soot.toolkits.scalar.Pair;importsoot.toolkits.scalar.Pair;@SuppressWarnings("serial")@SuppressWarnings("serial")@SuppressWarnings("serial")@SuppressWarnings("serial")public class IFDSPossibleTypes extends DefaultIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {publicclassIFDSPossibleTypesextendsDefaultIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit,SootMethod>>{public class IFDSPossibleTypes extends DefaultJimpleIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {publicclassIFDSPossibleTypesextendsDefaultJimpleIFDSTabulationProblemJimple<Pair<Value,Type>,InterproceduralCFG<Unit,SootMethod>>{ public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {publicIFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod>icfg){ public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {publicIFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod>icfg){ super(icfg);super(icfg); super(icfg);super(icfg);








src/de/bodden/ide/problems/IFDSReachingDefinitions.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSReachingDefinitions.java








View file @ 0c5bf04d












package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;
...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;






import de.bodden.ide.InterproceduralCFG;





import de.bodden.ide.InterproceduralCFG;







import de.bodden.ide.flowfunc.Identity;





import de.bodden.ide.flowfunc.Identity;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.EquivalentValue;





import soot.EquivalentValue;







import soot.Local;





import soot.Local;



...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;
...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;






import soot.jimple.ReturnVoidStmt;





import soot.jimple.ReturnVoidStmt;







import soot.jimple.Stmt;





import soot.jimple.Stmt;







import soot.jimple.internal.JimpleLocal;





import soot.jimple.internal.JimpleLocal;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;







import soot.toolkits.scalar.Pair;





import soot.toolkits.scalar.Pair;





















public class IFDSReachingDefinitions extends DefaultIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSReachingDefinitions extends DefaultJimpleIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {







 public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {





 public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {







 super(icfg);





 super(icfg);







 }





 }



......













src/de/bodden/ide/problems/IFDSReachingDefinitions.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSReachingDefinitions.java








View file @ 0c5bf04d








src/de/bodden/ide/problems/IFDSReachingDefinitions.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSReachingDefinitions.java





/de/bodden/ide/-soot/soot/jimple/toolkits/ide/example




View file @ 0c5bf04d


0c5bf04d









package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;
...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;






import de.bodden.ide.InterproceduralCFG;





import de.bodden.ide.InterproceduralCFG;







import de.bodden.ide.flowfunc.Identity;





import de.bodden.ide.flowfunc.Identity;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.EquivalentValue;





import soot.EquivalentValue;







import soot.Local;





import soot.Local;



...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;
...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;






import soot.jimple.ReturnVoidStmt;





import soot.jimple.ReturnVoidStmt;







import soot.jimple.Stmt;





import soot.jimple.Stmt;







import soot.jimple.internal.JimpleLocal;





import soot.jimple.internal.JimpleLocal;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;







import soot.toolkits.scalar.Pair;





import soot.toolkits.scalar.Pair;





















public class IFDSReachingDefinitions extends DefaultIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSReachingDefinitions extends DefaultJimpleIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {







 public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {





 public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {







 super(icfg);





 super(icfg);







 }





 }



......













package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;
...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;






import de.bodden.ide.InterproceduralCFG;





import de.bodden.ide.InterproceduralCFG;







import de.bodden.ide.flowfunc.Identity;





import de.bodden.ide.flowfunc.Identity;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.EquivalentValue;





import soot.EquivalentValue;







import soot.Local;





import soot.Local;



...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;
...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;






import soot.jimple.ReturnVoidStmt;





import soot.jimple.ReturnVoidStmt;







import soot.jimple.Stmt;





import soot.jimple.Stmt;







import soot.jimple.internal.JimpleLocal;





import soot.jimple.internal.JimpleLocal;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;







import soot.toolkits.scalar.Pair;





import soot.toolkits.scalar.Pair;





















public class IFDSReachingDefinitions extends DefaultIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSReachingDefinitions extends DefaultJimpleIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {







 public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {





 public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {







 super(icfg);





 super(icfg);







 }





 }



......










package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;
...@@ -11,7 +11,6 @@ import de.bodden.ide.FlowFunctions;






import de.bodden.ide.InterproceduralCFG;





import de.bodden.ide.InterproceduralCFG;







import de.bodden.ide.flowfunc.Identity;





import de.bodden.ide.flowfunc.Identity;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.EquivalentValue;





import soot.EquivalentValue;







import soot.Local;





import soot.Local;



...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;
...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;






import soot.jimple.ReturnVoidStmt;





import soot.jimple.ReturnVoidStmt;







import soot.jimple.Stmt;





import soot.jimple.Stmt;







import soot.jimple.internal.JimpleLocal;





import soot.jimple.internal.JimpleLocal;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;







import soot.toolkits.scalar.Pair;





import soot.toolkits.scalar.Pair;





















public class IFDSReachingDefinitions extends DefaultIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSReachingDefinitions extends DefaultJimpleIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {







 public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {





 public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {







 super(icfg);





 super(icfg);







 }





 }



......


package de.bodden.ide.problems;packagede.bodden.ide.problemsde.bodden.ide.;package soot.jimple.toolkits.ide.exampleproblems;packagesoot.jimple.toolkits.ide.exampleproblemssoot.jimple.toolkits.ide.example;import java.util.ArrayList;importjava.util.ArrayList;import java.util.ArrayList;importjava.util.ArrayList;import java.util.Collections;importjava.util.Collections;import java.util.Collections;importjava.util.Collections;import de.bodden.ide.InterproceduralCFG;importde.bodden.ide.InterproceduralCFG;import de.bodden.ide.InterproceduralCFG;importde.bodden.ide.InterproceduralCFG;import de.bodden.ide.flowfunc.Identity;importde.bodden.ide.flowfunc.Identity;import de.bodden.ide.flowfunc.Identity;importde.bodden.ide.flowfunc.Identity;import de.bodden.ide.flowfunc.KillAll;importde.bodden.ide.flowfunc.KillAll;import de.bodden.ide.flowfunc.KillAll;importde.bodden.ide.flowfunc.KillAll;import de.bodden.ide.template.DefaultIFDSTabulationProblem;importde.bodden.ide.template.DefaultIFDSTabulationProblem;import soot.EquivalentValue;importsoot.EquivalentValue;import soot.EquivalentValue;importsoot.EquivalentValue;import soot.Local;importsoot.Local;import soot.Local;importsoot.Local;import soot.jimple.ReturnVoidStmt;importsoot.jimple.ReturnVoidStmt;import soot.jimple.ReturnVoidStmt;importsoot.jimple.ReturnVoidStmt;import soot.jimple.Stmt;importsoot.jimple.Stmt;import soot.jimple.Stmt;importsoot.jimple.Stmt;import soot.jimple.internal.JimpleLocal;importsoot.jimple.internal.JimpleLocal;import soot.jimple.internal.JimpleLocal;importsoot.jimple.internal.JimpleLocal;import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;importsoot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;import soot.toolkits.scalar.Pair;importsoot.toolkits.scalar.Pair;import soot.toolkits.scalar.Pair;importsoot.toolkits.scalar.Pair;public class IFDSReachingDefinitions extends DefaultIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {publicclassIFDSReachingDefinitionsextendsDefaultIFDSTabulationProblem<Pair<Value,Set<DefinitionStmt>>,InterproceduralCFG<Unit,SootMethod>>{public class IFDSReachingDefinitions extends DefaultJimpleIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {publicclassIFDSReachingDefinitionsextendsDefaultJimpleIFDSTabulationProblemJimple<Pair<Value,Set<DefinitionStmt>>,InterproceduralCFG<Unit,SootMethod>>{ public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {publicIFDSReachingDefinitions(InterproceduralCFG<Unit,SootMethod>icfg){ public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {publicIFDSReachingDefinitions(InterproceduralCFG<Unit,SootMethod>icfg){ super(icfg);super(icfg); super(icfg);super(icfg); }} }}








src/de/bodden/ide/problems/IFDSUninitializedVariables.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSUninitializedVariables.java








View file @ 0c5bf04d












package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -12,7 +12,6 @@ import de.bodden.ide.InterproceduralCFG;
...@@ -12,7 +12,6 @@ import de.bodden.ide.InterproceduralCFG;






import de.bodden.ide.flowfunc.Identity;





import de.bodden.ide.flowfunc.Identity;







import de.bodden.ide.flowfunc.Kill;





import de.bodden.ide.flowfunc.Kill;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.Local;





import soot.Local;







import soot.NullType;





import soot.NullType;



...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;
...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;






import soot.jimple.Stmt;





import soot.jimple.Stmt;







import soot.jimple.ThrowStmt;





import soot.jimple.ThrowStmt;







import soot.jimple.internal.JimpleLocal;





import soot.jimple.internal.JimpleLocal;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;







import soot.util.Chain;





import soot.util.Chain;





















public class IFDSUninitializedVariables extends DefaultIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSUninitializedVariables extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {





 public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {







 super(icfg); 





 super(icfg); 



......













src/de/bodden/ide/problems/IFDSUninitializedVariables.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSUninitializedVariables.java








View file @ 0c5bf04d








src/de/bodden/ide/problems/IFDSUninitializedVariables.java

→

src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSUninitializedVariables.java





/de/bodden/ide/-soot/soot/jimple/toolkits/ide/example




View file @ 0c5bf04d


0c5bf04d









package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -12,7 +12,6 @@ import de.bodden.ide.InterproceduralCFG;
...@@ -12,7 +12,6 @@ import de.bodden.ide.InterproceduralCFG;






import de.bodden.ide.flowfunc.Identity;





import de.bodden.ide.flowfunc.Identity;







import de.bodden.ide.flowfunc.Kill;





import de.bodden.ide.flowfunc.Kill;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.Local;





import soot.Local;







import soot.NullType;





import soot.NullType;



...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;
...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;






import soot.jimple.Stmt;





import soot.jimple.Stmt;







import soot.jimple.ThrowStmt;





import soot.jimple.ThrowStmt;







import soot.jimple.internal.JimpleLocal;





import soot.jimple.internal.JimpleLocal;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;







import soot.util.Chain;





import soot.util.Chain;





















public class IFDSUninitializedVariables extends DefaultIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSUninitializedVariables extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {





 public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {







 super(icfg); 





 super(icfg); 



......













package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -12,7 +12,6 @@ import de.bodden.ide.InterproceduralCFG;
...@@ -12,7 +12,6 @@ import de.bodden.ide.InterproceduralCFG;






import de.bodden.ide.flowfunc.Identity;





import de.bodden.ide.flowfunc.Identity;







import de.bodden.ide.flowfunc.Kill;





import de.bodden.ide.flowfunc.Kill;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.Local;





import soot.Local;







import soot.NullType;





import soot.NullType;



...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;
...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;






import soot.jimple.Stmt;





import soot.jimple.Stmt;







import soot.jimple.ThrowStmt;





import soot.jimple.ThrowStmt;







import soot.jimple.internal.JimpleLocal;





import soot.jimple.internal.JimpleLocal;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;







import soot.util.Chain;





import soot.util.Chain;





















public class IFDSUninitializedVariables extends DefaultIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSUninitializedVariables extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {





 public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {







 super(icfg); 





 super(icfg); 



......










package de.bodden.ide.problems;





package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;





import java.util.ArrayList;







import java.util.Collections;





import java.util.Collections;



...@@ -12,7 +12,6 @@ import de.bodden.ide.InterproceduralCFG;
...@@ -12,7 +12,6 @@ import de.bodden.ide.InterproceduralCFG;






import de.bodden.ide.flowfunc.Identity;





import de.bodden.ide.flowfunc.Identity;







import de.bodden.ide.flowfunc.Kill;





import de.bodden.ide.flowfunc.Kill;







import de.bodden.ide.flowfunc.KillAll;





import de.bodden.ide.flowfunc.KillAll;







import de.bodden.ide.template.DefaultIFDSTabulationProblem;























import soot.Local;





import soot.Local;







import soot.NullType;





import soot.NullType;



...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;
...@@ -27,9 +26,10 @@ import soot.jimple.ReturnStmt;






import soot.jimple.Stmt;





import soot.jimple.Stmt;







import soot.jimple.ThrowStmt;





import soot.jimple.ThrowStmt;







import soot.jimple.internal.JimpleLocal;





import soot.jimple.internal.JimpleLocal;









import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;







import soot.util.Chain;





import soot.util.Chain;





















public class IFDSUninitializedVariables extends DefaultIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





public class IFDSUninitializedVariables extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {





 public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {







 super(icfg); 





 super(icfg); 



......


package de.bodden.ide.problems;packagede.bodden.ide.problemsde.bodden.ide.;package soot.jimple.toolkits.ide.exampleproblems;packagesoot.jimple.toolkits.ide.exampleproblemssoot.jimple.toolkits.ide.example;import java.util.ArrayList;importjava.util.ArrayList;import java.util.ArrayList;importjava.util.ArrayList;import java.util.Collections;importjava.util.Collections;import java.util.Collections;importjava.util.Collections;import de.bodden.ide.flowfunc.Identity;importde.bodden.ide.flowfunc.Identity;import de.bodden.ide.flowfunc.Identity;importde.bodden.ide.flowfunc.Identity;import de.bodden.ide.flowfunc.Kill;importde.bodden.ide.flowfunc.Kill;import de.bodden.ide.flowfunc.Kill;importde.bodden.ide.flowfunc.Kill;import de.bodden.ide.flowfunc.KillAll;importde.bodden.ide.flowfunc.KillAll;import de.bodden.ide.flowfunc.KillAll;importde.bodden.ide.flowfunc.KillAll;import de.bodden.ide.template.DefaultIFDSTabulationProblem;importde.bodden.ide.template.DefaultIFDSTabulationProblem;import soot.Local;importsoot.Local;import soot.Local;importsoot.Local;import soot.NullType;importsoot.NullType;import soot.NullType;importsoot.NullType;import soot.jimple.Stmt;importsoot.jimple.Stmt;import soot.jimple.Stmt;importsoot.jimple.Stmt;import soot.jimple.ThrowStmt;importsoot.jimple.ThrowStmt;import soot.jimple.ThrowStmt;importsoot.jimple.ThrowStmt;import soot.jimple.internal.JimpleLocal;importsoot.jimple.internal.JimpleLocal;import soot.jimple.internal.JimpleLocal;importsoot.jimple.internal.JimpleLocal;import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;importsoot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;import soot.util.Chain;importsoot.util.Chain;import soot.util.Chain;importsoot.util.Chain;public class IFDSUninitializedVariables extends DefaultIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {publicclassIFDSUninitializedVariablesextendsDefaultIFDSTabulationProblem<Local,InterproceduralCFG<Unit,SootMethod>>{public class IFDSUninitializedVariables extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {publicclassIFDSUninitializedVariablesextendsDefaultJimpleIFDSTabulationProblemJimple<Local,InterproceduralCFG<Unit,SootMethod>>{ public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {publicIFDSUninitializedVariables(InterproceduralCFG<Unit,SootMethod>icfg){ public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {publicIFDSUninitializedVariables(InterproceduralCFG<Unit,SootMethod>icfg){ super(icfg); super(icfg); super(icfg); super(icfg);








src/de/bodden/ide/template/BackwardsInterproceduralCFG.java

→

src-soot/soot/jimple/toolkits/ide/icfg/BackwardsInterproceduralCFG.java








View file @ 0c5bf04d












package de.bodden.ide.template;





package soot.jimple.toolkits.ide.icfg;





















import soot.Body;





import soot.Body;







import soot.Unit;





import soot.Unit;



......













src/de/bodden/ide/template/BackwardsInterproceduralCFG.java

→

src-soot/soot/jimple/toolkits/ide/icfg/BackwardsInterproceduralCFG.java








View file @ 0c5bf04d








src/de/bodden/ide/template/BackwardsInterproceduralCFG.java

→

src-soot/soot/jimple/toolkits/ide/icfg/BackwardsInterproceduralCFG.java





/de/bodden/ide/template-soot/soot/jimple/toolkits/ide/icfg




View file @ 0c5bf04d


0c5bf04d









package de.bodden.ide.template;





package soot.jimple.toolkits.ide.icfg;





















import soot.Body;





import soot.Body;







import soot.Unit;





import soot.Unit;



......













package de.bodden.ide.template;





package soot.jimple.toolkits.ide.icfg;





















import soot.Body;





import soot.Body;







import soot.Unit;





import soot.Unit;



......










package de.bodden.ide.template;





package soot.jimple.toolkits.ide.icfg;





















import soot.Body;





import soot.Body;







import soot.Unit;





import soot.Unit;



......


package de.bodden.ide.template;packagede.bodden.ide.templatede.bodden.ide.template;package soot.jimple.toolkits.ide.icfg;packagesoot.jimple.toolkits.ide.icfgsoot.jimple.toolkits.ide.icfg;import soot.Body;importsoot.Body;import soot.Body;importsoot.Body;import soot.Unit;importsoot.Unit;import soot.Unit;importsoot.Unit;



Prev


1


2


3


Next





Prev

1

2

3

Next











Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






