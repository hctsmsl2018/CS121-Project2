



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

fbd27266















Commit
fbd27266


authored
Oct 28, 2013
by


Steven Arzt



Browse files




Merge branch 'develop' of github.com:Sable/heros into develop







parents
3c46813b
e0e1cdaf













Changes
6




Hide whitespace changes

Inline
Side-by-side















.classpath








View file @ fbd27266






......@@ -4,7 +4,7 @@









 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry exported="true" kind="lib" path="guava-14.0.1.jar"/>










 <classpathentry kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry kind="output" path="bin"/>










</classpath>














src/heros/EdgeFunctionCache.java








View file @ fbd27266






......@@ -30,6 +30,7 @@ public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V>




















 Logger logger = LoggerFactory.getLogger(getClass());





















 @SuppressWarnings("unchecked")










 public EdgeFunctionCache(final EdgeFunctions<N, D, M, V> delegate, @SuppressWarnings("rawtypes") CacheBuilder builder) {










 this.delegate = delegate;










 



......














src/heros/SolverConfiguration.java








View file @ fbd27266






......@@ -25,7 +25,7 @@ public interface SolverConfiguration {









	 * 










	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order










	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call










	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.










	 * the <i>return</i> flow function with a <code>null</code> call site and return site.










	 */










 boolean followReturnsPastSeeds();










 



......














src/heros/flowfunc/Union.java



0 â†’ 100644







View file @ fbd27266













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.flowfunc;





















import heros.FlowFunction;





















import java.util.ArrayList;










import java.util.List;










import java.util.Set;





















import com.google.common.collect.Sets;
































/**










 * Represents the union of a set of flow functions.










 */










public class Union<D> implements FlowFunction<D> {










 










 private final FlowFunction<D>[] funcs;





















 private Union(FlowFunction<D>... funcs){










 this.funcs = funcs;










 } 





















 public Set<D> computeTargets(D source) {










 Set<D> res = Sets.newHashSet();










 for (FlowFunction<D> func : funcs) {










 res.addAll(func.computeTargets(source));










 }










 return res;










 }





















 @SuppressWarnings({ "rawtypes", "unchecked" })










 public static <D> FlowFunction<D> union(FlowFunction<D>... funcs) {










 List<FlowFunction<D>> list = new ArrayList<FlowFunction<D>>();










 for (FlowFunction<D> f : funcs) {










 if(f!=Identity.v()) {










 list.add(f);










 }










 }










 if(list.size()==1) return list.get(0);










 else if(list.isEmpty()) return Identity.v();










 return new Union(list.toArray(new FlowFunction[list.size()]));










 }










 










}














src/heros/solver/CountingThreadPoolExecutor.java








View file @ fbd27266






......@@ -11,6 +11,7 @@









package heros.solver;





















import java.util.concurrent.BlockingQueue;










import java.util.concurrent.RejectedExecutionException;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;














......@@ -36,8 +37,14 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 @Override










 public void execute(Runnable command) {










 numRunningTasks.increment();










 super.execute(command);










 try {










 numRunningTasks.increment();










 super.execute(command);










 }










 catch (RejectedExecutionException ex) {










 // If we were unable to submit the task, we may not count it!










 numRunningTasks.decrement();










 }










 }










 










 @Override



......














src/heros/solver/IDESolver.java








View file @ fbd27266






......@@ -69,6 +69,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 protected static final Logger logger = LoggerFactory.getLogger(IDESolver.class);





















 //enable with -Dorg.slf4j.simpleLogger.defaultLogLevel=trace










 public static final boolean DEBUG = logger.isDebugEnabled();





















 protected CountingThreadPoolExecutor executor;



......@@ -259,6 +260,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * @param edge the edge to process










     */










 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -268,6 +273,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * @param vpt










     */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(vpt);










 }










 



......@@ -276,6 +285,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * @param task










     */










 private void scheduleValueComputationTask(ValueComputationTask task) {










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(task);










 }










 



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

fbd27266















Commit
fbd27266


authored
Oct 28, 2013
by


Steven Arzt



Browse files




Merge branch 'develop' of github.com:Sable/heros into develop







parents
3c46813b
e0e1cdaf













Changes
6




Hide whitespace changes

Inline
Side-by-side















.classpath








View file @ fbd27266






......@@ -4,7 +4,7 @@









 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry exported="true" kind="lib" path="guava-14.0.1.jar"/>










 <classpathentry kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry kind="output" path="bin"/>










</classpath>














src/heros/EdgeFunctionCache.java








View file @ fbd27266






......@@ -30,6 +30,7 @@ public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V>




















 Logger logger = LoggerFactory.getLogger(getClass());





















 @SuppressWarnings("unchecked")










 public EdgeFunctionCache(final EdgeFunctions<N, D, M, V> delegate, @SuppressWarnings("rawtypes") CacheBuilder builder) {










 this.delegate = delegate;










 



......














src/heros/SolverConfiguration.java








View file @ fbd27266






......@@ -25,7 +25,7 @@ public interface SolverConfiguration {









	 * 










	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order










	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call










	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.










	 * the <i>return</i> flow function with a <code>null</code> call site and return site.










	 */










 boolean followReturnsPastSeeds();










 



......














src/heros/flowfunc/Union.java



0 â†’ 100644







View file @ fbd27266













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.flowfunc;





















import heros.FlowFunction;





















import java.util.ArrayList;










import java.util.List;










import java.util.Set;





















import com.google.common.collect.Sets;
































/**










 * Represents the union of a set of flow functions.










 */










public class Union<D> implements FlowFunction<D> {










 










 private final FlowFunction<D>[] funcs;





















 private Union(FlowFunction<D>... funcs){










 this.funcs = funcs;










 } 





















 public Set<D> computeTargets(D source) {










 Set<D> res = Sets.newHashSet();










 for (FlowFunction<D> func : funcs) {










 res.addAll(func.computeTargets(source));










 }










 return res;










 }





















 @SuppressWarnings({ "rawtypes", "unchecked" })










 public static <D> FlowFunction<D> union(FlowFunction<D>... funcs) {










 List<FlowFunction<D>> list = new ArrayList<FlowFunction<D>>();










 for (FlowFunction<D> f : funcs) {










 if(f!=Identity.v()) {










 list.add(f);










 }










 }










 if(list.size()==1) return list.get(0);










 else if(list.isEmpty()) return Identity.v();










 return new Union(list.toArray(new FlowFunction[list.size()]));










 }










 










}














src/heros/solver/CountingThreadPoolExecutor.java








View file @ fbd27266






......@@ -11,6 +11,7 @@









package heros.solver;





















import java.util.concurrent.BlockingQueue;










import java.util.concurrent.RejectedExecutionException;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;














......@@ -36,8 +37,14 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 @Override










 public void execute(Runnable command) {










 numRunningTasks.increment();










 super.execute(command);










 try {










 numRunningTasks.increment();










 super.execute(command);










 }










 catch (RejectedExecutionException ex) {










 // If we were unable to submit the task, we may not count it!










 numRunningTasks.decrement();










 }










 }










 










 @Override



......














src/heros/solver/IDESolver.java








View file @ fbd27266






......@@ -69,6 +69,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 protected static final Logger logger = LoggerFactory.getLogger(IDESolver.class);





















 //enable with -Dorg.slf4j.simpleLogger.defaultLogLevel=trace










 public static final boolean DEBUG = logger.isDebugEnabled();





















 protected CountingThreadPoolExecutor executor;



......@@ -259,6 +260,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * @param edge the edge to process










     */










 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -268,6 +273,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * @param vpt










     */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(vpt);










 }










 



......@@ -276,6 +285,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * @param task










     */










 private void scheduleValueComputationTask(ValueComputationTask task) {










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(task);










 }










 



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

fbd27266







Open sidebar



Joshua Garcia heros
Commits

fbd27266




Open sidebar

Joshua Garcia heros
Commits

fbd27266


Joshua GarciaherosherosCommits
fbd27266








Commit
fbd27266


authored
Oct 28, 2013
by


Steven Arzt



Browse files




Merge branch 'develop' of github.com:Sable/heros into develop







parents
3c46813b
e0e1cdaf













Changes
6




Hide whitespace changes

Inline
Side-by-side















.classpath








View file @ fbd27266






......@@ -4,7 +4,7 @@









 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry exported="true" kind="lib" path="guava-14.0.1.jar"/>










 <classpathentry kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry kind="output" path="bin"/>










</classpath>














src/heros/EdgeFunctionCache.java








View file @ fbd27266






......@@ -30,6 +30,7 @@ public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V>




















 Logger logger = LoggerFactory.getLogger(getClass());





















 @SuppressWarnings("unchecked")










 public EdgeFunctionCache(final EdgeFunctions<N, D, M, V> delegate, @SuppressWarnings("rawtypes") CacheBuilder builder) {










 this.delegate = delegate;










 



......














src/heros/SolverConfiguration.java








View file @ fbd27266






......@@ -25,7 +25,7 @@ public interface SolverConfiguration {









	 * 










	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order










	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call










	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.










	 * the <i>return</i> flow function with a <code>null</code> call site and return site.










	 */










 boolean followReturnsPastSeeds();










 



......














src/heros/flowfunc/Union.java



0 â†’ 100644







View file @ fbd27266













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.flowfunc;





















import heros.FlowFunction;





















import java.util.ArrayList;










import java.util.List;










import java.util.Set;





















import com.google.common.collect.Sets;
































/**










 * Represents the union of a set of flow functions.










 */










public class Union<D> implements FlowFunction<D> {










 










 private final FlowFunction<D>[] funcs;





















 private Union(FlowFunction<D>... funcs){










 this.funcs = funcs;










 } 





















 public Set<D> computeTargets(D source) {










 Set<D> res = Sets.newHashSet();










 for (FlowFunction<D> func : funcs) {










 res.addAll(func.computeTargets(source));










 }










 return res;










 }





















 @SuppressWarnings({ "rawtypes", "unchecked" })










 public static <D> FlowFunction<D> union(FlowFunction<D>... funcs) {










 List<FlowFunction<D>> list = new ArrayList<FlowFunction<D>>();










 for (FlowFunction<D> f : funcs) {










 if(f!=Identity.v()) {










 list.add(f);










 }










 }










 if(list.size()==1) return list.get(0);










 else if(list.isEmpty()) return Identity.v();










 return new Union(list.toArray(new FlowFunction[list.size()]));










 }










 










}














src/heros/solver/CountingThreadPoolExecutor.java








View file @ fbd27266






......@@ -11,6 +11,7 @@









package heros.solver;





















import java.util.concurrent.BlockingQueue;










import java.util.concurrent.RejectedExecutionException;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;














......@@ -36,8 +37,14 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 @Override










 public void execute(Runnable command) {










 numRunningTasks.increment();










 super.execute(command);










 try {










 numRunningTasks.increment();










 super.execute(command);










 }










 catch (RejectedExecutionException ex) {










 // If we were unable to submit the task, we may not count it!










 numRunningTasks.decrement();










 }










 }










 










 @Override



......














src/heros/solver/IDESolver.java








View file @ fbd27266






......@@ -69,6 +69,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 protected static final Logger logger = LoggerFactory.getLogger(IDESolver.class);





















 //enable with -Dorg.slf4j.simpleLogger.defaultLogLevel=trace










 public static final boolean DEBUG = logger.isDebugEnabled();





















 protected CountingThreadPoolExecutor executor;



......@@ -259,6 +260,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * @param edge the edge to process










     */










 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -268,6 +273,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * @param vpt










     */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(vpt);










 }










 



......@@ -276,6 +285,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * @param task










     */










 private void scheduleValueComputationTask(ValueComputationTask task) {










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(task);










 }










 



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
fbd27266


authored
Oct 28, 2013
by


Steven Arzt



Browse files




Merge branch 'develop' of github.com:Sable/heros into develop







parents
3c46813b
e0e1cdaf













Changes
6




Hide whitespace changes

Inline
Side-by-side















.classpath








View file @ fbd27266






......@@ -4,7 +4,7 @@









 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry exported="true" kind="lib" path="guava-14.0.1.jar"/>










 <classpathentry kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry kind="output" path="bin"/>










</classpath>














src/heros/EdgeFunctionCache.java








View file @ fbd27266






......@@ -30,6 +30,7 @@ public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V>




















 Logger logger = LoggerFactory.getLogger(getClass());





















 @SuppressWarnings("unchecked")










 public EdgeFunctionCache(final EdgeFunctions<N, D, M, V> delegate, @SuppressWarnings("rawtypes") CacheBuilder builder) {










 this.delegate = delegate;










 



......














src/heros/SolverConfiguration.java








View file @ fbd27266






......@@ -25,7 +25,7 @@ public interface SolverConfiguration {









	 * 










	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order










	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call










	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.










	 * the <i>return</i> flow function with a <code>null</code> call site and return site.










	 */










 boolean followReturnsPastSeeds();










 



......














src/heros/flowfunc/Union.java



0 â†’ 100644







View file @ fbd27266













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.flowfunc;





















import heros.FlowFunction;





















import java.util.ArrayList;










import java.util.List;










import java.util.Set;





















import com.google.common.collect.Sets;
































/**










 * Represents the union of a set of flow functions.










 */










public class Union<D> implements FlowFunction<D> {










 










 private final FlowFunction<D>[] funcs;





















 private Union(FlowFunction<D>... funcs){










 this.funcs = funcs;










 } 





















 public Set<D> computeTargets(D source) {










 Set<D> res = Sets.newHashSet();










 for (FlowFunction<D> func : funcs) {










 res.addAll(func.computeTargets(source));










 }










 return res;










 }





















 @SuppressWarnings({ "rawtypes", "unchecked" })










 public static <D> FlowFunction<D> union(FlowFunction<D>... funcs) {










 List<FlowFunction<D>> list = new ArrayList<FlowFunction<D>>();










 for (FlowFunction<D> f : funcs) {










 if(f!=Identity.v()) {










 list.add(f);










 }










 }










 if(list.size()==1) return list.get(0);










 else if(list.isEmpty()) return Identity.v();










 return new Union(list.toArray(new FlowFunction[list.size()]));










 }










 










}














src/heros/solver/CountingThreadPoolExecutor.java








View file @ fbd27266






......@@ -11,6 +11,7 @@









package heros.solver;





















import java.util.concurrent.BlockingQueue;










import java.util.concurrent.RejectedExecutionException;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;














......@@ -36,8 +37,14 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 @Override










 public void execute(Runnable command) {










 numRunningTasks.increment();










 super.execute(command);










 try {










 numRunningTasks.increment();










 super.execute(command);










 }










 catch (RejectedExecutionException ex) {










 // If we were unable to submit the task, we may not count it!










 numRunningTasks.decrement();










 }










 }










 










 @Override



......














src/heros/solver/IDESolver.java








View file @ fbd27266






......@@ -69,6 +69,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 protected static final Logger logger = LoggerFactory.getLogger(IDESolver.class);





















 //enable with -Dorg.slf4j.simpleLogger.defaultLogLevel=trace










 public static final boolean DEBUG = logger.isDebugEnabled();





















 protected CountingThreadPoolExecutor executor;



......@@ -259,6 +260,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * @param edge the edge to process










     */










 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -268,6 +273,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * @param vpt










     */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(vpt);










 }










 



......@@ -276,6 +285,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * @param task










     */










 private void scheduleValueComputationTask(ValueComputationTask task) {










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(task);










 }










 



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
fbd27266


authored
Oct 28, 2013
by


Steven Arzt



Browse files



Commit
fbd27266


authored
Oct 28, 2013
by


Steven Arzt

fbd27266authoredbySteven Arzt

Merge branch 'develop' of github.com:Sable/heros into develop






parents
3c46813b
e0e1cdaf
















parents
3c46813b
e0e1cdaf





parents












Changes
6
6


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










.classpath








View file @ fbd27266






......@@ -4,7 +4,7 @@









 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry exported="true" kind="lib" path="guava-14.0.1.jar"/>










 <classpathentry kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry kind="output" path="bin"/>










</classpath>














src/heros/EdgeFunctionCache.java








View file @ fbd27266






......@@ -30,6 +30,7 @@ public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V>




















 Logger logger = LoggerFactory.getLogger(getClass());





















 @SuppressWarnings("unchecked")










 public EdgeFunctionCache(final EdgeFunctions<N, D, M, V> delegate, @SuppressWarnings("rawtypes") CacheBuilder builder) {










 this.delegate = delegate;










 



......














src/heros/SolverConfiguration.java








View file @ fbd27266






......@@ -25,7 +25,7 @@ public interface SolverConfiguration {









	 * 










	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order










	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call










	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.










	 * the <i>return</i> flow function with a <code>null</code> call site and return site.










	 */










 boolean followReturnsPastSeeds();










 



......














src/heros/flowfunc/Union.java



0 â†’ 100644







View file @ fbd27266













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.flowfunc;





















import heros.FlowFunction;





















import java.util.ArrayList;










import java.util.List;










import java.util.Set;





















import com.google.common.collect.Sets;
































/**










 * Represents the union of a set of flow functions.










 */










public class Union<D> implements FlowFunction<D> {










 










 private final FlowFunction<D>[] funcs;





















 private Union(FlowFunction<D>... funcs){










 this.funcs = funcs;










 } 





















 public Set<D> computeTargets(D source) {










 Set<D> res = Sets.newHashSet();










 for (FlowFunction<D> func : funcs) {










 res.addAll(func.computeTargets(source));










 }










 return res;










 }





















 @SuppressWarnings({ "rawtypes", "unchecked" })










 public static <D> FlowFunction<D> union(FlowFunction<D>... funcs) {










 List<FlowFunction<D>> list = new ArrayList<FlowFunction<D>>();










 for (FlowFunction<D> f : funcs) {










 if(f!=Identity.v()) {










 list.add(f);










 }










 }










 if(list.size()==1) return list.get(0);










 else if(list.isEmpty()) return Identity.v();










 return new Union(list.toArray(new FlowFunction[list.size()]));










 }










 










}














src/heros/solver/CountingThreadPoolExecutor.java








View file @ fbd27266






......@@ -11,6 +11,7 @@









package heros.solver;





















import java.util.concurrent.BlockingQueue;










import java.util.concurrent.RejectedExecutionException;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;














......@@ -36,8 +37,14 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 @Override










 public void execute(Runnable command) {










 numRunningTasks.increment();










 super.execute(command);










 try {










 numRunningTasks.increment();










 super.execute(command);










 }










 catch (RejectedExecutionException ex) {










 // If we were unable to submit the task, we may not count it!










 numRunningTasks.decrement();










 }










 }










 










 @Override



......














src/heros/solver/IDESolver.java








View file @ fbd27266






......@@ -69,6 +69,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 protected static final Logger logger = LoggerFactory.getLogger(IDESolver.class);





















 //enable with -Dorg.slf4j.simpleLogger.defaultLogLevel=trace










 public static final boolean DEBUG = logger.isDebugEnabled();





















 protected CountingThreadPoolExecutor executor;



......@@ -259,6 +260,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * @param edge the edge to process










     */










 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -268,6 +273,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * @param vpt










     */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(vpt);










 }










 



......@@ -276,6 +285,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * @param task










     */










 private void scheduleValueComputationTask(ValueComputationTask task) {










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(task);










 }










 



......














.classpath








View file @ fbd27266






......@@ -4,7 +4,7 @@









 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry exported="true" kind="lib" path="guava-14.0.1.jar"/>










 <classpathentry kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry kind="output" path="bin"/>










</classpath>












.classpath








View file @ fbd27266








.classpath










View file @ fbd27266


fbd27266



......@@ -4,7 +4,7 @@









 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry exported="true" kind="lib" path="guava-14.0.1.jar"/>










 <classpathentry kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry kind="output" path="bin"/>










</classpath>






......@@ -4,7 +4,7 @@









 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry exported="true" kind="lib" path="guava-14.0.1.jar"/>










 <classpathentry kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry kind="output" path="bin"/>










</classpath>


 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/><classpathentrykind="con"path="org.eclipse.pde.core.requiredPlugins"/> <classpathentry kind="src" path="src"/><classpathentrykind="src"path="src"/> <classpathentry exported="true" kind="lib" path="guava-14.0.1.jar"/><classpathentryexported="true"kind="lib"path="guava-14.0.1.jar"/> <classpathentry kind="lib" path="slf4j-api-1.7.5.jar"/><classpathentrykind="lib"path="slf4j-api-1.7.5.jar"/> <classpathentry kind="lib" path="slf4j-simple-1.7.5.jar"/><classpathentrykind="lib"path="slf4j-simple-1.7.5.jar"/> <classpathentry exported="true" kind="lib" path="slf4j-api-1.7.5.jar"/><classpathentryexported=exported="true""true" kind="lib"path="slf4j-api-1.7.5.jar"/> <classpathentry exported="true" kind="lib" path="slf4j-simple-1.7.5.jar"/><classpathentryexported=exported="true""true" kind="lib"path="slf4j-simple-1.7.5.jar"/> <classpathentry kind="output" path="bin"/><classpathentrykind="output"path="bin"/></classpath></classpath>








src/heros/EdgeFunctionCache.java








View file @ fbd27266






......@@ -30,6 +30,7 @@ public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V>




















 Logger logger = LoggerFactory.getLogger(getClass());





















 @SuppressWarnings("unchecked")










 public EdgeFunctionCache(final EdgeFunctions<N, D, M, V> delegate, @SuppressWarnings("rawtypes") CacheBuilder builder) {










 this.delegate = delegate;










 



......












src/heros/EdgeFunctionCache.java








View file @ fbd27266








src/heros/EdgeFunctionCache.java










View file @ fbd27266


fbd27266



......@@ -30,6 +30,7 @@ public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V>




















 Logger logger = LoggerFactory.getLogger(getClass());





















 @SuppressWarnings("unchecked")










 public EdgeFunctionCache(final EdgeFunctions<N, D, M, V> delegate, @SuppressWarnings("rawtypes") CacheBuilder builder) {










 this.delegate = delegate;










 



......






......@@ -30,6 +30,7 @@ public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V>




















 Logger logger = LoggerFactory.getLogger(getClass());





















 @SuppressWarnings("unchecked")










 public EdgeFunctionCache(final EdgeFunctions<N, D, M, V> delegate, @SuppressWarnings("rawtypes") CacheBuilder builder) {










 this.delegate = delegate;










 



......


 Logger logger = LoggerFactory.getLogger(getClass());Loggerlogger=LoggerFactory.getLogger(getClass()); @SuppressWarnings("unchecked")@SuppressWarnings("unchecked") public EdgeFunctionCache(final EdgeFunctions<N, D, M, V> delegate, @SuppressWarnings("rawtypes") CacheBuilder builder) {publicEdgeFunctionCache(finalEdgeFunctions<N,D,M,V>delegate,@SuppressWarnings("rawtypes")CacheBuilderbuilder){ this.delegate = delegate;this.delegate=delegate; 








src/heros/SolverConfiguration.java








View file @ fbd27266






......@@ -25,7 +25,7 @@ public interface SolverConfiguration {









	 * 










	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order










	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call










	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.










	 * the <i>return</i> flow function with a <code>null</code> call site and return site.










	 */










 boolean followReturnsPastSeeds();










 



......












src/heros/SolverConfiguration.java








View file @ fbd27266








src/heros/SolverConfiguration.java










View file @ fbd27266


fbd27266



......@@ -25,7 +25,7 @@ public interface SolverConfiguration {









	 * 










	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order










	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call










	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.










	 * the <i>return</i> flow function with a <code>null</code> call site and return site.










	 */










 boolean followReturnsPastSeeds();










 



......






......@@ -25,7 +25,7 @@ public interface SolverConfiguration {









	 * 










	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order










	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call










	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.










	 * the <i>return</i> flow function with a <code>null</code> call site and return site.










	 */










 boolean followReturnsPastSeeds();










 



......


	 * 	 * 	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order	 * If this is enabled, when reaching the exit of a method that is <i>nowhere</i> called, in order	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call	 * to avoid not at all processing the exit statement, the {@link IDESolver} will call	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.	 * the <i>normal</i> flow function with both <i>curr</i> and <i>succ</i> set to the exit node.normalboth <i>curr</i> and <i>succ</i> set to the exit nod	 * the <i>return</i> flow function with a <code>null</code> call site and return site.	 * the <i>return</i> flow function with a <code>null</code> call site and return site.returna <code>null</code> call site and return sit	 */	 */ boolean followReturnsPastSeeds();booleanfollowReturnsPastSeeds(); 








src/heros/flowfunc/Union.java



0 â†’ 100644







View file @ fbd27266













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.flowfunc;





















import heros.FlowFunction;





















import java.util.ArrayList;










import java.util.List;










import java.util.Set;





















import com.google.common.collect.Sets;
































/**










 * Represents the union of a set of flow functions.










 */










public class Union<D> implements FlowFunction<D> {










 










 private final FlowFunction<D>[] funcs;





















 private Union(FlowFunction<D>... funcs){










 this.funcs = funcs;










 } 





















 public Set<D> computeTargets(D source) {










 Set<D> res = Sets.newHashSet();










 for (FlowFunction<D> func : funcs) {










 res.addAll(func.computeTargets(source));










 }










 return res;










 }





















 @SuppressWarnings({ "rawtypes", "unchecked" })










 public static <D> FlowFunction<D> union(FlowFunction<D>... funcs) {










 List<FlowFunction<D>> list = new ArrayList<FlowFunction<D>>();










 for (FlowFunction<D> f : funcs) {










 if(f!=Identity.v()) {










 list.add(f);










 }










 }










 if(list.size()==1) return list.get(0);










 else if(list.isEmpty()) return Identity.v();










 return new Union(list.toArray(new FlowFunction[list.size()]));










 }










 










}












src/heros/flowfunc/Union.java



0 â†’ 100644







View file @ fbd27266








src/heros/flowfunc/Union.java



0 â†’ 100644









View file @ fbd27266


fbd27266










/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.flowfunc;





















import heros.FlowFunction;





















import java.util.ArrayList;










import java.util.List;










import java.util.Set;





















import com.google.common.collect.Sets;
































/**










 * Represents the union of a set of flow functions.










 */










public class Union<D> implements FlowFunction<D> {










 










 private final FlowFunction<D>[] funcs;





















 private Union(FlowFunction<D>... funcs){










 this.funcs = funcs;










 } 





















 public Set<D> computeTargets(D source) {










 Set<D> res = Sets.newHashSet();










 for (FlowFunction<D> func : funcs) {










 res.addAll(func.computeTargets(source));










 }










 return res;










 }





















 @SuppressWarnings({ "rawtypes", "unchecked" })










 public static <D> FlowFunction<D> union(FlowFunction<D>... funcs) {










 List<FlowFunction<D>> list = new ArrayList<FlowFunction<D>>();










 for (FlowFunction<D> f : funcs) {










 if(f!=Identity.v()) {










 list.add(f);










 }










 }










 if(list.size()==1) return list.get(0);










 else if(list.isEmpty()) return Identity.v();










 return new Union(list.toArray(new FlowFunction[list.size()]));










 }










 










}













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.flowfunc;





















import heros.FlowFunction;





















import java.util.ArrayList;










import java.util.List;










import java.util.Set;





















import com.google.common.collect.Sets;
































/**










 * Represents the union of a set of flow functions.










 */










public class Union<D> implements FlowFunction<D> {










 










 private final FlowFunction<D>[] funcs;





















 private Union(FlowFunction<D>... funcs){










 this.funcs = funcs;










 } 





















 public Set<D> computeTargets(D source) {










 Set<D> res = Sets.newHashSet();










 for (FlowFunction<D> func : funcs) {










 res.addAll(func.computeTargets(source));










 }










 return res;










 }





















 @SuppressWarnings({ "rawtypes", "unchecked" })










 public static <D> FlowFunction<D> union(FlowFunction<D>... funcs) {










 List<FlowFunction<D>> list = new ArrayList<FlowFunction<D>>();










 for (FlowFunction<D> f : funcs) {










 if(f!=Identity.v()) {










 list.add(f);










 }










 }










 if(list.size()==1) return list.get(0);










 else if(list.isEmpty()) return Identity.v();










 return new Union(list.toArray(new FlowFunction[list.size()]));










 }










 










}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2012 Eric Bodden. * Copyright (c) 2012 Eric Bodden. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Eric Bodden - initial API and implementation *     Eric Bodden - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.flowfunc;packageheros.flowfunc;import heros.FlowFunction;importheros.FlowFunction;import java.util.ArrayList;importjava.util.ArrayList;import java.util.List;importjava.util.List;import java.util.Set;importjava.util.Set;import com.google.common.collect.Sets;importcom.google.common.collect.Sets;/**/** * Represents the union of a set of flow functions. * Represents the union of a set of flow functions. */ */public class Union<D> implements FlowFunction<D> {publicclassUnion<D>implementsFlowFunction<D>{  private final FlowFunction<D>[] funcs;privatefinalFlowFunction<D>[]funcs; private Union(FlowFunction<D>... funcs){privateUnion(FlowFunction<D>...funcs){ this.funcs = funcs;this.funcs=funcs; } } public Set<D> computeTargets(D source) {publicSet<D>computeTargets(Dsource){ Set<D> res = Sets.newHashSet();Set<D>res=Sets.newHashSet(); for (FlowFunction<D> func : funcs) {for(FlowFunction<D>func:funcs){ res.addAll(func.computeTargets(source));res.addAll(func.computeTargets(source)); }} return res;returnres; }} @SuppressWarnings({ "rawtypes", "unchecked" })@SuppressWarnings({"rawtypes","unchecked"}) public static <D> FlowFunction<D> union(FlowFunction<D>... funcs) {publicstatic<D>FlowFunction<D>union(FlowFunction<D>...funcs){ List<FlowFunction<D>> list = new ArrayList<FlowFunction<D>>();List<FlowFunction<D>>list=newArrayList<FlowFunction<D>>(); for (FlowFunction<D> f : funcs) {for(FlowFunction<D>f:funcs){ if(f!=Identity.v()) {if(f!=Identity.v()){ list.add(f);list.add(f); }} }} if(list.size()==1) return list.get(0);if(list.size()==1)returnlist.get(0); else if(list.isEmpty()) return Identity.v();elseif(list.isEmpty())returnIdentity.v(); return new Union(list.toArray(new FlowFunction[list.size()]));returnnewUnion(list.toArray(newFlowFunction[list.size()])); }} }}








src/heros/solver/CountingThreadPoolExecutor.java








View file @ fbd27266






......@@ -11,6 +11,7 @@









package heros.solver;





















import java.util.concurrent.BlockingQueue;










import java.util.concurrent.RejectedExecutionException;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;














......@@ -36,8 +37,14 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 @Override










 public void execute(Runnable command) {










 numRunningTasks.increment();










 super.execute(command);










 try {










 numRunningTasks.increment();










 super.execute(command);










 }










 catch (RejectedExecutionException ex) {










 // If we were unable to submit the task, we may not count it!










 numRunningTasks.decrement();










 }










 }










 










 @Override



......












src/heros/solver/CountingThreadPoolExecutor.java








View file @ fbd27266








src/heros/solver/CountingThreadPoolExecutor.java










View file @ fbd27266


fbd27266



......@@ -11,6 +11,7 @@









package heros.solver;





















import java.util.concurrent.BlockingQueue;










import java.util.concurrent.RejectedExecutionException;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;














......@@ -36,8 +37,14 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 @Override










 public void execute(Runnable command) {










 numRunningTasks.increment();










 super.execute(command);










 try {










 numRunningTasks.increment();










 super.execute(command);










 }










 catch (RejectedExecutionException ex) {










 // If we were unable to submit the task, we may not count it!










 numRunningTasks.decrement();










 }










 }










 










 @Override



......






......@@ -11,6 +11,7 @@









package heros.solver;





















import java.util.concurrent.BlockingQueue;










import java.util.concurrent.RejectedExecutionException;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;














......@@ -36,8 +37,14 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 @Override










 public void execute(Runnable command) {










 numRunningTasks.increment();










 super.execute(command);










 try {










 numRunningTasks.increment();










 super.execute(command);










 }










 catch (RejectedExecutionException ex) {










 // If we were unable to submit the task, we may not count it!










 numRunningTasks.decrement();










 }










 }










 










 @Override



......


package heros.solver;packageheros.solver;import java.util.concurrent.BlockingQueue;importjava.util.concurrent.BlockingQueue;import java.util.concurrent.RejectedExecutionException;importjava.util.concurrent.RejectedExecutionException;import java.util.concurrent.ThreadPoolExecutor;importjava.util.concurrent.ThreadPoolExecutor;import java.util.concurrent.TimeUnit;importjava.util.concurrent.TimeUnit; @Override@Override public void execute(Runnable command) {publicvoidexecute(Runnablecommand){ numRunningTasks.increment();numRunningTasks.increment(); super.execute(command);super.execute(command); try {try{ numRunningTasks.increment();numRunningTasks.increment(); super.execute(command);super.execute(command); }} catch (RejectedExecutionException ex) {catch(RejectedExecutionExceptionex){ // If we were unable to submit the task, we may not count it!// If we were unable to submit the task, we may not count it! numRunningTasks.decrement();numRunningTasks.decrement(); }} }}  @Override@Override








src/heros/solver/IDESolver.java








View file @ fbd27266






......@@ -69,6 +69,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 protected static final Logger logger = LoggerFactory.getLogger(IDESolver.class);





















 //enable with -Dorg.slf4j.simpleLogger.defaultLogLevel=trace










 public static final boolean DEBUG = logger.isDebugEnabled();





















 protected CountingThreadPoolExecutor executor;



......@@ -259,6 +260,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * @param edge the edge to process










     */










 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -268,6 +273,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * @param vpt










     */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(vpt);










 }










 



......@@ -276,6 +285,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * @param task










     */










 private void scheduleValueComputationTask(ValueComputationTask task) {










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(task);










 }










 



......












src/heros/solver/IDESolver.java








View file @ fbd27266








src/heros/solver/IDESolver.java










View file @ fbd27266


fbd27266



......@@ -69,6 +69,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 protected static final Logger logger = LoggerFactory.getLogger(IDESolver.class);





















 //enable with -Dorg.slf4j.simpleLogger.defaultLogLevel=trace










 public static final boolean DEBUG = logger.isDebugEnabled();





















 protected CountingThreadPoolExecutor executor;



......@@ -259,6 +260,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * @param edge the edge to process










     */










 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -268,6 +273,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * @param vpt










     */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(vpt);










 }










 



......@@ -276,6 +285,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * @param task










     */










 private void scheduleValueComputationTask(ValueComputationTask task) {










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(task);










 }










 



......






......@@ -69,6 +69,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 protected static final Logger logger = LoggerFactory.getLogger(IDESolver.class);





















 //enable with -Dorg.slf4j.simpleLogger.defaultLogLevel=trace










 public static final boolean DEBUG = logger.isDebugEnabled();





















 protected CountingThreadPoolExecutor executor;



......@@ -259,6 +260,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * @param edge the edge to process










     */










 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -268,6 +273,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * @param vpt










     */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(vpt);










 }










 



......@@ -276,6 +285,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * @param task










     */










 private void scheduleValueComputationTask(ValueComputationTask task) {










 // If the executor has been killed, there is little point










 // in submitting new tasks










 if (executor.isTerminating())










 return;










 executor.execute(task);










 }










 



......


  protected static final Logger logger = LoggerFactory.getLogger(IDESolver.class);protectedstaticfinalLoggerlogger=LoggerFactory.getLogger(IDESolver.class); //enable with -Dorg.slf4j.simpleLogger.defaultLogLevel=trace//enable with -Dorg.slf4j.simpleLogger.defaultLogLevel=trace public static final boolean DEBUG = logger.isDebugEnabled();publicstaticfinalbooleanDEBUG=logger.isDebugEnabled(); protected CountingThreadPoolExecutor executor;protectedCountingThreadPoolExecutorexecutor;     * @param edge the edge to process     * @param edge the edge to process     */     */ protected void scheduleEdgeProcessing(PathEdge<N,D> edge){protectedvoidscheduleEdgeProcessing(PathEdge<N,D>edge){ // If the executor has been killed, there is little point// If the executor has been killed, there is little point // in submitting new tasks// in submitting new tasks if (executor.isTerminating())if(executor.isTerminating()) return;return; executor.execute(new PathEdgeProcessingTask(edge));executor.execute(newPathEdgeProcessingTask(edge)); propagationCount++;propagationCount++; }}     * @param vpt     * @param vpt     */     */ private void scheduleValueProcessing(ValuePropagationTask vpt){privatevoidscheduleValueProcessing(ValuePropagationTaskvpt){ // If the executor has been killed, there is little point// If the executor has been killed, there is little point // in submitting new tasks// in submitting new tasks if (executor.isTerminating())if(executor.isTerminating()) return;return; executor.execute(vpt);executor.execute(vpt); }}      * @param task     * @param task     */     */ private void scheduleValueComputationTask(ValueComputationTask task) {privatevoidscheduleValueComputationTask(ValueComputationTasktask){ // If the executor has been killed, there is little point// If the executor has been killed, there is little point // in submitting new tasks// in submitting new tasks if (executor.isTerminating())if(executor.isTerminating()) return;return; executor.execute(task);executor.execute(task); }} 









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






