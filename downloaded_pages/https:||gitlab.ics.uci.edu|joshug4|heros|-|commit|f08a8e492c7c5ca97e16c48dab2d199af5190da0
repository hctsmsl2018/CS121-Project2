



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

f08a8e49















Commit
f08a8e49


authored
Jan 14, 2015
by


Johannes Lerch



Browse files




k-limitting; fix in constraint propagation







parent
f227e097













Changes
5




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPath.java








View file @ f08a8e49






......@@ -14,6 +14,7 @@ import java.util.Arrays;









import java.util.HashSet;










import java.util.Set;





















import com.google.common.base.Function;










import com.google.common.base.Joiner;










import com.google.common.collect.Sets;














......@@ -29,8 +30,18 @@ public class AccessPath<FieldRef> {









 }










 










 AccessPath(FieldRef[] accesses, Set<FieldRef>[] exclusions) {










 this.accesses = accesses;










 this.exclusions = exclusions;










 int k = 3;










 if(accesses.length > k) {










 this.accesses = Arrays.copyOf(accesses, k);










 this.exclusions = new Set[0];










 }










 else {










 this.accesses = accesses;










 if(exclusions.length > k - accesses.length)










 this.exclusions = Arrays.copyOf(exclusions, k - accesses.length);










 else










 this.exclusions = exclusions;










 }










 }





















 public boolean hasExclusions() {



......@@ -47,7 +58,7 @@ public class AccessPath<FieldRef> {









 










 public AccessPath<FieldRef> addFieldReference(FieldRef... fieldReferences) {










 if(isAccessInExclusions(fieldReferences))










 throw new IllegalArgumentException();










 throw new IllegalArgumentException("FieldRef "+Arrays.toString(fieldReferences)+" cannot be added to "+toString());





















 FieldRef[] newAccesses = Arrays.copyOf(accesses, accesses.length+fieldReferences.length);










 System.arraycopy(fieldReferences, 0, newAccesses, accesses.length, fieldReferences.length);



......@@ -173,6 +184,21 @@ public class AccessPath<FieldRef> {









 return result;










 }










 










 public <T> AccessPath<T> map(Function<FieldRef, T> function) {










 T[] newAccesses = (T[]) new Object[accesses.length];










 for(int i=0; i<accesses.length; i++) {










 newAccesses[i] = function.apply(accesses[i]);










 }










 Set<T>[] newExclusions = new Set[exclusions.length];










 for(int i=0; i<exclusions.length; i++) {










 newExclusions[i] = Sets.newHashSet();










 for(FieldRef excl : exclusions[i]) {










 newExclusions[i].add(function.apply(excl));










 }










 }










 return new AccessPath<T>(newAccesses, newExclusions);










 }










 










 public class ExclusionSet {










 private int index;










 



......














src/heros/alias/DeltaConstraint.java



0 â†’ 100644







View file @ f08a8e49













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.Constraint;





















public class DeltaConstraint<FieldRef> implements Constraint<FieldRef> {





















 private FieldRef[] delta;










 private AccessPath<FieldRef> accPathAtCallee;





















 public DeltaConstraint(AccessPath<FieldRef> accPathAtCaller, AccessPath<FieldRef> accPathAtCallee) {










 this.accPathAtCallee = accPathAtCallee;










 delta = accPathAtCaller.getDeltaTo(accPathAtCallee); 










 }





















 @Override










 public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {










 return accPath.addFieldReference(delta).mergeExcludedFieldReferences(accPathAtCallee);










 }





















}














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ f08a8e49






......@@ -22,6 +22,7 @@ import heros.solver.PathEdge;




















import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;



......@@ -301,15 +302,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource())) {










 logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}", edge, incomingEdge);










 










 final FieldRef[] delta = incomingEdge.getCalleeSourceFact().getAccessPath().getDeltaTo(edge.factAtSource().getAccessPath()); 










 Constraint<FieldRef> constraint = new Constraint<FieldRef>() {










 @Override










 public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {










 return accPath.addFieldReference(delta).mergeExcludedFieldReferences(edge.factAtSource().getAccessPath());










 }










 };










 










 propagateConstrained(constraint, new ConcretizationPathEdge<>(










 Constraint<FieldRef> constraint = new DeltaConstraint<FieldRef>(incomingEdge.getCalleeSourceFact().getAccessPath(), edge.factAtSource().getAccessPath());










 propagateConstrained(new ConcretizationPathEdge<>(










 applyConstraint(constraint, incomingEdge.getCallerSourceFact()), 










 incomingEdge.getCallSite(), 










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact()),



......@@ -447,7 +441,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 Set<ConstrainedFact<FieldRef, D>> res = computeNormalFlowFunction(flowFunction, d1, d2);










 for (ConstrainedFact<FieldRef, D> d3 : res) {










 if(d3.getConstraint() != null) {










 propagateConstrained(d3.getConstraint(), new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 propagateConstrained(new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 }










 else










 propagate(new PathEdge<>(d1, m, d3.getFact()), null, false);



......@@ -462,9 +456,13 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return fact.cloneWithAccessPath(constraint.applyToAccessPath(fact.getAccessPath()));










 }










 










 private boolean propagateConstrained(Constraint<FieldRef> constraint, PathEdge<N, D> pathEdge) {










 private boolean propagateConstrained(PathEdge<N, D> pathEdge) {










 return propagateConstrained(pathEdge, new HashMap<N, Boolean>());










 }










 










 private boolean propagateConstrained(PathEdge<N, D> pathEdge, Map<N, Boolean> visited) {










 M calleeMethod = icfg.getMethodOf(pathEdge.getTarget());










 logger.trace("Checking interest at method {} in fact {} with field access {}", calleeMethod, pathEdge.factAtSource(), constraint);










 logger.trace("Checking interest at method {} in fact {}", calleeMethod, pathEdge.factAtSource());





















 boolean propagate = false;










 if(pathEdge.factAtSource().equals(zeroValue))



......@@ -477,15 +475,25 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagate = !callSitesWithInterest.isEmpty();










 










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixesOf(calleeMethod, pathEdge.factAtSource())) {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(constraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(constraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 propagate |= propagateConstrained(constraint, callerEdge);










 if(visited.containsKey(incEdge.getCallSite())) {










 if(visited.get(incEdge.getCallSite()) != null)










 propagate |= visited.get(incEdge.getCallSite());










 }










 else {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 Constraint<FieldRef> callerConstraint = new DeltaConstraint<FieldRef>(incEdge.getCalleeSourceFact().getAccessPath(), pathEdge.factAtSource().getAccessPath());










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(callerConstraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(callerConstraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 visited.put(incEdge.getCallSite(), null);










 boolean result = propagateConstrained(callerEdge, visited);










 visited.put(incEdge.getCallSite(), result);










 propagate |= result;










 }










 }










 }










 }



......














src/heros/alias/FlowFunction.java








View file @ f08a8e49






......@@ -118,6 +118,31 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 public String toString() {










 return "^"+fieldRef.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((fieldRef == null) ? 0 : fieldRef.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof WriteFieldConstraint))










 return false;










 WriteFieldConstraint other = (WriteFieldConstraint) obj;










 if (fieldRef == null) {










 if (other.fieldRef != null)










 return false;










 } else if (!fieldRef.equals(other.fieldRef))










 return false;










 return true;










 }










 }










 










 public class ReadFieldConstraint<FieldRef> implements Constraint<FieldRef> {



......@@ -137,5 +162,30 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 public String toString() {










 return fieldRef.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((fieldRef == null) ? 0 : fieldRef.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof ReadFieldConstraint))










 return false;










 ReadFieldConstraint other = (ReadFieldConstraint) obj;










 if (fieldRef == null) {










 if (other.fieldRef != null)










 return false;










 } else if (!fieldRef.equals(other.fieldRef))










 return false;










 return true;










 }










 }










}














test/heros/alias/FieldSensitiveSolverTest.java








View file @ f08a8e49






......@@ -477,4 +477,92 @@ public class FieldSensitiveSolverTest {









 helper.runSolver(true, "a");










 }










 










 @Test










 public void pauseEdgeMutuallyRecursiveCallers() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.x")),










 callSite("b").calls("bar",flow("1.x", "2.x")));










 










 helper.method("bar",










 startPoints("c"),










 callSite("c").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),










 callSite("d").calls("bar", flow("3", "2")).retSite("e", flow("3", "3")),










 normalStmt("e").succ("f", flow("3", readField("f"), "4")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void pauseDiamondShapedCallerChain() {










 helper.method("bar",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.x")),










 callSite("b").calls("foo1", flow("1.x", "2.x")).calls("foo2", flow("1.x", "2.x")));










 










 helper.method("foo1",










 startPoints("c1"),










 callSite("c1").calls("xyz", flow("2", "3")));










 










 helper.method("foo2",










 startPoints("c2"),










 callSite("c2").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),










 normalStmt("d").succ("e", flow("3", readField("f"), "4")),










 normalStmt("e").succ("f"));










 










 helper.runSolver(false, "a");










 }





















 @Test










 public void dontPauseDiamondShapedCallerChain() {










 helper.method("bar",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.x")),










 callSite("b").calls("foo1", flow("1.x", "2.f")).calls("foo2", flow("1.x", "2.f")));










 










 helper.method("foo1",










 startPoints("c1"),










 callSite("c1").calls("xyz", flow("2", "3")));










 










 helper.method("foo2",










 startPoints("c2"),










 callSite("c2").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),










 normalStmt("d").succ("e", flow("3", readField("f"), "4")),










 normalStmt("e").succ("f", kill("4")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void correctDeltaConstraintApplication() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),










 callSite("b").calls("bar", flow("1", "1")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("1", writeField("a"), "1^a")),










 callSite("d").calls("xyz", flow("1^a", "1^a")));










 










 helper.method("xyz",










 startPoints("e"),










 normalStmt("e").succ("f", flow("1", readField("f"), "2")),










 callSite("f").calls("baz", flow("2", "3")));










 










 helper.method("baz",










 startPoints("g"),










 normalStmt("g").succ("h", flow("3", readField("a"), "4")));










 










 helper.runSolver(false, "a");










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

f08a8e49















Commit
f08a8e49


authored
Jan 14, 2015
by


Johannes Lerch



Browse files




k-limitting; fix in constraint propagation







parent
f227e097













Changes
5




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPath.java








View file @ f08a8e49






......@@ -14,6 +14,7 @@ import java.util.Arrays;









import java.util.HashSet;










import java.util.Set;





















import com.google.common.base.Function;










import com.google.common.base.Joiner;










import com.google.common.collect.Sets;














......@@ -29,8 +30,18 @@ public class AccessPath<FieldRef> {









 }










 










 AccessPath(FieldRef[] accesses, Set<FieldRef>[] exclusions) {










 this.accesses = accesses;










 this.exclusions = exclusions;










 int k = 3;










 if(accesses.length > k) {










 this.accesses = Arrays.copyOf(accesses, k);










 this.exclusions = new Set[0];










 }










 else {










 this.accesses = accesses;










 if(exclusions.length > k - accesses.length)










 this.exclusions = Arrays.copyOf(exclusions, k - accesses.length);










 else










 this.exclusions = exclusions;










 }










 }





















 public boolean hasExclusions() {



......@@ -47,7 +58,7 @@ public class AccessPath<FieldRef> {









 










 public AccessPath<FieldRef> addFieldReference(FieldRef... fieldReferences) {










 if(isAccessInExclusions(fieldReferences))










 throw new IllegalArgumentException();










 throw new IllegalArgumentException("FieldRef "+Arrays.toString(fieldReferences)+" cannot be added to "+toString());





















 FieldRef[] newAccesses = Arrays.copyOf(accesses, accesses.length+fieldReferences.length);










 System.arraycopy(fieldReferences, 0, newAccesses, accesses.length, fieldReferences.length);



......@@ -173,6 +184,21 @@ public class AccessPath<FieldRef> {









 return result;










 }










 










 public <T> AccessPath<T> map(Function<FieldRef, T> function) {










 T[] newAccesses = (T[]) new Object[accesses.length];










 for(int i=0; i<accesses.length; i++) {










 newAccesses[i] = function.apply(accesses[i]);










 }










 Set<T>[] newExclusions = new Set[exclusions.length];










 for(int i=0; i<exclusions.length; i++) {










 newExclusions[i] = Sets.newHashSet();










 for(FieldRef excl : exclusions[i]) {










 newExclusions[i].add(function.apply(excl));










 }










 }










 return new AccessPath<T>(newAccesses, newExclusions);










 }










 










 public class ExclusionSet {










 private int index;










 



......














src/heros/alias/DeltaConstraint.java



0 â†’ 100644







View file @ f08a8e49













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.Constraint;





















public class DeltaConstraint<FieldRef> implements Constraint<FieldRef> {





















 private FieldRef[] delta;










 private AccessPath<FieldRef> accPathAtCallee;





















 public DeltaConstraint(AccessPath<FieldRef> accPathAtCaller, AccessPath<FieldRef> accPathAtCallee) {










 this.accPathAtCallee = accPathAtCallee;










 delta = accPathAtCaller.getDeltaTo(accPathAtCallee); 










 }





















 @Override










 public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {










 return accPath.addFieldReference(delta).mergeExcludedFieldReferences(accPathAtCallee);










 }





















}














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ f08a8e49






......@@ -22,6 +22,7 @@ import heros.solver.PathEdge;




















import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;



......@@ -301,15 +302,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource())) {










 logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}", edge, incomingEdge);










 










 final FieldRef[] delta = incomingEdge.getCalleeSourceFact().getAccessPath().getDeltaTo(edge.factAtSource().getAccessPath()); 










 Constraint<FieldRef> constraint = new Constraint<FieldRef>() {










 @Override










 public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {










 return accPath.addFieldReference(delta).mergeExcludedFieldReferences(edge.factAtSource().getAccessPath());










 }










 };










 










 propagateConstrained(constraint, new ConcretizationPathEdge<>(










 Constraint<FieldRef> constraint = new DeltaConstraint<FieldRef>(incomingEdge.getCalleeSourceFact().getAccessPath(), edge.factAtSource().getAccessPath());










 propagateConstrained(new ConcretizationPathEdge<>(










 applyConstraint(constraint, incomingEdge.getCallerSourceFact()), 










 incomingEdge.getCallSite(), 










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact()),



......@@ -447,7 +441,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 Set<ConstrainedFact<FieldRef, D>> res = computeNormalFlowFunction(flowFunction, d1, d2);










 for (ConstrainedFact<FieldRef, D> d3 : res) {










 if(d3.getConstraint() != null) {










 propagateConstrained(d3.getConstraint(), new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 propagateConstrained(new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 }










 else










 propagate(new PathEdge<>(d1, m, d3.getFact()), null, false);



......@@ -462,9 +456,13 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return fact.cloneWithAccessPath(constraint.applyToAccessPath(fact.getAccessPath()));










 }










 










 private boolean propagateConstrained(Constraint<FieldRef> constraint, PathEdge<N, D> pathEdge) {










 private boolean propagateConstrained(PathEdge<N, D> pathEdge) {










 return propagateConstrained(pathEdge, new HashMap<N, Boolean>());










 }










 










 private boolean propagateConstrained(PathEdge<N, D> pathEdge, Map<N, Boolean> visited) {










 M calleeMethod = icfg.getMethodOf(pathEdge.getTarget());










 logger.trace("Checking interest at method {} in fact {} with field access {}", calleeMethod, pathEdge.factAtSource(), constraint);










 logger.trace("Checking interest at method {} in fact {}", calleeMethod, pathEdge.factAtSource());





















 boolean propagate = false;










 if(pathEdge.factAtSource().equals(zeroValue))



......@@ -477,15 +475,25 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagate = !callSitesWithInterest.isEmpty();










 










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixesOf(calleeMethod, pathEdge.factAtSource())) {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(constraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(constraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 propagate |= propagateConstrained(constraint, callerEdge);










 if(visited.containsKey(incEdge.getCallSite())) {










 if(visited.get(incEdge.getCallSite()) != null)










 propagate |= visited.get(incEdge.getCallSite());










 }










 else {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 Constraint<FieldRef> callerConstraint = new DeltaConstraint<FieldRef>(incEdge.getCalleeSourceFact().getAccessPath(), pathEdge.factAtSource().getAccessPath());










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(callerConstraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(callerConstraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 visited.put(incEdge.getCallSite(), null);










 boolean result = propagateConstrained(callerEdge, visited);










 visited.put(incEdge.getCallSite(), result);










 propagate |= result;










 }










 }










 }










 }



......














src/heros/alias/FlowFunction.java








View file @ f08a8e49






......@@ -118,6 +118,31 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 public String toString() {










 return "^"+fieldRef.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((fieldRef == null) ? 0 : fieldRef.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof WriteFieldConstraint))










 return false;










 WriteFieldConstraint other = (WriteFieldConstraint) obj;










 if (fieldRef == null) {










 if (other.fieldRef != null)










 return false;










 } else if (!fieldRef.equals(other.fieldRef))










 return false;










 return true;










 }










 }










 










 public class ReadFieldConstraint<FieldRef> implements Constraint<FieldRef> {



......@@ -137,5 +162,30 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 public String toString() {










 return fieldRef.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((fieldRef == null) ? 0 : fieldRef.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof ReadFieldConstraint))










 return false;










 ReadFieldConstraint other = (ReadFieldConstraint) obj;










 if (fieldRef == null) {










 if (other.fieldRef != null)










 return false;










 } else if (!fieldRef.equals(other.fieldRef))










 return false;










 return true;










 }










 }










}














test/heros/alias/FieldSensitiveSolverTest.java








View file @ f08a8e49






......@@ -477,4 +477,92 @@ public class FieldSensitiveSolverTest {









 helper.runSolver(true, "a");










 }










 










 @Test










 public void pauseEdgeMutuallyRecursiveCallers() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.x")),










 callSite("b").calls("bar",flow("1.x", "2.x")));










 










 helper.method("bar",










 startPoints("c"),










 callSite("c").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),










 callSite("d").calls("bar", flow("3", "2")).retSite("e", flow("3", "3")),










 normalStmt("e").succ("f", flow("3", readField("f"), "4")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void pauseDiamondShapedCallerChain() {










 helper.method("bar",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.x")),










 callSite("b").calls("foo1", flow("1.x", "2.x")).calls("foo2", flow("1.x", "2.x")));










 










 helper.method("foo1",










 startPoints("c1"),










 callSite("c1").calls("xyz", flow("2", "3")));










 










 helper.method("foo2",










 startPoints("c2"),










 callSite("c2").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),










 normalStmt("d").succ("e", flow("3", readField("f"), "4")),










 normalStmt("e").succ("f"));










 










 helper.runSolver(false, "a");










 }





















 @Test










 public void dontPauseDiamondShapedCallerChain() {










 helper.method("bar",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.x")),










 callSite("b").calls("foo1", flow("1.x", "2.f")).calls("foo2", flow("1.x", "2.f")));










 










 helper.method("foo1",










 startPoints("c1"),










 callSite("c1").calls("xyz", flow("2", "3")));










 










 helper.method("foo2",










 startPoints("c2"),










 callSite("c2").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),










 normalStmt("d").succ("e", flow("3", readField("f"), "4")),










 normalStmt("e").succ("f", kill("4")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void correctDeltaConstraintApplication() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),










 callSite("b").calls("bar", flow("1", "1")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("1", writeField("a"), "1^a")),










 callSite("d").calls("xyz", flow("1^a", "1^a")));










 










 helper.method("xyz",










 startPoints("e"),










 normalStmt("e").succ("f", flow("1", readField("f"), "2")),










 callSite("f").calls("baz", flow("2", "3")));










 










 helper.method("baz",










 startPoints("g"),










 normalStmt("g").succ("h", flow("3", readField("a"), "4")));










 










 helper.runSolver(false, "a");










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

f08a8e49







Open sidebar



Joshua Garcia heros
Commits

f08a8e49




Open sidebar

Joshua Garcia heros
Commits

f08a8e49


Joshua GarciaherosherosCommits
f08a8e49








Commit
f08a8e49


authored
Jan 14, 2015
by


Johannes Lerch



Browse files




k-limitting; fix in constraint propagation







parent
f227e097













Changes
5




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPath.java








View file @ f08a8e49






......@@ -14,6 +14,7 @@ import java.util.Arrays;









import java.util.HashSet;










import java.util.Set;





















import com.google.common.base.Function;










import com.google.common.base.Joiner;










import com.google.common.collect.Sets;














......@@ -29,8 +30,18 @@ public class AccessPath<FieldRef> {









 }










 










 AccessPath(FieldRef[] accesses, Set<FieldRef>[] exclusions) {










 this.accesses = accesses;










 this.exclusions = exclusions;










 int k = 3;










 if(accesses.length > k) {










 this.accesses = Arrays.copyOf(accesses, k);










 this.exclusions = new Set[0];










 }










 else {










 this.accesses = accesses;










 if(exclusions.length > k - accesses.length)










 this.exclusions = Arrays.copyOf(exclusions, k - accesses.length);










 else










 this.exclusions = exclusions;










 }










 }





















 public boolean hasExclusions() {



......@@ -47,7 +58,7 @@ public class AccessPath<FieldRef> {









 










 public AccessPath<FieldRef> addFieldReference(FieldRef... fieldReferences) {










 if(isAccessInExclusions(fieldReferences))










 throw new IllegalArgumentException();










 throw new IllegalArgumentException("FieldRef "+Arrays.toString(fieldReferences)+" cannot be added to "+toString());





















 FieldRef[] newAccesses = Arrays.copyOf(accesses, accesses.length+fieldReferences.length);










 System.arraycopy(fieldReferences, 0, newAccesses, accesses.length, fieldReferences.length);



......@@ -173,6 +184,21 @@ public class AccessPath<FieldRef> {









 return result;










 }










 










 public <T> AccessPath<T> map(Function<FieldRef, T> function) {










 T[] newAccesses = (T[]) new Object[accesses.length];










 for(int i=0; i<accesses.length; i++) {










 newAccesses[i] = function.apply(accesses[i]);










 }










 Set<T>[] newExclusions = new Set[exclusions.length];










 for(int i=0; i<exclusions.length; i++) {










 newExclusions[i] = Sets.newHashSet();










 for(FieldRef excl : exclusions[i]) {










 newExclusions[i].add(function.apply(excl));










 }










 }










 return new AccessPath<T>(newAccesses, newExclusions);










 }










 










 public class ExclusionSet {










 private int index;










 



......














src/heros/alias/DeltaConstraint.java



0 â†’ 100644







View file @ f08a8e49













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.Constraint;





















public class DeltaConstraint<FieldRef> implements Constraint<FieldRef> {





















 private FieldRef[] delta;










 private AccessPath<FieldRef> accPathAtCallee;





















 public DeltaConstraint(AccessPath<FieldRef> accPathAtCaller, AccessPath<FieldRef> accPathAtCallee) {










 this.accPathAtCallee = accPathAtCallee;










 delta = accPathAtCaller.getDeltaTo(accPathAtCallee); 










 }





















 @Override










 public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {










 return accPath.addFieldReference(delta).mergeExcludedFieldReferences(accPathAtCallee);










 }





















}














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ f08a8e49






......@@ -22,6 +22,7 @@ import heros.solver.PathEdge;




















import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;



......@@ -301,15 +302,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource())) {










 logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}", edge, incomingEdge);










 










 final FieldRef[] delta = incomingEdge.getCalleeSourceFact().getAccessPath().getDeltaTo(edge.factAtSource().getAccessPath()); 










 Constraint<FieldRef> constraint = new Constraint<FieldRef>() {










 @Override










 public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {










 return accPath.addFieldReference(delta).mergeExcludedFieldReferences(edge.factAtSource().getAccessPath());










 }










 };










 










 propagateConstrained(constraint, new ConcretizationPathEdge<>(










 Constraint<FieldRef> constraint = new DeltaConstraint<FieldRef>(incomingEdge.getCalleeSourceFact().getAccessPath(), edge.factAtSource().getAccessPath());










 propagateConstrained(new ConcretizationPathEdge<>(










 applyConstraint(constraint, incomingEdge.getCallerSourceFact()), 










 incomingEdge.getCallSite(), 










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact()),



......@@ -447,7 +441,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 Set<ConstrainedFact<FieldRef, D>> res = computeNormalFlowFunction(flowFunction, d1, d2);










 for (ConstrainedFact<FieldRef, D> d3 : res) {










 if(d3.getConstraint() != null) {










 propagateConstrained(d3.getConstraint(), new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 propagateConstrained(new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 }










 else










 propagate(new PathEdge<>(d1, m, d3.getFact()), null, false);



......@@ -462,9 +456,13 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return fact.cloneWithAccessPath(constraint.applyToAccessPath(fact.getAccessPath()));










 }










 










 private boolean propagateConstrained(Constraint<FieldRef> constraint, PathEdge<N, D> pathEdge) {










 private boolean propagateConstrained(PathEdge<N, D> pathEdge) {










 return propagateConstrained(pathEdge, new HashMap<N, Boolean>());










 }










 










 private boolean propagateConstrained(PathEdge<N, D> pathEdge, Map<N, Boolean> visited) {










 M calleeMethod = icfg.getMethodOf(pathEdge.getTarget());










 logger.trace("Checking interest at method {} in fact {} with field access {}", calleeMethod, pathEdge.factAtSource(), constraint);










 logger.trace("Checking interest at method {} in fact {}", calleeMethod, pathEdge.factAtSource());





















 boolean propagate = false;










 if(pathEdge.factAtSource().equals(zeroValue))



......@@ -477,15 +475,25 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagate = !callSitesWithInterest.isEmpty();










 










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixesOf(calleeMethod, pathEdge.factAtSource())) {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(constraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(constraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 propagate |= propagateConstrained(constraint, callerEdge);










 if(visited.containsKey(incEdge.getCallSite())) {










 if(visited.get(incEdge.getCallSite()) != null)










 propagate |= visited.get(incEdge.getCallSite());










 }










 else {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 Constraint<FieldRef> callerConstraint = new DeltaConstraint<FieldRef>(incEdge.getCalleeSourceFact().getAccessPath(), pathEdge.factAtSource().getAccessPath());










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(callerConstraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(callerConstraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 visited.put(incEdge.getCallSite(), null);










 boolean result = propagateConstrained(callerEdge, visited);










 visited.put(incEdge.getCallSite(), result);










 propagate |= result;










 }










 }










 }










 }



......














src/heros/alias/FlowFunction.java








View file @ f08a8e49






......@@ -118,6 +118,31 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 public String toString() {










 return "^"+fieldRef.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((fieldRef == null) ? 0 : fieldRef.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof WriteFieldConstraint))










 return false;










 WriteFieldConstraint other = (WriteFieldConstraint) obj;










 if (fieldRef == null) {










 if (other.fieldRef != null)










 return false;










 } else if (!fieldRef.equals(other.fieldRef))










 return false;










 return true;










 }










 }










 










 public class ReadFieldConstraint<FieldRef> implements Constraint<FieldRef> {



......@@ -137,5 +162,30 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 public String toString() {










 return fieldRef.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((fieldRef == null) ? 0 : fieldRef.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof ReadFieldConstraint))










 return false;










 ReadFieldConstraint other = (ReadFieldConstraint) obj;










 if (fieldRef == null) {










 if (other.fieldRef != null)










 return false;










 } else if (!fieldRef.equals(other.fieldRef))










 return false;










 return true;










 }










 }










}














test/heros/alias/FieldSensitiveSolverTest.java








View file @ f08a8e49






......@@ -477,4 +477,92 @@ public class FieldSensitiveSolverTest {









 helper.runSolver(true, "a");










 }










 










 @Test










 public void pauseEdgeMutuallyRecursiveCallers() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.x")),










 callSite("b").calls("bar",flow("1.x", "2.x")));










 










 helper.method("bar",










 startPoints("c"),










 callSite("c").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),










 callSite("d").calls("bar", flow("3", "2")).retSite("e", flow("3", "3")),










 normalStmt("e").succ("f", flow("3", readField("f"), "4")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void pauseDiamondShapedCallerChain() {










 helper.method("bar",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.x")),










 callSite("b").calls("foo1", flow("1.x", "2.x")).calls("foo2", flow("1.x", "2.x")));










 










 helper.method("foo1",










 startPoints("c1"),










 callSite("c1").calls("xyz", flow("2", "3")));










 










 helper.method("foo2",










 startPoints("c2"),










 callSite("c2").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),










 normalStmt("d").succ("e", flow("3", readField("f"), "4")),










 normalStmt("e").succ("f"));










 










 helper.runSolver(false, "a");










 }





















 @Test










 public void dontPauseDiamondShapedCallerChain() {










 helper.method("bar",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.x")),










 callSite("b").calls("foo1", flow("1.x", "2.f")).calls("foo2", flow("1.x", "2.f")));










 










 helper.method("foo1",










 startPoints("c1"),










 callSite("c1").calls("xyz", flow("2", "3")));










 










 helper.method("foo2",










 startPoints("c2"),










 callSite("c2").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),










 normalStmt("d").succ("e", flow("3", readField("f"), "4")),










 normalStmt("e").succ("f", kill("4")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void correctDeltaConstraintApplication() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),










 callSite("b").calls("bar", flow("1", "1")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("1", writeField("a"), "1^a")),










 callSite("d").calls("xyz", flow("1^a", "1^a")));










 










 helper.method("xyz",










 startPoints("e"),










 normalStmt("e").succ("f", flow("1", readField("f"), "2")),










 callSite("f").calls("baz", flow("2", "3")));










 










 helper.method("baz",










 startPoints("g"),










 normalStmt("g").succ("h", flow("3", readField("a"), "4")));










 










 helper.runSolver(false, "a");










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
f08a8e49


authored
Jan 14, 2015
by


Johannes Lerch



Browse files




k-limitting; fix in constraint propagation







parent
f227e097













Changes
5




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPath.java








View file @ f08a8e49






......@@ -14,6 +14,7 @@ import java.util.Arrays;









import java.util.HashSet;










import java.util.Set;





















import com.google.common.base.Function;










import com.google.common.base.Joiner;










import com.google.common.collect.Sets;














......@@ -29,8 +30,18 @@ public class AccessPath<FieldRef> {









 }










 










 AccessPath(FieldRef[] accesses, Set<FieldRef>[] exclusions) {










 this.accesses = accesses;










 this.exclusions = exclusions;










 int k = 3;










 if(accesses.length > k) {










 this.accesses = Arrays.copyOf(accesses, k);










 this.exclusions = new Set[0];










 }










 else {










 this.accesses = accesses;










 if(exclusions.length > k - accesses.length)










 this.exclusions = Arrays.copyOf(exclusions, k - accesses.length);










 else










 this.exclusions = exclusions;










 }










 }





















 public boolean hasExclusions() {



......@@ -47,7 +58,7 @@ public class AccessPath<FieldRef> {









 










 public AccessPath<FieldRef> addFieldReference(FieldRef... fieldReferences) {










 if(isAccessInExclusions(fieldReferences))










 throw new IllegalArgumentException();










 throw new IllegalArgumentException("FieldRef "+Arrays.toString(fieldReferences)+" cannot be added to "+toString());





















 FieldRef[] newAccesses = Arrays.copyOf(accesses, accesses.length+fieldReferences.length);










 System.arraycopy(fieldReferences, 0, newAccesses, accesses.length, fieldReferences.length);



......@@ -173,6 +184,21 @@ public class AccessPath<FieldRef> {









 return result;










 }










 










 public <T> AccessPath<T> map(Function<FieldRef, T> function) {










 T[] newAccesses = (T[]) new Object[accesses.length];










 for(int i=0; i<accesses.length; i++) {










 newAccesses[i] = function.apply(accesses[i]);










 }










 Set<T>[] newExclusions = new Set[exclusions.length];










 for(int i=0; i<exclusions.length; i++) {










 newExclusions[i] = Sets.newHashSet();










 for(FieldRef excl : exclusions[i]) {










 newExclusions[i].add(function.apply(excl));










 }










 }










 return new AccessPath<T>(newAccesses, newExclusions);










 }










 










 public class ExclusionSet {










 private int index;










 



......














src/heros/alias/DeltaConstraint.java



0 â†’ 100644







View file @ f08a8e49













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.Constraint;





















public class DeltaConstraint<FieldRef> implements Constraint<FieldRef> {





















 private FieldRef[] delta;










 private AccessPath<FieldRef> accPathAtCallee;





















 public DeltaConstraint(AccessPath<FieldRef> accPathAtCaller, AccessPath<FieldRef> accPathAtCallee) {










 this.accPathAtCallee = accPathAtCallee;










 delta = accPathAtCaller.getDeltaTo(accPathAtCallee); 










 }





















 @Override










 public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {










 return accPath.addFieldReference(delta).mergeExcludedFieldReferences(accPathAtCallee);










 }





















}














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ f08a8e49






......@@ -22,6 +22,7 @@ import heros.solver.PathEdge;




















import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;



......@@ -301,15 +302,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource())) {










 logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}", edge, incomingEdge);










 










 final FieldRef[] delta = incomingEdge.getCalleeSourceFact().getAccessPath().getDeltaTo(edge.factAtSource().getAccessPath()); 










 Constraint<FieldRef> constraint = new Constraint<FieldRef>() {










 @Override










 public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {










 return accPath.addFieldReference(delta).mergeExcludedFieldReferences(edge.factAtSource().getAccessPath());










 }










 };










 










 propagateConstrained(constraint, new ConcretizationPathEdge<>(










 Constraint<FieldRef> constraint = new DeltaConstraint<FieldRef>(incomingEdge.getCalleeSourceFact().getAccessPath(), edge.factAtSource().getAccessPath());










 propagateConstrained(new ConcretizationPathEdge<>(










 applyConstraint(constraint, incomingEdge.getCallerSourceFact()), 










 incomingEdge.getCallSite(), 










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact()),



......@@ -447,7 +441,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 Set<ConstrainedFact<FieldRef, D>> res = computeNormalFlowFunction(flowFunction, d1, d2);










 for (ConstrainedFact<FieldRef, D> d3 : res) {










 if(d3.getConstraint() != null) {










 propagateConstrained(d3.getConstraint(), new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 propagateConstrained(new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 }










 else










 propagate(new PathEdge<>(d1, m, d3.getFact()), null, false);



......@@ -462,9 +456,13 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return fact.cloneWithAccessPath(constraint.applyToAccessPath(fact.getAccessPath()));










 }










 










 private boolean propagateConstrained(Constraint<FieldRef> constraint, PathEdge<N, D> pathEdge) {










 private boolean propagateConstrained(PathEdge<N, D> pathEdge) {










 return propagateConstrained(pathEdge, new HashMap<N, Boolean>());










 }










 










 private boolean propagateConstrained(PathEdge<N, D> pathEdge, Map<N, Boolean> visited) {










 M calleeMethod = icfg.getMethodOf(pathEdge.getTarget());










 logger.trace("Checking interest at method {} in fact {} with field access {}", calleeMethod, pathEdge.factAtSource(), constraint);










 logger.trace("Checking interest at method {} in fact {}", calleeMethod, pathEdge.factAtSource());





















 boolean propagate = false;










 if(pathEdge.factAtSource().equals(zeroValue))



......@@ -477,15 +475,25 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagate = !callSitesWithInterest.isEmpty();










 










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixesOf(calleeMethod, pathEdge.factAtSource())) {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(constraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(constraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 propagate |= propagateConstrained(constraint, callerEdge);










 if(visited.containsKey(incEdge.getCallSite())) {










 if(visited.get(incEdge.getCallSite()) != null)










 propagate |= visited.get(incEdge.getCallSite());










 }










 else {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 Constraint<FieldRef> callerConstraint = new DeltaConstraint<FieldRef>(incEdge.getCalleeSourceFact().getAccessPath(), pathEdge.factAtSource().getAccessPath());










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(callerConstraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(callerConstraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 visited.put(incEdge.getCallSite(), null);










 boolean result = propagateConstrained(callerEdge, visited);










 visited.put(incEdge.getCallSite(), result);










 propagate |= result;










 }










 }










 }










 }



......














src/heros/alias/FlowFunction.java








View file @ f08a8e49






......@@ -118,6 +118,31 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 public String toString() {










 return "^"+fieldRef.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((fieldRef == null) ? 0 : fieldRef.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof WriteFieldConstraint))










 return false;










 WriteFieldConstraint other = (WriteFieldConstraint) obj;










 if (fieldRef == null) {










 if (other.fieldRef != null)










 return false;










 } else if (!fieldRef.equals(other.fieldRef))










 return false;










 return true;










 }










 }










 










 public class ReadFieldConstraint<FieldRef> implements Constraint<FieldRef> {



......@@ -137,5 +162,30 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 public String toString() {










 return fieldRef.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((fieldRef == null) ? 0 : fieldRef.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof ReadFieldConstraint))










 return false;










 ReadFieldConstraint other = (ReadFieldConstraint) obj;










 if (fieldRef == null) {










 if (other.fieldRef != null)










 return false;










 } else if (!fieldRef.equals(other.fieldRef))










 return false;










 return true;










 }










 }










}














test/heros/alias/FieldSensitiveSolverTest.java








View file @ f08a8e49






......@@ -477,4 +477,92 @@ public class FieldSensitiveSolverTest {









 helper.runSolver(true, "a");










 }










 










 @Test










 public void pauseEdgeMutuallyRecursiveCallers() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.x")),










 callSite("b").calls("bar",flow("1.x", "2.x")));










 










 helper.method("bar",










 startPoints("c"),










 callSite("c").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),










 callSite("d").calls("bar", flow("3", "2")).retSite("e", flow("3", "3")),










 normalStmt("e").succ("f", flow("3", readField("f"), "4")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void pauseDiamondShapedCallerChain() {










 helper.method("bar",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.x")),










 callSite("b").calls("foo1", flow("1.x", "2.x")).calls("foo2", flow("1.x", "2.x")));










 










 helper.method("foo1",










 startPoints("c1"),










 callSite("c1").calls("xyz", flow("2", "3")));










 










 helper.method("foo2",










 startPoints("c2"),










 callSite("c2").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),










 normalStmt("d").succ("e", flow("3", readField("f"), "4")),










 normalStmt("e").succ("f"));










 










 helper.runSolver(false, "a");










 }





















 @Test










 public void dontPauseDiamondShapedCallerChain() {










 helper.method("bar",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.x")),










 callSite("b").calls("foo1", flow("1.x", "2.f")).calls("foo2", flow("1.x", "2.f")));










 










 helper.method("foo1",










 startPoints("c1"),










 callSite("c1").calls("xyz", flow("2", "3")));










 










 helper.method("foo2",










 startPoints("c2"),










 callSite("c2").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),










 normalStmt("d").succ("e", flow("3", readField("f"), "4")),










 normalStmt("e").succ("f", kill("4")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void correctDeltaConstraintApplication() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),










 callSite("b").calls("bar", flow("1", "1")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("1", writeField("a"), "1^a")),










 callSite("d").calls("xyz", flow("1^a", "1^a")));










 










 helper.method("xyz",










 startPoints("e"),










 normalStmt("e").succ("f", flow("1", readField("f"), "2")),










 callSite("f").calls("baz", flow("2", "3")));










 










 helper.method("baz",










 startPoints("g"),










 normalStmt("g").succ("h", flow("3", readField("a"), "4")));










 










 helper.runSolver(false, "a");










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
f08a8e49


authored
Jan 14, 2015
by


Johannes Lerch



Browse files



Commit
f08a8e49


authored
Jan 14, 2015
by


Johannes Lerch

f08a8e49authoredbyJohannes Lerch

k-limitting; fix in constraint propagation






parent
f227e097
















parent
f227e097





parent












Changes
5
5


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/alias/AccessPath.java








View file @ f08a8e49






......@@ -14,6 +14,7 @@ import java.util.Arrays;









import java.util.HashSet;










import java.util.Set;





















import com.google.common.base.Function;










import com.google.common.base.Joiner;










import com.google.common.collect.Sets;














......@@ -29,8 +30,18 @@ public class AccessPath<FieldRef> {









 }










 










 AccessPath(FieldRef[] accesses, Set<FieldRef>[] exclusions) {










 this.accesses = accesses;










 this.exclusions = exclusions;










 int k = 3;










 if(accesses.length > k) {










 this.accesses = Arrays.copyOf(accesses, k);










 this.exclusions = new Set[0];










 }










 else {










 this.accesses = accesses;










 if(exclusions.length > k - accesses.length)










 this.exclusions = Arrays.copyOf(exclusions, k - accesses.length);










 else










 this.exclusions = exclusions;










 }










 }





















 public boolean hasExclusions() {



......@@ -47,7 +58,7 @@ public class AccessPath<FieldRef> {









 










 public AccessPath<FieldRef> addFieldReference(FieldRef... fieldReferences) {










 if(isAccessInExclusions(fieldReferences))










 throw new IllegalArgumentException();










 throw new IllegalArgumentException("FieldRef "+Arrays.toString(fieldReferences)+" cannot be added to "+toString());





















 FieldRef[] newAccesses = Arrays.copyOf(accesses, accesses.length+fieldReferences.length);










 System.arraycopy(fieldReferences, 0, newAccesses, accesses.length, fieldReferences.length);



......@@ -173,6 +184,21 @@ public class AccessPath<FieldRef> {









 return result;










 }










 










 public <T> AccessPath<T> map(Function<FieldRef, T> function) {










 T[] newAccesses = (T[]) new Object[accesses.length];










 for(int i=0; i<accesses.length; i++) {










 newAccesses[i] = function.apply(accesses[i]);










 }










 Set<T>[] newExclusions = new Set[exclusions.length];










 for(int i=0; i<exclusions.length; i++) {










 newExclusions[i] = Sets.newHashSet();










 for(FieldRef excl : exclusions[i]) {










 newExclusions[i].add(function.apply(excl));










 }










 }










 return new AccessPath<T>(newAccesses, newExclusions);










 }










 










 public class ExclusionSet {










 private int index;










 



......














src/heros/alias/DeltaConstraint.java



0 â†’ 100644







View file @ f08a8e49













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.Constraint;





















public class DeltaConstraint<FieldRef> implements Constraint<FieldRef> {





















 private FieldRef[] delta;










 private AccessPath<FieldRef> accPathAtCallee;





















 public DeltaConstraint(AccessPath<FieldRef> accPathAtCaller, AccessPath<FieldRef> accPathAtCallee) {










 this.accPathAtCallee = accPathAtCallee;










 delta = accPathAtCaller.getDeltaTo(accPathAtCallee); 










 }





















 @Override










 public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {










 return accPath.addFieldReference(delta).mergeExcludedFieldReferences(accPathAtCallee);










 }





















}














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ f08a8e49






......@@ -22,6 +22,7 @@ import heros.solver.PathEdge;




















import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;



......@@ -301,15 +302,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource())) {










 logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}", edge, incomingEdge);










 










 final FieldRef[] delta = incomingEdge.getCalleeSourceFact().getAccessPath().getDeltaTo(edge.factAtSource().getAccessPath()); 










 Constraint<FieldRef> constraint = new Constraint<FieldRef>() {










 @Override










 public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {










 return accPath.addFieldReference(delta).mergeExcludedFieldReferences(edge.factAtSource().getAccessPath());










 }










 };










 










 propagateConstrained(constraint, new ConcretizationPathEdge<>(










 Constraint<FieldRef> constraint = new DeltaConstraint<FieldRef>(incomingEdge.getCalleeSourceFact().getAccessPath(), edge.factAtSource().getAccessPath());










 propagateConstrained(new ConcretizationPathEdge<>(










 applyConstraint(constraint, incomingEdge.getCallerSourceFact()), 










 incomingEdge.getCallSite(), 










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact()),



......@@ -447,7 +441,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 Set<ConstrainedFact<FieldRef, D>> res = computeNormalFlowFunction(flowFunction, d1, d2);










 for (ConstrainedFact<FieldRef, D> d3 : res) {










 if(d3.getConstraint() != null) {










 propagateConstrained(d3.getConstraint(), new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 propagateConstrained(new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 }










 else










 propagate(new PathEdge<>(d1, m, d3.getFact()), null, false);



......@@ -462,9 +456,13 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return fact.cloneWithAccessPath(constraint.applyToAccessPath(fact.getAccessPath()));










 }










 










 private boolean propagateConstrained(Constraint<FieldRef> constraint, PathEdge<N, D> pathEdge) {










 private boolean propagateConstrained(PathEdge<N, D> pathEdge) {










 return propagateConstrained(pathEdge, new HashMap<N, Boolean>());










 }










 










 private boolean propagateConstrained(PathEdge<N, D> pathEdge, Map<N, Boolean> visited) {










 M calleeMethod = icfg.getMethodOf(pathEdge.getTarget());










 logger.trace("Checking interest at method {} in fact {} with field access {}", calleeMethod, pathEdge.factAtSource(), constraint);










 logger.trace("Checking interest at method {} in fact {}", calleeMethod, pathEdge.factAtSource());





















 boolean propagate = false;










 if(pathEdge.factAtSource().equals(zeroValue))



......@@ -477,15 +475,25 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagate = !callSitesWithInterest.isEmpty();










 










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixesOf(calleeMethod, pathEdge.factAtSource())) {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(constraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(constraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 propagate |= propagateConstrained(constraint, callerEdge);










 if(visited.containsKey(incEdge.getCallSite())) {










 if(visited.get(incEdge.getCallSite()) != null)










 propagate |= visited.get(incEdge.getCallSite());










 }










 else {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 Constraint<FieldRef> callerConstraint = new DeltaConstraint<FieldRef>(incEdge.getCalleeSourceFact().getAccessPath(), pathEdge.factAtSource().getAccessPath());










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(callerConstraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(callerConstraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 visited.put(incEdge.getCallSite(), null);










 boolean result = propagateConstrained(callerEdge, visited);










 visited.put(incEdge.getCallSite(), result);










 propagate |= result;










 }










 }










 }










 }



......














src/heros/alias/FlowFunction.java








View file @ f08a8e49






......@@ -118,6 +118,31 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 public String toString() {










 return "^"+fieldRef.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((fieldRef == null) ? 0 : fieldRef.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof WriteFieldConstraint))










 return false;










 WriteFieldConstraint other = (WriteFieldConstraint) obj;










 if (fieldRef == null) {










 if (other.fieldRef != null)










 return false;










 } else if (!fieldRef.equals(other.fieldRef))










 return false;










 return true;










 }










 }










 










 public class ReadFieldConstraint<FieldRef> implements Constraint<FieldRef> {



......@@ -137,5 +162,30 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 public String toString() {










 return fieldRef.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((fieldRef == null) ? 0 : fieldRef.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof ReadFieldConstraint))










 return false;










 ReadFieldConstraint other = (ReadFieldConstraint) obj;










 if (fieldRef == null) {










 if (other.fieldRef != null)










 return false;










 } else if (!fieldRef.equals(other.fieldRef))










 return false;










 return true;










 }










 }










}














test/heros/alias/FieldSensitiveSolverTest.java








View file @ f08a8e49






......@@ -477,4 +477,92 @@ public class FieldSensitiveSolverTest {









 helper.runSolver(true, "a");










 }










 










 @Test










 public void pauseEdgeMutuallyRecursiveCallers() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.x")),










 callSite("b").calls("bar",flow("1.x", "2.x")));










 










 helper.method("bar",










 startPoints("c"),










 callSite("c").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),










 callSite("d").calls("bar", flow("3", "2")).retSite("e", flow("3", "3")),










 normalStmt("e").succ("f", flow("3", readField("f"), "4")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void pauseDiamondShapedCallerChain() {










 helper.method("bar",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.x")),










 callSite("b").calls("foo1", flow("1.x", "2.x")).calls("foo2", flow("1.x", "2.x")));










 










 helper.method("foo1",










 startPoints("c1"),










 callSite("c1").calls("xyz", flow("2", "3")));










 










 helper.method("foo2",










 startPoints("c2"),










 callSite("c2").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),










 normalStmt("d").succ("e", flow("3", readField("f"), "4")),










 normalStmt("e").succ("f"));










 










 helper.runSolver(false, "a");










 }





















 @Test










 public void dontPauseDiamondShapedCallerChain() {










 helper.method("bar",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.x")),










 callSite("b").calls("foo1", flow("1.x", "2.f")).calls("foo2", flow("1.x", "2.f")));










 










 helper.method("foo1",










 startPoints("c1"),










 callSite("c1").calls("xyz", flow("2", "3")));










 










 helper.method("foo2",










 startPoints("c2"),










 callSite("c2").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),










 normalStmt("d").succ("e", flow("3", readField("f"), "4")),










 normalStmt("e").succ("f", kill("4")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void correctDeltaConstraintApplication() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),










 callSite("b").calls("bar", flow("1", "1")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("1", writeField("a"), "1^a")),










 callSite("d").calls("xyz", flow("1^a", "1^a")));










 










 helper.method("xyz",










 startPoints("e"),










 normalStmt("e").succ("f", flow("1", readField("f"), "2")),










 callSite("f").calls("baz", flow("2", "3")));










 










 helper.method("baz",










 startPoints("g"),










 normalStmt("g").succ("h", flow("3", readField("a"), "4")));










 










 helper.runSolver(false, "a");










 }










}














src/heros/alias/AccessPath.java








View file @ f08a8e49






......@@ -14,6 +14,7 @@ import java.util.Arrays;









import java.util.HashSet;










import java.util.Set;





















import com.google.common.base.Function;










import com.google.common.base.Joiner;










import com.google.common.collect.Sets;














......@@ -29,8 +30,18 @@ public class AccessPath<FieldRef> {









 }










 










 AccessPath(FieldRef[] accesses, Set<FieldRef>[] exclusions) {










 this.accesses = accesses;










 this.exclusions = exclusions;










 int k = 3;










 if(accesses.length > k) {










 this.accesses = Arrays.copyOf(accesses, k);










 this.exclusions = new Set[0];










 }










 else {










 this.accesses = accesses;










 if(exclusions.length > k - accesses.length)










 this.exclusions = Arrays.copyOf(exclusions, k - accesses.length);










 else










 this.exclusions = exclusions;










 }










 }





















 public boolean hasExclusions() {



......@@ -47,7 +58,7 @@ public class AccessPath<FieldRef> {









 










 public AccessPath<FieldRef> addFieldReference(FieldRef... fieldReferences) {










 if(isAccessInExclusions(fieldReferences))










 throw new IllegalArgumentException();










 throw new IllegalArgumentException("FieldRef "+Arrays.toString(fieldReferences)+" cannot be added to "+toString());





















 FieldRef[] newAccesses = Arrays.copyOf(accesses, accesses.length+fieldReferences.length);










 System.arraycopy(fieldReferences, 0, newAccesses, accesses.length, fieldReferences.length);



......@@ -173,6 +184,21 @@ public class AccessPath<FieldRef> {









 return result;










 }










 










 public <T> AccessPath<T> map(Function<FieldRef, T> function) {










 T[] newAccesses = (T[]) new Object[accesses.length];










 for(int i=0; i<accesses.length; i++) {










 newAccesses[i] = function.apply(accesses[i]);










 }










 Set<T>[] newExclusions = new Set[exclusions.length];










 for(int i=0; i<exclusions.length; i++) {










 newExclusions[i] = Sets.newHashSet();










 for(FieldRef excl : exclusions[i]) {










 newExclusions[i].add(function.apply(excl));










 }










 }










 return new AccessPath<T>(newAccesses, newExclusions);










 }










 










 public class ExclusionSet {










 private int index;










 



......












src/heros/alias/AccessPath.java








View file @ f08a8e49








src/heros/alias/AccessPath.java










View file @ f08a8e49


f08a8e49



......@@ -14,6 +14,7 @@ import java.util.Arrays;









import java.util.HashSet;










import java.util.Set;





















import com.google.common.base.Function;










import com.google.common.base.Joiner;










import com.google.common.collect.Sets;














......@@ -29,8 +30,18 @@ public class AccessPath<FieldRef> {









 }










 










 AccessPath(FieldRef[] accesses, Set<FieldRef>[] exclusions) {










 this.accesses = accesses;










 this.exclusions = exclusions;










 int k = 3;










 if(accesses.length > k) {










 this.accesses = Arrays.copyOf(accesses, k);










 this.exclusions = new Set[0];










 }










 else {










 this.accesses = accesses;










 if(exclusions.length > k - accesses.length)










 this.exclusions = Arrays.copyOf(exclusions, k - accesses.length);










 else










 this.exclusions = exclusions;










 }










 }





















 public boolean hasExclusions() {



......@@ -47,7 +58,7 @@ public class AccessPath<FieldRef> {









 










 public AccessPath<FieldRef> addFieldReference(FieldRef... fieldReferences) {










 if(isAccessInExclusions(fieldReferences))










 throw new IllegalArgumentException();










 throw new IllegalArgumentException("FieldRef "+Arrays.toString(fieldReferences)+" cannot be added to "+toString());





















 FieldRef[] newAccesses = Arrays.copyOf(accesses, accesses.length+fieldReferences.length);










 System.arraycopy(fieldReferences, 0, newAccesses, accesses.length, fieldReferences.length);



......@@ -173,6 +184,21 @@ public class AccessPath<FieldRef> {









 return result;










 }










 










 public <T> AccessPath<T> map(Function<FieldRef, T> function) {










 T[] newAccesses = (T[]) new Object[accesses.length];










 for(int i=0; i<accesses.length; i++) {










 newAccesses[i] = function.apply(accesses[i]);










 }










 Set<T>[] newExclusions = new Set[exclusions.length];










 for(int i=0; i<exclusions.length; i++) {










 newExclusions[i] = Sets.newHashSet();










 for(FieldRef excl : exclusions[i]) {










 newExclusions[i].add(function.apply(excl));










 }










 }










 return new AccessPath<T>(newAccesses, newExclusions);










 }










 










 public class ExclusionSet {










 private int index;










 



......






......@@ -14,6 +14,7 @@ import java.util.Arrays;









import java.util.HashSet;










import java.util.Set;





















import com.google.common.base.Function;










import com.google.common.base.Joiner;










import com.google.common.collect.Sets;














......@@ -29,8 +30,18 @@ public class AccessPath<FieldRef> {









 }










 










 AccessPath(FieldRef[] accesses, Set<FieldRef>[] exclusions) {










 this.accesses = accesses;










 this.exclusions = exclusions;










 int k = 3;










 if(accesses.length > k) {










 this.accesses = Arrays.copyOf(accesses, k);










 this.exclusions = new Set[0];










 }










 else {










 this.accesses = accesses;










 if(exclusions.length > k - accesses.length)










 this.exclusions = Arrays.copyOf(exclusions, k - accesses.length);










 else










 this.exclusions = exclusions;










 }










 }





















 public boolean hasExclusions() {



......@@ -47,7 +58,7 @@ public class AccessPath<FieldRef> {









 










 public AccessPath<FieldRef> addFieldReference(FieldRef... fieldReferences) {










 if(isAccessInExclusions(fieldReferences))










 throw new IllegalArgumentException();










 throw new IllegalArgumentException("FieldRef "+Arrays.toString(fieldReferences)+" cannot be added to "+toString());





















 FieldRef[] newAccesses = Arrays.copyOf(accesses, accesses.length+fieldReferences.length);










 System.arraycopy(fieldReferences, 0, newAccesses, accesses.length, fieldReferences.length);



......@@ -173,6 +184,21 @@ public class AccessPath<FieldRef> {









 return result;










 }










 










 public <T> AccessPath<T> map(Function<FieldRef, T> function) {










 T[] newAccesses = (T[]) new Object[accesses.length];










 for(int i=0; i<accesses.length; i++) {










 newAccesses[i] = function.apply(accesses[i]);










 }










 Set<T>[] newExclusions = new Set[exclusions.length];










 for(int i=0; i<exclusions.length; i++) {










 newExclusions[i] = Sets.newHashSet();










 for(FieldRef excl : exclusions[i]) {










 newExclusions[i].add(function.apply(excl));










 }










 }










 return new AccessPath<T>(newAccesses, newExclusions);










 }










 










 public class ExclusionSet {










 private int index;










 



......


import java.util.HashSet;importjava.util.HashSet;import java.util.Set;importjava.util.Set;import com.google.common.base.Function;importcom.google.common.base.Function;import com.google.common.base.Joiner;importcom.google.common.base.Joiner;import com.google.common.collect.Sets;importcom.google.common.collect.Sets; }}  AccessPath(FieldRef[] accesses, Set<FieldRef>[] exclusions) {AccessPath(FieldRef[]accesses,Set<FieldRef>[]exclusions){ this.accesses = accesses;this.accesses=accesses; this.exclusions = exclusions;this.exclusions=exclusions; int k = 3;intk=3; if(accesses.length > k) {if(accesses.length>k){ this.accesses = Arrays.copyOf(accesses, k);this.accesses=Arrays.copyOf(accesses,k); this.exclusions = new Set[0];this.exclusions=newSet[0]; }} else {else{ this.accesses = accesses;this.accesses=accesses; if(exclusions.length > k - accesses.length)if(exclusions.length>k-accesses.length) this.exclusions = Arrays.copyOf(exclusions, k - accesses.length);this.exclusions=Arrays.copyOf(exclusions,k-accesses.length); elseelse this.exclusions = exclusions;this.exclusions=exclusions; }} }} public boolean hasExclusions() {publicbooleanhasExclusions(){  public AccessPath<FieldRef> addFieldReference(FieldRef... fieldReferences) {publicAccessPath<FieldRef>addFieldReference(FieldRef...fieldReferences){ if(isAccessInExclusions(fieldReferences))if(isAccessInExclusions(fieldReferences)) throw new IllegalArgumentException();thrownewIllegalArgumentException(); throw new IllegalArgumentException("FieldRef "+Arrays.toString(fieldReferences)+" cannot be added to "+toString());thrownewIllegalArgumentException("FieldRef ""FieldRef "++ArraysArrays..toStringtoString((fieldReferencesfieldReferences)+)+" cannot be added to "" cannot be added to "++toStringtoString());() FieldRef[] newAccesses = Arrays.copyOf(accesses, accesses.length+fieldReferences.length);FieldRef[]newAccesses=Arrays.copyOf(accesses,accesses.length+fieldReferences.length); System.arraycopy(fieldReferences, 0, newAccesses, accesses.length, fieldReferences.length);System.arraycopy(fieldReferences,0,newAccesses,accesses.length,fieldReferences.length); return result;returnresult; }}  public <T> AccessPath<T> map(Function<FieldRef, T> function) {public<T>AccessPath<T>map(Function<FieldRef,T>function){ T[] newAccesses = (T[]) new Object[accesses.length];T[]newAccesses=(T[])newObject[accesses.length]; for(int i=0; i<accesses.length; i++) {for(inti=0;i<accesses.length;i++){ newAccesses[i] = function.apply(accesses[i]);newAccesses[i]=function.apply(accesses[i]); }} Set<T>[] newExclusions = new Set[exclusions.length];Set<T>[]newExclusions=newSet[exclusions.length]; for(int i=0; i<exclusions.length; i++) {for(inti=0;i<exclusions.length;i++){ newExclusions[i] = Sets.newHashSet();newExclusions[i]=Sets.newHashSet(); for(FieldRef excl : exclusions[i]) {for(FieldRefexcl:exclusions[i]){ newExclusions[i].add(function.apply(excl));newExclusions[i].add(function.apply(excl)); }} }} return new AccessPath<T>(newAccesses, newExclusions);returnnewAccessPath<T>(newAccesses,newExclusions); }}  public class ExclusionSet {publicclassExclusionSet{ private int index;privateintindex; 








src/heros/alias/DeltaConstraint.java



0 â†’ 100644







View file @ f08a8e49













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.Constraint;





















public class DeltaConstraint<FieldRef> implements Constraint<FieldRef> {





















 private FieldRef[] delta;










 private AccessPath<FieldRef> accPathAtCallee;





















 public DeltaConstraint(AccessPath<FieldRef> accPathAtCaller, AccessPath<FieldRef> accPathAtCallee) {










 this.accPathAtCallee = accPathAtCallee;










 delta = accPathAtCaller.getDeltaTo(accPathAtCallee); 










 }





















 @Override










 public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {










 return accPath.addFieldReference(delta).mergeExcludedFieldReferences(accPathAtCallee);










 }





















}












src/heros/alias/DeltaConstraint.java



0 â†’ 100644







View file @ f08a8e49








src/heros/alias/DeltaConstraint.java



0 â†’ 100644









View file @ f08a8e49


f08a8e49










/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.Constraint;





















public class DeltaConstraint<FieldRef> implements Constraint<FieldRef> {





















 private FieldRef[] delta;










 private AccessPath<FieldRef> accPathAtCallee;





















 public DeltaConstraint(AccessPath<FieldRef> accPathAtCaller, AccessPath<FieldRef> accPathAtCallee) {










 this.accPathAtCallee = accPathAtCallee;










 delta = accPathAtCaller.getDeltaTo(accPathAtCallee); 










 }





















 @Override










 public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {










 return accPath.addFieldReference(delta).mergeExcludedFieldReferences(accPathAtCallee);










 }





















}













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.Constraint;





















public class DeltaConstraint<FieldRef> implements Constraint<FieldRef> {





















 private FieldRef[] delta;










 private AccessPath<FieldRef> accPathAtCallee;





















 public DeltaConstraint(AccessPath<FieldRef> accPathAtCaller, AccessPath<FieldRef> accPathAtCallee) {










 this.accPathAtCallee = accPathAtCallee;










 delta = accPathAtCaller.getDeltaTo(accPathAtCallee); 










 }





















 @Override










 public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {










 return accPath.addFieldReference(delta).mergeExcludedFieldReferences(accPathAtCallee);










 }





















}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2015 Johannes Lerch. * Copyright (c) 2015 Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;import heros.alias.FlowFunction.Constraint;importheros.alias.FlowFunction.Constraint;public class DeltaConstraint<FieldRef> implements Constraint<FieldRef> {publicclassDeltaConstraint<FieldRef>implementsConstraint<FieldRef>{ private FieldRef[] delta;privateFieldRef[]delta; private AccessPath<FieldRef> accPathAtCallee;privateAccessPath<FieldRef>accPathAtCallee; public DeltaConstraint(AccessPath<FieldRef> accPathAtCaller, AccessPath<FieldRef> accPathAtCallee) {publicDeltaConstraint(AccessPath<FieldRef>accPathAtCaller,AccessPath<FieldRef>accPathAtCallee){ this.accPathAtCallee = accPathAtCallee;this.accPathAtCallee=accPathAtCallee; delta = accPathAtCaller.getDeltaTo(accPathAtCallee); delta=accPathAtCaller.getDeltaTo(accPathAtCallee); }} @Override@Override public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {publicAccessPath<FieldRef>applyToAccessPath(AccessPath<FieldRef>accPath){ return accPath.addFieldReference(delta).mergeExcludedFieldReferences(accPathAtCallee);returnaccPath.addFieldReference(delta).mergeExcludedFieldReferences(accPathAtCallee); }}}}








src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ f08a8e49






......@@ -22,6 +22,7 @@ import heros.solver.PathEdge;




















import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;



......@@ -301,15 +302,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource())) {










 logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}", edge, incomingEdge);










 










 final FieldRef[] delta = incomingEdge.getCalleeSourceFact().getAccessPath().getDeltaTo(edge.factAtSource().getAccessPath()); 










 Constraint<FieldRef> constraint = new Constraint<FieldRef>() {










 @Override










 public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {










 return accPath.addFieldReference(delta).mergeExcludedFieldReferences(edge.factAtSource().getAccessPath());










 }










 };










 










 propagateConstrained(constraint, new ConcretizationPathEdge<>(










 Constraint<FieldRef> constraint = new DeltaConstraint<FieldRef>(incomingEdge.getCalleeSourceFact().getAccessPath(), edge.factAtSource().getAccessPath());










 propagateConstrained(new ConcretizationPathEdge<>(










 applyConstraint(constraint, incomingEdge.getCallerSourceFact()), 










 incomingEdge.getCallSite(), 










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact()),



......@@ -447,7 +441,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 Set<ConstrainedFact<FieldRef, D>> res = computeNormalFlowFunction(flowFunction, d1, d2);










 for (ConstrainedFact<FieldRef, D> d3 : res) {










 if(d3.getConstraint() != null) {










 propagateConstrained(d3.getConstraint(), new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 propagateConstrained(new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 }










 else










 propagate(new PathEdge<>(d1, m, d3.getFact()), null, false);



......@@ -462,9 +456,13 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return fact.cloneWithAccessPath(constraint.applyToAccessPath(fact.getAccessPath()));










 }










 










 private boolean propagateConstrained(Constraint<FieldRef> constraint, PathEdge<N, D> pathEdge) {










 private boolean propagateConstrained(PathEdge<N, D> pathEdge) {










 return propagateConstrained(pathEdge, new HashMap<N, Boolean>());










 }










 










 private boolean propagateConstrained(PathEdge<N, D> pathEdge, Map<N, Boolean> visited) {










 M calleeMethod = icfg.getMethodOf(pathEdge.getTarget());










 logger.trace("Checking interest at method {} in fact {} with field access {}", calleeMethod, pathEdge.factAtSource(), constraint);










 logger.trace("Checking interest at method {} in fact {}", calleeMethod, pathEdge.factAtSource());





















 boolean propagate = false;










 if(pathEdge.factAtSource().equals(zeroValue))



......@@ -477,15 +475,25 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagate = !callSitesWithInterest.isEmpty();










 










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixesOf(calleeMethod, pathEdge.factAtSource())) {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(constraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(constraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 propagate |= propagateConstrained(constraint, callerEdge);










 if(visited.containsKey(incEdge.getCallSite())) {










 if(visited.get(incEdge.getCallSite()) != null)










 propagate |= visited.get(incEdge.getCallSite());










 }










 else {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 Constraint<FieldRef> callerConstraint = new DeltaConstraint<FieldRef>(incEdge.getCalleeSourceFact().getAccessPath(), pathEdge.factAtSource().getAccessPath());










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(callerConstraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(callerConstraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 visited.put(incEdge.getCallSite(), null);










 boolean result = propagateConstrained(callerEdge, visited);










 visited.put(incEdge.getCallSite(), result);










 propagate |= result;










 }










 }










 }










 }



......












src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ f08a8e49








src/heros/alias/FieldSensitiveIFDSSolver.java










View file @ f08a8e49


f08a8e49



......@@ -22,6 +22,7 @@ import heros.solver.PathEdge;




















import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;



......@@ -301,15 +302,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource())) {










 logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}", edge, incomingEdge);










 










 final FieldRef[] delta = incomingEdge.getCalleeSourceFact().getAccessPath().getDeltaTo(edge.factAtSource().getAccessPath()); 










 Constraint<FieldRef> constraint = new Constraint<FieldRef>() {










 @Override










 public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {










 return accPath.addFieldReference(delta).mergeExcludedFieldReferences(edge.factAtSource().getAccessPath());










 }










 };










 










 propagateConstrained(constraint, new ConcretizationPathEdge<>(










 Constraint<FieldRef> constraint = new DeltaConstraint<FieldRef>(incomingEdge.getCalleeSourceFact().getAccessPath(), edge.factAtSource().getAccessPath());










 propagateConstrained(new ConcretizationPathEdge<>(










 applyConstraint(constraint, incomingEdge.getCallerSourceFact()), 










 incomingEdge.getCallSite(), 










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact()),



......@@ -447,7 +441,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 Set<ConstrainedFact<FieldRef, D>> res = computeNormalFlowFunction(flowFunction, d1, d2);










 for (ConstrainedFact<FieldRef, D> d3 : res) {










 if(d3.getConstraint() != null) {










 propagateConstrained(d3.getConstraint(), new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 propagateConstrained(new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 }










 else










 propagate(new PathEdge<>(d1, m, d3.getFact()), null, false);



......@@ -462,9 +456,13 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return fact.cloneWithAccessPath(constraint.applyToAccessPath(fact.getAccessPath()));










 }










 










 private boolean propagateConstrained(Constraint<FieldRef> constraint, PathEdge<N, D> pathEdge) {










 private boolean propagateConstrained(PathEdge<N, D> pathEdge) {










 return propagateConstrained(pathEdge, new HashMap<N, Boolean>());










 }










 










 private boolean propagateConstrained(PathEdge<N, D> pathEdge, Map<N, Boolean> visited) {










 M calleeMethod = icfg.getMethodOf(pathEdge.getTarget());










 logger.trace("Checking interest at method {} in fact {} with field access {}", calleeMethod, pathEdge.factAtSource(), constraint);










 logger.trace("Checking interest at method {} in fact {}", calleeMethod, pathEdge.factAtSource());





















 boolean propagate = false;










 if(pathEdge.factAtSource().equals(zeroValue))



......@@ -477,15 +475,25 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagate = !callSitesWithInterest.isEmpty();










 










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixesOf(calleeMethod, pathEdge.factAtSource())) {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(constraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(constraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 propagate |= propagateConstrained(constraint, callerEdge);










 if(visited.containsKey(incEdge.getCallSite())) {










 if(visited.get(incEdge.getCallSite()) != null)










 propagate |= visited.get(incEdge.getCallSite());










 }










 else {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 Constraint<FieldRef> callerConstraint = new DeltaConstraint<FieldRef>(incEdge.getCalleeSourceFact().getAccessPath(), pathEdge.factAtSource().getAccessPath());










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(callerConstraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(callerConstraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 visited.put(incEdge.getCallSite(), null);










 boolean result = propagateConstrained(callerEdge, visited);










 visited.put(incEdge.getCallSite(), result);










 propagate |= result;










 }










 }










 }










 }



......






......@@ -22,6 +22,7 @@ import heros.solver.PathEdge;




















import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;



......@@ -301,15 +302,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource())) {










 logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}", edge, incomingEdge);










 










 final FieldRef[] delta = incomingEdge.getCalleeSourceFact().getAccessPath().getDeltaTo(edge.factAtSource().getAccessPath()); 










 Constraint<FieldRef> constraint = new Constraint<FieldRef>() {










 @Override










 public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {










 return accPath.addFieldReference(delta).mergeExcludedFieldReferences(edge.factAtSource().getAccessPath());










 }










 };










 










 propagateConstrained(constraint, new ConcretizationPathEdge<>(










 Constraint<FieldRef> constraint = new DeltaConstraint<FieldRef>(incomingEdge.getCalleeSourceFact().getAccessPath(), edge.factAtSource().getAccessPath());










 propagateConstrained(new ConcretizationPathEdge<>(










 applyConstraint(constraint, incomingEdge.getCallerSourceFact()), 










 incomingEdge.getCallSite(), 










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact()),



......@@ -447,7 +441,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 Set<ConstrainedFact<FieldRef, D>> res = computeNormalFlowFunction(flowFunction, d1, d2);










 for (ConstrainedFact<FieldRef, D> d3 : res) {










 if(d3.getConstraint() != null) {










 propagateConstrained(d3.getConstraint(), new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 propagateConstrained(new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 }










 else










 propagate(new PathEdge<>(d1, m, d3.getFact()), null, false);



......@@ -462,9 +456,13 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return fact.cloneWithAccessPath(constraint.applyToAccessPath(fact.getAccessPath()));










 }










 










 private boolean propagateConstrained(Constraint<FieldRef> constraint, PathEdge<N, D> pathEdge) {










 private boolean propagateConstrained(PathEdge<N, D> pathEdge) {










 return propagateConstrained(pathEdge, new HashMap<N, Boolean>());










 }










 










 private boolean propagateConstrained(PathEdge<N, D> pathEdge, Map<N, Boolean> visited) {










 M calleeMethod = icfg.getMethodOf(pathEdge.getTarget());










 logger.trace("Checking interest at method {} in fact {} with field access {}", calleeMethod, pathEdge.factAtSource(), constraint);










 logger.trace("Checking interest at method {} in fact {}", calleeMethod, pathEdge.factAtSource());





















 boolean propagate = false;










 if(pathEdge.factAtSource().equals(zeroValue))



......@@ -477,15 +475,25 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagate = !callSitesWithInterest.isEmpty();










 










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixesOf(calleeMethod, pathEdge.factAtSource())) {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(constraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(constraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 propagate |= propagateConstrained(constraint, callerEdge);










 if(visited.containsKey(incEdge.getCallSite())) {










 if(visited.get(incEdge.getCallSite()) != null)










 propagate |= visited.get(incEdge.getCallSite());










 }










 else {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 Constraint<FieldRef> callerConstraint = new DeltaConstraint<FieldRef>(incEdge.getCalleeSourceFact().getAccessPath(), pathEdge.factAtSource().getAccessPath());










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(callerConstraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(callerConstraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 visited.put(incEdge.getCallSite(), null);










 boolean result = propagateConstrained(callerEdge, visited);










 visited.put(incEdge.getCallSite(), result);










 propagate |= result;










 }










 }










 }










 }



......


import java.util.Collection;importjava.util.Collection;import java.util.Collections;importjava.util.Collections;import java.util.HashMap;importjava.util.HashMap;import java.util.Map;importjava.util.Map;import java.util.Map.Entry;importjava.util.Map.Entry;import java.util.Set;importjava.util.Set; if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource())) {if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(),edge.factAtSource())){ logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}", edge, incomingEdge);logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}",edge,incomingEdge);  final FieldRef[] delta = incomingEdge.getCalleeSourceFact().getAccessPath().getDeltaTo(edge.factAtSource().getAccessPath()); finalFieldRef[]delta=incomingEdge.getCalleeSourceFact().getAccessPath().getDeltaTo(edge.factAtSource().getAccessPath()); Constraint<FieldRef> constraint = new Constraint<FieldRef>() {Constraint<FieldRef>constraint=newConstraint<FieldRef>(){ @Override@Override public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {publicAccessPath<FieldRef>applyToAccessPath(AccessPath<FieldRef>accPath){ return accPath.addFieldReference(delta).mergeExcludedFieldReferences(edge.factAtSource().getAccessPath());returnaccPath.addFieldReference(delta).mergeExcludedFieldReferences(edge.factAtSource().getAccessPath()); }} };};  propagateConstrained(constraint, new ConcretizationPathEdge<>(propagateConstrained(constraint,newConcretizationPathEdge<>( Constraint<FieldRef> constraint = new DeltaConstraint<FieldRef>(incomingEdge.getCalleeSourceFact().getAccessPath(), edge.factAtSource().getAccessPath());Constraint<FieldRef>constraint=newDeltaConstraint<FieldRef>(incomingEdge.getCalleeSourceFact().getAccessPath(),edge.factAtSource().getAccessPath()); propagateConstrained(new ConcretizationPathEdge<>(propagateConstrained(newConcretizationPathEdge<>( applyConstraint(constraint, incomingEdge.getCallerSourceFact()), applyConstraint(constraint,incomingEdge.getCallerSourceFact()), incomingEdge.getCallSite(), incomingEdge.getCallSite(), applyConstraint(constraint, incomingEdge.getCallerCallSiteFact()),applyConstraint(constraint,incomingEdge.getCallerCallSiteFact()), Set<ConstrainedFact<FieldRef, D>> res = computeNormalFlowFunction(flowFunction, d1, d2);Set<ConstrainedFact<FieldRef,D>>res=computeNormalFlowFunction(flowFunction,d1,d2); for (ConstrainedFact<FieldRef, D> d3 : res) {for(ConstrainedFact<FieldRef,D>d3:res){ if(d3.getConstraint() != null) {if(d3.getConstraint()!=null){ propagateConstrained(d3.getConstraint(), new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));propagateConstrained(d3d3..getConstraintgetConstraint(),(), newPathEdge<>(applyConstraint(d3.getConstraint(),d1),m,d3.getFact())); propagateConstrained(new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));propagateConstrained(newPathEdge<>(applyConstraint(d3.getConstraint(),d1),m,d3.getFact())); }} elseelse propagate(new PathEdge<>(d1, m, d3.getFact()), null, false);propagate(newPathEdge<>(d1,m,d3.getFact()),null,false); return fact.cloneWithAccessPath(constraint.applyToAccessPath(fact.getAccessPath()));returnfact.cloneWithAccessPath(constraint.applyToAccessPath(fact.getAccessPath())); }}  private boolean propagateConstrained(Constraint<FieldRef> constraint, PathEdge<N, D> pathEdge) {privatebooleanpropagateConstrained(Constraint<FieldRef>constraint,PathEdge<N,D>pathEdge){ private boolean propagateConstrained(PathEdge<N, D> pathEdge) {privatebooleanpropagateConstrained(PathEdge<N,D>pathEdge){ return propagateConstrained(pathEdge, new HashMap<N, Boolean>());returnpropagateConstrained(pathEdge,newHashMap<N,Boolean>()); }}  private boolean propagateConstrained(PathEdge<N, D> pathEdge, Map<N, Boolean> visited) {privatebooleanpropagateConstrained(PathEdge<N,D>pathEdge,Map<N,Boolean>visited){ M calleeMethod = icfg.getMethodOf(pathEdge.getTarget());McalleeMethod=icfg.getMethodOf(pathEdge.getTarget()); logger.trace("Checking interest at method {} in fact {} with field access {}", calleeMethod, pathEdge.factAtSource(), constraint);logger.trace("Checking interest at method {} in fact {} with field access {}"{} with field access ,calleeMethod,pathEdge.factAtSource(),, constraintconstraint); logger.trace("Checking interest at method {} in fact {}", calleeMethod, pathEdge.factAtSource());logger.trace("Checking interest at method {} in fact {}",calleeMethod,pathEdge.factAtSource()); boolean propagate = false;booleanpropagate=false; if(pathEdge.factAtSource().equals(zeroValue))if(pathEdge.factAtSource().equals(zeroValue)) propagate = !callSitesWithInterest.isEmpty();propagate=!callSitesWithInterest.isEmpty();  for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixesOf(calleeMethod, pathEdge.factAtSource())) {for(IncomingEdge<D,N>incEdge:incomingEdgesPrefixesOf(calleeMethod,pathEdge.factAtSource())){ boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for thisbooleanequal=incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource());//TODO: write test case for this if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {if(!equal&&!callSitesWithInterest.contains(incEdge.getCallSite())){ PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(PathEdge<N,D>callerEdge=newConcretizationPathEdge<>( applyConstraint(constraint, incEdge.getCallerSourceFact()), applyConstraint(constraint,incEdge.getCallerSourceFact()), incEdge.getCallSite(), incEdge.getCallSite(), applyConstraint(constraint, incEdge.getCallerCallSiteFact()),applyConstraint(constraint,incEdge.getCallerCallSiteFact()), calleeMethod,calleeMethod, pathEdge.factAtSource());pathEdge.factAtSource()); propagate |= propagateConstrained(constraint, callerEdge);propagate|=propagateConstrained(constraint,callerEdge); if(visited.containsKey(incEdge.getCallSite())) {if(visited.containsKey(incEdge.getCallSite())){ if(visited.get(incEdge.getCallSite()) != null)if(visited.get(incEdge.getCallSite())!=null) propagate |= visited.get(incEdge.getCallSite());propagate|=visited.get(incEdge.getCallSite()); }} else {else{ boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for thisbooleanequal=incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource());//TODO: write test case for this if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {if(!equal&&!callSitesWithInterest.contains(incEdge.getCallSite())){ Constraint<FieldRef> callerConstraint = new DeltaConstraint<FieldRef>(incEdge.getCalleeSourceFact().getAccessPath(), pathEdge.factAtSource().getAccessPath());Constraint<FieldRef>callerConstraint=newDeltaConstraint<FieldRef>(incEdge.getCalleeSourceFact().getAccessPath(),pathEdge.factAtSource().getAccessPath()); PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(PathEdge<N,D>callerEdge=newConcretizationPathEdge<>( applyConstraint(callerConstraint, incEdge.getCallerSourceFact()), applyConstraint(callerConstraint,incEdge.getCallerSourceFact()), incEdge.getCallSite(), incEdge.getCallSite(), applyConstraint(callerConstraint, incEdge.getCallerCallSiteFact()),applyConstraint(callerConstraint,incEdge.getCallerCallSiteFact()), calleeMethod,calleeMethod, pathEdge.factAtSource());pathEdge.factAtSource()); visited.put(incEdge.getCallSite(), null);visited.put(incEdge.getCallSite(),null); boolean result = propagateConstrained(callerEdge, visited);booleanresult=propagateConstrained(callerEdge,visited); visited.put(incEdge.getCallSite(), result);visited.put(incEdge.getCallSite(),result); propagate |= result;propagate|=result; }} }} }} }}








src/heros/alias/FlowFunction.java








View file @ f08a8e49






......@@ -118,6 +118,31 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 public String toString() {










 return "^"+fieldRef.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((fieldRef == null) ? 0 : fieldRef.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof WriteFieldConstraint))










 return false;










 WriteFieldConstraint other = (WriteFieldConstraint) obj;










 if (fieldRef == null) {










 if (other.fieldRef != null)










 return false;










 } else if (!fieldRef.equals(other.fieldRef))










 return false;










 return true;










 }










 }










 










 public class ReadFieldConstraint<FieldRef> implements Constraint<FieldRef> {



......@@ -137,5 +162,30 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 public String toString() {










 return fieldRef.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((fieldRef == null) ? 0 : fieldRef.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof ReadFieldConstraint))










 return false;










 ReadFieldConstraint other = (ReadFieldConstraint) obj;










 if (fieldRef == null) {










 if (other.fieldRef != null)










 return false;










 } else if (!fieldRef.equals(other.fieldRef))










 return false;










 return true;










 }










 }










}












src/heros/alias/FlowFunction.java








View file @ f08a8e49








src/heros/alias/FlowFunction.java










View file @ f08a8e49


f08a8e49



......@@ -118,6 +118,31 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 public String toString() {










 return "^"+fieldRef.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((fieldRef == null) ? 0 : fieldRef.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof WriteFieldConstraint))










 return false;










 WriteFieldConstraint other = (WriteFieldConstraint) obj;










 if (fieldRef == null) {










 if (other.fieldRef != null)










 return false;










 } else if (!fieldRef.equals(other.fieldRef))










 return false;










 return true;










 }










 }










 










 public class ReadFieldConstraint<FieldRef> implements Constraint<FieldRef> {



......@@ -137,5 +162,30 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 public String toString() {










 return fieldRef.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((fieldRef == null) ? 0 : fieldRef.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof ReadFieldConstraint))










 return false;










 ReadFieldConstraint other = (ReadFieldConstraint) obj;










 if (fieldRef == null) {










 if (other.fieldRef != null)










 return false;










 } else if (!fieldRef.equals(other.fieldRef))










 return false;










 return true;










 }










 }










}






......@@ -118,6 +118,31 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 public String toString() {










 return "^"+fieldRef.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((fieldRef == null) ? 0 : fieldRef.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof WriteFieldConstraint))










 return false;










 WriteFieldConstraint other = (WriteFieldConstraint) obj;










 if (fieldRef == null) {










 if (other.fieldRef != null)










 return false;










 } else if (!fieldRef.equals(other.fieldRef))










 return false;










 return true;










 }










 }










 










 public class ReadFieldConstraint<FieldRef> implements Constraint<FieldRef> {



......@@ -137,5 +162,30 @@ public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef









 public String toString() {










 return fieldRef.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((fieldRef == null) ? 0 : fieldRef.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof ReadFieldConstraint))










 return false;










 ReadFieldConstraint other = (ReadFieldConstraint) obj;










 if (fieldRef == null) {










 if (other.fieldRef != null)










 return false;










 } else if (!fieldRef.equals(other.fieldRef))










 return false;










 return true;










 }










 }










}


 public String toString() {publicStringtoString(){ return "^"+fieldRef.toString();return"^"+fieldRef.toString(); }} @Override@Override public int hashCode() {publicinthashCode(){ final int prime = 31;finalintprime=31; int result = 1;intresult=1; result = prime * result + ((fieldRef == null) ? 0 : fieldRef.hashCode());result=prime*result+((fieldRef==null)?0:fieldRef.hashCode()); return result;returnresult; }} @Override@Override public boolean equals(Object obj) {publicbooleanequals(Objectobj){ if (this == obj)if(this==obj) return true;returntrue; if (obj == null)if(obj==null) return false;returnfalse; if (!(obj instanceof WriteFieldConstraint))if(!(objinstanceofWriteFieldConstraint)) return false;returnfalse; WriteFieldConstraint other = (WriteFieldConstraint) obj;WriteFieldConstraintother=(WriteFieldConstraint)obj; if (fieldRef == null) {if(fieldRef==null){ if (other.fieldRef != null)if(other.fieldRef!=null) return false;returnfalse; } else if (!fieldRef.equals(other.fieldRef))}elseif(!fieldRef.equals(other.fieldRef)) return false;returnfalse; return true;returntrue; }} }}  public class ReadFieldConstraint<FieldRef> implements Constraint<FieldRef> {publicclassReadFieldConstraint<FieldRef>implementsConstraint<FieldRef>{ public String toString() {publicStringtoString(){ return fieldRef.toString();returnfieldRef.toString(); }} @Override@Override public int hashCode() {publicinthashCode(){ final int prime = 31;finalintprime=31; int result = 1;intresult=1; result = prime * result + ((fieldRef == null) ? 0 : fieldRef.hashCode());result=prime*result+((fieldRef==null)?0:fieldRef.hashCode()); return result;returnresult; }} @Override@Override public boolean equals(Object obj) {publicbooleanequals(Objectobj){ if (this == obj)if(this==obj) return true;returntrue; if (obj == null)if(obj==null) return false;returnfalse; if (!(obj instanceof ReadFieldConstraint))if(!(objinstanceofReadFieldConstraint)) return false;returnfalse; ReadFieldConstraint other = (ReadFieldConstraint) obj;ReadFieldConstraintother=(ReadFieldConstraint)obj; if (fieldRef == null) {if(fieldRef==null){ if (other.fieldRef != null)if(other.fieldRef!=null) return false;returnfalse; } else if (!fieldRef.equals(other.fieldRef))}elseif(!fieldRef.equals(other.fieldRef)) return false;returnfalse; return true;returntrue; }} }}}}








test/heros/alias/FieldSensitiveSolverTest.java








View file @ f08a8e49






......@@ -477,4 +477,92 @@ public class FieldSensitiveSolverTest {









 helper.runSolver(true, "a");










 }










 










 @Test










 public void pauseEdgeMutuallyRecursiveCallers() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.x")),










 callSite("b").calls("bar",flow("1.x", "2.x")));










 










 helper.method("bar",










 startPoints("c"),










 callSite("c").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),










 callSite("d").calls("bar", flow("3", "2")).retSite("e", flow("3", "3")),










 normalStmt("e").succ("f", flow("3", readField("f"), "4")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void pauseDiamondShapedCallerChain() {










 helper.method("bar",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.x")),










 callSite("b").calls("foo1", flow("1.x", "2.x")).calls("foo2", flow("1.x", "2.x")));










 










 helper.method("foo1",










 startPoints("c1"),










 callSite("c1").calls("xyz", flow("2", "3")));










 










 helper.method("foo2",










 startPoints("c2"),










 callSite("c2").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),










 normalStmt("d").succ("e", flow("3", readField("f"), "4")),










 normalStmt("e").succ("f"));










 










 helper.runSolver(false, "a");










 }





















 @Test










 public void dontPauseDiamondShapedCallerChain() {










 helper.method("bar",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.x")),










 callSite("b").calls("foo1", flow("1.x", "2.f")).calls("foo2", flow("1.x", "2.f")));










 










 helper.method("foo1",










 startPoints("c1"),










 callSite("c1").calls("xyz", flow("2", "3")));










 










 helper.method("foo2",










 startPoints("c2"),










 callSite("c2").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),










 normalStmt("d").succ("e", flow("3", readField("f"), "4")),










 normalStmt("e").succ("f", kill("4")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void correctDeltaConstraintApplication() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),










 callSite("b").calls("bar", flow("1", "1")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("1", writeField("a"), "1^a")),










 callSite("d").calls("xyz", flow("1^a", "1^a")));










 










 helper.method("xyz",










 startPoints("e"),










 normalStmt("e").succ("f", flow("1", readField("f"), "2")),










 callSite("f").calls("baz", flow("2", "3")));










 










 helper.method("baz",










 startPoints("g"),










 normalStmt("g").succ("h", flow("3", readField("a"), "4")));










 










 helper.runSolver(false, "a");










 }










}












test/heros/alias/FieldSensitiveSolverTest.java








View file @ f08a8e49








test/heros/alias/FieldSensitiveSolverTest.java










View file @ f08a8e49


f08a8e49



......@@ -477,4 +477,92 @@ public class FieldSensitiveSolverTest {









 helper.runSolver(true, "a");










 }










 










 @Test










 public void pauseEdgeMutuallyRecursiveCallers() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.x")),










 callSite("b").calls("bar",flow("1.x", "2.x")));










 










 helper.method("bar",










 startPoints("c"),










 callSite("c").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),










 callSite("d").calls("bar", flow("3", "2")).retSite("e", flow("3", "3")),










 normalStmt("e").succ("f", flow("3", readField("f"), "4")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void pauseDiamondShapedCallerChain() {










 helper.method("bar",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.x")),










 callSite("b").calls("foo1", flow("1.x", "2.x")).calls("foo2", flow("1.x", "2.x")));










 










 helper.method("foo1",










 startPoints("c1"),










 callSite("c1").calls("xyz", flow("2", "3")));










 










 helper.method("foo2",










 startPoints("c2"),










 callSite("c2").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),










 normalStmt("d").succ("e", flow("3", readField("f"), "4")),










 normalStmt("e").succ("f"));










 










 helper.runSolver(false, "a");










 }





















 @Test










 public void dontPauseDiamondShapedCallerChain() {










 helper.method("bar",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.x")),










 callSite("b").calls("foo1", flow("1.x", "2.f")).calls("foo2", flow("1.x", "2.f")));










 










 helper.method("foo1",










 startPoints("c1"),










 callSite("c1").calls("xyz", flow("2", "3")));










 










 helper.method("foo2",










 startPoints("c2"),










 callSite("c2").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),










 normalStmt("d").succ("e", flow("3", readField("f"), "4")),










 normalStmt("e").succ("f", kill("4")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void correctDeltaConstraintApplication() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),










 callSite("b").calls("bar", flow("1", "1")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("1", writeField("a"), "1^a")),










 callSite("d").calls("xyz", flow("1^a", "1^a")));










 










 helper.method("xyz",










 startPoints("e"),










 normalStmt("e").succ("f", flow("1", readField("f"), "2")),










 callSite("f").calls("baz", flow("2", "3")));










 










 helper.method("baz",










 startPoints("g"),










 normalStmt("g").succ("h", flow("3", readField("a"), "4")));










 










 helper.runSolver(false, "a");










 }










}






......@@ -477,4 +477,92 @@ public class FieldSensitiveSolverTest {









 helper.runSolver(true, "a");










 }










 










 @Test










 public void pauseEdgeMutuallyRecursiveCallers() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.x")),










 callSite("b").calls("bar",flow("1.x", "2.x")));










 










 helper.method("bar",










 startPoints("c"),










 callSite("c").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),










 callSite("d").calls("bar", flow("3", "2")).retSite("e", flow("3", "3")),










 normalStmt("e").succ("f", flow("3", readField("f"), "4")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void pauseDiamondShapedCallerChain() {










 helper.method("bar",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.x")),










 callSite("b").calls("foo1", flow("1.x", "2.x")).calls("foo2", flow("1.x", "2.x")));










 










 helper.method("foo1",










 startPoints("c1"),










 callSite("c1").calls("xyz", flow("2", "3")));










 










 helper.method("foo2",










 startPoints("c2"),










 callSite("c2").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),










 normalStmt("d").succ("e", flow("3", readField("f"), "4")),










 normalStmt("e").succ("f"));










 










 helper.runSolver(false, "a");










 }





















 @Test










 public void dontPauseDiamondShapedCallerChain() {










 helper.method("bar",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.x")),










 callSite("b").calls("foo1", flow("1.x", "2.f")).calls("foo2", flow("1.x", "2.f")));










 










 helper.method("foo1",










 startPoints("c1"),










 callSite("c1").calls("xyz", flow("2", "3")));










 










 helper.method("foo2",










 startPoints("c2"),










 callSite("c2").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),










 normalStmt("d").succ("e", flow("3", readField("f"), "4")),










 normalStmt("e").succ("f", kill("4")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void correctDeltaConstraintApplication() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),










 callSite("b").calls("bar", flow("1", "1")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("1", writeField("a"), "1^a")),










 callSite("d").calls("xyz", flow("1^a", "1^a")));










 










 helper.method("xyz",










 startPoints("e"),










 normalStmt("e").succ("f", flow("1", readField("f"), "2")),










 callSite("f").calls("baz", flow("2", "3")));










 










 helper.method("baz",










 startPoints("g"),










 normalStmt("g").succ("h", flow("3", readField("a"), "4")));










 










 helper.runSolver(false, "a");










 }










}


 helper.runSolver(true, "a");helper.runSolver(true,"a"); }}  @Test@Test public void pauseEdgeMutuallyRecursiveCallers() {publicvoidpauseEdgeMutuallyRecursiveCallers(){ helper.method("foo",helper.method("foo", startPoints("a"),startPoints("a"), normalStmt("a").succ("b", flow("0", "1.x")),normalStmt("a").succ("b",flow("0","1.x")), callSite("b").calls("bar",flow("1.x", "2.x")));callSite("b").calls("bar",flow("1.x","2.x")));  helper.method("bar",helper.method("bar", startPoints("c"),startPoints("c"), callSite("c").calls("xyz", flow("2", "3")));callSite("c").calls("xyz",flow("2","3")));  helper.method("xyz",helper.method("xyz", startPoints("d"),startPoints("d"), callSite("d").calls("bar", flow("3", "2")).retSite("e", flow("3", "3")),callSite("d").calls("bar",flow("3","2")).retSite("e",flow("3","3")), normalStmt("e").succ("f", flow("3", readField("f"), "4")));normalStmt("e").succ("f",flow("3",readField("f"),"4")));  helper.runSolver(false, "a");helper.runSolver(false,"a"); }}  @Test@Test public void pauseDiamondShapedCallerChain() {publicvoidpauseDiamondShapedCallerChain(){ helper.method("bar",helper.method("bar", startPoints("a"),startPoints("a"), normalStmt("a").succ("b", flow("0", "1.x")),normalStmt("a").succ("b",flow("0","1.x")), callSite("b").calls("foo1", flow("1.x", "2.x")).calls("foo2", flow("1.x", "2.x")));callSite("b").calls("foo1",flow("1.x","2.x")).calls("foo2",flow("1.x","2.x")));  helper.method("foo1",helper.method("foo1", startPoints("c1"),startPoints("c1"), callSite("c1").calls("xyz", flow("2", "3")));callSite("c1").calls("xyz",flow("2","3")));  helper.method("foo2",helper.method("foo2", startPoints("c2"),startPoints("c2"), callSite("c2").calls("xyz", flow("2", "3")));callSite("c2").calls("xyz",flow("2","3")));  helper.method("xyz",helper.method("xyz", startPoints("d"),startPoints("d"), normalStmt("d").succ("e", flow("3", readField("f"), "4")),normalStmt("d").succ("e",flow("3",readField("f"),"4")), normalStmt("e").succ("f"));normalStmt("e").succ("f"));  helper.runSolver(false, "a");helper.runSolver(false,"a"); }} @Test@Test public void dontPauseDiamondShapedCallerChain() {publicvoiddontPauseDiamondShapedCallerChain(){ helper.method("bar",helper.method("bar", startPoints("a"),startPoints("a"), normalStmt("a").succ("b", flow("0", "1.x")),normalStmt("a").succ("b",flow("0","1.x")), callSite("b").calls("foo1", flow("1.x", "2.f")).calls("foo2", flow("1.x", "2.f")));callSite("b").calls("foo1",flow("1.x","2.f")).calls("foo2",flow("1.x","2.f")));  helper.method("foo1",helper.method("foo1", startPoints("c1"),startPoints("c1"), callSite("c1").calls("xyz", flow("2", "3")));callSite("c1").calls("xyz",flow("2","3")));  helper.method("foo2",helper.method("foo2", startPoints("c2"),startPoints("c2"), callSite("c2").calls("xyz", flow("2", "3")));callSite("c2").calls("xyz",flow("2","3")));  helper.method("xyz",helper.method("xyz", startPoints("d"),startPoints("d"), normalStmt("d").succ("e", flow("3", readField("f"), "4")),normalStmt("d").succ("e",flow("3",readField("f"),"4")), normalStmt("e").succ("f", kill("4")));normalStmt("e").succ("f",kill("4")));  helper.runSolver(false, "a");helper.runSolver(false,"a"); }}  @Test@Test public void correctDeltaConstraintApplication() {publicvoidcorrectDeltaConstraintApplication(){ helper.method("foo",helper.method("foo", startPoints("a"),startPoints("a"), normalStmt("a").succ("b", flow("0", "1")),normalStmt("a").succ("b",flow("0","1")), callSite("b").calls("bar", flow("1", "1")));callSite("b").calls("bar",flow("1","1")));  helper.method("bar",helper.method("bar", startPoints("c"),startPoints("c"), normalStmt("c").succ("d", flow("1", writeField("a"), "1^a")),normalStmt("c").succ("d",flow("1",writeField("a"),"1^a")), callSite("d").calls("xyz", flow("1^a", "1^a")));callSite("d").calls("xyz",flow("1^a","1^a")));  helper.method("xyz",helper.method("xyz", startPoints("e"),startPoints("e"), normalStmt("e").succ("f", flow("1", readField("f"), "2")),normalStmt("e").succ("f",flow("1",readField("f"),"2")), callSite("f").calls("baz", flow("2", "3")));callSite("f").calls("baz",flow("2","3")));  helper.method("baz",helper.method("baz", startPoints("g"),startPoints("g"), normalStmt("g").succ("h", flow("3", readField("a"), "4")));normalStmt("g").succ("h",flow("3",readField("a"),"4")));  helper.runSolver(false, "a");helper.runSolver(false,"a"); }}}}









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






