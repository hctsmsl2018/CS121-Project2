



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

ddde660b















Commit
ddde660b


authored
Sep 26, 2014
by


Johannes Lerch



Browse files




Introducing more abstract/flexible version of PathTrackingIFDSSolver







parent
a0c1ce8b













Changes
7




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ ddde660b






......@@ -49,7 +49,7 @@ import com.google.common.collect.Maps;









 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;



......@@ -158,7 +158,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 protected class SingleDirectionSolver extends JoinHandlingNodesIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());



......@@ -262,7 +262,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements LinkedNode<AbstractionWithSourceStmt> {










 public class AbstractionWithSourceStmt implements JoinHandlingNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;



......@@ -321,13 +321,18 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 }





















 @Override










 public void addNeighbor(AbstractionWithSourceStmt originalAbstraction) {










 getAbstraction().addNeighbor(originalAbstraction.getAbstraction());










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 public boolean handleJoin(BiDiIFDSSolver<N, D, M, I>.AbstractionWithSourceStmt joiningNode) {










 return abstraction.handleJoin(joiningNode.getAbstraction());










 }





















 @Override










 public heros.solver.JoinHandlingNode.JoinKey createJoinKey() {










 return new JoinKey(source, abstraction.createJoinKey());










 }





















 }



......














src/heros/solver/IDESolver.java








View file @ ddde660b






......@@ -521,6 +521,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 if (d5 instanceof LinkedNode) {










 ((LinkedNode<D>) d5).setCallingContext(d4);










 }










 if(d5 instanceof JoinHandlingNode) {










 ((JoinHandlingNode<D>) d5).setCallingContext(d4);










 } 










 return d5;










 }










 



......














src/heros/solver/JoinHandlingNode.java



0 → 100644







View file @ ddde660b













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import java.util.Arrays;
































public interface JoinHandlingNode<T> {





















 /**










	 * 










	 * @param joiningNode the node abstraction that was propagated to the same target after {@code this} node.










	 * @return true if the join could be handled and no further propagation of the {@code joiningNode} is necessary, otherwise false meaning 










	 * the node should be propagated by the solver.










	 */










 public boolean handleJoin(T joiningNode);










 










 /**










	 * 










	 * @return a JoinKey object used to identify which node abstractions require manual join handling. 










	 * For nodes with {@code equal} JoinKey instances {@link #handleJoin(JoinHandlingNode)} will be called.










	 */










 public JoinKey createJoinKey();










 










 public void setCallingContext(T callingContext);










 










 public static class JoinKey {










 private Object[] elements;





















 /**










		 * 










		 * @param elements Passed elements must be immutable with respect to their hashCode and equals implementations.










		 */










 public JoinKey(Object... elements) {










 this.elements = elements;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + Arrays.hashCode(elements);










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 JoinKey other = (JoinKey) obj;










 if (!Arrays.equals(elements, other.elements))










 return false;










 return true;










 }










 }










}














src/heros/solver/JoinHandlingNodesIFDSSolver.java



0 → 100644







View file @ ddde660b













/*******************************************************************************










 * Copyright (c) 2013Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.JoinHandlingNode.JoinKey;





















import java.util.Map;





















import com.google.common.collect.Maps;





















/**










 * An {@link IFDSSolver} that tracks paths for reporting. To do so, it requires that data-flow abstractions implement the LinkedNode interface.










 * The solver implements a cache of data-flow facts for each statement and source value. If for the same statement and source value the same










 * target value is seen again (as determined through a cache hit), then the solver propagates the cached value but at the same time links










 * both target values with one another.










 *  










 * @author Johannes Lerch










 */










public class JoinHandlingNodesIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 public JoinHandlingNodesIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 super(ifdsProblem);










 }





















 protected final Map<CacheEntry, JoinHandlingNode<D>> cache = Maps.newHashMap();










 










 @Override










 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 CacheEntry currentCacheEntry = new CacheEntry(target, sourceVal.createJoinKey(), targetVal.createJoinKey());





















 boolean propagate = false;










 synchronized (this) {










 if (cache.containsKey(currentCacheEntry)) {










 JoinHandlingNode<D> existingTargetVal = cache.get(currentCacheEntry);










 if(!existingTargetVal.handleJoin(targetVal)) {










 propagate = true;










 }










 } else {










 cache.put(currentCacheEntry, targetVal);










 propagate = true;










 }










 }





















 if (propagate)










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 










 };










 










 










 private class CacheEntry {










 private N n;










 private JoinKey sourceKey;










 private JoinKey targetKey;





















 public CacheEntry(N n, JoinKey sourceKey, JoinKey targetKey) {










 super();










 this.n = n;










 this.sourceKey = sourceKey;










 this.targetKey = targetKey;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((sourceKey == null) ? 0 : sourceKey.hashCode());










 result = prime * result + ((targetKey == null) ? 0 : targetKey.hashCode());










 result = prime * result + ((n == null) ? 0 : n.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings({ "unchecked" })










 CacheEntry other = (CacheEntry) obj;










 if (sourceKey == null) {










 if (other.sourceKey != null)










 return false;










 } else if (!sourceKey.equals(other.sourceKey))










 return false;










 if (targetKey == null) {










 if (other.targetKey != null)










 return false;










 } else if (!targetKey.equals(other.targetKey))










 return false;










 if (n == null) {










 if (other.n != null)










 return false;










 } else if (!n.equals(other.n))










 return false;










 return true;










 }










 } 










 
































}














src/heros/solver/LinkedNode.java








View file @ ddde660b






......@@ -13,7 +13,10 @@ package heros.solver;









/**










 * A data-flow fact that can be linked with other equal facts.










 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










 * 










 * @deprecated Use {@link JoinHandlingNode} instead.










 */










@Deprecated










public interface LinkedNode<D> {










 /**










	 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged



......














src/heros/solver/PathTrackingIFDSSolver.java








View file @ ddde660b






......@@ -25,7 +25,9 @@ import com.google.common.collect.Maps;









 * both target values with one another.










 *  










 * @author Eric Bodden










 * @deprecated Use {@link JoinHandlingNodesIFDSSolver} instead.










 */










@Deprecated










public class PathTrackingIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 public PathTrackingIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {



......














test/heros/utilities/Fact.java








View file @ ddde660b






......@@ -10,9 +10,11 @@









 ******************************************************************************/










package heros.utilities;





















import heros.solver.JoinHandlingNode;










import heros.solver.LinkedNode;










import heros.solver.JoinHandlingNode.JoinKey;





















public class Fact implements LinkedNode<Fact> {










public class Fact implements JoinHandlingNode<Fact> {





















 public final String name;










 



......@@ -51,12 +53,37 @@ public class Fact implements LinkedNode<Fact> {









 }





















 @Override










 public void addNeighbor(Fact originalAbstraction) {










 public void setCallingContext(Fact callingContext) {










 










 }





















 @Override










 public void setCallingContext(Fact callingContext) {










 










 public heros.solver.JoinHandlingNode.JoinKey createJoinKey() {










 return new TestJoinKey();










 }





















 @Override










 public boolean handleJoin(Fact joiningNode) {










 return true;










 }





















 private class TestJoinKey extends JoinKey {





















 private Fact getFact() {










 return Fact.this;










 }





















 @Override










 public boolean equals(Object obj) {










 if (obj instanceof TestJoinKey) {










 return getFact().equals(((TestJoinKey) obj).getFact());










 }










 throw new IllegalArgumentException();










 }





















 @Override










 public int hashCode() {










 return Fact.this.hashCode();










 }










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

ddde660b















Commit
ddde660b


authored
Sep 26, 2014
by


Johannes Lerch



Browse files




Introducing more abstract/flexible version of PathTrackingIFDSSolver







parent
a0c1ce8b













Changes
7




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ ddde660b






......@@ -49,7 +49,7 @@ import com.google.common.collect.Maps;









 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;



......@@ -158,7 +158,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 protected class SingleDirectionSolver extends JoinHandlingNodesIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());



......@@ -262,7 +262,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements LinkedNode<AbstractionWithSourceStmt> {










 public class AbstractionWithSourceStmt implements JoinHandlingNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;



......@@ -321,13 +321,18 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 }





















 @Override










 public void addNeighbor(AbstractionWithSourceStmt originalAbstraction) {










 getAbstraction().addNeighbor(originalAbstraction.getAbstraction());










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 public boolean handleJoin(BiDiIFDSSolver<N, D, M, I>.AbstractionWithSourceStmt joiningNode) {










 return abstraction.handleJoin(joiningNode.getAbstraction());










 }





















 @Override










 public heros.solver.JoinHandlingNode.JoinKey createJoinKey() {










 return new JoinKey(source, abstraction.createJoinKey());










 }





















 }



......














src/heros/solver/IDESolver.java








View file @ ddde660b






......@@ -521,6 +521,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 if (d5 instanceof LinkedNode) {










 ((LinkedNode<D>) d5).setCallingContext(d4);










 }










 if(d5 instanceof JoinHandlingNode) {










 ((JoinHandlingNode<D>) d5).setCallingContext(d4);










 } 










 return d5;










 }










 



......














src/heros/solver/JoinHandlingNode.java



0 → 100644







View file @ ddde660b













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import java.util.Arrays;
































public interface JoinHandlingNode<T> {





















 /**










	 * 










	 * @param joiningNode the node abstraction that was propagated to the same target after {@code this} node.










	 * @return true if the join could be handled and no further propagation of the {@code joiningNode} is necessary, otherwise false meaning 










	 * the node should be propagated by the solver.










	 */










 public boolean handleJoin(T joiningNode);










 










 /**










	 * 










	 * @return a JoinKey object used to identify which node abstractions require manual join handling. 










	 * For nodes with {@code equal} JoinKey instances {@link #handleJoin(JoinHandlingNode)} will be called.










	 */










 public JoinKey createJoinKey();










 










 public void setCallingContext(T callingContext);










 










 public static class JoinKey {










 private Object[] elements;





















 /**










		 * 










		 * @param elements Passed elements must be immutable with respect to their hashCode and equals implementations.










		 */










 public JoinKey(Object... elements) {










 this.elements = elements;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + Arrays.hashCode(elements);










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 JoinKey other = (JoinKey) obj;










 if (!Arrays.equals(elements, other.elements))










 return false;










 return true;










 }










 }










}














src/heros/solver/JoinHandlingNodesIFDSSolver.java



0 → 100644







View file @ ddde660b













/*******************************************************************************










 * Copyright (c) 2013Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.JoinHandlingNode.JoinKey;





















import java.util.Map;





















import com.google.common.collect.Maps;





















/**










 * An {@link IFDSSolver} that tracks paths for reporting. To do so, it requires that data-flow abstractions implement the LinkedNode interface.










 * The solver implements a cache of data-flow facts for each statement and source value. If for the same statement and source value the same










 * target value is seen again (as determined through a cache hit), then the solver propagates the cached value but at the same time links










 * both target values with one another.










 *  










 * @author Johannes Lerch










 */










public class JoinHandlingNodesIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 public JoinHandlingNodesIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 super(ifdsProblem);










 }





















 protected final Map<CacheEntry, JoinHandlingNode<D>> cache = Maps.newHashMap();










 










 @Override










 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 CacheEntry currentCacheEntry = new CacheEntry(target, sourceVal.createJoinKey(), targetVal.createJoinKey());





















 boolean propagate = false;










 synchronized (this) {










 if (cache.containsKey(currentCacheEntry)) {










 JoinHandlingNode<D> existingTargetVal = cache.get(currentCacheEntry);










 if(!existingTargetVal.handleJoin(targetVal)) {










 propagate = true;










 }










 } else {










 cache.put(currentCacheEntry, targetVal);










 propagate = true;










 }










 }





















 if (propagate)










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 










 };










 










 










 private class CacheEntry {










 private N n;










 private JoinKey sourceKey;










 private JoinKey targetKey;





















 public CacheEntry(N n, JoinKey sourceKey, JoinKey targetKey) {










 super();










 this.n = n;










 this.sourceKey = sourceKey;










 this.targetKey = targetKey;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((sourceKey == null) ? 0 : sourceKey.hashCode());










 result = prime * result + ((targetKey == null) ? 0 : targetKey.hashCode());










 result = prime * result + ((n == null) ? 0 : n.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings({ "unchecked" })










 CacheEntry other = (CacheEntry) obj;










 if (sourceKey == null) {










 if (other.sourceKey != null)










 return false;










 } else if (!sourceKey.equals(other.sourceKey))










 return false;










 if (targetKey == null) {










 if (other.targetKey != null)










 return false;










 } else if (!targetKey.equals(other.targetKey))










 return false;










 if (n == null) {










 if (other.n != null)










 return false;










 } else if (!n.equals(other.n))










 return false;










 return true;










 }










 } 










 
































}














src/heros/solver/LinkedNode.java








View file @ ddde660b






......@@ -13,7 +13,10 @@ package heros.solver;









/**










 * A data-flow fact that can be linked with other equal facts.










 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










 * 










 * @deprecated Use {@link JoinHandlingNode} instead.










 */










@Deprecated










public interface LinkedNode<D> {










 /**










	 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged



......














src/heros/solver/PathTrackingIFDSSolver.java








View file @ ddde660b






......@@ -25,7 +25,9 @@ import com.google.common.collect.Maps;









 * both target values with one another.










 *  










 * @author Eric Bodden










 * @deprecated Use {@link JoinHandlingNodesIFDSSolver} instead.










 */










@Deprecated










public class PathTrackingIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 public PathTrackingIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {



......














test/heros/utilities/Fact.java








View file @ ddde660b






......@@ -10,9 +10,11 @@









 ******************************************************************************/










package heros.utilities;





















import heros.solver.JoinHandlingNode;










import heros.solver.LinkedNode;










import heros.solver.JoinHandlingNode.JoinKey;





















public class Fact implements LinkedNode<Fact> {










public class Fact implements JoinHandlingNode<Fact> {





















 public final String name;










 



......@@ -51,12 +53,37 @@ public class Fact implements LinkedNode<Fact> {









 }





















 @Override










 public void addNeighbor(Fact originalAbstraction) {










 public void setCallingContext(Fact callingContext) {










 










 }





















 @Override










 public void setCallingContext(Fact callingContext) {










 










 public heros.solver.JoinHandlingNode.JoinKey createJoinKey() {










 return new TestJoinKey();










 }





















 @Override










 public boolean handleJoin(Fact joiningNode) {










 return true;










 }





















 private class TestJoinKey extends JoinKey {





















 private Fact getFact() {










 return Fact.this;










 }





















 @Override










 public boolean equals(Object obj) {










 if (obj instanceof TestJoinKey) {










 return getFact().equals(((TestJoinKey) obj).getFact());










 }










 throw new IllegalArgumentException();










 }





















 @Override










 public int hashCode() {










 return Fact.this.hashCode();










 }










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

ddde660b







Open sidebar



Joshua Garcia heros
Commits

ddde660b




Open sidebar

Joshua Garcia heros
Commits

ddde660b


Joshua GarciaherosherosCommits
ddde660b








Commit
ddde660b


authored
Sep 26, 2014
by


Johannes Lerch



Browse files




Introducing more abstract/flexible version of PathTrackingIFDSSolver







parent
a0c1ce8b













Changes
7




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ ddde660b






......@@ -49,7 +49,7 @@ import com.google.common.collect.Maps;









 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;



......@@ -158,7 +158,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 protected class SingleDirectionSolver extends JoinHandlingNodesIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());



......@@ -262,7 +262,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements LinkedNode<AbstractionWithSourceStmt> {










 public class AbstractionWithSourceStmt implements JoinHandlingNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;



......@@ -321,13 +321,18 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 }





















 @Override










 public void addNeighbor(AbstractionWithSourceStmt originalAbstraction) {










 getAbstraction().addNeighbor(originalAbstraction.getAbstraction());










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 public boolean handleJoin(BiDiIFDSSolver<N, D, M, I>.AbstractionWithSourceStmt joiningNode) {










 return abstraction.handleJoin(joiningNode.getAbstraction());










 }





















 @Override










 public heros.solver.JoinHandlingNode.JoinKey createJoinKey() {










 return new JoinKey(source, abstraction.createJoinKey());










 }





















 }



......














src/heros/solver/IDESolver.java








View file @ ddde660b






......@@ -521,6 +521,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 if (d5 instanceof LinkedNode) {










 ((LinkedNode<D>) d5).setCallingContext(d4);










 }










 if(d5 instanceof JoinHandlingNode) {










 ((JoinHandlingNode<D>) d5).setCallingContext(d4);










 } 










 return d5;










 }










 



......














src/heros/solver/JoinHandlingNode.java



0 → 100644







View file @ ddde660b













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import java.util.Arrays;
































public interface JoinHandlingNode<T> {





















 /**










	 * 










	 * @param joiningNode the node abstraction that was propagated to the same target after {@code this} node.










	 * @return true if the join could be handled and no further propagation of the {@code joiningNode} is necessary, otherwise false meaning 










	 * the node should be propagated by the solver.










	 */










 public boolean handleJoin(T joiningNode);










 










 /**










	 * 










	 * @return a JoinKey object used to identify which node abstractions require manual join handling. 










	 * For nodes with {@code equal} JoinKey instances {@link #handleJoin(JoinHandlingNode)} will be called.










	 */










 public JoinKey createJoinKey();










 










 public void setCallingContext(T callingContext);










 










 public static class JoinKey {










 private Object[] elements;





















 /**










		 * 










		 * @param elements Passed elements must be immutable with respect to their hashCode and equals implementations.










		 */










 public JoinKey(Object... elements) {










 this.elements = elements;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + Arrays.hashCode(elements);










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 JoinKey other = (JoinKey) obj;










 if (!Arrays.equals(elements, other.elements))










 return false;










 return true;










 }










 }










}














src/heros/solver/JoinHandlingNodesIFDSSolver.java



0 → 100644







View file @ ddde660b













/*******************************************************************************










 * Copyright (c) 2013Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.JoinHandlingNode.JoinKey;





















import java.util.Map;





















import com.google.common.collect.Maps;





















/**










 * An {@link IFDSSolver} that tracks paths for reporting. To do so, it requires that data-flow abstractions implement the LinkedNode interface.










 * The solver implements a cache of data-flow facts for each statement and source value. If for the same statement and source value the same










 * target value is seen again (as determined through a cache hit), then the solver propagates the cached value but at the same time links










 * both target values with one another.










 *  










 * @author Johannes Lerch










 */










public class JoinHandlingNodesIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 public JoinHandlingNodesIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 super(ifdsProblem);










 }





















 protected final Map<CacheEntry, JoinHandlingNode<D>> cache = Maps.newHashMap();










 










 @Override










 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 CacheEntry currentCacheEntry = new CacheEntry(target, sourceVal.createJoinKey(), targetVal.createJoinKey());





















 boolean propagate = false;










 synchronized (this) {










 if (cache.containsKey(currentCacheEntry)) {










 JoinHandlingNode<D> existingTargetVal = cache.get(currentCacheEntry);










 if(!existingTargetVal.handleJoin(targetVal)) {










 propagate = true;










 }










 } else {










 cache.put(currentCacheEntry, targetVal);










 propagate = true;










 }










 }





















 if (propagate)










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 










 };










 










 










 private class CacheEntry {










 private N n;










 private JoinKey sourceKey;










 private JoinKey targetKey;





















 public CacheEntry(N n, JoinKey sourceKey, JoinKey targetKey) {










 super();










 this.n = n;










 this.sourceKey = sourceKey;










 this.targetKey = targetKey;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((sourceKey == null) ? 0 : sourceKey.hashCode());










 result = prime * result + ((targetKey == null) ? 0 : targetKey.hashCode());










 result = prime * result + ((n == null) ? 0 : n.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings({ "unchecked" })










 CacheEntry other = (CacheEntry) obj;










 if (sourceKey == null) {










 if (other.sourceKey != null)










 return false;










 } else if (!sourceKey.equals(other.sourceKey))










 return false;










 if (targetKey == null) {










 if (other.targetKey != null)










 return false;










 } else if (!targetKey.equals(other.targetKey))










 return false;










 if (n == null) {










 if (other.n != null)










 return false;










 } else if (!n.equals(other.n))










 return false;










 return true;










 }










 } 










 
































}














src/heros/solver/LinkedNode.java








View file @ ddde660b






......@@ -13,7 +13,10 @@ package heros.solver;









/**










 * A data-flow fact that can be linked with other equal facts.










 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










 * 










 * @deprecated Use {@link JoinHandlingNode} instead.










 */










@Deprecated










public interface LinkedNode<D> {










 /**










	 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged



......














src/heros/solver/PathTrackingIFDSSolver.java








View file @ ddde660b






......@@ -25,7 +25,9 @@ import com.google.common.collect.Maps;









 * both target values with one another.










 *  










 * @author Eric Bodden










 * @deprecated Use {@link JoinHandlingNodesIFDSSolver} instead.










 */










@Deprecated










public class PathTrackingIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 public PathTrackingIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {



......














test/heros/utilities/Fact.java








View file @ ddde660b






......@@ -10,9 +10,11 @@









 ******************************************************************************/










package heros.utilities;





















import heros.solver.JoinHandlingNode;










import heros.solver.LinkedNode;










import heros.solver.JoinHandlingNode.JoinKey;





















public class Fact implements LinkedNode<Fact> {










public class Fact implements JoinHandlingNode<Fact> {





















 public final String name;










 



......@@ -51,12 +53,37 @@ public class Fact implements LinkedNode<Fact> {









 }





















 @Override










 public void addNeighbor(Fact originalAbstraction) {










 public void setCallingContext(Fact callingContext) {










 










 }





















 @Override










 public void setCallingContext(Fact callingContext) {










 










 public heros.solver.JoinHandlingNode.JoinKey createJoinKey() {










 return new TestJoinKey();










 }





















 @Override










 public boolean handleJoin(Fact joiningNode) {










 return true;










 }





















 private class TestJoinKey extends JoinKey {





















 private Fact getFact() {










 return Fact.this;










 }





















 @Override










 public boolean equals(Object obj) {










 if (obj instanceof TestJoinKey) {










 return getFact().equals(((TestJoinKey) obj).getFact());










 }










 throw new IllegalArgumentException();










 }





















 @Override










 public int hashCode() {










 return Fact.this.hashCode();










 }










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
ddde660b


authored
Sep 26, 2014
by


Johannes Lerch



Browse files




Introducing more abstract/flexible version of PathTrackingIFDSSolver







parent
a0c1ce8b













Changes
7




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ ddde660b






......@@ -49,7 +49,7 @@ import com.google.common.collect.Maps;









 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;



......@@ -158,7 +158,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 protected class SingleDirectionSolver extends JoinHandlingNodesIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());



......@@ -262,7 +262,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements LinkedNode<AbstractionWithSourceStmt> {










 public class AbstractionWithSourceStmt implements JoinHandlingNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;



......@@ -321,13 +321,18 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 }





















 @Override










 public void addNeighbor(AbstractionWithSourceStmt originalAbstraction) {










 getAbstraction().addNeighbor(originalAbstraction.getAbstraction());










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 public boolean handleJoin(BiDiIFDSSolver<N, D, M, I>.AbstractionWithSourceStmt joiningNode) {










 return abstraction.handleJoin(joiningNode.getAbstraction());










 }





















 @Override










 public heros.solver.JoinHandlingNode.JoinKey createJoinKey() {










 return new JoinKey(source, abstraction.createJoinKey());










 }





















 }



......














src/heros/solver/IDESolver.java








View file @ ddde660b






......@@ -521,6 +521,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 if (d5 instanceof LinkedNode) {










 ((LinkedNode<D>) d5).setCallingContext(d4);










 }










 if(d5 instanceof JoinHandlingNode) {










 ((JoinHandlingNode<D>) d5).setCallingContext(d4);










 } 










 return d5;










 }










 



......














src/heros/solver/JoinHandlingNode.java



0 → 100644







View file @ ddde660b













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import java.util.Arrays;
































public interface JoinHandlingNode<T> {





















 /**










	 * 










	 * @param joiningNode the node abstraction that was propagated to the same target after {@code this} node.










	 * @return true if the join could be handled and no further propagation of the {@code joiningNode} is necessary, otherwise false meaning 










	 * the node should be propagated by the solver.










	 */










 public boolean handleJoin(T joiningNode);










 










 /**










	 * 










	 * @return a JoinKey object used to identify which node abstractions require manual join handling. 










	 * For nodes with {@code equal} JoinKey instances {@link #handleJoin(JoinHandlingNode)} will be called.










	 */










 public JoinKey createJoinKey();










 










 public void setCallingContext(T callingContext);










 










 public static class JoinKey {










 private Object[] elements;





















 /**










		 * 










		 * @param elements Passed elements must be immutable with respect to their hashCode and equals implementations.










		 */










 public JoinKey(Object... elements) {










 this.elements = elements;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + Arrays.hashCode(elements);










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 JoinKey other = (JoinKey) obj;










 if (!Arrays.equals(elements, other.elements))










 return false;










 return true;










 }










 }










}














src/heros/solver/JoinHandlingNodesIFDSSolver.java



0 → 100644







View file @ ddde660b













/*******************************************************************************










 * Copyright (c) 2013Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.JoinHandlingNode.JoinKey;





















import java.util.Map;





















import com.google.common.collect.Maps;





















/**










 * An {@link IFDSSolver} that tracks paths for reporting. To do so, it requires that data-flow abstractions implement the LinkedNode interface.










 * The solver implements a cache of data-flow facts for each statement and source value. If for the same statement and source value the same










 * target value is seen again (as determined through a cache hit), then the solver propagates the cached value but at the same time links










 * both target values with one another.










 *  










 * @author Johannes Lerch










 */










public class JoinHandlingNodesIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 public JoinHandlingNodesIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 super(ifdsProblem);










 }





















 protected final Map<CacheEntry, JoinHandlingNode<D>> cache = Maps.newHashMap();










 










 @Override










 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 CacheEntry currentCacheEntry = new CacheEntry(target, sourceVal.createJoinKey(), targetVal.createJoinKey());





















 boolean propagate = false;










 synchronized (this) {










 if (cache.containsKey(currentCacheEntry)) {










 JoinHandlingNode<D> existingTargetVal = cache.get(currentCacheEntry);










 if(!existingTargetVal.handleJoin(targetVal)) {










 propagate = true;










 }










 } else {










 cache.put(currentCacheEntry, targetVal);










 propagate = true;










 }










 }





















 if (propagate)










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 










 };










 










 










 private class CacheEntry {










 private N n;










 private JoinKey sourceKey;










 private JoinKey targetKey;





















 public CacheEntry(N n, JoinKey sourceKey, JoinKey targetKey) {










 super();










 this.n = n;










 this.sourceKey = sourceKey;










 this.targetKey = targetKey;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((sourceKey == null) ? 0 : sourceKey.hashCode());










 result = prime * result + ((targetKey == null) ? 0 : targetKey.hashCode());










 result = prime * result + ((n == null) ? 0 : n.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings({ "unchecked" })










 CacheEntry other = (CacheEntry) obj;










 if (sourceKey == null) {










 if (other.sourceKey != null)










 return false;










 } else if (!sourceKey.equals(other.sourceKey))










 return false;










 if (targetKey == null) {










 if (other.targetKey != null)










 return false;










 } else if (!targetKey.equals(other.targetKey))










 return false;










 if (n == null) {










 if (other.n != null)










 return false;










 } else if (!n.equals(other.n))










 return false;










 return true;










 }










 } 










 
































}














src/heros/solver/LinkedNode.java








View file @ ddde660b






......@@ -13,7 +13,10 @@ package heros.solver;









/**










 * A data-flow fact that can be linked with other equal facts.










 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










 * 










 * @deprecated Use {@link JoinHandlingNode} instead.










 */










@Deprecated










public interface LinkedNode<D> {










 /**










	 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged



......














src/heros/solver/PathTrackingIFDSSolver.java








View file @ ddde660b






......@@ -25,7 +25,9 @@ import com.google.common.collect.Maps;









 * both target values with one another.










 *  










 * @author Eric Bodden










 * @deprecated Use {@link JoinHandlingNodesIFDSSolver} instead.










 */










@Deprecated










public class PathTrackingIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 public PathTrackingIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {



......














test/heros/utilities/Fact.java








View file @ ddde660b






......@@ -10,9 +10,11 @@









 ******************************************************************************/










package heros.utilities;





















import heros.solver.JoinHandlingNode;










import heros.solver.LinkedNode;










import heros.solver.JoinHandlingNode.JoinKey;





















public class Fact implements LinkedNode<Fact> {










public class Fact implements JoinHandlingNode<Fact> {





















 public final String name;










 



......@@ -51,12 +53,37 @@ public class Fact implements LinkedNode<Fact> {









 }





















 @Override










 public void addNeighbor(Fact originalAbstraction) {










 public void setCallingContext(Fact callingContext) {










 










 }





















 @Override










 public void setCallingContext(Fact callingContext) {










 










 public heros.solver.JoinHandlingNode.JoinKey createJoinKey() {










 return new TestJoinKey();










 }





















 @Override










 public boolean handleJoin(Fact joiningNode) {










 return true;










 }





















 private class TestJoinKey extends JoinKey {





















 private Fact getFact() {










 return Fact.this;










 }





















 @Override










 public boolean equals(Object obj) {










 if (obj instanceof TestJoinKey) {










 return getFact().equals(((TestJoinKey) obj).getFact());










 }










 throw new IllegalArgumentException();










 }





















 @Override










 public int hashCode() {










 return Fact.this.hashCode();










 }










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
ddde660b


authored
Sep 26, 2014
by


Johannes Lerch



Browse files



Commit
ddde660b


authored
Sep 26, 2014
by


Johannes Lerch

ddde660bauthoredbyJohannes Lerch

Introducing more abstract/flexible version of PathTrackingIFDSSolver






parent
a0c1ce8b
















parent
a0c1ce8b





parent












Changes
7
7


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/solver/BiDiIFDSSolver.java








View file @ ddde660b






......@@ -49,7 +49,7 @@ import com.google.common.collect.Maps;









 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;



......@@ -158,7 +158,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 protected class SingleDirectionSolver extends JoinHandlingNodesIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());



......@@ -262,7 +262,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements LinkedNode<AbstractionWithSourceStmt> {










 public class AbstractionWithSourceStmt implements JoinHandlingNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;



......@@ -321,13 +321,18 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 }





















 @Override










 public void addNeighbor(AbstractionWithSourceStmt originalAbstraction) {










 getAbstraction().addNeighbor(originalAbstraction.getAbstraction());










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 public boolean handleJoin(BiDiIFDSSolver<N, D, M, I>.AbstractionWithSourceStmt joiningNode) {










 return abstraction.handleJoin(joiningNode.getAbstraction());










 }





















 @Override










 public heros.solver.JoinHandlingNode.JoinKey createJoinKey() {










 return new JoinKey(source, abstraction.createJoinKey());










 }





















 }



......














src/heros/solver/IDESolver.java








View file @ ddde660b






......@@ -521,6 +521,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 if (d5 instanceof LinkedNode) {










 ((LinkedNode<D>) d5).setCallingContext(d4);










 }










 if(d5 instanceof JoinHandlingNode) {










 ((JoinHandlingNode<D>) d5).setCallingContext(d4);










 } 










 return d5;










 }










 



......














src/heros/solver/JoinHandlingNode.java



0 → 100644







View file @ ddde660b













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import java.util.Arrays;
































public interface JoinHandlingNode<T> {





















 /**










	 * 










	 * @param joiningNode the node abstraction that was propagated to the same target after {@code this} node.










	 * @return true if the join could be handled and no further propagation of the {@code joiningNode} is necessary, otherwise false meaning 










	 * the node should be propagated by the solver.










	 */










 public boolean handleJoin(T joiningNode);










 










 /**










	 * 










	 * @return a JoinKey object used to identify which node abstractions require manual join handling. 










	 * For nodes with {@code equal} JoinKey instances {@link #handleJoin(JoinHandlingNode)} will be called.










	 */










 public JoinKey createJoinKey();










 










 public void setCallingContext(T callingContext);










 










 public static class JoinKey {










 private Object[] elements;





















 /**










		 * 










		 * @param elements Passed elements must be immutable with respect to their hashCode and equals implementations.










		 */










 public JoinKey(Object... elements) {










 this.elements = elements;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + Arrays.hashCode(elements);










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 JoinKey other = (JoinKey) obj;










 if (!Arrays.equals(elements, other.elements))










 return false;










 return true;










 }










 }










}














src/heros/solver/JoinHandlingNodesIFDSSolver.java



0 → 100644







View file @ ddde660b













/*******************************************************************************










 * Copyright (c) 2013Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.JoinHandlingNode.JoinKey;





















import java.util.Map;





















import com.google.common.collect.Maps;





















/**










 * An {@link IFDSSolver} that tracks paths for reporting. To do so, it requires that data-flow abstractions implement the LinkedNode interface.










 * The solver implements a cache of data-flow facts for each statement and source value. If for the same statement and source value the same










 * target value is seen again (as determined through a cache hit), then the solver propagates the cached value but at the same time links










 * both target values with one another.










 *  










 * @author Johannes Lerch










 */










public class JoinHandlingNodesIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 public JoinHandlingNodesIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 super(ifdsProblem);










 }





















 protected final Map<CacheEntry, JoinHandlingNode<D>> cache = Maps.newHashMap();










 










 @Override










 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 CacheEntry currentCacheEntry = new CacheEntry(target, sourceVal.createJoinKey(), targetVal.createJoinKey());





















 boolean propagate = false;










 synchronized (this) {










 if (cache.containsKey(currentCacheEntry)) {










 JoinHandlingNode<D> existingTargetVal = cache.get(currentCacheEntry);










 if(!existingTargetVal.handleJoin(targetVal)) {










 propagate = true;










 }










 } else {










 cache.put(currentCacheEntry, targetVal);










 propagate = true;










 }










 }





















 if (propagate)










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 










 };










 










 










 private class CacheEntry {










 private N n;










 private JoinKey sourceKey;










 private JoinKey targetKey;





















 public CacheEntry(N n, JoinKey sourceKey, JoinKey targetKey) {










 super();










 this.n = n;










 this.sourceKey = sourceKey;










 this.targetKey = targetKey;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((sourceKey == null) ? 0 : sourceKey.hashCode());










 result = prime * result + ((targetKey == null) ? 0 : targetKey.hashCode());










 result = prime * result + ((n == null) ? 0 : n.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings({ "unchecked" })










 CacheEntry other = (CacheEntry) obj;










 if (sourceKey == null) {










 if (other.sourceKey != null)










 return false;










 } else if (!sourceKey.equals(other.sourceKey))










 return false;










 if (targetKey == null) {










 if (other.targetKey != null)










 return false;










 } else if (!targetKey.equals(other.targetKey))










 return false;










 if (n == null) {










 if (other.n != null)










 return false;










 } else if (!n.equals(other.n))










 return false;










 return true;










 }










 } 










 
































}














src/heros/solver/LinkedNode.java








View file @ ddde660b






......@@ -13,7 +13,10 @@ package heros.solver;









/**










 * A data-flow fact that can be linked with other equal facts.










 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










 * 










 * @deprecated Use {@link JoinHandlingNode} instead.










 */










@Deprecated










public interface LinkedNode<D> {










 /**










	 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged



......














src/heros/solver/PathTrackingIFDSSolver.java








View file @ ddde660b






......@@ -25,7 +25,9 @@ import com.google.common.collect.Maps;









 * both target values with one another.










 *  










 * @author Eric Bodden










 * @deprecated Use {@link JoinHandlingNodesIFDSSolver} instead.










 */










@Deprecated










public class PathTrackingIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 public PathTrackingIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {



......














test/heros/utilities/Fact.java








View file @ ddde660b






......@@ -10,9 +10,11 @@









 ******************************************************************************/










package heros.utilities;





















import heros.solver.JoinHandlingNode;










import heros.solver.LinkedNode;










import heros.solver.JoinHandlingNode.JoinKey;





















public class Fact implements LinkedNode<Fact> {










public class Fact implements JoinHandlingNode<Fact> {





















 public final String name;










 



......@@ -51,12 +53,37 @@ public class Fact implements LinkedNode<Fact> {









 }





















 @Override










 public void addNeighbor(Fact originalAbstraction) {










 public void setCallingContext(Fact callingContext) {










 










 }





















 @Override










 public void setCallingContext(Fact callingContext) {










 










 public heros.solver.JoinHandlingNode.JoinKey createJoinKey() {










 return new TestJoinKey();










 }





















 @Override










 public boolean handleJoin(Fact joiningNode) {










 return true;










 }





















 private class TestJoinKey extends JoinKey {





















 private Fact getFact() {










 return Fact.this;










 }





















 @Override










 public boolean equals(Object obj) {










 if (obj instanceof TestJoinKey) {










 return getFact().equals(((TestJoinKey) obj).getFact());










 }










 throw new IllegalArgumentException();










 }





















 @Override










 public int hashCode() {










 return Fact.this.hashCode();










 }










 }










}














src/heros/solver/BiDiIFDSSolver.java








View file @ ddde660b






......@@ -49,7 +49,7 @@ import com.google.common.collect.Maps;









 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;



......@@ -158,7 +158,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 protected class SingleDirectionSolver extends JoinHandlingNodesIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());



......@@ -262,7 +262,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements LinkedNode<AbstractionWithSourceStmt> {










 public class AbstractionWithSourceStmt implements JoinHandlingNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;



......@@ -321,13 +321,18 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 }





















 @Override










 public void addNeighbor(AbstractionWithSourceStmt originalAbstraction) {










 getAbstraction().addNeighbor(originalAbstraction.getAbstraction());










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 public boolean handleJoin(BiDiIFDSSolver<N, D, M, I>.AbstractionWithSourceStmt joiningNode) {










 return abstraction.handleJoin(joiningNode.getAbstraction());










 }





















 @Override










 public heros.solver.JoinHandlingNode.JoinKey createJoinKey() {










 return new JoinKey(source, abstraction.createJoinKey());










 }





















 }



......












src/heros/solver/BiDiIFDSSolver.java








View file @ ddde660b








src/heros/solver/BiDiIFDSSolver.java










View file @ ddde660b


ddde660b



......@@ -49,7 +49,7 @@ import com.google.common.collect.Maps;









 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;



......@@ -158,7 +158,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 protected class SingleDirectionSolver extends JoinHandlingNodesIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());



......@@ -262,7 +262,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements LinkedNode<AbstractionWithSourceStmt> {










 public class AbstractionWithSourceStmt implements JoinHandlingNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;



......@@ -321,13 +321,18 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 }





















 @Override










 public void addNeighbor(AbstractionWithSourceStmt originalAbstraction) {










 getAbstraction().addNeighbor(originalAbstraction.getAbstraction());










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 public boolean handleJoin(BiDiIFDSSolver<N, D, M, I>.AbstractionWithSourceStmt joiningNode) {










 return abstraction.handleJoin(joiningNode.getAbstraction());










 }





















 @Override










 public heros.solver.JoinHandlingNode.JoinKey createJoinKey() {










 return new JoinKey(source, abstraction.createJoinKey());










 }





















 }



......






......@@ -49,7 +49,7 @@ import com.google.common.collect.Maps;









 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;



......@@ -158,7 +158,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 protected class SingleDirectionSolver extends JoinHandlingNodesIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());



......@@ -262,7 +262,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements LinkedNode<AbstractionWithSourceStmt> {










 public class AbstractionWithSourceStmt implements JoinHandlingNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;



......@@ -321,13 +321,18 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 }





















 @Override










 public void addNeighbor(AbstractionWithSourceStmt originalAbstraction) {










 getAbstraction().addNeighbor(originalAbstraction.getAbstraction());










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 public boolean handleJoin(BiDiIFDSSolver<N, D, M, I>.AbstractionWithSourceStmt joiningNode) {










 return abstraction.handleJoin(joiningNode.getAbstraction());










 }





















 @Override










 public heros.solver.JoinHandlingNode.JoinKey createJoinKey() {










 return new JoinKey(source, abstraction.createJoinKey());










 }





















 }



......


 * @param <M> see {@link IFDSSolver} * @param <M> see {@link IFDSSolver} * @param <I> see {@link IFDSSolver} * @param <I> see {@link IFDSSolver} */ */public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> {publicclassBiDiIFDSSolver<N,DextendsLinkedNodeLinked<D>,M,IextendsInterproceduralCFG<N,M>>{public class BiDiIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> {publicclassBiDiIFDSSolver<N,DextendsJoinHandlingNodeJoinHandling<D>,M,IextendsInterproceduralCFG<N,M>>{ private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;privatefinalIFDSTabulationProblem<N,AbstractionWithSourceStmt,M,I>forwardProblem; private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;privatefinalIFDSTabulationProblem<N,AbstractionWithSourceStmt,M,I>backwardProblem; /**/**	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.	 */	 */ protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {protectedclassSingleDirectionSolverextendsPathTrackingIFDSSolverPathTracking<N,AbstractionWithSourceStmt,M,I>{ protected class SingleDirectionSolver extends JoinHandlingNodesIFDSSolver<N, AbstractionWithSourceStmt, M, I> {protectedclassSingleDirectionSolverextendsJoinHandlingNodesIFDSSolverJoinHandlingNodes<N,AbstractionWithSourceStmt,M,I>{ private final String debugName;privatefinalStringdebugName; private SingleDirectionSolver otherSolver;privateSingleDirectionSolverotherSolver; private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());privateSet<LeakKey<N>>leakedSources=Collections.newSetFromMap(Maps.<LeakKey<N>,Boolean>newConcurrentMap());	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the	 * abstraction the source statement from which this fact originated. 	 * abstraction the source statement from which this fact originated. 	 */	 */ public class AbstractionWithSourceStmt implements LinkedNode<AbstractionWithSourceStmt> {publicclassAbstractionWithSourceStmtimplementsLinkedNodeLinked<AbstractionWithSourceStmt>{ public class AbstractionWithSourceStmt implements JoinHandlingNode<AbstractionWithSourceStmt> {publicclassAbstractionWithSourceStmtimplementsJoinHandlingNodeJoinHandling<AbstractionWithSourceStmt>{ protected final D abstraction;protectedfinalDabstraction; protected final N source;protectedfinalNsource; }} @Override@Override public void addNeighbor(AbstractionWithSourceStmt originalAbstraction) {publicvoidaddNeighboraddNeighbor(AbstractionWithSourceStmtoriginalAbstractionoriginalAbstraction){ getAbstraction().addNeighbor(originalAbstraction.getAbstraction());getAbstractiongetA().().addNeighboraddNeighbor((originalAbstractionoriginalAbstraction.getAbstraction()); public void setCallingContext(AbstractionWithSourceStmt callingContext) {publicvoidsetCallingContextsetCallingContext(AbstractionWithSourceStmtcallingContextcallingContext){ abstraction.setCallingContext(callingContext.getAbstraction());abstractiona..setCallingContextsetCallingContext((callingContextcallingContext.getAbstraction()); }} @Override@Override public void setCallingContext(AbstractionWithSourceStmt callingContext) {publicvoidsetCallingContext(AbstractionWithSourceStmtcallingContext){ abstraction.setCallingContext(callingContext.getAbstraction());abstraction.setCallingContext(callingContext.getAbstraction()); public boolean handleJoin(BiDiIFDSSolver<N, D, M, I>.AbstractionWithSourceStmt joiningNode) {publicbooleanhandleJoin(BiDiIFDSSolver<N,D,M,I>.AbstractionWithSourceStmtjoiningNode){ return abstraction.handleJoin(joiningNode.getAbstraction());returnabstraction.handleJoin(joiningNode.getAbstraction()); }} @Override@Override public heros.solver.JoinHandlingNode.JoinKey createJoinKey() {publicheros.solver.JoinHandlingNode.JoinKeycreateJoinKey(){ return new JoinKey(source, abstraction.createJoinKey());returnnewJoinKey(source,abstraction.createJoinKey()); }} }}








src/heros/solver/IDESolver.java








View file @ ddde660b






......@@ -521,6 +521,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 if (d5 instanceof LinkedNode) {










 ((LinkedNode<D>) d5).setCallingContext(d4);










 }










 if(d5 instanceof JoinHandlingNode) {










 ((JoinHandlingNode<D>) d5).setCallingContext(d4);










 } 










 return d5;










 }










 



......












src/heros/solver/IDESolver.java








View file @ ddde660b








src/heros/solver/IDESolver.java










View file @ ddde660b


ddde660b



......@@ -521,6 +521,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 if (d5 instanceof LinkedNode) {










 ((LinkedNode<D>) d5).setCallingContext(d4);










 }










 if(d5 instanceof JoinHandlingNode) {










 ((JoinHandlingNode<D>) d5).setCallingContext(d4);










 } 










 return d5;










 }










 



......






......@@ -521,6 +521,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 if (d5 instanceof LinkedNode) {










 ((LinkedNode<D>) d5).setCallingContext(d4);










 }










 if(d5 instanceof JoinHandlingNode) {










 ((JoinHandlingNode<D>) d5).setCallingContext(d4);










 } 










 return d5;










 }










 



......


 if (d5 instanceof LinkedNode) {if(d5instanceofLinkedNode){ ((LinkedNode<D>) d5).setCallingContext(d4);((LinkedNode<D>)d5).setCallingContext(d4); }} if(d5 instanceof JoinHandlingNode) {if(d5instanceofJoinHandlingNode){ ((JoinHandlingNode<D>) d5).setCallingContext(d4);((JoinHandlingNode<D>)d5).setCallingContext(d4); } } return d5;returnd5; }} 








src/heros/solver/JoinHandlingNode.java



0 → 100644







View file @ ddde660b













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import java.util.Arrays;
































public interface JoinHandlingNode<T> {





















 /**










	 * 










	 * @param joiningNode the node abstraction that was propagated to the same target after {@code this} node.










	 * @return true if the join could be handled and no further propagation of the {@code joiningNode} is necessary, otherwise false meaning 










	 * the node should be propagated by the solver.










	 */










 public boolean handleJoin(T joiningNode);










 










 /**










	 * 










	 * @return a JoinKey object used to identify which node abstractions require manual join handling. 










	 * For nodes with {@code equal} JoinKey instances {@link #handleJoin(JoinHandlingNode)} will be called.










	 */










 public JoinKey createJoinKey();










 










 public void setCallingContext(T callingContext);










 










 public static class JoinKey {










 private Object[] elements;





















 /**










		 * 










		 * @param elements Passed elements must be immutable with respect to their hashCode and equals implementations.










		 */










 public JoinKey(Object... elements) {










 this.elements = elements;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + Arrays.hashCode(elements);










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 JoinKey other = (JoinKey) obj;










 if (!Arrays.equals(elements, other.elements))










 return false;










 return true;










 }










 }










}












src/heros/solver/JoinHandlingNode.java



0 → 100644







View file @ ddde660b








src/heros/solver/JoinHandlingNode.java



0 → 100644









View file @ ddde660b


ddde660b










/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import java.util.Arrays;
































public interface JoinHandlingNode<T> {





















 /**










	 * 










	 * @param joiningNode the node abstraction that was propagated to the same target after {@code this} node.










	 * @return true if the join could be handled and no further propagation of the {@code joiningNode} is necessary, otherwise false meaning 










	 * the node should be propagated by the solver.










	 */










 public boolean handleJoin(T joiningNode);










 










 /**










	 * 










	 * @return a JoinKey object used to identify which node abstractions require manual join handling. 










	 * For nodes with {@code equal} JoinKey instances {@link #handleJoin(JoinHandlingNode)} will be called.










	 */










 public JoinKey createJoinKey();










 










 public void setCallingContext(T callingContext);










 










 public static class JoinKey {










 private Object[] elements;





















 /**










		 * 










		 * @param elements Passed elements must be immutable with respect to their hashCode and equals implementations.










		 */










 public JoinKey(Object... elements) {










 this.elements = elements;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + Arrays.hashCode(elements);










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 JoinKey other = (JoinKey) obj;










 if (!Arrays.equals(elements, other.elements))










 return false;










 return true;










 }










 }










}













/*******************************************************************************










 * Copyright (c) 2014 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import java.util.Arrays;
































public interface JoinHandlingNode<T> {





















 /**










	 * 










	 * @param joiningNode the node abstraction that was propagated to the same target after {@code this} node.










	 * @return true if the join could be handled and no further propagation of the {@code joiningNode} is necessary, otherwise false meaning 










	 * the node should be propagated by the solver.










	 */










 public boolean handleJoin(T joiningNode);










 










 /**










	 * 










	 * @return a JoinKey object used to identify which node abstractions require manual join handling. 










	 * For nodes with {@code equal} JoinKey instances {@link #handleJoin(JoinHandlingNode)} will be called.










	 */










 public JoinKey createJoinKey();










 










 public void setCallingContext(T callingContext);










 










 public static class JoinKey {










 private Object[] elements;





















 /**










		 * 










		 * @param elements Passed elements must be immutable with respect to their hashCode and equals implementations.










		 */










 public JoinKey(Object... elements) {










 this.elements = elements;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + Arrays.hashCode(elements);










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 JoinKey other = (JoinKey) obj;










 if (!Arrays.equals(elements, other.elements))










 return false;










 return true;










 }










 }










}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2014 Johannes Lerch. * Copyright (c) 2014 Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.solver;packageheros.solver;import java.util.Arrays;importjava.util.Arrays;public interface JoinHandlingNode<T> {publicinterfaceJoinHandlingNode<T>{ /**/**	 * 	 * 	 * @param joiningNode the node abstraction that was propagated to the same target after {@code this} node.	 * @param joiningNode the node abstraction that was propagated to the same target after {@code this} node.	 * @return true if the join could be handled and no further propagation of the {@code joiningNode} is necessary, otherwise false meaning 	 * @return true if the join could be handled and no further propagation of the {@code joiningNode} is necessary, otherwise false meaning 	 * the node should be propagated by the solver.	 * the node should be propagated by the solver.	 */	 */ public boolean handleJoin(T joiningNode);publicbooleanhandleJoin(TjoiningNode);  /**/**	 * 	 * 	 * @return a JoinKey object used to identify which node abstractions require manual join handling. 	 * @return a JoinKey object used to identify which node abstractions require manual join handling. 	 * For nodes with {@code equal} JoinKey instances {@link #handleJoin(JoinHandlingNode)} will be called.	 * For nodes with {@code equal} JoinKey instances {@link #handleJoin(JoinHandlingNode)} will be called.	 */	 */ public JoinKey createJoinKey();publicJoinKeycreateJoinKey();  public void setCallingContext(T callingContext);publicvoidsetCallingContext(TcallingContext);  public static class JoinKey {publicstaticclassJoinKey{ private Object[] elements;privateObject[]elements; /**/**		 * 		 * 		 * @param elements Passed elements must be immutable with respect to their hashCode and equals implementations.		 * @param elements Passed elements must be immutable with respect to their hashCode and equals implementations.		 */		 */ public JoinKey(Object... elements) {publicJoinKey(Object...elements){ this.elements = elements;this.elements=elements; }} @Override@Override public int hashCode() {publicinthashCode(){ final int prime = 31;finalintprime=31; int result = 1;intresult=1; result = prime * result + Arrays.hashCode(elements);result=prime*result+Arrays.hashCode(elements); return result;returnresult; }} @Override@Override public boolean equals(Object obj) {publicbooleanequals(Objectobj){ if (this == obj)if(this==obj) return true;returntrue; if (obj == null)if(obj==null) return false;returnfalse; if (getClass() != obj.getClass())if(getClass()!=obj.getClass()) return false;returnfalse; JoinKey other = (JoinKey) obj;JoinKeyother=(JoinKey)obj; if (!Arrays.equals(elements, other.elements))if(!Arrays.equals(elements,other.elements)) return false;returnfalse; return true;returntrue; }} }}}}








src/heros/solver/JoinHandlingNodesIFDSSolver.java



0 → 100644







View file @ ddde660b













/*******************************************************************************










 * Copyright (c) 2013Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.JoinHandlingNode.JoinKey;





















import java.util.Map;





















import com.google.common.collect.Maps;





















/**










 * An {@link IFDSSolver} that tracks paths for reporting. To do so, it requires that data-flow abstractions implement the LinkedNode interface.










 * The solver implements a cache of data-flow facts for each statement and source value. If for the same statement and source value the same










 * target value is seen again (as determined through a cache hit), then the solver propagates the cached value but at the same time links










 * both target values with one another.










 *  










 * @author Johannes Lerch










 */










public class JoinHandlingNodesIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 public JoinHandlingNodesIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 super(ifdsProblem);










 }





















 protected final Map<CacheEntry, JoinHandlingNode<D>> cache = Maps.newHashMap();










 










 @Override










 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 CacheEntry currentCacheEntry = new CacheEntry(target, sourceVal.createJoinKey(), targetVal.createJoinKey());





















 boolean propagate = false;










 synchronized (this) {










 if (cache.containsKey(currentCacheEntry)) {










 JoinHandlingNode<D> existingTargetVal = cache.get(currentCacheEntry);










 if(!existingTargetVal.handleJoin(targetVal)) {










 propagate = true;










 }










 } else {










 cache.put(currentCacheEntry, targetVal);










 propagate = true;










 }










 }





















 if (propagate)










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 










 };










 










 










 private class CacheEntry {










 private N n;










 private JoinKey sourceKey;










 private JoinKey targetKey;





















 public CacheEntry(N n, JoinKey sourceKey, JoinKey targetKey) {










 super();










 this.n = n;










 this.sourceKey = sourceKey;










 this.targetKey = targetKey;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((sourceKey == null) ? 0 : sourceKey.hashCode());










 result = prime * result + ((targetKey == null) ? 0 : targetKey.hashCode());










 result = prime * result + ((n == null) ? 0 : n.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings({ "unchecked" })










 CacheEntry other = (CacheEntry) obj;










 if (sourceKey == null) {










 if (other.sourceKey != null)










 return false;










 } else if (!sourceKey.equals(other.sourceKey))










 return false;










 if (targetKey == null) {










 if (other.targetKey != null)










 return false;










 } else if (!targetKey.equals(other.targetKey))










 return false;










 if (n == null) {










 if (other.n != null)










 return false;










 } else if (!n.equals(other.n))










 return false;










 return true;










 }










 } 










 
































}












src/heros/solver/JoinHandlingNodesIFDSSolver.java



0 → 100644







View file @ ddde660b








src/heros/solver/JoinHandlingNodesIFDSSolver.java



0 → 100644









View file @ ddde660b


ddde660b










/*******************************************************************************










 * Copyright (c) 2013Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.JoinHandlingNode.JoinKey;





















import java.util.Map;





















import com.google.common.collect.Maps;





















/**










 * An {@link IFDSSolver} that tracks paths for reporting. To do so, it requires that data-flow abstractions implement the LinkedNode interface.










 * The solver implements a cache of data-flow facts for each statement and source value. If for the same statement and source value the same










 * target value is seen again (as determined through a cache hit), then the solver propagates the cached value but at the same time links










 * both target values with one another.










 *  










 * @author Johannes Lerch










 */










public class JoinHandlingNodesIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 public JoinHandlingNodesIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 super(ifdsProblem);










 }





















 protected final Map<CacheEntry, JoinHandlingNode<D>> cache = Maps.newHashMap();










 










 @Override










 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 CacheEntry currentCacheEntry = new CacheEntry(target, sourceVal.createJoinKey(), targetVal.createJoinKey());





















 boolean propagate = false;










 synchronized (this) {










 if (cache.containsKey(currentCacheEntry)) {










 JoinHandlingNode<D> existingTargetVal = cache.get(currentCacheEntry);










 if(!existingTargetVal.handleJoin(targetVal)) {










 propagate = true;










 }










 } else {










 cache.put(currentCacheEntry, targetVal);










 propagate = true;










 }










 }





















 if (propagate)










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 










 };










 










 










 private class CacheEntry {










 private N n;










 private JoinKey sourceKey;










 private JoinKey targetKey;





















 public CacheEntry(N n, JoinKey sourceKey, JoinKey targetKey) {










 super();










 this.n = n;










 this.sourceKey = sourceKey;










 this.targetKey = targetKey;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((sourceKey == null) ? 0 : sourceKey.hashCode());










 result = prime * result + ((targetKey == null) ? 0 : targetKey.hashCode());










 result = prime * result + ((n == null) ? 0 : n.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings({ "unchecked" })










 CacheEntry other = (CacheEntry) obj;










 if (sourceKey == null) {










 if (other.sourceKey != null)










 return false;










 } else if (!sourceKey.equals(other.sourceKey))










 return false;










 if (targetKey == null) {










 if (other.targetKey != null)










 return false;










 } else if (!targetKey.equals(other.targetKey))










 return false;










 if (n == null) {










 if (other.n != null)










 return false;










 } else if (!n.equals(other.n))










 return false;










 return true;










 }










 } 










 
































}













/*******************************************************************************










 * Copyright (c) 2013Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.JoinHandlingNode.JoinKey;





















import java.util.Map;





















import com.google.common.collect.Maps;





















/**










 * An {@link IFDSSolver} that tracks paths for reporting. To do so, it requires that data-flow abstractions implement the LinkedNode interface.










 * The solver implements a cache of data-flow facts for each statement and source value. If for the same statement and source value the same










 * target value is seen again (as determined through a cache hit), then the solver propagates the cached value but at the same time links










 * both target values with one another.










 *  










 * @author Johannes Lerch










 */










public class JoinHandlingNodesIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 public JoinHandlingNodesIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 super(ifdsProblem);










 }





















 protected final Map<CacheEntry, JoinHandlingNode<D>> cache = Maps.newHashMap();










 










 @Override










 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 CacheEntry currentCacheEntry = new CacheEntry(target, sourceVal.createJoinKey(), targetVal.createJoinKey());





















 boolean propagate = false;










 synchronized (this) {










 if (cache.containsKey(currentCacheEntry)) {










 JoinHandlingNode<D> existingTargetVal = cache.get(currentCacheEntry);










 if(!existingTargetVal.handleJoin(targetVal)) {










 propagate = true;










 }










 } else {










 cache.put(currentCacheEntry, targetVal);










 propagate = true;










 }










 }





















 if (propagate)










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 










 };










 










 










 private class CacheEntry {










 private N n;










 private JoinKey sourceKey;










 private JoinKey targetKey;





















 public CacheEntry(N n, JoinKey sourceKey, JoinKey targetKey) {










 super();










 this.n = n;










 this.sourceKey = sourceKey;










 this.targetKey = targetKey;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((sourceKey == null) ? 0 : sourceKey.hashCode());










 result = prime * result + ((targetKey == null) ? 0 : targetKey.hashCode());










 result = prime * result + ((n == null) ? 0 : n.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings({ "unchecked" })










 CacheEntry other = (CacheEntry) obj;










 if (sourceKey == null) {










 if (other.sourceKey != null)










 return false;










 } else if (!sourceKey.equals(other.sourceKey))










 return false;










 if (targetKey == null) {










 if (other.targetKey != null)










 return false;










 } else if (!targetKey.equals(other.targetKey))










 return false;










 if (n == null) {










 if (other.n != null)










 return false;










 } else if (!n.equals(other.n))










 return false;










 return true;










 }










 } 










 
































}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2013Johannes Lerch. * Copyright (c) 2013Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.solver;packageheros.solver;import heros.EdgeFunction;importheros.EdgeFunction;import heros.IFDSTabulationProblem;importheros.IFDSTabulationProblem;import heros.InterproceduralCFG;importheros.InterproceduralCFG;import heros.solver.JoinHandlingNode.JoinKey;importheros.solver.JoinHandlingNode.JoinKey;import java.util.Map;importjava.util.Map;import com.google.common.collect.Maps;importcom.google.common.collect.Maps;/**/** * An {@link IFDSSolver} that tracks paths for reporting. To do so, it requires that data-flow abstractions implement the LinkedNode interface. * An {@link IFDSSolver} that tracks paths for reporting. To do so, it requires that data-flow abstractions implement the LinkedNode interface. * The solver implements a cache of data-flow facts for each statement and source value. If for the same statement and source value the same * The solver implements a cache of data-flow facts for each statement and source value. If for the same statement and source value the same * target value is seen again (as determined through a cache hit), then the solver propagates the cached value but at the same time links * target value is seen again (as determined through a cache hit), then the solver propagates the cached value but at the same time links * both target values with one another. * both target values with one another. *   *   * @author Johannes Lerch * @author Johannes Lerch */ */public class JoinHandlingNodesIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {publicclassJoinHandlingNodesIFDSSolver<N,DextendsJoinHandlingNode<D>,M,IextendsInterproceduralCFG<N,M>>extendsIFDSSolver<N,D,M,I>{ public JoinHandlingNodesIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {publicJoinHandlingNodesIFDSSolver(IFDSTabulationProblem<N,D,M,I>ifdsProblem){ super(ifdsProblem);super(ifdsProblem); }} protected final Map<CacheEntry, JoinHandlingNode<D>> cache = Maps.newHashMap();protectedfinalMap<CacheEntry,JoinHandlingNode<D>>cache=Maps.newHashMap();  @Override@Override protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {protectedvoidpropagate(DsourceVal,Ntarget,DtargetVal,EdgeFunction<IFDSSolver.BinaryDomain>f,NrelatedCallSite,booleanisUnbalancedReturn){ CacheEntry currentCacheEntry = new CacheEntry(target, sourceVal.createJoinKey(), targetVal.createJoinKey());CacheEntrycurrentCacheEntry=newCacheEntry(target,sourceVal.createJoinKey(),targetVal.createJoinKey()); boolean propagate = false;booleanpropagate=false; synchronized (this) {synchronized(this){ if (cache.containsKey(currentCacheEntry)) {if(cache.containsKey(currentCacheEntry)){ JoinHandlingNode<D> existingTargetVal = cache.get(currentCacheEntry);JoinHandlingNode<D>existingTargetVal=cache.get(currentCacheEntry); if(!existingTargetVal.handleJoin(targetVal)) {if(!existingTargetVal.handleJoin(targetVal)){ propagate = true;propagate=true; }} } else {}else{ cache.put(currentCacheEntry, targetVal);cache.put(currentCacheEntry,targetVal); propagate = true;propagate=true; }} }} if (propagate)if(propagate) super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);super.propagate(sourceVal,target,targetVal,f,relatedCallSite,isUnbalancedReturn);  };};   private class CacheEntry {privateclassCacheEntry{ private N n;privateNn; private JoinKey sourceKey;privateJoinKeysourceKey; private JoinKey targetKey;privateJoinKeytargetKey; public CacheEntry(N n, JoinKey sourceKey, JoinKey targetKey) {publicCacheEntry(Nn,JoinKeysourceKey,JoinKeytargetKey){ super();super(); this.n = n;this.n=n; this.sourceKey = sourceKey;this.sourceKey=sourceKey; this.targetKey = targetKey;this.targetKey=targetKey; }} @Override@Override public int hashCode() {publicinthashCode(){ final int prime = 31;finalintprime=31; int result = 1;intresult=1; result = prime * result + ((sourceKey == null) ? 0 : sourceKey.hashCode());result=prime*result+((sourceKey==null)?0:sourceKey.hashCode()); result = prime * result + ((targetKey == null) ? 0 : targetKey.hashCode());result=prime*result+((targetKey==null)?0:targetKey.hashCode()); result = prime * result + ((n == null) ? 0 : n.hashCode());result=prime*result+((n==null)?0:n.hashCode()); return result;returnresult; }} @Override@Override public boolean equals(Object obj) {publicbooleanequals(Objectobj){ if (this == obj)if(this==obj) return true;returntrue; if (obj == null)if(obj==null) return false;returnfalse; if (getClass() != obj.getClass())if(getClass()!=obj.getClass()) return false;returnfalse; @SuppressWarnings({ "unchecked" })@SuppressWarnings({"unchecked"}) CacheEntry other = (CacheEntry) obj;CacheEntryother=(CacheEntry)obj; if (sourceKey == null) {if(sourceKey==null){ if (other.sourceKey != null)if(other.sourceKey!=null) return false;returnfalse; } else if (!sourceKey.equals(other.sourceKey))}elseif(!sourceKey.equals(other.sourceKey)) return false;returnfalse; if (targetKey == null) {if(targetKey==null){ if (other.targetKey != null)if(other.targetKey!=null) return false;returnfalse; } else if (!targetKey.equals(other.targetKey))}elseif(!targetKey.equals(other.targetKey)) return false;returnfalse; if (n == null) {if(n==null){ if (other.n != null)if(other.n!=null) return false;returnfalse; } else if (!n.equals(other.n))}elseif(!n.equals(other.n)) return false;returnfalse; return true;returntrue; }} } } }}








src/heros/solver/LinkedNode.java








View file @ ddde660b






......@@ -13,7 +13,10 @@ package heros.solver;









/**










 * A data-flow fact that can be linked with other equal facts.










 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










 * 










 * @deprecated Use {@link JoinHandlingNode} instead.










 */










@Deprecated










public interface LinkedNode<D> {










 /**










	 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged



......












src/heros/solver/LinkedNode.java








View file @ ddde660b








src/heros/solver/LinkedNode.java










View file @ ddde660b


ddde660b



......@@ -13,7 +13,10 @@ package heros.solver;









/**










 * A data-flow fact that can be linked with other equal facts.










 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










 * 










 * @deprecated Use {@link JoinHandlingNode} instead.










 */










@Deprecated










public interface LinkedNode<D> {










 /**










	 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged



......






......@@ -13,7 +13,10 @@ package heros.solver;









/**










 * A data-flow fact that can be linked with other equal facts.










 * Equality and hash-code operations must <i>not</i> take the linking data structures into account!










 * 










 * @deprecated Use {@link JoinHandlingNode} instead.










 */










@Deprecated










public interface LinkedNode<D> {










 /**










	 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged



......


/**/** * A data-flow fact that can be linked with other equal facts. * A data-flow fact that can be linked with other equal facts. * Equality and hash-code operations must <i>not</i> take the linking data structures into account! * Equality and hash-code operations must <i>not</i> take the linking data structures into account! *  *  * @deprecated Use {@link JoinHandlingNode} instead. * @deprecated Use {@link JoinHandlingNode} instead. */ */@Deprecated@Deprecatedpublic interface LinkedNode<D> {publicinterfaceLinkedNode<D>{ /**/**	 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged	 * Links this node to a neighbor node, i.e., to an abstraction that would have been merged








src/heros/solver/PathTrackingIFDSSolver.java








View file @ ddde660b






......@@ -25,7 +25,9 @@ import com.google.common.collect.Maps;









 * both target values with one another.










 *  










 * @author Eric Bodden










 * @deprecated Use {@link JoinHandlingNodesIFDSSolver} instead.










 */










@Deprecated










public class PathTrackingIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 public PathTrackingIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {



......












src/heros/solver/PathTrackingIFDSSolver.java








View file @ ddde660b








src/heros/solver/PathTrackingIFDSSolver.java










View file @ ddde660b


ddde660b



......@@ -25,7 +25,9 @@ import com.google.common.collect.Maps;









 * both target values with one another.










 *  










 * @author Eric Bodden










 * @deprecated Use {@link JoinHandlingNodesIFDSSolver} instead.










 */










@Deprecated










public class PathTrackingIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 public PathTrackingIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {



......






......@@ -25,7 +25,9 @@ import com.google.common.collect.Maps;









 * both target values with one another.










 *  










 * @author Eric Bodden










 * @deprecated Use {@link JoinHandlingNodesIFDSSolver} instead.










 */










@Deprecated










public class PathTrackingIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {





















 public PathTrackingIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {



......


 * both target values with one another. * both target values with one another. *   *   * @author Eric Bodden * @author Eric Bodden * @deprecated Use {@link JoinHandlingNodesIFDSSolver} instead. * @deprecated Use {@link JoinHandlingNodesIFDSSolver} instead. */ */@Deprecated@Deprecatedpublic class PathTrackingIFDSSolver<N, D extends LinkedNode<D>, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, D, M, I> {publicclassPathTrackingIFDSSolver<N,DextendsLinkedNode<D>,M,IextendsInterproceduralCFG<N,M>>extendsIFDSSolver<N,D,M,I>{ public PathTrackingIFDSSolver(IFDSTabulationProblem<N, D, M, I> ifdsProblem) {publicPathTrackingIFDSSolver(IFDSTabulationProblem<N,D,M,I>ifdsProblem){








test/heros/utilities/Fact.java








View file @ ddde660b






......@@ -10,9 +10,11 @@









 ******************************************************************************/










package heros.utilities;





















import heros.solver.JoinHandlingNode;










import heros.solver.LinkedNode;










import heros.solver.JoinHandlingNode.JoinKey;





















public class Fact implements LinkedNode<Fact> {










public class Fact implements JoinHandlingNode<Fact> {





















 public final String name;










 



......@@ -51,12 +53,37 @@ public class Fact implements LinkedNode<Fact> {









 }





















 @Override










 public void addNeighbor(Fact originalAbstraction) {










 public void setCallingContext(Fact callingContext) {










 










 }





















 @Override










 public void setCallingContext(Fact callingContext) {










 










 public heros.solver.JoinHandlingNode.JoinKey createJoinKey() {










 return new TestJoinKey();










 }





















 @Override










 public boolean handleJoin(Fact joiningNode) {










 return true;










 }





















 private class TestJoinKey extends JoinKey {





















 private Fact getFact() {










 return Fact.this;










 }





















 @Override










 public boolean equals(Object obj) {










 if (obj instanceof TestJoinKey) {










 return getFact().equals(((TestJoinKey) obj).getFact());










 }










 throw new IllegalArgumentException();










 }





















 @Override










 public int hashCode() {










 return Fact.this.hashCode();










 }










 }










}












test/heros/utilities/Fact.java








View file @ ddde660b








test/heros/utilities/Fact.java










View file @ ddde660b


ddde660b



......@@ -10,9 +10,11 @@









 ******************************************************************************/










package heros.utilities;





















import heros.solver.JoinHandlingNode;










import heros.solver.LinkedNode;










import heros.solver.JoinHandlingNode.JoinKey;





















public class Fact implements LinkedNode<Fact> {










public class Fact implements JoinHandlingNode<Fact> {





















 public final String name;










 



......@@ -51,12 +53,37 @@ public class Fact implements LinkedNode<Fact> {









 }





















 @Override










 public void addNeighbor(Fact originalAbstraction) {










 public void setCallingContext(Fact callingContext) {










 










 }





















 @Override










 public void setCallingContext(Fact callingContext) {










 










 public heros.solver.JoinHandlingNode.JoinKey createJoinKey() {










 return new TestJoinKey();










 }





















 @Override










 public boolean handleJoin(Fact joiningNode) {










 return true;










 }





















 private class TestJoinKey extends JoinKey {





















 private Fact getFact() {










 return Fact.this;










 }





















 @Override










 public boolean equals(Object obj) {










 if (obj instanceof TestJoinKey) {










 return getFact().equals(((TestJoinKey) obj).getFact());










 }










 throw new IllegalArgumentException();










 }





















 @Override










 public int hashCode() {










 return Fact.this.hashCode();










 }










 }










}






......@@ -10,9 +10,11 @@









 ******************************************************************************/










package heros.utilities;





















import heros.solver.JoinHandlingNode;










import heros.solver.LinkedNode;










import heros.solver.JoinHandlingNode.JoinKey;





















public class Fact implements LinkedNode<Fact> {










public class Fact implements JoinHandlingNode<Fact> {





















 public final String name;










 



......@@ -51,12 +53,37 @@ public class Fact implements LinkedNode<Fact> {









 }





















 @Override










 public void addNeighbor(Fact originalAbstraction) {










 public void setCallingContext(Fact callingContext) {










 










 }





















 @Override










 public void setCallingContext(Fact callingContext) {










 










 public heros.solver.JoinHandlingNode.JoinKey createJoinKey() {










 return new TestJoinKey();










 }





















 @Override










 public boolean handleJoin(Fact joiningNode) {










 return true;










 }





















 private class TestJoinKey extends JoinKey {





















 private Fact getFact() {










 return Fact.this;










 }





















 @Override










 public boolean equals(Object obj) {










 if (obj instanceof TestJoinKey) {










 return getFact().equals(((TestJoinKey) obj).getFact());










 }










 throw new IllegalArgumentException();










 }





















 @Override










 public int hashCode() {










 return Fact.this.hashCode();










 }










 }










}


 ******************************************************************************/ ******************************************************************************/package heros.utilities;packageheros.utilities;import heros.solver.JoinHandlingNode;importheros.solver.JoinHandlingNode;import heros.solver.LinkedNode;importheros.solver.LinkedNode;import heros.solver.JoinHandlingNode.JoinKey;importheros.solver.JoinHandlingNode.JoinKey;public class Fact implements LinkedNode<Fact> {publicclassFactimplementsLinkedNodeLinked<Fact>{public class Fact implements JoinHandlingNode<Fact> {publicclassFactimplementsJoinHandlingNodeJoinHandling<Fact>{ public final String name;publicfinalStringname;  }} @Override@Override public void addNeighbor(Fact originalAbstraction) {publicvoidaddNeighboraddNeighbor((FactFact originalAbstractionoriginalAbstraction){ public void setCallingContext(Fact callingContext) {publicvoidsetCallingContextsetCallingContext((FactFact callingContextcallingContext){  }} @Override@Override public void setCallingContext(Fact callingContext) {publicvoidsetCallingContext(FactcallingContext){  public heros.solver.JoinHandlingNode.JoinKey createJoinKey() {publicheros.solver.JoinHandlingNode.JoinKeycreateJoinKey(){ return new TestJoinKey();returnnewTestJoinKey(); }} @Override@Override public boolean handleJoin(Fact joiningNode) {publicbooleanhandleJoin(FactjoiningNode){ return true;returntrue; }} private class TestJoinKey extends JoinKey {privateclassTestJoinKeyextendsJoinKey{ private Fact getFact() {privateFactgetFact(){ return Fact.this;returnFact.this; }} @Override@Override public boolean equals(Object obj) {publicbooleanequals(Objectobj){ if (obj instanceof TestJoinKey) {if(objinstanceofTestJoinKey){ return getFact().equals(((TestJoinKey) obj).getFact());returngetFact().equals(((TestJoinKey)obj).getFact()); }} throw new IllegalArgumentException();thrownewIllegalArgumentException(); }} @Override@Override public int hashCode() {publicinthashCode(){ return Fact.this.hashCode();returnFact.this.hashCode(); }} }}}}









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






