



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

6016a868















Commit
6016a868


authored
Jun 18, 2014
by


Johannes Lerch



Browse files




Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver







parent
40ad6af0













Changes
3




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ 6016a868






......@@ -16,14 +16,18 @@ import heros.FlowFunctions;









import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import com.google.common.collect.Maps;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.



......@@ -92,9 +96,9 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>>();










 private Set<N> leakedSources = Collections.newSetFromMap(Maps.<N, Boolean>newConcurrentMap());










 private ConcurrentMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);



......@@ -114,12 +118,19 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt>>();










 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);










 Set<PathEdge<N,AbstractionWithSourceStmt>> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PathEdge<N,AbstractionWithSourceStmt>, Boolean>newConcurrentMap()); 










 Set<PathEdge<N,AbstractionWithSourceStmt>> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 super.processExit(edge);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 } else {



......@@ -162,10 +173,12 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(pausedEdges.remove(pausedEdge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 }










 }










 pausedPathEdges.remove(sourceStmt);










 }



......














src/heros/solver/CountingThreadPoolExecutor.java








View file @ 6016a868






......@@ -28,7 +28,7 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 protected final CountLatch numRunningTasks = new CountLatch(0);










 










 protected Throwable exception = null;










 protected volatile Throwable exception = null;





















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,










 BlockingQueue<Runnable> workQueue) {



......@@ -49,14 +49,17 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {









 










 @Override










 protected void afterExecute(Runnable r, Throwable t) {










 numRunningTasks.decrement();










 if(t!=null) {










 exception = t;










 logger.error("Worker thread execution failed: " + t.getMessage(), t);










 










 shutdownNow();










 numRunningTasks.decrement();










 numRunningTasks.resetAndInterrupt();










 }










 else {










 numRunningTasks.decrement();










 }










 super.afterExecute(r, t);










 }














......














test/heros/BiDiIFDSSolverTest.java








View file @ 6016a868






......@@ -72,7 +72,7 @@ public class BiDiIFDSSolverTest {









 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(flow("2")));










 exitStmt("z").expectArtificalFlow(kill("2")));










 










 backwardHelper.method("foo",










 startPoints("c"),



......@@ -82,7 +82,7 @@ public class BiDiIFDSSolverTest {









 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(flow("3")));










 exitStmt("x").expectArtificalFlow(kill("3")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }



......@@ -113,7 +113,7 @@ public class BiDiIFDSSolverTest {









 }










 










 @Test










 public void returnsOnlyOneDirection() {










 public void returnsOnlyOneDirectionAndStops() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),



......@@ -184,7 +184,7 @@ public class BiDiIFDSSolverTest {









 }





















 @Test










 public void dontUnpauseIfReturnFlowIsKilled() {










 public void dontResumeIfReturnFlowIsKilled() {










 forwardHelper.method("foo",










 startPoints(), 










 normalStmt("a").succ("b", flow("0", "1")),



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

6016a868















Commit
6016a868


authored
Jun 18, 2014
by


Johannes Lerch



Browse files




Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver







parent
40ad6af0













Changes
3




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ 6016a868






......@@ -16,14 +16,18 @@ import heros.FlowFunctions;









import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import com.google.common.collect.Maps;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.



......@@ -92,9 +96,9 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>>();










 private Set<N> leakedSources = Collections.newSetFromMap(Maps.<N, Boolean>newConcurrentMap());










 private ConcurrentMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);



......@@ -114,12 +118,19 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt>>();










 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);










 Set<PathEdge<N,AbstractionWithSourceStmt>> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PathEdge<N,AbstractionWithSourceStmt>, Boolean>newConcurrentMap()); 










 Set<PathEdge<N,AbstractionWithSourceStmt>> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 super.processExit(edge);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 } else {



......@@ -162,10 +173,12 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(pausedEdges.remove(pausedEdge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 }










 }










 pausedPathEdges.remove(sourceStmt);










 }



......














src/heros/solver/CountingThreadPoolExecutor.java








View file @ 6016a868






......@@ -28,7 +28,7 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 protected final CountLatch numRunningTasks = new CountLatch(0);










 










 protected Throwable exception = null;










 protected volatile Throwable exception = null;





















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,










 BlockingQueue<Runnable> workQueue) {



......@@ -49,14 +49,17 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {









 










 @Override










 protected void afterExecute(Runnable r, Throwable t) {










 numRunningTasks.decrement();










 if(t!=null) {










 exception = t;










 logger.error("Worker thread execution failed: " + t.getMessage(), t);










 










 shutdownNow();










 numRunningTasks.decrement();










 numRunningTasks.resetAndInterrupt();










 }










 else {










 numRunningTasks.decrement();










 }










 super.afterExecute(r, t);










 }














......














test/heros/BiDiIFDSSolverTest.java








View file @ 6016a868






......@@ -72,7 +72,7 @@ public class BiDiIFDSSolverTest {









 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(flow("2")));










 exitStmt("z").expectArtificalFlow(kill("2")));










 










 backwardHelper.method("foo",










 startPoints("c"),



......@@ -82,7 +82,7 @@ public class BiDiIFDSSolverTest {









 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(flow("3")));










 exitStmt("x").expectArtificalFlow(kill("3")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }



......@@ -113,7 +113,7 @@ public class BiDiIFDSSolverTest {









 }










 










 @Test










 public void returnsOnlyOneDirection() {










 public void returnsOnlyOneDirectionAndStops() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),



......@@ -184,7 +184,7 @@ public class BiDiIFDSSolverTest {









 }





















 @Test










 public void dontUnpauseIfReturnFlowIsKilled() {










 public void dontResumeIfReturnFlowIsKilled() {










 forwardHelper.method("foo",










 startPoints(), 










 normalStmt("a").succ("b", flow("0", "1")),



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

6016a868







Open sidebar



Joshua Garcia heros
Commits

6016a868




Open sidebar

Joshua Garcia heros
Commits

6016a868


Joshua GarciaherosherosCommits
6016a868








Commit
6016a868


authored
Jun 18, 2014
by


Johannes Lerch



Browse files




Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver







parent
40ad6af0













Changes
3




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ 6016a868






......@@ -16,14 +16,18 @@ import heros.FlowFunctions;









import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import com.google.common.collect.Maps;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.



......@@ -92,9 +96,9 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>>();










 private Set<N> leakedSources = Collections.newSetFromMap(Maps.<N, Boolean>newConcurrentMap());










 private ConcurrentMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);



......@@ -114,12 +118,19 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt>>();










 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);










 Set<PathEdge<N,AbstractionWithSourceStmt>> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PathEdge<N,AbstractionWithSourceStmt>, Boolean>newConcurrentMap()); 










 Set<PathEdge<N,AbstractionWithSourceStmt>> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 super.processExit(edge);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 } else {



......@@ -162,10 +173,12 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(pausedEdges.remove(pausedEdge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 }










 }










 pausedPathEdges.remove(sourceStmt);










 }



......














src/heros/solver/CountingThreadPoolExecutor.java








View file @ 6016a868






......@@ -28,7 +28,7 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 protected final CountLatch numRunningTasks = new CountLatch(0);










 










 protected Throwable exception = null;










 protected volatile Throwable exception = null;





















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,










 BlockingQueue<Runnable> workQueue) {



......@@ -49,14 +49,17 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {









 










 @Override










 protected void afterExecute(Runnable r, Throwable t) {










 numRunningTasks.decrement();










 if(t!=null) {










 exception = t;










 logger.error("Worker thread execution failed: " + t.getMessage(), t);










 










 shutdownNow();










 numRunningTasks.decrement();










 numRunningTasks.resetAndInterrupt();










 }










 else {










 numRunningTasks.decrement();










 }










 super.afterExecute(r, t);










 }














......














test/heros/BiDiIFDSSolverTest.java








View file @ 6016a868






......@@ -72,7 +72,7 @@ public class BiDiIFDSSolverTest {









 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(flow("2")));










 exitStmt("z").expectArtificalFlow(kill("2")));










 










 backwardHelper.method("foo",










 startPoints("c"),



......@@ -82,7 +82,7 @@ public class BiDiIFDSSolverTest {









 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(flow("3")));










 exitStmt("x").expectArtificalFlow(kill("3")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }



......@@ -113,7 +113,7 @@ public class BiDiIFDSSolverTest {









 }










 










 @Test










 public void returnsOnlyOneDirection() {










 public void returnsOnlyOneDirectionAndStops() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),



......@@ -184,7 +184,7 @@ public class BiDiIFDSSolverTest {









 }





















 @Test










 public void dontUnpauseIfReturnFlowIsKilled() {










 public void dontResumeIfReturnFlowIsKilled() {










 forwardHelper.method("foo",










 startPoints(), 










 normalStmt("a").succ("b", flow("0", "1")),



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
6016a868


authored
Jun 18, 2014
by


Johannes Lerch



Browse files




Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver







parent
40ad6af0













Changes
3




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ 6016a868






......@@ -16,14 +16,18 @@ import heros.FlowFunctions;









import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import com.google.common.collect.Maps;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.



......@@ -92,9 +96,9 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>>();










 private Set<N> leakedSources = Collections.newSetFromMap(Maps.<N, Boolean>newConcurrentMap());










 private ConcurrentMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);



......@@ -114,12 +118,19 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt>>();










 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);










 Set<PathEdge<N,AbstractionWithSourceStmt>> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PathEdge<N,AbstractionWithSourceStmt>, Boolean>newConcurrentMap()); 










 Set<PathEdge<N,AbstractionWithSourceStmt>> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 super.processExit(edge);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 } else {



......@@ -162,10 +173,12 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(pausedEdges.remove(pausedEdge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 }










 }










 pausedPathEdges.remove(sourceStmt);










 }



......














src/heros/solver/CountingThreadPoolExecutor.java








View file @ 6016a868






......@@ -28,7 +28,7 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 protected final CountLatch numRunningTasks = new CountLatch(0);










 










 protected Throwable exception = null;










 protected volatile Throwable exception = null;





















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,










 BlockingQueue<Runnable> workQueue) {



......@@ -49,14 +49,17 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {









 










 @Override










 protected void afterExecute(Runnable r, Throwable t) {










 numRunningTasks.decrement();










 if(t!=null) {










 exception = t;










 logger.error("Worker thread execution failed: " + t.getMessage(), t);










 










 shutdownNow();










 numRunningTasks.decrement();










 numRunningTasks.resetAndInterrupt();










 }










 else {










 numRunningTasks.decrement();










 }










 super.afterExecute(r, t);










 }














......














test/heros/BiDiIFDSSolverTest.java








View file @ 6016a868






......@@ -72,7 +72,7 @@ public class BiDiIFDSSolverTest {









 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(flow("2")));










 exitStmt("z").expectArtificalFlow(kill("2")));










 










 backwardHelper.method("foo",










 startPoints("c"),



......@@ -82,7 +82,7 @@ public class BiDiIFDSSolverTest {









 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(flow("3")));










 exitStmt("x").expectArtificalFlow(kill("3")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }



......@@ -113,7 +113,7 @@ public class BiDiIFDSSolverTest {









 }










 










 @Test










 public void returnsOnlyOneDirection() {










 public void returnsOnlyOneDirectionAndStops() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),



......@@ -184,7 +184,7 @@ public class BiDiIFDSSolverTest {









 }





















 @Test










 public void dontUnpauseIfReturnFlowIsKilled() {










 public void dontResumeIfReturnFlowIsKilled() {










 forwardHelper.method("foo",










 startPoints(), 










 normalStmt("a").succ("b", flow("0", "1")),



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
6016a868


authored
Jun 18, 2014
by


Johannes Lerch



Browse files



Commit
6016a868


authored
Jun 18, 2014
by


Johannes Lerch

6016a868authoredbyJohannes Lerch

Fixed some concurrency issues in the BiDiIFDSSolver and IDESolver






parent
40ad6af0
















parent
40ad6af0





parent












Changes
3
3


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/solver/BiDiIFDSSolver.java








View file @ 6016a868






......@@ -16,14 +16,18 @@ import heros.FlowFunctions;









import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import com.google.common.collect.Maps;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.



......@@ -92,9 +96,9 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>>();










 private Set<N> leakedSources = Collections.newSetFromMap(Maps.<N, Boolean>newConcurrentMap());










 private ConcurrentMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);



......@@ -114,12 +118,19 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt>>();










 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);










 Set<PathEdge<N,AbstractionWithSourceStmt>> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PathEdge<N,AbstractionWithSourceStmt>, Boolean>newConcurrentMap()); 










 Set<PathEdge<N,AbstractionWithSourceStmt>> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 super.processExit(edge);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 } else {



......@@ -162,10 +173,12 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(pausedEdges.remove(pausedEdge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 }










 }










 pausedPathEdges.remove(sourceStmt);










 }



......














src/heros/solver/CountingThreadPoolExecutor.java








View file @ 6016a868






......@@ -28,7 +28,7 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 protected final CountLatch numRunningTasks = new CountLatch(0);










 










 protected Throwable exception = null;










 protected volatile Throwable exception = null;





















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,










 BlockingQueue<Runnable> workQueue) {



......@@ -49,14 +49,17 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {









 










 @Override










 protected void afterExecute(Runnable r, Throwable t) {










 numRunningTasks.decrement();










 if(t!=null) {










 exception = t;










 logger.error("Worker thread execution failed: " + t.getMessage(), t);










 










 shutdownNow();










 numRunningTasks.decrement();










 numRunningTasks.resetAndInterrupt();










 }










 else {










 numRunningTasks.decrement();










 }










 super.afterExecute(r, t);










 }














......














test/heros/BiDiIFDSSolverTest.java








View file @ 6016a868






......@@ -72,7 +72,7 @@ public class BiDiIFDSSolverTest {









 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(flow("2")));










 exitStmt("z").expectArtificalFlow(kill("2")));










 










 backwardHelper.method("foo",










 startPoints("c"),



......@@ -82,7 +82,7 @@ public class BiDiIFDSSolverTest {









 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(flow("3")));










 exitStmt("x").expectArtificalFlow(kill("3")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }



......@@ -113,7 +113,7 @@ public class BiDiIFDSSolverTest {









 }










 










 @Test










 public void returnsOnlyOneDirection() {










 public void returnsOnlyOneDirectionAndStops() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),



......@@ -184,7 +184,7 @@ public class BiDiIFDSSolverTest {









 }





















 @Test










 public void dontUnpauseIfReturnFlowIsKilled() {










 public void dontResumeIfReturnFlowIsKilled() {










 forwardHelper.method("foo",










 startPoints(), 










 normalStmt("a").succ("b", flow("0", "1")),



......














src/heros/solver/BiDiIFDSSolver.java








View file @ 6016a868






......@@ -16,14 +16,18 @@ import heros.FlowFunctions;









import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import com.google.common.collect.Maps;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.



......@@ -92,9 +96,9 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>>();










 private Set<N> leakedSources = Collections.newSetFromMap(Maps.<N, Boolean>newConcurrentMap());










 private ConcurrentMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);



......@@ -114,12 +118,19 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt>>();










 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);










 Set<PathEdge<N,AbstractionWithSourceStmt>> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PathEdge<N,AbstractionWithSourceStmt>, Boolean>newConcurrentMap()); 










 Set<PathEdge<N,AbstractionWithSourceStmt>> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 super.processExit(edge);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 } else {



......@@ -162,10 +173,12 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(pausedEdges.remove(pausedEdge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 }










 }










 pausedPathEdges.remove(sourceStmt);










 }



......












src/heros/solver/BiDiIFDSSolver.java








View file @ 6016a868








src/heros/solver/BiDiIFDSSolver.java










View file @ 6016a868


6016a868



......@@ -16,14 +16,18 @@ import heros.FlowFunctions;









import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import com.google.common.collect.Maps;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.



......@@ -92,9 +96,9 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>>();










 private Set<N> leakedSources = Collections.newSetFromMap(Maps.<N, Boolean>newConcurrentMap());










 private ConcurrentMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);



......@@ -114,12 +118,19 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt>>();










 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);










 Set<PathEdge<N,AbstractionWithSourceStmt>> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PathEdge<N,AbstractionWithSourceStmt>, Boolean>newConcurrentMap()); 










 Set<PathEdge<N,AbstractionWithSourceStmt>> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 super.processExit(edge);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 } else {



......@@ -162,10 +173,12 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(pausedEdges.remove(pausedEdge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 }










 }










 pausedPathEdges.remove(sourceStmt);










 }



......






......@@ -16,14 +16,18 @@ import heros.FlowFunctions;









import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import com.google.common.collect.Maps;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.



......@@ -92,9 +96,9 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>>();










 private Set<N> leakedSources = Collections.newSetFromMap(Maps.<N, Boolean>newConcurrentMap());










 private ConcurrentMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);



......@@ -114,12 +118,19 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt>>();










 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);










 Set<PathEdge<N,AbstractionWithSourceStmt>> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PathEdge<N,AbstractionWithSourceStmt>, Boolean>newConcurrentMap()); 










 Set<PathEdge<N,AbstractionWithSourceStmt>> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 super.processExit(edge);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 } else {



......@@ -162,10 +173,12 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {










 if(pausedEdges.remove(pausedEdge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 }










 }










 pausedPathEdges.remove(sourceStmt);










 }



......


import heros.IFDSTabulationProblem;importheros.IFDSTabulationProblem;import heros.InterproceduralCFG;importheros.InterproceduralCFG;import java.util.Collections;importjava.util.Collections;import java.util.HashMap;importjava.util.HashMap;import java.util.HashSet;importjava.util.HashSet;import java.util.Map;importjava.util.Map;import java.util.Map.Entry;importjava.util.Map.Entry;import java.util.Set;importjava.util.Set;import java.util.concurrent.ConcurrentMap;importjava.util.concurrent.ConcurrentMap;import java.util.concurrent.LinkedBlockingQueue;importjava.util.concurrent.LinkedBlockingQueue;import java.util.concurrent.TimeUnit;importjava.util.concurrent.TimeUnit;import com.google.common.collect.Maps;importcom.google.common.collect.Maps;/**/** * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions. * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions. protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {protectedclassSingleDirectionSolverextendsPathTrackingIFDSSolver<N,AbstractionWithSourceStmt,M,I>{ private final String debugName;privatefinalStringdebugName; private SingleDirectionSolver otherSolver;privateSingleDirectionSolverotherSolver; private Set<N> leakedSources = new HashSet<N>();privateSet<N>leakedSources=newnew HashSetHashSet<<NN>();>( private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =privateMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>>pausedPathEdges= new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>>();newnew HashMapHashMap<<NN,,SetSet<<PathEdgePathEdge<<NN,,AbstractionWithSourceStmtAbstractionWithSourceStmt>>>();>>> private Set<N> leakedSources = Collections.newSetFromMap(Maps.<N, Boolean>newConcurrentMap());privateSet<N>leakedSources=CollectionsCollections..newSetFromMapnewSetFromMap((MapsMaps.<.<NN,, BooleanBoolean>>newConcurrentMapnewConcurrentMap());() private ConcurrentMap<N,Set<PathEdge<N,AbstractionWithSourceStmt>>> pausedPathEdges =privateConcurrentMapConcurrent<N,Set<PathEdge<N,AbstractionWithSourceStmt>>>pausedPathEdges= Maps.newConcurrentMap();MapsMaps..newConcurrentMapnewConcurrentMap(); public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {publicSingleDirectionSolver(IFDSTabulationProblem<N,AbstractionWithSourceStmt,M,I>ifdsProblem,StringdebugName){ super(ifdsProblem);super(ifdsProblem); super.processExit(edge);super.processExit(edge); } else {}else{ //otherwise we pause this solver's edge and don't continue//otherwise we pause this solver's edge and don't continue Set<PathEdge<N,AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);Set<PathEdge<N,AbstractionWithSourceStmt>>pausedEdges=pausedPathEdges.get(sourceStmt); if(pausedEdges==null) {if(pausedEdges==null){ pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt>>();pausedEdges=newHashSet<PathEdge<N,AbstractionWithSourceStmt>>(); pausedPathEdges.put(sourceStmt,pausedEdges);pausedPathEdges.put(sourceStmt,pausedEdges); } } pausedEdges.add(edge);pausedEdges.add(edge); Set<PathEdge<N,AbstractionWithSourceStmt>> newPausedEdges = Set<PathEdge<N,AbstractionWithSourceStmt>>newPausedEdges= Collections.newSetFromMap(Maps.<PathEdge<N,AbstractionWithSourceStmt>, Boolean>newConcurrentMap()); Collections.newSetFromMap(Maps.<PathEdge<N,AbstractionWithSourceStmt>,Boolean>newConcurrentMap()); Set<PathEdge<N,AbstractionWithSourceStmt>> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);Set<PathEdge<N,AbstractionWithSourceStmt>>existingPausedEdges=pausedPathEdges.putIfAbsent(sourceStmt,newPausedEdges); if(existingPausedEdges==null)if(existingPausedEdges==null) existingPausedEdges=newPausedEdges;existingPausedEdges=newPausedEdges;  existingPausedEdges.add(edge);existingPausedEdges.add(edge);  //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused//if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {if(otherSolver.hasLeaked(sourceStmt)&&existingPausedEdges.remove(edge)){ super.processExit(edge);super.processExit(edge); }}  logger.debug(" ++ PAUSE {}: {}", debugName, edge);logger.debug(" ++ PAUSE {}: {}",debugName,edge); }} } else {}else{ private void unpausePathEdgesForSource(N sourceStmt) {privatevoidunpausePathEdgesForSource(NsourceStmt){ Set<PathEdge<N, AbstractionWithSourceStmt>> pausedEdges = pausedPathEdges.get(sourceStmt);Set<PathEdge<N,AbstractionWithSourceStmt>>pausedEdges=pausedPathEdges.get(sourceStmt); if(pausedEdges!=null) {if(pausedEdges!=null){ for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {for(PathEdge<N,AbstractionWithSourceStmt>pausedEdge:pausedEdges){ if(DEBUG)if(DEBUG) logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);logger.debug("-- UNPAUSE {}: {}",debugName,pausedEdge); super.processExit(pausedEdge);super.processExit(pausedEdge); for(PathEdge<N, AbstractionWithSourceStmt> pausedEdge: pausedEdges) {for(PathEdge<N,AbstractionWithSourceStmt>pausedEdge:pausedEdges){ if(pausedEdges.remove(pausedEdge)) {if(pausedEdges.remove(pausedEdge)){ if(DEBUG)if(DEBUG) logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);logger.debug("-- UNPAUSE {}: {}",debugName,pausedEdge); super.processExit(pausedEdge);super.processExit(pausedEdge); }} }} pausedPathEdges.remove(sourceStmt);pausedPathEdges.remove(sourceStmt); }}








src/heros/solver/CountingThreadPoolExecutor.java








View file @ 6016a868






......@@ -28,7 +28,7 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 protected final CountLatch numRunningTasks = new CountLatch(0);










 










 protected Throwable exception = null;










 protected volatile Throwable exception = null;





















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,










 BlockingQueue<Runnable> workQueue) {



......@@ -49,14 +49,17 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {









 










 @Override










 protected void afterExecute(Runnable r, Throwable t) {










 numRunningTasks.decrement();










 if(t!=null) {










 exception = t;










 logger.error("Worker thread execution failed: " + t.getMessage(), t);










 










 shutdownNow();










 numRunningTasks.decrement();










 numRunningTasks.resetAndInterrupt();










 }










 else {










 numRunningTasks.decrement();










 }










 super.afterExecute(r, t);










 }














......












src/heros/solver/CountingThreadPoolExecutor.java








View file @ 6016a868








src/heros/solver/CountingThreadPoolExecutor.java










View file @ 6016a868


6016a868



......@@ -28,7 +28,7 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 protected final CountLatch numRunningTasks = new CountLatch(0);










 










 protected Throwable exception = null;










 protected volatile Throwable exception = null;





















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,










 BlockingQueue<Runnable> workQueue) {



......@@ -49,14 +49,17 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {









 










 @Override










 protected void afterExecute(Runnable r, Throwable t) {










 numRunningTasks.decrement();










 if(t!=null) {










 exception = t;










 logger.error("Worker thread execution failed: " + t.getMessage(), t);










 










 shutdownNow();










 numRunningTasks.decrement();










 numRunningTasks.resetAndInterrupt();










 }










 else {










 numRunningTasks.decrement();










 }










 super.afterExecute(r, t);










 }














......






......@@ -28,7 +28,7 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {




















 protected final CountLatch numRunningTasks = new CountLatch(0);










 










 protected Throwable exception = null;










 protected volatile Throwable exception = null;





















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,










 BlockingQueue<Runnable> workQueue) {



......@@ -49,14 +49,17 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {









 










 @Override










 protected void afterExecute(Runnable r, Throwable t) {










 numRunningTasks.decrement();










 if(t!=null) {










 exception = t;










 logger.error("Worker thread execution failed: " + t.getMessage(), t);










 










 shutdownNow();










 numRunningTasks.decrement();










 numRunningTasks.resetAndInterrupt();










 }










 else {










 numRunningTasks.decrement();










 }










 super.afterExecute(r, t);










 }














......


 protected final CountLatch numRunningTasks = new CountLatch(0);protectedfinalCountLatchnumRunningTasks=newCountLatch(0);  protected Throwable exception = null;protectedThrowableexception=null; protected volatile Throwable exception = null;protectedvolatilevolatile Throwableexception=null; public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,publicCountingThreadPoolExecutor(intcorePoolSize,intmaximumPoolSize,longkeepAliveTime,TimeUnitunit, BlockingQueue<Runnable> workQueue) {BlockingQueue<Runnable>workQueue){  @Override@Override protected void afterExecute(Runnable r, Throwable t) {protectedvoidafterExecute(Runnabler,Throwablet){ numRunningTasks.decrement();numRunningTasks.decrement(); if(t!=null) {if(t!=null){ exception = t;exception=t; logger.error("Worker thread execution failed: " + t.getMessage(), t);logger.error("Worker thread execution failed: "+t.getMessage(),t);  shutdownNow();shutdownNow(); numRunningTasks.decrement();numRunningTasks.decrement(); numRunningTasks.resetAndInterrupt();numRunningTasks.resetAndInterrupt(); }} else {else{ numRunningTasks.decrement();numRunningTasks.decrement(); }} super.afterExecute(r, t);super.afterExecute(r,t); }}








test/heros/BiDiIFDSSolverTest.java








View file @ 6016a868






......@@ -72,7 +72,7 @@ public class BiDiIFDSSolverTest {









 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(flow("2")));










 exitStmt("z").expectArtificalFlow(kill("2")));










 










 backwardHelper.method("foo",










 startPoints("c"),



......@@ -82,7 +82,7 @@ public class BiDiIFDSSolverTest {









 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(flow("3")));










 exitStmt("x").expectArtificalFlow(kill("3")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }



......@@ -113,7 +113,7 @@ public class BiDiIFDSSolverTest {









 }










 










 @Test










 public void returnsOnlyOneDirection() {










 public void returnsOnlyOneDirectionAndStops() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),



......@@ -184,7 +184,7 @@ public class BiDiIFDSSolverTest {









 }





















 @Test










 public void dontUnpauseIfReturnFlowIsKilled() {










 public void dontResumeIfReturnFlowIsKilled() {










 forwardHelper.method("foo",










 startPoints(), 










 normalStmt("a").succ("b", flow("0", "1")),



......












test/heros/BiDiIFDSSolverTest.java








View file @ 6016a868








test/heros/BiDiIFDSSolverTest.java










View file @ 6016a868


6016a868



......@@ -72,7 +72,7 @@ public class BiDiIFDSSolverTest {









 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(flow("2")));










 exitStmt("z").expectArtificalFlow(kill("2")));










 










 backwardHelper.method("foo",










 startPoints("c"),



......@@ -82,7 +82,7 @@ public class BiDiIFDSSolverTest {









 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(flow("3")));










 exitStmt("x").expectArtificalFlow(kill("3")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }



......@@ -113,7 +113,7 @@ public class BiDiIFDSSolverTest {









 }










 










 @Test










 public void returnsOnlyOneDirection() {










 public void returnsOnlyOneDirectionAndStops() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),



......@@ -184,7 +184,7 @@ public class BiDiIFDSSolverTest {









 }





















 @Test










 public void dontUnpauseIfReturnFlowIsKilled() {










 public void dontResumeIfReturnFlowIsKilled() {










 forwardHelper.method("foo",










 startPoints(), 










 normalStmt("a").succ("b", flow("0", "1")),



......






......@@ -72,7 +72,7 @@ public class BiDiIFDSSolverTest {









 










 forwardHelper.method("bar",










 startPoints(),










 exitStmt("z").expectArtificalFlow(flow("2")));










 exitStmt("z").expectArtificalFlow(kill("2")));










 










 backwardHelper.method("foo",










 startPoints("c"),



......@@ -82,7 +82,7 @@ public class BiDiIFDSSolverTest {









 










 backwardHelper.method("bar",










 startPoints(),










 exitStmt("x").expectArtificalFlow(flow("3")));










 exitStmt("x").expectArtificalFlow(kill("3")));










 










 forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");










 }



......@@ -113,7 +113,7 @@ public class BiDiIFDSSolverTest {









 }










 










 @Test










 public void returnsOnlyOneDirection() {










 public void returnsOnlyOneDirectionAndStops() {










 forwardHelper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b"),



......@@ -184,7 +184,7 @@ public class BiDiIFDSSolverTest {









 }





















 @Test










 public void dontUnpauseIfReturnFlowIsKilled() {










 public void dontResumeIfReturnFlowIsKilled() {










 forwardHelper.method("foo",










 startPoints(), 










 normalStmt("a").succ("b", flow("0", "1")),



......


  forwardHelper.method("bar",forwardHelper.method("bar", startPoints(),startPoints(), exitStmt("z").expectArtificalFlow(flow("2")));exitStmt("z").expectArtificalFlow(flowflow("2"))); exitStmt("z").expectArtificalFlow(kill("2")));exitStmt("z").expectArtificalFlow(killkill("2")));  backwardHelper.method("foo",backwardHelper.method("foo", startPoints("c"),startPoints("c"),  backwardHelper.method("bar",backwardHelper.method("bar", startPoints(),startPoints(), exitStmt("x").expectArtificalFlow(flow("3")));exitStmt("x").expectArtificalFlow(flowflow("3"))); exitStmt("x").expectArtificalFlow(kill("3")));exitStmt("x").expectArtificalFlow(killkill("3")));  forwardHelper.runBiDiSolver(backwardHelper, exchange, "b");forwardHelper.runBiDiSolver(backwardHelper,exchange,"b"); }} }}  @Test@Test public void returnsOnlyOneDirection() {publicvoidreturnsOnlyOneDirection(){ public void returnsOnlyOneDirectionAndStops() {publicvoidreturnsOnlyOneDirectionAndStopsAndStops(){ forwardHelper.method("foo",forwardHelper.method("foo", startPoints("a"),startPoints("a"), normalStmt("a").succ("b"),normalStmt("a").succ("b"), }} @Test@Test public void dontUnpauseIfReturnFlowIsKilled() {publicvoiddontUnpauseIfReturnFlowIsKilledUnpaus(){ public void dontResumeIfReturnFlowIsKilled() {publicvoiddontResumeIfReturnFlowIsKilledResum(){ forwardHelper.method("foo",forwardHelper.method("foo", startPoints(), startPoints(), normalStmt("a").succ("b", flow("0", "1")),normalStmt("a").succ("b",flow("0","1")),









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






