



GitLab












Menu




Projects
Groups
Snippets


















/








Help







Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab












Menu




Projects
Groups
Snippets


















/








Help







Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab












Menu




Projects
Groups
Snippets



GitLab






GitLab




Menu




Projects
Groups
Snippets




Menu


Projects
Groups
Snippets















/








Help







Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in
















/














/








Help







Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help



Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab




Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

7b66dd07















Commit
7b66dd07


authored
Oct 09, 2015
by


Steven Arzt



Browse files




Merge branch 'develop' of github.com:Sable/heros into develop


Conflicts:
	.classpath






parents
c3065cba
e0a26844













Changes
32




Hide whitespace changes

Inline
Side-by-side















.classpath








View file @ 7b66dd07













<?xml version="1.0" encoding="UTF-8"?>










<classpath>










 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>










 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry kind="src" path="test"/>










 <classpathentry including="**/*.java" kind="src" output="target/classes" path="src">










 <attributes>










 <attribute name="optional" value="true"/>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry kind="src" output="target/test-classes" path="test">










 <attributes>










 <attribute name="optional" value="true"/>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry exported="true" kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry kind="lib" path="junit.jar"/>










 <classpathentry kind="lib" path="org.hamcrest.core_1.3.0.jar"/>










 <classpathentry kind="lib" path="mockito-all-1.9.5.jar"/>










 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6">










 <attributes>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry kind="con" path="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER">










 <attributes>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry exported="true" kind="lib" path="guava-18.0.jar"/>










 <classpathentry kind="output" path="bin"/>










 <classpathentry kind="output" path="target/classes"/>










</classpath>














.gitignore








View file @ 7b66dd07






......@@ -8,3 +8,5 @@ bin









heros-trunk.jar










/javadoc










/reports










/debug










/target/














.project








View file @ 7b66dd07













<?xml version="1.0" encoding="UTF-8"?>










<projectDescription>










 <name>heros</name>










 <comment></comment>










 <projects>










 </projects>










 <buildSpec>










 <buildCommand>










 <name>org.eclipse.jdt.core.javabuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.ManifestBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.SchemaBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 </buildSpec>










 <natures>










 <nature>org.eclipse.jdt.core.javanature</nature>










 <nature>org.eclipse.pde.PluginNature</nature>










 <nature>edu.umd.cs.findbugs.plugin.eclipse.findbugsNature</nature>










 </natures>










</projectDescription>









<?xml version="1.0" encoding="UTF-8"?>










<projectDescription>










 <name>heros</name>










 <comment></comment>










 <projects>










 </projects>










 <buildSpec>










 <buildCommand>










 <name>org.eclipse.jdt.core.javabuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.ManifestBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.SchemaBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.m2e.core.maven2Builder</name>










 <arguments>










 </arguments>










 </buildCommand>










 </buildSpec>










 <natures>










 <nature>org.eclipse.m2e.core.maven2Nature</nature>










 <nature>org.eclipse.jdt.core.javanature</nature>










 <nature>org.eclipse.pde.PluginNature</nature>










 <nature>edu.umd.cs.findbugs.plugin.eclipse.findbugsNature</nature>










 </natures>










</projectDescription>














pom.xml



0 â†’ 100644







View file @ 7b66dd07













<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">










 <modelVersion>4.0.0</modelVersion>










 <groupId>heros</groupId>










 <artifactId>heros</artifactId>










 <version>0.0.1-SNAPSHOT</version>










 <build>










 <sourceDirectory>src</sourceDirectory>










 <testSourceDirectory>test</testSourceDirectory>










 <resources>










 <resource>










 <directory>src</directory>










 <excludes>










 <exclude>**/*.java</exclude>










 </excludes>










 </resource>










 </resources>










 <plugins>










 <plugin>










 <artifactId>maven-compiler-plugin</artifactId>










 <version>3.1</version>










 <configuration>










 <source>1.6</source>










 <target>1.6</target>










 </configuration>










 </plugin>










 </plugins>










 </build>










 <dependencies>










 <dependency>










 <groupId>org.functionaljava</groupId>










 <artifactId>functionaljava</artifactId>










 <version>4.2</version>










 </dependency>










 </dependencies>










</project>




\ No newline at end of file














src/heros/edgefunc/AllTop.java








View file @ 7b66dd07






......@@ -26,7 +26,7 @@ public class AllTop<V> implements EdgeFunction<V> {









 }





















 public EdgeFunction<V> composeWith(EdgeFunction<V> secondFunction) {










 return secondFunction;










 return this;










 }





















 public EdgeFunction<V> joinWith(EdgeFunction<V> otherFunction) {



......














src/heros/fieldsens/AccessPath.java








View file @ 7b66dd07






......@@ -270,4 +270,8 @@ public class AccessPath<T> {









 public T getFirstAccess() {










 return accesses[0];










 }





















 Set<T> getExclusions() {










 return exclusions;










 }










}














src/heros/fieldsens/AccessPathHandler.java








View file @ 7b66dd07






......@@ -19,10 +19,12 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {




















 private AccessPath<Field> accessPath;










 private Resolver<Field, Fact, Stmt, Method> resolver;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.accessPath = accessPath;










 this.resolver = resolver;










 this.debugger = debugger;










 }





















 public boolean canRead(Field field) {



......@@ -42,7 +44,7 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {









 }










 










 public ConstrainedFact<Field, Fact, Stmt, Method> generateWithEmptyAccessPath(Fact fact, ZeroHandler<Field> zeroHandler) {










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler)));










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler, debugger)));










 }










 










 public ResultBuilder<Field, Fact, Stmt, Method> prepend(final Field field) {



......@@ -73,15 +75,10 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {









 public ResultBuilder<Field, Fact, Stmt, Method> overwrite(final Field field) {










 if(mayBeEmpty())










 return new ResultBuilder<Field, Fact, Stmt, Method>() {










 @SuppressWarnings("unchecked")










 @Override










 public ConstrainedFact<Field, Fact, Stmt, Method> generate(Fact fact) {










 if(accessPath.canRead(field)) {










 AccessPath<Field> tempAccPath = accessPath.removeFirst();










 if(tempAccPath.hasEmptyAccessPath())










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, tempAccPath.appendExcludedFieldReference(field), resolver));










 else










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, tempAccPath, resolver));










 } else if(accessPath.isAccessInExclusions(field))










 if(accessPath.isAccessInExclusions(field))










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, accessPath, resolver));










 else










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, accessPath.appendExcludedFieldReference(field), resolver), new WriteFieldConstraint<Field>(field));



......














src/heros/fieldsens/BiDiFieldSensitiveIFDSSolver.java








View file @ 7b66dd07






......@@ -31,7 +31,7 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 public BiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> forwardProblem,










 IFDSTabulationProblem<Stmt, Field, Fact, Method, I> backwardProblem, 










 FactMergeHandler<Fact> factHandler, 










 Debugger<Field, Fact, Stmt, Method, I> debugger,










 Debugger<Field, Fact, Stmt, Method> debugger,










 Scheduler scheduler) {










 










 this.scheduler = scheduler;



......@@ -46,11 +46,11 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 }





















 private FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I> createSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> problem, 










 FactMergeHandler<Fact> factHandler, Debugger<Field, Fact, Stmt, Method, I> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 FactMergeHandler<Fact> factHandler, Debugger<Field, Fact, Stmt, Method> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 return new FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I>(problem, factHandler, debugger, scheduler) {










 @Override










 protected MethodAnalyzer<Field, Fact, Stmt, Method> createMethodAnalyzer(Method method) {










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer);










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer, debugger);










 }










 };










 }



......














src/heros/fieldsens/CallEdge.java








View file @ 7b66dd07






......@@ -61,14 +61,22 @@ public class CallEdge<Field, Fact, Stmt, Method> {









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFactWithDelta = new WrappedFact<Field, Fact, Stmt, Method>(calleeSourceFact.getFact(), delta.applyTo(calleeSourceFact.getAccessPath()), resolver);










 if(interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath()) != PrefixTestResult.GUARANTEED_PREFIX)










  throw new AssertionError();










 interestedAnalyzer.addIncomingEdge(new CallEdge<Field, Fact, Stmt, Method>(analyzer, 










 assert interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath()) == PrefixTestResult.GUARANTEED_PREFIX;










 










 CallEdge<Field, Fact, Stmt, Method> newCallEdge = new CallEdge<Field, Fact, Stmt, Method>(analyzer, 










 new WrappedFactAtStatement<Field, Fact, Stmt, Method>(factAtCallSite.getStatement(), 










 new WrappedFact<Field, Fact, Stmt, Method>(factAtCallSite.getWrappedFact().getFact(), 










 delta.applyTo(factAtCallSite.getWrappedFact().getAccessPath()), 










 resolver)), 










 calleeSourceFactWithDelta));










 calleeSourceFactWithDelta);










 










 if (resolver instanceof ZeroCallEdgeResolver) {










 interestedAnalyzer.getCallEdgeResolver().incomingEdges.add(newCallEdge);










 interestedAnalyzer.getCallEdgeResolver().interest(((ZeroCallEdgeResolver<Field, Fact, Stmt, Method>) resolver).copyWithAnalyzer(interestedAnalyzer));










 interestedAnalyzer.getCallEdgeResolver().processIncomingGuaranteedPrefix(newCallEdge);










 }










 else










 interestedAnalyzer.addIncomingEdge(newCallEdge);










 }










 










 @Override



......














src/heros/fieldsens/CallEdgeResolver.java








View file @ 7b66dd07






......@@ -17,19 +17,14 @@ import com.google.common.collect.Lists;




















class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> {





















 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 this(analyzer, null);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(analyzer, debugger, null);










 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, analyzer.getAccessPath(), parent, debugger);










 }





















 @Override










 protected AccessPath<Field> getResolvedAccessPath() {










 return analyzer.getAccessPath();










 }










 










 @Override










 protected AccessPath<Field> getAccessPathOf(CallEdge<Field, Fact, Stmt, Method> inc) {










 return inc.getCalleeSourceFact().getAccessPath();



......@@ -60,7 +55,7 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field









 










 @Override










 public String toString() {










 return "";










 return "<"+analyzer.getAccessPath()+":"+analyzer.getMethod()+">";










 }










 










 @Override



......














src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ 7b66dd07






......@@ -18,18 +18,22 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {





















 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(analyzer, joinStmt, new AccessPath<Field>(), null);










 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), debugger, null);










 this.factMergeHandler = factMergeHandler;










 propagated=false;










 }










 










 private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, Debugger<Field, Fact, Stmt, Method> debugger, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.resolvedAccPath = resolvedAccPath;










 this.sourceFact = sourceFact;










 propagated=true;










 }










 



......@@ -39,35 +43,53 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 }





















 protected void processIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, fact.getFact());










 }










 else {










 propagated=true;










 sourceFact = fact.getFact();










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(joinStmt, new WrappedFact<Field, Fact, Stmt, Method>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }










 };










 










 private boolean isNullOrCallEdgeResolver(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(resolver == null)










 return true;










 if(resolver instanceof CallEdgeResolver) {










 return !(resolver instanceof ZeroCallEdgeResolver);










 }










 return false;










 }










 










 @Override










 protected void processIncomingPotentialPrefix(WrappedFact<Field, Fact, Stmt, Method> fact) {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 fact.getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest();










 }





















 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 unlock();










 protected void processIncomingPotentialPrefix(final WrappedFact<Field, Fact, Stmt, Method> fact) {










 if(isNullOrCallEdgeResolver(fact.getResolver())) {










 canBeResolvedEmpty();










 }










 else {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccessPath);










 fact.getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest(resolver);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 unlock();










 }










 }










 










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(analyzer, joinStmt, newAccPath, this);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, debugger, this);










 }





















 @Override



......@@ -77,12 +99,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver




















 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+joinStmt+">";










 }





















 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 public Stmt getJoinStmt() {



......














src/heros/fieldsens/Debugger.java








View file @ 7b66dd07






......@@ -11,18 +11,24 @@









package heros.fieldsens;





















import heros.InterproceduralCFG;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> {





















 public abstract void setICFG(I icfg);





















 public abstract void initialSeed(Stmt stmt);










public interface Debugger<Field, Fact, Stmt, Method> {





















 public void setICFG(InterproceduralCFG<Stmt, Method> icfg);










 public void initialSeed(Stmt stmt);










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver);










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void askedToResolve(Resolver<Field, Fact, Stmt, Method> resolver, Constraint<Field> constraint);










 










 public static class NullDebugger <Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










 public static class NullDebugger <Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 










 }














......@@ -30,6 +36,40 @@ public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 public void initialSeed(Stmt stmt) {










 










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void askedToResolve(Resolver<Field, Fact, Stmt, Method> resolver, Constraint<Field> constraint) {










 










 }










 










 }










}




\ No newline at end of file














src/heros/fieldsens/FieldSensitiveIFDSSolver.java








View file @ 7b66dd07






......@@ -33,13 +33,13 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 private IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem;










 protected Context<FieldRef, D, N,M> context;










 private Debugger<FieldRef, D, N, M, I> debugger;










 protected Debugger<FieldRef, D, N, M> debugger;










 private Scheduler scheduler;





















 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M> debugger, Scheduler scheduler) {










 this.tabulationProblem = tabulationProblem;










 this.scheduler = scheduler;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M>() : debugger;










 this.debugger.setICFG(tabulationProblem.interproceduralCFG());










 context = initContext(tabulationProblem, factHandler);










 submitInitialSeeds();



......@@ -57,7 +57,7 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur









 }










 










 protected MethodAnalyzer<FieldRef, D, N, M> createMethodAnalyzer(M method) {










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context);










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context, debugger);










 }





















 /**



......














src/heros/fieldsens/MethodAnalyzerImpl.java








View file @ 7b66dd07






......@@ -22,14 +22,16 @@ public class MethodAnalyzerImpl<Field,Fact, Stmt, Method>









 new DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Fact key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context) {










 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.debugger = debugger;










 }










 










 @Override



......














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ 7b66dd07






......@@ -32,7 +32,7 @@ import com.google.common.collect.Lists;









import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {










public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {





















 private static final Logger logger = LoggerFactory.getLogger(PerAccessPathMethodAnalyzer.class);










 private Fact sourceFact;



......@@ -44,23 +44,25 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private CallEdgeResolver<Field, Fact, Stmt, Method> callEdgeResolver;










 private PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context) {










 this(method, sourceFact, context, new AccessPath<Field>(), null);










 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(method, sourceFact, context, debugger, new AccessPath<Field>(), null);










 }










 










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 this.debugger = debugger;










 if(method == null)










 throw new IllegalArgumentException("Method must be not null");










 this.parent = parent;



......@@ -69,16 +71,16 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 this.accessPath = accPath;










 this.context = context;










 if(parent == null) {










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this);










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler, debugger) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger);










 }










 else {










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, parent.callEdgeResolver);










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger, parent.callEdgeResolver);










 }










 log("initialized");










 }










 










 public PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createWithAccessPath(AccessPath<Field> accPath) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, accPath, this);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, debugger, accPath, this);










 }










 










 WrappedFact<Field, Fact, Stmt, Method> wrappedSource() {



......@@ -94,7 +96,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }





















 private void bootstrapAtMethodStartPoints() {










 callEdgeResolver.interest();










 callEdgeResolver.interest(callEdgeResolver);










 for(Stmt startPoint : context.icfg.getStartPointsOf(method)) {










 WrappedFactAtStatement<Field, Fact, Stmt, Method> target = new WrappedFactAtStatement<Field, Fact, Stmt, Method>(startPoint, wrappedSource());










 if(!reachableStatements.containsKey(target))



......@@ -121,6 +123,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 log("Edge to "+factAtStmt);










 reachableStatements.put(factAtStmt, factAtStmt);










 context.scheduler.schedule(new Job(factAtStmt));










 debugger.edgeTo(this, factAtStmt);










 }










 }














......@@ -137,7 +140,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Method> calledMethods = context.icfg.getCalleesOfCallAt(factAtStmt.getStatement());










 for (Method calledMethod : calledMethods) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallFlowFunction(factAtStmt.getStatement(), calledMethod);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 MethodAnalyzer<Field, Fact, Stmt, Method> analyzer = context.getAnalyzer(calledMethod);



......@@ -162,7 +165,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(callSite);










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(callSite, method, factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 context.getAnalyzer(context.icfg.getMethodOf(callSite)).addUnbalancedReturnFlow(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()), callSite);



......@@ -174,15 +177,13 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 //instead we thus call the return flow function will a null caller










 if(callSites.isEmpty()) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(null, method, factAtStmt.getStatement(), null);










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 }










 }










 }










 










 private void processCallToReturnEdge(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 Stmt stmt = factAtStmt.getStatement();










 int numberOfPredecessors = context.icfg.getPredsOf(stmt).size(); 










 if(numberOfPredecessors > 1 || (context.icfg.isStartPoint(stmt) && numberOfPredecessors > 0)) {










 if(isLoopStart(factAtStmt.getStatement())) {










 ctrFlowJoinResolvers.getOrCreate(factAtStmt.getAsFactAtStatement()).addIncoming(factAtStmt.getWrappedFact());










 }










 else {



......@@ -194,7 +195,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(factAtStmt.getStatement());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallToReturnFlowFunction(factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()));



......@@ -203,15 +204,31 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }





















 private void processNormalFlow(WrappedFactAtStatement<Field,Fact, Stmt, Method> factAtStmt) {










 Stmt stmt = factAtStmt.getStatement();










 int numberOfPredecessors = context.icfg.getPredsOf(stmt).size();










 if((numberOfPredecessors > 1 && !context.icfg.isExitStmt(stmt)) || (context.icfg.isStartPoint(stmt) && numberOfPredecessors > 0)) {










 if(isLoopStart(factAtStmt.getStatement())) {










 ctrFlowJoinResolvers.getOrCreate(factAtStmt.getAsFactAtStatement()).addIncoming(factAtStmt.getWrappedFact());










 }










 else {










 processNormalNonJoiningFlow(factAtStmt);










 }










 }










 










 private boolean isLoopStart(Stmt stmt) {










 int numberOfPredecessors = context.icfg.getPredsOf(stmt).size();










 if((numberOfPredecessors > 1 && !context.icfg.isExitStmt(stmt)) || (context.icfg.isStartPoint(stmt) && numberOfPredecessors > 0)) {










 Set<Stmt> visited = Sets.newHashSet();










 List<Stmt> worklist = Lists.newLinkedList();










 worklist.addAll(context.icfg.getPredsOf(stmt));










 while(!worklist.isEmpty()) {










 Stmt current = worklist.remove(0);










 if(current.equals(stmt))










 return true;










 if(!visited.add(current))










 continue;










 worklist.addAll(context.icfg.getPredsOf(current));










 }










 }










 return false;










 }





















 void processFlowFromJoinStmt(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 if(context.icfg.isCallStmt(factAtStmt.getStatement()))



......@@ -223,7 +240,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private void processNormalNonJoiningFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 final List<Stmt> successors = context.icfg.getSuccsOf(factAtStmt.getStatement());










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getNormalFlowFunction(factAtStmt.getStatement());










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (final ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 if(targetFact.getConstraint() == null)










 scheduleEdgeTo(successors, targetFact.getFact());



......@@ -245,9 +262,10 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }










 










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 if(!isBootStrapped())










 if(isBootStrapped()) {










 context.factHandler.merge(sourceFact, incEdge.getCalleeSourceFact().getFact());










 } else 










 bootstrapAtMethodStartPoints();










 










 callEdgeResolver.addIncoming(incEdge);










 }














......@@ -255,7 +273,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(incEdge.getCallSite());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(incEdge.getCallSite(), method, exitFact.getStatement(), returnSite);










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver()));










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targets) {










 context.factHandler.restoreCallingContext(targetFact.getFact().getFact(), incEdge.getCallerCallSiteFact().getFact());










 //TODO handle constraint



......@@ -293,10 +311,12 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {




















 public Job(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 this.factAtStmt = factAtStmt;










 debugger.newJob(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }





















 @Override










 public void run() {










 debugger.jobStarted(PerAccessPathMethodAnalyzer.this, factAtStmt);










 if (context.icfg.isCallStmt(factAtStmt.getStatement())) {










 processCall(factAtStmt);










 } else {



......@@ -307,12 +327,22 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 processNormalFlow(factAtStmt);










 }










 }










 debugger.jobFinished(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }










 










 @Override










 public String toString() {










 return "Job: "+factAtStmt;










 }










 }





















 public CallEdgeResolver<Field, Fact, Stmt, Method> getCallEdgeResolver() {










 return callEdgeResolver;










 }





















 public Method getMethod() {










 return method;










 }










 










//	public void debugReachables() {










//		JsonDocument root = new JsonDocument();



......














src/heros/fieldsens/Resolver.java








View file @ 7b66dd07






......@@ -13,12 +13,14 @@ package heros.fieldsens;









import heros.fieldsens.FlowFunction.Constraint;





















import java.util.List;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Sets;





















public abstract class Resolver<Field, Fact, Stmt, Method> {





















 private boolean interest = false;










 private Set<Resolver<Field, Fact, Stmt, Method>> interest = Sets.newHashSet();










 private List<InterestCallback<Field, Fact, Stmt, Method>> interestCallbacks = Lists.newLinkedList();










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer;










 private boolean canBeResolvedEmpty = false;



......@@ -29,18 +31,14 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {




















 public abstract void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback);










 










 public void interest() {










 if(interest)










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(!interest.add(resolver))










 return;





















 log("Interest given");










 interest = true;










 log("Interest given by: "+resolver);










 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.interest(analyzer, this);










 callback.interest(analyzer, resolver);










 }










 










 if(canBeResolvedEmpty)










 interestCallbacks = null;










 }










 










 protected void canBeResolvedEmpty() {



......@@ -51,23 +49,19 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {









 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.canBeResolvedEmpty();










 }










 










 if(interest)










 interestCallbacks = null;










 }





















 public boolean isInterestGiven() {










 return interest;










 return !interest.isEmpty();










 }





















 protected void registerCallback(InterestCallback<Field, Fact, Stmt, Method> callback) {










 if(interest) {










 callback.interest(analyzer, this);










 }










 else {










 log("Callback registered");










 interestCallbacks.add(callback);










 if(!interest.isEmpty()) {










 for(Resolver<Field, Fact, Stmt, Method> resolver : Lists.newLinkedList(interest))










 callback.interest(analyzer, resolver);










 }










 log("Callback registered");










 interestCallbacks.add(callback);





















 if(canBeResolvedEmpty)










 callback.canBeResolvedEmpty();



......














src/heros/fieldsens/ResolverTemplate.java








View file @ 7b66dd07






......@@ -13,6 +13,7 @@ package heros.fieldsens;









import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Sets;














......@@ -26,11 +27,25 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> allResolversInExclHierarchy;










 protected AccessPath<Field> resolvedAccessPath;










 protected Debugger<Field, Fact, Stmt, Method> debugger;





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent) {










 AccessPath<Field> resolvedAccessPath,










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, 










 Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer);










 this.resolvedAccessPath = resolvedAccessPath;










 this.parent = parent;










 this.debugger = debugger;










 if(parent == null || resolvedAccessPath.getExclusions().isEmpty()) {










 allResolversInExclHierarchy = Maps.newHashMap();










 }










 else {










 allResolversInExclHierarchy = parent.allResolversInExclHierarchy;










 }










 debugger.newResolver(analyzer, this);










 }










 










 protected boolean isLocked() {



......@@ -49,25 +64,23 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 recursionLock = false;










 }










 










 protected abstract AccessPath<Field> getResolvedAccessPath();










 










 protected abstract AccessPath<Field> getAccessPathOf(Incoming inc);










 










 public void addIncoming(Incoming inc) {










 if(getResolvedAccessPath().isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(resolvedAccessPath.isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge: "+inc);










 if(!incomingEdges.add(inc))










 return;










 










 interest();










 interest(this);










 










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : nestedResolvers.values()) {










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : Lists.newLinkedList(nestedResolvers.values())) {










 nestedResolver.addIncoming(inc);










 }










 










 processIncomingGuaranteedPrefix(inc);










 }










 else if(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 else if(getAccessPathOf(inc).isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 processIncomingPotentialPrefix(inc);










 }










 }



......@@ -79,25 +92,33 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(getResolvedAccessPath()) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(getResolvedAccessPath());










 debugger.askedToResolve(this, constraint);










 if(constraint.canBeAppliedTo(resolvedAccessPath) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(resolvedAccessPath);










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = getOrCreateNestedResolver(newAccPath);










 assert nestedResolver.getResolvedAccessPath().equals(constraint.applyToAccessPath(getResolvedAccessPath()));










 assert nestedResolver.resolvedAccessPath.equals(constraint.applyToAccessPath(resolvedAccessPath));










 nestedResolver.registerCallback(callback);










 }










 }





















 protected ResolverTemplate<Field, Fact, Stmt, Method, Incoming> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 if(getResolvedAccessPath().equals(newAccPath))










 if(resolvedAccessPath.equals(newAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(newAccPath)) {










 assert getResolvedAccessPath().getDeltaTo(newAccPath).accesses.length <= 1;










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = createNestedResolver(newAccPath);










 nestedResolvers.put(newAccPath, nestedResolver);










 










 for(Incoming inc : incomingEdges) {










 nestedResolver.addIncoming(inc);










 assert resolvedAccessPath.getDeltaTo(newAccPath).accesses.length <= 1;










 if(allResolversInExclHierarchy.containsKey(newAccPath)) {










 return allResolversInExclHierarchy.get(newAccPath);










 }










 else {










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver = createNestedResolver(newAccPath);










 if(!resolvedAccessPath.getExclusions().isEmpty() || !newAccPath.getExclusions().isEmpty())










 allResolversInExclHierarchy.put(newAccPath, nestedResolver);










 nestedResolvers.put(newAccPath, nestedResolver);










 for(Incoming inc : Lists.newLinkedList(incomingEdges)) {










 nestedResolver.addIncoming(inc);










 }










 return nestedResolver;










 }










 }










 return nestedResolvers.get(newAccPath);



......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ 7b66dd07






......@@ -20,34 +20,32 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {





















 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(analyzer, returnSite, new AccessPath<Field>(), null);










 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, returnSite, null, debugger, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated = false;










 }





















 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.resolvedAccPath = resolvedAccPath;










 this.sourceFact = sourceFact;










 propagated=true;










 }










 










 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+returnSite+">";










 }










 










 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 protected AccessPath<Field> getAccessPathOf(ReturnEdge<Field, Fact, Stmt, Method> inc) {










 return inc.incAccessPath;










 return inc.usedAccessPathOfIncResolver.applyTo(inc.incAccessPath);










 }










 










 public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact, 



......@@ -58,8 +56,12 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }










 










 protected void processIncomingGuaranteedPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, retEdge.incFact);










 } 










 else {










 propagated=true;










 sourceFact = retEdge.incFact;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<Field, Fact, Stmt, Method>(retEdge.incFact, new AccessPath<Field>(), this)));










 }



......@@ -76,26 +78,40 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(analyzer, returnSite, newAccPath, this);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, debugger, newAccPath, this);










 }










 










 public Stmt getReturnSite() {










 return returnSite;










 }










 










 private boolean isNullOrCallEdgeResolver(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(resolver == null)










 return true;










 if(resolver instanceof CallEdgeResolver) {










 return !(resolver instanceof ZeroCallEdgeResolver);










 }










 return false;










 }










 










 private void resolveViaDelta(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(retEdge.incResolver == null || retEdge.incResolver instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.incResolver)) {










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPath());










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(resolvedAccessPath);










 assert delta.accesses.length <= 1;










 retEdge.incResolver.resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {





















 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










 if(resolver instanceof ZeroCallEdgeResolver) {










 ReturnSiteResolver.this.interest(((ZeroCallEdgeResolver<Field, Fact, Stmt, Method>) resolver).










 copyWithAnalyzer(ReturnSiteResolver.this.analyzer));










 } else {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(resolvedAccessPath)));










 ReturnSiteResolver.this.interest(ReturnSiteResolver.this);










 }










 }










 










 @Override



......@@ -107,24 +123,28 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }





















 private void resolveViaDeltaAndPotentiallyDelegateToCallSite(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath));










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 AccessPath<Field> inc = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath);










 if(!retEdge.callDelta.canBeAppliedTo(inc))










 return;










 










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(inc);










 if(resolvedAccessPath.isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest();










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 interest(this);










 } else if(currAccPath.isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }










 }





















 protected void resolveViaCallSiteResolver(final ReturnEdge<Field, Fact, Stmt, Method> retEdge, AccessPath<Field> currAccPath) {










 if(retEdge.resolverAtCaller == null || retEdge.resolverAtCaller instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.resolverAtCaller)) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(resolvedAccessPath)), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(resolver);










 }










 










 @Override



......














src/heros/fieldsens/SourceStmtAnnotatedMethodAnalyzer.java








View file @ 7b66dd07






......@@ -21,18 +21,21 @@ public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>









 private Method method;










 private DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {





















 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Key<Fact, Stmt> key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Synchronizer<Stmt> synchronizer;










 private Debugger<Field, Fact, Stmt, Method> debugger;










 










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer) {










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.synchronizer = synchronizer;










 this.debugger = debugger;










 }










 










 @Override



......














src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ 7b66dd07






......@@ -16,11 +16,15 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes




















 private ZeroHandler<Field> zeroHandler;





















 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler) {










 super(analyzer);










 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler, Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer, debugger);










 this.zeroHandler = zeroHandler;










 }





















 ZeroCallEdgeResolver<Field, Fact, Stmt, Method> copyWithAnalyzer(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 return new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(analyzer, zeroHandler, debugger);










 }










 










 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 if(zeroHandler.shouldGenerateAccessPath(constraint.applyToAccessPath(new AccessPath<Field>())))



......@@ -28,7 +32,7 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 }










 










 @Override










 public void interest() {










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 }










 










 @Override



......@@ -36,6 +40,11 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 return this;










 }





















 @Override










 public String toString() {










 return "[0-Resolver"+super.toString()+"]";










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;



......









Prev


1


2


Next















Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

7b66dd07















Commit
7b66dd07


authored
Oct 09, 2015
by


Steven Arzt



Browse files




Merge branch 'develop' of github.com:Sable/heros into develop


Conflicts:
	.classpath






parents
c3065cba
e0a26844













Changes
32




Hide whitespace changes

Inline
Side-by-side















.classpath








View file @ 7b66dd07













<?xml version="1.0" encoding="UTF-8"?>










<classpath>










 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>










 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry kind="src" path="test"/>










 <classpathentry including="**/*.java" kind="src" output="target/classes" path="src">










 <attributes>










 <attribute name="optional" value="true"/>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry kind="src" output="target/test-classes" path="test">










 <attributes>










 <attribute name="optional" value="true"/>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry exported="true" kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry kind="lib" path="junit.jar"/>










 <classpathentry kind="lib" path="org.hamcrest.core_1.3.0.jar"/>










 <classpathentry kind="lib" path="mockito-all-1.9.5.jar"/>










 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6">










 <attributes>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry kind="con" path="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER">










 <attributes>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry exported="true" kind="lib" path="guava-18.0.jar"/>










 <classpathentry kind="output" path="bin"/>










 <classpathentry kind="output" path="target/classes"/>










</classpath>














.gitignore








View file @ 7b66dd07






......@@ -8,3 +8,5 @@ bin









heros-trunk.jar










/javadoc










/reports










/debug










/target/














.project








View file @ 7b66dd07













<?xml version="1.0" encoding="UTF-8"?>










<projectDescription>










 <name>heros</name>










 <comment></comment>










 <projects>










 </projects>










 <buildSpec>










 <buildCommand>










 <name>org.eclipse.jdt.core.javabuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.ManifestBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.SchemaBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 </buildSpec>










 <natures>










 <nature>org.eclipse.jdt.core.javanature</nature>










 <nature>org.eclipse.pde.PluginNature</nature>










 <nature>edu.umd.cs.findbugs.plugin.eclipse.findbugsNature</nature>










 </natures>










</projectDescription>









<?xml version="1.0" encoding="UTF-8"?>










<projectDescription>










 <name>heros</name>










 <comment></comment>










 <projects>










 </projects>










 <buildSpec>










 <buildCommand>










 <name>org.eclipse.jdt.core.javabuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.ManifestBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.SchemaBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.m2e.core.maven2Builder</name>










 <arguments>










 </arguments>










 </buildCommand>










 </buildSpec>










 <natures>










 <nature>org.eclipse.m2e.core.maven2Nature</nature>










 <nature>org.eclipse.jdt.core.javanature</nature>










 <nature>org.eclipse.pde.PluginNature</nature>










 <nature>edu.umd.cs.findbugs.plugin.eclipse.findbugsNature</nature>










 </natures>










</projectDescription>














pom.xml



0 â†’ 100644







View file @ 7b66dd07













<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">










 <modelVersion>4.0.0</modelVersion>










 <groupId>heros</groupId>










 <artifactId>heros</artifactId>










 <version>0.0.1-SNAPSHOT</version>










 <build>










 <sourceDirectory>src</sourceDirectory>










 <testSourceDirectory>test</testSourceDirectory>










 <resources>










 <resource>










 <directory>src</directory>










 <excludes>










 <exclude>**/*.java</exclude>










 </excludes>










 </resource>










 </resources>










 <plugins>










 <plugin>










 <artifactId>maven-compiler-plugin</artifactId>










 <version>3.1</version>










 <configuration>










 <source>1.6</source>










 <target>1.6</target>










 </configuration>










 </plugin>










 </plugins>










 </build>










 <dependencies>










 <dependency>










 <groupId>org.functionaljava</groupId>










 <artifactId>functionaljava</artifactId>










 <version>4.2</version>










 </dependency>










 </dependencies>










</project>




\ No newline at end of file














src/heros/edgefunc/AllTop.java








View file @ 7b66dd07






......@@ -26,7 +26,7 @@ public class AllTop<V> implements EdgeFunction<V> {









 }





















 public EdgeFunction<V> composeWith(EdgeFunction<V> secondFunction) {










 return secondFunction;










 return this;










 }





















 public EdgeFunction<V> joinWith(EdgeFunction<V> otherFunction) {



......














src/heros/fieldsens/AccessPath.java








View file @ 7b66dd07






......@@ -270,4 +270,8 @@ public class AccessPath<T> {









 public T getFirstAccess() {










 return accesses[0];










 }





















 Set<T> getExclusions() {










 return exclusions;










 }










}














src/heros/fieldsens/AccessPathHandler.java








View file @ 7b66dd07






......@@ -19,10 +19,12 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {




















 private AccessPath<Field> accessPath;










 private Resolver<Field, Fact, Stmt, Method> resolver;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.accessPath = accessPath;










 this.resolver = resolver;










 this.debugger = debugger;










 }





















 public boolean canRead(Field field) {



......@@ -42,7 +44,7 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {









 }










 










 public ConstrainedFact<Field, Fact, Stmt, Method> generateWithEmptyAccessPath(Fact fact, ZeroHandler<Field> zeroHandler) {










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler)));










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler, debugger)));










 }










 










 public ResultBuilder<Field, Fact, Stmt, Method> prepend(final Field field) {



......@@ -73,15 +75,10 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {









 public ResultBuilder<Field, Fact, Stmt, Method> overwrite(final Field field) {










 if(mayBeEmpty())










 return new ResultBuilder<Field, Fact, Stmt, Method>() {










 @SuppressWarnings("unchecked")










 @Override










 public ConstrainedFact<Field, Fact, Stmt, Method> generate(Fact fact) {










 if(accessPath.canRead(field)) {










 AccessPath<Field> tempAccPath = accessPath.removeFirst();










 if(tempAccPath.hasEmptyAccessPath())










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, tempAccPath.appendExcludedFieldReference(field), resolver));










 else










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, tempAccPath, resolver));










 } else if(accessPath.isAccessInExclusions(field))










 if(accessPath.isAccessInExclusions(field))










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, accessPath, resolver));










 else










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, accessPath.appendExcludedFieldReference(field), resolver), new WriteFieldConstraint<Field>(field));



......














src/heros/fieldsens/BiDiFieldSensitiveIFDSSolver.java








View file @ 7b66dd07






......@@ -31,7 +31,7 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 public BiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> forwardProblem,










 IFDSTabulationProblem<Stmt, Field, Fact, Method, I> backwardProblem, 










 FactMergeHandler<Fact> factHandler, 










 Debugger<Field, Fact, Stmt, Method, I> debugger,










 Debugger<Field, Fact, Stmt, Method> debugger,










 Scheduler scheduler) {










 










 this.scheduler = scheduler;



......@@ -46,11 +46,11 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 }





















 private FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I> createSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> problem, 










 FactMergeHandler<Fact> factHandler, Debugger<Field, Fact, Stmt, Method, I> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 FactMergeHandler<Fact> factHandler, Debugger<Field, Fact, Stmt, Method> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 return new FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I>(problem, factHandler, debugger, scheduler) {










 @Override










 protected MethodAnalyzer<Field, Fact, Stmt, Method> createMethodAnalyzer(Method method) {










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer);










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer, debugger);










 }










 };










 }



......














src/heros/fieldsens/CallEdge.java








View file @ 7b66dd07






......@@ -61,14 +61,22 @@ public class CallEdge<Field, Fact, Stmt, Method> {









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFactWithDelta = new WrappedFact<Field, Fact, Stmt, Method>(calleeSourceFact.getFact(), delta.applyTo(calleeSourceFact.getAccessPath()), resolver);










 if(interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath()) != PrefixTestResult.GUARANTEED_PREFIX)










  throw new AssertionError();










 interestedAnalyzer.addIncomingEdge(new CallEdge<Field, Fact, Stmt, Method>(analyzer, 










 assert interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath()) == PrefixTestResult.GUARANTEED_PREFIX;










 










 CallEdge<Field, Fact, Stmt, Method> newCallEdge = new CallEdge<Field, Fact, Stmt, Method>(analyzer, 










 new WrappedFactAtStatement<Field, Fact, Stmt, Method>(factAtCallSite.getStatement(), 










 new WrappedFact<Field, Fact, Stmt, Method>(factAtCallSite.getWrappedFact().getFact(), 










 delta.applyTo(factAtCallSite.getWrappedFact().getAccessPath()), 










 resolver)), 










 calleeSourceFactWithDelta));










 calleeSourceFactWithDelta);










 










 if (resolver instanceof ZeroCallEdgeResolver) {










 interestedAnalyzer.getCallEdgeResolver().incomingEdges.add(newCallEdge);










 interestedAnalyzer.getCallEdgeResolver().interest(((ZeroCallEdgeResolver<Field, Fact, Stmt, Method>) resolver).copyWithAnalyzer(interestedAnalyzer));










 interestedAnalyzer.getCallEdgeResolver().processIncomingGuaranteedPrefix(newCallEdge);










 }










 else










 interestedAnalyzer.addIncomingEdge(newCallEdge);










 }










 










 @Override



......














src/heros/fieldsens/CallEdgeResolver.java








View file @ 7b66dd07






......@@ -17,19 +17,14 @@ import com.google.common.collect.Lists;




















class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> {





















 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 this(analyzer, null);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(analyzer, debugger, null);










 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, analyzer.getAccessPath(), parent, debugger);










 }





















 @Override










 protected AccessPath<Field> getResolvedAccessPath() {










 return analyzer.getAccessPath();










 }










 










 @Override










 protected AccessPath<Field> getAccessPathOf(CallEdge<Field, Fact, Stmt, Method> inc) {










 return inc.getCalleeSourceFact().getAccessPath();



......@@ -60,7 +55,7 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field









 










 @Override










 public String toString() {










 return "";










 return "<"+analyzer.getAccessPath()+":"+analyzer.getMethod()+">";










 }










 










 @Override



......














src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ 7b66dd07






......@@ -18,18 +18,22 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {





















 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(analyzer, joinStmt, new AccessPath<Field>(), null);










 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), debugger, null);










 this.factMergeHandler = factMergeHandler;










 propagated=false;










 }










 










 private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, Debugger<Field, Fact, Stmt, Method> debugger, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.resolvedAccPath = resolvedAccPath;










 this.sourceFact = sourceFact;










 propagated=true;










 }










 



......@@ -39,35 +43,53 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 }





















 protected void processIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, fact.getFact());










 }










 else {










 propagated=true;










 sourceFact = fact.getFact();










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(joinStmt, new WrappedFact<Field, Fact, Stmt, Method>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }










 };










 










 private boolean isNullOrCallEdgeResolver(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(resolver == null)










 return true;










 if(resolver instanceof CallEdgeResolver) {










 return !(resolver instanceof ZeroCallEdgeResolver);










 }










 return false;










 }










 










 @Override










 protected void processIncomingPotentialPrefix(WrappedFact<Field, Fact, Stmt, Method> fact) {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 fact.getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest();










 }





















 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 unlock();










 protected void processIncomingPotentialPrefix(final WrappedFact<Field, Fact, Stmt, Method> fact) {










 if(isNullOrCallEdgeResolver(fact.getResolver())) {










 canBeResolvedEmpty();










 }










 else {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccessPath);










 fact.getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest(resolver);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 unlock();










 }










 }










 










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(analyzer, joinStmt, newAccPath, this);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, debugger, this);










 }





















 @Override



......@@ -77,12 +99,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver




















 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+joinStmt+">";










 }





















 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 public Stmt getJoinStmt() {



......














src/heros/fieldsens/Debugger.java








View file @ 7b66dd07






......@@ -11,18 +11,24 @@









package heros.fieldsens;





















import heros.InterproceduralCFG;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> {





















 public abstract void setICFG(I icfg);





















 public abstract void initialSeed(Stmt stmt);










public interface Debugger<Field, Fact, Stmt, Method> {





















 public void setICFG(InterproceduralCFG<Stmt, Method> icfg);










 public void initialSeed(Stmt stmt);










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver);










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void askedToResolve(Resolver<Field, Fact, Stmt, Method> resolver, Constraint<Field> constraint);










 










 public static class NullDebugger <Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










 public static class NullDebugger <Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 










 }














......@@ -30,6 +36,40 @@ public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 public void initialSeed(Stmt stmt) {










 










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void askedToResolve(Resolver<Field, Fact, Stmt, Method> resolver, Constraint<Field> constraint) {










 










 }










 










 }










}




\ No newline at end of file














src/heros/fieldsens/FieldSensitiveIFDSSolver.java








View file @ 7b66dd07






......@@ -33,13 +33,13 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 private IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem;










 protected Context<FieldRef, D, N,M> context;










 private Debugger<FieldRef, D, N, M, I> debugger;










 protected Debugger<FieldRef, D, N, M> debugger;










 private Scheduler scheduler;





















 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M> debugger, Scheduler scheduler) {










 this.tabulationProblem = tabulationProblem;










 this.scheduler = scheduler;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M>() : debugger;










 this.debugger.setICFG(tabulationProblem.interproceduralCFG());










 context = initContext(tabulationProblem, factHandler);










 submitInitialSeeds();



......@@ -57,7 +57,7 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur









 }










 










 protected MethodAnalyzer<FieldRef, D, N, M> createMethodAnalyzer(M method) {










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context);










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context, debugger);










 }





















 /**



......














src/heros/fieldsens/MethodAnalyzerImpl.java








View file @ 7b66dd07






......@@ -22,14 +22,16 @@ public class MethodAnalyzerImpl<Field,Fact, Stmt, Method>









 new DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Fact key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context) {










 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.debugger = debugger;










 }










 










 @Override



......














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ 7b66dd07






......@@ -32,7 +32,7 @@ import com.google.common.collect.Lists;









import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {










public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {





















 private static final Logger logger = LoggerFactory.getLogger(PerAccessPathMethodAnalyzer.class);










 private Fact sourceFact;



......@@ -44,23 +44,25 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private CallEdgeResolver<Field, Fact, Stmt, Method> callEdgeResolver;










 private PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context) {










 this(method, sourceFact, context, new AccessPath<Field>(), null);










 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(method, sourceFact, context, debugger, new AccessPath<Field>(), null);










 }










 










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 this.debugger = debugger;










 if(method == null)










 throw new IllegalArgumentException("Method must be not null");










 this.parent = parent;



......@@ -69,16 +71,16 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 this.accessPath = accPath;










 this.context = context;










 if(parent == null) {










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this);










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler, debugger) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger);










 }










 else {










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, parent.callEdgeResolver);










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger, parent.callEdgeResolver);










 }










 log("initialized");










 }










 










 public PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createWithAccessPath(AccessPath<Field> accPath) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, accPath, this);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, debugger, accPath, this);










 }










 










 WrappedFact<Field, Fact, Stmt, Method> wrappedSource() {



......@@ -94,7 +96,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }





















 private void bootstrapAtMethodStartPoints() {










 callEdgeResolver.interest();










 callEdgeResolver.interest(callEdgeResolver);










 for(Stmt startPoint : context.icfg.getStartPointsOf(method)) {










 WrappedFactAtStatement<Field, Fact, Stmt, Method> target = new WrappedFactAtStatement<Field, Fact, Stmt, Method>(startPoint, wrappedSource());










 if(!reachableStatements.containsKey(target))



......@@ -121,6 +123,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 log("Edge to "+factAtStmt);










 reachableStatements.put(factAtStmt, factAtStmt);










 context.scheduler.schedule(new Job(factAtStmt));










 debugger.edgeTo(this, factAtStmt);










 }










 }














......@@ -137,7 +140,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Method> calledMethods = context.icfg.getCalleesOfCallAt(factAtStmt.getStatement());










 for (Method calledMethod : calledMethods) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallFlowFunction(factAtStmt.getStatement(), calledMethod);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 MethodAnalyzer<Field, Fact, Stmt, Method> analyzer = context.getAnalyzer(calledMethod);



......@@ -162,7 +165,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(callSite);










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(callSite, method, factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 context.getAnalyzer(context.icfg.getMethodOf(callSite)).addUnbalancedReturnFlow(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()), callSite);



......@@ -174,15 +177,13 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 //instead we thus call the return flow function will a null caller










 if(callSites.isEmpty()) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(null, method, factAtStmt.getStatement(), null);










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 }










 }










 }










 










 private void processCallToReturnEdge(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 Stmt stmt = factAtStmt.getStatement();










 int numberOfPredecessors = context.icfg.getPredsOf(stmt).size(); 










 if(numberOfPredecessors > 1 || (context.icfg.isStartPoint(stmt) && numberOfPredecessors > 0)) {










 if(isLoopStart(factAtStmt.getStatement())) {










 ctrFlowJoinResolvers.getOrCreate(factAtStmt.getAsFactAtStatement()).addIncoming(factAtStmt.getWrappedFact());










 }










 else {



......@@ -194,7 +195,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(factAtStmt.getStatement());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallToReturnFlowFunction(factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()));



......@@ -203,15 +204,31 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }





















 private void processNormalFlow(WrappedFactAtStatement<Field,Fact, Stmt, Method> factAtStmt) {










 Stmt stmt = factAtStmt.getStatement();










 int numberOfPredecessors = context.icfg.getPredsOf(stmt).size();










 if((numberOfPredecessors > 1 && !context.icfg.isExitStmt(stmt)) || (context.icfg.isStartPoint(stmt) && numberOfPredecessors > 0)) {










 if(isLoopStart(factAtStmt.getStatement())) {










 ctrFlowJoinResolvers.getOrCreate(factAtStmt.getAsFactAtStatement()).addIncoming(factAtStmt.getWrappedFact());










 }










 else {










 processNormalNonJoiningFlow(factAtStmt);










 }










 }










 










 private boolean isLoopStart(Stmt stmt) {










 int numberOfPredecessors = context.icfg.getPredsOf(stmt).size();










 if((numberOfPredecessors > 1 && !context.icfg.isExitStmt(stmt)) || (context.icfg.isStartPoint(stmt) && numberOfPredecessors > 0)) {










 Set<Stmt> visited = Sets.newHashSet();










 List<Stmt> worklist = Lists.newLinkedList();










 worklist.addAll(context.icfg.getPredsOf(stmt));










 while(!worklist.isEmpty()) {










 Stmt current = worklist.remove(0);










 if(current.equals(stmt))










 return true;










 if(!visited.add(current))










 continue;










 worklist.addAll(context.icfg.getPredsOf(current));










 }










 }










 return false;










 }





















 void processFlowFromJoinStmt(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 if(context.icfg.isCallStmt(factAtStmt.getStatement()))



......@@ -223,7 +240,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private void processNormalNonJoiningFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 final List<Stmt> successors = context.icfg.getSuccsOf(factAtStmt.getStatement());










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getNormalFlowFunction(factAtStmt.getStatement());










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (final ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 if(targetFact.getConstraint() == null)










 scheduleEdgeTo(successors, targetFact.getFact());



......@@ -245,9 +262,10 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }










 










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 if(!isBootStrapped())










 if(isBootStrapped()) {










 context.factHandler.merge(sourceFact, incEdge.getCalleeSourceFact().getFact());










 } else 










 bootstrapAtMethodStartPoints();










 










 callEdgeResolver.addIncoming(incEdge);










 }














......@@ -255,7 +273,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(incEdge.getCallSite());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(incEdge.getCallSite(), method, exitFact.getStatement(), returnSite);










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver()));










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targets) {










 context.factHandler.restoreCallingContext(targetFact.getFact().getFact(), incEdge.getCallerCallSiteFact().getFact());










 //TODO handle constraint



......@@ -293,10 +311,12 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {




















 public Job(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 this.factAtStmt = factAtStmt;










 debugger.newJob(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }





















 @Override










 public void run() {










 debugger.jobStarted(PerAccessPathMethodAnalyzer.this, factAtStmt);










 if (context.icfg.isCallStmt(factAtStmt.getStatement())) {










 processCall(factAtStmt);










 } else {



......@@ -307,12 +327,22 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 processNormalFlow(factAtStmt);










 }










 }










 debugger.jobFinished(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }










 










 @Override










 public String toString() {










 return "Job: "+factAtStmt;










 }










 }





















 public CallEdgeResolver<Field, Fact, Stmt, Method> getCallEdgeResolver() {










 return callEdgeResolver;










 }





















 public Method getMethod() {










 return method;










 }










 










//	public void debugReachables() {










//		JsonDocument root = new JsonDocument();



......














src/heros/fieldsens/Resolver.java








View file @ 7b66dd07






......@@ -13,12 +13,14 @@ package heros.fieldsens;









import heros.fieldsens.FlowFunction.Constraint;





















import java.util.List;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Sets;





















public abstract class Resolver<Field, Fact, Stmt, Method> {





















 private boolean interest = false;










 private Set<Resolver<Field, Fact, Stmt, Method>> interest = Sets.newHashSet();










 private List<InterestCallback<Field, Fact, Stmt, Method>> interestCallbacks = Lists.newLinkedList();










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer;










 private boolean canBeResolvedEmpty = false;



......@@ -29,18 +31,14 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {




















 public abstract void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback);










 










 public void interest() {










 if(interest)










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(!interest.add(resolver))










 return;





















 log("Interest given");










 interest = true;










 log("Interest given by: "+resolver);










 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.interest(analyzer, this);










 callback.interest(analyzer, resolver);










 }










 










 if(canBeResolvedEmpty)










 interestCallbacks = null;










 }










 










 protected void canBeResolvedEmpty() {



......@@ -51,23 +49,19 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {









 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.canBeResolvedEmpty();










 }










 










 if(interest)










 interestCallbacks = null;










 }





















 public boolean isInterestGiven() {










 return interest;










 return !interest.isEmpty();










 }





















 protected void registerCallback(InterestCallback<Field, Fact, Stmt, Method> callback) {










 if(interest) {










 callback.interest(analyzer, this);










 }










 else {










 log("Callback registered");










 interestCallbacks.add(callback);










 if(!interest.isEmpty()) {










 for(Resolver<Field, Fact, Stmt, Method> resolver : Lists.newLinkedList(interest))










 callback.interest(analyzer, resolver);










 }










 log("Callback registered");










 interestCallbacks.add(callback);





















 if(canBeResolvedEmpty)










 callback.canBeResolvedEmpty();



......














src/heros/fieldsens/ResolverTemplate.java








View file @ 7b66dd07






......@@ -13,6 +13,7 @@ package heros.fieldsens;









import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Sets;














......@@ -26,11 +27,25 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> allResolversInExclHierarchy;










 protected AccessPath<Field> resolvedAccessPath;










 protected Debugger<Field, Fact, Stmt, Method> debugger;





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent) {










 AccessPath<Field> resolvedAccessPath,










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, 










 Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer);










 this.resolvedAccessPath = resolvedAccessPath;










 this.parent = parent;










 this.debugger = debugger;










 if(parent == null || resolvedAccessPath.getExclusions().isEmpty()) {










 allResolversInExclHierarchy = Maps.newHashMap();










 }










 else {










 allResolversInExclHierarchy = parent.allResolversInExclHierarchy;










 }










 debugger.newResolver(analyzer, this);










 }










 










 protected boolean isLocked() {



......@@ -49,25 +64,23 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 recursionLock = false;










 }










 










 protected abstract AccessPath<Field> getResolvedAccessPath();










 










 protected abstract AccessPath<Field> getAccessPathOf(Incoming inc);










 










 public void addIncoming(Incoming inc) {










 if(getResolvedAccessPath().isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(resolvedAccessPath.isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge: "+inc);










 if(!incomingEdges.add(inc))










 return;










 










 interest();










 interest(this);










 










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : nestedResolvers.values()) {










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : Lists.newLinkedList(nestedResolvers.values())) {










 nestedResolver.addIncoming(inc);










 }










 










 processIncomingGuaranteedPrefix(inc);










 }










 else if(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 else if(getAccessPathOf(inc).isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 processIncomingPotentialPrefix(inc);










 }










 }



......@@ -79,25 +92,33 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(getResolvedAccessPath()) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(getResolvedAccessPath());










 debugger.askedToResolve(this, constraint);










 if(constraint.canBeAppliedTo(resolvedAccessPath) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(resolvedAccessPath);










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = getOrCreateNestedResolver(newAccPath);










 assert nestedResolver.getResolvedAccessPath().equals(constraint.applyToAccessPath(getResolvedAccessPath()));










 assert nestedResolver.resolvedAccessPath.equals(constraint.applyToAccessPath(resolvedAccessPath));










 nestedResolver.registerCallback(callback);










 }










 }





















 protected ResolverTemplate<Field, Fact, Stmt, Method, Incoming> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 if(getResolvedAccessPath().equals(newAccPath))










 if(resolvedAccessPath.equals(newAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(newAccPath)) {










 assert getResolvedAccessPath().getDeltaTo(newAccPath).accesses.length <= 1;










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = createNestedResolver(newAccPath);










 nestedResolvers.put(newAccPath, nestedResolver);










 










 for(Incoming inc : incomingEdges) {










 nestedResolver.addIncoming(inc);










 assert resolvedAccessPath.getDeltaTo(newAccPath).accesses.length <= 1;










 if(allResolversInExclHierarchy.containsKey(newAccPath)) {










 return allResolversInExclHierarchy.get(newAccPath);










 }










 else {










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver = createNestedResolver(newAccPath);










 if(!resolvedAccessPath.getExclusions().isEmpty() || !newAccPath.getExclusions().isEmpty())










 allResolversInExclHierarchy.put(newAccPath, nestedResolver);










 nestedResolvers.put(newAccPath, nestedResolver);










 for(Incoming inc : Lists.newLinkedList(incomingEdges)) {










 nestedResolver.addIncoming(inc);










 }










 return nestedResolver;










 }










 }










 return nestedResolvers.get(newAccPath);



......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ 7b66dd07






......@@ -20,34 +20,32 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {





















 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(analyzer, returnSite, new AccessPath<Field>(), null);










 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, returnSite, null, debugger, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated = false;










 }





















 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.resolvedAccPath = resolvedAccPath;










 this.sourceFact = sourceFact;










 propagated=true;










 }










 










 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+returnSite+">";










 }










 










 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 protected AccessPath<Field> getAccessPathOf(ReturnEdge<Field, Fact, Stmt, Method> inc) {










 return inc.incAccessPath;










 return inc.usedAccessPathOfIncResolver.applyTo(inc.incAccessPath);










 }










 










 public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact, 



......@@ -58,8 +56,12 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }










 










 protected void processIncomingGuaranteedPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, retEdge.incFact);










 } 










 else {










 propagated=true;










 sourceFact = retEdge.incFact;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<Field, Fact, Stmt, Method>(retEdge.incFact, new AccessPath<Field>(), this)));










 }



......@@ -76,26 +78,40 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(analyzer, returnSite, newAccPath, this);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, debugger, newAccPath, this);










 }










 










 public Stmt getReturnSite() {










 return returnSite;










 }










 










 private boolean isNullOrCallEdgeResolver(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(resolver == null)










 return true;










 if(resolver instanceof CallEdgeResolver) {










 return !(resolver instanceof ZeroCallEdgeResolver);










 }










 return false;










 }










 










 private void resolveViaDelta(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(retEdge.incResolver == null || retEdge.incResolver instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.incResolver)) {










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPath());










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(resolvedAccessPath);










 assert delta.accesses.length <= 1;










 retEdge.incResolver.resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {





















 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










 if(resolver instanceof ZeroCallEdgeResolver) {










 ReturnSiteResolver.this.interest(((ZeroCallEdgeResolver<Field, Fact, Stmt, Method>) resolver).










 copyWithAnalyzer(ReturnSiteResolver.this.analyzer));










 } else {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(resolvedAccessPath)));










 ReturnSiteResolver.this.interest(ReturnSiteResolver.this);










 }










 }










 










 @Override



......@@ -107,24 +123,28 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }





















 private void resolveViaDeltaAndPotentiallyDelegateToCallSite(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath));










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 AccessPath<Field> inc = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath);










 if(!retEdge.callDelta.canBeAppliedTo(inc))










 return;










 










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(inc);










 if(resolvedAccessPath.isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest();










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 interest(this);










 } else if(currAccPath.isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }










 }





















 protected void resolveViaCallSiteResolver(final ReturnEdge<Field, Fact, Stmt, Method> retEdge, AccessPath<Field> currAccPath) {










 if(retEdge.resolverAtCaller == null || retEdge.resolverAtCaller instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.resolverAtCaller)) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(resolvedAccessPath)), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(resolver);










 }










 










 @Override



......














src/heros/fieldsens/SourceStmtAnnotatedMethodAnalyzer.java








View file @ 7b66dd07






......@@ -21,18 +21,21 @@ public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>









 private Method method;










 private DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {





















 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Key<Fact, Stmt> key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Synchronizer<Stmt> synchronizer;










 private Debugger<Field, Fact, Stmt, Method> debugger;










 










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer) {










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.synchronizer = synchronizer;










 this.debugger = debugger;










 }










 










 @Override



......














src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ 7b66dd07






......@@ -16,11 +16,15 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes




















 private ZeroHandler<Field> zeroHandler;





















 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler) {










 super(analyzer);










 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler, Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer, debugger);










 this.zeroHandler = zeroHandler;










 }





















 ZeroCallEdgeResolver<Field, Fact, Stmt, Method> copyWithAnalyzer(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 return new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(analyzer, zeroHandler, debugger);










 }










 










 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 if(zeroHandler.shouldGenerateAccessPath(constraint.applyToAccessPath(new AccessPath<Field>())))



......@@ -28,7 +32,7 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 }










 










 @Override










 public void interest() {










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 }










 










 @Override



......@@ -36,6 +40,11 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 return this;










 }





















 @Override










 public String toString() {










 return "[0-Resolver"+super.toString()+"]";










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;



......









Prev


1


2


Next















Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

7b66dd07







Open sidebar



Joshua Garcia heros
Commits

7b66dd07




Open sidebar

Joshua Garcia heros
Commits

7b66dd07


Joshua GarciaherosherosCommits
7b66dd07








Commit
7b66dd07


authored
Oct 09, 2015
by


Steven Arzt



Browse files




Merge branch 'develop' of github.com:Sable/heros into develop


Conflicts:
	.classpath






parents
c3065cba
e0a26844













Changes
32




Hide whitespace changes

Inline
Side-by-side















.classpath








View file @ 7b66dd07













<?xml version="1.0" encoding="UTF-8"?>










<classpath>










 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>










 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry kind="src" path="test"/>










 <classpathentry including="**/*.java" kind="src" output="target/classes" path="src">










 <attributes>










 <attribute name="optional" value="true"/>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry kind="src" output="target/test-classes" path="test">










 <attributes>










 <attribute name="optional" value="true"/>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry exported="true" kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry kind="lib" path="junit.jar"/>










 <classpathentry kind="lib" path="org.hamcrest.core_1.3.0.jar"/>










 <classpathentry kind="lib" path="mockito-all-1.9.5.jar"/>










 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6">










 <attributes>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry kind="con" path="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER">










 <attributes>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry exported="true" kind="lib" path="guava-18.0.jar"/>










 <classpathentry kind="output" path="bin"/>










 <classpathentry kind="output" path="target/classes"/>










</classpath>














.gitignore








View file @ 7b66dd07






......@@ -8,3 +8,5 @@ bin









heros-trunk.jar










/javadoc










/reports










/debug










/target/














.project








View file @ 7b66dd07













<?xml version="1.0" encoding="UTF-8"?>










<projectDescription>










 <name>heros</name>










 <comment></comment>










 <projects>










 </projects>










 <buildSpec>










 <buildCommand>










 <name>org.eclipse.jdt.core.javabuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.ManifestBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.SchemaBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 </buildSpec>










 <natures>










 <nature>org.eclipse.jdt.core.javanature</nature>










 <nature>org.eclipse.pde.PluginNature</nature>










 <nature>edu.umd.cs.findbugs.plugin.eclipse.findbugsNature</nature>










 </natures>










</projectDescription>









<?xml version="1.0" encoding="UTF-8"?>










<projectDescription>










 <name>heros</name>










 <comment></comment>










 <projects>










 </projects>










 <buildSpec>










 <buildCommand>










 <name>org.eclipse.jdt.core.javabuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.ManifestBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.SchemaBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.m2e.core.maven2Builder</name>










 <arguments>










 </arguments>










 </buildCommand>










 </buildSpec>










 <natures>










 <nature>org.eclipse.m2e.core.maven2Nature</nature>










 <nature>org.eclipse.jdt.core.javanature</nature>










 <nature>org.eclipse.pde.PluginNature</nature>










 <nature>edu.umd.cs.findbugs.plugin.eclipse.findbugsNature</nature>










 </natures>










</projectDescription>














pom.xml



0 â†’ 100644







View file @ 7b66dd07













<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">










 <modelVersion>4.0.0</modelVersion>










 <groupId>heros</groupId>










 <artifactId>heros</artifactId>










 <version>0.0.1-SNAPSHOT</version>










 <build>










 <sourceDirectory>src</sourceDirectory>










 <testSourceDirectory>test</testSourceDirectory>










 <resources>










 <resource>










 <directory>src</directory>










 <excludes>










 <exclude>**/*.java</exclude>










 </excludes>










 </resource>










 </resources>










 <plugins>










 <plugin>










 <artifactId>maven-compiler-plugin</artifactId>










 <version>3.1</version>










 <configuration>










 <source>1.6</source>










 <target>1.6</target>










 </configuration>










 </plugin>










 </plugins>










 </build>










 <dependencies>










 <dependency>










 <groupId>org.functionaljava</groupId>










 <artifactId>functionaljava</artifactId>










 <version>4.2</version>










 </dependency>










 </dependencies>










</project>




\ No newline at end of file














src/heros/edgefunc/AllTop.java








View file @ 7b66dd07






......@@ -26,7 +26,7 @@ public class AllTop<V> implements EdgeFunction<V> {









 }





















 public EdgeFunction<V> composeWith(EdgeFunction<V> secondFunction) {










 return secondFunction;










 return this;










 }





















 public EdgeFunction<V> joinWith(EdgeFunction<V> otherFunction) {



......














src/heros/fieldsens/AccessPath.java








View file @ 7b66dd07






......@@ -270,4 +270,8 @@ public class AccessPath<T> {









 public T getFirstAccess() {










 return accesses[0];










 }





















 Set<T> getExclusions() {










 return exclusions;










 }










}














src/heros/fieldsens/AccessPathHandler.java








View file @ 7b66dd07






......@@ -19,10 +19,12 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {




















 private AccessPath<Field> accessPath;










 private Resolver<Field, Fact, Stmt, Method> resolver;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.accessPath = accessPath;










 this.resolver = resolver;










 this.debugger = debugger;










 }





















 public boolean canRead(Field field) {



......@@ -42,7 +44,7 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {









 }










 










 public ConstrainedFact<Field, Fact, Stmt, Method> generateWithEmptyAccessPath(Fact fact, ZeroHandler<Field> zeroHandler) {










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler)));










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler, debugger)));










 }










 










 public ResultBuilder<Field, Fact, Stmt, Method> prepend(final Field field) {



......@@ -73,15 +75,10 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {









 public ResultBuilder<Field, Fact, Stmt, Method> overwrite(final Field field) {










 if(mayBeEmpty())










 return new ResultBuilder<Field, Fact, Stmt, Method>() {










 @SuppressWarnings("unchecked")










 @Override










 public ConstrainedFact<Field, Fact, Stmt, Method> generate(Fact fact) {










 if(accessPath.canRead(field)) {










 AccessPath<Field> tempAccPath = accessPath.removeFirst();










 if(tempAccPath.hasEmptyAccessPath())










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, tempAccPath.appendExcludedFieldReference(field), resolver));










 else










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, tempAccPath, resolver));










 } else if(accessPath.isAccessInExclusions(field))










 if(accessPath.isAccessInExclusions(field))










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, accessPath, resolver));










 else










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, accessPath.appendExcludedFieldReference(field), resolver), new WriteFieldConstraint<Field>(field));



......














src/heros/fieldsens/BiDiFieldSensitiveIFDSSolver.java








View file @ 7b66dd07






......@@ -31,7 +31,7 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 public BiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> forwardProblem,










 IFDSTabulationProblem<Stmt, Field, Fact, Method, I> backwardProblem, 










 FactMergeHandler<Fact> factHandler, 










 Debugger<Field, Fact, Stmt, Method, I> debugger,










 Debugger<Field, Fact, Stmt, Method> debugger,










 Scheduler scheduler) {










 










 this.scheduler = scheduler;



......@@ -46,11 +46,11 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 }





















 private FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I> createSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> problem, 










 FactMergeHandler<Fact> factHandler, Debugger<Field, Fact, Stmt, Method, I> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 FactMergeHandler<Fact> factHandler, Debugger<Field, Fact, Stmt, Method> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 return new FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I>(problem, factHandler, debugger, scheduler) {










 @Override










 protected MethodAnalyzer<Field, Fact, Stmt, Method> createMethodAnalyzer(Method method) {










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer);










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer, debugger);










 }










 };










 }



......














src/heros/fieldsens/CallEdge.java








View file @ 7b66dd07






......@@ -61,14 +61,22 @@ public class CallEdge<Field, Fact, Stmt, Method> {









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFactWithDelta = new WrappedFact<Field, Fact, Stmt, Method>(calleeSourceFact.getFact(), delta.applyTo(calleeSourceFact.getAccessPath()), resolver);










 if(interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath()) != PrefixTestResult.GUARANTEED_PREFIX)










  throw new AssertionError();










 interestedAnalyzer.addIncomingEdge(new CallEdge<Field, Fact, Stmt, Method>(analyzer, 










 assert interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath()) == PrefixTestResult.GUARANTEED_PREFIX;










 










 CallEdge<Field, Fact, Stmt, Method> newCallEdge = new CallEdge<Field, Fact, Stmt, Method>(analyzer, 










 new WrappedFactAtStatement<Field, Fact, Stmt, Method>(factAtCallSite.getStatement(), 










 new WrappedFact<Field, Fact, Stmt, Method>(factAtCallSite.getWrappedFact().getFact(), 










 delta.applyTo(factAtCallSite.getWrappedFact().getAccessPath()), 










 resolver)), 










 calleeSourceFactWithDelta));










 calleeSourceFactWithDelta);










 










 if (resolver instanceof ZeroCallEdgeResolver) {










 interestedAnalyzer.getCallEdgeResolver().incomingEdges.add(newCallEdge);










 interestedAnalyzer.getCallEdgeResolver().interest(((ZeroCallEdgeResolver<Field, Fact, Stmt, Method>) resolver).copyWithAnalyzer(interestedAnalyzer));










 interestedAnalyzer.getCallEdgeResolver().processIncomingGuaranteedPrefix(newCallEdge);










 }










 else










 interestedAnalyzer.addIncomingEdge(newCallEdge);










 }










 










 @Override



......














src/heros/fieldsens/CallEdgeResolver.java








View file @ 7b66dd07






......@@ -17,19 +17,14 @@ import com.google.common.collect.Lists;




















class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> {





















 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 this(analyzer, null);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(analyzer, debugger, null);










 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, analyzer.getAccessPath(), parent, debugger);










 }





















 @Override










 protected AccessPath<Field> getResolvedAccessPath() {










 return analyzer.getAccessPath();










 }










 










 @Override










 protected AccessPath<Field> getAccessPathOf(CallEdge<Field, Fact, Stmt, Method> inc) {










 return inc.getCalleeSourceFact().getAccessPath();



......@@ -60,7 +55,7 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field









 










 @Override










 public String toString() {










 return "";










 return "<"+analyzer.getAccessPath()+":"+analyzer.getMethod()+">";










 }










 










 @Override



......














src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ 7b66dd07






......@@ -18,18 +18,22 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {





















 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(analyzer, joinStmt, new AccessPath<Field>(), null);










 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), debugger, null);










 this.factMergeHandler = factMergeHandler;










 propagated=false;










 }










 










 private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, Debugger<Field, Fact, Stmt, Method> debugger, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.resolvedAccPath = resolvedAccPath;










 this.sourceFact = sourceFact;










 propagated=true;










 }










 



......@@ -39,35 +43,53 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 }





















 protected void processIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, fact.getFact());










 }










 else {










 propagated=true;










 sourceFact = fact.getFact();










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(joinStmt, new WrappedFact<Field, Fact, Stmt, Method>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }










 };










 










 private boolean isNullOrCallEdgeResolver(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(resolver == null)










 return true;










 if(resolver instanceof CallEdgeResolver) {










 return !(resolver instanceof ZeroCallEdgeResolver);










 }










 return false;










 }










 










 @Override










 protected void processIncomingPotentialPrefix(WrappedFact<Field, Fact, Stmt, Method> fact) {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 fact.getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest();










 }





















 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 unlock();










 protected void processIncomingPotentialPrefix(final WrappedFact<Field, Fact, Stmt, Method> fact) {










 if(isNullOrCallEdgeResolver(fact.getResolver())) {










 canBeResolvedEmpty();










 }










 else {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccessPath);










 fact.getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest(resolver);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 unlock();










 }










 }










 










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(analyzer, joinStmt, newAccPath, this);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, debugger, this);










 }





















 @Override



......@@ -77,12 +99,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver




















 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+joinStmt+">";










 }





















 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 public Stmt getJoinStmt() {



......














src/heros/fieldsens/Debugger.java








View file @ 7b66dd07






......@@ -11,18 +11,24 @@









package heros.fieldsens;





















import heros.InterproceduralCFG;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> {





















 public abstract void setICFG(I icfg);





















 public abstract void initialSeed(Stmt stmt);










public interface Debugger<Field, Fact, Stmt, Method> {





















 public void setICFG(InterproceduralCFG<Stmt, Method> icfg);










 public void initialSeed(Stmt stmt);










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver);










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void askedToResolve(Resolver<Field, Fact, Stmt, Method> resolver, Constraint<Field> constraint);










 










 public static class NullDebugger <Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










 public static class NullDebugger <Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 










 }














......@@ -30,6 +36,40 @@ public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 public void initialSeed(Stmt stmt) {










 










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void askedToResolve(Resolver<Field, Fact, Stmt, Method> resolver, Constraint<Field> constraint) {










 










 }










 










 }










}




\ No newline at end of file














src/heros/fieldsens/FieldSensitiveIFDSSolver.java








View file @ 7b66dd07






......@@ -33,13 +33,13 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 private IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem;










 protected Context<FieldRef, D, N,M> context;










 private Debugger<FieldRef, D, N, M, I> debugger;










 protected Debugger<FieldRef, D, N, M> debugger;










 private Scheduler scheduler;





















 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M> debugger, Scheduler scheduler) {










 this.tabulationProblem = tabulationProblem;










 this.scheduler = scheduler;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M>() : debugger;










 this.debugger.setICFG(tabulationProblem.interproceduralCFG());










 context = initContext(tabulationProblem, factHandler);










 submitInitialSeeds();



......@@ -57,7 +57,7 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur









 }










 










 protected MethodAnalyzer<FieldRef, D, N, M> createMethodAnalyzer(M method) {










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context);










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context, debugger);










 }





















 /**



......














src/heros/fieldsens/MethodAnalyzerImpl.java








View file @ 7b66dd07






......@@ -22,14 +22,16 @@ public class MethodAnalyzerImpl<Field,Fact, Stmt, Method>









 new DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Fact key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context) {










 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.debugger = debugger;










 }










 










 @Override



......














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ 7b66dd07






......@@ -32,7 +32,7 @@ import com.google.common.collect.Lists;









import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {










public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {





















 private static final Logger logger = LoggerFactory.getLogger(PerAccessPathMethodAnalyzer.class);










 private Fact sourceFact;



......@@ -44,23 +44,25 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private CallEdgeResolver<Field, Fact, Stmt, Method> callEdgeResolver;










 private PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context) {










 this(method, sourceFact, context, new AccessPath<Field>(), null);










 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(method, sourceFact, context, debugger, new AccessPath<Field>(), null);










 }










 










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 this.debugger = debugger;










 if(method == null)










 throw new IllegalArgumentException("Method must be not null");










 this.parent = parent;



......@@ -69,16 +71,16 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 this.accessPath = accPath;










 this.context = context;










 if(parent == null) {










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this);










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler, debugger) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger);










 }










 else {










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, parent.callEdgeResolver);










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger, parent.callEdgeResolver);










 }










 log("initialized");










 }










 










 public PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createWithAccessPath(AccessPath<Field> accPath) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, accPath, this);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, debugger, accPath, this);










 }










 










 WrappedFact<Field, Fact, Stmt, Method> wrappedSource() {



......@@ -94,7 +96,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }





















 private void bootstrapAtMethodStartPoints() {










 callEdgeResolver.interest();










 callEdgeResolver.interest(callEdgeResolver);










 for(Stmt startPoint : context.icfg.getStartPointsOf(method)) {










 WrappedFactAtStatement<Field, Fact, Stmt, Method> target = new WrappedFactAtStatement<Field, Fact, Stmt, Method>(startPoint, wrappedSource());










 if(!reachableStatements.containsKey(target))



......@@ -121,6 +123,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 log("Edge to "+factAtStmt);










 reachableStatements.put(factAtStmt, factAtStmt);










 context.scheduler.schedule(new Job(factAtStmt));










 debugger.edgeTo(this, factAtStmt);










 }










 }














......@@ -137,7 +140,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Method> calledMethods = context.icfg.getCalleesOfCallAt(factAtStmt.getStatement());










 for (Method calledMethod : calledMethods) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallFlowFunction(factAtStmt.getStatement(), calledMethod);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 MethodAnalyzer<Field, Fact, Stmt, Method> analyzer = context.getAnalyzer(calledMethod);



......@@ -162,7 +165,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(callSite);










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(callSite, method, factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 context.getAnalyzer(context.icfg.getMethodOf(callSite)).addUnbalancedReturnFlow(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()), callSite);



......@@ -174,15 +177,13 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 //instead we thus call the return flow function will a null caller










 if(callSites.isEmpty()) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(null, method, factAtStmt.getStatement(), null);










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 }










 }










 }










 










 private void processCallToReturnEdge(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 Stmt stmt = factAtStmt.getStatement();










 int numberOfPredecessors = context.icfg.getPredsOf(stmt).size(); 










 if(numberOfPredecessors > 1 || (context.icfg.isStartPoint(stmt) && numberOfPredecessors > 0)) {










 if(isLoopStart(factAtStmt.getStatement())) {










 ctrFlowJoinResolvers.getOrCreate(factAtStmt.getAsFactAtStatement()).addIncoming(factAtStmt.getWrappedFact());










 }










 else {



......@@ -194,7 +195,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(factAtStmt.getStatement());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallToReturnFlowFunction(factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()));



......@@ -203,15 +204,31 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }





















 private void processNormalFlow(WrappedFactAtStatement<Field,Fact, Stmt, Method> factAtStmt) {










 Stmt stmt = factAtStmt.getStatement();










 int numberOfPredecessors = context.icfg.getPredsOf(stmt).size();










 if((numberOfPredecessors > 1 && !context.icfg.isExitStmt(stmt)) || (context.icfg.isStartPoint(stmt) && numberOfPredecessors > 0)) {










 if(isLoopStart(factAtStmt.getStatement())) {










 ctrFlowJoinResolvers.getOrCreate(factAtStmt.getAsFactAtStatement()).addIncoming(factAtStmt.getWrappedFact());










 }










 else {










 processNormalNonJoiningFlow(factAtStmt);










 }










 }










 










 private boolean isLoopStart(Stmt stmt) {










 int numberOfPredecessors = context.icfg.getPredsOf(stmt).size();










 if((numberOfPredecessors > 1 && !context.icfg.isExitStmt(stmt)) || (context.icfg.isStartPoint(stmt) && numberOfPredecessors > 0)) {










 Set<Stmt> visited = Sets.newHashSet();










 List<Stmt> worklist = Lists.newLinkedList();










 worklist.addAll(context.icfg.getPredsOf(stmt));










 while(!worklist.isEmpty()) {










 Stmt current = worklist.remove(0);










 if(current.equals(stmt))










 return true;










 if(!visited.add(current))










 continue;










 worklist.addAll(context.icfg.getPredsOf(current));










 }










 }










 return false;










 }





















 void processFlowFromJoinStmt(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 if(context.icfg.isCallStmt(factAtStmt.getStatement()))



......@@ -223,7 +240,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private void processNormalNonJoiningFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 final List<Stmt> successors = context.icfg.getSuccsOf(factAtStmt.getStatement());










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getNormalFlowFunction(factAtStmt.getStatement());










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (final ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 if(targetFact.getConstraint() == null)










 scheduleEdgeTo(successors, targetFact.getFact());



......@@ -245,9 +262,10 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }










 










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 if(!isBootStrapped())










 if(isBootStrapped()) {










 context.factHandler.merge(sourceFact, incEdge.getCalleeSourceFact().getFact());










 } else 










 bootstrapAtMethodStartPoints();










 










 callEdgeResolver.addIncoming(incEdge);










 }














......@@ -255,7 +273,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(incEdge.getCallSite());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(incEdge.getCallSite(), method, exitFact.getStatement(), returnSite);










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver()));










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targets) {










 context.factHandler.restoreCallingContext(targetFact.getFact().getFact(), incEdge.getCallerCallSiteFact().getFact());










 //TODO handle constraint



......@@ -293,10 +311,12 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {




















 public Job(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 this.factAtStmt = factAtStmt;










 debugger.newJob(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }





















 @Override










 public void run() {










 debugger.jobStarted(PerAccessPathMethodAnalyzer.this, factAtStmt);










 if (context.icfg.isCallStmt(factAtStmt.getStatement())) {










 processCall(factAtStmt);










 } else {



......@@ -307,12 +327,22 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 processNormalFlow(factAtStmt);










 }










 }










 debugger.jobFinished(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }










 










 @Override










 public String toString() {










 return "Job: "+factAtStmt;










 }










 }





















 public CallEdgeResolver<Field, Fact, Stmt, Method> getCallEdgeResolver() {










 return callEdgeResolver;










 }





















 public Method getMethod() {










 return method;










 }










 










//	public void debugReachables() {










//		JsonDocument root = new JsonDocument();



......














src/heros/fieldsens/Resolver.java








View file @ 7b66dd07






......@@ -13,12 +13,14 @@ package heros.fieldsens;









import heros.fieldsens.FlowFunction.Constraint;





















import java.util.List;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Sets;





















public abstract class Resolver<Field, Fact, Stmt, Method> {





















 private boolean interest = false;










 private Set<Resolver<Field, Fact, Stmt, Method>> interest = Sets.newHashSet();










 private List<InterestCallback<Field, Fact, Stmt, Method>> interestCallbacks = Lists.newLinkedList();










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer;










 private boolean canBeResolvedEmpty = false;



......@@ -29,18 +31,14 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {




















 public abstract void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback);










 










 public void interest() {










 if(interest)










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(!interest.add(resolver))










 return;





















 log("Interest given");










 interest = true;










 log("Interest given by: "+resolver);










 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.interest(analyzer, this);










 callback.interest(analyzer, resolver);










 }










 










 if(canBeResolvedEmpty)










 interestCallbacks = null;










 }










 










 protected void canBeResolvedEmpty() {



......@@ -51,23 +49,19 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {









 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.canBeResolvedEmpty();










 }










 










 if(interest)










 interestCallbacks = null;










 }





















 public boolean isInterestGiven() {










 return interest;










 return !interest.isEmpty();










 }





















 protected void registerCallback(InterestCallback<Field, Fact, Stmt, Method> callback) {










 if(interest) {










 callback.interest(analyzer, this);










 }










 else {










 log("Callback registered");










 interestCallbacks.add(callback);










 if(!interest.isEmpty()) {










 for(Resolver<Field, Fact, Stmt, Method> resolver : Lists.newLinkedList(interest))










 callback.interest(analyzer, resolver);










 }










 log("Callback registered");










 interestCallbacks.add(callback);





















 if(canBeResolvedEmpty)










 callback.canBeResolvedEmpty();



......














src/heros/fieldsens/ResolverTemplate.java








View file @ 7b66dd07






......@@ -13,6 +13,7 @@ package heros.fieldsens;









import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Sets;














......@@ -26,11 +27,25 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> allResolversInExclHierarchy;










 protected AccessPath<Field> resolvedAccessPath;










 protected Debugger<Field, Fact, Stmt, Method> debugger;





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent) {










 AccessPath<Field> resolvedAccessPath,










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, 










 Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer);










 this.resolvedAccessPath = resolvedAccessPath;










 this.parent = parent;










 this.debugger = debugger;










 if(parent == null || resolvedAccessPath.getExclusions().isEmpty()) {










 allResolversInExclHierarchy = Maps.newHashMap();










 }










 else {










 allResolversInExclHierarchy = parent.allResolversInExclHierarchy;










 }










 debugger.newResolver(analyzer, this);










 }










 










 protected boolean isLocked() {



......@@ -49,25 +64,23 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 recursionLock = false;










 }










 










 protected abstract AccessPath<Field> getResolvedAccessPath();










 










 protected abstract AccessPath<Field> getAccessPathOf(Incoming inc);










 










 public void addIncoming(Incoming inc) {










 if(getResolvedAccessPath().isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(resolvedAccessPath.isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge: "+inc);










 if(!incomingEdges.add(inc))










 return;










 










 interest();










 interest(this);










 










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : nestedResolvers.values()) {










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : Lists.newLinkedList(nestedResolvers.values())) {










 nestedResolver.addIncoming(inc);










 }










 










 processIncomingGuaranteedPrefix(inc);










 }










 else if(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 else if(getAccessPathOf(inc).isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 processIncomingPotentialPrefix(inc);










 }










 }



......@@ -79,25 +92,33 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(getResolvedAccessPath()) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(getResolvedAccessPath());










 debugger.askedToResolve(this, constraint);










 if(constraint.canBeAppliedTo(resolvedAccessPath) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(resolvedAccessPath);










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = getOrCreateNestedResolver(newAccPath);










 assert nestedResolver.getResolvedAccessPath().equals(constraint.applyToAccessPath(getResolvedAccessPath()));










 assert nestedResolver.resolvedAccessPath.equals(constraint.applyToAccessPath(resolvedAccessPath));










 nestedResolver.registerCallback(callback);










 }










 }





















 protected ResolverTemplate<Field, Fact, Stmt, Method, Incoming> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 if(getResolvedAccessPath().equals(newAccPath))










 if(resolvedAccessPath.equals(newAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(newAccPath)) {










 assert getResolvedAccessPath().getDeltaTo(newAccPath).accesses.length <= 1;










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = createNestedResolver(newAccPath);










 nestedResolvers.put(newAccPath, nestedResolver);










 










 for(Incoming inc : incomingEdges) {










 nestedResolver.addIncoming(inc);










 assert resolvedAccessPath.getDeltaTo(newAccPath).accesses.length <= 1;










 if(allResolversInExclHierarchy.containsKey(newAccPath)) {










 return allResolversInExclHierarchy.get(newAccPath);










 }










 else {










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver = createNestedResolver(newAccPath);










 if(!resolvedAccessPath.getExclusions().isEmpty() || !newAccPath.getExclusions().isEmpty())










 allResolversInExclHierarchy.put(newAccPath, nestedResolver);










 nestedResolvers.put(newAccPath, nestedResolver);










 for(Incoming inc : Lists.newLinkedList(incomingEdges)) {










 nestedResolver.addIncoming(inc);










 }










 return nestedResolver;










 }










 }










 return nestedResolvers.get(newAccPath);



......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ 7b66dd07






......@@ -20,34 +20,32 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {





















 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(analyzer, returnSite, new AccessPath<Field>(), null);










 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, returnSite, null, debugger, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated = false;










 }





















 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.resolvedAccPath = resolvedAccPath;










 this.sourceFact = sourceFact;










 propagated=true;










 }










 










 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+returnSite+">";










 }










 










 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 protected AccessPath<Field> getAccessPathOf(ReturnEdge<Field, Fact, Stmt, Method> inc) {










 return inc.incAccessPath;










 return inc.usedAccessPathOfIncResolver.applyTo(inc.incAccessPath);










 }










 










 public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact, 



......@@ -58,8 +56,12 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }










 










 protected void processIncomingGuaranteedPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, retEdge.incFact);










 } 










 else {










 propagated=true;










 sourceFact = retEdge.incFact;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<Field, Fact, Stmt, Method>(retEdge.incFact, new AccessPath<Field>(), this)));










 }



......@@ -76,26 +78,40 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(analyzer, returnSite, newAccPath, this);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, debugger, newAccPath, this);










 }










 










 public Stmt getReturnSite() {










 return returnSite;










 }










 










 private boolean isNullOrCallEdgeResolver(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(resolver == null)










 return true;










 if(resolver instanceof CallEdgeResolver) {










 return !(resolver instanceof ZeroCallEdgeResolver);










 }










 return false;










 }










 










 private void resolveViaDelta(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(retEdge.incResolver == null || retEdge.incResolver instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.incResolver)) {










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPath());










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(resolvedAccessPath);










 assert delta.accesses.length <= 1;










 retEdge.incResolver.resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {





















 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










 if(resolver instanceof ZeroCallEdgeResolver) {










 ReturnSiteResolver.this.interest(((ZeroCallEdgeResolver<Field, Fact, Stmt, Method>) resolver).










 copyWithAnalyzer(ReturnSiteResolver.this.analyzer));










 } else {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(resolvedAccessPath)));










 ReturnSiteResolver.this.interest(ReturnSiteResolver.this);










 }










 }










 










 @Override



......@@ -107,24 +123,28 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }





















 private void resolveViaDeltaAndPotentiallyDelegateToCallSite(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath));










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 AccessPath<Field> inc = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath);










 if(!retEdge.callDelta.canBeAppliedTo(inc))










 return;










 










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(inc);










 if(resolvedAccessPath.isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest();










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 interest(this);










 } else if(currAccPath.isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }










 }





















 protected void resolveViaCallSiteResolver(final ReturnEdge<Field, Fact, Stmt, Method> retEdge, AccessPath<Field> currAccPath) {










 if(retEdge.resolverAtCaller == null || retEdge.resolverAtCaller instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.resolverAtCaller)) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(resolvedAccessPath)), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(resolver);










 }










 










 @Override



......














src/heros/fieldsens/SourceStmtAnnotatedMethodAnalyzer.java








View file @ 7b66dd07






......@@ -21,18 +21,21 @@ public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>









 private Method method;










 private DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {





















 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Key<Fact, Stmt> key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Synchronizer<Stmt> synchronizer;










 private Debugger<Field, Fact, Stmt, Method> debugger;










 










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer) {










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.synchronizer = synchronizer;










 this.debugger = debugger;










 }










 










 @Override



......














src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ 7b66dd07






......@@ -16,11 +16,15 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes




















 private ZeroHandler<Field> zeroHandler;





















 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler) {










 super(analyzer);










 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler, Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer, debugger);










 this.zeroHandler = zeroHandler;










 }





















 ZeroCallEdgeResolver<Field, Fact, Stmt, Method> copyWithAnalyzer(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 return new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(analyzer, zeroHandler, debugger);










 }










 










 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 if(zeroHandler.shouldGenerateAccessPath(constraint.applyToAccessPath(new AccessPath<Field>())))



......@@ -28,7 +32,7 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 }










 










 @Override










 public void interest() {










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 }










 










 @Override



......@@ -36,6 +40,11 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 return this;










 }





















 @Override










 public String toString() {










 return "[0-Resolver"+super.toString()+"]";










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;



......









Prev


1


2


Next















Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
7b66dd07


authored
Oct 09, 2015
by


Steven Arzt



Browse files




Merge branch 'develop' of github.com:Sable/heros into develop


Conflicts:
	.classpath






parents
c3065cba
e0a26844













Changes
32




Hide whitespace changes

Inline
Side-by-side















.classpath








View file @ 7b66dd07













<?xml version="1.0" encoding="UTF-8"?>










<classpath>










 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>










 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry kind="src" path="test"/>










 <classpathentry including="**/*.java" kind="src" output="target/classes" path="src">










 <attributes>










 <attribute name="optional" value="true"/>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry kind="src" output="target/test-classes" path="test">










 <attributes>










 <attribute name="optional" value="true"/>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry exported="true" kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry kind="lib" path="junit.jar"/>










 <classpathentry kind="lib" path="org.hamcrest.core_1.3.0.jar"/>










 <classpathentry kind="lib" path="mockito-all-1.9.5.jar"/>










 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6">










 <attributes>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry kind="con" path="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER">










 <attributes>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry exported="true" kind="lib" path="guava-18.0.jar"/>










 <classpathentry kind="output" path="bin"/>










 <classpathentry kind="output" path="target/classes"/>










</classpath>














.gitignore








View file @ 7b66dd07






......@@ -8,3 +8,5 @@ bin









heros-trunk.jar










/javadoc










/reports










/debug










/target/














.project








View file @ 7b66dd07













<?xml version="1.0" encoding="UTF-8"?>










<projectDescription>










 <name>heros</name>










 <comment></comment>










 <projects>










 </projects>










 <buildSpec>










 <buildCommand>










 <name>org.eclipse.jdt.core.javabuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.ManifestBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.SchemaBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 </buildSpec>










 <natures>










 <nature>org.eclipse.jdt.core.javanature</nature>










 <nature>org.eclipse.pde.PluginNature</nature>










 <nature>edu.umd.cs.findbugs.plugin.eclipse.findbugsNature</nature>










 </natures>










</projectDescription>









<?xml version="1.0" encoding="UTF-8"?>










<projectDescription>










 <name>heros</name>










 <comment></comment>










 <projects>










 </projects>










 <buildSpec>










 <buildCommand>










 <name>org.eclipse.jdt.core.javabuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.ManifestBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.SchemaBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.m2e.core.maven2Builder</name>










 <arguments>










 </arguments>










 </buildCommand>










 </buildSpec>










 <natures>










 <nature>org.eclipse.m2e.core.maven2Nature</nature>










 <nature>org.eclipse.jdt.core.javanature</nature>










 <nature>org.eclipse.pde.PluginNature</nature>










 <nature>edu.umd.cs.findbugs.plugin.eclipse.findbugsNature</nature>










 </natures>










</projectDescription>














pom.xml



0 â†’ 100644







View file @ 7b66dd07













<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">










 <modelVersion>4.0.0</modelVersion>










 <groupId>heros</groupId>










 <artifactId>heros</artifactId>










 <version>0.0.1-SNAPSHOT</version>










 <build>










 <sourceDirectory>src</sourceDirectory>










 <testSourceDirectory>test</testSourceDirectory>










 <resources>










 <resource>










 <directory>src</directory>










 <excludes>










 <exclude>**/*.java</exclude>










 </excludes>










 </resource>










 </resources>










 <plugins>










 <plugin>










 <artifactId>maven-compiler-plugin</artifactId>










 <version>3.1</version>










 <configuration>










 <source>1.6</source>










 <target>1.6</target>










 </configuration>










 </plugin>










 </plugins>










 </build>










 <dependencies>










 <dependency>










 <groupId>org.functionaljava</groupId>










 <artifactId>functionaljava</artifactId>










 <version>4.2</version>










 </dependency>










 </dependencies>










</project>




\ No newline at end of file














src/heros/edgefunc/AllTop.java








View file @ 7b66dd07






......@@ -26,7 +26,7 @@ public class AllTop<V> implements EdgeFunction<V> {









 }





















 public EdgeFunction<V> composeWith(EdgeFunction<V> secondFunction) {










 return secondFunction;










 return this;










 }





















 public EdgeFunction<V> joinWith(EdgeFunction<V> otherFunction) {



......














src/heros/fieldsens/AccessPath.java








View file @ 7b66dd07






......@@ -270,4 +270,8 @@ public class AccessPath<T> {









 public T getFirstAccess() {










 return accesses[0];










 }





















 Set<T> getExclusions() {










 return exclusions;










 }










}














src/heros/fieldsens/AccessPathHandler.java








View file @ 7b66dd07






......@@ -19,10 +19,12 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {




















 private AccessPath<Field> accessPath;










 private Resolver<Field, Fact, Stmt, Method> resolver;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.accessPath = accessPath;










 this.resolver = resolver;










 this.debugger = debugger;










 }





















 public boolean canRead(Field field) {



......@@ -42,7 +44,7 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {









 }










 










 public ConstrainedFact<Field, Fact, Stmt, Method> generateWithEmptyAccessPath(Fact fact, ZeroHandler<Field> zeroHandler) {










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler)));










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler, debugger)));










 }










 










 public ResultBuilder<Field, Fact, Stmt, Method> prepend(final Field field) {



......@@ -73,15 +75,10 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {









 public ResultBuilder<Field, Fact, Stmt, Method> overwrite(final Field field) {










 if(mayBeEmpty())










 return new ResultBuilder<Field, Fact, Stmt, Method>() {










 @SuppressWarnings("unchecked")










 @Override










 public ConstrainedFact<Field, Fact, Stmt, Method> generate(Fact fact) {










 if(accessPath.canRead(field)) {










 AccessPath<Field> tempAccPath = accessPath.removeFirst();










 if(tempAccPath.hasEmptyAccessPath())










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, tempAccPath.appendExcludedFieldReference(field), resolver));










 else










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, tempAccPath, resolver));










 } else if(accessPath.isAccessInExclusions(field))










 if(accessPath.isAccessInExclusions(field))










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, accessPath, resolver));










 else










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, accessPath.appendExcludedFieldReference(field), resolver), new WriteFieldConstraint<Field>(field));



......














src/heros/fieldsens/BiDiFieldSensitiveIFDSSolver.java








View file @ 7b66dd07






......@@ -31,7 +31,7 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 public BiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> forwardProblem,










 IFDSTabulationProblem<Stmt, Field, Fact, Method, I> backwardProblem, 










 FactMergeHandler<Fact> factHandler, 










 Debugger<Field, Fact, Stmt, Method, I> debugger,










 Debugger<Field, Fact, Stmt, Method> debugger,










 Scheduler scheduler) {










 










 this.scheduler = scheduler;



......@@ -46,11 +46,11 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 }





















 private FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I> createSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> problem, 










 FactMergeHandler<Fact> factHandler, Debugger<Field, Fact, Stmt, Method, I> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 FactMergeHandler<Fact> factHandler, Debugger<Field, Fact, Stmt, Method> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 return new FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I>(problem, factHandler, debugger, scheduler) {










 @Override










 protected MethodAnalyzer<Field, Fact, Stmt, Method> createMethodAnalyzer(Method method) {










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer);










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer, debugger);










 }










 };










 }



......














src/heros/fieldsens/CallEdge.java








View file @ 7b66dd07






......@@ -61,14 +61,22 @@ public class CallEdge<Field, Fact, Stmt, Method> {









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFactWithDelta = new WrappedFact<Field, Fact, Stmt, Method>(calleeSourceFact.getFact(), delta.applyTo(calleeSourceFact.getAccessPath()), resolver);










 if(interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath()) != PrefixTestResult.GUARANTEED_PREFIX)










  throw new AssertionError();










 interestedAnalyzer.addIncomingEdge(new CallEdge<Field, Fact, Stmt, Method>(analyzer, 










 assert interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath()) == PrefixTestResult.GUARANTEED_PREFIX;










 










 CallEdge<Field, Fact, Stmt, Method> newCallEdge = new CallEdge<Field, Fact, Stmt, Method>(analyzer, 










 new WrappedFactAtStatement<Field, Fact, Stmt, Method>(factAtCallSite.getStatement(), 










 new WrappedFact<Field, Fact, Stmt, Method>(factAtCallSite.getWrappedFact().getFact(), 










 delta.applyTo(factAtCallSite.getWrappedFact().getAccessPath()), 










 resolver)), 










 calleeSourceFactWithDelta));










 calleeSourceFactWithDelta);










 










 if (resolver instanceof ZeroCallEdgeResolver) {










 interestedAnalyzer.getCallEdgeResolver().incomingEdges.add(newCallEdge);










 interestedAnalyzer.getCallEdgeResolver().interest(((ZeroCallEdgeResolver<Field, Fact, Stmt, Method>) resolver).copyWithAnalyzer(interestedAnalyzer));










 interestedAnalyzer.getCallEdgeResolver().processIncomingGuaranteedPrefix(newCallEdge);










 }










 else










 interestedAnalyzer.addIncomingEdge(newCallEdge);










 }










 










 @Override



......














src/heros/fieldsens/CallEdgeResolver.java








View file @ 7b66dd07






......@@ -17,19 +17,14 @@ import com.google.common.collect.Lists;




















class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> {





















 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 this(analyzer, null);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(analyzer, debugger, null);










 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, analyzer.getAccessPath(), parent, debugger);










 }





















 @Override










 protected AccessPath<Field> getResolvedAccessPath() {










 return analyzer.getAccessPath();










 }










 










 @Override










 protected AccessPath<Field> getAccessPathOf(CallEdge<Field, Fact, Stmt, Method> inc) {










 return inc.getCalleeSourceFact().getAccessPath();



......@@ -60,7 +55,7 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field









 










 @Override










 public String toString() {










 return "";










 return "<"+analyzer.getAccessPath()+":"+analyzer.getMethod()+">";










 }










 










 @Override



......














src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ 7b66dd07






......@@ -18,18 +18,22 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {





















 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(analyzer, joinStmt, new AccessPath<Field>(), null);










 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), debugger, null);










 this.factMergeHandler = factMergeHandler;










 propagated=false;










 }










 










 private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, Debugger<Field, Fact, Stmt, Method> debugger, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.resolvedAccPath = resolvedAccPath;










 this.sourceFact = sourceFact;










 propagated=true;










 }










 



......@@ -39,35 +43,53 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 }





















 protected void processIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, fact.getFact());










 }










 else {










 propagated=true;










 sourceFact = fact.getFact();










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(joinStmt, new WrappedFact<Field, Fact, Stmt, Method>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }










 };










 










 private boolean isNullOrCallEdgeResolver(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(resolver == null)










 return true;










 if(resolver instanceof CallEdgeResolver) {










 return !(resolver instanceof ZeroCallEdgeResolver);










 }










 return false;










 }










 










 @Override










 protected void processIncomingPotentialPrefix(WrappedFact<Field, Fact, Stmt, Method> fact) {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 fact.getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest();










 }





















 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 unlock();










 protected void processIncomingPotentialPrefix(final WrappedFact<Field, Fact, Stmt, Method> fact) {










 if(isNullOrCallEdgeResolver(fact.getResolver())) {










 canBeResolvedEmpty();










 }










 else {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccessPath);










 fact.getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest(resolver);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 unlock();










 }










 }










 










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(analyzer, joinStmt, newAccPath, this);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, debugger, this);










 }





















 @Override



......@@ -77,12 +99,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver




















 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+joinStmt+">";










 }





















 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 public Stmt getJoinStmt() {



......














src/heros/fieldsens/Debugger.java








View file @ 7b66dd07






......@@ -11,18 +11,24 @@









package heros.fieldsens;





















import heros.InterproceduralCFG;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> {





















 public abstract void setICFG(I icfg);





















 public abstract void initialSeed(Stmt stmt);










public interface Debugger<Field, Fact, Stmt, Method> {





















 public void setICFG(InterproceduralCFG<Stmt, Method> icfg);










 public void initialSeed(Stmt stmt);










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver);










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void askedToResolve(Resolver<Field, Fact, Stmt, Method> resolver, Constraint<Field> constraint);










 










 public static class NullDebugger <Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










 public static class NullDebugger <Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 










 }














......@@ -30,6 +36,40 @@ public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 public void initialSeed(Stmt stmt) {










 










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void askedToResolve(Resolver<Field, Fact, Stmt, Method> resolver, Constraint<Field> constraint) {










 










 }










 










 }










}




\ No newline at end of file














src/heros/fieldsens/FieldSensitiveIFDSSolver.java








View file @ 7b66dd07






......@@ -33,13 +33,13 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 private IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem;










 protected Context<FieldRef, D, N,M> context;










 private Debugger<FieldRef, D, N, M, I> debugger;










 protected Debugger<FieldRef, D, N, M> debugger;










 private Scheduler scheduler;





















 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M> debugger, Scheduler scheduler) {










 this.tabulationProblem = tabulationProblem;










 this.scheduler = scheduler;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M>() : debugger;










 this.debugger.setICFG(tabulationProblem.interproceduralCFG());










 context = initContext(tabulationProblem, factHandler);










 submitInitialSeeds();



......@@ -57,7 +57,7 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur









 }










 










 protected MethodAnalyzer<FieldRef, D, N, M> createMethodAnalyzer(M method) {










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context);










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context, debugger);










 }





















 /**



......














src/heros/fieldsens/MethodAnalyzerImpl.java








View file @ 7b66dd07






......@@ -22,14 +22,16 @@ public class MethodAnalyzerImpl<Field,Fact, Stmt, Method>









 new DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Fact key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context) {










 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.debugger = debugger;










 }










 










 @Override



......














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ 7b66dd07






......@@ -32,7 +32,7 @@ import com.google.common.collect.Lists;









import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {










public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {





















 private static final Logger logger = LoggerFactory.getLogger(PerAccessPathMethodAnalyzer.class);










 private Fact sourceFact;



......@@ -44,23 +44,25 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private CallEdgeResolver<Field, Fact, Stmt, Method> callEdgeResolver;










 private PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context) {










 this(method, sourceFact, context, new AccessPath<Field>(), null);










 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(method, sourceFact, context, debugger, new AccessPath<Field>(), null);










 }










 










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 this.debugger = debugger;










 if(method == null)










 throw new IllegalArgumentException("Method must be not null");










 this.parent = parent;



......@@ -69,16 +71,16 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 this.accessPath = accPath;










 this.context = context;










 if(parent == null) {










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this);










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler, debugger) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger);










 }










 else {










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, parent.callEdgeResolver);










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger, parent.callEdgeResolver);










 }










 log("initialized");










 }










 










 public PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createWithAccessPath(AccessPath<Field> accPath) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, accPath, this);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, debugger, accPath, this);










 }










 










 WrappedFact<Field, Fact, Stmt, Method> wrappedSource() {



......@@ -94,7 +96,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }





















 private void bootstrapAtMethodStartPoints() {










 callEdgeResolver.interest();










 callEdgeResolver.interest(callEdgeResolver);










 for(Stmt startPoint : context.icfg.getStartPointsOf(method)) {










 WrappedFactAtStatement<Field, Fact, Stmt, Method> target = new WrappedFactAtStatement<Field, Fact, Stmt, Method>(startPoint, wrappedSource());










 if(!reachableStatements.containsKey(target))



......@@ -121,6 +123,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 log("Edge to "+factAtStmt);










 reachableStatements.put(factAtStmt, factAtStmt);










 context.scheduler.schedule(new Job(factAtStmt));










 debugger.edgeTo(this, factAtStmt);










 }










 }














......@@ -137,7 +140,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Method> calledMethods = context.icfg.getCalleesOfCallAt(factAtStmt.getStatement());










 for (Method calledMethod : calledMethods) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallFlowFunction(factAtStmt.getStatement(), calledMethod);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 MethodAnalyzer<Field, Fact, Stmt, Method> analyzer = context.getAnalyzer(calledMethod);



......@@ -162,7 +165,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(callSite);










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(callSite, method, factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 context.getAnalyzer(context.icfg.getMethodOf(callSite)).addUnbalancedReturnFlow(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()), callSite);



......@@ -174,15 +177,13 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 //instead we thus call the return flow function will a null caller










 if(callSites.isEmpty()) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(null, method, factAtStmt.getStatement(), null);










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 }










 }










 }










 










 private void processCallToReturnEdge(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 Stmt stmt = factAtStmt.getStatement();










 int numberOfPredecessors = context.icfg.getPredsOf(stmt).size(); 










 if(numberOfPredecessors > 1 || (context.icfg.isStartPoint(stmt) && numberOfPredecessors > 0)) {










 if(isLoopStart(factAtStmt.getStatement())) {










 ctrFlowJoinResolvers.getOrCreate(factAtStmt.getAsFactAtStatement()).addIncoming(factAtStmt.getWrappedFact());










 }










 else {



......@@ -194,7 +195,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(factAtStmt.getStatement());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallToReturnFlowFunction(factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()));



......@@ -203,15 +204,31 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }





















 private void processNormalFlow(WrappedFactAtStatement<Field,Fact, Stmt, Method> factAtStmt) {










 Stmt stmt = factAtStmt.getStatement();










 int numberOfPredecessors = context.icfg.getPredsOf(stmt).size();










 if((numberOfPredecessors > 1 && !context.icfg.isExitStmt(stmt)) || (context.icfg.isStartPoint(stmt) && numberOfPredecessors > 0)) {










 if(isLoopStart(factAtStmt.getStatement())) {










 ctrFlowJoinResolvers.getOrCreate(factAtStmt.getAsFactAtStatement()).addIncoming(factAtStmt.getWrappedFact());










 }










 else {










 processNormalNonJoiningFlow(factAtStmt);










 }










 }










 










 private boolean isLoopStart(Stmt stmt) {










 int numberOfPredecessors = context.icfg.getPredsOf(stmt).size();










 if((numberOfPredecessors > 1 && !context.icfg.isExitStmt(stmt)) || (context.icfg.isStartPoint(stmt) && numberOfPredecessors > 0)) {










 Set<Stmt> visited = Sets.newHashSet();










 List<Stmt> worklist = Lists.newLinkedList();










 worklist.addAll(context.icfg.getPredsOf(stmt));










 while(!worklist.isEmpty()) {










 Stmt current = worklist.remove(0);










 if(current.equals(stmt))










 return true;










 if(!visited.add(current))










 continue;










 worklist.addAll(context.icfg.getPredsOf(current));










 }










 }










 return false;










 }





















 void processFlowFromJoinStmt(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 if(context.icfg.isCallStmt(factAtStmt.getStatement()))



......@@ -223,7 +240,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private void processNormalNonJoiningFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 final List<Stmt> successors = context.icfg.getSuccsOf(factAtStmt.getStatement());










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getNormalFlowFunction(factAtStmt.getStatement());










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (final ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 if(targetFact.getConstraint() == null)










 scheduleEdgeTo(successors, targetFact.getFact());



......@@ -245,9 +262,10 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }










 










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 if(!isBootStrapped())










 if(isBootStrapped()) {










 context.factHandler.merge(sourceFact, incEdge.getCalleeSourceFact().getFact());










 } else 










 bootstrapAtMethodStartPoints();










 










 callEdgeResolver.addIncoming(incEdge);










 }














......@@ -255,7 +273,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(incEdge.getCallSite());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(incEdge.getCallSite(), method, exitFact.getStatement(), returnSite);










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver()));










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targets) {










 context.factHandler.restoreCallingContext(targetFact.getFact().getFact(), incEdge.getCallerCallSiteFact().getFact());










 //TODO handle constraint



......@@ -293,10 +311,12 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {




















 public Job(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 this.factAtStmt = factAtStmt;










 debugger.newJob(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }





















 @Override










 public void run() {










 debugger.jobStarted(PerAccessPathMethodAnalyzer.this, factAtStmt);










 if (context.icfg.isCallStmt(factAtStmt.getStatement())) {










 processCall(factAtStmt);










 } else {



......@@ -307,12 +327,22 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 processNormalFlow(factAtStmt);










 }










 }










 debugger.jobFinished(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }










 










 @Override










 public String toString() {










 return "Job: "+factAtStmt;










 }










 }





















 public CallEdgeResolver<Field, Fact, Stmt, Method> getCallEdgeResolver() {










 return callEdgeResolver;










 }





















 public Method getMethod() {










 return method;










 }










 










//	public void debugReachables() {










//		JsonDocument root = new JsonDocument();



......














src/heros/fieldsens/Resolver.java








View file @ 7b66dd07






......@@ -13,12 +13,14 @@ package heros.fieldsens;









import heros.fieldsens.FlowFunction.Constraint;





















import java.util.List;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Sets;





















public abstract class Resolver<Field, Fact, Stmt, Method> {





















 private boolean interest = false;










 private Set<Resolver<Field, Fact, Stmt, Method>> interest = Sets.newHashSet();










 private List<InterestCallback<Field, Fact, Stmt, Method>> interestCallbacks = Lists.newLinkedList();










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer;










 private boolean canBeResolvedEmpty = false;



......@@ -29,18 +31,14 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {




















 public abstract void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback);










 










 public void interest() {










 if(interest)










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(!interest.add(resolver))










 return;





















 log("Interest given");










 interest = true;










 log("Interest given by: "+resolver);










 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.interest(analyzer, this);










 callback.interest(analyzer, resolver);










 }










 










 if(canBeResolvedEmpty)










 interestCallbacks = null;










 }










 










 protected void canBeResolvedEmpty() {



......@@ -51,23 +49,19 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {









 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.canBeResolvedEmpty();










 }










 










 if(interest)










 interestCallbacks = null;










 }





















 public boolean isInterestGiven() {










 return interest;










 return !interest.isEmpty();










 }





















 protected void registerCallback(InterestCallback<Field, Fact, Stmt, Method> callback) {










 if(interest) {










 callback.interest(analyzer, this);










 }










 else {










 log("Callback registered");










 interestCallbacks.add(callback);










 if(!interest.isEmpty()) {










 for(Resolver<Field, Fact, Stmt, Method> resolver : Lists.newLinkedList(interest))










 callback.interest(analyzer, resolver);










 }










 log("Callback registered");










 interestCallbacks.add(callback);





















 if(canBeResolvedEmpty)










 callback.canBeResolvedEmpty();



......














src/heros/fieldsens/ResolverTemplate.java








View file @ 7b66dd07






......@@ -13,6 +13,7 @@ package heros.fieldsens;









import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Sets;














......@@ -26,11 +27,25 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> allResolversInExclHierarchy;










 protected AccessPath<Field> resolvedAccessPath;










 protected Debugger<Field, Fact, Stmt, Method> debugger;





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent) {










 AccessPath<Field> resolvedAccessPath,










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, 










 Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer);










 this.resolvedAccessPath = resolvedAccessPath;










 this.parent = parent;










 this.debugger = debugger;










 if(parent == null || resolvedAccessPath.getExclusions().isEmpty()) {










 allResolversInExclHierarchy = Maps.newHashMap();










 }










 else {










 allResolversInExclHierarchy = parent.allResolversInExclHierarchy;










 }










 debugger.newResolver(analyzer, this);










 }










 










 protected boolean isLocked() {



......@@ -49,25 +64,23 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 recursionLock = false;










 }










 










 protected abstract AccessPath<Field> getResolvedAccessPath();










 










 protected abstract AccessPath<Field> getAccessPathOf(Incoming inc);










 










 public void addIncoming(Incoming inc) {










 if(getResolvedAccessPath().isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(resolvedAccessPath.isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge: "+inc);










 if(!incomingEdges.add(inc))










 return;










 










 interest();










 interest(this);










 










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : nestedResolvers.values()) {










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : Lists.newLinkedList(nestedResolvers.values())) {










 nestedResolver.addIncoming(inc);










 }










 










 processIncomingGuaranteedPrefix(inc);










 }










 else if(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 else if(getAccessPathOf(inc).isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 processIncomingPotentialPrefix(inc);










 }










 }



......@@ -79,25 +92,33 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(getResolvedAccessPath()) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(getResolvedAccessPath());










 debugger.askedToResolve(this, constraint);










 if(constraint.canBeAppliedTo(resolvedAccessPath) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(resolvedAccessPath);










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = getOrCreateNestedResolver(newAccPath);










 assert nestedResolver.getResolvedAccessPath().equals(constraint.applyToAccessPath(getResolvedAccessPath()));










 assert nestedResolver.resolvedAccessPath.equals(constraint.applyToAccessPath(resolvedAccessPath));










 nestedResolver.registerCallback(callback);










 }










 }





















 protected ResolverTemplate<Field, Fact, Stmt, Method, Incoming> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 if(getResolvedAccessPath().equals(newAccPath))










 if(resolvedAccessPath.equals(newAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(newAccPath)) {










 assert getResolvedAccessPath().getDeltaTo(newAccPath).accesses.length <= 1;










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = createNestedResolver(newAccPath);










 nestedResolvers.put(newAccPath, nestedResolver);










 










 for(Incoming inc : incomingEdges) {










 nestedResolver.addIncoming(inc);










 assert resolvedAccessPath.getDeltaTo(newAccPath).accesses.length <= 1;










 if(allResolversInExclHierarchy.containsKey(newAccPath)) {










 return allResolversInExclHierarchy.get(newAccPath);










 }










 else {










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver = createNestedResolver(newAccPath);










 if(!resolvedAccessPath.getExclusions().isEmpty() || !newAccPath.getExclusions().isEmpty())










 allResolversInExclHierarchy.put(newAccPath, nestedResolver);










 nestedResolvers.put(newAccPath, nestedResolver);










 for(Incoming inc : Lists.newLinkedList(incomingEdges)) {










 nestedResolver.addIncoming(inc);










 }










 return nestedResolver;










 }










 }










 return nestedResolvers.get(newAccPath);



......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ 7b66dd07






......@@ -20,34 +20,32 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {





















 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(analyzer, returnSite, new AccessPath<Field>(), null);










 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, returnSite, null, debugger, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated = false;










 }





















 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.resolvedAccPath = resolvedAccPath;










 this.sourceFact = sourceFact;










 propagated=true;










 }










 










 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+returnSite+">";










 }










 










 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 protected AccessPath<Field> getAccessPathOf(ReturnEdge<Field, Fact, Stmt, Method> inc) {










 return inc.incAccessPath;










 return inc.usedAccessPathOfIncResolver.applyTo(inc.incAccessPath);










 }










 










 public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact, 



......@@ -58,8 +56,12 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }










 










 protected void processIncomingGuaranteedPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, retEdge.incFact);










 } 










 else {










 propagated=true;










 sourceFact = retEdge.incFact;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<Field, Fact, Stmt, Method>(retEdge.incFact, new AccessPath<Field>(), this)));










 }



......@@ -76,26 +78,40 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(analyzer, returnSite, newAccPath, this);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, debugger, newAccPath, this);










 }










 










 public Stmt getReturnSite() {










 return returnSite;










 }










 










 private boolean isNullOrCallEdgeResolver(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(resolver == null)










 return true;










 if(resolver instanceof CallEdgeResolver) {










 return !(resolver instanceof ZeroCallEdgeResolver);










 }










 return false;










 }










 










 private void resolveViaDelta(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(retEdge.incResolver == null || retEdge.incResolver instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.incResolver)) {










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPath());










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(resolvedAccessPath);










 assert delta.accesses.length <= 1;










 retEdge.incResolver.resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {





















 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










 if(resolver instanceof ZeroCallEdgeResolver) {










 ReturnSiteResolver.this.interest(((ZeroCallEdgeResolver<Field, Fact, Stmt, Method>) resolver).










 copyWithAnalyzer(ReturnSiteResolver.this.analyzer));










 } else {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(resolvedAccessPath)));










 ReturnSiteResolver.this.interest(ReturnSiteResolver.this);










 }










 }










 










 @Override



......@@ -107,24 +123,28 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }





















 private void resolveViaDeltaAndPotentiallyDelegateToCallSite(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath));










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 AccessPath<Field> inc = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath);










 if(!retEdge.callDelta.canBeAppliedTo(inc))










 return;










 










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(inc);










 if(resolvedAccessPath.isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest();










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 interest(this);










 } else if(currAccPath.isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }










 }





















 protected void resolveViaCallSiteResolver(final ReturnEdge<Field, Fact, Stmt, Method> retEdge, AccessPath<Field> currAccPath) {










 if(retEdge.resolverAtCaller == null || retEdge.resolverAtCaller instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.resolverAtCaller)) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(resolvedAccessPath)), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(resolver);










 }










 










 @Override



......














src/heros/fieldsens/SourceStmtAnnotatedMethodAnalyzer.java








View file @ 7b66dd07






......@@ -21,18 +21,21 @@ public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>









 private Method method;










 private DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {





















 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Key<Fact, Stmt> key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Synchronizer<Stmt> synchronizer;










 private Debugger<Field, Fact, Stmt, Method> debugger;










 










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer) {










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.synchronizer = synchronizer;










 this.debugger = debugger;










 }










 










 @Override



......














src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ 7b66dd07






......@@ -16,11 +16,15 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes




















 private ZeroHandler<Field> zeroHandler;





















 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler) {










 super(analyzer);










 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler, Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer, debugger);










 this.zeroHandler = zeroHandler;










 }





















 ZeroCallEdgeResolver<Field, Fact, Stmt, Method> copyWithAnalyzer(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 return new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(analyzer, zeroHandler, debugger);










 }










 










 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 if(zeroHandler.shouldGenerateAccessPath(constraint.applyToAccessPath(new AccessPath<Field>())))



......@@ -28,7 +32,7 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 }










 










 @Override










 public void interest() {










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 }










 










 @Override



......@@ -36,6 +40,11 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 return this;










 }





















 @Override










 public String toString() {










 return "[0-Resolver"+super.toString()+"]";










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;



......









Prev


1


2


Next















Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
7b66dd07


authored
Oct 09, 2015
by


Steven Arzt



Browse files



Commit
7b66dd07


authored
Oct 09, 2015
by


Steven Arzt

7b66dd07authoredbySteven Arzt

Merge branch 'develop' of github.com:Sable/heros into develop


Conflicts:
	.classpath





parents
c3065cba
e0a26844
















parents
c3065cba
e0a26844





parents












Changes
32
32


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










.classpath








View file @ 7b66dd07













<?xml version="1.0" encoding="UTF-8"?>










<classpath>










 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>










 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry kind="src" path="test"/>










 <classpathentry including="**/*.java" kind="src" output="target/classes" path="src">










 <attributes>










 <attribute name="optional" value="true"/>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry kind="src" output="target/test-classes" path="test">










 <attributes>










 <attribute name="optional" value="true"/>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry exported="true" kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry kind="lib" path="junit.jar"/>










 <classpathentry kind="lib" path="org.hamcrest.core_1.3.0.jar"/>










 <classpathentry kind="lib" path="mockito-all-1.9.5.jar"/>










 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6">










 <attributes>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry kind="con" path="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER">










 <attributes>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry exported="true" kind="lib" path="guava-18.0.jar"/>










 <classpathentry kind="output" path="bin"/>










 <classpathentry kind="output" path="target/classes"/>










</classpath>














.gitignore








View file @ 7b66dd07






......@@ -8,3 +8,5 @@ bin









heros-trunk.jar










/javadoc










/reports










/debug










/target/














.project








View file @ 7b66dd07













<?xml version="1.0" encoding="UTF-8"?>










<projectDescription>










 <name>heros</name>










 <comment></comment>










 <projects>










 </projects>










 <buildSpec>










 <buildCommand>










 <name>org.eclipse.jdt.core.javabuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.ManifestBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.SchemaBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 </buildSpec>










 <natures>










 <nature>org.eclipse.jdt.core.javanature</nature>










 <nature>org.eclipse.pde.PluginNature</nature>










 <nature>edu.umd.cs.findbugs.plugin.eclipse.findbugsNature</nature>










 </natures>










</projectDescription>









<?xml version="1.0" encoding="UTF-8"?>










<projectDescription>










 <name>heros</name>










 <comment></comment>










 <projects>










 </projects>










 <buildSpec>










 <buildCommand>










 <name>org.eclipse.jdt.core.javabuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.ManifestBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.SchemaBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.m2e.core.maven2Builder</name>










 <arguments>










 </arguments>










 </buildCommand>










 </buildSpec>










 <natures>










 <nature>org.eclipse.m2e.core.maven2Nature</nature>










 <nature>org.eclipse.jdt.core.javanature</nature>










 <nature>org.eclipse.pde.PluginNature</nature>










 <nature>edu.umd.cs.findbugs.plugin.eclipse.findbugsNature</nature>










 </natures>










</projectDescription>














pom.xml



0 â†’ 100644







View file @ 7b66dd07













<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">










 <modelVersion>4.0.0</modelVersion>










 <groupId>heros</groupId>










 <artifactId>heros</artifactId>










 <version>0.0.1-SNAPSHOT</version>










 <build>










 <sourceDirectory>src</sourceDirectory>










 <testSourceDirectory>test</testSourceDirectory>










 <resources>










 <resource>










 <directory>src</directory>










 <excludes>










 <exclude>**/*.java</exclude>










 </excludes>










 </resource>










 </resources>










 <plugins>










 <plugin>










 <artifactId>maven-compiler-plugin</artifactId>










 <version>3.1</version>










 <configuration>










 <source>1.6</source>










 <target>1.6</target>










 </configuration>










 </plugin>










 </plugins>










 </build>










 <dependencies>










 <dependency>










 <groupId>org.functionaljava</groupId>










 <artifactId>functionaljava</artifactId>










 <version>4.2</version>










 </dependency>










 </dependencies>










</project>




\ No newline at end of file














src/heros/edgefunc/AllTop.java








View file @ 7b66dd07






......@@ -26,7 +26,7 @@ public class AllTop<V> implements EdgeFunction<V> {









 }





















 public EdgeFunction<V> composeWith(EdgeFunction<V> secondFunction) {










 return secondFunction;










 return this;










 }





















 public EdgeFunction<V> joinWith(EdgeFunction<V> otherFunction) {



......














src/heros/fieldsens/AccessPath.java








View file @ 7b66dd07






......@@ -270,4 +270,8 @@ public class AccessPath<T> {









 public T getFirstAccess() {










 return accesses[0];










 }





















 Set<T> getExclusions() {










 return exclusions;










 }










}














src/heros/fieldsens/AccessPathHandler.java








View file @ 7b66dd07






......@@ -19,10 +19,12 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {




















 private AccessPath<Field> accessPath;










 private Resolver<Field, Fact, Stmt, Method> resolver;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.accessPath = accessPath;










 this.resolver = resolver;










 this.debugger = debugger;










 }





















 public boolean canRead(Field field) {



......@@ -42,7 +44,7 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {









 }










 










 public ConstrainedFact<Field, Fact, Stmt, Method> generateWithEmptyAccessPath(Fact fact, ZeroHandler<Field> zeroHandler) {










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler)));










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler, debugger)));










 }










 










 public ResultBuilder<Field, Fact, Stmt, Method> prepend(final Field field) {



......@@ -73,15 +75,10 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {









 public ResultBuilder<Field, Fact, Stmt, Method> overwrite(final Field field) {










 if(mayBeEmpty())










 return new ResultBuilder<Field, Fact, Stmt, Method>() {










 @SuppressWarnings("unchecked")










 @Override










 public ConstrainedFact<Field, Fact, Stmt, Method> generate(Fact fact) {










 if(accessPath.canRead(field)) {










 AccessPath<Field> tempAccPath = accessPath.removeFirst();










 if(tempAccPath.hasEmptyAccessPath())










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, tempAccPath.appendExcludedFieldReference(field), resolver));










 else










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, tempAccPath, resolver));










 } else if(accessPath.isAccessInExclusions(field))










 if(accessPath.isAccessInExclusions(field))










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, accessPath, resolver));










 else










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, accessPath.appendExcludedFieldReference(field), resolver), new WriteFieldConstraint<Field>(field));



......














src/heros/fieldsens/BiDiFieldSensitiveIFDSSolver.java








View file @ 7b66dd07






......@@ -31,7 +31,7 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 public BiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> forwardProblem,










 IFDSTabulationProblem<Stmt, Field, Fact, Method, I> backwardProblem, 










 FactMergeHandler<Fact> factHandler, 










 Debugger<Field, Fact, Stmt, Method, I> debugger,










 Debugger<Field, Fact, Stmt, Method> debugger,










 Scheduler scheduler) {










 










 this.scheduler = scheduler;



......@@ -46,11 +46,11 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 }





















 private FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I> createSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> problem, 










 FactMergeHandler<Fact> factHandler, Debugger<Field, Fact, Stmt, Method, I> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 FactMergeHandler<Fact> factHandler, Debugger<Field, Fact, Stmt, Method> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 return new FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I>(problem, factHandler, debugger, scheduler) {










 @Override










 protected MethodAnalyzer<Field, Fact, Stmt, Method> createMethodAnalyzer(Method method) {










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer);










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer, debugger);










 }










 };










 }



......














src/heros/fieldsens/CallEdge.java








View file @ 7b66dd07






......@@ -61,14 +61,22 @@ public class CallEdge<Field, Fact, Stmt, Method> {









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFactWithDelta = new WrappedFact<Field, Fact, Stmt, Method>(calleeSourceFact.getFact(), delta.applyTo(calleeSourceFact.getAccessPath()), resolver);










 if(interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath()) != PrefixTestResult.GUARANTEED_PREFIX)










  throw new AssertionError();










 interestedAnalyzer.addIncomingEdge(new CallEdge<Field, Fact, Stmt, Method>(analyzer, 










 assert interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath()) == PrefixTestResult.GUARANTEED_PREFIX;










 










 CallEdge<Field, Fact, Stmt, Method> newCallEdge = new CallEdge<Field, Fact, Stmt, Method>(analyzer, 










 new WrappedFactAtStatement<Field, Fact, Stmt, Method>(factAtCallSite.getStatement(), 










 new WrappedFact<Field, Fact, Stmt, Method>(factAtCallSite.getWrappedFact().getFact(), 










 delta.applyTo(factAtCallSite.getWrappedFact().getAccessPath()), 










 resolver)), 










 calleeSourceFactWithDelta));










 calleeSourceFactWithDelta);










 










 if (resolver instanceof ZeroCallEdgeResolver) {










 interestedAnalyzer.getCallEdgeResolver().incomingEdges.add(newCallEdge);










 interestedAnalyzer.getCallEdgeResolver().interest(((ZeroCallEdgeResolver<Field, Fact, Stmt, Method>) resolver).copyWithAnalyzer(interestedAnalyzer));










 interestedAnalyzer.getCallEdgeResolver().processIncomingGuaranteedPrefix(newCallEdge);










 }










 else










 interestedAnalyzer.addIncomingEdge(newCallEdge);










 }










 










 @Override



......














src/heros/fieldsens/CallEdgeResolver.java








View file @ 7b66dd07






......@@ -17,19 +17,14 @@ import com.google.common.collect.Lists;




















class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> {





















 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 this(analyzer, null);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(analyzer, debugger, null);










 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, analyzer.getAccessPath(), parent, debugger);










 }





















 @Override










 protected AccessPath<Field> getResolvedAccessPath() {










 return analyzer.getAccessPath();










 }










 










 @Override










 protected AccessPath<Field> getAccessPathOf(CallEdge<Field, Fact, Stmt, Method> inc) {










 return inc.getCalleeSourceFact().getAccessPath();



......@@ -60,7 +55,7 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field









 










 @Override










 public String toString() {










 return "";










 return "<"+analyzer.getAccessPath()+":"+analyzer.getMethod()+">";










 }










 










 @Override



......














src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ 7b66dd07






......@@ -18,18 +18,22 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {





















 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(analyzer, joinStmt, new AccessPath<Field>(), null);










 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), debugger, null);










 this.factMergeHandler = factMergeHandler;










 propagated=false;










 }










 










 private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, Debugger<Field, Fact, Stmt, Method> debugger, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.resolvedAccPath = resolvedAccPath;










 this.sourceFact = sourceFact;










 propagated=true;










 }










 



......@@ -39,35 +43,53 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 }





















 protected void processIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, fact.getFact());










 }










 else {










 propagated=true;










 sourceFact = fact.getFact();










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(joinStmt, new WrappedFact<Field, Fact, Stmt, Method>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }










 };










 










 private boolean isNullOrCallEdgeResolver(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(resolver == null)










 return true;










 if(resolver instanceof CallEdgeResolver) {










 return !(resolver instanceof ZeroCallEdgeResolver);










 }










 return false;










 }










 










 @Override










 protected void processIncomingPotentialPrefix(WrappedFact<Field, Fact, Stmt, Method> fact) {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 fact.getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest();










 }





















 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 unlock();










 protected void processIncomingPotentialPrefix(final WrappedFact<Field, Fact, Stmt, Method> fact) {










 if(isNullOrCallEdgeResolver(fact.getResolver())) {










 canBeResolvedEmpty();










 }










 else {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccessPath);










 fact.getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest(resolver);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 unlock();










 }










 }










 










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(analyzer, joinStmt, newAccPath, this);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, debugger, this);










 }





















 @Override



......@@ -77,12 +99,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver




















 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+joinStmt+">";










 }





















 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 public Stmt getJoinStmt() {



......














src/heros/fieldsens/Debugger.java








View file @ 7b66dd07






......@@ -11,18 +11,24 @@









package heros.fieldsens;





















import heros.InterproceduralCFG;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> {





















 public abstract void setICFG(I icfg);





















 public abstract void initialSeed(Stmt stmt);










public interface Debugger<Field, Fact, Stmt, Method> {





















 public void setICFG(InterproceduralCFG<Stmt, Method> icfg);










 public void initialSeed(Stmt stmt);










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver);










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void askedToResolve(Resolver<Field, Fact, Stmt, Method> resolver, Constraint<Field> constraint);










 










 public static class NullDebugger <Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










 public static class NullDebugger <Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 










 }














......@@ -30,6 +36,40 @@ public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 public void initialSeed(Stmt stmt) {










 










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void askedToResolve(Resolver<Field, Fact, Stmt, Method> resolver, Constraint<Field> constraint) {










 










 }










 










 }










}




\ No newline at end of file














src/heros/fieldsens/FieldSensitiveIFDSSolver.java








View file @ 7b66dd07






......@@ -33,13 +33,13 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 private IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem;










 protected Context<FieldRef, D, N,M> context;










 private Debugger<FieldRef, D, N, M, I> debugger;










 protected Debugger<FieldRef, D, N, M> debugger;










 private Scheduler scheduler;





















 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M> debugger, Scheduler scheduler) {










 this.tabulationProblem = tabulationProblem;










 this.scheduler = scheduler;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M>() : debugger;










 this.debugger.setICFG(tabulationProblem.interproceduralCFG());










 context = initContext(tabulationProblem, factHandler);










 submitInitialSeeds();



......@@ -57,7 +57,7 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur









 }










 










 protected MethodAnalyzer<FieldRef, D, N, M> createMethodAnalyzer(M method) {










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context);










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context, debugger);










 }





















 /**



......














src/heros/fieldsens/MethodAnalyzerImpl.java








View file @ 7b66dd07






......@@ -22,14 +22,16 @@ public class MethodAnalyzerImpl<Field,Fact, Stmt, Method>









 new DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Fact key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context) {










 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.debugger = debugger;










 }










 










 @Override



......














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ 7b66dd07






......@@ -32,7 +32,7 @@ import com.google.common.collect.Lists;









import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {










public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {





















 private static final Logger logger = LoggerFactory.getLogger(PerAccessPathMethodAnalyzer.class);










 private Fact sourceFact;



......@@ -44,23 +44,25 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private CallEdgeResolver<Field, Fact, Stmt, Method> callEdgeResolver;










 private PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context) {










 this(method, sourceFact, context, new AccessPath<Field>(), null);










 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(method, sourceFact, context, debugger, new AccessPath<Field>(), null);










 }










 










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 this.debugger = debugger;










 if(method == null)










 throw new IllegalArgumentException("Method must be not null");










 this.parent = parent;



......@@ -69,16 +71,16 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 this.accessPath = accPath;










 this.context = context;










 if(parent == null) {










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this);










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler, debugger) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger);










 }










 else {










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, parent.callEdgeResolver);










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger, parent.callEdgeResolver);










 }










 log("initialized");










 }










 










 public PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createWithAccessPath(AccessPath<Field> accPath) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, accPath, this);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, debugger, accPath, this);










 }










 










 WrappedFact<Field, Fact, Stmt, Method> wrappedSource() {



......@@ -94,7 +96,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }





















 private void bootstrapAtMethodStartPoints() {










 callEdgeResolver.interest();










 callEdgeResolver.interest(callEdgeResolver);










 for(Stmt startPoint : context.icfg.getStartPointsOf(method)) {










 WrappedFactAtStatement<Field, Fact, Stmt, Method> target = new WrappedFactAtStatement<Field, Fact, Stmt, Method>(startPoint, wrappedSource());










 if(!reachableStatements.containsKey(target))



......@@ -121,6 +123,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 log("Edge to "+factAtStmt);










 reachableStatements.put(factAtStmt, factAtStmt);










 context.scheduler.schedule(new Job(factAtStmt));










 debugger.edgeTo(this, factAtStmt);










 }










 }














......@@ -137,7 +140,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Method> calledMethods = context.icfg.getCalleesOfCallAt(factAtStmt.getStatement());










 for (Method calledMethod : calledMethods) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallFlowFunction(factAtStmt.getStatement(), calledMethod);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 MethodAnalyzer<Field, Fact, Stmt, Method> analyzer = context.getAnalyzer(calledMethod);



......@@ -162,7 +165,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(callSite);










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(callSite, method, factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 context.getAnalyzer(context.icfg.getMethodOf(callSite)).addUnbalancedReturnFlow(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()), callSite);



......@@ -174,15 +177,13 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 //instead we thus call the return flow function will a null caller










 if(callSites.isEmpty()) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(null, method, factAtStmt.getStatement(), null);










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 }










 }










 }










 










 private void processCallToReturnEdge(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 Stmt stmt = factAtStmt.getStatement();










 int numberOfPredecessors = context.icfg.getPredsOf(stmt).size(); 










 if(numberOfPredecessors > 1 || (context.icfg.isStartPoint(stmt) && numberOfPredecessors > 0)) {










 if(isLoopStart(factAtStmt.getStatement())) {










 ctrFlowJoinResolvers.getOrCreate(factAtStmt.getAsFactAtStatement()).addIncoming(factAtStmt.getWrappedFact());










 }










 else {



......@@ -194,7 +195,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(factAtStmt.getStatement());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallToReturnFlowFunction(factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()));



......@@ -203,15 +204,31 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }





















 private void processNormalFlow(WrappedFactAtStatement<Field,Fact, Stmt, Method> factAtStmt) {










 Stmt stmt = factAtStmt.getStatement();










 int numberOfPredecessors = context.icfg.getPredsOf(stmt).size();










 if((numberOfPredecessors > 1 && !context.icfg.isExitStmt(stmt)) || (context.icfg.isStartPoint(stmt) && numberOfPredecessors > 0)) {










 if(isLoopStart(factAtStmt.getStatement())) {










 ctrFlowJoinResolvers.getOrCreate(factAtStmt.getAsFactAtStatement()).addIncoming(factAtStmt.getWrappedFact());










 }










 else {










 processNormalNonJoiningFlow(factAtStmt);










 }










 }










 










 private boolean isLoopStart(Stmt stmt) {










 int numberOfPredecessors = context.icfg.getPredsOf(stmt).size();










 if((numberOfPredecessors > 1 && !context.icfg.isExitStmt(stmt)) || (context.icfg.isStartPoint(stmt) && numberOfPredecessors > 0)) {










 Set<Stmt> visited = Sets.newHashSet();










 List<Stmt> worklist = Lists.newLinkedList();










 worklist.addAll(context.icfg.getPredsOf(stmt));










 while(!worklist.isEmpty()) {










 Stmt current = worklist.remove(0);










 if(current.equals(stmt))










 return true;










 if(!visited.add(current))










 continue;










 worklist.addAll(context.icfg.getPredsOf(current));










 }










 }










 return false;










 }





















 void processFlowFromJoinStmt(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 if(context.icfg.isCallStmt(factAtStmt.getStatement()))



......@@ -223,7 +240,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private void processNormalNonJoiningFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 final List<Stmt> successors = context.icfg.getSuccsOf(factAtStmt.getStatement());










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getNormalFlowFunction(factAtStmt.getStatement());










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (final ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 if(targetFact.getConstraint() == null)










 scheduleEdgeTo(successors, targetFact.getFact());



......@@ -245,9 +262,10 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }










 










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 if(!isBootStrapped())










 if(isBootStrapped()) {










 context.factHandler.merge(sourceFact, incEdge.getCalleeSourceFact().getFact());










 } else 










 bootstrapAtMethodStartPoints();










 










 callEdgeResolver.addIncoming(incEdge);










 }














......@@ -255,7 +273,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(incEdge.getCallSite());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(incEdge.getCallSite(), method, exitFact.getStatement(), returnSite);










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver()));










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targets) {










 context.factHandler.restoreCallingContext(targetFact.getFact().getFact(), incEdge.getCallerCallSiteFact().getFact());










 //TODO handle constraint



......@@ -293,10 +311,12 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {




















 public Job(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 this.factAtStmt = factAtStmt;










 debugger.newJob(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }





















 @Override










 public void run() {










 debugger.jobStarted(PerAccessPathMethodAnalyzer.this, factAtStmt);










 if (context.icfg.isCallStmt(factAtStmt.getStatement())) {










 processCall(factAtStmt);










 } else {



......@@ -307,12 +327,22 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 processNormalFlow(factAtStmt);










 }










 }










 debugger.jobFinished(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }










 










 @Override










 public String toString() {










 return "Job: "+factAtStmt;










 }










 }





















 public CallEdgeResolver<Field, Fact, Stmt, Method> getCallEdgeResolver() {










 return callEdgeResolver;










 }





















 public Method getMethod() {










 return method;










 }










 










//	public void debugReachables() {










//		JsonDocument root = new JsonDocument();



......














src/heros/fieldsens/Resolver.java








View file @ 7b66dd07






......@@ -13,12 +13,14 @@ package heros.fieldsens;









import heros.fieldsens.FlowFunction.Constraint;





















import java.util.List;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Sets;





















public abstract class Resolver<Field, Fact, Stmt, Method> {





















 private boolean interest = false;










 private Set<Resolver<Field, Fact, Stmt, Method>> interest = Sets.newHashSet();










 private List<InterestCallback<Field, Fact, Stmt, Method>> interestCallbacks = Lists.newLinkedList();










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer;










 private boolean canBeResolvedEmpty = false;



......@@ -29,18 +31,14 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {




















 public abstract void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback);










 










 public void interest() {










 if(interest)










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(!interest.add(resolver))










 return;





















 log("Interest given");










 interest = true;










 log("Interest given by: "+resolver);










 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.interest(analyzer, this);










 callback.interest(analyzer, resolver);










 }










 










 if(canBeResolvedEmpty)










 interestCallbacks = null;










 }










 










 protected void canBeResolvedEmpty() {



......@@ -51,23 +49,19 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {









 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.canBeResolvedEmpty();










 }










 










 if(interest)










 interestCallbacks = null;










 }





















 public boolean isInterestGiven() {










 return interest;










 return !interest.isEmpty();










 }





















 protected void registerCallback(InterestCallback<Field, Fact, Stmt, Method> callback) {










 if(interest) {










 callback.interest(analyzer, this);










 }










 else {










 log("Callback registered");










 interestCallbacks.add(callback);










 if(!interest.isEmpty()) {










 for(Resolver<Field, Fact, Stmt, Method> resolver : Lists.newLinkedList(interest))










 callback.interest(analyzer, resolver);










 }










 log("Callback registered");










 interestCallbacks.add(callback);





















 if(canBeResolvedEmpty)










 callback.canBeResolvedEmpty();



......














src/heros/fieldsens/ResolverTemplate.java








View file @ 7b66dd07






......@@ -13,6 +13,7 @@ package heros.fieldsens;









import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Sets;














......@@ -26,11 +27,25 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> allResolversInExclHierarchy;










 protected AccessPath<Field> resolvedAccessPath;










 protected Debugger<Field, Fact, Stmt, Method> debugger;





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent) {










 AccessPath<Field> resolvedAccessPath,










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, 










 Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer);










 this.resolvedAccessPath = resolvedAccessPath;










 this.parent = parent;










 this.debugger = debugger;










 if(parent == null || resolvedAccessPath.getExclusions().isEmpty()) {










 allResolversInExclHierarchy = Maps.newHashMap();










 }










 else {










 allResolversInExclHierarchy = parent.allResolversInExclHierarchy;










 }










 debugger.newResolver(analyzer, this);










 }










 










 protected boolean isLocked() {



......@@ -49,25 +64,23 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 recursionLock = false;










 }










 










 protected abstract AccessPath<Field> getResolvedAccessPath();










 










 protected abstract AccessPath<Field> getAccessPathOf(Incoming inc);










 










 public void addIncoming(Incoming inc) {










 if(getResolvedAccessPath().isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(resolvedAccessPath.isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge: "+inc);










 if(!incomingEdges.add(inc))










 return;










 










 interest();










 interest(this);










 










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : nestedResolvers.values()) {










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : Lists.newLinkedList(nestedResolvers.values())) {










 nestedResolver.addIncoming(inc);










 }










 










 processIncomingGuaranteedPrefix(inc);










 }










 else if(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 else if(getAccessPathOf(inc).isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 processIncomingPotentialPrefix(inc);










 }










 }



......@@ -79,25 +92,33 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(getResolvedAccessPath()) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(getResolvedAccessPath());










 debugger.askedToResolve(this, constraint);










 if(constraint.canBeAppliedTo(resolvedAccessPath) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(resolvedAccessPath);










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = getOrCreateNestedResolver(newAccPath);










 assert nestedResolver.getResolvedAccessPath().equals(constraint.applyToAccessPath(getResolvedAccessPath()));










 assert nestedResolver.resolvedAccessPath.equals(constraint.applyToAccessPath(resolvedAccessPath));










 nestedResolver.registerCallback(callback);










 }










 }





















 protected ResolverTemplate<Field, Fact, Stmt, Method, Incoming> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 if(getResolvedAccessPath().equals(newAccPath))










 if(resolvedAccessPath.equals(newAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(newAccPath)) {










 assert getResolvedAccessPath().getDeltaTo(newAccPath).accesses.length <= 1;










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = createNestedResolver(newAccPath);










 nestedResolvers.put(newAccPath, nestedResolver);










 










 for(Incoming inc : incomingEdges) {










 nestedResolver.addIncoming(inc);










 assert resolvedAccessPath.getDeltaTo(newAccPath).accesses.length <= 1;










 if(allResolversInExclHierarchy.containsKey(newAccPath)) {










 return allResolversInExclHierarchy.get(newAccPath);










 }










 else {










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver = createNestedResolver(newAccPath);










 if(!resolvedAccessPath.getExclusions().isEmpty() || !newAccPath.getExclusions().isEmpty())










 allResolversInExclHierarchy.put(newAccPath, nestedResolver);










 nestedResolvers.put(newAccPath, nestedResolver);










 for(Incoming inc : Lists.newLinkedList(incomingEdges)) {










 nestedResolver.addIncoming(inc);










 }










 return nestedResolver;










 }










 }










 return nestedResolvers.get(newAccPath);



......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ 7b66dd07






......@@ -20,34 +20,32 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {





















 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(analyzer, returnSite, new AccessPath<Field>(), null);










 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, returnSite, null, debugger, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated = false;










 }





















 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.resolvedAccPath = resolvedAccPath;










 this.sourceFact = sourceFact;










 propagated=true;










 }










 










 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+returnSite+">";










 }










 










 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 protected AccessPath<Field> getAccessPathOf(ReturnEdge<Field, Fact, Stmt, Method> inc) {










 return inc.incAccessPath;










 return inc.usedAccessPathOfIncResolver.applyTo(inc.incAccessPath);










 }










 










 public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact, 



......@@ -58,8 +56,12 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }










 










 protected void processIncomingGuaranteedPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, retEdge.incFact);










 } 










 else {










 propagated=true;










 sourceFact = retEdge.incFact;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<Field, Fact, Stmt, Method>(retEdge.incFact, new AccessPath<Field>(), this)));










 }



......@@ -76,26 +78,40 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(analyzer, returnSite, newAccPath, this);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, debugger, newAccPath, this);










 }










 










 public Stmt getReturnSite() {










 return returnSite;










 }










 










 private boolean isNullOrCallEdgeResolver(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(resolver == null)










 return true;










 if(resolver instanceof CallEdgeResolver) {










 return !(resolver instanceof ZeroCallEdgeResolver);










 }










 return false;










 }










 










 private void resolveViaDelta(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(retEdge.incResolver == null || retEdge.incResolver instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.incResolver)) {










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPath());










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(resolvedAccessPath);










 assert delta.accesses.length <= 1;










 retEdge.incResolver.resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {





















 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










 if(resolver instanceof ZeroCallEdgeResolver) {










 ReturnSiteResolver.this.interest(((ZeroCallEdgeResolver<Field, Fact, Stmt, Method>) resolver).










 copyWithAnalyzer(ReturnSiteResolver.this.analyzer));










 } else {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(resolvedAccessPath)));










 ReturnSiteResolver.this.interest(ReturnSiteResolver.this);










 }










 }










 










 @Override



......@@ -107,24 +123,28 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }





















 private void resolveViaDeltaAndPotentiallyDelegateToCallSite(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath));










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 AccessPath<Field> inc = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath);










 if(!retEdge.callDelta.canBeAppliedTo(inc))










 return;










 










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(inc);










 if(resolvedAccessPath.isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest();










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 interest(this);










 } else if(currAccPath.isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }










 }





















 protected void resolveViaCallSiteResolver(final ReturnEdge<Field, Fact, Stmt, Method> retEdge, AccessPath<Field> currAccPath) {










 if(retEdge.resolverAtCaller == null || retEdge.resolverAtCaller instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.resolverAtCaller)) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(resolvedAccessPath)), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(resolver);










 }










 










 @Override



......














src/heros/fieldsens/SourceStmtAnnotatedMethodAnalyzer.java








View file @ 7b66dd07






......@@ -21,18 +21,21 @@ public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>









 private Method method;










 private DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {





















 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Key<Fact, Stmt> key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Synchronizer<Stmt> synchronizer;










 private Debugger<Field, Fact, Stmt, Method> debugger;










 










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer) {










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.synchronizer = synchronizer;










 this.debugger = debugger;










 }










 










 @Override



......














src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ 7b66dd07






......@@ -16,11 +16,15 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes




















 private ZeroHandler<Field> zeroHandler;





















 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler) {










 super(analyzer);










 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler, Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer, debugger);










 this.zeroHandler = zeroHandler;










 }





















 ZeroCallEdgeResolver<Field, Fact, Stmt, Method> copyWithAnalyzer(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 return new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(analyzer, zeroHandler, debugger);










 }










 










 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 if(zeroHandler.shouldGenerateAccessPath(constraint.applyToAccessPath(new AccessPath<Field>())))



......@@ -28,7 +32,7 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 }










 










 @Override










 public void interest() {










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 }










 










 @Override



......@@ -36,6 +40,11 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 return this;










 }





















 @Override










 public String toString() {










 return "[0-Resolver"+super.toString()+"]";










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;



......









Prev


1


2


Next













.classpath








View file @ 7b66dd07













<?xml version="1.0" encoding="UTF-8"?>










<classpath>










 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>










 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry kind="src" path="test"/>










 <classpathentry including="**/*.java" kind="src" output="target/classes" path="src">










 <attributes>










 <attribute name="optional" value="true"/>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry kind="src" output="target/test-classes" path="test">










 <attributes>










 <attribute name="optional" value="true"/>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry exported="true" kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry kind="lib" path="junit.jar"/>










 <classpathentry kind="lib" path="org.hamcrest.core_1.3.0.jar"/>










 <classpathentry kind="lib" path="mockito-all-1.9.5.jar"/>










 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6">










 <attributes>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry kind="con" path="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER">










 <attributes>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry exported="true" kind="lib" path="guava-18.0.jar"/>










 <classpathentry kind="output" path="bin"/>










 <classpathentry kind="output" path="target/classes"/>










</classpath>












.classpath








View file @ 7b66dd07








.classpath










View file @ 7b66dd07


7b66dd07










<?xml version="1.0" encoding="UTF-8"?>










<classpath>










 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>










 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry kind="src" path="test"/>










 <classpathentry including="**/*.java" kind="src" output="target/classes" path="src">










 <attributes>










 <attribute name="optional" value="true"/>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry kind="src" output="target/test-classes" path="test">










 <attributes>










 <attribute name="optional" value="true"/>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry exported="true" kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry kind="lib" path="junit.jar"/>










 <classpathentry kind="lib" path="org.hamcrest.core_1.3.0.jar"/>










 <classpathentry kind="lib" path="mockito-all-1.9.5.jar"/>










 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6">










 <attributes>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry kind="con" path="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER">










 <attributes>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry exported="true" kind="lib" path="guava-18.0.jar"/>










 <classpathentry kind="output" path="bin"/>










 <classpathentry kind="output" path="target/classes"/>










</classpath>













<?xml version="1.0" encoding="UTF-8"?>










<classpath>










 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>










 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry kind="src" path="test"/>










 <classpathentry including="**/*.java" kind="src" output="target/classes" path="src">










 <attributes>










 <attribute name="optional" value="true"/>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry kind="src" output="target/test-classes" path="test">










 <attributes>










 <attribute name="optional" value="true"/>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry exported="true" kind="lib" path="slf4j-api-1.7.5.jar"/>










 <classpathentry exported="true" kind="lib" path="slf4j-simple-1.7.5.jar"/>










 <classpathentry kind="lib" path="junit.jar"/>










 <classpathentry kind="lib" path="org.hamcrest.core_1.3.0.jar"/>










 <classpathentry kind="lib" path="mockito-all-1.9.5.jar"/>










 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6">










 <attributes>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry kind="con" path="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER">










 <attributes>










 <attribute name="maven.pomderived" value="true"/>










 </attributes>










 </classpathentry>










 <classpathentry exported="true" kind="lib" path="guava-18.0.jar"/>










 <classpathentry kind="output" path="bin"/>










 <classpathentry kind="output" path="target/classes"/>










</classpath>


<?xml version="1.0" encoding="UTF-8"?><?xml version="1.0" encoding="UTF-8"?><classpath><classpath> <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/><classpathentrykind="con"path="org.eclipse.jdt.launching.JRE_CONTAINER"/> <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/><classpathentrykind="con"path="org.eclipse.pde.core.requiredPlugins"/> <classpathentry kind="src" path="src"/><classpathentrykind="src"path="src"/> <classpathentry kind="src" path="test"/><classpathentrykind="src"path="test"/> <classpathentry including="**/*.java" kind="src" output="target/classes" path="src"><classpathentryincluding="**/*.java"kind="src"output="target/classes"path="src"> <attributes><attributes> <attribute name="optional" value="true"/><attributename="optional"value="true"/> <attribute name="maven.pomderived" value="true"/><attributename="maven.pomderived"value="true"/> </attributes></attributes> </classpathentry></classpathentry> <classpathentry kind="src" output="target/test-classes" path="test"><classpathentrykind="src"output="target/test-classes"path="test"> <attributes><attributes> <attribute name="optional" value="true"/><attributename="optional"value="true"/> <attribute name="maven.pomderived" value="true"/><attributename="maven.pomderived"value="true"/> </attributes></attributes> </classpathentry></classpathentry> <classpathentry exported="true" kind="lib" path="slf4j-api-1.7.5.jar"/><classpathentryexported="true"kind="lib"path="slf4j-api-1.7.5.jar"/> <classpathentry exported="true" kind="lib" path="slf4j-simple-1.7.5.jar"/><classpathentryexported="true"kind="lib"path="slf4j-simple-1.7.5.jar"/> <classpathentry kind="lib" path="junit.jar"/><classpathentrykind="lib"path="junit.jar"/> <classpathentry kind="lib" path="org.hamcrest.core_1.3.0.jar"/><classpathentrykind="lib"path="org.hamcrest.core_1.3.0.jar"/> <classpathentry kind="lib" path="mockito-all-1.9.5.jar"/><classpathentrykind="lib"path="mockito-all-1.9.5.jar"/> <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"><classpathentrykind="con"path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"> <attributes><attributes> <attribute name="maven.pomderived" value="true"/><attributename="maven.pomderived"value="true"/> </attributes></attributes> </classpathentry></classpathentry> <classpathentry kind="con" path="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER"><classpathentrykind="con"path="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER"> <attributes><attributes> <attribute name="maven.pomderived" value="true"/><attributename="maven.pomderived"value="true"/> </attributes></attributes> </classpathentry></classpathentry> <classpathentry exported="true" kind="lib" path="guava-18.0.jar"/><classpathentryexported="true"kind="lib"path="guava-18.0.jar"/> <classpathentry kind="output" path="bin"/><classpathentrykind="output"path="bin"bin/> <classpathentry kind="output" path="target/classes"/><classpathentrykind="output"path="target/classes"target/classes/></classpath></classpath>








.gitignore








View file @ 7b66dd07






......@@ -8,3 +8,5 @@ bin









heros-trunk.jar










/javadoc










/reports










/debug










/target/












.gitignore








View file @ 7b66dd07








.gitignore










View file @ 7b66dd07


7b66dd07



......@@ -8,3 +8,5 @@ bin









heros-trunk.jar










/javadoc










/reports










/debug










/target/






......@@ -8,3 +8,5 @@ bin









heros-trunk.jar










/javadoc










/reports










/debug










/target/


heros-trunk.jar/javadoc/reports/debug/target/








.project








View file @ 7b66dd07













<?xml version="1.0" encoding="UTF-8"?>










<projectDescription>










 <name>heros</name>










 <comment></comment>










 <projects>










 </projects>










 <buildSpec>










 <buildCommand>










 <name>org.eclipse.jdt.core.javabuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.ManifestBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.SchemaBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 </buildSpec>










 <natures>










 <nature>org.eclipse.jdt.core.javanature</nature>










 <nature>org.eclipse.pde.PluginNature</nature>










 <nature>edu.umd.cs.findbugs.plugin.eclipse.findbugsNature</nature>










 </natures>










</projectDescription>









<?xml version="1.0" encoding="UTF-8"?>










<projectDescription>










 <name>heros</name>










 <comment></comment>










 <projects>










 </projects>










 <buildSpec>










 <buildCommand>










 <name>org.eclipse.jdt.core.javabuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.ManifestBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.SchemaBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.m2e.core.maven2Builder</name>










 <arguments>










 </arguments>










 </buildCommand>










 </buildSpec>










 <natures>










 <nature>org.eclipse.m2e.core.maven2Nature</nature>










 <nature>org.eclipse.jdt.core.javanature</nature>










 <nature>org.eclipse.pde.PluginNature</nature>










 <nature>edu.umd.cs.findbugs.plugin.eclipse.findbugsNature</nature>










 </natures>










</projectDescription>












.project








View file @ 7b66dd07








.project










View file @ 7b66dd07


7b66dd07










<?xml version="1.0" encoding="UTF-8"?>










<projectDescription>










 <name>heros</name>










 <comment></comment>










 <projects>










 </projects>










 <buildSpec>










 <buildCommand>










 <name>org.eclipse.jdt.core.javabuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.ManifestBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.SchemaBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 </buildSpec>










 <natures>










 <nature>org.eclipse.jdt.core.javanature</nature>










 <nature>org.eclipse.pde.PluginNature</nature>










 <nature>edu.umd.cs.findbugs.plugin.eclipse.findbugsNature</nature>










 </natures>










</projectDescription>









<?xml version="1.0" encoding="UTF-8"?>










<projectDescription>










 <name>heros</name>










 <comment></comment>










 <projects>










 </projects>










 <buildSpec>










 <buildCommand>










 <name>org.eclipse.jdt.core.javabuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.ManifestBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.SchemaBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.m2e.core.maven2Builder</name>










 <arguments>










 </arguments>










 </buildCommand>










 </buildSpec>










 <natures>










 <nature>org.eclipse.m2e.core.maven2Nature</nature>










 <nature>org.eclipse.jdt.core.javanature</nature>










 <nature>org.eclipse.pde.PluginNature</nature>










 <nature>edu.umd.cs.findbugs.plugin.eclipse.findbugsNature</nature>










 </natures>










</projectDescription>













<?xml version="1.0" encoding="UTF-8"?>










<projectDescription>










 <name>heros</name>










 <comment></comment>










 <projects>










 </projects>










 <buildSpec>










 <buildCommand>










 <name>org.eclipse.jdt.core.javabuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.ManifestBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.SchemaBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 </buildSpec>










 <natures>










 <nature>org.eclipse.jdt.core.javanature</nature>










 <nature>org.eclipse.pde.PluginNature</nature>










 <nature>edu.umd.cs.findbugs.plugin.eclipse.findbugsNature</nature>










 </natures>










</projectDescription>









<?xml version="1.0" encoding="UTF-8"?>










<projectDescription>










 <name>heros</name>










 <comment></comment>










 <projects>










 </projects>










 <buildSpec>










 <buildCommand>










 <name>org.eclipse.jdt.core.javabuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.ManifestBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.pde.SchemaBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder</name>










 <arguments>










 </arguments>










 </buildCommand>










 <buildCommand>










 <name>org.eclipse.m2e.core.maven2Builder</name>










 <arguments>










 </arguments>










 </buildCommand>










 </buildSpec>










 <natures>










 <nature>org.eclipse.m2e.core.maven2Nature</nature>










 <nature>org.eclipse.jdt.core.javanature</nature>










 <nature>org.eclipse.pde.PluginNature</nature>










 <nature>edu.umd.cs.findbugs.plugin.eclipse.findbugsNature</nature>










 </natures>










</projectDescription>


<?xml version="1.0" encoding="UTF-8"?><?xml version="1.0" encoding="UTF-8"?><projectDescription><projectDescription> <name>heros</name><name></name> <comment></comment><comment></comment> <projects><projects> </projects></projects> <buildSpec><buildSpec> <buildCommand><buildCommand> <name>org.eclipse.jdt.core.javabuilder</name><name></name> <arguments><arguments> </arguments></arguments> </buildCommand></buildCommand> <buildCommand><buildCommand> <name>org.eclipse.pde.ManifestBuilder</name><name></name> <arguments><arguments> </arguments></arguments> </buildCommand></buildCommand> <buildCommand><buildCommand> <name>org.eclipse.pde.SchemaBuilder</name><name></name> <arguments><arguments> </arguments></arguments> </buildCommand></buildCommand> <buildCommand><buildCommand> <name>edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder</name><name></name> <arguments><arguments> </arguments></arguments> </buildCommand></buildCommand> </buildSpec></buildSpec> <natures><natures> <nature>org.eclipse.jdt.core.javanature</nature><nature></nature> <nature>org.eclipse.pde.PluginNature</nature><nature></nature> <nature>edu.umd.cs.findbugs.plugin.eclipse.findbugsNature</nature><nature></nature> </natures></natures></projectDescription></projectDescription><?xml version="1.0" encoding="UTF-8"?><?xml version="1.0" encoding="UTF-8"?><projectDescription><projectDescription> <name>heros</name><name></name> <comment></comment><comment></comment> <projects><projects> </projects></projects> <buildSpec><buildSpec> <buildCommand><buildCommand> <name>org.eclipse.jdt.core.javabuilder</name><name></name> <arguments><arguments> </arguments></arguments> </buildCommand></buildCommand> <buildCommand><buildCommand> <name>org.eclipse.pde.ManifestBuilder</name><name></name> <arguments><arguments> </arguments></arguments> </buildCommand></buildCommand> <buildCommand><buildCommand> <name>org.eclipse.pde.SchemaBuilder</name><name></name> <arguments><arguments> </arguments></arguments> </buildCommand></buildCommand> <buildCommand><buildCommand> <name>edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder</name><name></name> <arguments><arguments> </arguments></arguments> </buildCommand></buildCommand> <buildCommand><buildCommand> <name>org.eclipse.m2e.core.maven2Builder</name><name></name> <arguments><arguments> </arguments></arguments> </buildCommand></buildCommand> </buildSpec></buildSpec> <natures><natures> <nature>org.eclipse.m2e.core.maven2Nature</nature><nature></nature> <nature>org.eclipse.jdt.core.javanature</nature><nature></nature> <nature>org.eclipse.pde.PluginNature</nature><nature></nature> <nature>edu.umd.cs.findbugs.plugin.eclipse.findbugsNature</nature><nature></nature> </natures></natures></projectDescription></projectDescription>








pom.xml



0 â†’ 100644







View file @ 7b66dd07













<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">










 <modelVersion>4.0.0</modelVersion>










 <groupId>heros</groupId>










 <artifactId>heros</artifactId>










 <version>0.0.1-SNAPSHOT</version>










 <build>










 <sourceDirectory>src</sourceDirectory>










 <testSourceDirectory>test</testSourceDirectory>










 <resources>










 <resource>










 <directory>src</directory>










 <excludes>










 <exclude>**/*.java</exclude>










 </excludes>










 </resource>










 </resources>










 <plugins>










 <plugin>










 <artifactId>maven-compiler-plugin</artifactId>










 <version>3.1</version>










 <configuration>










 <source>1.6</source>










 <target>1.6</target>










 </configuration>










 </plugin>










 </plugins>










 </build>










 <dependencies>










 <dependency>










 <groupId>org.functionaljava</groupId>










 <artifactId>functionaljava</artifactId>










 <version>4.2</version>










 </dependency>










 </dependencies>










</project>




\ No newline at end of file












pom.xml



0 â†’ 100644







View file @ 7b66dd07








pom.xml



0 â†’ 100644









View file @ 7b66dd07


7b66dd07










<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">










 <modelVersion>4.0.0</modelVersion>










 <groupId>heros</groupId>










 <artifactId>heros</artifactId>










 <version>0.0.1-SNAPSHOT</version>










 <build>










 <sourceDirectory>src</sourceDirectory>










 <testSourceDirectory>test</testSourceDirectory>










 <resources>










 <resource>










 <directory>src</directory>










 <excludes>










 <exclude>**/*.java</exclude>










 </excludes>










 </resource>










 </resources>










 <plugins>










 <plugin>










 <artifactId>maven-compiler-plugin</artifactId>










 <version>3.1</version>










 <configuration>










 <source>1.6</source>










 <target>1.6</target>










 </configuration>










 </plugin>










 </plugins>










 </build>










 <dependencies>










 <dependency>










 <groupId>org.functionaljava</groupId>










 <artifactId>functionaljava</artifactId>










 <version>4.2</version>










 </dependency>










 </dependencies>










</project>




\ No newline at end of file













<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">










 <modelVersion>4.0.0</modelVersion>










 <groupId>heros</groupId>










 <artifactId>heros</artifactId>










 <version>0.0.1-SNAPSHOT</version>










 <build>










 <sourceDirectory>src</sourceDirectory>










 <testSourceDirectory>test</testSourceDirectory>










 <resources>










 <resource>










 <directory>src</directory>










 <excludes>










 <exclude>**/*.java</exclude>










 </excludes>










 </resource>










 </resources>










 <plugins>










 <plugin>










 <artifactId>maven-compiler-plugin</artifactId>










 <version>3.1</version>










 <configuration>










 <source>1.6</source>










 <target>1.6</target>










 </configuration>










 </plugin>










 </plugins>










 </build>










 <dependencies>










 <dependency>










 <groupId>org.functionaljava</groupId>










 <artifactId>functionaljava</artifactId>










 <version>4.2</version>










 </dependency>










 </dependencies>










</project>




\ No newline at end of file


<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"><projectxmlns="http://maven.apache.org/POM/4.0.0"xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"> <modelVersion>4.0.0</modelVersion><modelVersion></modelVersion> <groupId>heros</groupId><groupId></groupId> <artifactId>heros</artifactId><artifactId></artifactId> <version>0.0.1-SNAPSHOT</version><version></version> <build><build> <sourceDirectory>src</sourceDirectory><sourceDirectory></sourceDirectory> <testSourceDirectory>test</testSourceDirectory><testSourceDirectory></testSourceDirectory> <resources><resources> <resource><resource> <directory>src</directory><directory></directory> <excludes><excludes> <exclude>**/*.java</exclude><exclude></exclude> </excludes></excludes> </resource></resource> </resources></resources> <plugins><plugins> <plugin><plugin> <artifactId>maven-compiler-plugin</artifactId><artifactId></artifactId> <version>3.1</version><version></version> <configuration><configuration> <source>1.6</source><source></source> <target>1.6</target><target></target> </configuration></configuration> </plugin></plugin> </plugins></plugins> </build></build> <dependencies><dependencies> <dependency><dependency> <groupId>org.functionaljava</groupId><groupId></groupId> <artifactId>functionaljava</artifactId><artifactId></artifactId> <version>4.2</version><version></version> </dependency></dependency> </dependencies></dependencies></project></project>








src/heros/edgefunc/AllTop.java








View file @ 7b66dd07






......@@ -26,7 +26,7 @@ public class AllTop<V> implements EdgeFunction<V> {









 }





















 public EdgeFunction<V> composeWith(EdgeFunction<V> secondFunction) {










 return secondFunction;










 return this;










 }





















 public EdgeFunction<V> joinWith(EdgeFunction<V> otherFunction) {



......












src/heros/edgefunc/AllTop.java








View file @ 7b66dd07








src/heros/edgefunc/AllTop.java










View file @ 7b66dd07


7b66dd07



......@@ -26,7 +26,7 @@ public class AllTop<V> implements EdgeFunction<V> {









 }





















 public EdgeFunction<V> composeWith(EdgeFunction<V> secondFunction) {










 return secondFunction;










 return this;










 }





















 public EdgeFunction<V> joinWith(EdgeFunction<V> otherFunction) {



......






......@@ -26,7 +26,7 @@ public class AllTop<V> implements EdgeFunction<V> {









 }





















 public EdgeFunction<V> composeWith(EdgeFunction<V> secondFunction) {










 return secondFunction;










 return this;










 }





















 public EdgeFunction<V> joinWith(EdgeFunction<V> otherFunction) {



......


 }} public EdgeFunction<V> composeWith(EdgeFunction<V> secondFunction) {publicEdgeFunction<V>composeWith(EdgeFunction<V>secondFunction){ return secondFunction;returnsecondFunctionsecondFunction; return this;returnthisthis; }} public EdgeFunction<V> joinWith(EdgeFunction<V> otherFunction) {publicEdgeFunction<V>joinWith(EdgeFunction<V>otherFunction){








src/heros/fieldsens/AccessPath.java








View file @ 7b66dd07






......@@ -270,4 +270,8 @@ public class AccessPath<T> {









 public T getFirstAccess() {










 return accesses[0];










 }





















 Set<T> getExclusions() {










 return exclusions;










 }










}












src/heros/fieldsens/AccessPath.java








View file @ 7b66dd07








src/heros/fieldsens/AccessPath.java










View file @ 7b66dd07


7b66dd07



......@@ -270,4 +270,8 @@ public class AccessPath<T> {









 public T getFirstAccess() {










 return accesses[0];










 }





















 Set<T> getExclusions() {










 return exclusions;










 }










}






......@@ -270,4 +270,8 @@ public class AccessPath<T> {









 public T getFirstAccess() {










 return accesses[0];










 }





















 Set<T> getExclusions() {










 return exclusions;










 }










}


 public T getFirstAccess() {publicTgetFirstAccess(){ return accesses[0];returnaccesses[0]; }} Set<T> getExclusions() {Set<T>getExclusions(){ return exclusions;returnexclusions; }}}}








src/heros/fieldsens/AccessPathHandler.java








View file @ 7b66dd07






......@@ -19,10 +19,12 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {




















 private AccessPath<Field> accessPath;










 private Resolver<Field, Fact, Stmt, Method> resolver;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.accessPath = accessPath;










 this.resolver = resolver;










 this.debugger = debugger;










 }





















 public boolean canRead(Field field) {



......@@ -42,7 +44,7 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {









 }










 










 public ConstrainedFact<Field, Fact, Stmt, Method> generateWithEmptyAccessPath(Fact fact, ZeroHandler<Field> zeroHandler) {










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler)));










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler, debugger)));










 }










 










 public ResultBuilder<Field, Fact, Stmt, Method> prepend(final Field field) {



......@@ -73,15 +75,10 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {









 public ResultBuilder<Field, Fact, Stmt, Method> overwrite(final Field field) {










 if(mayBeEmpty())










 return new ResultBuilder<Field, Fact, Stmt, Method>() {










 @SuppressWarnings("unchecked")










 @Override










 public ConstrainedFact<Field, Fact, Stmt, Method> generate(Fact fact) {










 if(accessPath.canRead(field)) {










 AccessPath<Field> tempAccPath = accessPath.removeFirst();










 if(tempAccPath.hasEmptyAccessPath())










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, tempAccPath.appendExcludedFieldReference(field), resolver));










 else










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, tempAccPath, resolver));










 } else if(accessPath.isAccessInExclusions(field))










 if(accessPath.isAccessInExclusions(field))










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, accessPath, resolver));










 else










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, accessPath.appendExcludedFieldReference(field), resolver), new WriteFieldConstraint<Field>(field));



......












src/heros/fieldsens/AccessPathHandler.java








View file @ 7b66dd07








src/heros/fieldsens/AccessPathHandler.java










View file @ 7b66dd07


7b66dd07



......@@ -19,10 +19,12 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {




















 private AccessPath<Field> accessPath;










 private Resolver<Field, Fact, Stmt, Method> resolver;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.accessPath = accessPath;










 this.resolver = resolver;










 this.debugger = debugger;










 }





















 public boolean canRead(Field field) {



......@@ -42,7 +44,7 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {









 }










 










 public ConstrainedFact<Field, Fact, Stmt, Method> generateWithEmptyAccessPath(Fact fact, ZeroHandler<Field> zeroHandler) {










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler)));










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler, debugger)));










 }










 










 public ResultBuilder<Field, Fact, Stmt, Method> prepend(final Field field) {



......@@ -73,15 +75,10 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {









 public ResultBuilder<Field, Fact, Stmt, Method> overwrite(final Field field) {










 if(mayBeEmpty())










 return new ResultBuilder<Field, Fact, Stmt, Method>() {










 @SuppressWarnings("unchecked")










 @Override










 public ConstrainedFact<Field, Fact, Stmt, Method> generate(Fact fact) {










 if(accessPath.canRead(field)) {










 AccessPath<Field> tempAccPath = accessPath.removeFirst();










 if(tempAccPath.hasEmptyAccessPath())










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, tempAccPath.appendExcludedFieldReference(field), resolver));










 else










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, tempAccPath, resolver));










 } else if(accessPath.isAccessInExclusions(field))










 if(accessPath.isAccessInExclusions(field))










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, accessPath, resolver));










 else










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, accessPath.appendExcludedFieldReference(field), resolver), new WriteFieldConstraint<Field>(field));



......






......@@ -19,10 +19,12 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {




















 private AccessPath<Field> accessPath;










 private Resolver<Field, Fact, Stmt, Method> resolver;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.accessPath = accessPath;










 this.resolver = resolver;










 this.debugger = debugger;










 }





















 public boolean canRead(Field field) {



......@@ -42,7 +44,7 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {









 }










 










 public ConstrainedFact<Field, Fact, Stmt, Method> generateWithEmptyAccessPath(Fact fact, ZeroHandler<Field> zeroHandler) {










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler)));










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler, debugger)));










 }










 










 public ResultBuilder<Field, Fact, Stmt, Method> prepend(final Field field) {



......@@ -73,15 +75,10 @@ public class AccessPathHandler<Field, Fact, Stmt, Method> {









 public ResultBuilder<Field, Fact, Stmt, Method> overwrite(final Field field) {










 if(mayBeEmpty())










 return new ResultBuilder<Field, Fact, Stmt, Method>() {










 @SuppressWarnings("unchecked")










 @Override










 public ConstrainedFact<Field, Fact, Stmt, Method> generate(Fact fact) {










 if(accessPath.canRead(field)) {










 AccessPath<Field> tempAccPath = accessPath.removeFirst();










 if(tempAccPath.hasEmptyAccessPath())










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, tempAccPath.appendExcludedFieldReference(field), resolver));










 else










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, tempAccPath, resolver));










 } else if(accessPath.isAccessInExclusions(field))










 if(accessPath.isAccessInExclusions(field))










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, accessPath, resolver));










 else










 return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, accessPath.appendExcludedFieldReference(field), resolver), new WriteFieldConstraint<Field>(field));



......


 private AccessPath<Field> accessPath;privateAccessPath<Field>accessPath; private Resolver<Field, Fact, Stmt, Method> resolver;privateResolver<Field,Fact,Stmt,Method>resolver; private Debugger<Field, Fact, Stmt, Method> debugger;privateDebugger<Field,Fact,Stmt,Method>debugger; public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {publicAccessPathHandler(AccessPath<Field>accessPath,Resolver<Field,Fact,Stmt,Method>resolver){ public AccessPathHandler(AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver, Debugger<Field, Fact, Stmt, Method> debugger) {publicAccessPathHandler(AccessPath<Field>accessPath,Resolver<Field,Fact,Stmt,Method>resolver,, DebuggerDebugger<<FieldField,, FactFact,, StmtStmt,, MethodMethod>> debuggerdebugger){ this.accessPath = accessPath;this.accessPath=accessPath; this.resolver = resolver;this.resolver=resolver; this.debugger = debugger;this.debugger=debugger; }} public boolean canRead(Field field) {publicbooleancanRead(Fieldfield){ }}  public ConstrainedFact<Field, Fact, Stmt, Method> generateWithEmptyAccessPath(Fact fact, ZeroHandler<Field> zeroHandler) {publicConstrainedFact<Field,Fact,Stmt,Method>generateWithEmptyAccessPath(Factfact,ZeroHandler<Field>zeroHandler){ return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler)));returnnewConstrainedFact<Field,Fact,Stmt,Method>(newWrappedFact<Field,Fact,Stmt,Method>(fact,newAccessPath<Field>(),newZeroCallEdgeResolver<Field,Fact,Stmt,Method>(resolver.analyzer,zeroHandler))); return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, new AccessPath<Field>(), new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(resolver.analyzer, zeroHandler, debugger)));returnnewConstrainedFact<Field,Fact,Stmt,Method>(newWrappedFact<Field,Fact,Stmt,Method>(fact,newAccessPath<Field>(),newZeroCallEdgeResolver<Field,Fact,Stmt,Method>(resolver.analyzer,zeroHandler,, debuggerdebugger))); }}  public ResultBuilder<Field, Fact, Stmt, Method> prepend(final Field field) {publicResultBuilder<Field,Fact,Stmt,Method>prepend(finalFieldfield){ public ResultBuilder<Field, Fact, Stmt, Method> overwrite(final Field field) {publicResultBuilder<Field,Fact,Stmt,Method>overwrite(finalFieldfield){ if(mayBeEmpty())if(mayBeEmpty()) return new ResultBuilder<Field, Fact, Stmt, Method>() {returnnewResultBuilder<Field,Fact,Stmt,Method>(){ @SuppressWarnings("unchecked")@SuppressWarnings("unchecked") @Override@Override public ConstrainedFact<Field, Fact, Stmt, Method> generate(Fact fact) {publicConstrainedFact<Field,Fact,Stmt,Method>generate(Factfact){ if(accessPath.canRead(field)) {if(accessPath.canRead(field)){ AccessPath<Field> tempAccPath = accessPath.removeFirst();AccessPath<Field>tempAccPath=accessPath.removeFirst(); if(tempAccPath.hasEmptyAccessPath())if(tempAccPath.hasEmptyAccessPath()) return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, tempAccPath.appendExcludedFieldReference(field), resolver));returnnewConstrainedFact<Field,Fact,Stmt,Method>(newWrappedFact<Field,Fact,Stmt,Method>(fact,tempAccPath.appendExcludedFieldReference(field),resolver)); elseelse return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, tempAccPath, resolver));returnnewConstrainedFact<Field,Fact,Stmt,Method>(newWrappedFact<Field,Fact,Stmt,Method>(fact,tempAccPath,resolver)); } else if(accessPath.isAccessInExclusions(field))}elseif(accessPath.isAccessInExclusions(field)) if(accessPath.isAccessInExclusions(field))if(accessPath.isAccessInExclusions(field)) return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, accessPath, resolver));returnnewConstrainedFact<Field,Fact,Stmt,Method>(newWrappedFact<Field,Fact,Stmt,Method>(fact,accessPath,resolver)); elseelse return new ConstrainedFact<Field, Fact, Stmt, Method>(new WrappedFact<Field, Fact, Stmt, Method>(fact, accessPath.appendExcludedFieldReference(field), resolver), new WriteFieldConstraint<Field>(field));returnnewConstrainedFact<Field,Fact,Stmt,Method>(newWrappedFact<Field,Fact,Stmt,Method>(fact,accessPath.appendExcludedFieldReference(field),resolver),newWriteFieldConstraint<Field>(field));








src/heros/fieldsens/BiDiFieldSensitiveIFDSSolver.java








View file @ 7b66dd07






......@@ -31,7 +31,7 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 public BiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> forwardProblem,










 IFDSTabulationProblem<Stmt, Field, Fact, Method, I> backwardProblem, 










 FactMergeHandler<Fact> factHandler, 










 Debugger<Field, Fact, Stmt, Method, I> debugger,










 Debugger<Field, Fact, Stmt, Method> debugger,










 Scheduler scheduler) {










 










 this.scheduler = scheduler;



......@@ -46,11 +46,11 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 }





















 private FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I> createSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> problem, 










 FactMergeHandler<Fact> factHandler, Debugger<Field, Fact, Stmt, Method, I> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 FactMergeHandler<Fact> factHandler, Debugger<Field, Fact, Stmt, Method> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 return new FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I>(problem, factHandler, debugger, scheduler) {










 @Override










 protected MethodAnalyzer<Field, Fact, Stmt, Method> createMethodAnalyzer(Method method) {










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer);










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer, debugger);










 }










 };










 }



......












src/heros/fieldsens/BiDiFieldSensitiveIFDSSolver.java








View file @ 7b66dd07








src/heros/fieldsens/BiDiFieldSensitiveIFDSSolver.java










View file @ 7b66dd07


7b66dd07



......@@ -31,7 +31,7 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 public BiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> forwardProblem,










 IFDSTabulationProblem<Stmt, Field, Fact, Method, I> backwardProblem, 










 FactMergeHandler<Fact> factHandler, 










 Debugger<Field, Fact, Stmt, Method, I> debugger,










 Debugger<Field, Fact, Stmt, Method> debugger,










 Scheduler scheduler) {










 










 this.scheduler = scheduler;



......@@ -46,11 +46,11 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 }





















 private FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I> createSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> problem, 










 FactMergeHandler<Fact> factHandler, Debugger<Field, Fact, Stmt, Method, I> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 FactMergeHandler<Fact> factHandler, Debugger<Field, Fact, Stmt, Method> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 return new FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I>(problem, factHandler, debugger, scheduler) {










 @Override










 protected MethodAnalyzer<Field, Fact, Stmt, Method> createMethodAnalyzer(Method method) {










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer);










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer, debugger);










 }










 };










 }



......






......@@ -31,7 +31,7 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 public BiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> forwardProblem,










 IFDSTabulationProblem<Stmt, Field, Fact, Method, I> backwardProblem, 










 FactMergeHandler<Fact> factHandler, 










 Debugger<Field, Fact, Stmt, Method, I> debugger,










 Debugger<Field, Fact, Stmt, Method> debugger,










 Scheduler scheduler) {










 










 this.scheduler = scheduler;



......@@ -46,11 +46,11 @@ public class BiDiFieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I extends I









 }





















 private FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I> createSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> problem, 










 FactMergeHandler<Fact> factHandler, Debugger<Field, Fact, Stmt, Method, I> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 FactMergeHandler<Fact> factHandler, Debugger<Field, Fact, Stmt, Method> debugger, final SynchronizerImpl<Stmt> synchronizer) {










 return new FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I>(problem, factHandler, debugger, scheduler) {










 @Override










 protected MethodAnalyzer<Field, Fact, Stmt, Method> createMethodAnalyzer(Method method) {










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer);










 return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer, debugger);










 }










 };










 }



......


 public BiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> forwardProblem,publicBiDiFieldSensitiveIFDSSolver(IFDSTabulationProblem<Stmt,Field,Fact,Method,I>forwardProblem, IFDSTabulationProblem<Stmt, Field, Fact, Method, I> backwardProblem, IFDSTabulationProblem<Stmt,Field,Fact,Method,I>backwardProblem, FactMergeHandler<Fact> factHandler, FactMergeHandler<Fact>factHandler, Debugger<Field, Fact, Stmt, Method, I> debugger,Debugger<Field,Fact,Stmt,Method,, II>debugger, Debugger<Field, Fact, Stmt, Method> debugger,Debugger<Field,Fact,Stmt,Method>debugger, Scheduler scheduler) {Schedulerscheduler){  this.scheduler = scheduler;this.scheduler=scheduler; }} private FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I> createSolver(IFDSTabulationProblem<Stmt, Field, Fact, Method, I> problem, privateFieldSensitiveIFDSSolver<Field,Fact,Stmt,Method,I>createSolver(IFDSTabulationProblem<Stmt,Field,Fact,Method,I>problem, FactMergeHandler<Fact> factHandler, Debugger<Field, Fact, Stmt, Method, I> debugger, final SynchronizerImpl<Stmt> synchronizer) {FactMergeHandler<Fact>factHandler,Debugger<Field,Fact,Stmt,Method,, II>debugger,finalSynchronizerImpl<Stmt>synchronizer){ FactMergeHandler<Fact> factHandler, Debugger<Field, Fact, Stmt, Method> debugger, final SynchronizerImpl<Stmt> synchronizer) {FactMergeHandler<Fact>factHandler,Debugger<Field,Fact,Stmt,Method>debugger,finalSynchronizerImpl<Stmt>synchronizer){ return new FieldSensitiveIFDSSolver<Field, Fact, Stmt, Method, I>(problem, factHandler, debugger, scheduler) {returnnewFieldSensitiveIFDSSolver<Field,Fact,Stmt,Method,I>(problem,factHandler,debugger,scheduler){ @Override@Override protected MethodAnalyzer<Field, Fact, Stmt, Method> createMethodAnalyzer(Method method) {protectedMethodAnalyzer<Field,Fact,Stmt,Method>createMethodAnalyzer(Methodmethod){ return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer);returnnewSourceStmtAnnotatedMethodAnalyzer<Field,Fact,Stmt,Method>(method,context,synchronizer); return new SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>(method, context, synchronizer, debugger);returnnewSourceStmtAnnotatedMethodAnalyzer<Field,Fact,Stmt,Method>(method,context,synchronizer,, debuggerdebugger); }} };}; }}








src/heros/fieldsens/CallEdge.java








View file @ 7b66dd07






......@@ -61,14 +61,22 @@ public class CallEdge<Field, Fact, Stmt, Method> {









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFactWithDelta = new WrappedFact<Field, Fact, Stmt, Method>(calleeSourceFact.getFact(), delta.applyTo(calleeSourceFact.getAccessPath()), resolver);










 if(interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath()) != PrefixTestResult.GUARANTEED_PREFIX)










  throw new AssertionError();










 interestedAnalyzer.addIncomingEdge(new CallEdge<Field, Fact, Stmt, Method>(analyzer, 










 assert interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath()) == PrefixTestResult.GUARANTEED_PREFIX;










 










 CallEdge<Field, Fact, Stmt, Method> newCallEdge = new CallEdge<Field, Fact, Stmt, Method>(analyzer, 










 new WrappedFactAtStatement<Field, Fact, Stmt, Method>(factAtCallSite.getStatement(), 










 new WrappedFact<Field, Fact, Stmt, Method>(factAtCallSite.getWrappedFact().getFact(), 










 delta.applyTo(factAtCallSite.getWrappedFact().getAccessPath()), 










 resolver)), 










 calleeSourceFactWithDelta));










 calleeSourceFactWithDelta);










 










 if (resolver instanceof ZeroCallEdgeResolver) {










 interestedAnalyzer.getCallEdgeResolver().incomingEdges.add(newCallEdge);










 interestedAnalyzer.getCallEdgeResolver().interest(((ZeroCallEdgeResolver<Field, Fact, Stmt, Method>) resolver).copyWithAnalyzer(interestedAnalyzer));










 interestedAnalyzer.getCallEdgeResolver().processIncomingGuaranteedPrefix(newCallEdge);










 }










 else










 interestedAnalyzer.addIncomingEdge(newCallEdge);










 }










 










 @Override



......












src/heros/fieldsens/CallEdge.java








View file @ 7b66dd07








src/heros/fieldsens/CallEdge.java










View file @ 7b66dd07


7b66dd07



......@@ -61,14 +61,22 @@ public class CallEdge<Field, Fact, Stmt, Method> {









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFactWithDelta = new WrappedFact<Field, Fact, Stmt, Method>(calleeSourceFact.getFact(), delta.applyTo(calleeSourceFact.getAccessPath()), resolver);










 if(interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath()) != PrefixTestResult.GUARANTEED_PREFIX)










  throw new AssertionError();










 interestedAnalyzer.addIncomingEdge(new CallEdge<Field, Fact, Stmt, Method>(analyzer, 










 assert interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath()) == PrefixTestResult.GUARANTEED_PREFIX;










 










 CallEdge<Field, Fact, Stmt, Method> newCallEdge = new CallEdge<Field, Fact, Stmt, Method>(analyzer, 










 new WrappedFactAtStatement<Field, Fact, Stmt, Method>(factAtCallSite.getStatement(), 










 new WrappedFact<Field, Fact, Stmt, Method>(factAtCallSite.getWrappedFact().getFact(), 










 delta.applyTo(factAtCallSite.getWrappedFact().getAccessPath()), 










 resolver)), 










 calleeSourceFactWithDelta));










 calleeSourceFactWithDelta);










 










 if (resolver instanceof ZeroCallEdgeResolver) {










 interestedAnalyzer.getCallEdgeResolver().incomingEdges.add(newCallEdge);










 interestedAnalyzer.getCallEdgeResolver().interest(((ZeroCallEdgeResolver<Field, Fact, Stmt, Method>) resolver).copyWithAnalyzer(interestedAnalyzer));










 interestedAnalyzer.getCallEdgeResolver().processIncomingGuaranteedPrefix(newCallEdge);










 }










 else










 interestedAnalyzer.addIncomingEdge(newCallEdge);










 }










 










 @Override



......






......@@ -61,14 +61,22 @@ public class CallEdge<Field, Fact, Stmt, Method> {









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFactWithDelta = new WrappedFact<Field, Fact, Stmt, Method>(calleeSourceFact.getFact(), delta.applyTo(calleeSourceFact.getAccessPath()), resolver);










 if(interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath()) != PrefixTestResult.GUARANTEED_PREFIX)










  throw new AssertionError();










 interestedAnalyzer.addIncomingEdge(new CallEdge<Field, Fact, Stmt, Method>(analyzer, 










 assert interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath()) == PrefixTestResult.GUARANTEED_PREFIX;










 










 CallEdge<Field, Fact, Stmt, Method> newCallEdge = new CallEdge<Field, Fact, Stmt, Method>(analyzer, 










 new WrappedFactAtStatement<Field, Fact, Stmt, Method>(factAtCallSite.getStatement(), 










 new WrappedFact<Field, Fact, Stmt, Method>(factAtCallSite.getWrappedFact().getFact(), 










 delta.applyTo(factAtCallSite.getWrappedFact().getAccessPath()), 










 resolver)), 










 calleeSourceFactWithDelta));










 calleeSourceFactWithDelta);










 










 if (resolver instanceof ZeroCallEdgeResolver) {










 interestedAnalyzer.getCallEdgeResolver().incomingEdges.add(newCallEdge);










 interestedAnalyzer.getCallEdgeResolver().interest(((ZeroCallEdgeResolver<Field, Fact, Stmt, Method>) resolver).copyWithAnalyzer(interestedAnalyzer));










 interestedAnalyzer.getCallEdgeResolver().processIncomingGuaranteedPrefix(newCallEdge);










 }










 else










 interestedAnalyzer.addIncomingEdge(newCallEdge);










 }










 










 @Override



......


 @Override@Override public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {publicvoidinterest(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,Resolver<Field,Fact,Stmt,Method>resolver){ WrappedFact<Field, Fact, Stmt, Method> calleeSourceFactWithDelta = new WrappedFact<Field, Fact, Stmt, Method>(calleeSourceFact.getFact(), delta.applyTo(calleeSourceFact.getAccessPath()), resolver);WrappedFact<Field,Fact,Stmt,Method>calleeSourceFactWithDelta=newWrappedFact<Field,Fact,Stmt,Method>(calleeSourceFact.getFact(),delta.applyTo(calleeSourceFact.getAccessPath()),resolver); if(interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath()) != PrefixTestResult.GUARANTEED_PREFIX)ifif((interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath())!=!PrefixTestResult.GUARANTEED_PREFIX))  throw new AssertionError(); throwthrow newnew AssertionErrorAssertionError();(); interestedAnalyzer.addIncomingEdge(new CallEdge<Field, Fact, Stmt, Method>(analyzer, interestedAnalyzerinterestedAnalyzer..addIncomingEdgeaddIncoming((newCallEdge<Field,Fact,Stmt,Method>(analyzer, assert interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath()) == PrefixTestResult.GUARANTEED_PREFIX;assertassert interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath())===PrefixTestResult.GUARANTEED_PREFIX;;  CallEdge<Field, Fact, Stmt, Method> newCallEdge = new CallEdge<Field, Fact, Stmt, Method>(analyzer, CallEdgeCallEdge<<FieldField,, FactFact,, StmtStmt,, MethodMethod>> newCallEdgenewCall == newCallEdge<Field,Fact,Stmt,Method>(analyzer, new WrappedFactAtStatement<Field, Fact, Stmt, Method>(factAtCallSite.getStatement(), newWrappedFactAtStatement<Field,Fact,Stmt,Method>(factAtCallSite.getStatement(), new WrappedFact<Field, Fact, Stmt, Method>(factAtCallSite.getWrappedFact().getFact(), newWrappedFact<Field,Fact,Stmt,Method>(factAtCallSite.getWrappedFact().getFact(), delta.applyTo(factAtCallSite.getWrappedFact().getAccessPath()), delta.applyTo(factAtCallSite.getWrappedFact().getAccessPath()), resolver)), resolver)), calleeSourceFactWithDelta));calleeSourceFactWithDelta)); calleeSourceFactWithDelta);calleeSourceFactWithDelta);  if (resolver instanceof ZeroCallEdgeResolver) {if(resolverinstanceofZeroCallEdgeResolver){ interestedAnalyzer.getCallEdgeResolver().incomingEdges.add(newCallEdge);interestedAnalyzer.getCallEdgeResolver().incomingEdges.add(newCallEdge); interestedAnalyzer.getCallEdgeResolver().interest(((ZeroCallEdgeResolver<Field, Fact, Stmt, Method>) resolver).copyWithAnalyzer(interestedAnalyzer));interestedAnalyzer.getCallEdgeResolver().interest(((ZeroCallEdgeResolver<Field,Fact,Stmt,Method>)resolver).copyWithAnalyzer(interestedAnalyzer)); interestedAnalyzer.getCallEdgeResolver().processIncomingGuaranteedPrefix(newCallEdge);interestedAnalyzer.getCallEdgeResolver().processIncomingGuaranteedPrefix(newCallEdge); }} elseelse interestedAnalyzer.addIncomingEdge(newCallEdge);interestedAnalyzer.addIncomingEdge(newCallEdge); }}  @Override@Override








src/heros/fieldsens/CallEdgeResolver.java








View file @ 7b66dd07






......@@ -17,19 +17,14 @@ import com.google.common.collect.Lists;




















class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> {





















 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 this(analyzer, null);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(analyzer, debugger, null);










 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, analyzer.getAccessPath(), parent, debugger);










 }





















 @Override










 protected AccessPath<Field> getResolvedAccessPath() {










 return analyzer.getAccessPath();










 }










 










 @Override










 protected AccessPath<Field> getAccessPathOf(CallEdge<Field, Fact, Stmt, Method> inc) {










 return inc.getCalleeSourceFact().getAccessPath();



......@@ -60,7 +55,7 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field









 










 @Override










 public String toString() {










 return "";










 return "<"+analyzer.getAccessPath()+":"+analyzer.getMethod()+">";










 }










 










 @Override



......












src/heros/fieldsens/CallEdgeResolver.java








View file @ 7b66dd07








src/heros/fieldsens/CallEdgeResolver.java










View file @ 7b66dd07


7b66dd07



......@@ -17,19 +17,14 @@ import com.google.common.collect.Lists;




















class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> {





















 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 this(analyzer, null);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(analyzer, debugger, null);










 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, analyzer.getAccessPath(), parent, debugger);










 }





















 @Override










 protected AccessPath<Field> getResolvedAccessPath() {










 return analyzer.getAccessPath();










 }










 










 @Override










 protected AccessPath<Field> getAccessPathOf(CallEdge<Field, Fact, Stmt, Method> inc) {










 return inc.getCalleeSourceFact().getAccessPath();



......@@ -60,7 +55,7 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field









 










 @Override










 public String toString() {










 return "";










 return "<"+analyzer.getAccessPath()+":"+analyzer.getMethod()+">";










 }










 










 @Override



......






......@@ -17,19 +17,14 @@ import com.google.common.collect.Lists;




















class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> {





















 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 this(analyzer, null);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(analyzer, debugger, null);










 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, analyzer.getAccessPath(), parent, debugger);










 }





















 @Override










 protected AccessPath<Field> getResolvedAccessPath() {










 return analyzer.getAccessPath();










 }










 










 @Override










 protected AccessPath<Field> getAccessPathOf(CallEdge<Field, Fact, Stmt, Method> inc) {










 return inc.getCalleeSourceFact().getAccessPath();



......@@ -60,7 +55,7 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field









 










 @Override










 public String toString() {










 return "";










 return "<"+analyzer.getAccessPath()+":"+analyzer.getMethod()+">";










 }










 










 @Override



......


class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> {classCallEdgeResolver<Field,Fact,Stmt,Method>extendsResolverTemplate<Field,Fact,Stmt,Method,CallEdge<Field,Fact,Stmt,Method>>{ public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {publicCallEdgeResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer){ this(analyzer, null);this(analyzer,null); public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger) {publicCallEdgeResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,, DebuggerDebugger<<FieldField,, FactFact,, StmtStmt,, MethodMethod>> debuggerdebugger){ this(analyzer, debugger, null);this(analyzer,debuggerdebugger,, null); }}  public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {publicCallEdgeResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,CallEdgeResolver<Field,Fact,Stmt,Method>parent){ super(analyzer, parent);super(analyzer,parentparent); public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Debugger<Field, Fact, Stmt, Method> debugger, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {publicCallEdgeResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,DebuggerDebugger<<FieldField,, FactFact,, StmtStmt,, MethodMethod>> debuggerdebugger,, CallEdgeResolver<Field,Fact,Stmt,Method>parent){ super(analyzer, analyzer.getAccessPath(), parent, debugger);super(analyzer,analyzeranalyzer..getAccessPathgetAccessPath(),(), parentparent,, debuggerdebugger); }} @Override@Override protected AccessPath<Field> getResolvedAccessPath() {protectedAccessPath<Field>getResolvedAccessPath(){ return analyzer.getAccessPath();returnanalyzer.getAccessPath(); }}  @Override@Override protected AccessPath<Field> getAccessPathOf(CallEdge<Field, Fact, Stmt, Method> inc) {protectedAccessPath<Field>getAccessPathOf(CallEdge<Field,Fact,Stmt,Method>inc){ return inc.getCalleeSourceFact().getAccessPath();returninc.getCalleeSourceFact().getAccessPath();  @Override@Override public String toString() {publicStringtoString(){ return "";return""; return "<"+analyzer.getAccessPath()+":"+analyzer.getMethod()+">";return"<"<"++analyzeranalyzer..getAccessPathgetAccessPath()+()+":"":"++analyzeranalyzer..getMethodgetMethod()+()+">"">; }}  @Override@Override








src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ 7b66dd07






......@@ -18,18 +18,22 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {





















 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(analyzer, joinStmt, new AccessPath<Field>(), null);










 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), debugger, null);










 this.factMergeHandler = factMergeHandler;










 propagated=false;










 }










 










 private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, Debugger<Field, Fact, Stmt, Method> debugger, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.resolvedAccPath = resolvedAccPath;










 this.sourceFact = sourceFact;










 propagated=true;










 }










 



......@@ -39,35 +43,53 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 }





















 protected void processIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, fact.getFact());










 }










 else {










 propagated=true;










 sourceFact = fact.getFact();










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(joinStmt, new WrappedFact<Field, Fact, Stmt, Method>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }










 };










 










 private boolean isNullOrCallEdgeResolver(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(resolver == null)










 return true;










 if(resolver instanceof CallEdgeResolver) {










 return !(resolver instanceof ZeroCallEdgeResolver);










 }










 return false;










 }










 










 @Override










 protected void processIncomingPotentialPrefix(WrappedFact<Field, Fact, Stmt, Method> fact) {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 fact.getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest();










 }





















 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 unlock();










 protected void processIncomingPotentialPrefix(final WrappedFact<Field, Fact, Stmt, Method> fact) {










 if(isNullOrCallEdgeResolver(fact.getResolver())) {










 canBeResolvedEmpty();










 }










 else {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccessPath);










 fact.getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest(resolver);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 unlock();










 }










 }










 










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(analyzer, joinStmt, newAccPath, this);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, debugger, this);










 }





















 @Override



......@@ -77,12 +99,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver




















 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+joinStmt+">";










 }





















 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 public Stmt getJoinStmt() {



......












src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ 7b66dd07








src/heros/fieldsens/ControlFlowJoinResolver.java










View file @ 7b66dd07


7b66dd07



......@@ -18,18 +18,22 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {





















 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(analyzer, joinStmt, new AccessPath<Field>(), null);










 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), debugger, null);










 this.factMergeHandler = factMergeHandler;










 propagated=false;










 }










 










 private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, Debugger<Field, Fact, Stmt, Method> debugger, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.resolvedAccPath = resolvedAccPath;










 this.sourceFact = sourceFact;










 propagated=true;










 }










 



......@@ -39,35 +43,53 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 }





















 protected void processIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, fact.getFact());










 }










 else {










 propagated=true;










 sourceFact = fact.getFact();










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(joinStmt, new WrappedFact<Field, Fact, Stmt, Method>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }










 };










 










 private boolean isNullOrCallEdgeResolver(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(resolver == null)










 return true;










 if(resolver instanceof CallEdgeResolver) {










 return !(resolver instanceof ZeroCallEdgeResolver);










 }










 return false;










 }










 










 @Override










 protected void processIncomingPotentialPrefix(WrappedFact<Field, Fact, Stmt, Method> fact) {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 fact.getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest();










 }





















 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 unlock();










 protected void processIncomingPotentialPrefix(final WrappedFact<Field, Fact, Stmt, Method> fact) {










 if(isNullOrCallEdgeResolver(fact.getResolver())) {










 canBeResolvedEmpty();










 }










 else {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccessPath);










 fact.getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest(resolver);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 unlock();










 }










 }










 










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(analyzer, joinStmt, newAccPath, this);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, debugger, this);










 }





















 @Override



......@@ -77,12 +99,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver




















 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+joinStmt+">";










 }





















 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 public Stmt getJoinStmt() {



......






......@@ -18,18 +18,22 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {





















 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(analyzer, joinStmt, new AccessPath<Field>(), null);










 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), debugger, null);










 this.factMergeHandler = factMergeHandler;










 propagated=false;










 }










 










 private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, Debugger<Field, Fact, Stmt, Method> debugger, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.resolvedAccPath = resolvedAccPath;










 this.sourceFact = sourceFact;










 propagated=true;










 }










 



......@@ -39,35 +43,53 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 }





















 protected void processIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, fact.getFact());










 }










 else {










 propagated=true;










 sourceFact = fact.getFact();










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(joinStmt, new WrappedFact<Field, Fact, Stmt, Method>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }










 };










 










 private boolean isNullOrCallEdgeResolver(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(resolver == null)










 return true;










 if(resolver instanceof CallEdgeResolver) {










 return !(resolver instanceof ZeroCallEdgeResolver);










 }










 return false;










 }










 










 @Override










 protected void processIncomingPotentialPrefix(WrappedFact<Field, Fact, Stmt, Method> fact) {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 fact.getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest();










 }





















 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 unlock();










 protected void processIncomingPotentialPrefix(final WrappedFact<Field, Fact, Stmt, Method> fact) {










 if(isNullOrCallEdgeResolver(fact.getResolver())) {










 canBeResolvedEmpty();










 }










 else {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccessPath);










 fact.getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest(resolver);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 unlock();










 }










 }










 










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(analyzer, joinStmt, newAccPath, this);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, debugger, this);










 }





















 @Override



......@@ -77,12 +99,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver




















 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+joinStmt+">";










 }





















 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+joinStmt+" in "+analyzer.getMethod()+">";










 }





















 public Stmt getJoinStmt() {



......


public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {publicclassControlFlowJoinResolver<Field,Fact,Stmt,Method>extendsResolverTemplate<Field,Fact,Stmt,Method,WrappedFact<Field,Fact,Stmt,Method>>{ private Stmt joinStmt;privateStmtjoinStmt; private AccessPath<Field> resolvedAccPath;privateAccessPath<Field>resolvedAccPath; private boolean propagated = false;privatebooleanpropagated=false; private Fact sourceFact;privateFactsourceFact; private FactMergeHandler<Fact> factMergeHandler;privateFactMergeHandler<Fact>factMergeHandler; public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {publicControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtjoinStmt){ this(analyzer, joinStmt, new AccessPath<Field>(), null);this(analyzer,joinStmt,newAccessPath<Field>(),null); public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, Debugger<Field, Fact, Stmt, Method> debugger) {publicControlFlowJoinResolver(FactMergeHandler<Fact>factMergeHandler,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtjoinStmt,Debugger<Field,Fact,Stmt,Method>debugger){ this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), debugger, null);this(factMergeHandler,analyzer,joinStmt,null,newAccessPath<Field>(),debugger,null); this.factMergeHandler = factMergeHandler;this.factMergeHandler=factMergeHandler; propagated=false;propagated=false; }}  private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {privateControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtjoinStmt,AccessPath<Field>resolvedAccPath,ControlFlowJoinResolver<Field,Fact,Stmt,Method>parent){ super(analyzer, parent);super(analyzer,parent); private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, privateControlFlowJoinResolver(FactMergeHandler<Fact>factMergeHandler,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer, Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, Debugger<Field, Fact, Stmt, Method> debugger, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {StmtjoinStmt,FactsourceFact,AccessPath<Field>resolvedAccPath,Debugger<Field,Fact,Stmt,Method>debugger,ControlFlowJoinResolver<Field,Fact,Stmt,Method>parent){ super(analyzer, resolvedAccPath, parent, debugger);super(analyzer,resolvedAccPath,parent,debugger); this.factMergeHandler = factMergeHandler;this.factMergeHandler=factMergeHandler; this.joinStmt = joinStmt;this.joinStmt=joinStmt; this.resolvedAccPath = resolvedAccPath;this.resolvedAccPathresolvedAccPath == resolvedAccPathresolvedAccPath; this.sourceFact = sourceFact;this.sourceFactsourceFact == sourceFactsourceFact; propagated=true;propagated=true; }}  }} protected void processIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method> fact) {protectedvoidprocessIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method>fact){ if(!propagated) {if(!propagated){ if(propagated) {if(propagated){ factMergeHandler.merge(sourceFact, fact.getFact());factMergeHandler.merge(sourceFact,fact.getFact()); }} else {else{ propagated=true;propagated=true; sourceFact = fact.getFact();sourceFact=fact.getFact(); analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(joinStmt, new WrappedFact<Field, Fact, Stmt, Method>(analyzer.processFlowFromJoinStmt(newWrappedFactAtStatement<Field,Fact,Stmt,Method>(joinStmt,newWrappedFact<Field,Fact,Stmt,Method>( fact.getFact(), new AccessPath<Field>(), this)));fact.getFact(),newAccessPath<Field>(),this))); }} };};  private boolean isNullOrCallEdgeResolver(Resolver<Field, Fact, Stmt, Method> resolver) {privatebooleanisNullOrCallEdgeResolver(Resolver<Field,Fact,Stmt,Method>resolver){ if(resolver == null)if(resolver==null) return true;returntrue; if(resolver instanceof CallEdgeResolver) {if(resolverinstanceofCallEdgeResolver){ return !(resolver instanceof ZeroCallEdgeResolver);return!(resolverinstanceofZeroCallEdgeResolver); }} return false;returnfalse; }}  @Override@Override protected void processIncomingPotentialPrefix(WrappedFact<Field, Fact, Stmt, Method> fact) {protectedvoidprocessIncomingPotentialPrefix(WrappedFact<Field,Fact,Stmt,Method>fact){ lock();lock(); Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);Delta<Field>delta=fact.getAccessPath().getDeltaTo(resolvedAccPath); fact.getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {fact.getResolver().resolve(newDeltaConstraint<Field>(delta),newInterestCallback<Field,Fact,Stmt,Method>(){ @Override@Override public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, publicvoidinterest(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {Resolver<Field,Fact,Stmt,Method>resolver){ ControlFlowJoinResolver.this.interest();ControlFlowJoinResolver.this.interest(); }} @Override@Override public void canBeResolvedEmpty() {publicvoidcanBeResolvedEmpty(){ ControlFlowJoinResolver.this.canBeResolvedEmpty();ControlFlowJoinResolver.this.canBeResolvedEmpty(); }} });}); unlock();unlock(); protected void processIncomingPotentialPrefix(final WrappedFact<Field, Fact, Stmt, Method> fact) {protectedvoidprocessIncomingPotentialPrefix(finalWrappedFact<Field,Fact,Stmt,Method>fact){ if(isNullOrCallEdgeResolver(fact.getResolver())) {if(isNullOrCallEdgeResolver(fact.getResolver())){ canBeResolvedEmpty();canBeResolvedEmpty(); }} else {else{ lock();lock(); Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccessPath);Delta<Field>delta=fact.getAccessPath().getDeltaTo(resolvedAccessPath); fact.getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {fact.getResolver().resolve(newDeltaConstraint<Field>(delta),newInterestCallback<Field,Fact,Stmt,Method>(){ @Override@Override public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, publicvoidinterest(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {Resolver<Field,Fact,Stmt,Method>resolver){ ControlFlowJoinResolver.this.interest(resolver);ControlFlowJoinResolver.this.interest(resolver); }}  @Override@Override public void canBeResolvedEmpty() {publicvoidcanBeResolvedEmpty(){ ControlFlowJoinResolver.this.canBeResolvedEmpty();ControlFlowJoinResolver.this.canBeResolvedEmpty(); }} });}); unlock();unlock(); }} }}  @Override@Override protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {protectedResolverTemplate<Field,Fact,Stmt,Method,WrappedFact<Field,Fact,Stmt,Method>>createNestedResolver(AccessPath<Field>newAccPath){ return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(analyzer, joinStmt, newAccPath, this);returnnewControlFlowJoinResolver<Field,Fact,Stmt,Method>(analyzer,joinStmt,newAccPathnewAccPath,this); return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, debugger, this);returnnewControlFlowJoinResolver<Field,Fact,Stmt,Method>(factMergeHandlerfactMergeHandler,, analyzer,joinStmt,sourceFactsourceFact,, newAccPathnewAccPath,, debuggerdebugger,this); }} @Override@Override @Override@Override public String toString() {publicStringtoString(){ return "<"+resolvedAccPath+":"+joinStmt+">";return"<"+resolvedAccPath+":"+joinStmt+">"; }} @Override@Override public AccessPath<Field> getResolvedAccessPath() {publicAccessPath<Field>getResolvedAccessPath(){ return resolvedAccPath;returnresolvedAccPath; return "<"+resolvedAccessPath+":"+joinStmt+" in "+analyzer.getMethod()+">";return"<"+resolvedAccessPath+":"+joinStmt+" in "+analyzer.getMethod()+">"; }} public Stmt getJoinStmt() {publicStmtgetJoinStmt(){








src/heros/fieldsens/Debugger.java








View file @ 7b66dd07






......@@ -11,18 +11,24 @@









package heros.fieldsens;





















import heros.InterproceduralCFG;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> {





















 public abstract void setICFG(I icfg);





















 public abstract void initialSeed(Stmt stmt);










public interface Debugger<Field, Fact, Stmt, Method> {





















 public void setICFG(InterproceduralCFG<Stmt, Method> icfg);










 public void initialSeed(Stmt stmt);










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver);










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void askedToResolve(Resolver<Field, Fact, Stmt, Method> resolver, Constraint<Field> constraint);










 










 public static class NullDebugger <Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










 public static class NullDebugger <Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 










 }














......@@ -30,6 +36,40 @@ public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 public void initialSeed(Stmt stmt) {










 










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void askedToResolve(Resolver<Field, Fact, Stmt, Method> resolver, Constraint<Field> constraint) {










 










 }










 










 }










}




\ No newline at end of file












src/heros/fieldsens/Debugger.java








View file @ 7b66dd07








src/heros/fieldsens/Debugger.java










View file @ 7b66dd07


7b66dd07



......@@ -11,18 +11,24 @@









package heros.fieldsens;





















import heros.InterproceduralCFG;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> {





















 public abstract void setICFG(I icfg);





















 public abstract void initialSeed(Stmt stmt);










public interface Debugger<Field, Fact, Stmt, Method> {





















 public void setICFG(InterproceduralCFG<Stmt, Method> icfg);










 public void initialSeed(Stmt stmt);










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver);










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void askedToResolve(Resolver<Field, Fact, Stmt, Method> resolver, Constraint<Field> constraint);










 










 public static class NullDebugger <Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










 public static class NullDebugger <Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 










 }














......@@ -30,6 +36,40 @@ public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 public void initialSeed(Stmt stmt) {










 










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void askedToResolve(Resolver<Field, Fact, Stmt, Method> resolver, Constraint<Field> constraint) {










 










 }










 










 }










}




\ No newline at end of file






......@@ -11,18 +11,24 @@









package heros.fieldsens;





















import heros.InterproceduralCFG;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> {





















 public abstract void setICFG(I icfg);





















 public abstract void initialSeed(Stmt stmt);










public interface Debugger<Field, Fact, Stmt, Method> {





















 public void setICFG(InterproceduralCFG<Stmt, Method> icfg);










 public void initialSeed(Stmt stmt);










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver);










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);










 public void askedToResolve(Resolver<Field, Fact, Stmt, Method> resolver, Constraint<Field> constraint);










 










 public static class NullDebugger <Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










 public static class NullDebugger <Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 










 }














......@@ -30,6 +36,40 @@ public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 public void initialSeed(Stmt stmt) {










 










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void askedToResolve(Resolver<Field, Fact, Stmt, Method> resolver, Constraint<Field> constraint) {










 










 }










 










 }










}




\ No newline at end of file


package heros.fieldsens;packageheros.fieldsens;import heros.InterproceduralCFG;importheros.InterproceduralCFG;import heros.fieldsens.FlowFunction.Constraint;importheros.fieldsens.FlowFunction.Constraint;import heros.fieldsens.structs.WrappedFactAtStatement;importheros.fieldsens.structs.WrappedFactAtStatement;public interface Debugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> {publicinterfaceDebugger<Field,Fact,Stmt,Method,IextendsInterproceduralCFG<Stmt,Method>>{ public abstract void setICFG(I icfg);publicabstractvoidsetICFG(Iicfg); public abstract void initialSeed(Stmt stmt);publicabstractvoidinitialSeed(Stmtstmt);public interface Debugger<Field, Fact, Stmt, Method> {publicinterfaceDebugger<Field,Fact,Stmt,Method>{ public void setICFG(InterproceduralCFG<Stmt, Method> icfg);publicvoidsetICFG(InterproceduralCFG<Stmt,Method>icfg); public void initialSeed(Stmt stmt);publicvoidinitialSeed(Stmtstmt); public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);publicvoidedgeTo(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt); public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver);publicvoidnewResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,Resolver<Field,Fact,Stmt,Method>resolver); public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);publicvoidnewJob(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt); public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);publicvoidjobStarted(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt); public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt);publicvoidjobFinished(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt); public void askedToResolve(Resolver<Field, Fact, Stmt, Method> resolver, Constraint<Field> constraint);publicvoidaskedToResolve(Resolver<Field,Fact,Stmt,Method>resolver,Constraint<Field>constraint);  public static class NullDebugger <Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {publicstaticclassNullDebugger<Field,Fact,Stmt,Method,, II extendsextends InterproceduralCFGInterproceduralCFG<<StmtStmt,, MethodMethod>>>implementsDebugger<Field,Fact,Stmt,Method,, II>{ public static class NullDebugger <Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {publicstaticclassNullDebugger<Field,Fact,Stmt,Method>implementsDebugger<Field,Fact,Stmt,Method>{ @Override@Override public void setICFG(I icfg) {publicvoidsetICFG(Iicfg){ public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {publicvoidsetICFG(InterproceduralCFGnterproceduralCFG<<StmtStmt,, MethodMethod>>icfg){  }} public void initialSeed(Stmt stmt) {publicvoidinitialSeed(Stmtstmt){  }} @Override@Override public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,publicvoidedgeTo(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt){  }} @Override@Override public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {publicvoidnewResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,Resolver<Field,Fact,Stmt,Method>resolver){  }} @Override@Override public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,publicvoidnewJob(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt){  }} @Override@Override public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,publicvoidjobStarted(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt){  }} @Override@Override public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,publicvoidjobFinished(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt){  }} @Override@Override public void askedToResolve(Resolver<Field, Fact, Stmt, Method> resolver, Constraint<Field> constraint) {publicvoidaskedToResolve(Resolver<Field,Fact,Stmt,Method>resolver,Constraint<Field>constraint){  }}  }}}}








src/heros/fieldsens/FieldSensitiveIFDSSolver.java








View file @ 7b66dd07






......@@ -33,13 +33,13 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 private IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem;










 protected Context<FieldRef, D, N,M> context;










 private Debugger<FieldRef, D, N, M, I> debugger;










 protected Debugger<FieldRef, D, N, M> debugger;










 private Scheduler scheduler;





















 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M> debugger, Scheduler scheduler) {










 this.tabulationProblem = tabulationProblem;










 this.scheduler = scheduler;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M>() : debugger;










 this.debugger.setICFG(tabulationProblem.interproceduralCFG());










 context = initContext(tabulationProblem, factHandler);










 submitInitialSeeds();



......@@ -57,7 +57,7 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur









 }










 










 protected MethodAnalyzer<FieldRef, D, N, M> createMethodAnalyzer(M method) {










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context);










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context, debugger);










 }





















 /**



......












src/heros/fieldsens/FieldSensitiveIFDSSolver.java








View file @ 7b66dd07








src/heros/fieldsens/FieldSensitiveIFDSSolver.java










View file @ 7b66dd07


7b66dd07



......@@ -33,13 +33,13 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 private IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem;










 protected Context<FieldRef, D, N,M> context;










 private Debugger<FieldRef, D, N, M, I> debugger;










 protected Debugger<FieldRef, D, N, M> debugger;










 private Scheduler scheduler;





















 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M> debugger, Scheduler scheduler) {










 this.tabulationProblem = tabulationProblem;










 this.scheduler = scheduler;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M>() : debugger;










 this.debugger.setICFG(tabulationProblem.interproceduralCFG());










 context = initContext(tabulationProblem, factHandler);










 submitInitialSeeds();



......@@ -57,7 +57,7 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur









 }










 










 protected MethodAnalyzer<FieldRef, D, N, M> createMethodAnalyzer(M method) {










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context);










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context, debugger);










 }





















 /**



......






......@@ -33,13 +33,13 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 private IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem;










 protected Context<FieldRef, D, N,M> context;










 private Debugger<FieldRef, D, N, M, I> debugger;










 protected Debugger<FieldRef, D, N, M> debugger;










 private Scheduler scheduler;





















 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M> debugger, Scheduler scheduler) {










 this.tabulationProblem = tabulationProblem;










 this.scheduler = scheduler;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M>() : debugger;










 this.debugger.setICFG(tabulationProblem.interproceduralCFG());










 context = initContext(tabulationProblem, factHandler);










 submitInitialSeeds();



......@@ -57,7 +57,7 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur









 }










 










 protected MethodAnalyzer<FieldRef, D, N, M> createMethodAnalyzer(M method) {










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context);










 return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context, debugger);










 }





















 /**



......


 private IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem;privateIFDSTabulationProblem<N,FieldRef,D,M,I>tabulationProblem; protected Context<FieldRef, D, N,M> context;protectedContext<FieldRef,D,N,M>context; private Debugger<FieldRef, D, N, M, I> debugger;privateivateDebugger<FieldRef,D,N,M,, II>debugger; protected Debugger<FieldRef, D, N, M> debugger;protectedotectedDebugger<FieldRef,D,N,M>debugger; private Scheduler scheduler;privateSchedulerscheduler; public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {publicFieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I>tabulationProblem,FactMergeHandler<D>factHandler,Debugger<FieldRef,D,N,M,, II>debugger,Schedulerscheduler){ public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M> debugger, Scheduler scheduler) {publicFieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I>tabulationProblem,FactMergeHandler<D>factHandler,Debugger<FieldRef,D,N,M>debugger,Schedulerscheduler){ this.tabulationProblem = tabulationProblem;this.tabulationProblem=tabulationProblem; this.scheduler = scheduler;this.scheduler=scheduler; this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;this.debugger=debugger==null?newDebugger.NullDebugger<FieldRef,D,N,M,, II>():debugger; this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M>() : debugger;this.debugger=debugger==null?newDebugger.NullDebugger<FieldRef,D,N,M>():debugger; this.debugger.setICFG(tabulationProblem.interproceduralCFG());this.debugger.setICFG(tabulationProblem.interproceduralCFG()); context = initContext(tabulationProblem, factHandler);context=initContext(tabulationProblem,factHandler); submitInitialSeeds();submitInitialSeeds(); }}  protected MethodAnalyzer<FieldRef, D, N, M> createMethodAnalyzer(M method) {protectedMethodAnalyzer<FieldRef,D,N,M>createMethodAnalyzer(Mmethod){ return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context);returnnewMethodAnalyzerImpl<FieldRef,D,N,M>(method,context); return new MethodAnalyzerImpl<FieldRef, D, N, M>(method, context, debugger);returnnewMethodAnalyzerImpl<FieldRef,D,N,M>(method,context,, debuggerdebugger); }} /**/**








src/heros/fieldsens/MethodAnalyzerImpl.java








View file @ 7b66dd07






......@@ -22,14 +22,16 @@ public class MethodAnalyzerImpl<Field,Fact, Stmt, Method>









 new DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Fact key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context) {










 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.debugger = debugger;










 }










 










 @Override



......












src/heros/fieldsens/MethodAnalyzerImpl.java








View file @ 7b66dd07








src/heros/fieldsens/MethodAnalyzerImpl.java










View file @ 7b66dd07


7b66dd07



......@@ -22,14 +22,16 @@ public class MethodAnalyzerImpl<Field,Fact, Stmt, Method>









 new DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Fact key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context) {










 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.debugger = debugger;










 }










 










 @Override



......






......@@ -22,14 +22,16 @@ public class MethodAnalyzerImpl<Field,Fact, Stmt, Method>









 new DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Fact key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context) {










 MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.debugger = debugger;










 }










 










 @Override



......


 new DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {newDefaultValueMap<Fact,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>>(){ @Override@Override protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Fact key) {protectedPerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>createItem(Factkey){ return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context);returnnewPerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>(method,key,context); return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context, debugger);returnnewPerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>(method,key,context,, debuggerdebugger); }} };}; private Context<Field, Fact, Stmt, Method> context;privateContext<Field,Fact,Stmt,Method>context; private Debugger<Field, Fact, Stmt, Method> debugger;privateDebugger<Field,Fact,Stmt,Method>debugger; MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context) {MethodAnalyzerImpl(Methodmethod,Context<Field,Fact,Stmt,Method>context){ MethodAnalyzerImpl(Method method, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {MethodAnalyzerImpl(Methodmethod,Context<Field,Fact,Stmt,Method>context,, DebuggerDebugger<<FieldField,, FactFact,, StmtStmt,, MethodMethod>> debuggerdebugger){ this.method = method;this.method=method; this.context = context;this.context=context; this.debugger = debugger;this.debugger=debugger; }}  @Override@Override








src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ 7b66dd07






......@@ -32,7 +32,7 @@ import com.google.common.collect.Lists;









import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {










public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {





















 private static final Logger logger = LoggerFactory.getLogger(PerAccessPathMethodAnalyzer.class);










 private Fact sourceFact;



......@@ -44,23 +44,25 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private CallEdgeResolver<Field, Fact, Stmt, Method> callEdgeResolver;










 private PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context) {










 this(method, sourceFact, context, new AccessPath<Field>(), null);










 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(method, sourceFact, context, debugger, new AccessPath<Field>(), null);










 }










 










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 this.debugger = debugger;










 if(method == null)










 throw new IllegalArgumentException("Method must be not null");










 this.parent = parent;



......@@ -69,16 +71,16 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 this.accessPath = accPath;










 this.context = context;










 if(parent == null) {










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this);










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler, debugger) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger);










 }










 else {










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, parent.callEdgeResolver);










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger, parent.callEdgeResolver);










 }










 log("initialized");










 }










 










 public PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createWithAccessPath(AccessPath<Field> accPath) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, accPath, this);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, debugger, accPath, this);










 }










 










 WrappedFact<Field, Fact, Stmt, Method> wrappedSource() {



......@@ -94,7 +96,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }





















 private void bootstrapAtMethodStartPoints() {










 callEdgeResolver.interest();










 callEdgeResolver.interest(callEdgeResolver);










 for(Stmt startPoint : context.icfg.getStartPointsOf(method)) {










 WrappedFactAtStatement<Field, Fact, Stmt, Method> target = new WrappedFactAtStatement<Field, Fact, Stmt, Method>(startPoint, wrappedSource());










 if(!reachableStatements.containsKey(target))



......@@ -121,6 +123,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 log("Edge to "+factAtStmt);










 reachableStatements.put(factAtStmt, factAtStmt);










 context.scheduler.schedule(new Job(factAtStmt));










 debugger.edgeTo(this, factAtStmt);










 }










 }














......@@ -137,7 +140,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Method> calledMethods = context.icfg.getCalleesOfCallAt(factAtStmt.getStatement());










 for (Method calledMethod : calledMethods) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallFlowFunction(factAtStmt.getStatement(), calledMethod);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 MethodAnalyzer<Field, Fact, Stmt, Method> analyzer = context.getAnalyzer(calledMethod);



......@@ -162,7 +165,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(callSite);










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(callSite, method, factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 context.getAnalyzer(context.icfg.getMethodOf(callSite)).addUnbalancedReturnFlow(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()), callSite);



......@@ -174,15 +177,13 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 //instead we thus call the return flow function will a null caller










 if(callSites.isEmpty()) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(null, method, factAtStmt.getStatement(), null);










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 }










 }










 }










 










 private void processCallToReturnEdge(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 Stmt stmt = factAtStmt.getStatement();










 int numberOfPredecessors = context.icfg.getPredsOf(stmt).size(); 










 if(numberOfPredecessors > 1 || (context.icfg.isStartPoint(stmt) && numberOfPredecessors > 0)) {










 if(isLoopStart(factAtStmt.getStatement())) {










 ctrFlowJoinResolvers.getOrCreate(factAtStmt.getAsFactAtStatement()).addIncoming(factAtStmt.getWrappedFact());










 }










 else {



......@@ -194,7 +195,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(factAtStmt.getStatement());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallToReturnFlowFunction(factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()));



......@@ -203,15 +204,31 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }





















 private void processNormalFlow(WrappedFactAtStatement<Field,Fact, Stmt, Method> factAtStmt) {










 Stmt stmt = factAtStmt.getStatement();










 int numberOfPredecessors = context.icfg.getPredsOf(stmt).size();










 if((numberOfPredecessors > 1 && !context.icfg.isExitStmt(stmt)) || (context.icfg.isStartPoint(stmt) && numberOfPredecessors > 0)) {










 if(isLoopStart(factAtStmt.getStatement())) {










 ctrFlowJoinResolvers.getOrCreate(factAtStmt.getAsFactAtStatement()).addIncoming(factAtStmt.getWrappedFact());










 }










 else {










 processNormalNonJoiningFlow(factAtStmt);










 }










 }










 










 private boolean isLoopStart(Stmt stmt) {










 int numberOfPredecessors = context.icfg.getPredsOf(stmt).size();










 if((numberOfPredecessors > 1 && !context.icfg.isExitStmt(stmt)) || (context.icfg.isStartPoint(stmt) && numberOfPredecessors > 0)) {










 Set<Stmt> visited = Sets.newHashSet();










 List<Stmt> worklist = Lists.newLinkedList();










 worklist.addAll(context.icfg.getPredsOf(stmt));










 while(!worklist.isEmpty()) {










 Stmt current = worklist.remove(0);










 if(current.equals(stmt))










 return true;










 if(!visited.add(current))










 continue;










 worklist.addAll(context.icfg.getPredsOf(current));










 }










 }










 return false;










 }





















 void processFlowFromJoinStmt(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 if(context.icfg.isCallStmt(factAtStmt.getStatement()))



......@@ -223,7 +240,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private void processNormalNonJoiningFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 final List<Stmt> successors = context.icfg.getSuccsOf(factAtStmt.getStatement());










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getNormalFlowFunction(factAtStmt.getStatement());










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (final ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 if(targetFact.getConstraint() == null)










 scheduleEdgeTo(successors, targetFact.getFact());



......@@ -245,9 +262,10 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }










 










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 if(!isBootStrapped())










 if(isBootStrapped()) {










 context.factHandler.merge(sourceFact, incEdge.getCalleeSourceFact().getFact());










 } else 










 bootstrapAtMethodStartPoints();










 










 callEdgeResolver.addIncoming(incEdge);










 }














......@@ -255,7 +273,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(incEdge.getCallSite());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(incEdge.getCallSite(), method, exitFact.getStatement(), returnSite);










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver()));










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targets) {










 context.factHandler.restoreCallingContext(targetFact.getFact().getFact(), incEdge.getCallerCallSiteFact().getFact());










 //TODO handle constraint



......@@ -293,10 +311,12 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {




















 public Job(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 this.factAtStmt = factAtStmt;










 debugger.newJob(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }





















 @Override










 public void run() {










 debugger.jobStarted(PerAccessPathMethodAnalyzer.this, factAtStmt);










 if (context.icfg.isCallStmt(factAtStmt.getStatement())) {










 processCall(factAtStmt);










 } else {



......@@ -307,12 +327,22 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 processNormalFlow(factAtStmt);










 }










 }










 debugger.jobFinished(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }










 










 @Override










 public String toString() {










 return "Job: "+factAtStmt;










 }










 }





















 public CallEdgeResolver<Field, Fact, Stmt, Method> getCallEdgeResolver() {










 return callEdgeResolver;










 }





















 public Method getMethod() {










 return method;










 }










 










//	public void debugReachables() {










//		JsonDocument root = new JsonDocument();



......












src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ 7b66dd07








src/heros/fieldsens/PerAccessPathMethodAnalyzer.java










View file @ 7b66dd07


7b66dd07



......@@ -32,7 +32,7 @@ import com.google.common.collect.Lists;









import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {










public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {





















 private static final Logger logger = LoggerFactory.getLogger(PerAccessPathMethodAnalyzer.class);










 private Fact sourceFact;



......@@ -44,23 +44,25 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private CallEdgeResolver<Field, Fact, Stmt, Method> callEdgeResolver;










 private PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context) {










 this(method, sourceFact, context, new AccessPath<Field>(), null);










 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(method, sourceFact, context, debugger, new AccessPath<Field>(), null);










 }










 










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 this.debugger = debugger;










 if(method == null)










 throw new IllegalArgumentException("Method must be not null");










 this.parent = parent;



......@@ -69,16 +71,16 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 this.accessPath = accPath;










 this.context = context;










 if(parent == null) {










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this);










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler, debugger) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger);










 }










 else {










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, parent.callEdgeResolver);










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger, parent.callEdgeResolver);










 }










 log("initialized");










 }










 










 public PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createWithAccessPath(AccessPath<Field> accPath) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, accPath, this);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, debugger, accPath, this);










 }










 










 WrappedFact<Field, Fact, Stmt, Method> wrappedSource() {



......@@ -94,7 +96,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }





















 private void bootstrapAtMethodStartPoints() {










 callEdgeResolver.interest();










 callEdgeResolver.interest(callEdgeResolver);










 for(Stmt startPoint : context.icfg.getStartPointsOf(method)) {










 WrappedFactAtStatement<Field, Fact, Stmt, Method> target = new WrappedFactAtStatement<Field, Fact, Stmt, Method>(startPoint, wrappedSource());










 if(!reachableStatements.containsKey(target))



......@@ -121,6 +123,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 log("Edge to "+factAtStmt);










 reachableStatements.put(factAtStmt, factAtStmt);










 context.scheduler.schedule(new Job(factAtStmt));










 debugger.edgeTo(this, factAtStmt);










 }










 }














......@@ -137,7 +140,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Method> calledMethods = context.icfg.getCalleesOfCallAt(factAtStmt.getStatement());










 for (Method calledMethod : calledMethods) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallFlowFunction(factAtStmt.getStatement(), calledMethod);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 MethodAnalyzer<Field, Fact, Stmt, Method> analyzer = context.getAnalyzer(calledMethod);



......@@ -162,7 +165,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(callSite);










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(callSite, method, factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 context.getAnalyzer(context.icfg.getMethodOf(callSite)).addUnbalancedReturnFlow(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()), callSite);



......@@ -174,15 +177,13 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 //instead we thus call the return flow function will a null caller










 if(callSites.isEmpty()) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(null, method, factAtStmt.getStatement(), null);










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 }










 }










 }










 










 private void processCallToReturnEdge(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 Stmt stmt = factAtStmt.getStatement();










 int numberOfPredecessors = context.icfg.getPredsOf(stmt).size(); 










 if(numberOfPredecessors > 1 || (context.icfg.isStartPoint(stmt) && numberOfPredecessors > 0)) {










 if(isLoopStart(factAtStmt.getStatement())) {










 ctrFlowJoinResolvers.getOrCreate(factAtStmt.getAsFactAtStatement()).addIncoming(factAtStmt.getWrappedFact());










 }










 else {



......@@ -194,7 +195,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(factAtStmt.getStatement());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallToReturnFlowFunction(factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()));



......@@ -203,15 +204,31 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }





















 private void processNormalFlow(WrappedFactAtStatement<Field,Fact, Stmt, Method> factAtStmt) {










 Stmt stmt = factAtStmt.getStatement();










 int numberOfPredecessors = context.icfg.getPredsOf(stmt).size();










 if((numberOfPredecessors > 1 && !context.icfg.isExitStmt(stmt)) || (context.icfg.isStartPoint(stmt) && numberOfPredecessors > 0)) {










 if(isLoopStart(factAtStmt.getStatement())) {










 ctrFlowJoinResolvers.getOrCreate(factAtStmt.getAsFactAtStatement()).addIncoming(factAtStmt.getWrappedFact());










 }










 else {










 processNormalNonJoiningFlow(factAtStmt);










 }










 }










 










 private boolean isLoopStart(Stmt stmt) {










 int numberOfPredecessors = context.icfg.getPredsOf(stmt).size();










 if((numberOfPredecessors > 1 && !context.icfg.isExitStmt(stmt)) || (context.icfg.isStartPoint(stmt) && numberOfPredecessors > 0)) {










 Set<Stmt> visited = Sets.newHashSet();










 List<Stmt> worklist = Lists.newLinkedList();










 worklist.addAll(context.icfg.getPredsOf(stmt));










 while(!worklist.isEmpty()) {










 Stmt current = worklist.remove(0);










 if(current.equals(stmt))










 return true;










 if(!visited.add(current))










 continue;










 worklist.addAll(context.icfg.getPredsOf(current));










 }










 }










 return false;










 }





















 void processFlowFromJoinStmt(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 if(context.icfg.isCallStmt(factAtStmt.getStatement()))



......@@ -223,7 +240,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private void processNormalNonJoiningFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 final List<Stmt> successors = context.icfg.getSuccsOf(factAtStmt.getStatement());










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getNormalFlowFunction(factAtStmt.getStatement());










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (final ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 if(targetFact.getConstraint() == null)










 scheduleEdgeTo(successors, targetFact.getFact());



......@@ -245,9 +262,10 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }










 










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 if(!isBootStrapped())










 if(isBootStrapped()) {










 context.factHandler.merge(sourceFact, incEdge.getCalleeSourceFact().getFact());










 } else 










 bootstrapAtMethodStartPoints();










 










 callEdgeResolver.addIncoming(incEdge);










 }














......@@ -255,7 +273,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(incEdge.getCallSite());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(incEdge.getCallSite(), method, exitFact.getStatement(), returnSite);










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver()));










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targets) {










 context.factHandler.restoreCallingContext(targetFact.getFact().getFact(), incEdge.getCallerCallSiteFact().getFact());










 //TODO handle constraint



......@@ -293,10 +311,12 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {




















 public Job(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 this.factAtStmt = factAtStmt;










 debugger.newJob(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }





















 @Override










 public void run() {










 debugger.jobStarted(PerAccessPathMethodAnalyzer.this, factAtStmt);










 if (context.icfg.isCallStmt(factAtStmt.getStatement())) {










 processCall(factAtStmt);










 } else {



......@@ -307,12 +327,22 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 processNormalFlow(factAtStmt);










 }










 }










 debugger.jobFinished(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }










 










 @Override










 public String toString() {










 return "Job: "+factAtStmt;










 }










 }





















 public CallEdgeResolver<Field, Fact, Stmt, Method> getCallEdgeResolver() {










 return callEdgeResolver;










 }





















 public Method getMethod() {










 return method;










 }










 










//	public void debugReachables() {










//		JsonDocument root = new JsonDocument();



......






......@@ -32,7 +32,7 @@ import com.google.common.collect.Lists;









import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {










public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {





















 private static final Logger logger = LoggerFactory.getLogger(PerAccessPathMethodAnalyzer.class);










 private Fact sourceFact;



......@@ -44,23 +44,25 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);










 }










 };










 private CallEdgeResolver<Field, Fact, Stmt, Method> callEdgeResolver;










 private PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent;










 private Debugger<Field, Fact, Stmt, Method> debugger;





















 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context) {










 this(method, sourceFact, context, new AccessPath<Field>(), null);










 public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(method, sourceFact, context, debugger, new AccessPath<Field>(), null);










 }










 










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {










 this.debugger = debugger;










 if(method == null)










 throw new IllegalArgumentException("Method must be not null");










 this.parent = parent;



......@@ -69,16 +71,16 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 this.accessPath = accPath;










 this.context = context;










 if(parent == null) {










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this);










 this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler, debugger) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger);










 }










 else {










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, parent.callEdgeResolver);










 this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger, parent.callEdgeResolver);










 }










 log("initialized");










 }










 










 public PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createWithAccessPath(AccessPath<Field> accPath) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, accPath, this);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, debugger, accPath, this);










 }










 










 WrappedFact<Field, Fact, Stmt, Method> wrappedSource() {



......@@ -94,7 +96,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }





















 private void bootstrapAtMethodStartPoints() {










 callEdgeResolver.interest();










 callEdgeResolver.interest(callEdgeResolver);










 for(Stmt startPoint : context.icfg.getStartPointsOf(method)) {










 WrappedFactAtStatement<Field, Fact, Stmt, Method> target = new WrappedFactAtStatement<Field, Fact, Stmt, Method>(startPoint, wrappedSource());










 if(!reachableStatements.containsKey(target))



......@@ -121,6 +123,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 log("Edge to "+factAtStmt);










 reachableStatements.put(factAtStmt, factAtStmt);










 context.scheduler.schedule(new Job(factAtStmt));










 debugger.edgeTo(this, factAtStmt);










 }










 }














......@@ -137,7 +140,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Method> calledMethods = context.icfg.getCalleesOfCallAt(factAtStmt.getStatement());










 for (Method calledMethod : calledMethods) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallFlowFunction(factAtStmt.getStatement(), calledMethod);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 MethodAnalyzer<Field, Fact, Stmt, Method> analyzer = context.getAnalyzer(calledMethod);



......@@ -162,7 +165,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(callSite);










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(callSite, method, factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 context.getAnalyzer(context.icfg.getMethodOf(callSite)).addUnbalancedReturnFlow(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()), callSite);



......@@ -174,15 +177,13 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 //instead we thus call the return flow function will a null caller










 if(callSites.isEmpty()) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(null, method, factAtStmt.getStatement(), null);










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 }










 }










 }










 










 private void processCallToReturnEdge(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 Stmt stmt = factAtStmt.getStatement();










 int numberOfPredecessors = context.icfg.getPredsOf(stmt).size(); 










 if(numberOfPredecessors > 1 || (context.icfg.isStartPoint(stmt) && numberOfPredecessors > 0)) {










 if(isLoopStart(factAtStmt.getStatement())) {










 ctrFlowJoinResolvers.getOrCreate(factAtStmt.getAsFactAtStatement()).addIncoming(factAtStmt.getWrappedFact());










 }










 else {



......@@ -194,7 +195,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(factAtStmt.getStatement());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallToReturnFlowFunction(factAtStmt.getStatement(), returnSite);










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 //TODO handle constraint










 scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()));



......@@ -203,15 +204,31 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }





















 private void processNormalFlow(WrappedFactAtStatement<Field,Fact, Stmt, Method> factAtStmt) {










 Stmt stmt = factAtStmt.getStatement();










 int numberOfPredecessors = context.icfg.getPredsOf(stmt).size();










 if((numberOfPredecessors > 1 && !context.icfg.isExitStmt(stmt)) || (context.icfg.isStartPoint(stmt) && numberOfPredecessors > 0)) {










 if(isLoopStart(factAtStmt.getStatement())) {










 ctrFlowJoinResolvers.getOrCreate(factAtStmt.getAsFactAtStatement()).addIncoming(factAtStmt.getWrappedFact());










 }










 else {










 processNormalNonJoiningFlow(factAtStmt);










 }










 }










 










 private boolean isLoopStart(Stmt stmt) {










 int numberOfPredecessors = context.icfg.getPredsOf(stmt).size();










 if((numberOfPredecessors > 1 && !context.icfg.isExitStmt(stmt)) || (context.icfg.isStartPoint(stmt) && numberOfPredecessors > 0)) {










 Set<Stmt> visited = Sets.newHashSet();










 List<Stmt> worklist = Lists.newLinkedList();










 worklist.addAll(context.icfg.getPredsOf(stmt));










 while(!worklist.isEmpty()) {










 Stmt current = worklist.remove(0);










 if(current.equals(stmt))










 return true;










 if(!visited.add(current))










 continue;










 worklist.addAll(context.icfg.getPredsOf(current));










 }










 }










 return false;










 }





















 void processFlowFromJoinStmt(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 if(context.icfg.isCallStmt(factAtStmt.getStatement()))



......@@ -223,7 +240,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private void processNormalNonJoiningFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 final List<Stmt> successors = context.icfg.getSuccsOf(factAtStmt.getStatement());










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getNormalFlowFunction(factAtStmt.getStatement());










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));










 Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));










 for (final ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {










 if(targetFact.getConstraint() == null)










 scheduleEdgeTo(successors, targetFact.getFact());



......@@ -245,9 +262,10 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }










 










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 if(!isBootStrapped())










 if(isBootStrapped()) {










 context.factHandler.merge(sourceFact, incEdge.getCalleeSourceFact().getFact());










 } else 










 bootstrapAtMethodStartPoints();










 










 callEdgeResolver.addIncoming(incEdge);










 }














......@@ -255,7 +273,7 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(incEdge.getCallSite());










 for(Stmt returnSite : returnSites) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(incEdge.getCallSite(), method, exitFact.getStatement(), returnSite);










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver()));










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver(), debugger));










 for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targets) {










 context.factHandler.restoreCallingContext(targetFact.getFact().getFact(), incEdge.getCallerCallSiteFact().getFact());










 //TODO handle constraint



......@@ -293,10 +311,12 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {




















 public Job(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 this.factAtStmt = factAtStmt;










 debugger.newJob(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }





















 @Override










 public void run() {










 debugger.jobStarted(PerAccessPathMethodAnalyzer.this, factAtStmt);










 if (context.icfg.isCallStmt(factAtStmt.getStatement())) {










 processCall(factAtStmt);










 } else {



......@@ -307,12 +327,22 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 processNormalFlow(factAtStmt);










 }










 }










 debugger.jobFinished(PerAccessPathMethodAnalyzer.this, factAtStmt);










 }










 










 @Override










 public String toString() {










 return "Job: "+factAtStmt;










 }










 }





















 public CallEdgeResolver<Field, Fact, Stmt, Method> getCallEdgeResolver() {










 return callEdgeResolver;










 }





















 public Method getMethod() {










 return method;










 }










 










//	public void debugReachables() {










//		JsonDocument root = new JsonDocument();



......


import com.google.common.collect.Maps;importcom.google.common.collect.Maps;import com.google.common.collect.Sets;importcom.google.common.collect.Sets;class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {classPerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>{public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {publicpublic classPerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>{ private static final Logger logger = LoggerFactory.getLogger(PerAccessPathMethodAnalyzer.class);privatestaticfinalLoggerlogger=LoggerFactory.getLogger(PerAccessPathMethodAnalyzer.class); private Fact sourceFact;privateFactsourceFact; private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {privateDefaultValueMap<FactAtStatement<Fact,Stmt>,ReturnSiteResolver<Field,Fact,Stmt,Method>>returnSiteResolvers=newDefaultValueMap<FactAtStatement<Fact,Stmt>,ReturnSiteResolver<Field,Fact,Stmt,Method>>(){ @Override@Override protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {protectedReturnSiteResolver<Field,Fact,Stmt,Method>createItem(FactAtStatement<Fact,Stmt>key){ return new ReturnSiteResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);returnnewReturnSiteResolver<Field,Fact,Stmt,Method>(PerAccessPathMethodAnalyzer.this,key.stmt); return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);returnnewReturnSiteResolver<Field,Fact,Stmt,Method>(contextcontext..factHandlerfactHandler,, PerAccessPathMethodAnalyzer.this,key.stmt,, debuggerdebugger); }} };}; private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {privateDefaultValueMap<FactAtStatement<Fact,Stmt>,ControlFlowJoinResolver<Field,Fact,Stmt,Method>>ctrFlowJoinResolvers=newDefaultValueMap<FactAtStatement<Fact,Stmt>,ControlFlowJoinResolver<Field,Fact,Stmt,Method>>(){ @Override@Override protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {protectedControlFlowJoinResolver<Field,Fact,Stmt,Method>createItem(FactAtStatement<Fact,Stmt>key){ return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);returnnewControlFlowJoinResolver<Field,Fact,Stmt,Method>(PerAccessPathMethodAnalyzer.this,key.stmt); return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt, debugger);returnnewControlFlowJoinResolver<Field,Fact,Stmt,Method>(contextcontext..factHandlerfactHandler,, PerAccessPathMethodAnalyzer.this,key.stmt,, debuggerdebugger); }} };}; private CallEdgeResolver<Field, Fact, Stmt, Method> callEdgeResolver;privateCallEdgeResolver<Field,Fact,Stmt,Method>callEdgeResolver; private PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent;privatePerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>parent; private Debugger<Field, Fact, Stmt, Method> debugger;privateDebugger<Field,Fact,Stmt,Method>debugger; public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context) {publicPerAccessPathMethodAnalyzer(Methodmethod,FactsourceFact,Context<Field,Fact,Stmt,Method>context){ this(method, sourceFact, context, new AccessPath<Field>(), null);this(method,sourceFact,context,newAccessPath<Field>(),null); public PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger) {publicPerAccessPathMethodAnalyzer(Methodmethod,FactsourceFact,Context<Field,Fact,Stmt,Method>context,, DebuggerDebugger<<FieldField,, FactFact,, StmtStmt,, MethodMethod>> debuggerdebugger){ this(method, sourceFact, context, debugger, new AccessPath<Field>(), null);this(method,sourceFact,context,debuggerdebugger,, newAccessPath<Field>(),null); }}  private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {privatePerAccessPathMethodAnalyzer(Methodmethod,FactsourceFact,Context<Field,Fact,Stmt,Method>context,AccessPath<Field>accPath,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>parent){ private PerAccessPathMethodAnalyzer(Method method, Fact sourceFact, Context<Field, Fact, Stmt, Method> context, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> accPath, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> parent) {privatePerAccessPathMethodAnalyzer(Methodmethod,FactsourceFact,Context<Field,Fact,Stmt,Method>context,Debugger<Field,Fact,Stmt,Method>debugger,AccessPath<Field>accPath,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>parent){ this.debugger = debugger;this.debugger=debugger; if(method == null)if(method==null) throw new IllegalArgumentException("Method must be not null");thrownewIllegalArgumentException("Method must be not null"); this.parent = parent;this.parent=parent; this.accessPath = accPath;this.accessPath=accPath; this.context = context;this.context=context; if(parent == null) {if(parent==null){ this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this);this.callEdgeResolver=isZeroSource()?newZeroCallEdgeResolver<Field,Fact,Stmt,Method>(this,context.zeroHandler):newCallEdgeResolver<Field,Fact,Stmt,Method>(this); this.callEdgeResolver = isZeroSource() ? new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(this, context.zeroHandler, debugger) : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger);this.callEdgeResolver=isZeroSource()?newZeroCallEdgeResolver<Field,Fact,Stmt,Method>(this,context.zeroHandler,, debuggerdebugger):newCallEdgeResolver<Field,Fact,Stmt,Method>(this,, debuggerdebugger); }} else {else{ this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, parent.callEdgeResolver);this.callEdgeResolver=isZeroSource()?parent.callEdgeResolver:newCallEdgeResolver<Field,Fact,Stmt,Method>(this,parent.callEdgeResolver); this.callEdgeResolver = isZeroSource() ? parent.callEdgeResolver : new CallEdgeResolver<Field, Fact, Stmt, Method>(this, debugger, parent.callEdgeResolver);this.callEdgeResolver=isZeroSource()?parent.callEdgeResolver:newCallEdgeResolver<Field,Fact,Stmt,Method>(this,debuggerdebugger,, parent.callEdgeResolver); }} log("initialized");log("initialized"); }}  public PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createWithAccessPath(AccessPath<Field> accPath) {publicPerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>createWithAccessPath(AccessPath<Field>accPath){ return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, accPath, this);returnnewPerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>(method,sourceFact,context,accPath,this); return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, sourceFact, context, debugger, accPath, this);returnnewPerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>(method,sourceFact,context,debuggerdebugger,, accPath,this); }}  WrappedFact<Field, Fact, Stmt, Method> wrappedSource() {WrappedFact<Field,Fact,Stmt,Method>wrappedSource(){ }} private void bootstrapAtMethodStartPoints() {privatevoidbootstrapAtMethodStartPoints(){ callEdgeResolver.interest();callEdgeResolver.interest(); callEdgeResolver.interest(callEdgeResolver);callEdgeResolver.interest(callEdgeResolvercallEdgeResolver); for(Stmt startPoint : context.icfg.getStartPointsOf(method)) {for(StmtstartPoint:context.icfg.getStartPointsOf(method)){ WrappedFactAtStatement<Field, Fact, Stmt, Method> target = new WrappedFactAtStatement<Field, Fact, Stmt, Method>(startPoint, wrappedSource());WrappedFactAtStatement<Field,Fact,Stmt,Method>target=newWrappedFactAtStatement<Field,Fact,Stmt,Method>(startPoint,wrappedSource()); if(!reachableStatements.containsKey(target))if(!reachableStatements.containsKey(target)) log("Edge to "+factAtStmt);log("Edge to "+factAtStmt); reachableStatements.put(factAtStmt, factAtStmt);reachableStatements.put(factAtStmt,factAtStmt); context.scheduler.schedule(new Job(factAtStmt));context.scheduler.schedule(newJob(factAtStmt)); debugger.edgeTo(this, factAtStmt);debugger.edgeTo(this,factAtStmt); }} }} Collection<Method> calledMethods = context.icfg.getCalleesOfCallAt(factAtStmt.getStatement());Collection<Method>calledMethods=context.icfg.getCalleesOfCallAt(factAtStmt.getStatement()); for (Method calledMethod : calledMethods) {for(MethodcalledMethod:calledMethods){ FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallFlowFunction(factAtStmt.getStatement(), calledMethod);FlowFunction<Field,Fact,Stmt,Method>flowFunction=context.flowFunctions.getCallFlowFunction(factAtStmt.getStatement(),calledMethod); Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));Collection<ConstrainedFact<Field,Fact,Stmt,Method>>targetFacts=flowFunction.computeTargets(factAtStmt.getFact(),newAccessPathHandler<Field,Fact,Stmt,Method>(factAtStmt.getAccessPath(),factAtStmt.getResolver())); Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));Collection<ConstrainedFact<Field,Fact,Stmt,Method>>targetFacts=flowFunction.computeTargets(factAtStmt.getFact(),newAccessPathHandler<Field,Fact,Stmt,Method>(factAtStmt.getAccessPath(),factAtStmt.getResolver(),, debuggerdebugger)); for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {for(ConstrainedFact<Field,Fact,Stmt,Method>targetFact:targetFacts){ //TODO handle constraint//TODO handle constraint MethodAnalyzer<Field, Fact, Stmt, Method> analyzer = context.getAnalyzer(calledMethod);MethodAnalyzer<Field,Fact,Stmt,Method>analyzer=context.getAnalyzer(calledMethod); Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(callSite);Collection<Stmt>returnSites=context.icfg.getReturnSitesOfCallAt(callSite); for(Stmt returnSite : returnSites) {for(StmtreturnSite:returnSites){ FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(callSite, method, factAtStmt.getStatement(), returnSite);FlowFunction<Field,Fact,Stmt,Method>flowFunction=context.flowFunctions.getReturnFlowFunction(callSite,method,factAtStmt.getStatement(),returnSite); Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));Collection<ConstrainedFact<Field,Fact,Stmt,Method>>targetFacts=flowFunction.computeTargets(factAtStmt.getFact(),newAccessPathHandler<Field,Fact,Stmt,Method>(factAtStmt.getAccessPath(),factAtStmt.getResolver())); Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));Collection<ConstrainedFact<Field,Fact,Stmt,Method>>targetFacts=flowFunction.computeTargets(factAtStmt.getFact(),newAccessPathHandler<Field,Fact,Stmt,Method>(factAtStmt.getAccessPath(),factAtStmt.getResolver(),, debuggerdebugger)); for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {for(ConstrainedFact<Field,Fact,Stmt,Method>targetFact:targetFacts){ //TODO handle constraint//TODO handle constraint context.getAnalyzer(context.icfg.getMethodOf(callSite)).addUnbalancedReturnFlow(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()), callSite);context.getAnalyzer(context.icfg.getMethodOf(callSite)).addUnbalancedReturnFlow(newWrappedFactAtStatement<Field,Fact,Stmt,Method>(returnSite,targetFact.getFact()),callSite); //instead we thus call the return flow function will a null caller//instead we thus call the return flow function will a null caller if(callSites.isEmpty()) {if(callSites.isEmpty()){ FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(null, method, factAtStmt.getStatement(), null);FlowFunction<Field,Fact,Stmt,Method>flowFunction=context.flowFunctions.getReturnFlowFunction(null,method,factAtStmt.getStatement(),null); flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));flowFunction.computeTargets(factAtStmt.getFact(),newAccessPathHandler<Field,Fact,Stmt,Method>(factAtStmt.getAccessPath(),factAtStmt.getResolver())); flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));flowFunction.computeTargets(factAtStmt.getFact(),newAccessPathHandler<Field,Fact,Stmt,Method>(factAtStmt.getAccessPath(),factAtStmt.getResolver(),, debuggerdebugger)); }} }} }}  private void processCallToReturnEdge(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {privatevoidprocessCallToReturnEdge(WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt){ Stmt stmt = factAtStmt.getStatement();Stmtstmt=factAtStmt.getStatement(); int numberOfPredecessors = context.icfg.getPredsOf(stmt).size(); intnumberOfPredecessors=context.icfg.getPredsOf(stmt).size(); if(numberOfPredecessors > 1 || (context.icfg.isStartPoint(stmt) && numberOfPredecessors > 0)) {if(numberOfPredecessors>1||(context.icfg.isStartPoint(stmt)&&numberOfPredecessors>0)){ if(isLoopStart(factAtStmt.getStatement())) {if(isLoopStart(factAtStmt.getStatement())){ ctrFlowJoinResolvers.getOrCreate(factAtStmt.getAsFactAtStatement()).addIncoming(factAtStmt.getWrappedFact());ctrFlowJoinResolvers.getOrCreate(factAtStmt.getAsFactAtStatement()).addIncoming(factAtStmt.getWrappedFact()); }} else {else{ Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(factAtStmt.getStatement());Collection<Stmt>returnSites=context.icfg.getReturnSitesOfCallAt(factAtStmt.getStatement()); for(Stmt returnSite : returnSites) {for(StmtreturnSite:returnSites){ FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getCallToReturnFlowFunction(factAtStmt.getStatement(), returnSite);FlowFunction<Field,Fact,Stmt,Method>flowFunction=context.flowFunctions.getCallToReturnFlowFunction(factAtStmt.getStatement(),returnSite); Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));Collection<ConstrainedFact<Field,Fact,Stmt,Method>>targetFacts=flowFunction.computeTargets(factAtStmt.getFact(),newAccessPathHandler<Field,Fact,Stmt,Method>(factAtStmt.getAccessPath(),factAtStmt.getResolver())); Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));Collection<ConstrainedFact<Field,Fact,Stmt,Method>>targetFacts=flowFunction.computeTargets(factAtStmt.getFact(),newAccessPathHandler<Field,Fact,Stmt,Method>(factAtStmt.getAccessPath(),factAtStmt.getResolver(),, debuggerdebugger)); for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {for(ConstrainedFact<Field,Fact,Stmt,Method>targetFact:targetFacts){ //TODO handle constraint//TODO handle constraint scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, targetFact.getFact()));scheduleEdgeTo(newWrappedFactAtStatement<Field,Fact,Stmt,Method>(returnSite,targetFact.getFact())); }} private void processNormalFlow(WrappedFactAtStatement<Field,Fact, Stmt, Method> factAtStmt) {privatevoidprocessNormalFlow(WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt){ Stmt stmt = factAtStmt.getStatement();Stmtstmt=factAtStmt.getStatement(); int numberOfPredecessors = context.icfg.getPredsOf(stmt).size();intnumberOfPredecessors=context.icfg.getPredsOf(stmt).size(); if((numberOfPredecessors > 1 && !context.icfg.isExitStmt(stmt)) || (context.icfg.isStartPoint(stmt) && numberOfPredecessors > 0)) {if((numberOfPredecessors>1&&!context.icfg.isExitStmt(stmt))||(context.icfg.isStartPoint(stmt)&&numberOfPredecessors>0)){ if(isLoopStart(factAtStmt.getStatement())) {if(isLoopStart(factAtStmt.getStatement())){ ctrFlowJoinResolvers.getOrCreate(factAtStmt.getAsFactAtStatement()).addIncoming(factAtStmt.getWrappedFact());ctrFlowJoinResolvers.getOrCreate(factAtStmt.getAsFactAtStatement()).addIncoming(factAtStmt.getWrappedFact()); }} else {else{ processNormalNonJoiningFlow(factAtStmt);processNormalNonJoiningFlow(factAtStmt); }} }}  private boolean isLoopStart(Stmt stmt) {privatebooleanisLoopStart(Stmtstmt){ int numberOfPredecessors = context.icfg.getPredsOf(stmt).size();intnumberOfPredecessors=context.icfg.getPredsOf(stmt).size(); if((numberOfPredecessors > 1 && !context.icfg.isExitStmt(stmt)) || (context.icfg.isStartPoint(stmt) && numberOfPredecessors > 0)) {if((numberOfPredecessors>1&&!context.icfg.isExitStmt(stmt))||(context.icfg.isStartPoint(stmt)&&numberOfPredecessors>0)){ Set<Stmt> visited = Sets.newHashSet();Set<Stmt>visited=Sets.newHashSet(); List<Stmt> worklist = Lists.newLinkedList();List<Stmt>worklist=Lists.newLinkedList(); worklist.addAll(context.icfg.getPredsOf(stmt));worklist.addAll(context.icfg.getPredsOf(stmt)); while(!worklist.isEmpty()) {while(!worklist.isEmpty()){ Stmt current = worklist.remove(0);Stmtcurrent=worklist.remove(0); if(current.equals(stmt))if(current.equals(stmt)) return true;returntrue; if(!visited.add(current))if(!visited.add(current)) continue;continue; worklist.addAll(context.icfg.getPredsOf(current));worklist.addAll(context.icfg.getPredsOf(current)); }} }} return false;returnfalse; }} void processFlowFromJoinStmt(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {voidprocessFlowFromJoinStmt(WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt){ if(context.icfg.isCallStmt(factAtStmt.getStatement()))if(context.icfg.isCallStmt(factAtStmt.getStatement())) private void processNormalNonJoiningFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {privatevoidprocessNormalNonJoiningFlow(WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt){ final List<Stmt> successors = context.icfg.getSuccsOf(factAtStmt.getStatement());finalList<Stmt>successors=context.icfg.getSuccsOf(factAtStmt.getStatement()); FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getNormalFlowFunction(factAtStmt.getStatement());FlowFunction<Field,Fact,Stmt,Method>flowFunction=context.flowFunctions.getNormalFlowFunction(factAtStmt.getStatement()); Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver()));Collection<ConstrainedFact<Field,Fact,Stmt,Method>>targetFacts=flowFunction.computeTargets(factAtStmt.getFact(),newAccessPathHandler<Field,Fact,Stmt,Method>(factAtStmt.getAccessPath(),factAtStmt.getResolver())); Collection<ConstrainedFact<Field, Fact, Stmt, Method>> targetFacts = flowFunction.computeTargets(factAtStmt.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(factAtStmt.getAccessPath(), factAtStmt.getResolver(), debugger));Collection<ConstrainedFact<Field,Fact,Stmt,Method>>targetFacts=flowFunction.computeTargets(factAtStmt.getFact(),newAccessPathHandler<Field,Fact,Stmt,Method>(factAtStmt.getAccessPath(),factAtStmt.getResolver(),, debuggerdebugger)); for (final ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targetFacts) {for(finalConstrainedFact<Field,Fact,Stmt,Method>targetFact:targetFacts){ if(targetFact.getConstraint() == null)if(targetFact.getConstraint()==null) scheduleEdgeTo(successors, targetFact.getFact());scheduleEdgeTo(successors,targetFact.getFact()); }}  public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {publicvoidaddIncomingEdge(CallEdge<Field,Fact,Stmt,Method>incEdge){ if(!isBootStrapped())if(!isBootStrapped()) if(isBootStrapped()) {if(isBootStrapped()){ context.factHandler.merge(sourceFact, incEdge.getCalleeSourceFact().getFact());context.factHandler.merge(sourceFact,incEdge.getCalleeSourceFact().getFact()); } else }else bootstrapAtMethodStartPoints();bootstrapAtMethodStartPoints();  callEdgeResolver.addIncoming(incEdge);callEdgeResolver.addIncoming(incEdge); }} Collection<Stmt> returnSites = context.icfg.getReturnSitesOfCallAt(incEdge.getCallSite());Collection<Stmt>returnSites=context.icfg.getReturnSitesOfCallAt(incEdge.getCallSite()); for(Stmt returnSite : returnSites) {for(StmtreturnSite:returnSites){ FlowFunction<Field, Fact, Stmt, Method> flowFunction = context.flowFunctions.getReturnFlowFunction(incEdge.getCallSite(), method, exitFact.getStatement(), returnSite);FlowFunction<Field,Fact,Stmt,Method>flowFunction=context.flowFunctions.getReturnFlowFunction(incEdge.getCallSite(),method,exitFact.getStatement(),returnSite); Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver()));Set<ConstrainedFact<Field,Fact,Stmt,Method>>targets=flowFunction.computeTargets(exitFact.getFact(),newAccessPathHandler<Field,Fact,Stmt,Method>(exitFact.getAccessPath(),exitFact.getResolver())); Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(exitFact.getFact(), new AccessPathHandler<Field, Fact, Stmt, Method>(exitFact.getAccessPath(), exitFact.getResolver(), debugger));Set<ConstrainedFact<Field,Fact,Stmt,Method>>targets=flowFunction.computeTargets(exitFact.getFact(),newAccessPathHandler<Field,Fact,Stmt,Method>(exitFact.getAccessPath(),exitFact.getResolver(),, debuggerdebugger)); for (ConstrainedFact<Field, Fact, Stmt, Method> targetFact : targets) {for(ConstrainedFact<Field,Fact,Stmt,Method>targetFact:targets){ context.factHandler.restoreCallingContext(targetFact.getFact().getFact(), incEdge.getCallerCallSiteFact().getFact());context.factHandler.restoreCallingContext(targetFact.getFact().getFact(),incEdge.getCallerCallSiteFact().getFact()); //TODO handle constraint//TODO handle constraint public Job(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {publicJob(WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt){ this.factAtStmt = factAtStmt;this.factAtStmt=factAtStmt; debugger.newJob(PerAccessPathMethodAnalyzer.this, factAtStmt);debugger.newJob(PerAccessPathMethodAnalyzer.this,factAtStmt); }} @Override@Override public void run() {publicvoidrun(){ debugger.jobStarted(PerAccessPathMethodAnalyzer.this, factAtStmt);debugger.jobStarted(PerAccessPathMethodAnalyzer.this,factAtStmt); if (context.icfg.isCallStmt(factAtStmt.getStatement())) {if(context.icfg.isCallStmt(factAtStmt.getStatement())){ processCall(factAtStmt);processCall(factAtStmt); } else {}else{ processNormalFlow(factAtStmt);processNormalFlow(factAtStmt); }} }} debugger.jobFinished(PerAccessPathMethodAnalyzer.this, factAtStmt);debugger.jobFinished(PerAccessPathMethodAnalyzer.this,factAtStmt); }}  @Override@Override public String toString() {publicStringtoString(){ return "Job: "+factAtStmt;return"Job: "+factAtStmt; }} }} public CallEdgeResolver<Field, Fact, Stmt, Method> getCallEdgeResolver() {publicCallEdgeResolver<Field,Fact,Stmt,Method>getCallEdgeResolver(){ return callEdgeResolver;returncallEdgeResolver; }} public Method getMethod() {publicMethodgetMethod(){ return method;returnmethod; }} //	public void debugReachables() {//	public void debugReachables() {//		JsonDocument root = new JsonDocument();//		JsonDocument root = new JsonDocument();








src/heros/fieldsens/Resolver.java








View file @ 7b66dd07






......@@ -13,12 +13,14 @@ package heros.fieldsens;









import heros.fieldsens.FlowFunction.Constraint;





















import java.util.List;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Sets;





















public abstract class Resolver<Field, Fact, Stmt, Method> {





















 private boolean interest = false;










 private Set<Resolver<Field, Fact, Stmt, Method>> interest = Sets.newHashSet();










 private List<InterestCallback<Field, Fact, Stmt, Method>> interestCallbacks = Lists.newLinkedList();










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer;










 private boolean canBeResolvedEmpty = false;



......@@ -29,18 +31,14 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {




















 public abstract void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback);










 










 public void interest() {










 if(interest)










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(!interest.add(resolver))










 return;





















 log("Interest given");










 interest = true;










 log("Interest given by: "+resolver);










 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.interest(analyzer, this);










 callback.interest(analyzer, resolver);










 }










 










 if(canBeResolvedEmpty)










 interestCallbacks = null;










 }










 










 protected void canBeResolvedEmpty() {



......@@ -51,23 +49,19 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {









 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.canBeResolvedEmpty();










 }










 










 if(interest)










 interestCallbacks = null;










 }





















 public boolean isInterestGiven() {










 return interest;










 return !interest.isEmpty();










 }





















 protected void registerCallback(InterestCallback<Field, Fact, Stmt, Method> callback) {










 if(interest) {










 callback.interest(analyzer, this);










 }










 else {










 log("Callback registered");










 interestCallbacks.add(callback);










 if(!interest.isEmpty()) {










 for(Resolver<Field, Fact, Stmt, Method> resolver : Lists.newLinkedList(interest))










 callback.interest(analyzer, resolver);










 }










 log("Callback registered");










 interestCallbacks.add(callback);





















 if(canBeResolvedEmpty)










 callback.canBeResolvedEmpty();



......












src/heros/fieldsens/Resolver.java








View file @ 7b66dd07








src/heros/fieldsens/Resolver.java










View file @ 7b66dd07


7b66dd07



......@@ -13,12 +13,14 @@ package heros.fieldsens;









import heros.fieldsens.FlowFunction.Constraint;





















import java.util.List;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Sets;





















public abstract class Resolver<Field, Fact, Stmt, Method> {





















 private boolean interest = false;










 private Set<Resolver<Field, Fact, Stmt, Method>> interest = Sets.newHashSet();










 private List<InterestCallback<Field, Fact, Stmt, Method>> interestCallbacks = Lists.newLinkedList();










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer;










 private boolean canBeResolvedEmpty = false;



......@@ -29,18 +31,14 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {




















 public abstract void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback);










 










 public void interest() {










 if(interest)










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(!interest.add(resolver))










 return;





















 log("Interest given");










 interest = true;










 log("Interest given by: "+resolver);










 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.interest(analyzer, this);










 callback.interest(analyzer, resolver);










 }










 










 if(canBeResolvedEmpty)










 interestCallbacks = null;










 }










 










 protected void canBeResolvedEmpty() {



......@@ -51,23 +49,19 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {









 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.canBeResolvedEmpty();










 }










 










 if(interest)










 interestCallbacks = null;










 }





















 public boolean isInterestGiven() {










 return interest;










 return !interest.isEmpty();










 }





















 protected void registerCallback(InterestCallback<Field, Fact, Stmt, Method> callback) {










 if(interest) {










 callback.interest(analyzer, this);










 }










 else {










 log("Callback registered");










 interestCallbacks.add(callback);










 if(!interest.isEmpty()) {










 for(Resolver<Field, Fact, Stmt, Method> resolver : Lists.newLinkedList(interest))










 callback.interest(analyzer, resolver);










 }










 log("Callback registered");










 interestCallbacks.add(callback);





















 if(canBeResolvedEmpty)










 callback.canBeResolvedEmpty();



......






......@@ -13,12 +13,14 @@ package heros.fieldsens;









import heros.fieldsens.FlowFunction.Constraint;





















import java.util.List;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Sets;





















public abstract class Resolver<Field, Fact, Stmt, Method> {





















 private boolean interest = false;










 private Set<Resolver<Field, Fact, Stmt, Method>> interest = Sets.newHashSet();










 private List<InterestCallback<Field, Fact, Stmt, Method>> interestCallbacks = Lists.newLinkedList();










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer;










 private boolean canBeResolvedEmpty = false;



......@@ -29,18 +31,14 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {




















 public abstract void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback);










 










 public void interest() {










 if(interest)










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(!interest.add(resolver))










 return;





















 log("Interest given");










 interest = true;










 log("Interest given by: "+resolver);










 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.interest(analyzer, this);










 callback.interest(analyzer, resolver);










 }










 










 if(canBeResolvedEmpty)










 interestCallbacks = null;










 }










 










 protected void canBeResolvedEmpty() {



......@@ -51,23 +49,19 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {









 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.canBeResolvedEmpty();










 }










 










 if(interest)










 interestCallbacks = null;










 }





















 public boolean isInterestGiven() {










 return interest;










 return !interest.isEmpty();










 }





















 protected void registerCallback(InterestCallback<Field, Fact, Stmt, Method> callback) {










 if(interest) {










 callback.interest(analyzer, this);










 }










 else {










 log("Callback registered");










 interestCallbacks.add(callback);










 if(!interest.isEmpty()) {










 for(Resolver<Field, Fact, Stmt, Method> resolver : Lists.newLinkedList(interest))










 callback.interest(analyzer, resolver);










 }










 log("Callback registered");










 interestCallbacks.add(callback);





















 if(canBeResolvedEmpty)










 callback.canBeResolvedEmpty();



......


import heros.fieldsens.FlowFunction.Constraint;importheros.fieldsens.FlowFunction.Constraint;import java.util.List;importjava.util.List;import java.util.Set;importjava.util.Set;import com.google.common.collect.Lists;importcom.google.common.collect.Lists;import com.google.common.collect.Sets;importcom.google.common.collect.Sets;public abstract class Resolver<Field, Fact, Stmt, Method> {publicabstractclassResolver<Field,Fact,Stmt,Method>{ private boolean interest = false;privatebooleanboolean interestinterest == falsefalse; private Set<Resolver<Field, Fact, Stmt, Method>> interest = Sets.newHashSet();privateSetSet<<ResolverResolver<<FieldField,, FactFact,, StmtStmt,, MethodMethod>>>> interestinterest == SetsSets..newHashSetnewHashSet();() private List<InterestCallback<Field, Fact, Stmt, Method>> interestCallbacks = Lists.newLinkedList();privateList<InterestCallback<Field,Fact,Stmt,Method>>interestCallbacks=Lists.newLinkedList(); protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer;protectedPerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer; private boolean canBeResolvedEmpty = false;privatebooleancanBeResolvedEmpty=false; public abstract void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback);publicabstractvoidresolve(Constraint<Field>constraint,InterestCallback<Field,Fact,Stmt,Method>callback);  public void interest() {publicvoidinterest(){ if(interest)if(interest) public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {publicvoidinterest(ResolverResolver<<FieldField,, FactFact,, StmtStmt,, MethodMethod>> resolverresolver){ if(!interest.add(resolver))if(!!interest..addadd((resolverresolver))) return;return; log("Interest given");log("Interest given"); interest = true;interest=true; log("Interest given by: "+resolver);log("Interest given by: "+resolver); for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {for(InterestCallback<Field,Fact,Stmt,Method>callback:Lists.newLinkedList(interestCallbacks)){ callback.interest(analyzer, this);callback.interest(analyzer,thisthis); callback.interest(analyzer, resolver);callback.interest(analyzer,resolverresolver); }}  if(canBeResolvedEmpty)if(canBeResolvedEmpty) interestCallbacks = null;interestCallbacks=null; }}  protected void canBeResolvedEmpty() {protectedvoidcanBeResolvedEmpty(){ for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {for(InterestCallback<Field,Fact,Stmt,Method>callback:Lists.newLinkedList(interestCallbacks)){ callback.canBeResolvedEmpty();callback.canBeResolvedEmpty(); }}  if(interest)if(interest) interestCallbacks = null;interestCallbacks=null; }} public boolean isInterestGiven() {publicbooleanisInterestGiven(){ return interest;returninterest; return !interest.isEmpty();return!!interest..isEmptyisEmpty();() }} protected void registerCallback(InterestCallback<Field, Fact, Stmt, Method> callback) {protectedvoidregisterCallback(InterestCallback<Field,Fact,Stmt,Method>callback){ if(interest) {if(interest){ callback.interest(analyzer, this);callback.interest(analyzer,this); }} else {else{ log("Callback registered");log("Callback registered"); interestCallbacks.add(callback);interestCallbacks.add(callback); if(!interest.isEmpty()) {if(!interest.isEmpty()){ for(Resolver<Field, Fact, Stmt, Method> resolver : Lists.newLinkedList(interest))for(Resolver<Field,Fact,Stmt,Method>resolver:Lists.newLinkedList(interest)) callback.interest(analyzer, resolver);callback.interest(analyzer,resolver); }} log("Callback registered");log("Callback registered"); interestCallbacks.add(callback);interestCallbacks.add(callback); if(canBeResolvedEmpty)if(canBeResolvedEmpty) callback.canBeResolvedEmpty();callback.canBeResolvedEmpty();








src/heros/fieldsens/ResolverTemplate.java








View file @ 7b66dd07






......@@ -13,6 +13,7 @@ package heros.fieldsens;









import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Sets;














......@@ -26,11 +27,25 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> allResolversInExclHierarchy;










 protected AccessPath<Field> resolvedAccessPath;










 protected Debugger<Field, Fact, Stmt, Method> debugger;





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent) {










 AccessPath<Field> resolvedAccessPath,










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, 










 Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer);










 this.resolvedAccessPath = resolvedAccessPath;










 this.parent = parent;










 this.debugger = debugger;










 if(parent == null || resolvedAccessPath.getExclusions().isEmpty()) {










 allResolversInExclHierarchy = Maps.newHashMap();










 }










 else {










 allResolversInExclHierarchy = parent.allResolversInExclHierarchy;










 }










 debugger.newResolver(analyzer, this);










 }










 










 protected boolean isLocked() {



......@@ -49,25 +64,23 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 recursionLock = false;










 }










 










 protected abstract AccessPath<Field> getResolvedAccessPath();










 










 protected abstract AccessPath<Field> getAccessPathOf(Incoming inc);










 










 public void addIncoming(Incoming inc) {










 if(getResolvedAccessPath().isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(resolvedAccessPath.isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge: "+inc);










 if(!incomingEdges.add(inc))










 return;










 










 interest();










 interest(this);










 










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : nestedResolvers.values()) {










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : Lists.newLinkedList(nestedResolvers.values())) {










 nestedResolver.addIncoming(inc);










 }










 










 processIncomingGuaranteedPrefix(inc);










 }










 else if(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 else if(getAccessPathOf(inc).isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 processIncomingPotentialPrefix(inc);










 }










 }



......@@ -79,25 +92,33 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(getResolvedAccessPath()) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(getResolvedAccessPath());










 debugger.askedToResolve(this, constraint);










 if(constraint.canBeAppliedTo(resolvedAccessPath) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(resolvedAccessPath);










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = getOrCreateNestedResolver(newAccPath);










 assert nestedResolver.getResolvedAccessPath().equals(constraint.applyToAccessPath(getResolvedAccessPath()));










 assert nestedResolver.resolvedAccessPath.equals(constraint.applyToAccessPath(resolvedAccessPath));










 nestedResolver.registerCallback(callback);










 }










 }





















 protected ResolverTemplate<Field, Fact, Stmt, Method, Incoming> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 if(getResolvedAccessPath().equals(newAccPath))










 if(resolvedAccessPath.equals(newAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(newAccPath)) {










 assert getResolvedAccessPath().getDeltaTo(newAccPath).accesses.length <= 1;










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = createNestedResolver(newAccPath);










 nestedResolvers.put(newAccPath, nestedResolver);










 










 for(Incoming inc : incomingEdges) {










 nestedResolver.addIncoming(inc);










 assert resolvedAccessPath.getDeltaTo(newAccPath).accesses.length <= 1;










 if(allResolversInExclHierarchy.containsKey(newAccPath)) {










 return allResolversInExclHierarchy.get(newAccPath);










 }










 else {










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver = createNestedResolver(newAccPath);










 if(!resolvedAccessPath.getExclusions().isEmpty() || !newAccPath.getExclusions().isEmpty())










 allResolversInExclHierarchy.put(newAccPath, nestedResolver);










 nestedResolvers.put(newAccPath, nestedResolver);










 for(Incoming inc : Lists.newLinkedList(incomingEdges)) {










 nestedResolver.addIncoming(inc);










 }










 return nestedResolver;










 }










 }










 return nestedResolvers.get(newAccPath);



......












src/heros/fieldsens/ResolverTemplate.java








View file @ 7b66dd07








src/heros/fieldsens/ResolverTemplate.java










View file @ 7b66dd07


7b66dd07



......@@ -13,6 +13,7 @@ package heros.fieldsens;









import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Sets;














......@@ -26,11 +27,25 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> allResolversInExclHierarchy;










 protected AccessPath<Field> resolvedAccessPath;










 protected Debugger<Field, Fact, Stmt, Method> debugger;





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent) {










 AccessPath<Field> resolvedAccessPath,










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, 










 Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer);










 this.resolvedAccessPath = resolvedAccessPath;










 this.parent = parent;










 this.debugger = debugger;










 if(parent == null || resolvedAccessPath.getExclusions().isEmpty()) {










 allResolversInExclHierarchy = Maps.newHashMap();










 }










 else {










 allResolversInExclHierarchy = parent.allResolversInExclHierarchy;










 }










 debugger.newResolver(analyzer, this);










 }










 










 protected boolean isLocked() {



......@@ -49,25 +64,23 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 recursionLock = false;










 }










 










 protected abstract AccessPath<Field> getResolvedAccessPath();










 










 protected abstract AccessPath<Field> getAccessPathOf(Incoming inc);










 










 public void addIncoming(Incoming inc) {










 if(getResolvedAccessPath().isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(resolvedAccessPath.isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge: "+inc);










 if(!incomingEdges.add(inc))










 return;










 










 interest();










 interest(this);










 










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : nestedResolvers.values()) {










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : Lists.newLinkedList(nestedResolvers.values())) {










 nestedResolver.addIncoming(inc);










 }










 










 processIncomingGuaranteedPrefix(inc);










 }










 else if(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 else if(getAccessPathOf(inc).isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 processIncomingPotentialPrefix(inc);










 }










 }



......@@ -79,25 +92,33 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(getResolvedAccessPath()) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(getResolvedAccessPath());










 debugger.askedToResolve(this, constraint);










 if(constraint.canBeAppliedTo(resolvedAccessPath) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(resolvedAccessPath);










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = getOrCreateNestedResolver(newAccPath);










 assert nestedResolver.getResolvedAccessPath().equals(constraint.applyToAccessPath(getResolvedAccessPath()));










 assert nestedResolver.resolvedAccessPath.equals(constraint.applyToAccessPath(resolvedAccessPath));










 nestedResolver.registerCallback(callback);










 }










 }





















 protected ResolverTemplate<Field, Fact, Stmt, Method, Incoming> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 if(getResolvedAccessPath().equals(newAccPath))










 if(resolvedAccessPath.equals(newAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(newAccPath)) {










 assert getResolvedAccessPath().getDeltaTo(newAccPath).accesses.length <= 1;










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = createNestedResolver(newAccPath);










 nestedResolvers.put(newAccPath, nestedResolver);










 










 for(Incoming inc : incomingEdges) {










 nestedResolver.addIncoming(inc);










 assert resolvedAccessPath.getDeltaTo(newAccPath).accesses.length <= 1;










 if(allResolversInExclHierarchy.containsKey(newAccPath)) {










 return allResolversInExclHierarchy.get(newAccPath);










 }










 else {










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver = createNestedResolver(newAccPath);










 if(!resolvedAccessPath.getExclusions().isEmpty() || !newAccPath.getExclusions().isEmpty())










 allResolversInExclHierarchy.put(newAccPath, nestedResolver);










 nestedResolvers.put(newAccPath, nestedResolver);










 for(Incoming inc : Lists.newLinkedList(incomingEdges)) {










 nestedResolver.addIncoming(inc);










 }










 return nestedResolver;










 }










 }










 return nestedResolvers.get(newAccPath);



......






......@@ -13,6 +13,7 @@ package heros.fieldsens;









import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Sets;














......@@ -26,11 +27,25 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> allResolversInExclHierarchy;










 protected AccessPath<Field> resolvedAccessPath;










 protected Debugger<Field, Fact, Stmt, Method> debugger;





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent) {










 AccessPath<Field> resolvedAccessPath,










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, 










 Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer);










 this.resolvedAccessPath = resolvedAccessPath;










 this.parent = parent;










 this.debugger = debugger;










 if(parent == null || resolvedAccessPath.getExclusions().isEmpty()) {










 allResolversInExclHierarchy = Maps.newHashMap();










 }










 else {










 allResolversInExclHierarchy = parent.allResolversInExclHierarchy;










 }










 debugger.newResolver(analyzer, this);










 }










 










 protected boolean isLocked() {



......@@ -49,25 +64,23 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 recursionLock = false;










 }










 










 protected abstract AccessPath<Field> getResolvedAccessPath();










 










 protected abstract AccessPath<Field> getAccessPathOf(Incoming inc);










 










 public void addIncoming(Incoming inc) {










 if(getResolvedAccessPath().isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(resolvedAccessPath.isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge: "+inc);










 if(!incomingEdges.add(inc))










 return;










 










 interest();










 interest(this);










 










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : nestedResolvers.values()) {










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : Lists.newLinkedList(nestedResolvers.values())) {










 nestedResolver.addIncoming(inc);










 }










 










 processIncomingGuaranteedPrefix(inc);










 }










 else if(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 else if(getAccessPathOf(inc).isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 processIncomingPotentialPrefix(inc);










 }










 }



......@@ -79,25 +92,33 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(getResolvedAccessPath()) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(getResolvedAccessPath());










 debugger.askedToResolve(this, constraint);










 if(constraint.canBeAppliedTo(resolvedAccessPath) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(resolvedAccessPath);










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = getOrCreateNestedResolver(newAccPath);










 assert nestedResolver.getResolvedAccessPath().equals(constraint.applyToAccessPath(getResolvedAccessPath()));










 assert nestedResolver.resolvedAccessPath.equals(constraint.applyToAccessPath(resolvedAccessPath));










 nestedResolver.registerCallback(callback);










 }










 }





















 protected ResolverTemplate<Field, Fact, Stmt, Method, Incoming> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 if(getResolvedAccessPath().equals(newAccPath))










 if(resolvedAccessPath.equals(newAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(newAccPath)) {










 assert getResolvedAccessPath().getDeltaTo(newAccPath).accesses.length <= 1;










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = createNestedResolver(newAccPath);










 nestedResolvers.put(newAccPath, nestedResolver);










 










 for(Incoming inc : incomingEdges) {










 nestedResolver.addIncoming(inc);










 assert resolvedAccessPath.getDeltaTo(newAccPath).accesses.length <= 1;










 if(allResolversInExclHierarchy.containsKey(newAccPath)) {










 return allResolversInExclHierarchy.get(newAccPath);










 }










 else {










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver = createNestedResolver(newAccPath);










 if(!resolvedAccessPath.getExclusions().isEmpty() || !newAccPath.getExclusions().isEmpty())










 allResolversInExclHierarchy.put(newAccPath, nestedResolver);










 nestedResolvers.put(newAccPath, nestedResolver);










 for(Incoming inc : Lists.newLinkedList(incomingEdges)) {










 nestedResolver.addIncoming(inc);










 }










 return nestedResolver;










 }










 }










 return nestedResolvers.get(newAccPath);



......


import java.util.Map;importjava.util.Map;import java.util.Set;importjava.util.Set;import com.google.common.collect.Lists;importcom.google.common.collect.Lists;import com.google.common.collect.Maps;importcom.google.common.collect.Maps;import com.google.common.collect.Sets;importcom.google.common.collect.Sets; protected Set<Incoming> incomingEdges = Sets.newHashSet();protectedSet<Incoming>incomingEdges=Sets.newHashSet(); private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;privateResolverTemplate<Field,Fact,Stmt,Method,Incoming>parent; private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();privateMap<AccessPath<Field>,ResolverTemplate<Field,Fact,Stmt,Method,Incoming>>nestedResolvers=Maps.newHashMap(); private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> allResolversInExclHierarchy;privateMap<AccessPath<Field>,ResolverTemplate<Field,Fact,Stmt,Method,Incoming>>allResolversInExclHierarchy; protected AccessPath<Field> resolvedAccessPath;protectedAccessPath<Field>resolvedAccessPath; protected Debugger<Field, Fact, Stmt, Method> debugger;protectedDebugger<Field,Fact,Stmt,Method>debugger; public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, publicResolverTemplate(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer, ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent) {ResolverTemplate<Field,Fact,Stmt,Method,Incoming>parent){ AccessPath<Field> resolvedAccessPath,AccessPath<Field>resolvedAccessPath, ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent, ResolverTemplate<Field,Fact,Stmt,Method,Incoming>parent, Debugger<Field, Fact, Stmt, Method> debugger) {Debugger<Field,Fact,Stmt,Method>debugger){ super(analyzer);super(analyzer); this.resolvedAccessPath = resolvedAccessPath;this.resolvedAccessPath=resolvedAccessPath; this.parent = parent;this.parent=parent; this.debugger = debugger;this.debugger=debugger; if(parent == null || resolvedAccessPath.getExclusions().isEmpty()) {if(parent==null||resolvedAccessPath.getExclusions().isEmpty()){ allResolversInExclHierarchy = Maps.newHashMap();allResolversInExclHierarchy=Maps.newHashMap(); }} else {else{ allResolversInExclHierarchy = parent.allResolversInExclHierarchy;allResolversInExclHierarchy=parent.allResolversInExclHierarchy; }} debugger.newResolver(analyzer, this);debugger.newResolver(analyzer,this); }}  protected boolean isLocked() {protectedbooleanisLocked(){ recursionLock = false;recursionLock=false; }}  protected abstract AccessPath<Field> getResolvedAccessPath();protectedabstractAccessPath<Field>getResolvedAccessPath();  protected abstract AccessPath<Field> getAccessPathOf(Incoming inc);protectedabstractAccessPath<Field>getAccessPathOf(Incominginc);  public void addIncoming(Incoming inc) {publicvoidaddIncoming(Incominginc){ if(getResolvedAccessPath().isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {if(getResolvedAccessPathgetR().()isPrefixOf(getAccessPathOf(inc))==PrefixTestResult.GUARANTEED_PREFIX){ if(resolvedAccessPath.isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {if(resolvedAccessPathr.isPrefixOf(getAccessPathOf(inc))==PrefixTestResult.GUARANTEED_PREFIX){ log("Incoming Edge: "+inc);log("Incoming Edge: "+inc); if(!incomingEdges.add(inc))if(!incomingEdges.add(inc)) return;return;  interest();interest(); interest(this);interest(thisthis);  for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : nestedResolvers.values()) {for(ResolverTemplate<Field,Fact,Stmt,Method,Incoming>nestedResolver:nestedResolvers.values()){ for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : Lists.newLinkedList(nestedResolvers.values())) {for(ResolverTemplate<Field,Fact,Stmt,Method,Incoming>nestedResolver:ListsLists..newLinkedListnewLinkedList((nestedResolvers.values()))){ nestedResolver.addIncoming(inc);nestedResolver.addIncoming(inc); }}  processIncomingGuaranteedPrefix(inc);processIncomingGuaranteedPrefix(inc); }} else if(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {elseif(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPathgetR()).()atLeast(PrefixTestResult.POTENTIAL_PREFIX)){ else if(getAccessPathOf(inc).isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {elseif(getAccessPathOf(inc).isPrefixOf(resolvedAccessPathr).atLeast(PrefixTestResult.POTENTIAL_PREFIX)){ processIncomingPotentialPrefix(inc);processIncomingPotentialPrefix(inc); }} }} @Override@Override public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {publicvoidresolve(Constraint<Field>constraint,InterestCallback<Field,Fact,Stmt,Method>callback){ log("Resolve: "+constraint);log("Resolve: "+constraint); if(constraint.canBeAppliedTo(getResolvedAccessPath()) && !isLocked()) {if(constraint.canBeAppliedTo(getResolvedAccessPath())&&!isLocked()){ AccessPath<Field> newAccPath = constraint.applyToAccessPath(getResolvedAccessPath());AccessPath<Field>newAccPath=constraint.applyToAccessPath(getResolvedAccessPath()); debugger.askedToResolve(this, constraint);debugger.askedToResolve(this,constraint); if(constraint.canBeAppliedTo(resolvedAccessPath) && !isLocked()) {if(constraint.canBeAppliedTo(resolvedAccessPath)&&!isLocked()){ AccessPath<Field> newAccPath = constraint.applyToAccessPath(resolvedAccessPath);AccessPath<Field>newAccPath=constraint.applyToAccessPath(resolvedAccessPath); ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = getOrCreateNestedResolver(newAccPath);ResolverTemplate<Field,Fact,Stmt,Method,Incoming>nestedResolver=getOrCreateNestedResolver(newAccPath); assert nestedResolver.getResolvedAccessPath().equals(constraint.applyToAccessPath(getResolvedAccessPath()));assertnestedResolver.getResolvedAccessPathgetR().()equals(constraint.applyToAccessPath(getResolvedAccessPathgetR()));() assert nestedResolver.resolvedAccessPath.equals(constraint.applyToAccessPath(resolvedAccessPath));assertnestedResolver.resolvedAccessPathr.equals(constraint.applyToAccessPath(resolvedAccessPathr)); nestedResolver.registerCallback(callback);nestedResolver.registerCallback(callback); }} }} protected ResolverTemplate<Field, Fact, Stmt, Method, Incoming> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {protectedResolverTemplate<Field,Fact,Stmt,Method,Incoming>getOrCreateNestedResolver(AccessPath<Field>newAccPath){ if(getResolvedAccessPath().equals(newAccPath))if(getResolvedAccessPathgetR().()equals(newAccPath)) if(resolvedAccessPath.equals(newAccPath))if(resolvedAccessPathr.equals(newAccPath)) return this;returnthis;  if(!nestedResolvers.containsKey(newAccPath)) {if(!nestedResolvers.containsKey(newAccPath)){ assert getResolvedAccessPath().getDeltaTo(newAccPath).accesses.length <= 1;assertgetResolvedAccessPath().getDeltaTo(newAccPath).accesses.length<=1; ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = createNestedResolver(newAccPath);ResolverTemplate<Field,Fact,Stmt,Method,Incoming>nestedResolver=createNestedResolver(newAccPath); nestedResolvers.put(newAccPath, nestedResolver);nestedResolvers.put(newAccPath,nestedResolver);  for(Incoming inc : incomingEdges) {for(Incominginc:incomingEdges){ nestedResolver.addIncoming(inc);nestedResolver.addIncoming(inc); assert resolvedAccessPath.getDeltaTo(newAccPath).accesses.length <= 1;assertresolvedAccessPath.getDeltaTo(newAccPath).accesses.length<=1; if(allResolversInExclHierarchy.containsKey(newAccPath)) {if(allResolversInExclHierarchy.containsKey(newAccPath)){ return allResolversInExclHierarchy.get(newAccPath);returnallResolversInExclHierarchy.get(newAccPath); }} else {else{ ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver = createNestedResolver(newAccPath);ResolverTemplate<Field,Fact,Stmt,Method,Incoming>nestedResolver=createNestedResolver(newAccPath); if(!resolvedAccessPath.getExclusions().isEmpty() || !newAccPath.getExclusions().isEmpty())if(!resolvedAccessPath.getExclusions().isEmpty()||!newAccPath.getExclusions().isEmpty()) allResolversInExclHierarchy.put(newAccPath, nestedResolver);allResolversInExclHierarchy.put(newAccPath,nestedResolver); nestedResolvers.put(newAccPath, nestedResolver);nestedResolvers.put(newAccPath,nestedResolver); for(Incoming inc : Lists.newLinkedList(incomingEdges)) {for(Incominginc:Lists.newLinkedList(incomingEdges)){ nestedResolver.addIncoming(inc);nestedResolver.addIncoming(inc); }} return nestedResolver;returnnestedResolver; }} }} return nestedResolvers.get(newAccPath);returnnestedResolvers.get(newAccPath);








src/heros/fieldsens/ReturnSiteResolver.java








View file @ 7b66dd07






......@@ -20,34 +20,32 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {





















 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(analyzer, returnSite, new AccessPath<Field>(), null);










 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, returnSite, null, debugger, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated = false;










 }





















 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.resolvedAccPath = resolvedAccPath;










 this.sourceFact = sourceFact;










 propagated=true;










 }










 










 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+returnSite+">";










 }










 










 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 protected AccessPath<Field> getAccessPathOf(ReturnEdge<Field, Fact, Stmt, Method> inc) {










 return inc.incAccessPath;










 return inc.usedAccessPathOfIncResolver.applyTo(inc.incAccessPath);










 }










 










 public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact, 



......@@ -58,8 +56,12 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }










 










 protected void processIncomingGuaranteedPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, retEdge.incFact);










 } 










 else {










 propagated=true;










 sourceFact = retEdge.incFact;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<Field, Fact, Stmt, Method>(retEdge.incFact, new AccessPath<Field>(), this)));










 }



......@@ -76,26 +78,40 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(analyzer, returnSite, newAccPath, this);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, debugger, newAccPath, this);










 }










 










 public Stmt getReturnSite() {










 return returnSite;










 }










 










 private boolean isNullOrCallEdgeResolver(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(resolver == null)










 return true;










 if(resolver instanceof CallEdgeResolver) {










 return !(resolver instanceof ZeroCallEdgeResolver);










 }










 return false;










 }










 










 private void resolveViaDelta(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(retEdge.incResolver == null || retEdge.incResolver instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.incResolver)) {










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPath());










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(resolvedAccessPath);










 assert delta.accesses.length <= 1;










 retEdge.incResolver.resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {





















 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










 if(resolver instanceof ZeroCallEdgeResolver) {










 ReturnSiteResolver.this.interest(((ZeroCallEdgeResolver<Field, Fact, Stmt, Method>) resolver).










 copyWithAnalyzer(ReturnSiteResolver.this.analyzer));










 } else {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(resolvedAccessPath)));










 ReturnSiteResolver.this.interest(ReturnSiteResolver.this);










 }










 }










 










 @Override



......@@ -107,24 +123,28 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }





















 private void resolveViaDeltaAndPotentiallyDelegateToCallSite(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath));










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 AccessPath<Field> inc = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath);










 if(!retEdge.callDelta.canBeAppliedTo(inc))










 return;










 










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(inc);










 if(resolvedAccessPath.isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest();










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 interest(this);










 } else if(currAccPath.isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }










 }





















 protected void resolveViaCallSiteResolver(final ReturnEdge<Field, Fact, Stmt, Method> retEdge, AccessPath<Field> currAccPath) {










 if(retEdge.resolverAtCaller == null || retEdge.resolverAtCaller instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.resolverAtCaller)) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(resolvedAccessPath)), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(resolver);










 }










 










 @Override



......












src/heros/fieldsens/ReturnSiteResolver.java








View file @ 7b66dd07








src/heros/fieldsens/ReturnSiteResolver.java










View file @ 7b66dd07


7b66dd07



......@@ -20,34 +20,32 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {





















 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(analyzer, returnSite, new AccessPath<Field>(), null);










 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, returnSite, null, debugger, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated = false;










 }





















 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.resolvedAccPath = resolvedAccPath;










 this.sourceFact = sourceFact;










 propagated=true;










 }










 










 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+returnSite+">";










 }










 










 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 protected AccessPath<Field> getAccessPathOf(ReturnEdge<Field, Fact, Stmt, Method> inc) {










 return inc.incAccessPath;










 return inc.usedAccessPathOfIncResolver.applyTo(inc.incAccessPath);










 }










 










 public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact, 



......@@ -58,8 +56,12 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }










 










 protected void processIncomingGuaranteedPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, retEdge.incFact);










 } 










 else {










 propagated=true;










 sourceFact = retEdge.incFact;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<Field, Fact, Stmt, Method>(retEdge.incFact, new AccessPath<Field>(), this)));










 }



......@@ -76,26 +78,40 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(analyzer, returnSite, newAccPath, this);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, debugger, newAccPath, this);










 }










 










 public Stmt getReturnSite() {










 return returnSite;










 }










 










 private boolean isNullOrCallEdgeResolver(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(resolver == null)










 return true;










 if(resolver instanceof CallEdgeResolver) {










 return !(resolver instanceof ZeroCallEdgeResolver);










 }










 return false;










 }










 










 private void resolveViaDelta(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(retEdge.incResolver == null || retEdge.incResolver instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.incResolver)) {










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPath());










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(resolvedAccessPath);










 assert delta.accesses.length <= 1;










 retEdge.incResolver.resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {





















 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










 if(resolver instanceof ZeroCallEdgeResolver) {










 ReturnSiteResolver.this.interest(((ZeroCallEdgeResolver<Field, Fact, Stmt, Method>) resolver).










 copyWithAnalyzer(ReturnSiteResolver.this.analyzer));










 } else {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(resolvedAccessPath)));










 ReturnSiteResolver.this.interest(ReturnSiteResolver.this);










 }










 }










 










 @Override



......@@ -107,24 +123,28 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }





















 private void resolveViaDeltaAndPotentiallyDelegateToCallSite(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath));










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 AccessPath<Field> inc = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath);










 if(!retEdge.callDelta.canBeAppliedTo(inc))










 return;










 










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(inc);










 if(resolvedAccessPath.isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest();










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 interest(this);










 } else if(currAccPath.isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }










 }





















 protected void resolveViaCallSiteResolver(final ReturnEdge<Field, Fact, Stmt, Method> retEdge, AccessPath<Field> currAccPath) {










 if(retEdge.resolverAtCaller == null || retEdge.resolverAtCaller instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.resolverAtCaller)) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(resolvedAccessPath)), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(resolver);










 }










 










 @Override



......






......@@ -20,34 +20,32 @@ import heros.fieldsens.structs.WrappedFactAtStatement;









public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {





















 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(analyzer, returnSite, new AccessPath<Field>(), null);










 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, Debugger<Field, Fact, Stmt, Method> debugger) {










 this(factMergeHandler, analyzer, returnSite, null, debugger, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated = false;










 }





















 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, resolvedAccPath, parent, debugger);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.resolvedAccPath = resolvedAccPath;










 this.sourceFact = sourceFact;










 propagated=true;










 }










 










 @Override










 public String toString() {










 return "<"+resolvedAccPath+":"+returnSite+">";










 }










 










 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 return "<"+resolvedAccessPath+":"+returnSite+" in "+analyzer.getMethod()+">";










 }










 










 protected AccessPath<Field> getAccessPathOf(ReturnEdge<Field, Fact, Stmt, Method> inc) {










 return inc.incAccessPath;










 return inc.usedAccessPathOfIncResolver.applyTo(inc.incAccessPath);










 }










 










 public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact, 



......@@ -58,8 +56,12 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }










 










 protected void processIncomingGuaranteedPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, retEdge.incFact);










 } 










 else {










 propagated=true;










 sourceFact = retEdge.incFact;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<Field, Fact, Stmt, Method>(retEdge.incFact, new AccessPath<Field>(), this)));










 }



......@@ -76,26 +78,40 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(analyzer, returnSite, newAccPath, this);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, debugger, newAccPath, this);










 }










 










 public Stmt getReturnSite() {










 return returnSite;










 }










 










 private boolean isNullOrCallEdgeResolver(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(resolver == null)










 return true;










 if(resolver instanceof CallEdgeResolver) {










 return !(resolver instanceof ZeroCallEdgeResolver);










 }










 return false;










 }










 










 private void resolveViaDelta(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(retEdge.incResolver == null || retEdge.incResolver instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.incResolver)) {










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPath());










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(resolvedAccessPath);










 assert delta.accesses.length <= 1;










 retEdge.incResolver.resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {





















 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










 if(resolver instanceof ZeroCallEdgeResolver) {










 ReturnSiteResolver.this.interest(((ZeroCallEdgeResolver<Field, Fact, Stmt, Method>) resolver).










 copyWithAnalyzer(ReturnSiteResolver.this.analyzer));










 } else {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(resolvedAccessPath)));










 ReturnSiteResolver.this.interest(ReturnSiteResolver.this);










 }










 }










 










 @Override



......@@ -107,24 +123,28 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }





















 private void resolveViaDeltaAndPotentiallyDelegateToCallSite(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath));










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 AccessPath<Field> inc = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath);










 if(!retEdge.callDelta.canBeAppliedTo(inc))










 return;










 










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(inc);










 if(resolvedAccessPath.isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest();










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 interest(this);










 } else if(currAccPath.isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }










 }





















 protected void resolveViaCallSiteResolver(final ReturnEdge<Field, Fact, Stmt, Method> retEdge, AccessPath<Field> currAccPath) {










 if(retEdge.resolverAtCaller == null || retEdge.resolverAtCaller instanceof CallEdgeResolver) {










 if(isNullOrCallEdgeResolver(retEdge.resolverAtCaller)) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(resolvedAccessPath)), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(resolver);










 }










 










 @Override



......


public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {publicclassReturnSiteResolver<Field,Fact,Stmt,Method>extendsResolverTemplate<Field,Fact,Stmt,Method,ReturnEdge<Field,Fact,Stmt,Method>>{ private Stmt returnSite;privateStmtreturnSite; private AccessPath<Field> resolvedAccPath;privateAccessPath<Field>resolvedAccPath; private boolean propagated = false;privatebooleanpropagated=false; private Fact sourceFact;privateFactsourceFact; private FactMergeHandler<Fact> factMergeHandler;privateFactMergeHandler<Fact>factMergeHandler; public ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {publicReturnSiteResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtreturnSite){ this(analyzer, returnSite, new AccessPath<Field>(), null);this(analyzer,returnSite,newAccessPath<Field>(),null); public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, Debugger<Field, Fact, Stmt, Method> debugger) {publicReturnSiteResolver(FactMergeHandler<Fact>factMergeHandler,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtreturnSite,Debugger<Field,Fact,Stmt,Method>debugger){ this(factMergeHandler, analyzer, returnSite, null, debugger, new AccessPath<Field>(), null);this(factMergeHandler,analyzer,returnSite,null,debugger,newAccessPath<Field>(),null); this.factMergeHandler = factMergeHandler;this.factMergeHandler=factMergeHandler; propagated = false;propagated=false; }} private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, privateReturnSiteResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtreturnSite, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {AccessPath<Field>resolvedAccPath,ReturnSiteResolver<Field,Fact,Stmt,Method>parent){ super(analyzer, parent);super(analyzer,parent); private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, privateReturnSiteResolver(FactMergeHandler<Fact>factMergeHandler,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtreturnSite, Fact sourceFact, Debugger<Field, Fact, Stmt, Method> debugger, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {FactsourceFact,Debugger<Field,Fact,Stmt,Method>debugger,AccessPath<Field>resolvedAccPath,ReturnSiteResolver<Field,Fact,Stmt,Method>parent){ super(analyzer, resolvedAccPath, parent, debugger);super(analyzer,resolvedAccPath,parent,debugger); this.factMergeHandler = factMergeHandler;this.factMergeHandler=factMergeHandler; this.returnSite = returnSite;this.returnSite=returnSite; this.resolvedAccPath = resolvedAccPath;this.resolvedAccPathresolvedAccPath == resolvedAccPathresolvedAccPath; this.sourceFact = sourceFact;this.sourceFactsourceFact == sourceFactsourceFact; propagated=true;propagated=true; }}  @Override@Override public String toString() {publicStringtoString(){ return "<"+resolvedAccPath+":"+returnSite+">";return"<"+resolvedAccPath+":"+returnSite+">"; }}  @Override@Override public AccessPath<Field> getResolvedAccessPath() {publicAccessPath<Field>getResolvedAccessPath(){ return resolvedAccPath;returnresolvedAccPath; return "<"+resolvedAccessPath+":"+returnSite+" in "+analyzer.getMethod()+">";return"<"+resolvedAccessPath+":"+returnSite+" in "+analyzer.getMethod()+">"; }}  protected AccessPath<Field> getAccessPathOf(ReturnEdge<Field, Fact, Stmt, Method> inc) {protectedAccessPath<Field>getAccessPathOf(ReturnEdge<Field,Fact,Stmt,Method>inc){ return inc.incAccessPath;returninc.incAccessPath; return inc.usedAccessPathOfIncResolver.applyTo(inc.incAccessPath);returnincinc..usedAccessPathOfIncResolverusedAccessPathOfIncResolver..applyToapplyTo((inc.incAccessPath);) }}  public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact, publicvoidaddIncoming(finalWrappedFact<Field,Fact,Stmt,Method>fact, }}  protected void processIncomingGuaranteedPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {protectedvoidprocessIncomingGuaranteedPrefix(ReturnEdge<Field,Fact,Stmt,Method>retEdge){ if(!propagated) {if(!propagated){ if(propagated) {if(propagated){ factMergeHandler.merge(sourceFact, retEdge.incFact);factMergeHandler.merge(sourceFact,retEdge.incFact); } } else {else{ propagated=true;propagated=true; sourceFact = retEdge.incFact;sourceFact=retEdge.incFact; analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, analyzer.scheduleEdgeTo(newWrappedFactAtStatement<Field,Fact,Stmt,Method>(returnSite, new WrappedFact<Field, Fact, Stmt, Method>(retEdge.incFact, new AccessPath<Field>(), this)));newWrappedFact<Field,Fact,Stmt,Method>(retEdge.incFact,newAccessPath<Field>(),this))); }} @Override@Override protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {protectedResolverTemplate<Field,Fact,Stmt,Method,ReturnEdge<Field,Fact,Stmt,Method>>createNestedResolver(AccessPath<Field>newAccPath){ return new ReturnSiteResolver<Field, Fact, Stmt, Method>(analyzer, returnSite, newAccPath, this);returnnewReturnSiteResolver<Field,Fact,Stmt,Method>(analyzer,returnSite,newAccPath,this); return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, debugger, newAccPath, this);returnnewReturnSiteResolver<Field,Fact,Stmt,Method>(factMergeHandlerfactMergeHandler,, analyzer,returnSite,sourceFactsourceFact,, debuggerdebugger,, newAccPath,this); }}  public Stmt getReturnSite() {publicStmtgetReturnSite(){ return returnSite;returnreturnSite; }}  private boolean isNullOrCallEdgeResolver(Resolver<Field, Fact, Stmt, Method> resolver) {privatebooleanisNullOrCallEdgeResolver(Resolver<Field,Fact,Stmt,Method>resolver){ if(resolver == null)if(resolver==null) return true;returntrue; if(resolver instanceof CallEdgeResolver) {if(resolverinstanceofCallEdgeResolver){ return !(resolver instanceof ZeroCallEdgeResolver);return!(resolverinstanceofZeroCallEdgeResolver); }} return false;returnfalse; }}  private void resolveViaDelta(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {privatevoidresolveViaDelta(finalReturnEdge<Field,Fact,Stmt,Method>retEdge){ if(retEdge.incResolver == null || retEdge.incResolver instanceof CallEdgeResolver) {if(retEdgeretEdge..incResolverincResolver ==== nullnull |||| retEdgeretEdge..incResolverincResolver instanceofinstanceof CallEdgeResolverCallEdgeResolver){ if(isNullOrCallEdgeResolver(retEdge.incResolver)) {if(isNullOrCallEdgeResolverisNullOrCallEdgeResolver((retEdgeretEdge..incResolverincResolver))){ resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge); } else {}else{ //resolve via incoming facts resolver//resolve via incoming facts resolver Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPath());Delta<Field>delta=retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPathgetR());() Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(resolvedAccessPath);Delta<Field>delta=retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(resolvedAccessPathr); assert delta.accesses.length <= 1;assertdelta.accesses.length<=1; retEdge.incResolver.resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {retEdge.incResolver.resolve(newDeltaConstraint<Field>(delta),newInterestCallback<Field,Fact,Stmt,Method>(){ @Override@Override public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {publicvoidinterest(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,Resolver<Field,Fact,Stmt,Method>resolver){ incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));incomingEdges.add(retEdge.copyWithIncomingResolver(resolver,retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath()))); ReturnSiteResolver.this.interest();ReturnSiteResolver.this.interest(); if(resolver instanceof ZeroCallEdgeResolver) {if(resolverinstanceofZeroCallEdgeResolver){ ReturnSiteResolver.this.interest(((ZeroCallEdgeResolver<Field, Fact, Stmt, Method>) resolver).ReturnSiteResolver.this.interest(((ZeroCallEdgeResolver<Field,Fact,Stmt,Method>)resolver). copyWithAnalyzer(ReturnSiteResolver.this.analyzer));copyWithAnalyzer(ReturnSiteResolver.this.analyzer)); } else {}else{ incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(resolvedAccessPath)));incomingEdges.add(retEdge.copyWithIncomingResolver(resolver,retEdge.incAccessPath.getDeltaTo(resolvedAccessPath))); ReturnSiteResolver.this.interest(ReturnSiteResolver.this);ReturnSiteResolver.this.interest(ReturnSiteResolver.this); }} }}  @Override@Override }} private void resolveViaDeltaAndPotentiallyDelegateToCallSite(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {privatevoidresolveViaDeltaAndPotentiallyDelegateToCallSite(finalReturnEdge<Field,Fact,Stmt,Method>retEdge){ final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath));finalAccessPath<Field>currAccPath=retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath)); if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {if(getResolvedAccessPath().isPrefixOf(currAccPath)==PrefixTestResult.GUARANTEED_PREFIX){ AccessPath<Field> inc = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath);AccessPath<Field>inc=retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath); if(!retEdge.callDelta.canBeAppliedTo(inc))if(!retEdge.callDelta.canBeAppliedTo(inc)) return;return;  final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(inc);finalAccessPath<Field>currAccPath=retEdge.callDelta.applyTo(inc); if(resolvedAccessPath.isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {if(resolvedAccessPath.isPrefixOf(currAccPath)==PrefixTestResult.GUARANTEED_PREFIX){ incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));incomingEdges.add(retEdge.copyWithIncomingResolver(null,retEdge.usedAccessPathOfIncResolver)); interest();interest(); } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {}elseif(currAccPath.isPrefixOf(getResolvedAccessPathgetR()).()atLeast(PrefixTestResult.POTENTIAL_PREFIX)){ interest(this);interest(thisthis); } else if(currAccPath.isPrefixOf(resolvedAccessPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {}elseif(currAccPath.isPrefixOf(resolvedAccessPathr).atLeast(PrefixTestResult.POTENTIAL_PREFIX)){ resolveViaCallSiteResolver(retEdge, currAccPath);resolveViaCallSiteResolver(retEdge,currAccPath); }} }} protected void resolveViaCallSiteResolver(final ReturnEdge<Field, Fact, Stmt, Method> retEdge, AccessPath<Field> currAccPath) {protectedvoidresolveViaCallSiteResolver(finalReturnEdge<Field,Fact,Stmt,Method>retEdge,AccessPath<Field>currAccPath){ if(retEdge.resolverAtCaller == null || retEdge.resolverAtCaller instanceof CallEdgeResolver) {if(retEdgeret..resolverAtCallerrAtCaller ==== nullnull |||| retEdge.resolverAtCaller instanceofinstanceof CallEdgeResolverCallEdgeResolver){ if(isNullOrCallEdgeResolver(retEdge.resolverAtCaller)) {if(isNullOrCallEdgeResolverisNullOrCallR((retEdge.resolverAtCaller))){ canBeResolvedEmpty();canBeResolvedEmpty(); } else {}else{ retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {retEdge.resolverAtCaller.resolve(newDeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPathgetR())),()newInterestCallback<Field,Fact,Stmt,Method>(){ retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(resolvedAccessPath)), new InterestCallback<Field, Fact, Stmt, Method>() {retEdge.resolverAtCaller.resolve(newDeltaConstraint<Field>(currAccPath.getDeltaTo(resolvedAccessPathr)),newInterestCallback<Field,Fact,Stmt,Method>(){ @Override@Override public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {publicvoidinterest(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,Resolver<Field,Fact,Stmt,Method>resolver){ incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver,retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath()))); ReturnSiteResolver.this.interest();ReturnSiteResolver.this.interest();//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));// ReturnSiteResolver.this.interest(resolver);ReturnSiteResolver.this.interest(resolverresolver); }}  @Override@Override








src/heros/fieldsens/SourceStmtAnnotatedMethodAnalyzer.java








View file @ 7b66dd07






......@@ -21,18 +21,21 @@ public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>









 private Method method;










 private DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {





















 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Key<Fact, Stmt> key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Synchronizer<Stmt> synchronizer;










 private Debugger<Field, Fact, Stmt, Method> debugger;










 










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer) {










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.synchronizer = synchronizer;










 this.debugger = debugger;










 }










 










 @Override



......












src/heros/fieldsens/SourceStmtAnnotatedMethodAnalyzer.java








View file @ 7b66dd07








src/heros/fieldsens/SourceStmtAnnotatedMethodAnalyzer.java










View file @ 7b66dd07


7b66dd07



......@@ -21,18 +21,21 @@ public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>









 private Method method;










 private DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {





















 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Key<Fact, Stmt> key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Synchronizer<Stmt> synchronizer;










 private Debugger<Field, Fact, Stmt, Method> debugger;










 










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer) {










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.synchronizer = synchronizer;










 this.debugger = debugger;










 }










 










 @Override



......






......@@ -21,18 +21,21 @@ public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>









 private Method method;










 private DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {





















 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Key<Fact, Stmt> key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context);










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context, debugger);










 }










 };










 private Context<Field, Fact, Stmt, Method> context;










 private Synchronizer<Stmt> synchronizer;










 private Debugger<Field, Fact, Stmt, Method> debugger;










 










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer) {










 public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer, Debugger<Field, Fact, Stmt, Method> debugger) {










 this.method = method;










 this.context = context;










 this.synchronizer = synchronizer;










 this.debugger = debugger;










 }










 










 @Override



......


 private Method method;privateMethodmethod; private DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = privateDefaultValueMap<Key<Fact,Stmt>,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>>perSourceAnalyzer= new DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {newDefaultValueMap<Key<Fact,Stmt>,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>>(){ @Override@Override protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Key<Fact, Stmt> key) {protectedPerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>createItem(Key<Fact,Stmt>key){ return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context);returnnewPerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>(method,key.fact,context); return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context, debugger);returnnewPerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>(method,key.fact,context,, debuggerdebugger); }} };}; private Context<Field, Fact, Stmt, Method> context;privateContext<Field,Fact,Stmt,Method>context; private Synchronizer<Stmt> synchronizer;privateSynchronizer<Stmt>synchronizer; private Debugger<Field, Fact, Stmt, Method> debugger;privateDebugger<Field,Fact,Stmt,Method>debugger;  public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer) {publicSourceStmtAnnotatedMethodAnalyzer(Methodmethod,Context<Field,Fact,Stmt,Method>context,Synchronizer<Stmt>synchronizer){ public SourceStmtAnnotatedMethodAnalyzer(Method method, Context<Field, Fact, Stmt, Method> context, Synchronizer<Stmt> synchronizer, Debugger<Field, Fact, Stmt, Method> debugger) {publicSourceStmtAnnotatedMethodAnalyzer(Methodmethod,Context<Field,Fact,Stmt,Method>context,Synchronizer<Stmt>synchronizer,, DebuggerDebugger<<FieldField,, FactFact,, StmtStmt,, MethodMethod>> debuggerdebugger){ this.method = method;this.method=method; this.context = context;this.context=context; this.synchronizer = synchronizer;this.synchronizer=synchronizer; this.debugger = debugger;this.debugger=debugger; }}  @Override@Override








src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ 7b66dd07






......@@ -16,11 +16,15 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes




















 private ZeroHandler<Field> zeroHandler;





















 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler) {










 super(analyzer);










 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler, Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer, debugger);










 this.zeroHandler = zeroHandler;










 }





















 ZeroCallEdgeResolver<Field, Fact, Stmt, Method> copyWithAnalyzer(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 return new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(analyzer, zeroHandler, debugger);










 }










 










 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 if(zeroHandler.shouldGenerateAccessPath(constraint.applyToAccessPath(new AccessPath<Field>())))



......@@ -28,7 +32,7 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 }










 










 @Override










 public void interest() {










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 }










 










 @Override



......@@ -36,6 +40,11 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 return this;










 }





















 @Override










 public String toString() {










 return "[0-Resolver"+super.toString()+"]";










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;



......












src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ 7b66dd07








src/heros/fieldsens/ZeroCallEdgeResolver.java










View file @ 7b66dd07


7b66dd07



......@@ -16,11 +16,15 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes




















 private ZeroHandler<Field> zeroHandler;





















 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler) {










 super(analyzer);










 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler, Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer, debugger);










 this.zeroHandler = zeroHandler;










 }





















 ZeroCallEdgeResolver<Field, Fact, Stmt, Method> copyWithAnalyzer(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 return new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(analyzer, zeroHandler, debugger);










 }










 










 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 if(zeroHandler.shouldGenerateAccessPath(constraint.applyToAccessPath(new AccessPath<Field>())))



......@@ -28,7 +32,7 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 }










 










 @Override










 public void interest() {










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 }










 










 @Override



......@@ -36,6 +40,11 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 return this;










 }





















 @Override










 public String toString() {










 return "[0-Resolver"+super.toString()+"]";










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;



......






......@@ -16,11 +16,15 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes




















 private ZeroHandler<Field> zeroHandler;





















 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler) {










 super(analyzer);










 public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler, Debugger<Field, Fact, Stmt, Method> debugger) {










 super(analyzer, debugger);










 this.zeroHandler = zeroHandler;










 }





















 ZeroCallEdgeResolver<Field, Fact, Stmt, Method> copyWithAnalyzer(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 return new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(analyzer, zeroHandler, debugger);










 }










 










 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 if(zeroHandler.shouldGenerateAccessPath(constraint.applyToAccessPath(new AccessPath<Field>())))



......@@ -28,7 +32,7 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 }










 










 @Override










 public void interest() {










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 }










 










 @Override



......@@ -36,6 +40,11 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 return this;










 }





















 @Override










 public String toString() {










 return "[0-Resolver"+super.toString()+"]";










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;



......


 private ZeroHandler<Field> zeroHandler;privateZeroHandler<Field>zeroHandler; public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler) {publicZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,ZeroHandler<Field>zeroHandler){ super(analyzer);super(analyzer); public ZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, ZeroHandler<Field> zeroHandler, Debugger<Field, Fact, Stmt, Method> debugger) {publicZeroCallEdgeResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,ZeroHandler<Field>zeroHandler,, DebuggerDebugger<<FieldField,, FactFact,, StmtStmt,, MethodMethod>> debuggerdebugger){ super(analyzer, debugger);super(analyzer,, debuggerdebugger); this.zeroHandler = zeroHandler;this.zeroHandler=zeroHandler; }} ZeroCallEdgeResolver<Field, Fact, Stmt, Method> copyWithAnalyzer(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {ZeroCallEdgeResolver<Field,Fact,Stmt,Method>copyWithAnalyzer(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer){ return new ZeroCallEdgeResolver<Field, Fact, Stmt, Method>(analyzer, zeroHandler, debugger);returnnewZeroCallEdgeResolver<Field,Fact,Stmt,Method>(analyzer,zeroHandler,debugger); }}  @Override@Override public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {publicvoidresolve(Constraint<Field>constraint,InterestCallback<Field,Fact,Stmt,Method>callback){ if(zeroHandler.shouldGenerateAccessPath(constraint.applyToAccessPath(new AccessPath<Field>())))if(zeroHandler.shouldGenerateAccessPath(constraint.applyToAccessPath(newAccessPath<Field>()))) }}  @Override@Override public void interest() {publicvoidinterest(){ public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {publicvoidinterest(ResolverResolver<<FieldField,, FactFact,, StmtStmt,, MethodMethod>> resolverresolver){ }}  @Override@Override return this;returnthis; }} @Override@Override public String toString() {publicStringtoString(){ return "[0-Resolver"+super.toString()+"]";return"[0-Resolver"+super.toString()+"]"; }}  @Override@Override public int hashCode() {publicinthashCode(){ final int prime = 31;finalintprime=31;



Prev


1


2


Next





Prev

1

2

Next











Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview






















Write



Preview











































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel












Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel




Supports Markdown





0%










Try again


or


attach a new file


.




Attach a file




Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Attach a file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






