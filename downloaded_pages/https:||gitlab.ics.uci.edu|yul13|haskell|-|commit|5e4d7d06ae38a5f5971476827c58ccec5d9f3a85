



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


haskell






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Yu Liu haskell
Commits

5e4d7d06















Commit
5e4d7d06


authored
May 25, 2013
by


darlliu



Browse files




fixes







parent
29a5701d













Changes
4




Hide whitespace changes

Inline
Side-by-side















cybert/Cybert.hs








View file @ 5e4d7d06






......@@ -168,9 +168,9 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo









getNums header ss ids = let nums = map (getNum header ss) ids










 in if length nums == 1 then Left (nums !! 0)










 else Right $ filter (not . (== -1)) nums










lineToCybert :: (M.Map String (Maybe Int))->  B.ByteString -> Cybert_entry










lineToCybert :: (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










--take a header and an accumulator, then read the line and append the cybert entry










lineToCybert header line = readLine line where










lineToCybert header fname line = readLine line where










 readLine s = let ss = B.split '\t' s 










 in if length ss /= M.size header then cybert_entry










 else let cybt= cybert_entry {



......@@ -181,6 +181,7 @@ lineToCybert header line = readLine line where









 pval = getNum header ss "pval",










 bf = getNum header ss "bonferroni",










 bh = getNum header ss "bh",










 collection = Just fname,










 --these are -1 defaulted










 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]



......@@ -196,7 +197,8 @@ loadCybert fname = catch









 let mylines = B.split '\n' contents










 if length mylines <= 1 then return Nothing










 else let header = buildHeader (head mylines);










 output = (Just (map (lineToCybert header) (drop 1 mylines)))










 output = (Just (filter (not.isNothing.collection)










 $ map (lineToCybert header fname) (drop 1 mylines)))










 in if output == (Just []) then return Nothing










 else return output










 ))



......@@ -230,6 +232,5 @@ exportProbes xs fname = do









 let contents = unlines (map probe xs)










 hPutStr handle contents










 )





















{-exportRef :: [Cybert_entry] -> String -> String -> IO()-}










{-end IO routines-}














cybert/Makefile



0 â†’ 100644







View file @ 5e4d7d06













# DO NOT DELETE: Beginning of Haskell dependencies










Cybert.o : Cybert.hs










test_cybert.o : test_cybert.hs










test_cybert.o : Cybert.hi










# DO NOT DELETE: End of Haskell dependencies














cybert/Makefile.bak



0 â†’ 100644







View file @ 5e4d7d06













# DO NOT DELETE: Beginning of Haskell dependencies










Cybert.o : Cybert.hs










test_cybert.o : test_cybert.hs










test_cybert.o : Cybert.hi










# DO NOT DELETE: End of Haskell dependencies














cybert/tested.txt








View file @ 5e4d7d06






......@@ -37850,4 +37850,3 @@ STAT1









STAT1










STAT1










STAT1









N/A
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


haskell






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


haskell


H
H
haskell




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Yu Liu haskell
Commits

5e4d7d06















Commit
5e4d7d06


authored
May 25, 2013
by


darlliu



Browse files




fixes







parent
29a5701d













Changes
4




Hide whitespace changes

Inline
Side-by-side















cybert/Cybert.hs








View file @ 5e4d7d06






......@@ -168,9 +168,9 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo









getNums header ss ids = let nums = map (getNum header ss) ids










 in if length nums == 1 then Left (nums !! 0)










 else Right $ filter (not . (== -1)) nums










lineToCybert :: (M.Map String (Maybe Int))->  B.ByteString -> Cybert_entry










lineToCybert :: (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










--take a header and an accumulator, then read the line and append the cybert entry










lineToCybert header line = readLine line where










lineToCybert header fname line = readLine line where










 readLine s = let ss = B.split '\t' s 










 in if length ss /= M.size header then cybert_entry










 else let cybt= cybert_entry {



......@@ -181,6 +181,7 @@ lineToCybert header line = readLine line where









 pval = getNum header ss "pval",










 bf = getNum header ss "bonferroni",










 bh = getNum header ss "bh",










 collection = Just fname,










 --these are -1 defaulted










 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]



......@@ -196,7 +197,8 @@ loadCybert fname = catch









 let mylines = B.split '\n' contents










 if length mylines <= 1 then return Nothing










 else let header = buildHeader (head mylines);










 output = (Just (map (lineToCybert header) (drop 1 mylines)))










 output = (Just (filter (not.isNothing.collection)










 $ map (lineToCybert header fname) (drop 1 mylines)))










 in if output == (Just []) then return Nothing










 else return output










 ))



......@@ -230,6 +232,5 @@ exportProbes xs fname = do









 let contents = unlines (map probe xs)










 hPutStr handle contents










 )





















{-exportRef :: [Cybert_entry] -> String -> String -> IO()-}










{-end IO routines-}














cybert/Makefile



0 â†’ 100644







View file @ 5e4d7d06













# DO NOT DELETE: Beginning of Haskell dependencies










Cybert.o : Cybert.hs










test_cybert.o : test_cybert.hs










test_cybert.o : Cybert.hi










# DO NOT DELETE: End of Haskell dependencies














cybert/Makefile.bak



0 â†’ 100644







View file @ 5e4d7d06













# DO NOT DELETE: Beginning of Haskell dependencies










Cybert.o : Cybert.hs










test_cybert.o : test_cybert.hs










test_cybert.o : Cybert.hi










# DO NOT DELETE: End of Haskell dependencies














cybert/tested.txt








View file @ 5e4d7d06






......@@ -37850,4 +37850,3 @@ STAT1









STAT1










STAT1










STAT1









N/A
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Yu Liu haskell
Commits

5e4d7d06







Open sidebar



Yu Liu haskell
Commits

5e4d7d06




Open sidebar

Yu Liu haskell
Commits

5e4d7d06


Yu LiuhaskellhaskellCommits
5e4d7d06








Commit
5e4d7d06


authored
May 25, 2013
by


darlliu



Browse files




fixes







parent
29a5701d













Changes
4




Hide whitespace changes

Inline
Side-by-side















cybert/Cybert.hs








View file @ 5e4d7d06






......@@ -168,9 +168,9 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo









getNums header ss ids = let nums = map (getNum header ss) ids










 in if length nums == 1 then Left (nums !! 0)










 else Right $ filter (not . (== -1)) nums










lineToCybert :: (M.Map String (Maybe Int))->  B.ByteString -> Cybert_entry










lineToCybert :: (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










--take a header and an accumulator, then read the line and append the cybert entry










lineToCybert header line = readLine line where










lineToCybert header fname line = readLine line where










 readLine s = let ss = B.split '\t' s 










 in if length ss /= M.size header then cybert_entry










 else let cybt= cybert_entry {



......@@ -181,6 +181,7 @@ lineToCybert header line = readLine line where









 pval = getNum header ss "pval",










 bf = getNum header ss "bonferroni",










 bh = getNum header ss "bh",










 collection = Just fname,










 --these are -1 defaulted










 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]



......@@ -196,7 +197,8 @@ loadCybert fname = catch









 let mylines = B.split '\n' contents










 if length mylines <= 1 then return Nothing










 else let header = buildHeader (head mylines);










 output = (Just (map (lineToCybert header) (drop 1 mylines)))










 output = (Just (filter (not.isNothing.collection)










 $ map (lineToCybert header fname) (drop 1 mylines)))










 in if output == (Just []) then return Nothing










 else return output










 ))



......@@ -230,6 +232,5 @@ exportProbes xs fname = do









 let contents = unlines (map probe xs)










 hPutStr handle contents










 )





















{-exportRef :: [Cybert_entry] -> String -> String -> IO()-}










{-end IO routines-}














cybert/Makefile



0 â†’ 100644







View file @ 5e4d7d06













# DO NOT DELETE: Beginning of Haskell dependencies










Cybert.o : Cybert.hs










test_cybert.o : test_cybert.hs










test_cybert.o : Cybert.hi










# DO NOT DELETE: End of Haskell dependencies














cybert/Makefile.bak



0 â†’ 100644







View file @ 5e4d7d06













# DO NOT DELETE: Beginning of Haskell dependencies










Cybert.o : Cybert.hs










test_cybert.o : test_cybert.hs










test_cybert.o : Cybert.hi










# DO NOT DELETE: End of Haskell dependencies














cybert/tested.txt








View file @ 5e4d7d06






......@@ -37850,4 +37850,3 @@ STAT1









STAT1










STAT1










STAT1









N/A
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
5e4d7d06


authored
May 25, 2013
by


darlliu



Browse files




fixes







parent
29a5701d













Changes
4




Hide whitespace changes

Inline
Side-by-side















cybert/Cybert.hs








View file @ 5e4d7d06






......@@ -168,9 +168,9 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo









getNums header ss ids = let nums = map (getNum header ss) ids










 in if length nums == 1 then Left (nums !! 0)










 else Right $ filter (not . (== -1)) nums










lineToCybert :: (M.Map String (Maybe Int))->  B.ByteString -> Cybert_entry










lineToCybert :: (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










--take a header and an accumulator, then read the line and append the cybert entry










lineToCybert header line = readLine line where










lineToCybert header fname line = readLine line where










 readLine s = let ss = B.split '\t' s 










 in if length ss /= M.size header then cybert_entry










 else let cybt= cybert_entry {



......@@ -181,6 +181,7 @@ lineToCybert header line = readLine line where









 pval = getNum header ss "pval",










 bf = getNum header ss "bonferroni",










 bh = getNum header ss "bh",










 collection = Just fname,










 --these are -1 defaulted










 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]



......@@ -196,7 +197,8 @@ loadCybert fname = catch









 let mylines = B.split '\n' contents










 if length mylines <= 1 then return Nothing










 else let header = buildHeader (head mylines);










 output = (Just (map (lineToCybert header) (drop 1 mylines)))










 output = (Just (filter (not.isNothing.collection)










 $ map (lineToCybert header fname) (drop 1 mylines)))










 in if output == (Just []) then return Nothing










 else return output










 ))



......@@ -230,6 +232,5 @@ exportProbes xs fname = do









 let contents = unlines (map probe xs)










 hPutStr handle contents










 )





















{-exportRef :: [Cybert_entry] -> String -> String -> IO()-}










{-end IO routines-}














cybert/Makefile



0 â†’ 100644







View file @ 5e4d7d06













# DO NOT DELETE: Beginning of Haskell dependencies










Cybert.o : Cybert.hs










test_cybert.o : test_cybert.hs










test_cybert.o : Cybert.hi










# DO NOT DELETE: End of Haskell dependencies














cybert/Makefile.bak



0 â†’ 100644







View file @ 5e4d7d06













# DO NOT DELETE: Beginning of Haskell dependencies










Cybert.o : Cybert.hs










test_cybert.o : test_cybert.hs










test_cybert.o : Cybert.hi










# DO NOT DELETE: End of Haskell dependencies














cybert/tested.txt








View file @ 5e4d7d06






......@@ -37850,4 +37850,3 @@ STAT1









STAT1










STAT1










STAT1









N/A
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
5e4d7d06


authored
May 25, 2013
by


darlliu



Browse files



Commit
5e4d7d06


authored
May 25, 2013
by


darlliu

5e4d7d06authoredbydarlliu

fixes






parent
29a5701d
















parent
29a5701d





parent












Changes
4
4


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










cybert/Cybert.hs








View file @ 5e4d7d06






......@@ -168,9 +168,9 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo









getNums header ss ids = let nums = map (getNum header ss) ids










 in if length nums == 1 then Left (nums !! 0)










 else Right $ filter (not . (== -1)) nums










lineToCybert :: (M.Map String (Maybe Int))->  B.ByteString -> Cybert_entry










lineToCybert :: (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










--take a header and an accumulator, then read the line and append the cybert entry










lineToCybert header line = readLine line where










lineToCybert header fname line = readLine line where










 readLine s = let ss = B.split '\t' s 










 in if length ss /= M.size header then cybert_entry










 else let cybt= cybert_entry {



......@@ -181,6 +181,7 @@ lineToCybert header line = readLine line where









 pval = getNum header ss "pval",










 bf = getNum header ss "bonferroni",










 bh = getNum header ss "bh",










 collection = Just fname,










 --these are -1 defaulted










 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]



......@@ -196,7 +197,8 @@ loadCybert fname = catch









 let mylines = B.split '\n' contents










 if length mylines <= 1 then return Nothing










 else let header = buildHeader (head mylines);










 output = (Just (map (lineToCybert header) (drop 1 mylines)))










 output = (Just (filter (not.isNothing.collection)










 $ map (lineToCybert header fname) (drop 1 mylines)))










 in if output == (Just []) then return Nothing










 else return output










 ))



......@@ -230,6 +232,5 @@ exportProbes xs fname = do









 let contents = unlines (map probe xs)










 hPutStr handle contents










 )





















{-exportRef :: [Cybert_entry] -> String -> String -> IO()-}










{-end IO routines-}














cybert/Makefile



0 â†’ 100644







View file @ 5e4d7d06













# DO NOT DELETE: Beginning of Haskell dependencies










Cybert.o : Cybert.hs










test_cybert.o : test_cybert.hs










test_cybert.o : Cybert.hi










# DO NOT DELETE: End of Haskell dependencies














cybert/Makefile.bak



0 â†’ 100644







View file @ 5e4d7d06













# DO NOT DELETE: Beginning of Haskell dependencies










Cybert.o : Cybert.hs










test_cybert.o : test_cybert.hs










test_cybert.o : Cybert.hi










# DO NOT DELETE: End of Haskell dependencies














cybert/tested.txt








View file @ 5e4d7d06






......@@ -37850,4 +37850,3 @@ STAT1









STAT1










STAT1










STAT1









N/A














cybert/Cybert.hs








View file @ 5e4d7d06






......@@ -168,9 +168,9 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo









getNums header ss ids = let nums = map (getNum header ss) ids










 in if length nums == 1 then Left (nums !! 0)










 else Right $ filter (not . (== -1)) nums










lineToCybert :: (M.Map String (Maybe Int))->  B.ByteString -> Cybert_entry










lineToCybert :: (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










--take a header and an accumulator, then read the line and append the cybert entry










lineToCybert header line = readLine line where










lineToCybert header fname line = readLine line where










 readLine s = let ss = B.split '\t' s 










 in if length ss /= M.size header then cybert_entry










 else let cybt= cybert_entry {



......@@ -181,6 +181,7 @@ lineToCybert header line = readLine line where









 pval = getNum header ss "pval",










 bf = getNum header ss "bonferroni",










 bh = getNum header ss "bh",










 collection = Just fname,










 --these are -1 defaulted










 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]



......@@ -196,7 +197,8 @@ loadCybert fname = catch









 let mylines = B.split '\n' contents










 if length mylines <= 1 then return Nothing










 else let header = buildHeader (head mylines);










 output = (Just (map (lineToCybert header) (drop 1 mylines)))










 output = (Just (filter (not.isNothing.collection)










 $ map (lineToCybert header fname) (drop 1 mylines)))










 in if output == (Just []) then return Nothing










 else return output










 ))



......@@ -230,6 +232,5 @@ exportProbes xs fname = do









 let contents = unlines (map probe xs)










 hPutStr handle contents










 )





















{-exportRef :: [Cybert_entry] -> String -> String -> IO()-}










{-end IO routines-}












cybert/Cybert.hs








View file @ 5e4d7d06








cybert/Cybert.hs










View file @ 5e4d7d06


5e4d7d06



......@@ -168,9 +168,9 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo









getNums header ss ids = let nums = map (getNum header ss) ids










 in if length nums == 1 then Left (nums !! 0)










 else Right $ filter (not . (== -1)) nums










lineToCybert :: (M.Map String (Maybe Int))->  B.ByteString -> Cybert_entry










lineToCybert :: (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










--take a header and an accumulator, then read the line and append the cybert entry










lineToCybert header line = readLine line where










lineToCybert header fname line = readLine line where










 readLine s = let ss = B.split '\t' s 










 in if length ss /= M.size header then cybert_entry










 else let cybt= cybert_entry {



......@@ -181,6 +181,7 @@ lineToCybert header line = readLine line where









 pval = getNum header ss "pval",










 bf = getNum header ss "bonferroni",










 bh = getNum header ss "bh",










 collection = Just fname,










 --these are -1 defaulted










 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]



......@@ -196,7 +197,8 @@ loadCybert fname = catch









 let mylines = B.split '\n' contents










 if length mylines <= 1 then return Nothing










 else let header = buildHeader (head mylines);










 output = (Just (map (lineToCybert header) (drop 1 mylines)))










 output = (Just (filter (not.isNothing.collection)










 $ map (lineToCybert header fname) (drop 1 mylines)))










 in if output == (Just []) then return Nothing










 else return output










 ))



......@@ -230,6 +232,5 @@ exportProbes xs fname = do









 let contents = unlines (map probe xs)










 hPutStr handle contents










 )





















{-exportRef :: [Cybert_entry] -> String -> String -> IO()-}










{-end IO routines-}






......@@ -168,9 +168,9 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo









getNums header ss ids = let nums = map (getNum header ss) ids










 in if length nums == 1 then Left (nums !! 0)










 else Right $ filter (not . (== -1)) nums










lineToCybert :: (M.Map String (Maybe Int))->  B.ByteString -> Cybert_entry










lineToCybert :: (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entry










--take a header and an accumulator, then read the line and append the cybert entry










lineToCybert header line = readLine line where










lineToCybert header fname line = readLine line where










 readLine s = let ss = B.split '\t' s 










 in if length ss /= M.size header then cybert_entry










 else let cybt= cybert_entry {



......@@ -181,6 +181,7 @@ lineToCybert header line = readLine line where









 pval = getNum header ss "pval",










 bf = getNum header ss "bonferroni",










 bh = getNum header ss "bh",










 collection = Just fname,










 --these are -1 defaulted










 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],










 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]



......@@ -196,7 +197,8 @@ loadCybert fname = catch









 let mylines = B.split '\n' contents










 if length mylines <= 1 then return Nothing










 else let header = buildHeader (head mylines);










 output = (Just (map (lineToCybert header) (drop 1 mylines)))










 output = (Just (filter (not.isNothing.collection)










 $ map (lineToCybert header fname) (drop 1 mylines)))










 in if output == (Just []) then return Nothing










 else return output










 ))



......@@ -230,6 +232,5 @@ exportProbes xs fname = do









 let contents = unlines (map probe xs)










 hPutStr handle contents










 )





















{-exportRef :: [Cybert_entry] -> String -> String -> IO()-}










{-end IO routines-}


getNums header ss ids = let nums = map (getNum header ss) idsgetNumsheaderssids=letnums=map(getNumheaderss)ids in if length nums == 1 then Left (nums !! 0)iniflengthnums==1thenLeft(nums!!0) else Right $ filter (not . (== -1)) numselseRight$filter(not.(==-1))numslineToCybert :: (M.Map String (Maybe Int))->  B.ByteString -> Cybert_entrylineToCybert::(M.MapString(MaybeInt))-> B.ByteString->Cybert_entrylineToCybert :: (M.Map String (Maybe Int))-> String ->B.ByteString -> Cybert_entrylineToCybert::(M.MapString(MaybeInt))->StringString ->->B.ByteString->Cybert_entry--take a header and an accumulator, then read the line and append the cybert entry--take a header and an accumulator, then read the line and append the cybert entrylineToCybert header line = readLine line wherelineToCybertheaderline=readLinelinewherelineToCybert header fname line = readLine line wherelineToCybertheaderfnamefname line=readLinelinewhere readLine s = let ss = B.split '\t' s readLines=letss=B.split'\t's in if length ss /= M.size header then cybert_entryiniflengthss/=M.sizeheaderthencybert_entry else let cybt= cybert_entry {elseletcybt=cybert_entry{ pval = getNum header ss "pval",pval=getNumheaderss"pval", bf = getNum header ss "bonferroni",bf=getNumheaderss"bonferroni", bh = getNum header ss "bh",bh=getNumheaderss"bh", collection = Just fname,collection=Justfname, --these are -1 defaulted--these are -1 defaulted mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],mean=getNumsheaderss$map("mean"++)["c","e","1","2","3","4","5","6","7"], sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]sds=getNumsheaderss$map("std"++)["c","e","1","2","3","4","5","6","7"] let mylines = B.split '\n' contentsletmylines=B.split'\n'contents if length mylines <= 1 then return Nothingiflengthmylines<=1thenreturnNothing else let header = buildHeader (head mylines);elseletheader=buildHeader(headmylines); output = (Just (map (lineToCybert header) (drop 1 mylines)))output=(Just(map(lineToCybertheader)(drop1mylines))) output = (Just (filter (not.isNothing.collection)output=(Just(filter(not.isNothing.collection) $ map (lineToCybert header fname) (drop 1 mylines)))$map(lineToCybertheaderfname)(drop1mylines))) in if output == (Just []) then return Nothinginifoutput==(Just[])thenreturnNothing else return outputelsereturnoutput )))) let contents = unlines (map probe xs)letcontents=unlines(mapprobexs) hPutStr handle contentshPutStrhandlecontents )){-exportRef :: [Cybert_entry] -> String -> String -> IO()-}{-exportRef :: [Cybert_entry] -> String -> String -> IO()-}{-end IO routines-}{-end IO routines-}








cybert/Makefile



0 â†’ 100644







View file @ 5e4d7d06













# DO NOT DELETE: Beginning of Haskell dependencies










Cybert.o : Cybert.hs










test_cybert.o : test_cybert.hs










test_cybert.o : Cybert.hi










# DO NOT DELETE: End of Haskell dependencies












cybert/Makefile



0 â†’ 100644







View file @ 5e4d7d06








cybert/Makefile



0 â†’ 100644









View file @ 5e4d7d06


5e4d7d06










# DO NOT DELETE: Beginning of Haskell dependencies










Cybert.o : Cybert.hs










test_cybert.o : test_cybert.hs










test_cybert.o : Cybert.hi










# DO NOT DELETE: End of Haskell dependencies













# DO NOT DELETE: Beginning of Haskell dependencies










Cybert.o : Cybert.hs










test_cybert.o : test_cybert.hs










test_cybert.o : Cybert.hi










# DO NOT DELETE: End of Haskell dependencies


# DO NOT DELETE: Beginning of Haskell dependencies# DO NOT DELETE: Beginning of Haskell dependenciesCybert.o : Cybert.hsCybert.o :Cybert.hstest_cybert.o : test_cybert.hstest_cybert.o :test_cybert.hstest_cybert.o : Cybert.hitest_cybert.o :Cybert.hi# DO NOT DELETE: End of Haskell dependencies# DO NOT DELETE: End of Haskell dependencies








cybert/Makefile.bak



0 â†’ 100644







View file @ 5e4d7d06













# DO NOT DELETE: Beginning of Haskell dependencies










Cybert.o : Cybert.hs










test_cybert.o : test_cybert.hs










test_cybert.o : Cybert.hi










# DO NOT DELETE: End of Haskell dependencies












cybert/Makefile.bak



0 â†’ 100644







View file @ 5e4d7d06








cybert/Makefile.bak



0 â†’ 100644









View file @ 5e4d7d06


5e4d7d06










# DO NOT DELETE: Beginning of Haskell dependencies










Cybert.o : Cybert.hs










test_cybert.o : test_cybert.hs










test_cybert.o : Cybert.hi










# DO NOT DELETE: End of Haskell dependencies













# DO NOT DELETE: Beginning of Haskell dependencies










Cybert.o : Cybert.hs










test_cybert.o : test_cybert.hs










test_cybert.o : Cybert.hi










# DO NOT DELETE: End of Haskell dependencies


# DO NOT DELETE: Beginning of Haskell dependencies# DO NOT DELETE: Beginning of Haskell dependenciesCybert.o : Cybert.hsCybert.o :Cybert.hstest_cybert.o : test_cybert.hstest_cybert.o :test_cybert.hstest_cybert.o : Cybert.hitest_cybert.o :Cybert.hi# DO NOT DELETE: End of Haskell dependencies# DO NOT DELETE: End of Haskell dependencies








cybert/tested.txt








View file @ 5e4d7d06






......@@ -37850,4 +37850,3 @@ STAT1









STAT1










STAT1










STAT1









N/A












cybert/tested.txt








View file @ 5e4d7d06








cybert/tested.txt










View file @ 5e4d7d06


5e4d7d06



......@@ -37850,4 +37850,3 @@ STAT1









STAT1










STAT1










STAT1









N/A






......@@ -37850,4 +37850,3 @@ STAT1









STAT1










STAT1










STAT1









N/A


STAT1STAT1STAT1N/A









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






