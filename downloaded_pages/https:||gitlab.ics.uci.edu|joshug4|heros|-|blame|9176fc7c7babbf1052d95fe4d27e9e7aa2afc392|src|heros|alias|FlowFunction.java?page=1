



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros

9176fc7c7babbf1052d95fe4d27e9e7aa2afc392

















9176fc7c7babbf1052d95fe4d27e9e7aa2afc392


Switch branch/tag










heros


src


heros


alias


FlowFunction.java



Find file
Normal viewHistoryPermalink






FlowFunction.java



3.61 KB









Newer










Older









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




/*******************************************************************************
 * Copyright (c) 2012 Eric Bodden.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Eric Bodden - initial API and implementation
 ******************************************************************************/
package heros.alias;

import heros.alias.FieldReference.SpecificFieldReference;

import java.util.LinkedHashSet;
import java.util.Set;

/**
 * A flow function computes which of the finitely many D-type values are reachable
 * from the current source values. Typically there will be one such function
 * associated with every possible control flow. 
 * 
 * <b>NOTE:</b> To be able to produce <b>deterministic benchmarking results</b>, we have found that
 * it helps to return {@link LinkedHashSet}s from {@link #computeTargets(Object)}. This is
 * because the duration of IDE's fixed point iteration may depend on the iteration order.
 * Within the solver, we have tried to fix this order as much as possible, but the
 * order, in general, does also depend on the order in which the result set
 * of {@link #computeTargets(Object)} is traversed.
 * 
 * <b>NOTE:</b> Methods defined on this type may be called simultaneously by different threads.
 * Hence, classes implementing this interface should synchronize accesses to
 * any mutable shared state.
 * 
 * @param <D> The type of data-flow facts to be computed by the tabulation problem.
 */
public interface FlowFunction<D extends FieldSensitiveFact<?, D>> {

	/**
	 * Returns the target values reachable from the source.
	 */
	Set<AnnotatedFact<D>> computeTargets(D source);
	
	public static class AnnotatedFact<D extends FieldSensitiveFact<?, D>> {
		
		private D fact;
		private FieldReference readField;
		private FieldReference writtenField;
		
		//TODO: Refactor API to make things more intuitive
		/**
		 * 
		 * @param fact
		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value
		 * @param writtenField
		 */
		public AnnotatedFact(D fact, FieldReference readField, FieldReference writtenField) {
			this.fact = fact;
			this.readField = readField;
			this.writtenField = writtenField;
		}
		
		public D getFact() {
			return fact;
		}
		
		public FieldReference getReadField() {
			return readField;
		}
		
		public FieldReference getWrittenField() {
			return writtenField;
		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + ((fact == null) ? 0 : fact.hashCode());
			result = prime * result + ((readField == null) ? 0 : readField.hashCode());
			result = prime * result + ((writtenField == null) ? 0 : writtenField.hashCode());
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (!(obj instanceof AnnotatedFact))
				return false;
			AnnotatedFact other = (AnnotatedFact) obj;
			if (fact == null) {
				if (other.fact != null)
					return false;
			} else if (!fact.equals(other.fact))
				return false;
			if (readField == null) {
				if (other.readField != null)
					return false;
			} else if (!readField.equals(other.readField))
				return false;
			if (writtenField == null) {
				if (other.writtenField != null)
					return false;
			} else if (!writtenField.equals(other.writtenField))
				return false;
			return true;
		}
	}
}












H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros

9176fc7c7babbf1052d95fe4d27e9e7aa2afc392

















9176fc7c7babbf1052d95fe4d27e9e7aa2afc392


Switch branch/tag










heros


src


heros


alias


FlowFunction.java



Find file
Normal viewHistoryPermalink






FlowFunction.java



3.61 KB









Newer










Older









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




/*******************************************************************************
 * Copyright (c) 2012 Eric Bodden.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Eric Bodden - initial API and implementation
 ******************************************************************************/
package heros.alias;

import heros.alias.FieldReference.SpecificFieldReference;

import java.util.LinkedHashSet;
import java.util.Set;

/**
 * A flow function computes which of the finitely many D-type values are reachable
 * from the current source values. Typically there will be one such function
 * associated with every possible control flow. 
 * 
 * <b>NOTE:</b> To be able to produce <b>deterministic benchmarking results</b>, we have found that
 * it helps to return {@link LinkedHashSet}s from {@link #computeTargets(Object)}. This is
 * because the duration of IDE's fixed point iteration may depend on the iteration order.
 * Within the solver, we have tried to fix this order as much as possible, but the
 * order, in general, does also depend on the order in which the result set
 * of {@link #computeTargets(Object)} is traversed.
 * 
 * <b>NOTE:</b> Methods defined on this type may be called simultaneously by different threads.
 * Hence, classes implementing this interface should synchronize accesses to
 * any mutable shared state.
 * 
 * @param <D> The type of data-flow facts to be computed by the tabulation problem.
 */
public interface FlowFunction<D extends FieldSensitiveFact<?, D>> {

	/**
	 * Returns the target values reachable from the source.
	 */
	Set<AnnotatedFact<D>> computeTargets(D source);
	
	public static class AnnotatedFact<D extends FieldSensitiveFact<?, D>> {
		
		private D fact;
		private FieldReference readField;
		private FieldReference writtenField;
		
		//TODO: Refactor API to make things more intuitive
		/**
		 * 
		 * @param fact
		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value
		 * @param writtenField
		 */
		public AnnotatedFact(D fact, FieldReference readField, FieldReference writtenField) {
			this.fact = fact;
			this.readField = readField;
			this.writtenField = writtenField;
		}
		
		public D getFact() {
			return fact;
		}
		
		public FieldReference getReadField() {
			return readField;
		}
		
		public FieldReference getWrittenField() {
			return writtenField;
		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + ((fact == null) ? 0 : fact.hashCode());
			result = prime * result + ((readField == null) ? 0 : readField.hashCode());
			result = prime * result + ((writtenField == null) ? 0 : writtenField.hashCode());
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (!(obj instanceof AnnotatedFact))
				return false;
			AnnotatedFact other = (AnnotatedFact) obj;
			if (fact == null) {
				if (other.fact != null)
					return false;
			} else if (!fact.equals(other.fact))
				return false;
			if (readField == null) {
				if (other.readField != null)
					return false;
			} else if (!readField.equals(other.readField))
				return false;
			if (writtenField == null) {
				if (other.writtenField != null)
					return false;
			} else if (!writtenField.equals(other.writtenField))
				return false;
			return true;
		}
	}
}











Open sidebar



Joshua Garcia heros

9176fc7c7babbf1052d95fe4d27e9e7aa2afc392







Open sidebar



Joshua Garcia heros

9176fc7c7babbf1052d95fe4d27e9e7aa2afc392




Open sidebar

Joshua Garcia heros

9176fc7c7babbf1052d95fe4d27e9e7aa2afc392


Joshua Garciaherosheros
9176fc7c7babbf1052d95fe4d27e9e7aa2afc392










9176fc7c7babbf1052d95fe4d27e9e7aa2afc392


Switch branch/tag










heros


src


heros


alias


FlowFunction.java



Find file
Normal viewHistoryPermalink






FlowFunction.java



3.61 KB









Newer










Older









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




/*******************************************************************************
 * Copyright (c) 2012 Eric Bodden.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Eric Bodden - initial API and implementation
 ******************************************************************************/
package heros.alias;

import heros.alias.FieldReference.SpecificFieldReference;

import java.util.LinkedHashSet;
import java.util.Set;

/**
 * A flow function computes which of the finitely many D-type values are reachable
 * from the current source values. Typically there will be one such function
 * associated with every possible control flow. 
 * 
 * <b>NOTE:</b> To be able to produce <b>deterministic benchmarking results</b>, we have found that
 * it helps to return {@link LinkedHashSet}s from {@link #computeTargets(Object)}. This is
 * because the duration of IDE's fixed point iteration may depend on the iteration order.
 * Within the solver, we have tried to fix this order as much as possible, but the
 * order, in general, does also depend on the order in which the result set
 * of {@link #computeTargets(Object)} is traversed.
 * 
 * <b>NOTE:</b> Methods defined on this type may be called simultaneously by different threads.
 * Hence, classes implementing this interface should synchronize accesses to
 * any mutable shared state.
 * 
 * @param <D> The type of data-flow facts to be computed by the tabulation problem.
 */
public interface FlowFunction<D extends FieldSensitiveFact<?, D>> {

	/**
	 * Returns the target values reachable from the source.
	 */
	Set<AnnotatedFact<D>> computeTargets(D source);
	
	public static class AnnotatedFact<D extends FieldSensitiveFact<?, D>> {
		
		private D fact;
		private FieldReference readField;
		private FieldReference writtenField;
		
		//TODO: Refactor API to make things more intuitive
		/**
		 * 
		 * @param fact
		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value
		 * @param writtenField
		 */
		public AnnotatedFact(D fact, FieldReference readField, FieldReference writtenField) {
			this.fact = fact;
			this.readField = readField;
			this.writtenField = writtenField;
		}
		
		public D getFact() {
			return fact;
		}
		
		public FieldReference getReadField() {
			return readField;
		}
		
		public FieldReference getWrittenField() {
			return writtenField;
		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + ((fact == null) ? 0 : fact.hashCode());
			result = prime * result + ((readField == null) ? 0 : readField.hashCode());
			result = prime * result + ((writtenField == null) ? 0 : writtenField.hashCode());
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (!(obj instanceof AnnotatedFact))
				return false;
			AnnotatedFact other = (AnnotatedFact) obj;
			if (fact == null) {
				if (other.fact != null)
					return false;
			} else if (!fact.equals(other.fact))
				return false;
			if (readField == null) {
				if (other.readField != null)
					return false;
			} else if (!readField.equals(other.readField))
				return false;
			if (writtenField == null) {
				if (other.writtenField != null)
					return false;
			} else if (!writtenField.equals(other.writtenField))
				return false;
			return true;
		}
	}
}














9176fc7c7babbf1052d95fe4d27e9e7aa2afc392


Switch branch/tag










heros


src


heros


alias


FlowFunction.java



Find file
Normal viewHistoryPermalink






FlowFunction.java



3.61 KB









Newer










Older









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




/*******************************************************************************
 * Copyright (c) 2012 Eric Bodden.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Eric Bodden - initial API and implementation
 ******************************************************************************/
package heros.alias;

import heros.alias.FieldReference.SpecificFieldReference;

import java.util.LinkedHashSet;
import java.util.Set;

/**
 * A flow function computes which of the finitely many D-type values are reachable
 * from the current source values. Typically there will be one such function
 * associated with every possible control flow. 
 * 
 * <b>NOTE:</b> To be able to produce <b>deterministic benchmarking results</b>, we have found that
 * it helps to return {@link LinkedHashSet}s from {@link #computeTargets(Object)}. This is
 * because the duration of IDE's fixed point iteration may depend on the iteration order.
 * Within the solver, we have tried to fix this order as much as possible, but the
 * order, in general, does also depend on the order in which the result set
 * of {@link #computeTargets(Object)} is traversed.
 * 
 * <b>NOTE:</b> Methods defined on this type may be called simultaneously by different threads.
 * Hence, classes implementing this interface should synchronize accesses to
 * any mutable shared state.
 * 
 * @param <D> The type of data-flow facts to be computed by the tabulation problem.
 */
public interface FlowFunction<D extends FieldSensitiveFact<?, D>> {

	/**
	 * Returns the target values reachable from the source.
	 */
	Set<AnnotatedFact<D>> computeTargets(D source);
	
	public static class AnnotatedFact<D extends FieldSensitiveFact<?, D>> {
		
		private D fact;
		private FieldReference readField;
		private FieldReference writtenField;
		
		//TODO: Refactor API to make things more intuitive
		/**
		 * 
		 * @param fact
		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value
		 * @param writtenField
		 */
		public AnnotatedFact(D fact, FieldReference readField, FieldReference writtenField) {
			this.fact = fact;
			this.readField = readField;
			this.writtenField = writtenField;
		}
		
		public D getFact() {
			return fact;
		}
		
		public FieldReference getReadField() {
			return readField;
		}
		
		public FieldReference getWrittenField() {
			return writtenField;
		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + ((fact == null) ? 0 : fact.hashCode());
			result = prime * result + ((readField == null) ? 0 : readField.hashCode());
			result = prime * result + ((writtenField == null) ? 0 : writtenField.hashCode());
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (!(obj instanceof AnnotatedFact))
				return false;
			AnnotatedFact other = (AnnotatedFact) obj;
			if (fact == null) {
				if (other.fact != null)
					return false;
			} else if (!fact.equals(other.fact))
				return false;
			if (readField == null) {
				if (other.readField != null)
					return false;
			} else if (!readField.equals(other.readField))
				return false;
			if (writtenField == null) {
				if (other.writtenField != null)
					return false;
			} else if (!writtenField.equals(other.writtenField))
				return false;
			return true;
		}
	}
}










9176fc7c7babbf1052d95fe4d27e9e7aa2afc392


Switch branch/tag










heros


src


heros


alias


FlowFunction.java



Find file
Normal viewHistoryPermalink




9176fc7c7babbf1052d95fe4d27e9e7aa2afc392


Switch branch/tag










heros


src


heros


alias


FlowFunction.java





9176fc7c7babbf1052d95fe4d27e9e7aa2afc392


Switch branch/tag








9176fc7c7babbf1052d95fe4d27e9e7aa2afc392


Switch branch/tag





9176fc7c7babbf1052d95fe4d27e9e7aa2afc392

Switch branch/tag





Switch branch/tag



Switch branch/tagSwitch branch/tag
heros

src

heros

alias

FlowFunction.java
Find file
Normal viewHistoryPermalink




FlowFunction.java



3.61 KB









Newer










Older









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




/*******************************************************************************
 * Copyright (c) 2012 Eric Bodden.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Eric Bodden - initial API and implementation
 ******************************************************************************/
package heros.alias;

import heros.alias.FieldReference.SpecificFieldReference;

import java.util.LinkedHashSet;
import java.util.Set;

/**
 * A flow function computes which of the finitely many D-type values are reachable
 * from the current source values. Typically there will be one such function
 * associated with every possible control flow. 
 * 
 * <b>NOTE:</b> To be able to produce <b>deterministic benchmarking results</b>, we have found that
 * it helps to return {@link LinkedHashSet}s from {@link #computeTargets(Object)}. This is
 * because the duration of IDE's fixed point iteration may depend on the iteration order.
 * Within the solver, we have tried to fix this order as much as possible, but the
 * order, in general, does also depend on the order in which the result set
 * of {@link #computeTargets(Object)} is traversed.
 * 
 * <b>NOTE:</b> Methods defined on this type may be called simultaneously by different threads.
 * Hence, classes implementing this interface should synchronize accesses to
 * any mutable shared state.
 * 
 * @param <D> The type of data-flow facts to be computed by the tabulation problem.
 */
public interface FlowFunction<D extends FieldSensitiveFact<?, D>> {

	/**
	 * Returns the target values reachable from the source.
	 */
	Set<AnnotatedFact<D>> computeTargets(D source);
	
	public static class AnnotatedFact<D extends FieldSensitiveFact<?, D>> {
		
		private D fact;
		private FieldReference readField;
		private FieldReference writtenField;
		
		//TODO: Refactor API to make things more intuitive
		/**
		 * 
		 * @param fact
		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value
		 * @param writtenField
		 */
		public AnnotatedFact(D fact, FieldReference readField, FieldReference writtenField) {
			this.fact = fact;
			this.readField = readField;
			this.writtenField = writtenField;
		}
		
		public D getFact() {
			return fact;
		}
		
		public FieldReference getReadField() {
			return readField;
		}
		
		public FieldReference getWrittenField() {
			return writtenField;
		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + ((fact == null) ? 0 : fact.hashCode());
			result = prime * result + ((readField == null) ? 0 : readField.hashCode());
			result = prime * result + ((writtenField == null) ? 0 : writtenField.hashCode());
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (!(obj instanceof AnnotatedFact))
				return false;
			AnnotatedFact other = (AnnotatedFact) obj;
			if (fact == null) {
				if (other.fact != null)
					return false;
			} else if (!fact.equals(other.fact))
				return false;
			if (readField == null) {
				if (other.readField != null)
					return false;
			} else if (!readField.equals(other.readField))
				return false;
			if (writtenField == null) {
				if (other.writtenField != null)
					return false;
			} else if (!writtenField.equals(other.writtenField))
				return false;
			return true;
		}
	}
}








FlowFunction.java



3.61 KB










FlowFunction.java



3.61 KB









Newer










Older
NewerOlder







annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




63




64




65




66




67




68




69




70




71




72




73




74




75




76




77




78




79




80




81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




98




99




100




101




102




103




104




105




106




107




108




109




110




111




/*******************************************************************************
 * Copyright (c) 2012 Eric Bodden.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Eric Bodden - initial API and implementation
 ******************************************************************************/
package heros.alias;

import heros.alias.FieldReference.SpecificFieldReference;

import java.util.LinkedHashSet;
import java.util.Set;

/**
 * A flow function computes which of the finitely many D-type values are reachable
 * from the current source values. Typically there will be one such function
 * associated with every possible control flow. 
 * 
 * <b>NOTE:</b> To be able to produce <b>deterministic benchmarking results</b>, we have found that
 * it helps to return {@link LinkedHashSet}s from {@link #computeTargets(Object)}. This is
 * because the duration of IDE's fixed point iteration may depend on the iteration order.
 * Within the solver, we have tried to fix this order as much as possible, but the
 * order, in general, does also depend on the order in which the result set
 * of {@link #computeTargets(Object)} is traversed.
 * 
 * <b>NOTE:</b> Methods defined on this type may be called simultaneously by different threads.
 * Hence, classes implementing this interface should synchronize accesses to
 * any mutable shared state.
 * 
 * @param <D> The type of data-flow facts to be computed by the tabulation problem.
 */
public interface FlowFunction<D extends FieldSensitiveFact<?, D>> {

	/**
	 * Returns the target values reachable from the source.
	 */
	Set<AnnotatedFact<D>> computeTargets(D source);
	
	public static class AnnotatedFact<D extends FieldSensitiveFact<?, D>> {
		
		private D fact;
		private FieldReference readField;
		private FieldReference writtenField;
		
		//TODO: Refactor API to make things more intuitive
		/**
		 * 
		 * @param fact
		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value
		 * @param writtenField
		 */
		public AnnotatedFact(D fact, FieldReference readField, FieldReference writtenField) {
			this.fact = fact;
			this.readField = readField;
			this.writtenField = writtenField;
		}
		
		public D getFact() {
			return fact;
		}
		
		public FieldReference getReadField() {
			return readField;
		}
		
		public FieldReference getWrittenField() {
			return writtenField;
		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + ((fact == null) ? 0 : fact.hashCode());
			result = prime * result + ((readField == null) ? 0 : readField.hashCode());
			result = prime * result + ((writtenField == null) ? 0 : writtenField.hashCode());
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (!(obj instanceof AnnotatedFact))
				return false;
			AnnotatedFact other = (AnnotatedFact) obj;
			if (fact == null) {
				if (other.fact != null)
					return false;
			} else if (!fact.equals(other.fact))
				return false;
			if (readField == null) {
				if (other.readField != null)
					return false;
			} else if (!readField.equals(other.readField))
				return false;
			if (writtenField == null) {
				if (other.writtenField != null)
					return false;
			} else if (!writtenField.equals(other.writtenField))
				return false;
			return true;
		}
	}
}







annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014



annotated facts (WIP)



 

annotated facts (WIP)


Johannes Lerch
committed
Nov 13, 2014

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

28

29

30

31

32

33

34

35

36

37

38

39

40

41

42

43

44

45

46

47

48

49

50

51

52

53

54

55

56

57

58

59

60

61

62

63

64

65

66

67

68

69

70

71

72

73

74

75

76

77

78

79

80

81

82

83

84

85

86

87

88

89

90

91

92

93

94

95

96

97

98

99

100

101

102

103

104

105

106

107

108

109

110

111
/*******************************************************************************/******************************************************************************* * Copyright (c) 2012 Eric Bodden. * Copyright (c) 2012 Eric Bodden. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Eric Bodden - initial API and implementation *     Eric Bodden - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;import heros.alias.FieldReference.SpecificFieldReference;importheros.alias.FieldReference.SpecificFieldReference;import java.util.LinkedHashSet;importjava.util.LinkedHashSet;import java.util.Set;importjava.util.Set;/**/** * A flow function computes which of the finitely many D-type values are reachable * A flow function computes which of the finitely many D-type values are reachable * from the current source values. Typically there will be one such function * from the current source values. Typically there will be one such function * associated with every possible control flow.  * associated with every possible control flow.  *  *  * <b>NOTE:</b> To be able to produce <b>deterministic benchmarking results</b>, we have found that * <b>NOTE:</b> To be able to produce <b>deterministic benchmarking results</b>, we have found that * it helps to return {@link LinkedHashSet}s from {@link #computeTargets(Object)}. This is * it helps to return {@link LinkedHashSet}s from {@link #computeTargets(Object)}. This is * because the duration of IDE's fixed point iteration may depend on the iteration order. * because the duration of IDE's fixed point iteration may depend on the iteration order. * Within the solver, we have tried to fix this order as much as possible, but the * Within the solver, we have tried to fix this order as much as possible, but the * order, in general, does also depend on the order in which the result set * order, in general, does also depend on the order in which the result set * of {@link #computeTargets(Object)} is traversed. * of {@link #computeTargets(Object)} is traversed. *  *  * <b>NOTE:</b> Methods defined on this type may be called simultaneously by different threads. * <b>NOTE:</b> Methods defined on this type may be called simultaneously by different threads. * Hence, classes implementing this interface should synchronize accesses to * Hence, classes implementing this interface should synchronize accesses to * any mutable shared state. * any mutable shared state. *  *  * @param <D> The type of data-flow facts to be computed by the tabulation problem. * @param <D> The type of data-flow facts to be computed by the tabulation problem. */ */public interface FlowFunction<D extends FieldSensitiveFact<?, D>> {publicinterfaceFlowFunction<DextendsFieldSensitiveFact<?,D>>{	/**/**	 * Returns the target values reachable from the source.	 * Returns the target values reachable from the source.	 */	 */	Set<AnnotatedFact<D>> computeTargets(D source);Set<AnnotatedFact<D>>computeTargets(Dsource);		public static class AnnotatedFact<D extends FieldSensitiveFact<?, D>> {publicstaticclassAnnotatedFact<DextendsFieldSensitiveFact<?,D>>{				private D fact;privateDfact;		private FieldReference readField;privateFieldReferencereadField;		private FieldReference writtenField;privateFieldReferencewrittenField;				//TODO: Refactor API to make things more intuitive//TODO: Refactor API to make things more intuitive		/**/**		 * 		 * 		 * @param fact		 * @param fact		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value		 * @param writtenField		 * @param writtenField		 */		 */		public AnnotatedFact(D fact, FieldReference readField, FieldReference writtenField) {publicAnnotatedFact(Dfact,FieldReferencereadField,FieldReferencewrittenField){			this.fact = fact;this.fact=fact;			this.readField = readField;this.readField=readField;			this.writtenField = writtenField;this.writtenField=writtenField;		}}				public D getFact() {publicDgetFact(){			return fact;returnfact;		}}				public FieldReference getReadField() {publicFieldReferencegetReadField(){			return readField;returnreadField;		}}				public FieldReference getWrittenField() {publicFieldReferencegetWrittenField(){			return writtenField;returnwrittenField;		}}		@Override@Override		public int hashCode() {publicinthashCode(){			final int prime = 31;finalintprime=31;			int result = 1;intresult=1;			result = prime * result + ((fact == null) ? 0 : fact.hashCode());result=prime*result+((fact==null)?0:fact.hashCode());			result = prime * result + ((readField == null) ? 0 : readField.hashCode());result=prime*result+((readField==null)?0:readField.hashCode());			result = prime * result + ((writtenField == null) ? 0 : writtenField.hashCode());result=prime*result+((writtenField==null)?0:writtenField.hashCode());			return result;returnresult;		}}		@Override@Override		public boolean equals(Object obj) {publicbooleanequals(Objectobj){			if (this == obj)if(this==obj)				return true;returntrue;			if (obj == null)if(obj==null)				return false;returnfalse;			if (!(obj instanceof AnnotatedFact))if(!(objinstanceofAnnotatedFact))				return false;returnfalse;			AnnotatedFact other = (AnnotatedFact) obj;AnnotatedFactother=(AnnotatedFact)obj;			if (fact == null) {if(fact==null){				if (other.fact != null)if(other.fact!=null)					return false;returnfalse;			} else if (!fact.equals(other.fact))}elseif(!fact.equals(other.fact))				return false;returnfalse;			if (readField == null) {if(readField==null){				if (other.readField != null)if(other.readField!=null)					return false;returnfalse;			} else if (!readField.equals(other.readField))}elseif(!readField.equals(other.readField))				return false;returnfalse;			if (writtenField == null) {if(writtenField==null){				if (other.writtenField != null)if(other.writtenField!=null)					return false;returnfalse;			} else if (!writtenField.equals(other.writtenField))}elseif(!writtenField.equals(other.writtenField))				return false;returnfalse;			return true;returntrue;		}}	}}}}





