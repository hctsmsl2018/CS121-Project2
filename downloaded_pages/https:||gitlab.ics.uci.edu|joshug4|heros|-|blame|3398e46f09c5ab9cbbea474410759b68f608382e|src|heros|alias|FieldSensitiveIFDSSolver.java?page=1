



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros

3398e46f09c5ab9cbbea474410759b68f608382e

















3398e46f09c5ab9cbbea474410759b68f608382e


Switch branch/tag










heros


src


heros


alias


FieldSensitiveIFDSSolver.java



Find file
Normal viewHistoryPermalink






FieldSensitiveIFDSSolver.java



3.03 KB









Newer










Older









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






1




/*******************************************************************************









use of abstracted summaries


 

 


Johannes Lerch
committed
Oct 22, 2014






2




 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






3




4




5




6




7




8




 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:









use of abstracted summaries


 

 


Johannes Lerch
committed
Oct 22, 2014






9




 *     Johannes Lerch, Johannes Späth - initial API and implementation









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






10




11




12




 ******************************************************************************/
package heros.alias;










edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






13




14




import heros.InterproceduralCFG;










FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






15




import java.util.Map.Entry;









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






16




import java.util.Set;









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






17














rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






18




public class FieldSensitiveIFDSSolver<N, FieldRef extends AccessPath.FieldRef<FieldRef>, D, M, I extends InterproceduralCFG<N, M>> {









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






19














rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






20




21




	private Scheduler scheduler = new Scheduler();
	private FlowFunctionProcessor<D, N, M, FieldRef> flowProcessor;









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






22




	









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




	private CacheMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new CacheMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {
		@Override
		protected MethodAnalyzer<FieldRef, D, N, M> createItem(M key) {
			return new MethodAnalyzer<>(key, context);
		}
	};

	private IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem;
	private Context<FieldRef, D, N,M> context;
	private Debugger<FieldRef, D, N, M, I> debugger;

	public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger) {
		this.tabulationProblem = tabulationProblem;
		this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;
		this.debugger.setICFG(tabulationProblem.interproceduralCFG());
		flowProcessor = new FlowFunctionProcessor<>(tabulationProblem.flowFunctions());
		context = new Context<FieldRef, D, N, M>(tabulationProblem.interproceduralCFG(), flowProcessor, scheduler, tabulationProblem.zeroValue(), 
				tabulationProblem.followReturnsPastSeeds(), factHandler, tabulationProblem.zeroHandler()) {
			@Override
			public MethodAnalyzer<FieldRef, D, N, M> getAnalyzer(M method) {
				if(method == null)
					throw new IllegalArgumentException("Method must be not null");
				return methodAnalyzers.getOrCreate(method);
			}
		};









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






48




49




50




51




52




53




54




	}

	/**
	 * Runs the solver on the configured problem. This can take some time.
	 */
	public void solve() {		
		submitInitialSeeds();









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






55




		scheduler.runAndAwaitCompletion();









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






56




57




58




59




60




61




62




63




	}

	/**
	 * Schedules the processing of initial seeds, initiating the analysis.
	 * Clients should only call this methods if performing synchronization on
	 * their own. Normally, {@link #solve()} should be called instead.
	 */
	protected void submitInitialSeeds() {









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






64




		for(Entry<N, Set<D>> seed: tabulationProblem.initialSeeds().entrySet()) {









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






65




			N startPoint = seed.getKey();









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






66




67




68




69




			MethodAnalyzer<FieldRef, D,N,M> analyzer = methodAnalyzers.getOrCreate(tabulationProblem.interproceduralCFG().getMethodOf(startPoint));
			for(D val: seed.getValue()) {
				analyzer.addInitialSeed(startPoint, val);
				debugger.initialSeed(startPoint);









"interest/concrretization" edges in callers are no longer propagated as


 

 


Johannes Lerch
committed
Jan 07, 2015






70




			}









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






71




72




73




		}
	}
}












H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros

3398e46f09c5ab9cbbea474410759b68f608382e

















3398e46f09c5ab9cbbea474410759b68f608382e


Switch branch/tag










heros


src


heros


alias


FieldSensitiveIFDSSolver.java



Find file
Normal viewHistoryPermalink






FieldSensitiveIFDSSolver.java



3.03 KB









Newer










Older









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






1




/*******************************************************************************









use of abstracted summaries


 

 


Johannes Lerch
committed
Oct 22, 2014






2




 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






3




4




5




6




7




8




 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:









use of abstracted summaries


 

 


Johannes Lerch
committed
Oct 22, 2014






9




 *     Johannes Lerch, Johannes Späth - initial API and implementation









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






10




11




12




 ******************************************************************************/
package heros.alias;










edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






13




14




import heros.InterproceduralCFG;










FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






15




import java.util.Map.Entry;









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






16




import java.util.Set;









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






17














rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






18




public class FieldSensitiveIFDSSolver<N, FieldRef extends AccessPath.FieldRef<FieldRef>, D, M, I extends InterproceduralCFG<N, M>> {









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






19














rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






20




21




	private Scheduler scheduler = new Scheduler();
	private FlowFunctionProcessor<D, N, M, FieldRef> flowProcessor;









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






22




	









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




	private CacheMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new CacheMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {
		@Override
		protected MethodAnalyzer<FieldRef, D, N, M> createItem(M key) {
			return new MethodAnalyzer<>(key, context);
		}
	};

	private IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem;
	private Context<FieldRef, D, N,M> context;
	private Debugger<FieldRef, D, N, M, I> debugger;

	public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger) {
		this.tabulationProblem = tabulationProblem;
		this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;
		this.debugger.setICFG(tabulationProblem.interproceduralCFG());
		flowProcessor = new FlowFunctionProcessor<>(tabulationProblem.flowFunctions());
		context = new Context<FieldRef, D, N, M>(tabulationProblem.interproceduralCFG(), flowProcessor, scheduler, tabulationProblem.zeroValue(), 
				tabulationProblem.followReturnsPastSeeds(), factHandler, tabulationProblem.zeroHandler()) {
			@Override
			public MethodAnalyzer<FieldRef, D, N, M> getAnalyzer(M method) {
				if(method == null)
					throw new IllegalArgumentException("Method must be not null");
				return methodAnalyzers.getOrCreate(method);
			}
		};









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






48




49




50




51




52




53




54




	}

	/**
	 * Runs the solver on the configured problem. This can take some time.
	 */
	public void solve() {		
		submitInitialSeeds();









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






55




		scheduler.runAndAwaitCompletion();









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






56




57




58




59




60




61




62




63




	}

	/**
	 * Schedules the processing of initial seeds, initiating the analysis.
	 * Clients should only call this methods if performing synchronization on
	 * their own. Normally, {@link #solve()} should be called instead.
	 */
	protected void submitInitialSeeds() {









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






64




		for(Entry<N, Set<D>> seed: tabulationProblem.initialSeeds().entrySet()) {









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






65




			N startPoint = seed.getKey();









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






66




67




68




69




			MethodAnalyzer<FieldRef, D,N,M> analyzer = methodAnalyzers.getOrCreate(tabulationProblem.interproceduralCFG().getMethodOf(startPoint));
			for(D val: seed.getValue()) {
				analyzer.addInitialSeed(startPoint, val);
				debugger.initialSeed(startPoint);









"interest/concrretization" edges in callers are no longer propagated as


 

 


Johannes Lerch
committed
Jan 07, 2015






70




			}









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






71




72




73




		}
	}
}











Open sidebar



Joshua Garcia heros

3398e46f09c5ab9cbbea474410759b68f608382e







Open sidebar



Joshua Garcia heros

3398e46f09c5ab9cbbea474410759b68f608382e




Open sidebar

Joshua Garcia heros

3398e46f09c5ab9cbbea474410759b68f608382e


Joshua Garciaherosheros
3398e46f09c5ab9cbbea474410759b68f608382e










3398e46f09c5ab9cbbea474410759b68f608382e


Switch branch/tag










heros


src


heros


alias


FieldSensitiveIFDSSolver.java



Find file
Normal viewHistoryPermalink






FieldSensitiveIFDSSolver.java



3.03 KB









Newer










Older









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






1




/*******************************************************************************









use of abstracted summaries


 

 


Johannes Lerch
committed
Oct 22, 2014






2




 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






3




4




5




6




7




8




 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:









use of abstracted summaries


 

 


Johannes Lerch
committed
Oct 22, 2014






9




 *     Johannes Lerch, Johannes Späth - initial API and implementation









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






10




11




12




 ******************************************************************************/
package heros.alias;










edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






13




14




import heros.InterproceduralCFG;










FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






15




import java.util.Map.Entry;









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






16




import java.util.Set;









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






17














rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






18




public class FieldSensitiveIFDSSolver<N, FieldRef extends AccessPath.FieldRef<FieldRef>, D, M, I extends InterproceduralCFG<N, M>> {









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






19














rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






20




21




	private Scheduler scheduler = new Scheduler();
	private FlowFunctionProcessor<D, N, M, FieldRef> flowProcessor;









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






22




	









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




	private CacheMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new CacheMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {
		@Override
		protected MethodAnalyzer<FieldRef, D, N, M> createItem(M key) {
			return new MethodAnalyzer<>(key, context);
		}
	};

	private IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem;
	private Context<FieldRef, D, N,M> context;
	private Debugger<FieldRef, D, N, M, I> debugger;

	public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger) {
		this.tabulationProblem = tabulationProblem;
		this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;
		this.debugger.setICFG(tabulationProblem.interproceduralCFG());
		flowProcessor = new FlowFunctionProcessor<>(tabulationProblem.flowFunctions());
		context = new Context<FieldRef, D, N, M>(tabulationProblem.interproceduralCFG(), flowProcessor, scheduler, tabulationProblem.zeroValue(), 
				tabulationProblem.followReturnsPastSeeds(), factHandler, tabulationProblem.zeroHandler()) {
			@Override
			public MethodAnalyzer<FieldRef, D, N, M> getAnalyzer(M method) {
				if(method == null)
					throw new IllegalArgumentException("Method must be not null");
				return methodAnalyzers.getOrCreate(method);
			}
		};









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






48




49




50




51




52




53




54




	}

	/**
	 * Runs the solver on the configured problem. This can take some time.
	 */
	public void solve() {		
		submitInitialSeeds();









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






55




		scheduler.runAndAwaitCompletion();









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






56




57




58




59




60




61




62




63




	}

	/**
	 * Schedules the processing of initial seeds, initiating the analysis.
	 * Clients should only call this methods if performing synchronization on
	 * their own. Normally, {@link #solve()} should be called instead.
	 */
	protected void submitInitialSeeds() {









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






64




		for(Entry<N, Set<D>> seed: tabulationProblem.initialSeeds().entrySet()) {









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






65




			N startPoint = seed.getKey();









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






66




67




68




69




			MethodAnalyzer<FieldRef, D,N,M> analyzer = methodAnalyzers.getOrCreate(tabulationProblem.interproceduralCFG().getMethodOf(startPoint));
			for(D val: seed.getValue()) {
				analyzer.addInitialSeed(startPoint, val);
				debugger.initialSeed(startPoint);









"interest/concrretization" edges in callers are no longer propagated as


 

 


Johannes Lerch
committed
Jan 07, 2015






70




			}









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






71




72




73




		}
	}
}














3398e46f09c5ab9cbbea474410759b68f608382e


Switch branch/tag










heros


src


heros


alias


FieldSensitiveIFDSSolver.java



Find file
Normal viewHistoryPermalink






FieldSensitiveIFDSSolver.java



3.03 KB









Newer










Older









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






1




/*******************************************************************************









use of abstracted summaries


 

 


Johannes Lerch
committed
Oct 22, 2014






2




 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






3




4




5




6




7




8




 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:









use of abstracted summaries


 

 


Johannes Lerch
committed
Oct 22, 2014






9




 *     Johannes Lerch, Johannes Späth - initial API and implementation









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






10




11




12




 ******************************************************************************/
package heros.alias;










edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






13




14




import heros.InterproceduralCFG;










FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






15




import java.util.Map.Entry;









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






16




import java.util.Set;









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






17














rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






18




public class FieldSensitiveIFDSSolver<N, FieldRef extends AccessPath.FieldRef<FieldRef>, D, M, I extends InterproceduralCFG<N, M>> {









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






19














rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






20




21




	private Scheduler scheduler = new Scheduler();
	private FlowFunctionProcessor<D, N, M, FieldRef> flowProcessor;









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






22




	









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




	private CacheMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new CacheMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {
		@Override
		protected MethodAnalyzer<FieldRef, D, N, M> createItem(M key) {
			return new MethodAnalyzer<>(key, context);
		}
	};

	private IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem;
	private Context<FieldRef, D, N,M> context;
	private Debugger<FieldRef, D, N, M, I> debugger;

	public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger) {
		this.tabulationProblem = tabulationProblem;
		this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;
		this.debugger.setICFG(tabulationProblem.interproceduralCFG());
		flowProcessor = new FlowFunctionProcessor<>(tabulationProblem.flowFunctions());
		context = new Context<FieldRef, D, N, M>(tabulationProblem.interproceduralCFG(), flowProcessor, scheduler, tabulationProblem.zeroValue(), 
				tabulationProblem.followReturnsPastSeeds(), factHandler, tabulationProblem.zeroHandler()) {
			@Override
			public MethodAnalyzer<FieldRef, D, N, M> getAnalyzer(M method) {
				if(method == null)
					throw new IllegalArgumentException("Method must be not null");
				return methodAnalyzers.getOrCreate(method);
			}
		};









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






48




49




50




51




52




53




54




	}

	/**
	 * Runs the solver on the configured problem. This can take some time.
	 */
	public void solve() {		
		submitInitialSeeds();









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






55




		scheduler.runAndAwaitCompletion();









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






56




57




58




59




60




61




62




63




	}

	/**
	 * Schedules the processing of initial seeds, initiating the analysis.
	 * Clients should only call this methods if performing synchronization on
	 * their own. Normally, {@link #solve()} should be called instead.
	 */
	protected void submitInitialSeeds() {









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






64




		for(Entry<N, Set<D>> seed: tabulationProblem.initialSeeds().entrySet()) {









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






65




			N startPoint = seed.getKey();









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






66




67




68




69




			MethodAnalyzer<FieldRef, D,N,M> analyzer = methodAnalyzers.getOrCreate(tabulationProblem.interproceduralCFG().getMethodOf(startPoint));
			for(D val: seed.getValue()) {
				analyzer.addInitialSeed(startPoint, val);
				debugger.initialSeed(startPoint);









"interest/concrretization" edges in callers are no longer propagated as


 

 


Johannes Lerch
committed
Jan 07, 2015






70




			}









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






71




72




73




		}
	}
}










3398e46f09c5ab9cbbea474410759b68f608382e


Switch branch/tag










heros


src


heros


alias


FieldSensitiveIFDSSolver.java



Find file
Normal viewHistoryPermalink




3398e46f09c5ab9cbbea474410759b68f608382e


Switch branch/tag










heros


src


heros


alias


FieldSensitiveIFDSSolver.java





3398e46f09c5ab9cbbea474410759b68f608382e


Switch branch/tag








3398e46f09c5ab9cbbea474410759b68f608382e


Switch branch/tag





3398e46f09c5ab9cbbea474410759b68f608382e

Switch branch/tag





Switch branch/tag



Switch branch/tagSwitch branch/tag
heros

src

heros

alias

FieldSensitiveIFDSSolver.java
Find file
Normal viewHistoryPermalink




FieldSensitiveIFDSSolver.java



3.03 KB









Newer










Older









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






1




/*******************************************************************************









use of abstracted summaries


 

 


Johannes Lerch
committed
Oct 22, 2014






2




 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






3




4




5




6




7




8




 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:









use of abstracted summaries


 

 


Johannes Lerch
committed
Oct 22, 2014






9




 *     Johannes Lerch, Johannes Späth - initial API and implementation









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






10




11




12




 ******************************************************************************/
package heros.alias;










edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






13




14




import heros.InterproceduralCFG;










FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






15




import java.util.Map.Entry;









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






16




import java.util.Set;









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






17














rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






18




public class FieldSensitiveIFDSSolver<N, FieldRef extends AccessPath.FieldRef<FieldRef>, D, M, I extends InterproceduralCFG<N, M>> {









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






19














rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






20




21




	private Scheduler scheduler = new Scheduler();
	private FlowFunctionProcessor<D, N, M, FieldRef> flowProcessor;









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






22




	









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




	private CacheMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new CacheMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {
		@Override
		protected MethodAnalyzer<FieldRef, D, N, M> createItem(M key) {
			return new MethodAnalyzer<>(key, context);
		}
	};

	private IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem;
	private Context<FieldRef, D, N,M> context;
	private Debugger<FieldRef, D, N, M, I> debugger;

	public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger) {
		this.tabulationProblem = tabulationProblem;
		this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;
		this.debugger.setICFG(tabulationProblem.interproceduralCFG());
		flowProcessor = new FlowFunctionProcessor<>(tabulationProblem.flowFunctions());
		context = new Context<FieldRef, D, N, M>(tabulationProblem.interproceduralCFG(), flowProcessor, scheduler, tabulationProblem.zeroValue(), 
				tabulationProblem.followReturnsPastSeeds(), factHandler, tabulationProblem.zeroHandler()) {
			@Override
			public MethodAnalyzer<FieldRef, D, N, M> getAnalyzer(M method) {
				if(method == null)
					throw new IllegalArgumentException("Method must be not null");
				return methodAnalyzers.getOrCreate(method);
			}
		};









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






48




49




50




51




52




53




54




	}

	/**
	 * Runs the solver on the configured problem. This can take some time.
	 */
	public void solve() {		
		submitInitialSeeds();









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






55




		scheduler.runAndAwaitCompletion();









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






56




57




58




59




60




61




62




63




	}

	/**
	 * Schedules the processing of initial seeds, initiating the analysis.
	 * Clients should only call this methods if performing synchronization on
	 * their own. Normally, {@link #solve()} should be called instead.
	 */
	protected void submitInitialSeeds() {









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






64




		for(Entry<N, Set<D>> seed: tabulationProblem.initialSeeds().entrySet()) {









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






65




			N startPoint = seed.getKey();









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






66




67




68




69




			MethodAnalyzer<FieldRef, D,N,M> analyzer = methodAnalyzers.getOrCreate(tabulationProblem.interproceduralCFG().getMethodOf(startPoint));
			for(D val: seed.getValue()) {
				analyzer.addInitialSeed(startPoint, val);
				debugger.initialSeed(startPoint);









"interest/concrretization" edges in callers are no longer propagated as


 

 


Johannes Lerch
committed
Jan 07, 2015






70




			}









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






71




72




73




		}
	}
}








FieldSensitiveIFDSSolver.java



3.03 KB










FieldSensitiveIFDSSolver.java



3.03 KB









Newer










Older
NewerOlder







FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






1




/*******************************************************************************









use of abstracted summaries


 

 


Johannes Lerch
committed
Oct 22, 2014






2




 * Copyright (c) 2014 Johannes Lerch, Johannes Späth.









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






3




4




5




6




7




8




 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:









use of abstracted summaries


 

 


Johannes Lerch
committed
Oct 22, 2014






9




 *     Johannes Lerch, Johannes Späth - initial API and implementation









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






10




11




12




 ******************************************************************************/
package heros.alias;










edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






13




14




import heros.InterproceduralCFG;










FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






15




import java.util.Map.Entry;









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






16




import java.util.Set;









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






17














rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






18




public class FieldSensitiveIFDSSolver<N, FieldRef extends AccessPath.FieldRef<FieldRef>, D, M, I extends InterproceduralCFG<N, M>> {









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






19














rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






20




21




	private Scheduler scheduler = new Scheduler();
	private FlowFunctionProcessor<D, N, M, FieldRef> flowProcessor;









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






22




	









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






23




24




25




26




27




28




29




30




31




32




33




34




35




36




37




38




39




40




41




42




43




44




45




46




47




	private CacheMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new CacheMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {
		@Override
		protected MethodAnalyzer<FieldRef, D, N, M> createItem(M key) {
			return new MethodAnalyzer<>(key, context);
		}
	};

	private IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem;
	private Context<FieldRef, D, N,M> context;
	private Debugger<FieldRef, D, N, M, I> debugger;

	public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger) {
		this.tabulationProblem = tabulationProblem;
		this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;
		this.debugger.setICFG(tabulationProblem.interproceduralCFG());
		flowProcessor = new FlowFunctionProcessor<>(tabulationProblem.flowFunctions());
		context = new Context<FieldRef, D, N, M>(tabulationProblem.interproceduralCFG(), flowProcessor, scheduler, tabulationProblem.zeroValue(), 
				tabulationProblem.followReturnsPastSeeds(), factHandler, tabulationProblem.zeroHandler()) {
			@Override
			public MethodAnalyzer<FieldRef, D, N, M> getAnalyzer(M method) {
				if(method == null)
					throw new IllegalArgumentException("Method must be not null");
				return methodAnalyzers.getOrCreate(method);
			}
		};









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






48




49




50




51




52




53




54




	}

	/**
	 * Runs the solver on the configured problem. This can take some time.
	 */
	public void solve() {		
		submitInitialSeeds();









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






55




		scheduler.runAndAwaitCompletion();









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






56




57




58




59




60




61




62




63




	}

	/**
	 * Schedules the processing of initial seeds, initiating the analysis.
	 * Clients should only call this methods if performing synchronization on
	 * their own. Normally, {@link #solve()} should be called instead.
	 */
	protected void submitInitialSeeds() {









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






64




		for(Entry<N, Set<D>> seed: tabulationProblem.initialSeeds().entrySet()) {









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






65




			N startPoint = seed.getKey();









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






66




67




68




69




			MethodAnalyzer<FieldRef, D,N,M> analyzer = methodAnalyzers.getOrCreate(tabulationProblem.interproceduralCFG().getMethodOf(startPoint));
			for(D val: seed.getValue()) {
				analyzer.addInitialSeed(startPoint, val);
				debugger.initialSeed(startPoint);









"interest/concrretization" edges in callers are no longer propagated as


 

 


Johannes Lerch
committed
Jan 07, 2015






70




			}









FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014






71




72




73




		}
	}
}







FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014



FieldSensitiveIFDSSolver - concept outline



 

FieldSensitiveIFDSSolver - concept outline


Johannes Späth
committed
Oct 15, 2014

1
/*******************************************************************************/*******************************************************************************



use of abstracted summaries


 

 


Johannes Lerch
committed
Oct 22, 2014



use of abstracted summaries


 

 

use of abstracted summaries

 

Johannes Lerch
committed
Oct 22, 2014

2
 * Copyright (c) 2014 Johannes Lerch, Johannes Späth. * Copyright (c) 2014 Johannes Lerch, Johannes Späth.



FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014



FieldSensitiveIFDSSolver - concept outline



 

FieldSensitiveIFDSSolver - concept outline


Johannes Späth
committed
Oct 15, 2014

3

4

5

6

7

8
 * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors:



use of abstracted summaries


 

 


Johannes Lerch
committed
Oct 22, 2014



use of abstracted summaries


 

 

use of abstracted summaries

 

Johannes Lerch
committed
Oct 22, 2014

9
 *     Johannes Lerch, Johannes Späth - initial API and implementation *     Johannes Lerch, Johannes Späth - initial API and implementation



FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014



FieldSensitiveIFDSSolver - concept outline



 

FieldSensitiveIFDSSolver - concept outline


Johannes Späth
committed
Oct 15, 2014

10

11

12
 ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;



edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014



edges on hold + resume


 

 

edges on hold + resume

 

Johannes Lerch
committed
Nov 25, 2014

13

14
import heros.InterproceduralCFG;importheros.InterproceduralCFG;



FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014



FieldSensitiveIFDSSolver - concept outline



 

FieldSensitiveIFDSSolver - concept outline


Johannes Späth
committed
Oct 15, 2014

15
import java.util.Map.Entry;importjava.util.Map.Entry;



edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014



edges on hold + resume


 

 

edges on hold + resume

 

Johannes Lerch
committed
Nov 25, 2014

16
import java.util.Set;importjava.util.Set;



FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014



FieldSensitiveIFDSSolver - concept outline



 

FieldSensitiveIFDSSolver - concept outline


Johannes Späth
committed
Oct 15, 2014

17




rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver


 

 

rewrite of ifds solver

 

Johannes Lerch
committed
Mar 19, 2015

18
public class FieldSensitiveIFDSSolver<N, FieldRef extends AccessPath.FieldRef<FieldRef>, D, M, I extends InterproceduralCFG<N, M>> {publicclassFieldSensitiveIFDSSolver<N,FieldRefextendsAccessPath.FieldRef<FieldRef>,D,M,IextendsInterproceduralCFG<N,M>>{



FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014



FieldSensitiveIFDSSolver - concept outline



 

FieldSensitiveIFDSSolver - concept outline


Johannes Späth
committed
Oct 15, 2014

19




rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver


 

 

rewrite of ifds solver

 

Johannes Lerch
committed
Mar 19, 2015

20

21
	private Scheduler scheduler = new Scheduler();privateSchedulerscheduler=newScheduler();	private FlowFunctionProcessor<D, N, M, FieldRef> flowProcessor;privateFlowFunctionProcessor<D,N,M,FieldRef>flowProcessor;



FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014



FieldSensitiveIFDSSolver - concept outline



 

FieldSensitiveIFDSSolver - concept outline


Johannes Späth
committed
Oct 15, 2014

22
	



rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver


 

 

rewrite of ifds solver

 

Johannes Lerch
committed
Mar 19, 2015

23

24

25

26

27

28

29

30

31

32

33

34

35

36

37

38

39

40

41

42

43

44

45

46

47
	private CacheMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new CacheMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {privateCacheMap<M,MethodAnalyzer<FieldRef,D,N,M>>methodAnalyzers=newCacheMap<M,MethodAnalyzer<FieldRef,D,N,M>>(){		@Override@Override		protected MethodAnalyzer<FieldRef, D, N, M> createItem(M key) {protectedMethodAnalyzer<FieldRef,D,N,M>createItem(Mkey){			return new MethodAnalyzer<>(key, context);returnnewMethodAnalyzer<>(key,context);		}}	};};	private IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem;privateIFDSTabulationProblem<N,FieldRef,D,M,I>tabulationProblem;	private Context<FieldRef, D, N,M> context;privateContext<FieldRef,D,N,M>context;	private Debugger<FieldRef, D, N, M, I> debugger;privateDebugger<FieldRef,D,N,M,I>debugger;	public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger) {publicFieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I>tabulationProblem,FactMergeHandler<D>factHandler,Debugger<FieldRef,D,N,M,I>debugger){		this.tabulationProblem = tabulationProblem;this.tabulationProblem=tabulationProblem;		this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;this.debugger=debugger==null?newDebugger.NullDebugger<FieldRef,D,N,M,I>():debugger;		this.debugger.setICFG(tabulationProblem.interproceduralCFG());this.debugger.setICFG(tabulationProblem.interproceduralCFG());		flowProcessor = new FlowFunctionProcessor<>(tabulationProblem.flowFunctions());flowProcessor=newFlowFunctionProcessor<>(tabulationProblem.flowFunctions());		context = new Context<FieldRef, D, N, M>(tabulationProblem.interproceduralCFG(), flowProcessor, scheduler, tabulationProblem.zeroValue(), context=newContext<FieldRef,D,N,M>(tabulationProblem.interproceduralCFG(),flowProcessor,scheduler,tabulationProblem.zeroValue(),				tabulationProblem.followReturnsPastSeeds(), factHandler, tabulationProblem.zeroHandler()) {tabulationProblem.followReturnsPastSeeds(),factHandler,tabulationProblem.zeroHandler()){			@Override@Override			public MethodAnalyzer<FieldRef, D, N, M> getAnalyzer(M method) {publicMethodAnalyzer<FieldRef,D,N,M>getAnalyzer(Mmethod){				if(method == null)if(method==null)					throw new IllegalArgumentException("Method must be not null");thrownewIllegalArgumentException("Method must be not null");				return methodAnalyzers.getOrCreate(method);returnmethodAnalyzers.getOrCreate(method);			}}		};};



FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014



FieldSensitiveIFDSSolver - concept outline



 

FieldSensitiveIFDSSolver - concept outline


Johannes Späth
committed
Oct 15, 2014

48

49

50

51

52

53

54
	}}	/**/**	 * Runs the solver on the configured problem. This can take some time.	 * Runs the solver on the configured problem. This can take some time.	 */	 */	public void solve() {		publicvoidsolve(){		submitInitialSeeds();submitInitialSeeds();



rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver


 

 

rewrite of ifds solver

 

Johannes Lerch
committed
Mar 19, 2015

55
		scheduler.runAndAwaitCompletion();scheduler.runAndAwaitCompletion();



FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014



FieldSensitiveIFDSSolver - concept outline



 

FieldSensitiveIFDSSolver - concept outline


Johannes Späth
committed
Oct 15, 2014

56

57

58

59

60

61

62

63
	}}	/**/**	 * Schedules the processing of initial seeds, initiating the analysis.	 * Schedules the processing of initial seeds, initiating the analysis.	 * Clients should only call this methods if performing synchronization on	 * Clients should only call this methods if performing synchronization on	 * their own. Normally, {@link #solve()} should be called instead.	 * their own. Normally, {@link #solve()} should be called instead.	 */	 */	protected void submitInitialSeeds() {protectedvoidsubmitInitialSeeds(){



rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver


 

 

rewrite of ifds solver

 

Johannes Lerch
committed
Mar 19, 2015

64
		for(Entry<N, Set<D>> seed: tabulationProblem.initialSeeds().entrySet()) {for(Entry<N,Set<D>>seed:tabulationProblem.initialSeeds().entrySet()){



FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014



FieldSensitiveIFDSSolver - concept outline



 

FieldSensitiveIFDSSolver - concept outline


Johannes Späth
committed
Oct 15, 2014

65
			N startPoint = seed.getKey();NstartPoint=seed.getKey();



rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver


 

 

rewrite of ifds solver

 

Johannes Lerch
committed
Mar 19, 2015

66

67

68

69
			MethodAnalyzer<FieldRef, D,N,M> analyzer = methodAnalyzers.getOrCreate(tabulationProblem.interproceduralCFG().getMethodOf(startPoint));MethodAnalyzer<FieldRef,D,N,M>analyzer=methodAnalyzers.getOrCreate(tabulationProblem.interproceduralCFG().getMethodOf(startPoint));			for(D val: seed.getValue()) {for(Dval:seed.getValue()){				analyzer.addInitialSeed(startPoint, val);analyzer.addInitialSeed(startPoint,val);				debugger.initialSeed(startPoint);debugger.initialSeed(startPoint);



"interest/concrretization" edges in callers are no longer propagated as


 

 


Johannes Lerch
committed
Jan 07, 2015



"interest/concrretization" edges in callers are no longer propagated as


 

 

"interest/concrretization" edges in callers are no longer propagated as

 

Johannes Lerch
committed
Jan 07, 2015

70
			}}



FieldSensitiveIFDSSolver - concept outline



 


Johannes Späth
committed
Oct 15, 2014



FieldSensitiveIFDSSolver - concept outline



 

FieldSensitiveIFDSSolver - concept outline


Johannes Späth
committed
Oct 15, 2014

71

72

73
		}}	}}}}





