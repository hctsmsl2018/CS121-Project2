



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

90319070















Commit
90319070


authored
Apr 01, 2015
by


Johannes Lerch



Browse files




refactoring







parent
eb98a856













Changes
20




Expand all
Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPath.java








View file @ 90319070






......@@ -144,22 +144,6 @@ public class AccessPath<T> {









 return delta;










 }










 










 //FIXME this is an unsound dirty hack










 public boolean contains(AccessPath<T> accPath) {










 assert accPath.accesses.length <= 1;










 if(accPath.accesses.length == 1) {










 for(T sub : accesses) {










 if(sub.equals(accPath.accesses[0])) {










 return true;










 }










 }










 return false;










 }










 else










 return exclusions.containsAll(accPath.exclusions);










 }










 










 










 public static class Delta<T> {










 final T[] accesses;










 final Set<T> exclusions;



......














src/heros/alias/BiDiFieldSensitiveIFDSSolver.java








View file @ 90319070






......@@ -12,9 +12,10 @@ package heros.alias;































import heros.InterproceduralCFG;










import heros.alias.bidi.SourceStmtAnnotatedMethodAnalyzer;










import heros.alias.bidi.SourceStmtAnnotatedMethodAnalyzer.Synchronizer;










import heros.alias.SourceStmtAnnotatedMethodAnalyzer.Synchronizer;





















import java.util.Set;





















import com.google.common.collect.HashMultimap;










import com.google.common.collect.Sets;














......














src/heros/alias/IncomingEdge.java

â†’

src/heros/alias/CallEdge.java








View file @ 90319070






......@@ -13,13 +13,13 @@ package heros.alias;









import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;





















public class IncomingEdge<Field, Fact, Stmt, Method> {










public class CallEdge<Field, Fact, Stmt, Method> {





















 private WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact;










 private PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> callerAnalyzer;










 private WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtCallSite;










 










 public IncomingEdge(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> callerAnalyzer, 










 public CallEdge(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> callerAnalyzer, 










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtCallSite,










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact) {










 this.callerAnalyzer = callerAnalyzer;



......@@ -32,7 +32,7 @@ public class IncomingEdge<Field, Fact, Stmt, Method> {









 }










 










 public WrappedFact<Field, Fact, Stmt, Method> getCallerCallSiteFact() {










 return factAtCallSite.getFact();










 return factAtCallSite.getWrappedFact();










 }










 










 public WrappedFact<Field, Fact, Stmt, Method> getCallerSourceFact() {



......@@ -53,16 +53,16 @@ public class IncomingEdge<Field, Fact, Stmt, Method> {









 if(!factAtCallSite.canDeltaBeApplied(delta))










 return;










 










 factAtCallSite.getFact().getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 factAtCallSite.getWrappedFact().getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFactWithDelta = new WrappedFact<>(calleeSourceFact.getFact(), delta.applyTo(calleeSourceFact.getAccessPath()), resolver);










 if(interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath()) != PrefixTestResult.GUARANTEED_PREFIX)










 throw new AssertionError();










 interestedAnalyzer.addIncomingEdge(new IncomingEdge<>(analyzer, 










 interestedAnalyzer.addIncomingEdge(new CallEdge<>(analyzer, 










 new WrappedFactAtStatement<>(factAtCallSite.getStatement(), 










 new WrappedFact<>(factAtCallSite.getFact().getFact(), delta.applyTo(factAtCallSite.getFact().getAccessPath()), resolver)), 










 new WrappedFact<>(factAtCallSite.getWrappedFact().getFact(), delta.applyTo(factAtCallSite.getWrappedFact().getAccessPath()), resolver)), 










 calleeSourceFactWithDelta));










 }










 



......@@ -96,7 +96,7 @@ public class IncomingEdge<Field, Fact, Stmt, Method> {









 return false;










 if (getClass() != obj.getClass())










 return false;










 IncomingEdge other = (IncomingEdge) obj;










 CallEdge other = (CallEdge) obj;










 if (calleeSourceFact == null) {










 if (other.calleeSourceFact != null)










 return false;



......














src/heros/alias/CallEdgeResolver.java








View file @ 90319070






......@@ -10,31 +10,52 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.Constraint;










import com.google.common.collect.Lists;
































class CallEdgeResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {










class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> {





















 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 super(analyzer);










 this(analyzer, null);










 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 }





















 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) { 










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(analyzer.getAccessPath()) && !analyzer.isLocked() && !doesContain(constraint)) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(analyzer.getAccessPath());










 PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method> nestedAnalyzer = analyzer.getOrCreateNestedAnalyzer(newAccPath);










 nestedAnalyzer.getCallEdgeResolver().registerCallback(callback);










 }










 protected AccessPath<Field> getResolvedAccessPath() {










 return analyzer.getAccessPath();










 }










 










 @Override










 protected AccessPath<Field> getAccessPathOf(CallEdge<Field, Fact, Stmt, Method> inc) {










 return inc.getCalleeSourceFact().getAccessPath();










 }










 










 @Override










 protected void processIncomingGuaranteedPrefix(CallEdge<Field, Fact, Stmt, Method> inc) {










 analyzer.applySummaries(inc);










 }










 










 //FIXME: this is a dirty hack (and unsound?!)










 private boolean doesContain(Constraint<Field> constraint) {










 AccessPath<Field> accPath = constraint.applyToAccessPath(new AccessPath<Field>());










 return analyzer.getAccessPath().contains(accPath);










 @Override










 protected void processIncomingPotentialPrefix(CallEdge<Field, Fact, Stmt, Method> inc) {










 lock();










 inc.registerInterestCallback(analyzer);










 unlock();










 }





















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return analyzer.createWithAccessPath(newAccPath).getCallEdgeResolver();










 }










 










 public void applySummaries(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 for(CallEdge<Field, Fact, Stmt, Method> incEdge : Lists.newLinkedList(incomingEdges)) {










 analyzer.applySummary(incEdge, factAtStmt);










 }










 }










 










 @Override










 public String toString() {










 return "";



......@@ -45,5 +66,9 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact,









 analyzer.log(message);










 }





















 public boolean hasIncomingEdges() {










 return !incomingEdges.isEmpty();










 }
































}




\ No newline at end of file














src/heros/alias/Context.java








View file @ 90319070






......@@ -12,26 +12,26 @@ package heros.alias;




















import heros.InterproceduralCFG;





















public abstract class Context<FieldRef, FactAbstraction, Statement, Method> {










public abstract class Context<Field, Fact, Stmt, Method> {





















 public final InterproceduralCFG<Statement, Method> icfg;










 public final FlowFunctionProcessor<FactAbstraction, Statement, Method, FieldRef> flowProcessor;










 public final InterproceduralCFG<Stmt, Method> icfg;










 public final Scheduler scheduler;










 public final FactAbstraction zeroValue;










 public final Fact zeroValue;










 public final boolean followReturnsPastSeeds;










 public final FactMergeHandler<FactAbstraction> factHandler;










 public final ZeroHandler<FieldRef> zeroHandler;










 public final FactMergeHandler<Fact> factHandler;










 public final ZeroHandler<Field> zeroHandler;










 public final FlowFunctions<Stmt, Field, Fact, Method> flowFunctions;










 










 Context(InterproceduralCFG<Statement, Method> icfg, FlowFunctionProcessor<FactAbstraction, Statement, Method, FieldRef> flowProcessor, 










 Scheduler scheduler, FactAbstraction zeroValue, boolean followReturnsPastSeeds, FactMergeHandler<FactAbstraction> factHandler, ZeroHandler<FieldRef> zeroHandler) {










 this.icfg = icfg;










 this.flowProcessor = flowProcessor;










 Context(IFDSTabulationProblem<Stmt, Field, Fact, Method, ? extends InterproceduralCFG<Stmt, Method>> tabulationProblem, 










 Scheduler scheduler, FactMergeHandler<Fact> factHandler) {










 this.icfg = tabulationProblem.interproceduralCFG();










 this.flowFunctions = tabulationProblem.flowFunctions();










 this.scheduler = scheduler;










 this.zeroValue = zeroValue;










 this.followReturnsPastSeeds = followReturnsPastSeeds;










 this.zeroValue = tabulationProblem.zeroValue();










 this.followReturnsPastSeeds = tabulationProblem.followReturnsPastSeeds();










 this.factHandler = factHandler;










 this.zeroHandler = zeroHandler;










 this.zeroHandler = tabulationProblem.zeroHandler();










 }










 










 public abstract MethodAnalyzer<FieldRef, FactAbstraction, Statement, Method> getAnalyzer(Method method);










 public abstract MethodAnalyzer<Field, Fact, Stmt, Method> getAnalyzer(Method method);










}














src/heros/alias/ControlFlowJoinResolver.java








View file @ 90319070






......@@ -10,110 +10,61 @@









 ******************************************************************************/










package heros.alias;





















import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.Constraint;





















public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {










public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {





















 private boolean recursiveLock = false;










 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private Set<WrappedFact<Field, Fact, Stmt, Method>> incomingFacts = Sets.newHashSet();










 private boolean propagated = false;










 private Map<AccessPath<Field>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> nestedResolvers = Maps.newHashMap();










 private ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent;





















 public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(analyzer, joinStmt, new AccessPath<Field>(), null);










 propagated=false;










 }










 










 private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer);










 super(analyzer, parent);










 this.joinStmt = joinStmt;










 this.resolvedAccPath = resolvedAccPath;










 this.parent = parent;










 }





















 public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact) {










 if(resolvedAccPath.isPrefixOf(fact.getAccessPath()) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Fact "+fact);










 if(!incomingFacts.add(fact))










 return;










 










 interest(analyzer, this);










 for(ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver : nestedResolvers.values())










 nestedResolver.addIncoming(fact);










 










 if(!propagated) {










 propagated=true;










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }










 }










 else if(fact.getAccessPath().isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);










 }





















 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 }










 propagated=true;










 }










 










 private boolean isLocked() {










 if(recursiveLock)










 return true;










 if(parent == null)










 return false;










 return parent.isLocked();










 @Override










 protected AccessPath<Field> getAccessPathOf(WrappedFact<Field, Fact, Stmt, Method> inc) {










 return inc.getAccessPath();










 }





















 protected void processIncomingGuaranteedPrefix(heros.alias.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 propagated=true;










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }










 };










 










 @Override










 public void resolve(Constraint<Field> constraint, final InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(!constraint.canBeAppliedTo(resolvedAccPath) || isLocked())










 return;










 










 AccessPath<Field> candidateAccPath = constraint.applyToAccessPath(resolvedAccPath);










 recursiveLock = true;










 ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = getOrCreateNestedResolver(candidateAccPath);










 if(!nestedResolver.resolvedAccPath.equals(constraint.applyToAccessPath(resolvedAccPath)))










 throw new AssertionError();










 










 nestedResolver.registerCallback(callback);










 recursiveLock = false;










 protected void processIncomingPotentialPrefix(WrappedFact<Field, Fact, Stmt, Method> fact) {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);










 }





















 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 unlock();










 }










 










 private ControlFlowJoinResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> candidateAccPath) {










 if(resolvedAccPath.equals(candidateAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(candidateAccPath)) {










 assert resolvedAccPath.getDeltaTo(candidateAccPath).accesses.length <= 1;










 










 final ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = new ControlFlowJoinResolver<>(analyzer, joinStmt, candidateAccPath, this);










 nestedResolver.propagated = true;










 nestedResolvers.put(candidateAccPath, nestedResolver);





















 for(WrappedFact<Field, Fact, Stmt, Method> incFact: incomingFacts) {










 nestedResolver.addIncoming(incFact);










 } 










 }










 return nestedResolvers.get(candidateAccPath);










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<>(analyzer, joinStmt, newAccPath, this);










 }





















 @Override



......@@ -126,6 +77,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 return "<"+resolvedAccPath+":"+joinStmt+">";










 }





















 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 }



......














src/heros/alias/FactMergeHandler.java








View file @ 90319070






......@@ -12,7 +12,17 @@ package heros.alias;




















public interface FactMergeHandler<Fact> {





















 /**










	 * Called when propagating a Fact to a statement at which an equal Fact was already propagated to.










	 * @param previousFact The Fact instance that was propagated to the statement first.










	 * @param currentFact The Fact that was propagated to the statement last.










	 */










 void merge(Fact previousFact, Fact currentFact);










 










 /**










	 * Called on Facts being propagated over a return edge. Via this method context can be restored that was abstracted when propagating over the call edge.










	 * @param factAtReturnSite The fact being propagated over the return edge.










	 * @param factAtCallSite The Fact that was present at the call site, i.e., the Fact used as input to the call flow function.










	 */










 void restoreCallingContext(Fact factAtReturnSite, Fact factAtCallSite);










}














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 90319070






......@@ -18,10 +18,11 @@ import java.util.Set;









import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















import com.sun.istack.internal.Nullable;





















public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends InterproceduralCFG<N, M>> {





















 protected static final Logger logger = LoggerFactory.getLogger(FieldSensitiveIFDSSolver.class);










 private FlowFunctionProcessor<D, N, M, FieldRef> flowProcessor;










 










 private CacheMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new CacheMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {










 @Override



......@@ -35,19 +36,17 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur









 private Debugger<FieldRef, D, N, M, I> debugger;










 private Scheduler scheduler;





















 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, @Nullable Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 this.tabulationProblem = tabulationProblem;










 this.scheduler = scheduler;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;










 this.debugger.setICFG(tabulationProblem.interproceduralCFG());










 flowProcessor = new FlowFunctionProcessor<>(tabulationProblem.flowFunctions());










 context = initContext(tabulationProblem, factHandler);










 submitInitialSeeds();










 }





















 protected Context<FieldRef, D, N, M> initContext(IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem, FactMergeHandler<D> factHandler) {










 return new Context<FieldRef, D, N, M>(tabulationProblem.interproceduralCFG(), flowProcessor, scheduler, tabulationProblem.zeroValue(), 










 tabulationProblem.followReturnsPastSeeds(), factHandler, tabulationProblem.zeroHandler()) {










 private Context<FieldRef, D, N, M> initContext(IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem, FactMergeHandler<D> factHandler) {










 return new Context<FieldRef, D, N, M>(tabulationProblem, scheduler, factHandler) {










 @Override










 public MethodAnalyzer<FieldRef, D, N, M> getAnalyzer(M method) {










 if(method == null)



......@@ -63,10 +62,8 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 /**










	 * Schedules the processing of initial seeds, initiating the analysis.










	 * Clients should only call this methods if performing synchronization on










	 * their own. Normally, {@link #solve()} should be called instead.










	 */










 protected void submitInitialSeeds() {










 private void submitInitialSeeds() {










 for(Entry<N, Set<D>> seed: tabulationProblem.initialSeeds().entrySet()) {










 N startPoint = seed.getKey();










 MethodAnalyzer<FieldRef, D,N,M> analyzer = methodAnalyzers.getOrCreate(tabulationProblem.interproceduralCFG().getMethodOf(startPoint));



......














src/heros/alias/FlowFunctionProcessor.java

deleted


100644 â†’ 0







View file @ eb98a856













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.ConstrainedFact;





















import java.util.Set;





















import com.google.common.collect.Sets;





















public class FlowFunctionProcessor<Fact, Stmt, Method, Field> {





















 private FlowFunctions<Stmt, Field, Fact, Method> flowFunctions;





















 public FlowFunctionProcessor(FlowFunctions<Stmt, Field, Fact, Method> flowFunctions) {










 this.flowFunctions = flowFunctions;










 }










 










 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeNormalFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> source) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getNormalFlowFunction(source.getStatement());










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }










 










 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeCallFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> source, Method calledMethod) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getCallFlowFunction(source.getStatement(), calledMethod);










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }





















 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeCallToReturnFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> source, Stmt returnSite) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getCallToReturnFlowFunction(source.getStatement(), returnSite);










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }





















 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeReturnFlow(FactMergeHandler<Fact> factHandler, WrappedFactAtStatement<Field, Fact, Stmt, Method> source, Method calleeMethod, Stmt returnSite,










 IncomingEdge<Field, Fact, Stmt, Method> incEdge) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getReturnFlowFunction(incEdge.getCallSite(), calleeMethod, source.getStatement(), returnSite);










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 










 for (ConstrainedFact<Field, Fact, Stmt, Method> constrainedFact : targets) {










 factHandler.restoreCallingContext(constrainedFact.getFact().getFact(), incEdge.getCallerCallSiteFact().getFact());










 }










 return targets;










 }





















 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeUnbalancedReturnFlow(Fact zero, WrappedFactAtStatement<Field, Fact, Stmt, Method> source, 










 Method calleeMethod, Stmt returnSite, Stmt callSite) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getReturnFlowFunction(callSite, calleeMethod, source.getStatement(), returnSite);










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }










}














src/heros/alias/MethodAnalyzer.java








View file @ 90319070






......@@ -12,7 +12,7 @@ package heros.alias;




















public interface MethodAnalyzer<Field,Fact,Stmt,Method> {





















 public void addIncomingEdge(IncomingEdge<Field, Fact, Stmt, Method> incEdge);










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge);










 










 public void addInitialSeed(Stmt startPoint, Fact val);










 



......














src/heros/alias/MethodAnalyzerImpl.java








View file @ 90319070






......@@ -29,10 +29,9 @@ public class MethodAnalyzerImpl<Field,Fact, Stmt, Method>









 }










 










 @Override










 public void addIncomingEdge(IncomingEdge<Field, Fact, Stmt, Method> incEdge) {










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact = incEdge.getCalleeSourceFact();










 PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer = perSourceAnalyzer.getOrCreate(calleeSourceFact.getFact());










 analyzer.bootstrapAtMethodStartPoints();










 analyzer.addIncomingEdge(incEdge);










 }














......














src/heros/alias/PerAccessPathMethodAnalyzer.java








View file @ 90319070





This diff is collapsed.
Click to expand it.













src/heros/alias/Resolver.java








View file @ 90319070






......@@ -10,15 +10,12 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.Constraint;





















import java.util.List;










import java.util.Map;





















import com.google.common.collect.HashMultimap;










import com.google.common.collect.Lists;





















import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;





















public abstract class Resolver<Field, Fact, Stmt, Method> {





















 private boolean interest = false;



......














src/heros/alias/ResolverTemplate.java



0 â†’ 100644







View file @ 90319070













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.Constraint;
































public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming> extends Resolver<Field, Fact, Stmt, Method> {





















 private boolean recursionLock = false;










 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent) {










 super(analyzer);










 this.parent = parent;










 }










 










 protected boolean isLocked() {










 if(recursionLock)










 return true;










 if(parent == null)










 return false;










 return parent.isLocked();










 }





















 protected void lock() {










 recursionLock = true;










 }










 










 protected void unlock() {










 recursionLock = false;










 }










 










 protected abstract AccessPath<Field> getResolvedAccessPath();










 










 protected abstract AccessPath<Field> getAccessPathOf(Incoming inc);










 










 public void addIncoming(Incoming inc) {










 if(getResolvedAccessPath().isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge: "+inc);










 if(!incomingEdges.add(inc))










 return;










 










 interest(analyzer, this);










 










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : nestedResolvers.values()) {










 nestedResolver.addIncoming(inc);










 }










 










 processIncomingGuaranteedPrefix(inc);










 }










 else if(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 processIncomingPotentialPrefix(inc);










 }










 }





















 protected abstract void processIncomingPotentialPrefix(Incoming inc);





















 protected abstract void processIncomingGuaranteedPrefix(Incoming inc);










 










 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(getResolvedAccessPath()) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(getResolvedAccessPath());










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = getOrCreateNestedResolver(newAccPath);










 assert nestedResolver.getResolvedAccessPath().equals(constraint.applyToAccessPath(getResolvedAccessPath()));










 nestedResolver.registerCallback(callback);










 }










 }





















 protected ResolverTemplate<Field, Fact, Stmt, Method, Incoming> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 if(getResolvedAccessPath().equals(newAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(newAccPath)) {










 assert getResolvedAccessPath().getDeltaTo(newAccPath).accesses.length <= 1;










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = createNestedResolver(newAccPath);










 nestedResolvers.put(newAccPath, nestedResolver);










 










 for(Incoming inc : incomingEdges) {










 nestedResolver.addIncoming(inc);










 }










 }










 return nestedResolvers.get(newAccPath);










 }










 










 protected abstract ResolverTemplate<Field, Fact, Stmt, Method, Incoming> createNestedResolver(AccessPath<Field> newAccPath);










}




\ No newline at end of file














src/heros/alias/ReturnEdge.java



0 â†’ 100644







View file @ 90319070













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;





















class ReturnEdge<Field, Fact, Stmt, Method> {





















 final Fact incFact;










 final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 final Delta<Field> callDelta;










 final AccessPath<Field> incAccessPath;










 final Resolver<Field, Fact, Stmt, Method> incResolver;










 final Delta<Field> usedAccessPathOfIncResolver;





















 public ReturnEdge(WrappedFact<Field, Fact, Stmt, Method> fact, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller,










 Delta<Field> callDelta) {










 this(fact.getFact(), fact.getAccessPath(), fact.getResolver(), resolverAtCaller, callDelta, Delta.<Field>empty());










 }










 










 private ReturnEdge(Fact incFact, 










 AccessPath<Field> incAccessPath, 










 Resolver<Field, Fact, Stmt, Method> incResolver, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, 










 Delta<Field> callDelta, 










 Delta<Field> usedAccessPathOfIncResolver) {










 this.incFact = incFact;










 this.incAccessPath = incAccessPath;










 this.incResolver = incResolver;










 this.resolverAtCaller = resolverAtCaller;










 this.callDelta = callDelta;










 this.usedAccessPathOfIncResolver = usedAccessPathOfIncResolver;










 }










 










 public ReturnEdge<Field, Fact, Stmt, Method> copyWithIncomingResolver(










 Resolver<Field, Fact, Stmt, Method> incResolver, Delta<Field> usedAccessPathOfIncResolver) {










 return new ReturnEdge<>(incFact, incAccessPath, incResolver, resolverAtCaller, callDelta, usedAccessPathOfIncResolver);










 }










 










 public ReturnEdge<Field, Fact, Stmt, Method> copyWithResolverAtCaller(










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, Delta<Field> usedAccessPathOfIncResolver) {










 return new ReturnEdge<>(incFact, incAccessPath, null, resolverAtCaller, callDelta, usedAccessPathOfIncResolver);










 }










 










 @Override










 public String toString() {










 return String.format("IncFact: %s%s, Delta: %s, IncResolver: <%s:%s>, ResolverAtCallSite: %s", incFact, incAccessPath, callDelta, usedAccessPathOfIncResolver, incResolver, resolverAtCaller);










 }










 










 










}




\ No newline at end of file














src/heros/alias/ReturnSiteResolver.java








View file @ 90319070






......@@ -12,33 +12,24 @@ package heros.alias;




















import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.Constraint;





















import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {










public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {





















 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Set<ReturnEdge> incomingFacts;










 private Map<AccessPath<Field>, ReturnSiteResolver<Field, Fact, Stmt, Method>> nestedResolvers = Maps.newHashMap();










 private ReturnSiteResolver<Field, Fact, Stmt, Method> parent;





















 public ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(analyzer, returnSite, new AccessPath<Field>(), null);










 propagated = false;










 }





















 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer);










 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 this.returnSite = returnSite;










 this.resolvedAccPath = resolvedAccPath;










 this.parent = parent;










 this.incomingFacts = Sets.newHashSet();










 propagated=true;










 }










 










 @Override



......@@ -46,160 +37,97 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends Resolver<Fiel









 return "<"+resolvedAccPath+":"+returnSite+">";










 }










 










 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 }










 










 protected AccessPath<Field> getAccessPathOf(ReturnEdge<Field, Fact, Stmt, Method> inc) {










 return inc.incAccessPath;










 }










 










 public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, 










 Delta<Field> callDelta) {










 










 addIncoming(new ReturnEdge(fact, resolverAtCaller, callDelta));










 addIncoming(new ReturnEdge<Field, Fact, Stmt, Method>(fact, resolverAtCaller, callDelta));










 }










 










 private void addIncoming(final ReturnEdge retEdge) {










 if(resolvedAccPath.isPrefixOf(retEdge.incAccessPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge "+retEdge);










 if(!incomingFacts.add(retEdge))










 return;





















 interest(analyzer, this);










 










 for(ReturnSiteResolver<Field, Fact, Stmt, Method> nestedResolver : nestedResolvers.values())










 nestedResolver.addIncoming(nestedResolver.new ReturnEdge(retEdge.incFact, retEdge.incAccessPath, retEdge.incResolver, 










 retEdge.resolverAtCaller, retEdge.callDelta, retEdge.usedAccessPathOfIncResolver));





















 if(!propagated) {










 propagated=true;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<>(retEdge.incFact, new AccessPath<Field>(), this)));










 }










 }










 else if(retEdge.incAccessPath.isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 log("Incoming potential prefix:  "+retEdge);










 retEdge.resolveViaDelta();










 protected void processIncomingGuaranteedPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(!propagated) {










 propagated=true;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<>(retEdge.incFact, new AccessPath<Field>(), this)));










 }










 }










 };










 










 protected void processIncomingPotentialPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 log("Incoming potential prefix:  "+retEdge);










 resolveViaDelta(retEdge);










 };










 










 protected void log(String message) {










 analyzer.log("Return Site "+toString()+": "+message);










 }





















 @Override










 public void resolve(Constraint<Field> constraint, final InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(!constraint.canBeAppliedTo(resolvedAccPath))










 return;










 










 AccessPath<Field> candidateAccPath = constraint.applyToAccessPath(resolvedAccPath);










 ReturnSiteResolver<Field, Fact, Stmt, Method> nestedResolver = getOrCreateNestedResolver(candidateAccPath);










 if(!nestedResolver.resolvedAccPath.equals(constraint.applyToAccessPath(resolvedAccPath)))










 throw new AssertionError();










 










 nestedResolver.registerCallback(callback);










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<>(analyzer, returnSite, newAccPath, this);










 }










 










 private ReturnSiteResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> candidateAccPath) {










 if(resolvedAccPath.equals(candidateAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(candidateAccPath)) {










 assert resolvedAccPath.getDeltaTo(candidateAccPath).accesses.length <= 1;










 final ReturnSiteResolver<Field, Fact, Stmt, Method> nestedResolver = new ReturnSiteResolver<>(analyzer, returnSite, candidateAccPath, this);










 nestedResolver.propagated = true;










 nestedResolvers.put(candidateAccPath, nestedResolver);





















 for(ReturnSiteResolver<Field, Fact, Stmt, Method>.ReturnEdge retEdge: incomingFacts) {










 nestedResolver.addIncoming(nestedResolver.new ReturnEdge(retEdge.incFact, retEdge.incAccessPath, retEdge.incResolver, 










 retEdge.resolverAtCaller, retEdge.callDelta, retEdge.usedAccessPathOfIncResolver));










 } 










 }










 return nestedResolvers.get(candidateAccPath);










 public Stmt getReturnSite() {










 return returnSite;










 }










 










 private class ReturnEdge {





















 final Fact incFact;










 final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 final Delta<Field> callDelta;










 final AccessPath<Field> incAccessPath;










 final Resolver<Field, Fact, Stmt, Method> incResolver;










 final Delta<Field> usedAccessPathOfIncResolver;





















 public ReturnEdge(WrappedFact<Field, Fact, Stmt, Method> fact, Resolver<Field, Fact, Stmt, Method> resolverAtCaller,










 Delta<Field> callDelta) {










 this(fact.getFact(), fact.getAccessPath(), fact.getResolver(), resolverAtCaller, callDelta, Delta.<Field>empty());










 }










 










 private ReturnEdge(Fact incFact, AccessPath<Field> incAccessPath, Resolver<Field, Fact, Stmt, Method> incResolver, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, Delta<Field> callDelta, Delta<Field> usedAccessPathOfIncResolver) {










 this.incFact = incFact;










 this.incAccessPath = incAccessPath;










 this.incResolver = incResolver;










 this.resolverAtCaller = resolverAtCaller;










 this.callDelta = callDelta;










 this.usedAccessPathOfIncResolver = usedAccessPathOfIncResolver;










 }










 










 @Override










 public String toString() {










 return String.format("IncFact: %s%s, Delta: %s, IncResolver: <%s:%s>, ResolverAtCallSite: %s", incFact, incAccessPath, callDelta, usedAccessPathOfIncResolver, incResolver, resolverAtCaller);










 }










 










 public void resolveViaDelta() {










 if(incResolver == null || incResolver instanceof CallEdgeResolver) {










 resolveViaDeltaAndPotentiallyDelegateToCallSite();










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = usedAccessPathOfIncResolver.applyTo(incAccessPath).getDeltaTo(resolvedAccPath);










 assert delta.accesses.length <= 1;










 incResolver.resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {





















 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingFacts.add(new ReturnEdge(incFact, incAccessPath, resolver, resolverAtCaller, callDelta, incAccessPath.getDeltaTo(resolvedAccPath)));










 ReturnSiteResolver.this.interest(analyzer, resolver);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 resolveViaDeltaAndPotentiallyDelegateToCallSite();










 }










 });










 } 










 }





















 private void resolveViaDeltaAndPotentiallyDelegateToCallSite() {










 final AccessPath<Field> currAccPath = callDelta.applyTo(usedAccessPathOfIncResolver.applyTo(incAccessPath));










 if(resolvedAccPath.isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingFacts.add(new ReturnEdge(incFact, incAccessPath, null, resolverAtCaller, callDelta, usedAccessPathOfIncResolver));










 ReturnSiteResolver.this.interest(analyzer, ReturnSiteResolver.this);










 } else if(currAccPath.isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(currAccPath);










 }










 }










 private void resolveViaDelta(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(retEdge.incResolver == null || retEdge.incResolver instanceof CallEdgeResolver) {










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPath());










 assert delta.accesses.length <= 1;










 retEdge.incResolver.resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {





















 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(analyzer, resolver);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 }










 });










 } 










 }





















 protected void resolveViaCallSiteResolver(AccessPath<Field> currAccPath) {










 if(resolverAtCaller == null || resolverAtCaller instanceof CallEdgeResolver) {










 ReturnSiteResolver.this.canBeResolvedEmpty();










 } else {










 resolverAtCaller.resolve(new DeltaConstraint<>(currAccPath.getDeltaTo(resolvedAccPath)), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingFacts.add(new ReturnEdge(incFact, incAccessPath, null, resolver, Delta.<Field>empty(), incAccessPath.getDeltaTo(resolvedAccPath)));










 ReturnSiteResolver.this.interest(analyzer, ReturnSiteResolver.this);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 ReturnSiteResolver.this.canBeResolvedEmpty();










 }










 });










 }










 private void resolveViaDeltaAndPotentiallyDelegateToCallSite(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath));










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest(analyzer, this);










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }










 }





















 public Stmt getReturnSite() {










 return returnSite;










 protected void resolveViaCallSiteResolver(final ReturnEdge<Field, Fact, Stmt, Method> retEdge, AccessPath<Field> currAccPath) {










 if(retEdge.resolverAtCaller == null || retEdge.resolverAtCaller instanceof CallEdgeResolver) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(analyzer, ReturnSiteResolver.this);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 ReturnSiteResolver.this.canBeResolvedEmpty();










 }










 });










 }










 }










}














src/heros/alias/bidi/SourceStmtAnnotatedMethodAnalyzer.java

â†’

src/heros/alias/SourceStmtAnnotatedMethodAnalyzer.java








View file @ 90319070






......@@ -8,16 +8,8 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias.bidi;










package heros.alias;





















import heros.alias.AccessPath;










import heros.alias.CacheMap;










import heros.alias.Context;










import heros.alias.IncomingEdge;










import heros.alias.MethodAnalyzer;










import heros.alias.PerAccessPathMethodAnalyzer;










import heros.alias.WrappedFact;










import heros.alias.WrappedFactAtStatement;





















public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>










 implements MethodAnalyzer<Field, Fact, Stmt, Method> {



......@@ -40,11 +32,10 @@ public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>









 }










 










 @Override










 public void addIncomingEdge(IncomingEdge<Field, Fact, Stmt, Method> incEdge) {










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact = incEdge.getCalleeSourceFact();










 Key<Fact, Stmt> key = new Key<Fact, Stmt>(calleeSourceFact.getFact(), null);










 PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer = perSourceAnalyzer.getOrCreate(key);










 analyzer.bootstrapAtMethodStartPoints();










 analyzer.addIncomingEdge(incEdge); 










 }














......














src/heros/alias/WrappedFactAtStatement.java








View file @ 90319070






......@@ -20,9 +20,21 @@ public class WrappedFactAtStatement<Field, Fact, Stmt, Method> {









 this.fact = fact;










 }





















 public WrappedFact<Field,Fact, Stmt, Method> getFact() {










 public WrappedFact<Field,Fact, Stmt, Method> getWrappedFact() {










 return fact;










 }










 










 public Fact getFact() {










 return fact.getFact();










 }










 










 public AccessPath<Field> getAccessPath() {










 return fact.getAccessPath();










 }










 










 public Resolver<Field, Fact, Stmt, Method> getResolver() {










 return fact.getResolver();










 }





















 public Stmt getStatement() {










 return stmt;



......














src/heros/alias/ZeroCallEdgeResolver.java








View file @ 90319070






......@@ -10,7 +10,6 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.AccessPath.Delta;










import heros.alias.FlowFunction.Constraint;





















public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeResolver<Field, Fact, Stmt, Method> {



......@@ -31,4 +30,9 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 }










 










 @Override










 protected ZeroCallEdgeResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 return this;










 }










}














src/heros/alias/ZeroHandler.java








View file @ 90319070






......@@ -12,5 +12,11 @@ package heros.alias;




















public interface ZeroHandler<Field> {





















 /**










	 * If reading fields on a fact abstraction directly connected to a Zero fact, this handler is consulted










	 * to decide if the field may be read. 










	 * @param accPath The AccessPath consisting of fields already read in addition to a new field to be read.










	 * @return true if the AccessPath can be generated from within the Zero fact, false otherwise.










	 */










 boolean shouldGenerateAccessPath(AccessPath<Field> accPath);










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

90319070















Commit
90319070


authored
Apr 01, 2015
by


Johannes Lerch



Browse files




refactoring







parent
eb98a856













Changes
20




Expand all
Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPath.java








View file @ 90319070






......@@ -144,22 +144,6 @@ public class AccessPath<T> {









 return delta;










 }










 










 //FIXME this is an unsound dirty hack










 public boolean contains(AccessPath<T> accPath) {










 assert accPath.accesses.length <= 1;










 if(accPath.accesses.length == 1) {










 for(T sub : accesses) {










 if(sub.equals(accPath.accesses[0])) {










 return true;










 }










 }










 return false;










 }










 else










 return exclusions.containsAll(accPath.exclusions);










 }










 










 










 public static class Delta<T> {










 final T[] accesses;










 final Set<T> exclusions;



......














src/heros/alias/BiDiFieldSensitiveIFDSSolver.java








View file @ 90319070






......@@ -12,9 +12,10 @@ package heros.alias;































import heros.InterproceduralCFG;










import heros.alias.bidi.SourceStmtAnnotatedMethodAnalyzer;










import heros.alias.bidi.SourceStmtAnnotatedMethodAnalyzer.Synchronizer;










import heros.alias.SourceStmtAnnotatedMethodAnalyzer.Synchronizer;





















import java.util.Set;





















import com.google.common.collect.HashMultimap;










import com.google.common.collect.Sets;














......














src/heros/alias/IncomingEdge.java

â†’

src/heros/alias/CallEdge.java








View file @ 90319070






......@@ -13,13 +13,13 @@ package heros.alias;









import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;





















public class IncomingEdge<Field, Fact, Stmt, Method> {










public class CallEdge<Field, Fact, Stmt, Method> {





















 private WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact;










 private PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> callerAnalyzer;










 private WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtCallSite;










 










 public IncomingEdge(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> callerAnalyzer, 










 public CallEdge(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> callerAnalyzer, 










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtCallSite,










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact) {










 this.callerAnalyzer = callerAnalyzer;



......@@ -32,7 +32,7 @@ public class IncomingEdge<Field, Fact, Stmt, Method> {









 }










 










 public WrappedFact<Field, Fact, Stmt, Method> getCallerCallSiteFact() {










 return factAtCallSite.getFact();










 return factAtCallSite.getWrappedFact();










 }










 










 public WrappedFact<Field, Fact, Stmt, Method> getCallerSourceFact() {



......@@ -53,16 +53,16 @@ public class IncomingEdge<Field, Fact, Stmt, Method> {









 if(!factAtCallSite.canDeltaBeApplied(delta))










 return;










 










 factAtCallSite.getFact().getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 factAtCallSite.getWrappedFact().getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFactWithDelta = new WrappedFact<>(calleeSourceFact.getFact(), delta.applyTo(calleeSourceFact.getAccessPath()), resolver);










 if(interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath()) != PrefixTestResult.GUARANTEED_PREFIX)










 throw new AssertionError();










 interestedAnalyzer.addIncomingEdge(new IncomingEdge<>(analyzer, 










 interestedAnalyzer.addIncomingEdge(new CallEdge<>(analyzer, 










 new WrappedFactAtStatement<>(factAtCallSite.getStatement(), 










 new WrappedFact<>(factAtCallSite.getFact().getFact(), delta.applyTo(factAtCallSite.getFact().getAccessPath()), resolver)), 










 new WrappedFact<>(factAtCallSite.getWrappedFact().getFact(), delta.applyTo(factAtCallSite.getWrappedFact().getAccessPath()), resolver)), 










 calleeSourceFactWithDelta));










 }










 



......@@ -96,7 +96,7 @@ public class IncomingEdge<Field, Fact, Stmt, Method> {









 return false;










 if (getClass() != obj.getClass())










 return false;










 IncomingEdge other = (IncomingEdge) obj;










 CallEdge other = (CallEdge) obj;










 if (calleeSourceFact == null) {










 if (other.calleeSourceFact != null)










 return false;



......














src/heros/alias/CallEdgeResolver.java








View file @ 90319070






......@@ -10,31 +10,52 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.Constraint;










import com.google.common.collect.Lists;
































class CallEdgeResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {










class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> {





















 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 super(analyzer);










 this(analyzer, null);










 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 }





















 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) { 










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(analyzer.getAccessPath()) && !analyzer.isLocked() && !doesContain(constraint)) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(analyzer.getAccessPath());










 PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method> nestedAnalyzer = analyzer.getOrCreateNestedAnalyzer(newAccPath);










 nestedAnalyzer.getCallEdgeResolver().registerCallback(callback);










 }










 protected AccessPath<Field> getResolvedAccessPath() {










 return analyzer.getAccessPath();










 }










 










 @Override










 protected AccessPath<Field> getAccessPathOf(CallEdge<Field, Fact, Stmt, Method> inc) {










 return inc.getCalleeSourceFact().getAccessPath();










 }










 










 @Override










 protected void processIncomingGuaranteedPrefix(CallEdge<Field, Fact, Stmt, Method> inc) {










 analyzer.applySummaries(inc);










 }










 










 //FIXME: this is a dirty hack (and unsound?!)










 private boolean doesContain(Constraint<Field> constraint) {










 AccessPath<Field> accPath = constraint.applyToAccessPath(new AccessPath<Field>());










 return analyzer.getAccessPath().contains(accPath);










 @Override










 protected void processIncomingPotentialPrefix(CallEdge<Field, Fact, Stmt, Method> inc) {










 lock();










 inc.registerInterestCallback(analyzer);










 unlock();










 }





















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return analyzer.createWithAccessPath(newAccPath).getCallEdgeResolver();










 }










 










 public void applySummaries(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 for(CallEdge<Field, Fact, Stmt, Method> incEdge : Lists.newLinkedList(incomingEdges)) {










 analyzer.applySummary(incEdge, factAtStmt);










 }










 }










 










 @Override










 public String toString() {










 return "";



......@@ -45,5 +66,9 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact,









 analyzer.log(message);










 }





















 public boolean hasIncomingEdges() {










 return !incomingEdges.isEmpty();










 }
































}




\ No newline at end of file














src/heros/alias/Context.java








View file @ 90319070






......@@ -12,26 +12,26 @@ package heros.alias;




















import heros.InterproceduralCFG;





















public abstract class Context<FieldRef, FactAbstraction, Statement, Method> {










public abstract class Context<Field, Fact, Stmt, Method> {





















 public final InterproceduralCFG<Statement, Method> icfg;










 public final FlowFunctionProcessor<FactAbstraction, Statement, Method, FieldRef> flowProcessor;










 public final InterproceduralCFG<Stmt, Method> icfg;










 public final Scheduler scheduler;










 public final FactAbstraction zeroValue;










 public final Fact zeroValue;










 public final boolean followReturnsPastSeeds;










 public final FactMergeHandler<FactAbstraction> factHandler;










 public final ZeroHandler<FieldRef> zeroHandler;










 public final FactMergeHandler<Fact> factHandler;










 public final ZeroHandler<Field> zeroHandler;










 public final FlowFunctions<Stmt, Field, Fact, Method> flowFunctions;










 










 Context(InterproceduralCFG<Statement, Method> icfg, FlowFunctionProcessor<FactAbstraction, Statement, Method, FieldRef> flowProcessor, 










 Scheduler scheduler, FactAbstraction zeroValue, boolean followReturnsPastSeeds, FactMergeHandler<FactAbstraction> factHandler, ZeroHandler<FieldRef> zeroHandler) {










 this.icfg = icfg;










 this.flowProcessor = flowProcessor;










 Context(IFDSTabulationProblem<Stmt, Field, Fact, Method, ? extends InterproceduralCFG<Stmt, Method>> tabulationProblem, 










 Scheduler scheduler, FactMergeHandler<Fact> factHandler) {










 this.icfg = tabulationProblem.interproceduralCFG();










 this.flowFunctions = tabulationProblem.flowFunctions();










 this.scheduler = scheduler;










 this.zeroValue = zeroValue;










 this.followReturnsPastSeeds = followReturnsPastSeeds;










 this.zeroValue = tabulationProblem.zeroValue();










 this.followReturnsPastSeeds = tabulationProblem.followReturnsPastSeeds();










 this.factHandler = factHandler;










 this.zeroHandler = zeroHandler;










 this.zeroHandler = tabulationProblem.zeroHandler();










 }










 










 public abstract MethodAnalyzer<FieldRef, FactAbstraction, Statement, Method> getAnalyzer(Method method);










 public abstract MethodAnalyzer<Field, Fact, Stmt, Method> getAnalyzer(Method method);










}














src/heros/alias/ControlFlowJoinResolver.java








View file @ 90319070






......@@ -10,110 +10,61 @@









 ******************************************************************************/










package heros.alias;





















import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.Constraint;





















public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {










public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {





















 private boolean recursiveLock = false;










 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private Set<WrappedFact<Field, Fact, Stmt, Method>> incomingFacts = Sets.newHashSet();










 private boolean propagated = false;










 private Map<AccessPath<Field>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> nestedResolvers = Maps.newHashMap();










 private ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent;





















 public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(analyzer, joinStmt, new AccessPath<Field>(), null);










 propagated=false;










 }










 










 private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer);










 super(analyzer, parent);










 this.joinStmt = joinStmt;










 this.resolvedAccPath = resolvedAccPath;










 this.parent = parent;










 }





















 public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact) {










 if(resolvedAccPath.isPrefixOf(fact.getAccessPath()) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Fact "+fact);










 if(!incomingFacts.add(fact))










 return;










 










 interest(analyzer, this);










 for(ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver : nestedResolvers.values())










 nestedResolver.addIncoming(fact);










 










 if(!propagated) {










 propagated=true;










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }










 }










 else if(fact.getAccessPath().isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);










 }





















 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 }










 propagated=true;










 }










 










 private boolean isLocked() {










 if(recursiveLock)










 return true;










 if(parent == null)










 return false;










 return parent.isLocked();










 @Override










 protected AccessPath<Field> getAccessPathOf(WrappedFact<Field, Fact, Stmt, Method> inc) {










 return inc.getAccessPath();










 }





















 protected void processIncomingGuaranteedPrefix(heros.alias.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 propagated=true;










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }










 };










 










 @Override










 public void resolve(Constraint<Field> constraint, final InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(!constraint.canBeAppliedTo(resolvedAccPath) || isLocked())










 return;










 










 AccessPath<Field> candidateAccPath = constraint.applyToAccessPath(resolvedAccPath);










 recursiveLock = true;










 ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = getOrCreateNestedResolver(candidateAccPath);










 if(!nestedResolver.resolvedAccPath.equals(constraint.applyToAccessPath(resolvedAccPath)))










 throw new AssertionError();










 










 nestedResolver.registerCallback(callback);










 recursiveLock = false;










 protected void processIncomingPotentialPrefix(WrappedFact<Field, Fact, Stmt, Method> fact) {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);










 }





















 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 unlock();










 }










 










 private ControlFlowJoinResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> candidateAccPath) {










 if(resolvedAccPath.equals(candidateAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(candidateAccPath)) {










 assert resolvedAccPath.getDeltaTo(candidateAccPath).accesses.length <= 1;










 










 final ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = new ControlFlowJoinResolver<>(analyzer, joinStmt, candidateAccPath, this);










 nestedResolver.propagated = true;










 nestedResolvers.put(candidateAccPath, nestedResolver);





















 for(WrappedFact<Field, Fact, Stmt, Method> incFact: incomingFacts) {










 nestedResolver.addIncoming(incFact);










 } 










 }










 return nestedResolvers.get(candidateAccPath);










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<>(analyzer, joinStmt, newAccPath, this);










 }





















 @Override



......@@ -126,6 +77,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 return "<"+resolvedAccPath+":"+joinStmt+">";










 }





















 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 }



......














src/heros/alias/FactMergeHandler.java








View file @ 90319070






......@@ -12,7 +12,17 @@ package heros.alias;




















public interface FactMergeHandler<Fact> {





















 /**










	 * Called when propagating a Fact to a statement at which an equal Fact was already propagated to.










	 * @param previousFact The Fact instance that was propagated to the statement first.










	 * @param currentFact The Fact that was propagated to the statement last.










	 */










 void merge(Fact previousFact, Fact currentFact);










 










 /**










	 * Called on Facts being propagated over a return edge. Via this method context can be restored that was abstracted when propagating over the call edge.










	 * @param factAtReturnSite The fact being propagated over the return edge.










	 * @param factAtCallSite The Fact that was present at the call site, i.e., the Fact used as input to the call flow function.










	 */










 void restoreCallingContext(Fact factAtReturnSite, Fact factAtCallSite);










}














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 90319070






......@@ -18,10 +18,11 @@ import java.util.Set;









import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















import com.sun.istack.internal.Nullable;





















public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends InterproceduralCFG<N, M>> {





















 protected static final Logger logger = LoggerFactory.getLogger(FieldSensitiveIFDSSolver.class);










 private FlowFunctionProcessor<D, N, M, FieldRef> flowProcessor;










 










 private CacheMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new CacheMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {










 @Override



......@@ -35,19 +36,17 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur









 private Debugger<FieldRef, D, N, M, I> debugger;










 private Scheduler scheduler;





















 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, @Nullable Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 this.tabulationProblem = tabulationProblem;










 this.scheduler = scheduler;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;










 this.debugger.setICFG(tabulationProblem.interproceduralCFG());










 flowProcessor = new FlowFunctionProcessor<>(tabulationProblem.flowFunctions());










 context = initContext(tabulationProblem, factHandler);










 submitInitialSeeds();










 }





















 protected Context<FieldRef, D, N, M> initContext(IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem, FactMergeHandler<D> factHandler) {










 return new Context<FieldRef, D, N, M>(tabulationProblem.interproceduralCFG(), flowProcessor, scheduler, tabulationProblem.zeroValue(), 










 tabulationProblem.followReturnsPastSeeds(), factHandler, tabulationProblem.zeroHandler()) {










 private Context<FieldRef, D, N, M> initContext(IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem, FactMergeHandler<D> factHandler) {










 return new Context<FieldRef, D, N, M>(tabulationProblem, scheduler, factHandler) {










 @Override










 public MethodAnalyzer<FieldRef, D, N, M> getAnalyzer(M method) {










 if(method == null)



......@@ -63,10 +62,8 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 /**










	 * Schedules the processing of initial seeds, initiating the analysis.










	 * Clients should only call this methods if performing synchronization on










	 * their own. Normally, {@link #solve()} should be called instead.










	 */










 protected void submitInitialSeeds() {










 private void submitInitialSeeds() {










 for(Entry<N, Set<D>> seed: tabulationProblem.initialSeeds().entrySet()) {










 N startPoint = seed.getKey();










 MethodAnalyzer<FieldRef, D,N,M> analyzer = methodAnalyzers.getOrCreate(tabulationProblem.interproceduralCFG().getMethodOf(startPoint));



......














src/heros/alias/FlowFunctionProcessor.java

deleted


100644 â†’ 0







View file @ eb98a856













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.ConstrainedFact;





















import java.util.Set;





















import com.google.common.collect.Sets;





















public class FlowFunctionProcessor<Fact, Stmt, Method, Field> {





















 private FlowFunctions<Stmt, Field, Fact, Method> flowFunctions;





















 public FlowFunctionProcessor(FlowFunctions<Stmt, Field, Fact, Method> flowFunctions) {










 this.flowFunctions = flowFunctions;










 }










 










 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeNormalFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> source) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getNormalFlowFunction(source.getStatement());










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }










 










 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeCallFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> source, Method calledMethod) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getCallFlowFunction(source.getStatement(), calledMethod);










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }





















 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeCallToReturnFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> source, Stmt returnSite) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getCallToReturnFlowFunction(source.getStatement(), returnSite);










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }





















 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeReturnFlow(FactMergeHandler<Fact> factHandler, WrappedFactAtStatement<Field, Fact, Stmt, Method> source, Method calleeMethod, Stmt returnSite,










 IncomingEdge<Field, Fact, Stmt, Method> incEdge) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getReturnFlowFunction(incEdge.getCallSite(), calleeMethod, source.getStatement(), returnSite);










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 










 for (ConstrainedFact<Field, Fact, Stmt, Method> constrainedFact : targets) {










 factHandler.restoreCallingContext(constrainedFact.getFact().getFact(), incEdge.getCallerCallSiteFact().getFact());










 }










 return targets;










 }





















 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeUnbalancedReturnFlow(Fact zero, WrappedFactAtStatement<Field, Fact, Stmt, Method> source, 










 Method calleeMethod, Stmt returnSite, Stmt callSite) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getReturnFlowFunction(callSite, calleeMethod, source.getStatement(), returnSite);










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }










}














src/heros/alias/MethodAnalyzer.java








View file @ 90319070






......@@ -12,7 +12,7 @@ package heros.alias;




















public interface MethodAnalyzer<Field,Fact,Stmt,Method> {





















 public void addIncomingEdge(IncomingEdge<Field, Fact, Stmt, Method> incEdge);










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge);










 










 public void addInitialSeed(Stmt startPoint, Fact val);










 



......














src/heros/alias/MethodAnalyzerImpl.java








View file @ 90319070






......@@ -29,10 +29,9 @@ public class MethodAnalyzerImpl<Field,Fact, Stmt, Method>









 }










 










 @Override










 public void addIncomingEdge(IncomingEdge<Field, Fact, Stmt, Method> incEdge) {










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact = incEdge.getCalleeSourceFact();










 PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer = perSourceAnalyzer.getOrCreate(calleeSourceFact.getFact());










 analyzer.bootstrapAtMethodStartPoints();










 analyzer.addIncomingEdge(incEdge);










 }














......














src/heros/alias/PerAccessPathMethodAnalyzer.java








View file @ 90319070





This diff is collapsed.
Click to expand it.













src/heros/alias/Resolver.java








View file @ 90319070






......@@ -10,15 +10,12 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.Constraint;





















import java.util.List;










import java.util.Map;





















import com.google.common.collect.HashMultimap;










import com.google.common.collect.Lists;





















import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;





















public abstract class Resolver<Field, Fact, Stmt, Method> {





















 private boolean interest = false;



......














src/heros/alias/ResolverTemplate.java



0 â†’ 100644







View file @ 90319070













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.Constraint;
































public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming> extends Resolver<Field, Fact, Stmt, Method> {





















 private boolean recursionLock = false;










 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent) {










 super(analyzer);










 this.parent = parent;










 }










 










 protected boolean isLocked() {










 if(recursionLock)










 return true;










 if(parent == null)










 return false;










 return parent.isLocked();










 }





















 protected void lock() {










 recursionLock = true;










 }










 










 protected void unlock() {










 recursionLock = false;










 }










 










 protected abstract AccessPath<Field> getResolvedAccessPath();










 










 protected abstract AccessPath<Field> getAccessPathOf(Incoming inc);










 










 public void addIncoming(Incoming inc) {










 if(getResolvedAccessPath().isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge: "+inc);










 if(!incomingEdges.add(inc))










 return;










 










 interest(analyzer, this);










 










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : nestedResolvers.values()) {










 nestedResolver.addIncoming(inc);










 }










 










 processIncomingGuaranteedPrefix(inc);










 }










 else if(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 processIncomingPotentialPrefix(inc);










 }










 }





















 protected abstract void processIncomingPotentialPrefix(Incoming inc);





















 protected abstract void processIncomingGuaranteedPrefix(Incoming inc);










 










 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(getResolvedAccessPath()) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(getResolvedAccessPath());










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = getOrCreateNestedResolver(newAccPath);










 assert nestedResolver.getResolvedAccessPath().equals(constraint.applyToAccessPath(getResolvedAccessPath()));










 nestedResolver.registerCallback(callback);










 }










 }





















 protected ResolverTemplate<Field, Fact, Stmt, Method, Incoming> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 if(getResolvedAccessPath().equals(newAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(newAccPath)) {










 assert getResolvedAccessPath().getDeltaTo(newAccPath).accesses.length <= 1;










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = createNestedResolver(newAccPath);










 nestedResolvers.put(newAccPath, nestedResolver);










 










 for(Incoming inc : incomingEdges) {










 nestedResolver.addIncoming(inc);










 }










 }










 return nestedResolvers.get(newAccPath);










 }










 










 protected abstract ResolverTemplate<Field, Fact, Stmt, Method, Incoming> createNestedResolver(AccessPath<Field> newAccPath);










}




\ No newline at end of file














src/heros/alias/ReturnEdge.java



0 â†’ 100644







View file @ 90319070













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;





















class ReturnEdge<Field, Fact, Stmt, Method> {





















 final Fact incFact;










 final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 final Delta<Field> callDelta;










 final AccessPath<Field> incAccessPath;










 final Resolver<Field, Fact, Stmt, Method> incResolver;










 final Delta<Field> usedAccessPathOfIncResolver;





















 public ReturnEdge(WrappedFact<Field, Fact, Stmt, Method> fact, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller,










 Delta<Field> callDelta) {










 this(fact.getFact(), fact.getAccessPath(), fact.getResolver(), resolverAtCaller, callDelta, Delta.<Field>empty());










 }










 










 private ReturnEdge(Fact incFact, 










 AccessPath<Field> incAccessPath, 










 Resolver<Field, Fact, Stmt, Method> incResolver, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, 










 Delta<Field> callDelta, 










 Delta<Field> usedAccessPathOfIncResolver) {










 this.incFact = incFact;










 this.incAccessPath = incAccessPath;










 this.incResolver = incResolver;










 this.resolverAtCaller = resolverAtCaller;










 this.callDelta = callDelta;










 this.usedAccessPathOfIncResolver = usedAccessPathOfIncResolver;










 }










 










 public ReturnEdge<Field, Fact, Stmt, Method> copyWithIncomingResolver(










 Resolver<Field, Fact, Stmt, Method> incResolver, Delta<Field> usedAccessPathOfIncResolver) {










 return new ReturnEdge<>(incFact, incAccessPath, incResolver, resolverAtCaller, callDelta, usedAccessPathOfIncResolver);










 }










 










 public ReturnEdge<Field, Fact, Stmt, Method> copyWithResolverAtCaller(










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, Delta<Field> usedAccessPathOfIncResolver) {










 return new ReturnEdge<>(incFact, incAccessPath, null, resolverAtCaller, callDelta, usedAccessPathOfIncResolver);










 }










 










 @Override










 public String toString() {










 return String.format("IncFact: %s%s, Delta: %s, IncResolver: <%s:%s>, ResolverAtCallSite: %s", incFact, incAccessPath, callDelta, usedAccessPathOfIncResolver, incResolver, resolverAtCaller);










 }










 










 










}




\ No newline at end of file














src/heros/alias/ReturnSiteResolver.java








View file @ 90319070






......@@ -12,33 +12,24 @@ package heros.alias;




















import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.Constraint;





















import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {










public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {





















 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Set<ReturnEdge> incomingFacts;










 private Map<AccessPath<Field>, ReturnSiteResolver<Field, Fact, Stmt, Method>> nestedResolvers = Maps.newHashMap();










 private ReturnSiteResolver<Field, Fact, Stmt, Method> parent;





















 public ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(analyzer, returnSite, new AccessPath<Field>(), null);










 propagated = false;










 }





















 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer);










 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 this.returnSite = returnSite;










 this.resolvedAccPath = resolvedAccPath;










 this.parent = parent;










 this.incomingFacts = Sets.newHashSet();










 propagated=true;










 }










 










 @Override



......@@ -46,160 +37,97 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends Resolver<Fiel









 return "<"+resolvedAccPath+":"+returnSite+">";










 }










 










 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 }










 










 protected AccessPath<Field> getAccessPathOf(ReturnEdge<Field, Fact, Stmt, Method> inc) {










 return inc.incAccessPath;










 }










 










 public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, 










 Delta<Field> callDelta) {










 










 addIncoming(new ReturnEdge(fact, resolverAtCaller, callDelta));










 addIncoming(new ReturnEdge<Field, Fact, Stmt, Method>(fact, resolverAtCaller, callDelta));










 }










 










 private void addIncoming(final ReturnEdge retEdge) {










 if(resolvedAccPath.isPrefixOf(retEdge.incAccessPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge "+retEdge);










 if(!incomingFacts.add(retEdge))










 return;





















 interest(analyzer, this);










 










 for(ReturnSiteResolver<Field, Fact, Stmt, Method> nestedResolver : nestedResolvers.values())










 nestedResolver.addIncoming(nestedResolver.new ReturnEdge(retEdge.incFact, retEdge.incAccessPath, retEdge.incResolver, 










 retEdge.resolverAtCaller, retEdge.callDelta, retEdge.usedAccessPathOfIncResolver));





















 if(!propagated) {










 propagated=true;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<>(retEdge.incFact, new AccessPath<Field>(), this)));










 }










 }










 else if(retEdge.incAccessPath.isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 log("Incoming potential prefix:  "+retEdge);










 retEdge.resolveViaDelta();










 protected void processIncomingGuaranteedPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(!propagated) {










 propagated=true;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<>(retEdge.incFact, new AccessPath<Field>(), this)));










 }










 }










 };










 










 protected void processIncomingPotentialPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 log("Incoming potential prefix:  "+retEdge);










 resolveViaDelta(retEdge);










 };










 










 protected void log(String message) {










 analyzer.log("Return Site "+toString()+": "+message);










 }





















 @Override










 public void resolve(Constraint<Field> constraint, final InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(!constraint.canBeAppliedTo(resolvedAccPath))










 return;










 










 AccessPath<Field> candidateAccPath = constraint.applyToAccessPath(resolvedAccPath);










 ReturnSiteResolver<Field, Fact, Stmt, Method> nestedResolver = getOrCreateNestedResolver(candidateAccPath);










 if(!nestedResolver.resolvedAccPath.equals(constraint.applyToAccessPath(resolvedAccPath)))










 throw new AssertionError();










 










 nestedResolver.registerCallback(callback);










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<>(analyzer, returnSite, newAccPath, this);










 }










 










 private ReturnSiteResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> candidateAccPath) {










 if(resolvedAccPath.equals(candidateAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(candidateAccPath)) {










 assert resolvedAccPath.getDeltaTo(candidateAccPath).accesses.length <= 1;










 final ReturnSiteResolver<Field, Fact, Stmt, Method> nestedResolver = new ReturnSiteResolver<>(analyzer, returnSite, candidateAccPath, this);










 nestedResolver.propagated = true;










 nestedResolvers.put(candidateAccPath, nestedResolver);





















 for(ReturnSiteResolver<Field, Fact, Stmt, Method>.ReturnEdge retEdge: incomingFacts) {










 nestedResolver.addIncoming(nestedResolver.new ReturnEdge(retEdge.incFact, retEdge.incAccessPath, retEdge.incResolver, 










 retEdge.resolverAtCaller, retEdge.callDelta, retEdge.usedAccessPathOfIncResolver));










 } 










 }










 return nestedResolvers.get(candidateAccPath);










 public Stmt getReturnSite() {










 return returnSite;










 }










 










 private class ReturnEdge {





















 final Fact incFact;










 final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 final Delta<Field> callDelta;










 final AccessPath<Field> incAccessPath;










 final Resolver<Field, Fact, Stmt, Method> incResolver;










 final Delta<Field> usedAccessPathOfIncResolver;





















 public ReturnEdge(WrappedFact<Field, Fact, Stmt, Method> fact, Resolver<Field, Fact, Stmt, Method> resolverAtCaller,










 Delta<Field> callDelta) {










 this(fact.getFact(), fact.getAccessPath(), fact.getResolver(), resolverAtCaller, callDelta, Delta.<Field>empty());










 }










 










 private ReturnEdge(Fact incFact, AccessPath<Field> incAccessPath, Resolver<Field, Fact, Stmt, Method> incResolver, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, Delta<Field> callDelta, Delta<Field> usedAccessPathOfIncResolver) {










 this.incFact = incFact;










 this.incAccessPath = incAccessPath;










 this.incResolver = incResolver;










 this.resolverAtCaller = resolverAtCaller;










 this.callDelta = callDelta;










 this.usedAccessPathOfIncResolver = usedAccessPathOfIncResolver;










 }










 










 @Override










 public String toString() {










 return String.format("IncFact: %s%s, Delta: %s, IncResolver: <%s:%s>, ResolverAtCallSite: %s", incFact, incAccessPath, callDelta, usedAccessPathOfIncResolver, incResolver, resolverAtCaller);










 }










 










 public void resolveViaDelta() {










 if(incResolver == null || incResolver instanceof CallEdgeResolver) {










 resolveViaDeltaAndPotentiallyDelegateToCallSite();










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = usedAccessPathOfIncResolver.applyTo(incAccessPath).getDeltaTo(resolvedAccPath);










 assert delta.accesses.length <= 1;










 incResolver.resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {





















 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingFacts.add(new ReturnEdge(incFact, incAccessPath, resolver, resolverAtCaller, callDelta, incAccessPath.getDeltaTo(resolvedAccPath)));










 ReturnSiteResolver.this.interest(analyzer, resolver);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 resolveViaDeltaAndPotentiallyDelegateToCallSite();










 }










 });










 } 










 }





















 private void resolveViaDeltaAndPotentiallyDelegateToCallSite() {










 final AccessPath<Field> currAccPath = callDelta.applyTo(usedAccessPathOfIncResolver.applyTo(incAccessPath));










 if(resolvedAccPath.isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingFacts.add(new ReturnEdge(incFact, incAccessPath, null, resolverAtCaller, callDelta, usedAccessPathOfIncResolver));










 ReturnSiteResolver.this.interest(analyzer, ReturnSiteResolver.this);










 } else if(currAccPath.isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(currAccPath);










 }










 }










 private void resolveViaDelta(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(retEdge.incResolver == null || retEdge.incResolver instanceof CallEdgeResolver) {










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPath());










 assert delta.accesses.length <= 1;










 retEdge.incResolver.resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {





















 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(analyzer, resolver);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 }










 });










 } 










 }





















 protected void resolveViaCallSiteResolver(AccessPath<Field> currAccPath) {










 if(resolverAtCaller == null || resolverAtCaller instanceof CallEdgeResolver) {










 ReturnSiteResolver.this.canBeResolvedEmpty();










 } else {










 resolverAtCaller.resolve(new DeltaConstraint<>(currAccPath.getDeltaTo(resolvedAccPath)), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingFacts.add(new ReturnEdge(incFact, incAccessPath, null, resolver, Delta.<Field>empty(), incAccessPath.getDeltaTo(resolvedAccPath)));










 ReturnSiteResolver.this.interest(analyzer, ReturnSiteResolver.this);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 ReturnSiteResolver.this.canBeResolvedEmpty();










 }










 });










 }










 private void resolveViaDeltaAndPotentiallyDelegateToCallSite(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath));










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest(analyzer, this);










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }










 }





















 public Stmt getReturnSite() {










 return returnSite;










 protected void resolveViaCallSiteResolver(final ReturnEdge<Field, Fact, Stmt, Method> retEdge, AccessPath<Field> currAccPath) {










 if(retEdge.resolverAtCaller == null || retEdge.resolverAtCaller instanceof CallEdgeResolver) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(analyzer, ReturnSiteResolver.this);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 ReturnSiteResolver.this.canBeResolvedEmpty();










 }










 });










 }










 }










}














src/heros/alias/bidi/SourceStmtAnnotatedMethodAnalyzer.java

â†’

src/heros/alias/SourceStmtAnnotatedMethodAnalyzer.java








View file @ 90319070






......@@ -8,16 +8,8 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias.bidi;










package heros.alias;





















import heros.alias.AccessPath;










import heros.alias.CacheMap;










import heros.alias.Context;










import heros.alias.IncomingEdge;










import heros.alias.MethodAnalyzer;










import heros.alias.PerAccessPathMethodAnalyzer;










import heros.alias.WrappedFact;










import heros.alias.WrappedFactAtStatement;





















public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>










 implements MethodAnalyzer<Field, Fact, Stmt, Method> {



......@@ -40,11 +32,10 @@ public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>









 }










 










 @Override










 public void addIncomingEdge(IncomingEdge<Field, Fact, Stmt, Method> incEdge) {










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact = incEdge.getCalleeSourceFact();










 Key<Fact, Stmt> key = new Key<Fact, Stmt>(calleeSourceFact.getFact(), null);










 PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer = perSourceAnalyzer.getOrCreate(key);










 analyzer.bootstrapAtMethodStartPoints();










 analyzer.addIncomingEdge(incEdge); 










 }














......














src/heros/alias/WrappedFactAtStatement.java








View file @ 90319070






......@@ -20,9 +20,21 @@ public class WrappedFactAtStatement<Field, Fact, Stmt, Method> {









 this.fact = fact;










 }





















 public WrappedFact<Field,Fact, Stmt, Method> getFact() {










 public WrappedFact<Field,Fact, Stmt, Method> getWrappedFact() {










 return fact;










 }










 










 public Fact getFact() {










 return fact.getFact();










 }










 










 public AccessPath<Field> getAccessPath() {










 return fact.getAccessPath();










 }










 










 public Resolver<Field, Fact, Stmt, Method> getResolver() {










 return fact.getResolver();










 }





















 public Stmt getStatement() {










 return stmt;



......














src/heros/alias/ZeroCallEdgeResolver.java








View file @ 90319070






......@@ -10,7 +10,6 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.AccessPath.Delta;










import heros.alias.FlowFunction.Constraint;





















public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeResolver<Field, Fact, Stmt, Method> {



......@@ -31,4 +30,9 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 }










 










 @Override










 protected ZeroCallEdgeResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 return this;










 }










}














src/heros/alias/ZeroHandler.java








View file @ 90319070






......@@ -12,5 +12,11 @@ package heros.alias;




















public interface ZeroHandler<Field> {





















 /**










	 * If reading fields on a fact abstraction directly connected to a Zero fact, this handler is consulted










	 * to decide if the field may be read. 










	 * @param accPath The AccessPath consisting of fields already read in addition to a new field to be read.










	 * @return true if the AccessPath can be generated from within the Zero fact, false otherwise.










	 */










 boolean shouldGenerateAccessPath(AccessPath<Field> accPath);










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

90319070







Open sidebar



Joshua Garcia heros
Commits

90319070




Open sidebar

Joshua Garcia heros
Commits

90319070


Joshua GarciaherosherosCommits
90319070








Commit
90319070


authored
Apr 01, 2015
by


Johannes Lerch



Browse files




refactoring







parent
eb98a856













Changes
20




Expand all
Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPath.java








View file @ 90319070






......@@ -144,22 +144,6 @@ public class AccessPath<T> {









 return delta;










 }










 










 //FIXME this is an unsound dirty hack










 public boolean contains(AccessPath<T> accPath) {










 assert accPath.accesses.length <= 1;










 if(accPath.accesses.length == 1) {










 for(T sub : accesses) {










 if(sub.equals(accPath.accesses[0])) {










 return true;










 }










 }










 return false;










 }










 else










 return exclusions.containsAll(accPath.exclusions);










 }










 










 










 public static class Delta<T> {










 final T[] accesses;










 final Set<T> exclusions;



......














src/heros/alias/BiDiFieldSensitiveIFDSSolver.java








View file @ 90319070






......@@ -12,9 +12,10 @@ package heros.alias;































import heros.InterproceduralCFG;










import heros.alias.bidi.SourceStmtAnnotatedMethodAnalyzer;










import heros.alias.bidi.SourceStmtAnnotatedMethodAnalyzer.Synchronizer;










import heros.alias.SourceStmtAnnotatedMethodAnalyzer.Synchronizer;





















import java.util.Set;





















import com.google.common.collect.HashMultimap;










import com.google.common.collect.Sets;














......














src/heros/alias/IncomingEdge.java

â†’

src/heros/alias/CallEdge.java








View file @ 90319070






......@@ -13,13 +13,13 @@ package heros.alias;









import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;





















public class IncomingEdge<Field, Fact, Stmt, Method> {










public class CallEdge<Field, Fact, Stmt, Method> {





















 private WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact;










 private PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> callerAnalyzer;










 private WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtCallSite;










 










 public IncomingEdge(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> callerAnalyzer, 










 public CallEdge(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> callerAnalyzer, 










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtCallSite,










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact) {










 this.callerAnalyzer = callerAnalyzer;



......@@ -32,7 +32,7 @@ public class IncomingEdge<Field, Fact, Stmt, Method> {









 }










 










 public WrappedFact<Field, Fact, Stmt, Method> getCallerCallSiteFact() {










 return factAtCallSite.getFact();










 return factAtCallSite.getWrappedFact();










 }










 










 public WrappedFact<Field, Fact, Stmt, Method> getCallerSourceFact() {



......@@ -53,16 +53,16 @@ public class IncomingEdge<Field, Fact, Stmt, Method> {









 if(!factAtCallSite.canDeltaBeApplied(delta))










 return;










 










 factAtCallSite.getFact().getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 factAtCallSite.getWrappedFact().getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFactWithDelta = new WrappedFact<>(calleeSourceFact.getFact(), delta.applyTo(calleeSourceFact.getAccessPath()), resolver);










 if(interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath()) != PrefixTestResult.GUARANTEED_PREFIX)










 throw new AssertionError();










 interestedAnalyzer.addIncomingEdge(new IncomingEdge<>(analyzer, 










 interestedAnalyzer.addIncomingEdge(new CallEdge<>(analyzer, 










 new WrappedFactAtStatement<>(factAtCallSite.getStatement(), 










 new WrappedFact<>(factAtCallSite.getFact().getFact(), delta.applyTo(factAtCallSite.getFact().getAccessPath()), resolver)), 










 new WrappedFact<>(factAtCallSite.getWrappedFact().getFact(), delta.applyTo(factAtCallSite.getWrappedFact().getAccessPath()), resolver)), 










 calleeSourceFactWithDelta));










 }










 



......@@ -96,7 +96,7 @@ public class IncomingEdge<Field, Fact, Stmt, Method> {









 return false;










 if (getClass() != obj.getClass())










 return false;










 IncomingEdge other = (IncomingEdge) obj;










 CallEdge other = (CallEdge) obj;










 if (calleeSourceFact == null) {










 if (other.calleeSourceFact != null)










 return false;



......














src/heros/alias/CallEdgeResolver.java








View file @ 90319070






......@@ -10,31 +10,52 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.Constraint;










import com.google.common.collect.Lists;
































class CallEdgeResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {










class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> {





















 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 super(analyzer);










 this(analyzer, null);










 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 }





















 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) { 










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(analyzer.getAccessPath()) && !analyzer.isLocked() && !doesContain(constraint)) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(analyzer.getAccessPath());










 PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method> nestedAnalyzer = analyzer.getOrCreateNestedAnalyzer(newAccPath);










 nestedAnalyzer.getCallEdgeResolver().registerCallback(callback);










 }










 protected AccessPath<Field> getResolvedAccessPath() {










 return analyzer.getAccessPath();










 }










 










 @Override










 protected AccessPath<Field> getAccessPathOf(CallEdge<Field, Fact, Stmt, Method> inc) {










 return inc.getCalleeSourceFact().getAccessPath();










 }










 










 @Override










 protected void processIncomingGuaranteedPrefix(CallEdge<Field, Fact, Stmt, Method> inc) {










 analyzer.applySummaries(inc);










 }










 










 //FIXME: this is a dirty hack (and unsound?!)










 private boolean doesContain(Constraint<Field> constraint) {










 AccessPath<Field> accPath = constraint.applyToAccessPath(new AccessPath<Field>());










 return analyzer.getAccessPath().contains(accPath);










 @Override










 protected void processIncomingPotentialPrefix(CallEdge<Field, Fact, Stmt, Method> inc) {










 lock();










 inc.registerInterestCallback(analyzer);










 unlock();










 }





















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return analyzer.createWithAccessPath(newAccPath).getCallEdgeResolver();










 }










 










 public void applySummaries(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 for(CallEdge<Field, Fact, Stmt, Method> incEdge : Lists.newLinkedList(incomingEdges)) {










 analyzer.applySummary(incEdge, factAtStmt);










 }










 }










 










 @Override










 public String toString() {










 return "";



......@@ -45,5 +66,9 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact,









 analyzer.log(message);










 }





















 public boolean hasIncomingEdges() {










 return !incomingEdges.isEmpty();










 }
































}




\ No newline at end of file














src/heros/alias/Context.java








View file @ 90319070






......@@ -12,26 +12,26 @@ package heros.alias;




















import heros.InterproceduralCFG;





















public abstract class Context<FieldRef, FactAbstraction, Statement, Method> {










public abstract class Context<Field, Fact, Stmt, Method> {





















 public final InterproceduralCFG<Statement, Method> icfg;










 public final FlowFunctionProcessor<FactAbstraction, Statement, Method, FieldRef> flowProcessor;










 public final InterproceduralCFG<Stmt, Method> icfg;










 public final Scheduler scheduler;










 public final FactAbstraction zeroValue;










 public final Fact zeroValue;










 public final boolean followReturnsPastSeeds;










 public final FactMergeHandler<FactAbstraction> factHandler;










 public final ZeroHandler<FieldRef> zeroHandler;










 public final FactMergeHandler<Fact> factHandler;










 public final ZeroHandler<Field> zeroHandler;










 public final FlowFunctions<Stmt, Field, Fact, Method> flowFunctions;










 










 Context(InterproceduralCFG<Statement, Method> icfg, FlowFunctionProcessor<FactAbstraction, Statement, Method, FieldRef> flowProcessor, 










 Scheduler scheduler, FactAbstraction zeroValue, boolean followReturnsPastSeeds, FactMergeHandler<FactAbstraction> factHandler, ZeroHandler<FieldRef> zeroHandler) {










 this.icfg = icfg;










 this.flowProcessor = flowProcessor;










 Context(IFDSTabulationProblem<Stmt, Field, Fact, Method, ? extends InterproceduralCFG<Stmt, Method>> tabulationProblem, 










 Scheduler scheduler, FactMergeHandler<Fact> factHandler) {










 this.icfg = tabulationProblem.interproceduralCFG();










 this.flowFunctions = tabulationProblem.flowFunctions();










 this.scheduler = scheduler;










 this.zeroValue = zeroValue;










 this.followReturnsPastSeeds = followReturnsPastSeeds;










 this.zeroValue = tabulationProblem.zeroValue();










 this.followReturnsPastSeeds = tabulationProblem.followReturnsPastSeeds();










 this.factHandler = factHandler;










 this.zeroHandler = zeroHandler;










 this.zeroHandler = tabulationProblem.zeroHandler();










 }










 










 public abstract MethodAnalyzer<FieldRef, FactAbstraction, Statement, Method> getAnalyzer(Method method);










 public abstract MethodAnalyzer<Field, Fact, Stmt, Method> getAnalyzer(Method method);










}














src/heros/alias/ControlFlowJoinResolver.java








View file @ 90319070






......@@ -10,110 +10,61 @@









 ******************************************************************************/










package heros.alias;





















import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.Constraint;





















public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {










public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {





















 private boolean recursiveLock = false;










 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private Set<WrappedFact<Field, Fact, Stmt, Method>> incomingFacts = Sets.newHashSet();










 private boolean propagated = false;










 private Map<AccessPath<Field>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> nestedResolvers = Maps.newHashMap();










 private ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent;





















 public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(analyzer, joinStmt, new AccessPath<Field>(), null);










 propagated=false;










 }










 










 private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer);










 super(analyzer, parent);










 this.joinStmt = joinStmt;










 this.resolvedAccPath = resolvedAccPath;










 this.parent = parent;










 }





















 public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact) {










 if(resolvedAccPath.isPrefixOf(fact.getAccessPath()) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Fact "+fact);










 if(!incomingFacts.add(fact))










 return;










 










 interest(analyzer, this);










 for(ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver : nestedResolvers.values())










 nestedResolver.addIncoming(fact);










 










 if(!propagated) {










 propagated=true;










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }










 }










 else if(fact.getAccessPath().isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);










 }





















 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 }










 propagated=true;










 }










 










 private boolean isLocked() {










 if(recursiveLock)










 return true;










 if(parent == null)










 return false;










 return parent.isLocked();










 @Override










 protected AccessPath<Field> getAccessPathOf(WrappedFact<Field, Fact, Stmt, Method> inc) {










 return inc.getAccessPath();










 }





















 protected void processIncomingGuaranteedPrefix(heros.alias.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 propagated=true;










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }










 };










 










 @Override










 public void resolve(Constraint<Field> constraint, final InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(!constraint.canBeAppliedTo(resolvedAccPath) || isLocked())










 return;










 










 AccessPath<Field> candidateAccPath = constraint.applyToAccessPath(resolvedAccPath);










 recursiveLock = true;










 ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = getOrCreateNestedResolver(candidateAccPath);










 if(!nestedResolver.resolvedAccPath.equals(constraint.applyToAccessPath(resolvedAccPath)))










 throw new AssertionError();










 










 nestedResolver.registerCallback(callback);










 recursiveLock = false;










 protected void processIncomingPotentialPrefix(WrappedFact<Field, Fact, Stmt, Method> fact) {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);










 }





















 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 unlock();










 }










 










 private ControlFlowJoinResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> candidateAccPath) {










 if(resolvedAccPath.equals(candidateAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(candidateAccPath)) {










 assert resolvedAccPath.getDeltaTo(candidateAccPath).accesses.length <= 1;










 










 final ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = new ControlFlowJoinResolver<>(analyzer, joinStmt, candidateAccPath, this);










 nestedResolver.propagated = true;










 nestedResolvers.put(candidateAccPath, nestedResolver);





















 for(WrappedFact<Field, Fact, Stmt, Method> incFact: incomingFacts) {










 nestedResolver.addIncoming(incFact);










 } 










 }










 return nestedResolvers.get(candidateAccPath);










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<>(analyzer, joinStmt, newAccPath, this);










 }





















 @Override



......@@ -126,6 +77,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 return "<"+resolvedAccPath+":"+joinStmt+">";










 }





















 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 }



......














src/heros/alias/FactMergeHandler.java








View file @ 90319070






......@@ -12,7 +12,17 @@ package heros.alias;




















public interface FactMergeHandler<Fact> {





















 /**










	 * Called when propagating a Fact to a statement at which an equal Fact was already propagated to.










	 * @param previousFact The Fact instance that was propagated to the statement first.










	 * @param currentFact The Fact that was propagated to the statement last.










	 */










 void merge(Fact previousFact, Fact currentFact);










 










 /**










	 * Called on Facts being propagated over a return edge. Via this method context can be restored that was abstracted when propagating over the call edge.










	 * @param factAtReturnSite The fact being propagated over the return edge.










	 * @param factAtCallSite The Fact that was present at the call site, i.e., the Fact used as input to the call flow function.










	 */










 void restoreCallingContext(Fact factAtReturnSite, Fact factAtCallSite);










}














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 90319070






......@@ -18,10 +18,11 @@ import java.util.Set;









import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















import com.sun.istack.internal.Nullable;





















public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends InterproceduralCFG<N, M>> {





















 protected static final Logger logger = LoggerFactory.getLogger(FieldSensitiveIFDSSolver.class);










 private FlowFunctionProcessor<D, N, M, FieldRef> flowProcessor;










 










 private CacheMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new CacheMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {










 @Override



......@@ -35,19 +36,17 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur









 private Debugger<FieldRef, D, N, M, I> debugger;










 private Scheduler scheduler;





















 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, @Nullable Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 this.tabulationProblem = tabulationProblem;










 this.scheduler = scheduler;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;










 this.debugger.setICFG(tabulationProblem.interproceduralCFG());










 flowProcessor = new FlowFunctionProcessor<>(tabulationProblem.flowFunctions());










 context = initContext(tabulationProblem, factHandler);










 submitInitialSeeds();










 }





















 protected Context<FieldRef, D, N, M> initContext(IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem, FactMergeHandler<D> factHandler) {










 return new Context<FieldRef, D, N, M>(tabulationProblem.interproceduralCFG(), flowProcessor, scheduler, tabulationProblem.zeroValue(), 










 tabulationProblem.followReturnsPastSeeds(), factHandler, tabulationProblem.zeroHandler()) {










 private Context<FieldRef, D, N, M> initContext(IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem, FactMergeHandler<D> factHandler) {










 return new Context<FieldRef, D, N, M>(tabulationProblem, scheduler, factHandler) {










 @Override










 public MethodAnalyzer<FieldRef, D, N, M> getAnalyzer(M method) {










 if(method == null)



......@@ -63,10 +62,8 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 /**










	 * Schedules the processing of initial seeds, initiating the analysis.










	 * Clients should only call this methods if performing synchronization on










	 * their own. Normally, {@link #solve()} should be called instead.










	 */










 protected void submitInitialSeeds() {










 private void submitInitialSeeds() {










 for(Entry<N, Set<D>> seed: tabulationProblem.initialSeeds().entrySet()) {










 N startPoint = seed.getKey();










 MethodAnalyzer<FieldRef, D,N,M> analyzer = methodAnalyzers.getOrCreate(tabulationProblem.interproceduralCFG().getMethodOf(startPoint));



......














src/heros/alias/FlowFunctionProcessor.java

deleted


100644 â†’ 0







View file @ eb98a856













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.ConstrainedFact;





















import java.util.Set;





















import com.google.common.collect.Sets;





















public class FlowFunctionProcessor<Fact, Stmt, Method, Field> {





















 private FlowFunctions<Stmt, Field, Fact, Method> flowFunctions;





















 public FlowFunctionProcessor(FlowFunctions<Stmt, Field, Fact, Method> flowFunctions) {










 this.flowFunctions = flowFunctions;










 }










 










 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeNormalFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> source) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getNormalFlowFunction(source.getStatement());










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }










 










 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeCallFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> source, Method calledMethod) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getCallFlowFunction(source.getStatement(), calledMethod);










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }





















 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeCallToReturnFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> source, Stmt returnSite) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getCallToReturnFlowFunction(source.getStatement(), returnSite);










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }





















 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeReturnFlow(FactMergeHandler<Fact> factHandler, WrappedFactAtStatement<Field, Fact, Stmt, Method> source, Method calleeMethod, Stmt returnSite,










 IncomingEdge<Field, Fact, Stmt, Method> incEdge) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getReturnFlowFunction(incEdge.getCallSite(), calleeMethod, source.getStatement(), returnSite);










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 










 for (ConstrainedFact<Field, Fact, Stmt, Method> constrainedFact : targets) {










 factHandler.restoreCallingContext(constrainedFact.getFact().getFact(), incEdge.getCallerCallSiteFact().getFact());










 }










 return targets;










 }





















 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeUnbalancedReturnFlow(Fact zero, WrappedFactAtStatement<Field, Fact, Stmt, Method> source, 










 Method calleeMethod, Stmt returnSite, Stmt callSite) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getReturnFlowFunction(callSite, calleeMethod, source.getStatement(), returnSite);










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }










}














src/heros/alias/MethodAnalyzer.java








View file @ 90319070






......@@ -12,7 +12,7 @@ package heros.alias;




















public interface MethodAnalyzer<Field,Fact,Stmt,Method> {





















 public void addIncomingEdge(IncomingEdge<Field, Fact, Stmt, Method> incEdge);










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge);










 










 public void addInitialSeed(Stmt startPoint, Fact val);










 



......














src/heros/alias/MethodAnalyzerImpl.java








View file @ 90319070






......@@ -29,10 +29,9 @@ public class MethodAnalyzerImpl<Field,Fact, Stmt, Method>









 }










 










 @Override










 public void addIncomingEdge(IncomingEdge<Field, Fact, Stmt, Method> incEdge) {










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact = incEdge.getCalleeSourceFact();










 PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer = perSourceAnalyzer.getOrCreate(calleeSourceFact.getFact());










 analyzer.bootstrapAtMethodStartPoints();










 analyzer.addIncomingEdge(incEdge);










 }














......














src/heros/alias/PerAccessPathMethodAnalyzer.java








View file @ 90319070





This diff is collapsed.
Click to expand it.













src/heros/alias/Resolver.java








View file @ 90319070






......@@ -10,15 +10,12 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.Constraint;





















import java.util.List;










import java.util.Map;





















import com.google.common.collect.HashMultimap;










import com.google.common.collect.Lists;





















import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;





















public abstract class Resolver<Field, Fact, Stmt, Method> {





















 private boolean interest = false;



......














src/heros/alias/ResolverTemplate.java



0 â†’ 100644







View file @ 90319070













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.Constraint;
































public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming> extends Resolver<Field, Fact, Stmt, Method> {





















 private boolean recursionLock = false;










 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent) {










 super(analyzer);










 this.parent = parent;










 }










 










 protected boolean isLocked() {










 if(recursionLock)










 return true;










 if(parent == null)










 return false;










 return parent.isLocked();










 }





















 protected void lock() {










 recursionLock = true;










 }










 










 protected void unlock() {










 recursionLock = false;










 }










 










 protected abstract AccessPath<Field> getResolvedAccessPath();










 










 protected abstract AccessPath<Field> getAccessPathOf(Incoming inc);










 










 public void addIncoming(Incoming inc) {










 if(getResolvedAccessPath().isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge: "+inc);










 if(!incomingEdges.add(inc))










 return;










 










 interest(analyzer, this);










 










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : nestedResolvers.values()) {










 nestedResolver.addIncoming(inc);










 }










 










 processIncomingGuaranteedPrefix(inc);










 }










 else if(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 processIncomingPotentialPrefix(inc);










 }










 }





















 protected abstract void processIncomingPotentialPrefix(Incoming inc);





















 protected abstract void processIncomingGuaranteedPrefix(Incoming inc);










 










 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(getResolvedAccessPath()) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(getResolvedAccessPath());










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = getOrCreateNestedResolver(newAccPath);










 assert nestedResolver.getResolvedAccessPath().equals(constraint.applyToAccessPath(getResolvedAccessPath()));










 nestedResolver.registerCallback(callback);










 }










 }





















 protected ResolverTemplate<Field, Fact, Stmt, Method, Incoming> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 if(getResolvedAccessPath().equals(newAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(newAccPath)) {










 assert getResolvedAccessPath().getDeltaTo(newAccPath).accesses.length <= 1;










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = createNestedResolver(newAccPath);










 nestedResolvers.put(newAccPath, nestedResolver);










 










 for(Incoming inc : incomingEdges) {










 nestedResolver.addIncoming(inc);










 }










 }










 return nestedResolvers.get(newAccPath);










 }










 










 protected abstract ResolverTemplate<Field, Fact, Stmt, Method, Incoming> createNestedResolver(AccessPath<Field> newAccPath);










}




\ No newline at end of file














src/heros/alias/ReturnEdge.java



0 â†’ 100644







View file @ 90319070













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;





















class ReturnEdge<Field, Fact, Stmt, Method> {





















 final Fact incFact;










 final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 final Delta<Field> callDelta;










 final AccessPath<Field> incAccessPath;










 final Resolver<Field, Fact, Stmt, Method> incResolver;










 final Delta<Field> usedAccessPathOfIncResolver;





















 public ReturnEdge(WrappedFact<Field, Fact, Stmt, Method> fact, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller,










 Delta<Field> callDelta) {










 this(fact.getFact(), fact.getAccessPath(), fact.getResolver(), resolverAtCaller, callDelta, Delta.<Field>empty());










 }










 










 private ReturnEdge(Fact incFact, 










 AccessPath<Field> incAccessPath, 










 Resolver<Field, Fact, Stmt, Method> incResolver, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, 










 Delta<Field> callDelta, 










 Delta<Field> usedAccessPathOfIncResolver) {










 this.incFact = incFact;










 this.incAccessPath = incAccessPath;










 this.incResolver = incResolver;










 this.resolverAtCaller = resolverAtCaller;










 this.callDelta = callDelta;










 this.usedAccessPathOfIncResolver = usedAccessPathOfIncResolver;










 }










 










 public ReturnEdge<Field, Fact, Stmt, Method> copyWithIncomingResolver(










 Resolver<Field, Fact, Stmt, Method> incResolver, Delta<Field> usedAccessPathOfIncResolver) {










 return new ReturnEdge<>(incFact, incAccessPath, incResolver, resolverAtCaller, callDelta, usedAccessPathOfIncResolver);










 }










 










 public ReturnEdge<Field, Fact, Stmt, Method> copyWithResolverAtCaller(










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, Delta<Field> usedAccessPathOfIncResolver) {










 return new ReturnEdge<>(incFact, incAccessPath, null, resolverAtCaller, callDelta, usedAccessPathOfIncResolver);










 }










 










 @Override










 public String toString() {










 return String.format("IncFact: %s%s, Delta: %s, IncResolver: <%s:%s>, ResolverAtCallSite: %s", incFact, incAccessPath, callDelta, usedAccessPathOfIncResolver, incResolver, resolverAtCaller);










 }










 










 










}




\ No newline at end of file














src/heros/alias/ReturnSiteResolver.java








View file @ 90319070






......@@ -12,33 +12,24 @@ package heros.alias;




















import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.Constraint;





















import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {










public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {





















 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Set<ReturnEdge> incomingFacts;










 private Map<AccessPath<Field>, ReturnSiteResolver<Field, Fact, Stmt, Method>> nestedResolvers = Maps.newHashMap();










 private ReturnSiteResolver<Field, Fact, Stmt, Method> parent;





















 public ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(analyzer, returnSite, new AccessPath<Field>(), null);










 propagated = false;










 }





















 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer);










 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 this.returnSite = returnSite;










 this.resolvedAccPath = resolvedAccPath;










 this.parent = parent;










 this.incomingFacts = Sets.newHashSet();










 propagated=true;










 }










 










 @Override



......@@ -46,160 +37,97 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends Resolver<Fiel









 return "<"+resolvedAccPath+":"+returnSite+">";










 }










 










 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 }










 










 protected AccessPath<Field> getAccessPathOf(ReturnEdge<Field, Fact, Stmt, Method> inc) {










 return inc.incAccessPath;










 }










 










 public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, 










 Delta<Field> callDelta) {










 










 addIncoming(new ReturnEdge(fact, resolverAtCaller, callDelta));










 addIncoming(new ReturnEdge<Field, Fact, Stmt, Method>(fact, resolverAtCaller, callDelta));










 }










 










 private void addIncoming(final ReturnEdge retEdge) {










 if(resolvedAccPath.isPrefixOf(retEdge.incAccessPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge "+retEdge);










 if(!incomingFacts.add(retEdge))










 return;





















 interest(analyzer, this);










 










 for(ReturnSiteResolver<Field, Fact, Stmt, Method> nestedResolver : nestedResolvers.values())










 nestedResolver.addIncoming(nestedResolver.new ReturnEdge(retEdge.incFact, retEdge.incAccessPath, retEdge.incResolver, 










 retEdge.resolverAtCaller, retEdge.callDelta, retEdge.usedAccessPathOfIncResolver));





















 if(!propagated) {










 propagated=true;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<>(retEdge.incFact, new AccessPath<Field>(), this)));










 }










 }










 else if(retEdge.incAccessPath.isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 log("Incoming potential prefix:  "+retEdge);










 retEdge.resolveViaDelta();










 protected void processIncomingGuaranteedPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(!propagated) {










 propagated=true;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<>(retEdge.incFact, new AccessPath<Field>(), this)));










 }










 }










 };










 










 protected void processIncomingPotentialPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 log("Incoming potential prefix:  "+retEdge);










 resolveViaDelta(retEdge);










 };










 










 protected void log(String message) {










 analyzer.log("Return Site "+toString()+": "+message);










 }





















 @Override










 public void resolve(Constraint<Field> constraint, final InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(!constraint.canBeAppliedTo(resolvedAccPath))










 return;










 










 AccessPath<Field> candidateAccPath = constraint.applyToAccessPath(resolvedAccPath);










 ReturnSiteResolver<Field, Fact, Stmt, Method> nestedResolver = getOrCreateNestedResolver(candidateAccPath);










 if(!nestedResolver.resolvedAccPath.equals(constraint.applyToAccessPath(resolvedAccPath)))










 throw new AssertionError();










 










 nestedResolver.registerCallback(callback);










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<>(analyzer, returnSite, newAccPath, this);










 }










 










 private ReturnSiteResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> candidateAccPath) {










 if(resolvedAccPath.equals(candidateAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(candidateAccPath)) {










 assert resolvedAccPath.getDeltaTo(candidateAccPath).accesses.length <= 1;










 final ReturnSiteResolver<Field, Fact, Stmt, Method> nestedResolver = new ReturnSiteResolver<>(analyzer, returnSite, candidateAccPath, this);










 nestedResolver.propagated = true;










 nestedResolvers.put(candidateAccPath, nestedResolver);





















 for(ReturnSiteResolver<Field, Fact, Stmt, Method>.ReturnEdge retEdge: incomingFacts) {










 nestedResolver.addIncoming(nestedResolver.new ReturnEdge(retEdge.incFact, retEdge.incAccessPath, retEdge.incResolver, 










 retEdge.resolverAtCaller, retEdge.callDelta, retEdge.usedAccessPathOfIncResolver));










 } 










 }










 return nestedResolvers.get(candidateAccPath);










 public Stmt getReturnSite() {










 return returnSite;










 }










 










 private class ReturnEdge {





















 final Fact incFact;










 final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 final Delta<Field> callDelta;










 final AccessPath<Field> incAccessPath;










 final Resolver<Field, Fact, Stmt, Method> incResolver;










 final Delta<Field> usedAccessPathOfIncResolver;





















 public ReturnEdge(WrappedFact<Field, Fact, Stmt, Method> fact, Resolver<Field, Fact, Stmt, Method> resolverAtCaller,










 Delta<Field> callDelta) {










 this(fact.getFact(), fact.getAccessPath(), fact.getResolver(), resolverAtCaller, callDelta, Delta.<Field>empty());










 }










 










 private ReturnEdge(Fact incFact, AccessPath<Field> incAccessPath, Resolver<Field, Fact, Stmt, Method> incResolver, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, Delta<Field> callDelta, Delta<Field> usedAccessPathOfIncResolver) {










 this.incFact = incFact;










 this.incAccessPath = incAccessPath;










 this.incResolver = incResolver;










 this.resolverAtCaller = resolverAtCaller;










 this.callDelta = callDelta;










 this.usedAccessPathOfIncResolver = usedAccessPathOfIncResolver;










 }










 










 @Override










 public String toString() {










 return String.format("IncFact: %s%s, Delta: %s, IncResolver: <%s:%s>, ResolverAtCallSite: %s", incFact, incAccessPath, callDelta, usedAccessPathOfIncResolver, incResolver, resolverAtCaller);










 }










 










 public void resolveViaDelta() {










 if(incResolver == null || incResolver instanceof CallEdgeResolver) {










 resolveViaDeltaAndPotentiallyDelegateToCallSite();










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = usedAccessPathOfIncResolver.applyTo(incAccessPath).getDeltaTo(resolvedAccPath);










 assert delta.accesses.length <= 1;










 incResolver.resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {





















 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingFacts.add(new ReturnEdge(incFact, incAccessPath, resolver, resolverAtCaller, callDelta, incAccessPath.getDeltaTo(resolvedAccPath)));










 ReturnSiteResolver.this.interest(analyzer, resolver);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 resolveViaDeltaAndPotentiallyDelegateToCallSite();










 }










 });










 } 










 }





















 private void resolveViaDeltaAndPotentiallyDelegateToCallSite() {










 final AccessPath<Field> currAccPath = callDelta.applyTo(usedAccessPathOfIncResolver.applyTo(incAccessPath));










 if(resolvedAccPath.isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingFacts.add(new ReturnEdge(incFact, incAccessPath, null, resolverAtCaller, callDelta, usedAccessPathOfIncResolver));










 ReturnSiteResolver.this.interest(analyzer, ReturnSiteResolver.this);










 } else if(currAccPath.isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(currAccPath);










 }










 }










 private void resolveViaDelta(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(retEdge.incResolver == null || retEdge.incResolver instanceof CallEdgeResolver) {










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPath());










 assert delta.accesses.length <= 1;










 retEdge.incResolver.resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {





















 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(analyzer, resolver);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 }










 });










 } 










 }





















 protected void resolveViaCallSiteResolver(AccessPath<Field> currAccPath) {










 if(resolverAtCaller == null || resolverAtCaller instanceof CallEdgeResolver) {










 ReturnSiteResolver.this.canBeResolvedEmpty();










 } else {










 resolverAtCaller.resolve(new DeltaConstraint<>(currAccPath.getDeltaTo(resolvedAccPath)), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingFacts.add(new ReturnEdge(incFact, incAccessPath, null, resolver, Delta.<Field>empty(), incAccessPath.getDeltaTo(resolvedAccPath)));










 ReturnSiteResolver.this.interest(analyzer, ReturnSiteResolver.this);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 ReturnSiteResolver.this.canBeResolvedEmpty();










 }










 });










 }










 private void resolveViaDeltaAndPotentiallyDelegateToCallSite(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath));










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest(analyzer, this);










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }










 }





















 public Stmt getReturnSite() {










 return returnSite;










 protected void resolveViaCallSiteResolver(final ReturnEdge<Field, Fact, Stmt, Method> retEdge, AccessPath<Field> currAccPath) {










 if(retEdge.resolverAtCaller == null || retEdge.resolverAtCaller instanceof CallEdgeResolver) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(analyzer, ReturnSiteResolver.this);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 ReturnSiteResolver.this.canBeResolvedEmpty();










 }










 });










 }










 }










}














src/heros/alias/bidi/SourceStmtAnnotatedMethodAnalyzer.java

â†’

src/heros/alias/SourceStmtAnnotatedMethodAnalyzer.java








View file @ 90319070






......@@ -8,16 +8,8 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias.bidi;










package heros.alias;





















import heros.alias.AccessPath;










import heros.alias.CacheMap;










import heros.alias.Context;










import heros.alias.IncomingEdge;










import heros.alias.MethodAnalyzer;










import heros.alias.PerAccessPathMethodAnalyzer;










import heros.alias.WrappedFact;










import heros.alias.WrappedFactAtStatement;





















public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>










 implements MethodAnalyzer<Field, Fact, Stmt, Method> {



......@@ -40,11 +32,10 @@ public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>









 }










 










 @Override










 public void addIncomingEdge(IncomingEdge<Field, Fact, Stmt, Method> incEdge) {










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact = incEdge.getCalleeSourceFact();










 Key<Fact, Stmt> key = new Key<Fact, Stmt>(calleeSourceFact.getFact(), null);










 PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer = perSourceAnalyzer.getOrCreate(key);










 analyzer.bootstrapAtMethodStartPoints();










 analyzer.addIncomingEdge(incEdge); 










 }














......














src/heros/alias/WrappedFactAtStatement.java








View file @ 90319070






......@@ -20,9 +20,21 @@ public class WrappedFactAtStatement<Field, Fact, Stmt, Method> {









 this.fact = fact;










 }





















 public WrappedFact<Field,Fact, Stmt, Method> getFact() {










 public WrappedFact<Field,Fact, Stmt, Method> getWrappedFact() {










 return fact;










 }










 










 public Fact getFact() {










 return fact.getFact();










 }










 










 public AccessPath<Field> getAccessPath() {










 return fact.getAccessPath();










 }










 










 public Resolver<Field, Fact, Stmt, Method> getResolver() {










 return fact.getResolver();










 }





















 public Stmt getStatement() {










 return stmt;



......














src/heros/alias/ZeroCallEdgeResolver.java








View file @ 90319070






......@@ -10,7 +10,6 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.AccessPath.Delta;










import heros.alias.FlowFunction.Constraint;





















public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeResolver<Field, Fact, Stmt, Method> {



......@@ -31,4 +30,9 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 }










 










 @Override










 protected ZeroCallEdgeResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 return this;










 }










}














src/heros/alias/ZeroHandler.java








View file @ 90319070






......@@ -12,5 +12,11 @@ package heros.alias;




















public interface ZeroHandler<Field> {





















 /**










	 * If reading fields on a fact abstraction directly connected to a Zero fact, this handler is consulted










	 * to decide if the field may be read. 










	 * @param accPath The AccessPath consisting of fields already read in addition to a new field to be read.










	 * @return true if the AccessPath can be generated from within the Zero fact, false otherwise.










	 */










 boolean shouldGenerateAccessPath(AccessPath<Field> accPath);










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
90319070


authored
Apr 01, 2015
by


Johannes Lerch



Browse files




refactoring







parent
eb98a856













Changes
20




Expand all
Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPath.java








View file @ 90319070






......@@ -144,22 +144,6 @@ public class AccessPath<T> {









 return delta;










 }










 










 //FIXME this is an unsound dirty hack










 public boolean contains(AccessPath<T> accPath) {










 assert accPath.accesses.length <= 1;










 if(accPath.accesses.length == 1) {










 for(T sub : accesses) {










 if(sub.equals(accPath.accesses[0])) {










 return true;










 }










 }










 return false;










 }










 else










 return exclusions.containsAll(accPath.exclusions);










 }










 










 










 public static class Delta<T> {










 final T[] accesses;










 final Set<T> exclusions;



......














src/heros/alias/BiDiFieldSensitiveIFDSSolver.java








View file @ 90319070






......@@ -12,9 +12,10 @@ package heros.alias;































import heros.InterproceduralCFG;










import heros.alias.bidi.SourceStmtAnnotatedMethodAnalyzer;










import heros.alias.bidi.SourceStmtAnnotatedMethodAnalyzer.Synchronizer;










import heros.alias.SourceStmtAnnotatedMethodAnalyzer.Synchronizer;





















import java.util.Set;





















import com.google.common.collect.HashMultimap;










import com.google.common.collect.Sets;














......














src/heros/alias/IncomingEdge.java

â†’

src/heros/alias/CallEdge.java








View file @ 90319070






......@@ -13,13 +13,13 @@ package heros.alias;









import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;





















public class IncomingEdge<Field, Fact, Stmt, Method> {










public class CallEdge<Field, Fact, Stmt, Method> {





















 private WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact;










 private PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> callerAnalyzer;










 private WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtCallSite;










 










 public IncomingEdge(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> callerAnalyzer, 










 public CallEdge(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> callerAnalyzer, 










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtCallSite,










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact) {










 this.callerAnalyzer = callerAnalyzer;



......@@ -32,7 +32,7 @@ public class IncomingEdge<Field, Fact, Stmt, Method> {









 }










 










 public WrappedFact<Field, Fact, Stmt, Method> getCallerCallSiteFact() {










 return factAtCallSite.getFact();










 return factAtCallSite.getWrappedFact();










 }










 










 public WrappedFact<Field, Fact, Stmt, Method> getCallerSourceFact() {



......@@ -53,16 +53,16 @@ public class IncomingEdge<Field, Fact, Stmt, Method> {









 if(!factAtCallSite.canDeltaBeApplied(delta))










 return;










 










 factAtCallSite.getFact().getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 factAtCallSite.getWrappedFact().getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFactWithDelta = new WrappedFact<>(calleeSourceFact.getFact(), delta.applyTo(calleeSourceFact.getAccessPath()), resolver);










 if(interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath()) != PrefixTestResult.GUARANTEED_PREFIX)










 throw new AssertionError();










 interestedAnalyzer.addIncomingEdge(new IncomingEdge<>(analyzer, 










 interestedAnalyzer.addIncomingEdge(new CallEdge<>(analyzer, 










 new WrappedFactAtStatement<>(factAtCallSite.getStatement(), 










 new WrappedFact<>(factAtCallSite.getFact().getFact(), delta.applyTo(factAtCallSite.getFact().getAccessPath()), resolver)), 










 new WrappedFact<>(factAtCallSite.getWrappedFact().getFact(), delta.applyTo(factAtCallSite.getWrappedFact().getAccessPath()), resolver)), 










 calleeSourceFactWithDelta));










 }










 



......@@ -96,7 +96,7 @@ public class IncomingEdge<Field, Fact, Stmt, Method> {









 return false;










 if (getClass() != obj.getClass())










 return false;










 IncomingEdge other = (IncomingEdge) obj;










 CallEdge other = (CallEdge) obj;










 if (calleeSourceFact == null) {










 if (other.calleeSourceFact != null)










 return false;



......














src/heros/alias/CallEdgeResolver.java








View file @ 90319070






......@@ -10,31 +10,52 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.Constraint;










import com.google.common.collect.Lists;
































class CallEdgeResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {










class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> {





















 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 super(analyzer);










 this(analyzer, null);










 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 }





















 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) { 










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(analyzer.getAccessPath()) && !analyzer.isLocked() && !doesContain(constraint)) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(analyzer.getAccessPath());










 PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method> nestedAnalyzer = analyzer.getOrCreateNestedAnalyzer(newAccPath);










 nestedAnalyzer.getCallEdgeResolver().registerCallback(callback);










 }










 protected AccessPath<Field> getResolvedAccessPath() {










 return analyzer.getAccessPath();










 }










 










 @Override










 protected AccessPath<Field> getAccessPathOf(CallEdge<Field, Fact, Stmt, Method> inc) {










 return inc.getCalleeSourceFact().getAccessPath();










 }










 










 @Override










 protected void processIncomingGuaranteedPrefix(CallEdge<Field, Fact, Stmt, Method> inc) {










 analyzer.applySummaries(inc);










 }










 










 //FIXME: this is a dirty hack (and unsound?!)










 private boolean doesContain(Constraint<Field> constraint) {










 AccessPath<Field> accPath = constraint.applyToAccessPath(new AccessPath<Field>());










 return analyzer.getAccessPath().contains(accPath);










 @Override










 protected void processIncomingPotentialPrefix(CallEdge<Field, Fact, Stmt, Method> inc) {










 lock();










 inc.registerInterestCallback(analyzer);










 unlock();










 }





















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return analyzer.createWithAccessPath(newAccPath).getCallEdgeResolver();










 }










 










 public void applySummaries(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 for(CallEdge<Field, Fact, Stmt, Method> incEdge : Lists.newLinkedList(incomingEdges)) {










 analyzer.applySummary(incEdge, factAtStmt);










 }










 }










 










 @Override










 public String toString() {










 return "";



......@@ -45,5 +66,9 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact,









 analyzer.log(message);










 }





















 public boolean hasIncomingEdges() {










 return !incomingEdges.isEmpty();










 }
































}




\ No newline at end of file














src/heros/alias/Context.java








View file @ 90319070






......@@ -12,26 +12,26 @@ package heros.alias;




















import heros.InterproceduralCFG;





















public abstract class Context<FieldRef, FactAbstraction, Statement, Method> {










public abstract class Context<Field, Fact, Stmt, Method> {





















 public final InterproceduralCFG<Statement, Method> icfg;










 public final FlowFunctionProcessor<FactAbstraction, Statement, Method, FieldRef> flowProcessor;










 public final InterproceduralCFG<Stmt, Method> icfg;










 public final Scheduler scheduler;










 public final FactAbstraction zeroValue;










 public final Fact zeroValue;










 public final boolean followReturnsPastSeeds;










 public final FactMergeHandler<FactAbstraction> factHandler;










 public final ZeroHandler<FieldRef> zeroHandler;










 public final FactMergeHandler<Fact> factHandler;










 public final ZeroHandler<Field> zeroHandler;










 public final FlowFunctions<Stmt, Field, Fact, Method> flowFunctions;










 










 Context(InterproceduralCFG<Statement, Method> icfg, FlowFunctionProcessor<FactAbstraction, Statement, Method, FieldRef> flowProcessor, 










 Scheduler scheduler, FactAbstraction zeroValue, boolean followReturnsPastSeeds, FactMergeHandler<FactAbstraction> factHandler, ZeroHandler<FieldRef> zeroHandler) {










 this.icfg = icfg;










 this.flowProcessor = flowProcessor;










 Context(IFDSTabulationProblem<Stmt, Field, Fact, Method, ? extends InterproceduralCFG<Stmt, Method>> tabulationProblem, 










 Scheduler scheduler, FactMergeHandler<Fact> factHandler) {










 this.icfg = tabulationProblem.interproceduralCFG();










 this.flowFunctions = tabulationProblem.flowFunctions();










 this.scheduler = scheduler;










 this.zeroValue = zeroValue;










 this.followReturnsPastSeeds = followReturnsPastSeeds;










 this.zeroValue = tabulationProblem.zeroValue();










 this.followReturnsPastSeeds = tabulationProblem.followReturnsPastSeeds();










 this.factHandler = factHandler;










 this.zeroHandler = zeroHandler;










 this.zeroHandler = tabulationProblem.zeroHandler();










 }










 










 public abstract MethodAnalyzer<FieldRef, FactAbstraction, Statement, Method> getAnalyzer(Method method);










 public abstract MethodAnalyzer<Field, Fact, Stmt, Method> getAnalyzer(Method method);










}














src/heros/alias/ControlFlowJoinResolver.java








View file @ 90319070






......@@ -10,110 +10,61 @@









 ******************************************************************************/










package heros.alias;





















import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.Constraint;





















public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {










public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {





















 private boolean recursiveLock = false;










 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private Set<WrappedFact<Field, Fact, Stmt, Method>> incomingFacts = Sets.newHashSet();










 private boolean propagated = false;










 private Map<AccessPath<Field>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> nestedResolvers = Maps.newHashMap();










 private ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent;





















 public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(analyzer, joinStmt, new AccessPath<Field>(), null);










 propagated=false;










 }










 










 private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer);










 super(analyzer, parent);










 this.joinStmt = joinStmt;










 this.resolvedAccPath = resolvedAccPath;










 this.parent = parent;










 }





















 public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact) {










 if(resolvedAccPath.isPrefixOf(fact.getAccessPath()) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Fact "+fact);










 if(!incomingFacts.add(fact))










 return;










 










 interest(analyzer, this);










 for(ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver : nestedResolvers.values())










 nestedResolver.addIncoming(fact);










 










 if(!propagated) {










 propagated=true;










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }










 }










 else if(fact.getAccessPath().isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);










 }





















 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 }










 propagated=true;










 }










 










 private boolean isLocked() {










 if(recursiveLock)










 return true;










 if(parent == null)










 return false;










 return parent.isLocked();










 @Override










 protected AccessPath<Field> getAccessPathOf(WrappedFact<Field, Fact, Stmt, Method> inc) {










 return inc.getAccessPath();










 }





















 protected void processIncomingGuaranteedPrefix(heros.alias.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 propagated=true;










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }










 };










 










 @Override










 public void resolve(Constraint<Field> constraint, final InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(!constraint.canBeAppliedTo(resolvedAccPath) || isLocked())










 return;










 










 AccessPath<Field> candidateAccPath = constraint.applyToAccessPath(resolvedAccPath);










 recursiveLock = true;










 ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = getOrCreateNestedResolver(candidateAccPath);










 if(!nestedResolver.resolvedAccPath.equals(constraint.applyToAccessPath(resolvedAccPath)))










 throw new AssertionError();










 










 nestedResolver.registerCallback(callback);










 recursiveLock = false;










 protected void processIncomingPotentialPrefix(WrappedFact<Field, Fact, Stmt, Method> fact) {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);










 }





















 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 unlock();










 }










 










 private ControlFlowJoinResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> candidateAccPath) {










 if(resolvedAccPath.equals(candidateAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(candidateAccPath)) {










 assert resolvedAccPath.getDeltaTo(candidateAccPath).accesses.length <= 1;










 










 final ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = new ControlFlowJoinResolver<>(analyzer, joinStmt, candidateAccPath, this);










 nestedResolver.propagated = true;










 nestedResolvers.put(candidateAccPath, nestedResolver);





















 for(WrappedFact<Field, Fact, Stmt, Method> incFact: incomingFacts) {










 nestedResolver.addIncoming(incFact);










 } 










 }










 return nestedResolvers.get(candidateAccPath);










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<>(analyzer, joinStmt, newAccPath, this);










 }





















 @Override



......@@ -126,6 +77,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 return "<"+resolvedAccPath+":"+joinStmt+">";










 }





















 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 }



......














src/heros/alias/FactMergeHandler.java








View file @ 90319070






......@@ -12,7 +12,17 @@ package heros.alias;




















public interface FactMergeHandler<Fact> {





















 /**










	 * Called when propagating a Fact to a statement at which an equal Fact was already propagated to.










	 * @param previousFact The Fact instance that was propagated to the statement first.










	 * @param currentFact The Fact that was propagated to the statement last.










	 */










 void merge(Fact previousFact, Fact currentFact);










 










 /**










	 * Called on Facts being propagated over a return edge. Via this method context can be restored that was abstracted when propagating over the call edge.










	 * @param factAtReturnSite The fact being propagated over the return edge.










	 * @param factAtCallSite The Fact that was present at the call site, i.e., the Fact used as input to the call flow function.










	 */










 void restoreCallingContext(Fact factAtReturnSite, Fact factAtCallSite);










}














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 90319070






......@@ -18,10 +18,11 @@ import java.util.Set;









import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















import com.sun.istack.internal.Nullable;





















public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends InterproceduralCFG<N, M>> {





















 protected static final Logger logger = LoggerFactory.getLogger(FieldSensitiveIFDSSolver.class);










 private FlowFunctionProcessor<D, N, M, FieldRef> flowProcessor;










 










 private CacheMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new CacheMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {










 @Override



......@@ -35,19 +36,17 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur









 private Debugger<FieldRef, D, N, M, I> debugger;










 private Scheduler scheduler;





















 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, @Nullable Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 this.tabulationProblem = tabulationProblem;










 this.scheduler = scheduler;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;










 this.debugger.setICFG(tabulationProblem.interproceduralCFG());










 flowProcessor = new FlowFunctionProcessor<>(tabulationProblem.flowFunctions());










 context = initContext(tabulationProblem, factHandler);










 submitInitialSeeds();










 }





















 protected Context<FieldRef, D, N, M> initContext(IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem, FactMergeHandler<D> factHandler) {










 return new Context<FieldRef, D, N, M>(tabulationProblem.interproceduralCFG(), flowProcessor, scheduler, tabulationProblem.zeroValue(), 










 tabulationProblem.followReturnsPastSeeds(), factHandler, tabulationProblem.zeroHandler()) {










 private Context<FieldRef, D, N, M> initContext(IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem, FactMergeHandler<D> factHandler) {










 return new Context<FieldRef, D, N, M>(tabulationProblem, scheduler, factHandler) {










 @Override










 public MethodAnalyzer<FieldRef, D, N, M> getAnalyzer(M method) {










 if(method == null)



......@@ -63,10 +62,8 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 /**










	 * Schedules the processing of initial seeds, initiating the analysis.










	 * Clients should only call this methods if performing synchronization on










	 * their own. Normally, {@link #solve()} should be called instead.










	 */










 protected void submitInitialSeeds() {










 private void submitInitialSeeds() {










 for(Entry<N, Set<D>> seed: tabulationProblem.initialSeeds().entrySet()) {










 N startPoint = seed.getKey();










 MethodAnalyzer<FieldRef, D,N,M> analyzer = methodAnalyzers.getOrCreate(tabulationProblem.interproceduralCFG().getMethodOf(startPoint));



......














src/heros/alias/FlowFunctionProcessor.java

deleted


100644 â†’ 0







View file @ eb98a856













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.ConstrainedFact;





















import java.util.Set;





















import com.google.common.collect.Sets;





















public class FlowFunctionProcessor<Fact, Stmt, Method, Field> {





















 private FlowFunctions<Stmt, Field, Fact, Method> flowFunctions;





















 public FlowFunctionProcessor(FlowFunctions<Stmt, Field, Fact, Method> flowFunctions) {










 this.flowFunctions = flowFunctions;










 }










 










 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeNormalFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> source) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getNormalFlowFunction(source.getStatement());










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }










 










 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeCallFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> source, Method calledMethod) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getCallFlowFunction(source.getStatement(), calledMethod);










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }





















 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeCallToReturnFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> source, Stmt returnSite) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getCallToReturnFlowFunction(source.getStatement(), returnSite);










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }





















 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeReturnFlow(FactMergeHandler<Fact> factHandler, WrappedFactAtStatement<Field, Fact, Stmt, Method> source, Method calleeMethod, Stmt returnSite,










 IncomingEdge<Field, Fact, Stmt, Method> incEdge) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getReturnFlowFunction(incEdge.getCallSite(), calleeMethod, source.getStatement(), returnSite);










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 










 for (ConstrainedFact<Field, Fact, Stmt, Method> constrainedFact : targets) {










 factHandler.restoreCallingContext(constrainedFact.getFact().getFact(), incEdge.getCallerCallSiteFact().getFact());










 }










 return targets;










 }





















 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeUnbalancedReturnFlow(Fact zero, WrappedFactAtStatement<Field, Fact, Stmt, Method> source, 










 Method calleeMethod, Stmt returnSite, Stmt callSite) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getReturnFlowFunction(callSite, calleeMethod, source.getStatement(), returnSite);










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }










}














src/heros/alias/MethodAnalyzer.java








View file @ 90319070






......@@ -12,7 +12,7 @@ package heros.alias;




















public interface MethodAnalyzer<Field,Fact,Stmt,Method> {





















 public void addIncomingEdge(IncomingEdge<Field, Fact, Stmt, Method> incEdge);










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge);










 










 public void addInitialSeed(Stmt startPoint, Fact val);










 



......














src/heros/alias/MethodAnalyzerImpl.java








View file @ 90319070






......@@ -29,10 +29,9 @@ public class MethodAnalyzerImpl<Field,Fact, Stmt, Method>









 }










 










 @Override










 public void addIncomingEdge(IncomingEdge<Field, Fact, Stmt, Method> incEdge) {










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact = incEdge.getCalleeSourceFact();










 PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer = perSourceAnalyzer.getOrCreate(calleeSourceFact.getFact());










 analyzer.bootstrapAtMethodStartPoints();










 analyzer.addIncomingEdge(incEdge);










 }














......














src/heros/alias/PerAccessPathMethodAnalyzer.java








View file @ 90319070





This diff is collapsed.
Click to expand it.













src/heros/alias/Resolver.java








View file @ 90319070






......@@ -10,15 +10,12 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.Constraint;





















import java.util.List;










import java.util.Map;





















import com.google.common.collect.HashMultimap;










import com.google.common.collect.Lists;





















import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;





















public abstract class Resolver<Field, Fact, Stmt, Method> {





















 private boolean interest = false;



......














src/heros/alias/ResolverTemplate.java



0 â†’ 100644







View file @ 90319070













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.Constraint;
































public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming> extends Resolver<Field, Fact, Stmt, Method> {





















 private boolean recursionLock = false;










 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent) {










 super(analyzer);










 this.parent = parent;










 }










 










 protected boolean isLocked() {










 if(recursionLock)










 return true;










 if(parent == null)










 return false;










 return parent.isLocked();










 }





















 protected void lock() {










 recursionLock = true;










 }










 










 protected void unlock() {










 recursionLock = false;










 }










 










 protected abstract AccessPath<Field> getResolvedAccessPath();










 










 protected abstract AccessPath<Field> getAccessPathOf(Incoming inc);










 










 public void addIncoming(Incoming inc) {










 if(getResolvedAccessPath().isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge: "+inc);










 if(!incomingEdges.add(inc))










 return;










 










 interest(analyzer, this);










 










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : nestedResolvers.values()) {










 nestedResolver.addIncoming(inc);










 }










 










 processIncomingGuaranteedPrefix(inc);










 }










 else if(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 processIncomingPotentialPrefix(inc);










 }










 }





















 protected abstract void processIncomingPotentialPrefix(Incoming inc);





















 protected abstract void processIncomingGuaranteedPrefix(Incoming inc);










 










 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(getResolvedAccessPath()) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(getResolvedAccessPath());










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = getOrCreateNestedResolver(newAccPath);










 assert nestedResolver.getResolvedAccessPath().equals(constraint.applyToAccessPath(getResolvedAccessPath()));










 nestedResolver.registerCallback(callback);










 }










 }





















 protected ResolverTemplate<Field, Fact, Stmt, Method, Incoming> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 if(getResolvedAccessPath().equals(newAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(newAccPath)) {










 assert getResolvedAccessPath().getDeltaTo(newAccPath).accesses.length <= 1;










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = createNestedResolver(newAccPath);










 nestedResolvers.put(newAccPath, nestedResolver);










 










 for(Incoming inc : incomingEdges) {










 nestedResolver.addIncoming(inc);










 }










 }










 return nestedResolvers.get(newAccPath);










 }










 










 protected abstract ResolverTemplate<Field, Fact, Stmt, Method, Incoming> createNestedResolver(AccessPath<Field> newAccPath);










}




\ No newline at end of file














src/heros/alias/ReturnEdge.java



0 â†’ 100644







View file @ 90319070













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;





















class ReturnEdge<Field, Fact, Stmt, Method> {





















 final Fact incFact;










 final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 final Delta<Field> callDelta;










 final AccessPath<Field> incAccessPath;










 final Resolver<Field, Fact, Stmt, Method> incResolver;










 final Delta<Field> usedAccessPathOfIncResolver;





















 public ReturnEdge(WrappedFact<Field, Fact, Stmt, Method> fact, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller,










 Delta<Field> callDelta) {










 this(fact.getFact(), fact.getAccessPath(), fact.getResolver(), resolverAtCaller, callDelta, Delta.<Field>empty());










 }










 










 private ReturnEdge(Fact incFact, 










 AccessPath<Field> incAccessPath, 










 Resolver<Field, Fact, Stmt, Method> incResolver, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, 










 Delta<Field> callDelta, 










 Delta<Field> usedAccessPathOfIncResolver) {










 this.incFact = incFact;










 this.incAccessPath = incAccessPath;










 this.incResolver = incResolver;










 this.resolverAtCaller = resolverAtCaller;










 this.callDelta = callDelta;










 this.usedAccessPathOfIncResolver = usedAccessPathOfIncResolver;










 }










 










 public ReturnEdge<Field, Fact, Stmt, Method> copyWithIncomingResolver(










 Resolver<Field, Fact, Stmt, Method> incResolver, Delta<Field> usedAccessPathOfIncResolver) {










 return new ReturnEdge<>(incFact, incAccessPath, incResolver, resolverAtCaller, callDelta, usedAccessPathOfIncResolver);










 }










 










 public ReturnEdge<Field, Fact, Stmt, Method> copyWithResolverAtCaller(










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, Delta<Field> usedAccessPathOfIncResolver) {










 return new ReturnEdge<>(incFact, incAccessPath, null, resolverAtCaller, callDelta, usedAccessPathOfIncResolver);










 }










 










 @Override










 public String toString() {










 return String.format("IncFact: %s%s, Delta: %s, IncResolver: <%s:%s>, ResolverAtCallSite: %s", incFact, incAccessPath, callDelta, usedAccessPathOfIncResolver, incResolver, resolverAtCaller);










 }










 










 










}




\ No newline at end of file














src/heros/alias/ReturnSiteResolver.java








View file @ 90319070






......@@ -12,33 +12,24 @@ package heros.alias;




















import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.Constraint;





















import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {










public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {





















 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Set<ReturnEdge> incomingFacts;










 private Map<AccessPath<Field>, ReturnSiteResolver<Field, Fact, Stmt, Method>> nestedResolvers = Maps.newHashMap();










 private ReturnSiteResolver<Field, Fact, Stmt, Method> parent;





















 public ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(analyzer, returnSite, new AccessPath<Field>(), null);










 propagated = false;










 }





















 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer);










 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 this.returnSite = returnSite;










 this.resolvedAccPath = resolvedAccPath;










 this.parent = parent;










 this.incomingFacts = Sets.newHashSet();










 propagated=true;










 }










 










 @Override



......@@ -46,160 +37,97 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends Resolver<Fiel









 return "<"+resolvedAccPath+":"+returnSite+">";










 }










 










 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 }










 










 protected AccessPath<Field> getAccessPathOf(ReturnEdge<Field, Fact, Stmt, Method> inc) {










 return inc.incAccessPath;










 }










 










 public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, 










 Delta<Field> callDelta) {










 










 addIncoming(new ReturnEdge(fact, resolverAtCaller, callDelta));










 addIncoming(new ReturnEdge<Field, Fact, Stmt, Method>(fact, resolverAtCaller, callDelta));










 }










 










 private void addIncoming(final ReturnEdge retEdge) {










 if(resolvedAccPath.isPrefixOf(retEdge.incAccessPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge "+retEdge);










 if(!incomingFacts.add(retEdge))










 return;





















 interest(analyzer, this);










 










 for(ReturnSiteResolver<Field, Fact, Stmt, Method> nestedResolver : nestedResolvers.values())










 nestedResolver.addIncoming(nestedResolver.new ReturnEdge(retEdge.incFact, retEdge.incAccessPath, retEdge.incResolver, 










 retEdge.resolverAtCaller, retEdge.callDelta, retEdge.usedAccessPathOfIncResolver));





















 if(!propagated) {










 propagated=true;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<>(retEdge.incFact, new AccessPath<Field>(), this)));










 }










 }










 else if(retEdge.incAccessPath.isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 log("Incoming potential prefix:  "+retEdge);










 retEdge.resolveViaDelta();










 protected void processIncomingGuaranteedPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(!propagated) {










 propagated=true;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<>(retEdge.incFact, new AccessPath<Field>(), this)));










 }










 }










 };










 










 protected void processIncomingPotentialPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 log("Incoming potential prefix:  "+retEdge);










 resolveViaDelta(retEdge);










 };










 










 protected void log(String message) {










 analyzer.log("Return Site "+toString()+": "+message);










 }





















 @Override










 public void resolve(Constraint<Field> constraint, final InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(!constraint.canBeAppliedTo(resolvedAccPath))










 return;










 










 AccessPath<Field> candidateAccPath = constraint.applyToAccessPath(resolvedAccPath);










 ReturnSiteResolver<Field, Fact, Stmt, Method> nestedResolver = getOrCreateNestedResolver(candidateAccPath);










 if(!nestedResolver.resolvedAccPath.equals(constraint.applyToAccessPath(resolvedAccPath)))










 throw new AssertionError();










 










 nestedResolver.registerCallback(callback);










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<>(analyzer, returnSite, newAccPath, this);










 }










 










 private ReturnSiteResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> candidateAccPath) {










 if(resolvedAccPath.equals(candidateAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(candidateAccPath)) {










 assert resolvedAccPath.getDeltaTo(candidateAccPath).accesses.length <= 1;










 final ReturnSiteResolver<Field, Fact, Stmt, Method> nestedResolver = new ReturnSiteResolver<>(analyzer, returnSite, candidateAccPath, this);










 nestedResolver.propagated = true;










 nestedResolvers.put(candidateAccPath, nestedResolver);





















 for(ReturnSiteResolver<Field, Fact, Stmt, Method>.ReturnEdge retEdge: incomingFacts) {










 nestedResolver.addIncoming(nestedResolver.new ReturnEdge(retEdge.incFact, retEdge.incAccessPath, retEdge.incResolver, 










 retEdge.resolverAtCaller, retEdge.callDelta, retEdge.usedAccessPathOfIncResolver));










 } 










 }










 return nestedResolvers.get(candidateAccPath);










 public Stmt getReturnSite() {










 return returnSite;










 }










 










 private class ReturnEdge {





















 final Fact incFact;










 final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 final Delta<Field> callDelta;










 final AccessPath<Field> incAccessPath;










 final Resolver<Field, Fact, Stmt, Method> incResolver;










 final Delta<Field> usedAccessPathOfIncResolver;





















 public ReturnEdge(WrappedFact<Field, Fact, Stmt, Method> fact, Resolver<Field, Fact, Stmt, Method> resolverAtCaller,










 Delta<Field> callDelta) {










 this(fact.getFact(), fact.getAccessPath(), fact.getResolver(), resolverAtCaller, callDelta, Delta.<Field>empty());










 }










 










 private ReturnEdge(Fact incFact, AccessPath<Field> incAccessPath, Resolver<Field, Fact, Stmt, Method> incResolver, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, Delta<Field> callDelta, Delta<Field> usedAccessPathOfIncResolver) {










 this.incFact = incFact;










 this.incAccessPath = incAccessPath;










 this.incResolver = incResolver;










 this.resolverAtCaller = resolverAtCaller;










 this.callDelta = callDelta;










 this.usedAccessPathOfIncResolver = usedAccessPathOfIncResolver;










 }










 










 @Override










 public String toString() {










 return String.format("IncFact: %s%s, Delta: %s, IncResolver: <%s:%s>, ResolverAtCallSite: %s", incFact, incAccessPath, callDelta, usedAccessPathOfIncResolver, incResolver, resolverAtCaller);










 }










 










 public void resolveViaDelta() {










 if(incResolver == null || incResolver instanceof CallEdgeResolver) {










 resolveViaDeltaAndPotentiallyDelegateToCallSite();










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = usedAccessPathOfIncResolver.applyTo(incAccessPath).getDeltaTo(resolvedAccPath);










 assert delta.accesses.length <= 1;










 incResolver.resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {





















 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingFacts.add(new ReturnEdge(incFact, incAccessPath, resolver, resolverAtCaller, callDelta, incAccessPath.getDeltaTo(resolvedAccPath)));










 ReturnSiteResolver.this.interest(analyzer, resolver);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 resolveViaDeltaAndPotentiallyDelegateToCallSite();










 }










 });










 } 










 }





















 private void resolveViaDeltaAndPotentiallyDelegateToCallSite() {










 final AccessPath<Field> currAccPath = callDelta.applyTo(usedAccessPathOfIncResolver.applyTo(incAccessPath));










 if(resolvedAccPath.isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingFacts.add(new ReturnEdge(incFact, incAccessPath, null, resolverAtCaller, callDelta, usedAccessPathOfIncResolver));










 ReturnSiteResolver.this.interest(analyzer, ReturnSiteResolver.this);










 } else if(currAccPath.isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(currAccPath);










 }










 }










 private void resolveViaDelta(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(retEdge.incResolver == null || retEdge.incResolver instanceof CallEdgeResolver) {










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPath());










 assert delta.accesses.length <= 1;










 retEdge.incResolver.resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {





















 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(analyzer, resolver);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 }










 });










 } 










 }





















 protected void resolveViaCallSiteResolver(AccessPath<Field> currAccPath) {










 if(resolverAtCaller == null || resolverAtCaller instanceof CallEdgeResolver) {










 ReturnSiteResolver.this.canBeResolvedEmpty();










 } else {










 resolverAtCaller.resolve(new DeltaConstraint<>(currAccPath.getDeltaTo(resolvedAccPath)), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingFacts.add(new ReturnEdge(incFact, incAccessPath, null, resolver, Delta.<Field>empty(), incAccessPath.getDeltaTo(resolvedAccPath)));










 ReturnSiteResolver.this.interest(analyzer, ReturnSiteResolver.this);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 ReturnSiteResolver.this.canBeResolvedEmpty();










 }










 });










 }










 private void resolveViaDeltaAndPotentiallyDelegateToCallSite(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath));










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest(analyzer, this);










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }










 }





















 public Stmt getReturnSite() {










 return returnSite;










 protected void resolveViaCallSiteResolver(final ReturnEdge<Field, Fact, Stmt, Method> retEdge, AccessPath<Field> currAccPath) {










 if(retEdge.resolverAtCaller == null || retEdge.resolverAtCaller instanceof CallEdgeResolver) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(analyzer, ReturnSiteResolver.this);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 ReturnSiteResolver.this.canBeResolvedEmpty();










 }










 });










 }










 }










}














src/heros/alias/bidi/SourceStmtAnnotatedMethodAnalyzer.java

â†’

src/heros/alias/SourceStmtAnnotatedMethodAnalyzer.java








View file @ 90319070






......@@ -8,16 +8,8 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias.bidi;










package heros.alias;





















import heros.alias.AccessPath;










import heros.alias.CacheMap;










import heros.alias.Context;










import heros.alias.IncomingEdge;










import heros.alias.MethodAnalyzer;










import heros.alias.PerAccessPathMethodAnalyzer;










import heros.alias.WrappedFact;










import heros.alias.WrappedFactAtStatement;





















public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>










 implements MethodAnalyzer<Field, Fact, Stmt, Method> {



......@@ -40,11 +32,10 @@ public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>









 }










 










 @Override










 public void addIncomingEdge(IncomingEdge<Field, Fact, Stmt, Method> incEdge) {










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact = incEdge.getCalleeSourceFact();










 Key<Fact, Stmt> key = new Key<Fact, Stmt>(calleeSourceFact.getFact(), null);










 PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer = perSourceAnalyzer.getOrCreate(key);










 analyzer.bootstrapAtMethodStartPoints();










 analyzer.addIncomingEdge(incEdge); 










 }














......














src/heros/alias/WrappedFactAtStatement.java








View file @ 90319070






......@@ -20,9 +20,21 @@ public class WrappedFactAtStatement<Field, Fact, Stmt, Method> {









 this.fact = fact;










 }





















 public WrappedFact<Field,Fact, Stmt, Method> getFact() {










 public WrappedFact<Field,Fact, Stmt, Method> getWrappedFact() {










 return fact;










 }










 










 public Fact getFact() {










 return fact.getFact();










 }










 










 public AccessPath<Field> getAccessPath() {










 return fact.getAccessPath();










 }










 










 public Resolver<Field, Fact, Stmt, Method> getResolver() {










 return fact.getResolver();










 }





















 public Stmt getStatement() {










 return stmt;



......














src/heros/alias/ZeroCallEdgeResolver.java








View file @ 90319070






......@@ -10,7 +10,6 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.AccessPath.Delta;










import heros.alias.FlowFunction.Constraint;





















public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeResolver<Field, Fact, Stmt, Method> {



......@@ -31,4 +30,9 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 }










 










 @Override










 protected ZeroCallEdgeResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 return this;










 }










}














src/heros/alias/ZeroHandler.java








View file @ 90319070






......@@ -12,5 +12,11 @@ package heros.alias;




















public interface ZeroHandler<Field> {





















 /**










	 * If reading fields on a fact abstraction directly connected to a Zero fact, this handler is consulted










	 * to decide if the field may be read. 










	 * @param accPath The AccessPath consisting of fields already read in addition to a new field to be read.










	 * @return true if the AccessPath can be generated from within the Zero fact, false otherwise.










	 */










 boolean shouldGenerateAccessPath(AccessPath<Field> accPath);










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
90319070


authored
Apr 01, 2015
by


Johannes Lerch



Browse files



Commit
90319070


authored
Apr 01, 2015
by


Johannes Lerch

90319070authoredbyJohannes Lerch

refactoring






parent
eb98a856
















parent
eb98a856





parent












Changes
20
20


Expand all
Hide whitespace changes

Inline
Side-by-side






Expand all
Hide whitespace changes

Inline
Side-by-side




Expand all
Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/alias/AccessPath.java








View file @ 90319070






......@@ -144,22 +144,6 @@ public class AccessPath<T> {









 return delta;










 }










 










 //FIXME this is an unsound dirty hack










 public boolean contains(AccessPath<T> accPath) {










 assert accPath.accesses.length <= 1;










 if(accPath.accesses.length == 1) {










 for(T sub : accesses) {










 if(sub.equals(accPath.accesses[0])) {










 return true;










 }










 }










 return false;










 }










 else










 return exclusions.containsAll(accPath.exclusions);










 }










 










 










 public static class Delta<T> {










 final T[] accesses;










 final Set<T> exclusions;



......














src/heros/alias/BiDiFieldSensitiveIFDSSolver.java








View file @ 90319070






......@@ -12,9 +12,10 @@ package heros.alias;































import heros.InterproceduralCFG;










import heros.alias.bidi.SourceStmtAnnotatedMethodAnalyzer;










import heros.alias.bidi.SourceStmtAnnotatedMethodAnalyzer.Synchronizer;










import heros.alias.SourceStmtAnnotatedMethodAnalyzer.Synchronizer;





















import java.util.Set;





















import com.google.common.collect.HashMultimap;










import com.google.common.collect.Sets;














......














src/heros/alias/IncomingEdge.java

â†’

src/heros/alias/CallEdge.java








View file @ 90319070






......@@ -13,13 +13,13 @@ package heros.alias;









import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;





















public class IncomingEdge<Field, Fact, Stmt, Method> {










public class CallEdge<Field, Fact, Stmt, Method> {





















 private WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact;










 private PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> callerAnalyzer;










 private WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtCallSite;










 










 public IncomingEdge(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> callerAnalyzer, 










 public CallEdge(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> callerAnalyzer, 










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtCallSite,










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact) {










 this.callerAnalyzer = callerAnalyzer;



......@@ -32,7 +32,7 @@ public class IncomingEdge<Field, Fact, Stmt, Method> {









 }










 










 public WrappedFact<Field, Fact, Stmt, Method> getCallerCallSiteFact() {










 return factAtCallSite.getFact();










 return factAtCallSite.getWrappedFact();










 }










 










 public WrappedFact<Field, Fact, Stmt, Method> getCallerSourceFact() {



......@@ -53,16 +53,16 @@ public class IncomingEdge<Field, Fact, Stmt, Method> {









 if(!factAtCallSite.canDeltaBeApplied(delta))










 return;










 










 factAtCallSite.getFact().getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 factAtCallSite.getWrappedFact().getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFactWithDelta = new WrappedFact<>(calleeSourceFact.getFact(), delta.applyTo(calleeSourceFact.getAccessPath()), resolver);










 if(interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath()) != PrefixTestResult.GUARANTEED_PREFIX)










 throw new AssertionError();










 interestedAnalyzer.addIncomingEdge(new IncomingEdge<>(analyzer, 










 interestedAnalyzer.addIncomingEdge(new CallEdge<>(analyzer, 










 new WrappedFactAtStatement<>(factAtCallSite.getStatement(), 










 new WrappedFact<>(factAtCallSite.getFact().getFact(), delta.applyTo(factAtCallSite.getFact().getAccessPath()), resolver)), 










 new WrappedFact<>(factAtCallSite.getWrappedFact().getFact(), delta.applyTo(factAtCallSite.getWrappedFact().getAccessPath()), resolver)), 










 calleeSourceFactWithDelta));










 }










 



......@@ -96,7 +96,7 @@ public class IncomingEdge<Field, Fact, Stmt, Method> {









 return false;










 if (getClass() != obj.getClass())










 return false;










 IncomingEdge other = (IncomingEdge) obj;










 CallEdge other = (CallEdge) obj;










 if (calleeSourceFact == null) {










 if (other.calleeSourceFact != null)










 return false;



......














src/heros/alias/CallEdgeResolver.java








View file @ 90319070






......@@ -10,31 +10,52 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.Constraint;










import com.google.common.collect.Lists;
































class CallEdgeResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {










class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> {





















 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 super(analyzer);










 this(analyzer, null);










 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 }





















 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) { 










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(analyzer.getAccessPath()) && !analyzer.isLocked() && !doesContain(constraint)) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(analyzer.getAccessPath());










 PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method> nestedAnalyzer = analyzer.getOrCreateNestedAnalyzer(newAccPath);










 nestedAnalyzer.getCallEdgeResolver().registerCallback(callback);










 }










 protected AccessPath<Field> getResolvedAccessPath() {










 return analyzer.getAccessPath();










 }










 










 @Override










 protected AccessPath<Field> getAccessPathOf(CallEdge<Field, Fact, Stmt, Method> inc) {










 return inc.getCalleeSourceFact().getAccessPath();










 }










 










 @Override










 protected void processIncomingGuaranteedPrefix(CallEdge<Field, Fact, Stmt, Method> inc) {










 analyzer.applySummaries(inc);










 }










 










 //FIXME: this is a dirty hack (and unsound?!)










 private boolean doesContain(Constraint<Field> constraint) {










 AccessPath<Field> accPath = constraint.applyToAccessPath(new AccessPath<Field>());










 return analyzer.getAccessPath().contains(accPath);










 @Override










 protected void processIncomingPotentialPrefix(CallEdge<Field, Fact, Stmt, Method> inc) {










 lock();










 inc.registerInterestCallback(analyzer);










 unlock();










 }





















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return analyzer.createWithAccessPath(newAccPath).getCallEdgeResolver();










 }










 










 public void applySummaries(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 for(CallEdge<Field, Fact, Stmt, Method> incEdge : Lists.newLinkedList(incomingEdges)) {










 analyzer.applySummary(incEdge, factAtStmt);










 }










 }










 










 @Override










 public String toString() {










 return "";



......@@ -45,5 +66,9 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact,









 analyzer.log(message);










 }





















 public boolean hasIncomingEdges() {










 return !incomingEdges.isEmpty();










 }
































}




\ No newline at end of file














src/heros/alias/Context.java








View file @ 90319070






......@@ -12,26 +12,26 @@ package heros.alias;




















import heros.InterproceduralCFG;





















public abstract class Context<FieldRef, FactAbstraction, Statement, Method> {










public abstract class Context<Field, Fact, Stmt, Method> {





















 public final InterproceduralCFG<Statement, Method> icfg;










 public final FlowFunctionProcessor<FactAbstraction, Statement, Method, FieldRef> flowProcessor;










 public final InterproceduralCFG<Stmt, Method> icfg;










 public final Scheduler scheduler;










 public final FactAbstraction zeroValue;










 public final Fact zeroValue;










 public final boolean followReturnsPastSeeds;










 public final FactMergeHandler<FactAbstraction> factHandler;










 public final ZeroHandler<FieldRef> zeroHandler;










 public final FactMergeHandler<Fact> factHandler;










 public final ZeroHandler<Field> zeroHandler;










 public final FlowFunctions<Stmt, Field, Fact, Method> flowFunctions;










 










 Context(InterproceduralCFG<Statement, Method> icfg, FlowFunctionProcessor<FactAbstraction, Statement, Method, FieldRef> flowProcessor, 










 Scheduler scheduler, FactAbstraction zeroValue, boolean followReturnsPastSeeds, FactMergeHandler<FactAbstraction> factHandler, ZeroHandler<FieldRef> zeroHandler) {










 this.icfg = icfg;










 this.flowProcessor = flowProcessor;










 Context(IFDSTabulationProblem<Stmt, Field, Fact, Method, ? extends InterproceduralCFG<Stmt, Method>> tabulationProblem, 










 Scheduler scheduler, FactMergeHandler<Fact> factHandler) {










 this.icfg = tabulationProblem.interproceduralCFG();










 this.flowFunctions = tabulationProblem.flowFunctions();










 this.scheduler = scheduler;










 this.zeroValue = zeroValue;










 this.followReturnsPastSeeds = followReturnsPastSeeds;










 this.zeroValue = tabulationProblem.zeroValue();










 this.followReturnsPastSeeds = tabulationProblem.followReturnsPastSeeds();










 this.factHandler = factHandler;










 this.zeroHandler = zeroHandler;










 this.zeroHandler = tabulationProblem.zeroHandler();










 }










 










 public abstract MethodAnalyzer<FieldRef, FactAbstraction, Statement, Method> getAnalyzer(Method method);










 public abstract MethodAnalyzer<Field, Fact, Stmt, Method> getAnalyzer(Method method);










}














src/heros/alias/ControlFlowJoinResolver.java








View file @ 90319070






......@@ -10,110 +10,61 @@









 ******************************************************************************/










package heros.alias;





















import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.Constraint;





















public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {










public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {





















 private boolean recursiveLock = false;










 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private Set<WrappedFact<Field, Fact, Stmt, Method>> incomingFacts = Sets.newHashSet();










 private boolean propagated = false;










 private Map<AccessPath<Field>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> nestedResolvers = Maps.newHashMap();










 private ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent;





















 public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(analyzer, joinStmt, new AccessPath<Field>(), null);










 propagated=false;










 }










 










 private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer);










 super(analyzer, parent);










 this.joinStmt = joinStmt;










 this.resolvedAccPath = resolvedAccPath;










 this.parent = parent;










 }





















 public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact) {










 if(resolvedAccPath.isPrefixOf(fact.getAccessPath()) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Fact "+fact);










 if(!incomingFacts.add(fact))










 return;










 










 interest(analyzer, this);










 for(ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver : nestedResolvers.values())










 nestedResolver.addIncoming(fact);










 










 if(!propagated) {










 propagated=true;










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }










 }










 else if(fact.getAccessPath().isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);










 }





















 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 }










 propagated=true;










 }










 










 private boolean isLocked() {










 if(recursiveLock)










 return true;










 if(parent == null)










 return false;










 return parent.isLocked();










 @Override










 protected AccessPath<Field> getAccessPathOf(WrappedFact<Field, Fact, Stmt, Method> inc) {










 return inc.getAccessPath();










 }





















 protected void processIncomingGuaranteedPrefix(heros.alias.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 propagated=true;










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }










 };










 










 @Override










 public void resolve(Constraint<Field> constraint, final InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(!constraint.canBeAppliedTo(resolvedAccPath) || isLocked())










 return;










 










 AccessPath<Field> candidateAccPath = constraint.applyToAccessPath(resolvedAccPath);










 recursiveLock = true;










 ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = getOrCreateNestedResolver(candidateAccPath);










 if(!nestedResolver.resolvedAccPath.equals(constraint.applyToAccessPath(resolvedAccPath)))










 throw new AssertionError();










 










 nestedResolver.registerCallback(callback);










 recursiveLock = false;










 protected void processIncomingPotentialPrefix(WrappedFact<Field, Fact, Stmt, Method> fact) {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);










 }





















 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 unlock();










 }










 










 private ControlFlowJoinResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> candidateAccPath) {










 if(resolvedAccPath.equals(candidateAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(candidateAccPath)) {










 assert resolvedAccPath.getDeltaTo(candidateAccPath).accesses.length <= 1;










 










 final ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = new ControlFlowJoinResolver<>(analyzer, joinStmt, candidateAccPath, this);










 nestedResolver.propagated = true;










 nestedResolvers.put(candidateAccPath, nestedResolver);





















 for(WrappedFact<Field, Fact, Stmt, Method> incFact: incomingFacts) {










 nestedResolver.addIncoming(incFact);










 } 










 }










 return nestedResolvers.get(candidateAccPath);










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<>(analyzer, joinStmt, newAccPath, this);










 }





















 @Override



......@@ -126,6 +77,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 return "<"+resolvedAccPath+":"+joinStmt+">";










 }





















 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 }



......














src/heros/alias/FactMergeHandler.java








View file @ 90319070






......@@ -12,7 +12,17 @@ package heros.alias;




















public interface FactMergeHandler<Fact> {





















 /**










	 * Called when propagating a Fact to a statement at which an equal Fact was already propagated to.










	 * @param previousFact The Fact instance that was propagated to the statement first.










	 * @param currentFact The Fact that was propagated to the statement last.










	 */










 void merge(Fact previousFact, Fact currentFact);










 










 /**










	 * Called on Facts being propagated over a return edge. Via this method context can be restored that was abstracted when propagating over the call edge.










	 * @param factAtReturnSite The fact being propagated over the return edge.










	 * @param factAtCallSite The Fact that was present at the call site, i.e., the Fact used as input to the call flow function.










	 */










 void restoreCallingContext(Fact factAtReturnSite, Fact factAtCallSite);










}














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 90319070






......@@ -18,10 +18,11 @@ import java.util.Set;









import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















import com.sun.istack.internal.Nullable;





















public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends InterproceduralCFG<N, M>> {





















 protected static final Logger logger = LoggerFactory.getLogger(FieldSensitiveIFDSSolver.class);










 private FlowFunctionProcessor<D, N, M, FieldRef> flowProcessor;










 










 private CacheMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new CacheMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {










 @Override



......@@ -35,19 +36,17 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur









 private Debugger<FieldRef, D, N, M, I> debugger;










 private Scheduler scheduler;





















 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, @Nullable Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 this.tabulationProblem = tabulationProblem;










 this.scheduler = scheduler;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;










 this.debugger.setICFG(tabulationProblem.interproceduralCFG());










 flowProcessor = new FlowFunctionProcessor<>(tabulationProblem.flowFunctions());










 context = initContext(tabulationProblem, factHandler);










 submitInitialSeeds();










 }





















 protected Context<FieldRef, D, N, M> initContext(IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem, FactMergeHandler<D> factHandler) {










 return new Context<FieldRef, D, N, M>(tabulationProblem.interproceduralCFG(), flowProcessor, scheduler, tabulationProblem.zeroValue(), 










 tabulationProblem.followReturnsPastSeeds(), factHandler, tabulationProblem.zeroHandler()) {










 private Context<FieldRef, D, N, M> initContext(IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem, FactMergeHandler<D> factHandler) {










 return new Context<FieldRef, D, N, M>(tabulationProblem, scheduler, factHandler) {










 @Override










 public MethodAnalyzer<FieldRef, D, N, M> getAnalyzer(M method) {










 if(method == null)



......@@ -63,10 +62,8 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 /**










	 * Schedules the processing of initial seeds, initiating the analysis.










	 * Clients should only call this methods if performing synchronization on










	 * their own. Normally, {@link #solve()} should be called instead.










	 */










 protected void submitInitialSeeds() {










 private void submitInitialSeeds() {










 for(Entry<N, Set<D>> seed: tabulationProblem.initialSeeds().entrySet()) {










 N startPoint = seed.getKey();










 MethodAnalyzer<FieldRef, D,N,M> analyzer = methodAnalyzers.getOrCreate(tabulationProblem.interproceduralCFG().getMethodOf(startPoint));



......














src/heros/alias/FlowFunctionProcessor.java

deleted


100644 â†’ 0







View file @ eb98a856













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.ConstrainedFact;





















import java.util.Set;





















import com.google.common.collect.Sets;





















public class FlowFunctionProcessor<Fact, Stmt, Method, Field> {





















 private FlowFunctions<Stmt, Field, Fact, Method> flowFunctions;





















 public FlowFunctionProcessor(FlowFunctions<Stmt, Field, Fact, Method> flowFunctions) {










 this.flowFunctions = flowFunctions;










 }










 










 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeNormalFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> source) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getNormalFlowFunction(source.getStatement());










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }










 










 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeCallFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> source, Method calledMethod) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getCallFlowFunction(source.getStatement(), calledMethod);










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }





















 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeCallToReturnFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> source, Stmt returnSite) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getCallToReturnFlowFunction(source.getStatement(), returnSite);










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }





















 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeReturnFlow(FactMergeHandler<Fact> factHandler, WrappedFactAtStatement<Field, Fact, Stmt, Method> source, Method calleeMethod, Stmt returnSite,










 IncomingEdge<Field, Fact, Stmt, Method> incEdge) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getReturnFlowFunction(incEdge.getCallSite(), calleeMethod, source.getStatement(), returnSite);










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 










 for (ConstrainedFact<Field, Fact, Stmt, Method> constrainedFact : targets) {










 factHandler.restoreCallingContext(constrainedFact.getFact().getFact(), incEdge.getCallerCallSiteFact().getFact());










 }










 return targets;










 }





















 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeUnbalancedReturnFlow(Fact zero, WrappedFactAtStatement<Field, Fact, Stmt, Method> source, 










 Method calleeMethod, Stmt returnSite, Stmt callSite) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getReturnFlowFunction(callSite, calleeMethod, source.getStatement(), returnSite);










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }










}














src/heros/alias/MethodAnalyzer.java








View file @ 90319070






......@@ -12,7 +12,7 @@ package heros.alias;




















public interface MethodAnalyzer<Field,Fact,Stmt,Method> {





















 public void addIncomingEdge(IncomingEdge<Field, Fact, Stmt, Method> incEdge);










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge);










 










 public void addInitialSeed(Stmt startPoint, Fact val);










 



......














src/heros/alias/MethodAnalyzerImpl.java








View file @ 90319070






......@@ -29,10 +29,9 @@ public class MethodAnalyzerImpl<Field,Fact, Stmt, Method>









 }










 










 @Override










 public void addIncomingEdge(IncomingEdge<Field, Fact, Stmt, Method> incEdge) {










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact = incEdge.getCalleeSourceFact();










 PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer = perSourceAnalyzer.getOrCreate(calleeSourceFact.getFact());










 analyzer.bootstrapAtMethodStartPoints();










 analyzer.addIncomingEdge(incEdge);










 }














......














src/heros/alias/PerAccessPathMethodAnalyzer.java








View file @ 90319070





This diff is collapsed.
Click to expand it.













src/heros/alias/Resolver.java








View file @ 90319070






......@@ -10,15 +10,12 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.Constraint;





















import java.util.List;










import java.util.Map;





















import com.google.common.collect.HashMultimap;










import com.google.common.collect.Lists;





















import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;





















public abstract class Resolver<Field, Fact, Stmt, Method> {





















 private boolean interest = false;



......














src/heros/alias/ResolverTemplate.java



0 â†’ 100644







View file @ 90319070













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.Constraint;
































public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming> extends Resolver<Field, Fact, Stmt, Method> {





















 private boolean recursionLock = false;










 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent) {










 super(analyzer);










 this.parent = parent;










 }










 










 protected boolean isLocked() {










 if(recursionLock)










 return true;










 if(parent == null)










 return false;










 return parent.isLocked();










 }





















 protected void lock() {










 recursionLock = true;










 }










 










 protected void unlock() {










 recursionLock = false;










 }










 










 protected abstract AccessPath<Field> getResolvedAccessPath();










 










 protected abstract AccessPath<Field> getAccessPathOf(Incoming inc);










 










 public void addIncoming(Incoming inc) {










 if(getResolvedAccessPath().isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge: "+inc);










 if(!incomingEdges.add(inc))










 return;










 










 interest(analyzer, this);










 










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : nestedResolvers.values()) {










 nestedResolver.addIncoming(inc);










 }










 










 processIncomingGuaranteedPrefix(inc);










 }










 else if(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 processIncomingPotentialPrefix(inc);










 }










 }





















 protected abstract void processIncomingPotentialPrefix(Incoming inc);





















 protected abstract void processIncomingGuaranteedPrefix(Incoming inc);










 










 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(getResolvedAccessPath()) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(getResolvedAccessPath());










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = getOrCreateNestedResolver(newAccPath);










 assert nestedResolver.getResolvedAccessPath().equals(constraint.applyToAccessPath(getResolvedAccessPath()));










 nestedResolver.registerCallback(callback);










 }










 }





















 protected ResolverTemplate<Field, Fact, Stmt, Method, Incoming> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 if(getResolvedAccessPath().equals(newAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(newAccPath)) {










 assert getResolvedAccessPath().getDeltaTo(newAccPath).accesses.length <= 1;










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = createNestedResolver(newAccPath);










 nestedResolvers.put(newAccPath, nestedResolver);










 










 for(Incoming inc : incomingEdges) {










 nestedResolver.addIncoming(inc);










 }










 }










 return nestedResolvers.get(newAccPath);










 }










 










 protected abstract ResolverTemplate<Field, Fact, Stmt, Method, Incoming> createNestedResolver(AccessPath<Field> newAccPath);










}




\ No newline at end of file














src/heros/alias/ReturnEdge.java



0 â†’ 100644







View file @ 90319070













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;





















class ReturnEdge<Field, Fact, Stmt, Method> {





















 final Fact incFact;










 final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 final Delta<Field> callDelta;










 final AccessPath<Field> incAccessPath;










 final Resolver<Field, Fact, Stmt, Method> incResolver;










 final Delta<Field> usedAccessPathOfIncResolver;





















 public ReturnEdge(WrappedFact<Field, Fact, Stmt, Method> fact, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller,










 Delta<Field> callDelta) {










 this(fact.getFact(), fact.getAccessPath(), fact.getResolver(), resolverAtCaller, callDelta, Delta.<Field>empty());










 }










 










 private ReturnEdge(Fact incFact, 










 AccessPath<Field> incAccessPath, 










 Resolver<Field, Fact, Stmt, Method> incResolver, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, 










 Delta<Field> callDelta, 










 Delta<Field> usedAccessPathOfIncResolver) {










 this.incFact = incFact;










 this.incAccessPath = incAccessPath;










 this.incResolver = incResolver;










 this.resolverAtCaller = resolverAtCaller;










 this.callDelta = callDelta;










 this.usedAccessPathOfIncResolver = usedAccessPathOfIncResolver;










 }










 










 public ReturnEdge<Field, Fact, Stmt, Method> copyWithIncomingResolver(










 Resolver<Field, Fact, Stmt, Method> incResolver, Delta<Field> usedAccessPathOfIncResolver) {










 return new ReturnEdge<>(incFact, incAccessPath, incResolver, resolverAtCaller, callDelta, usedAccessPathOfIncResolver);










 }










 










 public ReturnEdge<Field, Fact, Stmt, Method> copyWithResolverAtCaller(










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, Delta<Field> usedAccessPathOfIncResolver) {










 return new ReturnEdge<>(incFact, incAccessPath, null, resolverAtCaller, callDelta, usedAccessPathOfIncResolver);










 }










 










 @Override










 public String toString() {










 return String.format("IncFact: %s%s, Delta: %s, IncResolver: <%s:%s>, ResolverAtCallSite: %s", incFact, incAccessPath, callDelta, usedAccessPathOfIncResolver, incResolver, resolverAtCaller);










 }










 










 










}




\ No newline at end of file














src/heros/alias/ReturnSiteResolver.java








View file @ 90319070






......@@ -12,33 +12,24 @@ package heros.alias;




















import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.Constraint;





















import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {










public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {





















 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Set<ReturnEdge> incomingFacts;










 private Map<AccessPath<Field>, ReturnSiteResolver<Field, Fact, Stmt, Method>> nestedResolvers = Maps.newHashMap();










 private ReturnSiteResolver<Field, Fact, Stmt, Method> parent;





















 public ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(analyzer, returnSite, new AccessPath<Field>(), null);










 propagated = false;










 }





















 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer);










 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 this.returnSite = returnSite;










 this.resolvedAccPath = resolvedAccPath;










 this.parent = parent;










 this.incomingFacts = Sets.newHashSet();










 propagated=true;










 }










 










 @Override



......@@ -46,160 +37,97 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends Resolver<Fiel









 return "<"+resolvedAccPath+":"+returnSite+">";










 }










 










 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 }










 










 protected AccessPath<Field> getAccessPathOf(ReturnEdge<Field, Fact, Stmt, Method> inc) {










 return inc.incAccessPath;










 }










 










 public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, 










 Delta<Field> callDelta) {










 










 addIncoming(new ReturnEdge(fact, resolverAtCaller, callDelta));










 addIncoming(new ReturnEdge<Field, Fact, Stmt, Method>(fact, resolverAtCaller, callDelta));










 }










 










 private void addIncoming(final ReturnEdge retEdge) {










 if(resolvedAccPath.isPrefixOf(retEdge.incAccessPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge "+retEdge);










 if(!incomingFacts.add(retEdge))










 return;





















 interest(analyzer, this);










 










 for(ReturnSiteResolver<Field, Fact, Stmt, Method> nestedResolver : nestedResolvers.values())










 nestedResolver.addIncoming(nestedResolver.new ReturnEdge(retEdge.incFact, retEdge.incAccessPath, retEdge.incResolver, 










 retEdge.resolverAtCaller, retEdge.callDelta, retEdge.usedAccessPathOfIncResolver));





















 if(!propagated) {










 propagated=true;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<>(retEdge.incFact, new AccessPath<Field>(), this)));










 }










 }










 else if(retEdge.incAccessPath.isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 log("Incoming potential prefix:  "+retEdge);










 retEdge.resolveViaDelta();










 protected void processIncomingGuaranteedPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(!propagated) {










 propagated=true;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<>(retEdge.incFact, new AccessPath<Field>(), this)));










 }










 }










 };










 










 protected void processIncomingPotentialPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 log("Incoming potential prefix:  "+retEdge);










 resolveViaDelta(retEdge);










 };










 










 protected void log(String message) {










 analyzer.log("Return Site "+toString()+": "+message);










 }





















 @Override










 public void resolve(Constraint<Field> constraint, final InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(!constraint.canBeAppliedTo(resolvedAccPath))










 return;










 










 AccessPath<Field> candidateAccPath = constraint.applyToAccessPath(resolvedAccPath);










 ReturnSiteResolver<Field, Fact, Stmt, Method> nestedResolver = getOrCreateNestedResolver(candidateAccPath);










 if(!nestedResolver.resolvedAccPath.equals(constraint.applyToAccessPath(resolvedAccPath)))










 throw new AssertionError();










 










 nestedResolver.registerCallback(callback);










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<>(analyzer, returnSite, newAccPath, this);










 }










 










 private ReturnSiteResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> candidateAccPath) {










 if(resolvedAccPath.equals(candidateAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(candidateAccPath)) {










 assert resolvedAccPath.getDeltaTo(candidateAccPath).accesses.length <= 1;










 final ReturnSiteResolver<Field, Fact, Stmt, Method> nestedResolver = new ReturnSiteResolver<>(analyzer, returnSite, candidateAccPath, this);










 nestedResolver.propagated = true;










 nestedResolvers.put(candidateAccPath, nestedResolver);





















 for(ReturnSiteResolver<Field, Fact, Stmt, Method>.ReturnEdge retEdge: incomingFacts) {










 nestedResolver.addIncoming(nestedResolver.new ReturnEdge(retEdge.incFact, retEdge.incAccessPath, retEdge.incResolver, 










 retEdge.resolverAtCaller, retEdge.callDelta, retEdge.usedAccessPathOfIncResolver));










 } 










 }










 return nestedResolvers.get(candidateAccPath);










 public Stmt getReturnSite() {










 return returnSite;










 }










 










 private class ReturnEdge {





















 final Fact incFact;










 final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 final Delta<Field> callDelta;










 final AccessPath<Field> incAccessPath;










 final Resolver<Field, Fact, Stmt, Method> incResolver;










 final Delta<Field> usedAccessPathOfIncResolver;





















 public ReturnEdge(WrappedFact<Field, Fact, Stmt, Method> fact, Resolver<Field, Fact, Stmt, Method> resolverAtCaller,










 Delta<Field> callDelta) {










 this(fact.getFact(), fact.getAccessPath(), fact.getResolver(), resolverAtCaller, callDelta, Delta.<Field>empty());










 }










 










 private ReturnEdge(Fact incFact, AccessPath<Field> incAccessPath, Resolver<Field, Fact, Stmt, Method> incResolver, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, Delta<Field> callDelta, Delta<Field> usedAccessPathOfIncResolver) {










 this.incFact = incFact;










 this.incAccessPath = incAccessPath;










 this.incResolver = incResolver;










 this.resolverAtCaller = resolverAtCaller;










 this.callDelta = callDelta;










 this.usedAccessPathOfIncResolver = usedAccessPathOfIncResolver;










 }










 










 @Override










 public String toString() {










 return String.format("IncFact: %s%s, Delta: %s, IncResolver: <%s:%s>, ResolverAtCallSite: %s", incFact, incAccessPath, callDelta, usedAccessPathOfIncResolver, incResolver, resolverAtCaller);










 }










 










 public void resolveViaDelta() {










 if(incResolver == null || incResolver instanceof CallEdgeResolver) {










 resolveViaDeltaAndPotentiallyDelegateToCallSite();










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = usedAccessPathOfIncResolver.applyTo(incAccessPath).getDeltaTo(resolvedAccPath);










 assert delta.accesses.length <= 1;










 incResolver.resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {





















 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingFacts.add(new ReturnEdge(incFact, incAccessPath, resolver, resolverAtCaller, callDelta, incAccessPath.getDeltaTo(resolvedAccPath)));










 ReturnSiteResolver.this.interest(analyzer, resolver);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 resolveViaDeltaAndPotentiallyDelegateToCallSite();










 }










 });










 } 










 }





















 private void resolveViaDeltaAndPotentiallyDelegateToCallSite() {










 final AccessPath<Field> currAccPath = callDelta.applyTo(usedAccessPathOfIncResolver.applyTo(incAccessPath));










 if(resolvedAccPath.isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingFacts.add(new ReturnEdge(incFact, incAccessPath, null, resolverAtCaller, callDelta, usedAccessPathOfIncResolver));










 ReturnSiteResolver.this.interest(analyzer, ReturnSiteResolver.this);










 } else if(currAccPath.isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(currAccPath);










 }










 }










 private void resolveViaDelta(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(retEdge.incResolver == null || retEdge.incResolver instanceof CallEdgeResolver) {










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPath());










 assert delta.accesses.length <= 1;










 retEdge.incResolver.resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {





















 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(analyzer, resolver);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 }










 });










 } 










 }





















 protected void resolveViaCallSiteResolver(AccessPath<Field> currAccPath) {










 if(resolverAtCaller == null || resolverAtCaller instanceof CallEdgeResolver) {










 ReturnSiteResolver.this.canBeResolvedEmpty();










 } else {










 resolverAtCaller.resolve(new DeltaConstraint<>(currAccPath.getDeltaTo(resolvedAccPath)), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingFacts.add(new ReturnEdge(incFact, incAccessPath, null, resolver, Delta.<Field>empty(), incAccessPath.getDeltaTo(resolvedAccPath)));










 ReturnSiteResolver.this.interest(analyzer, ReturnSiteResolver.this);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 ReturnSiteResolver.this.canBeResolvedEmpty();










 }










 });










 }










 private void resolveViaDeltaAndPotentiallyDelegateToCallSite(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath));










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest(analyzer, this);










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }










 }





















 public Stmt getReturnSite() {










 return returnSite;










 protected void resolveViaCallSiteResolver(final ReturnEdge<Field, Fact, Stmt, Method> retEdge, AccessPath<Field> currAccPath) {










 if(retEdge.resolverAtCaller == null || retEdge.resolverAtCaller instanceof CallEdgeResolver) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(analyzer, ReturnSiteResolver.this);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 ReturnSiteResolver.this.canBeResolvedEmpty();










 }










 });










 }










 }










}














src/heros/alias/bidi/SourceStmtAnnotatedMethodAnalyzer.java

â†’

src/heros/alias/SourceStmtAnnotatedMethodAnalyzer.java








View file @ 90319070






......@@ -8,16 +8,8 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias.bidi;










package heros.alias;





















import heros.alias.AccessPath;










import heros.alias.CacheMap;










import heros.alias.Context;










import heros.alias.IncomingEdge;










import heros.alias.MethodAnalyzer;










import heros.alias.PerAccessPathMethodAnalyzer;










import heros.alias.WrappedFact;










import heros.alias.WrappedFactAtStatement;





















public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>










 implements MethodAnalyzer<Field, Fact, Stmt, Method> {



......@@ -40,11 +32,10 @@ public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>









 }










 










 @Override










 public void addIncomingEdge(IncomingEdge<Field, Fact, Stmt, Method> incEdge) {










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact = incEdge.getCalleeSourceFact();










 Key<Fact, Stmt> key = new Key<Fact, Stmt>(calleeSourceFact.getFact(), null);










 PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer = perSourceAnalyzer.getOrCreate(key);










 analyzer.bootstrapAtMethodStartPoints();










 analyzer.addIncomingEdge(incEdge); 










 }














......














src/heros/alias/WrappedFactAtStatement.java








View file @ 90319070






......@@ -20,9 +20,21 @@ public class WrappedFactAtStatement<Field, Fact, Stmt, Method> {









 this.fact = fact;










 }





















 public WrappedFact<Field,Fact, Stmt, Method> getFact() {










 public WrappedFact<Field,Fact, Stmt, Method> getWrappedFact() {










 return fact;










 }










 










 public Fact getFact() {










 return fact.getFact();










 }










 










 public AccessPath<Field> getAccessPath() {










 return fact.getAccessPath();










 }










 










 public Resolver<Field, Fact, Stmt, Method> getResolver() {










 return fact.getResolver();










 }





















 public Stmt getStatement() {










 return stmt;



......














src/heros/alias/ZeroCallEdgeResolver.java








View file @ 90319070






......@@ -10,7 +10,6 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.AccessPath.Delta;










import heros.alias.FlowFunction.Constraint;





















public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeResolver<Field, Fact, Stmt, Method> {



......@@ -31,4 +30,9 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 }










 










 @Override










 protected ZeroCallEdgeResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 return this;










 }










}














src/heros/alias/ZeroHandler.java








View file @ 90319070






......@@ -12,5 +12,11 @@ package heros.alias;




















public interface ZeroHandler<Field> {





















 /**










	 * If reading fields on a fact abstraction directly connected to a Zero fact, this handler is consulted










	 * to decide if the field may be read. 










	 * @param accPath The AccessPath consisting of fields already read in addition to a new field to be read.










	 * @return true if the AccessPath can be generated from within the Zero fact, false otherwise.










	 */










 boolean shouldGenerateAccessPath(AccessPath<Field> accPath);










}














src/heros/alias/AccessPath.java








View file @ 90319070






......@@ -144,22 +144,6 @@ public class AccessPath<T> {









 return delta;










 }










 










 //FIXME this is an unsound dirty hack










 public boolean contains(AccessPath<T> accPath) {










 assert accPath.accesses.length <= 1;










 if(accPath.accesses.length == 1) {










 for(T sub : accesses) {










 if(sub.equals(accPath.accesses[0])) {










 return true;










 }










 }










 return false;










 }










 else










 return exclusions.containsAll(accPath.exclusions);










 }










 










 










 public static class Delta<T> {










 final T[] accesses;










 final Set<T> exclusions;



......












src/heros/alias/AccessPath.java








View file @ 90319070








src/heros/alias/AccessPath.java










View file @ 90319070


90319070



......@@ -144,22 +144,6 @@ public class AccessPath<T> {









 return delta;










 }










 










 //FIXME this is an unsound dirty hack










 public boolean contains(AccessPath<T> accPath) {










 assert accPath.accesses.length <= 1;










 if(accPath.accesses.length == 1) {










 for(T sub : accesses) {










 if(sub.equals(accPath.accesses[0])) {










 return true;










 }










 }










 return false;










 }










 else










 return exclusions.containsAll(accPath.exclusions);










 }










 










 










 public static class Delta<T> {










 final T[] accesses;










 final Set<T> exclusions;



......






......@@ -144,22 +144,6 @@ public class AccessPath<T> {









 return delta;










 }










 










 //FIXME this is an unsound dirty hack










 public boolean contains(AccessPath<T> accPath) {










 assert accPath.accesses.length <= 1;










 if(accPath.accesses.length == 1) {










 for(T sub : accesses) {










 if(sub.equals(accPath.accesses[0])) {










 return true;










 }










 }










 return false;










 }










 else










 return exclusions.containsAll(accPath.exclusions);










 }










 










 










 public static class Delta<T> {










 final T[] accesses;










 final Set<T> exclusions;



......


 return delta;returndelta; }}  //FIXME this is an unsound dirty hack//FIXME this is an unsound dirty hack public boolean contains(AccessPath<T> accPath) {publicbooleancontains(AccessPath<T>accPath){ assert accPath.accesses.length <= 1;assertaccPath.accesses.length<=1; if(accPath.accesses.length == 1) {if(accPath.accesses.length==1){ for(T sub : accesses) {for(Tsub:accesses){ if(sub.equals(accPath.accesses[0])) {if(sub.equals(accPath.accesses[0])){ return true;returntrue; }} }} return false;returnfalse; }} elseelse return exclusions.containsAll(accPath.exclusions);returnexclusions.containsAll(accPath.exclusions); }}   public static class Delta<T> {publicstaticclassDelta<T>{ final T[] accesses;finalT[]accesses; final Set<T> exclusions;finalSet<T>exclusions;








src/heros/alias/BiDiFieldSensitiveIFDSSolver.java








View file @ 90319070






......@@ -12,9 +12,10 @@ package heros.alias;































import heros.InterproceduralCFG;










import heros.alias.bidi.SourceStmtAnnotatedMethodAnalyzer;










import heros.alias.bidi.SourceStmtAnnotatedMethodAnalyzer.Synchronizer;










import heros.alias.SourceStmtAnnotatedMethodAnalyzer.Synchronizer;





















import java.util.Set;





















import com.google.common.collect.HashMultimap;










import com.google.common.collect.Sets;














......












src/heros/alias/BiDiFieldSensitiveIFDSSolver.java








View file @ 90319070








src/heros/alias/BiDiFieldSensitiveIFDSSolver.java










View file @ 90319070


90319070



......@@ -12,9 +12,10 @@ package heros.alias;































import heros.InterproceduralCFG;










import heros.alias.bidi.SourceStmtAnnotatedMethodAnalyzer;










import heros.alias.bidi.SourceStmtAnnotatedMethodAnalyzer.Synchronizer;










import heros.alias.SourceStmtAnnotatedMethodAnalyzer.Synchronizer;





















import java.util.Set;





















import com.google.common.collect.HashMultimap;










import com.google.common.collect.Sets;














......






......@@ -12,9 +12,10 @@ package heros.alias;































import heros.InterproceduralCFG;










import heros.alias.bidi.SourceStmtAnnotatedMethodAnalyzer;










import heros.alias.bidi.SourceStmtAnnotatedMethodAnalyzer.Synchronizer;










import heros.alias.SourceStmtAnnotatedMethodAnalyzer.Synchronizer;





















import java.util.Set;





















import com.google.common.collect.HashMultimap;










import com.google.common.collect.Sets;














......


import heros.InterproceduralCFG;importheros.InterproceduralCFG;import heros.alias.bidi.SourceStmtAnnotatedMethodAnalyzer;importheros.alias.bidi.SourceStmtAnnotatedMethodAnalyzerbidi.;import heros.alias.bidi.SourceStmtAnnotatedMethodAnalyzer.Synchronizer;importimport heros.alias.bidi.SourceStmtAnnotatedMethodAnalyzer.Synchronizerheros.alias.bidi.SourceStmtAnnotatedMethodAnalyzer.Synchronizer;;import heros.alias.SourceStmtAnnotatedMethodAnalyzer.Synchronizer;importheros.alias.SourceStmtAnnotatedMethodAnalyzer.Synchronizer.Synchronizer;import java.util.Set;importjava.util.Set;import com.google.common.collect.HashMultimap;importcom.google.common.collect.HashMultimap;import com.google.common.collect.Sets;importcom.google.common.collect.Sets;








src/heros/alias/IncomingEdge.java

â†’

src/heros/alias/CallEdge.java








View file @ 90319070






......@@ -13,13 +13,13 @@ package heros.alias;









import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;





















public class IncomingEdge<Field, Fact, Stmt, Method> {










public class CallEdge<Field, Fact, Stmt, Method> {





















 private WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact;










 private PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> callerAnalyzer;










 private WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtCallSite;










 










 public IncomingEdge(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> callerAnalyzer, 










 public CallEdge(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> callerAnalyzer, 










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtCallSite,










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact) {










 this.callerAnalyzer = callerAnalyzer;



......@@ -32,7 +32,7 @@ public class IncomingEdge<Field, Fact, Stmt, Method> {









 }










 










 public WrappedFact<Field, Fact, Stmt, Method> getCallerCallSiteFact() {










 return factAtCallSite.getFact();










 return factAtCallSite.getWrappedFact();










 }










 










 public WrappedFact<Field, Fact, Stmt, Method> getCallerSourceFact() {



......@@ -53,16 +53,16 @@ public class IncomingEdge<Field, Fact, Stmt, Method> {









 if(!factAtCallSite.canDeltaBeApplied(delta))










 return;










 










 factAtCallSite.getFact().getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 factAtCallSite.getWrappedFact().getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFactWithDelta = new WrappedFact<>(calleeSourceFact.getFact(), delta.applyTo(calleeSourceFact.getAccessPath()), resolver);










 if(interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath()) != PrefixTestResult.GUARANTEED_PREFIX)










 throw new AssertionError();










 interestedAnalyzer.addIncomingEdge(new IncomingEdge<>(analyzer, 










 interestedAnalyzer.addIncomingEdge(new CallEdge<>(analyzer, 










 new WrappedFactAtStatement<>(factAtCallSite.getStatement(), 










 new WrappedFact<>(factAtCallSite.getFact().getFact(), delta.applyTo(factAtCallSite.getFact().getAccessPath()), resolver)), 










 new WrappedFact<>(factAtCallSite.getWrappedFact().getFact(), delta.applyTo(factAtCallSite.getWrappedFact().getAccessPath()), resolver)), 










 calleeSourceFactWithDelta));










 }










 



......@@ -96,7 +96,7 @@ public class IncomingEdge<Field, Fact, Stmt, Method> {









 return false;










 if (getClass() != obj.getClass())










 return false;










 IncomingEdge other = (IncomingEdge) obj;










 CallEdge other = (CallEdge) obj;










 if (calleeSourceFact == null) {










 if (other.calleeSourceFact != null)










 return false;



......












src/heros/alias/IncomingEdge.java

â†’

src/heros/alias/CallEdge.java








View file @ 90319070








src/heros/alias/IncomingEdge.java

â†’

src/heros/alias/CallEdge.java





IncomingCall




View file @ 90319070


90319070



......@@ -13,13 +13,13 @@ package heros.alias;









import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;





















public class IncomingEdge<Field, Fact, Stmt, Method> {










public class CallEdge<Field, Fact, Stmt, Method> {





















 private WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact;










 private PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> callerAnalyzer;










 private WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtCallSite;










 










 public IncomingEdge(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> callerAnalyzer, 










 public CallEdge(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> callerAnalyzer, 










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtCallSite,










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact) {










 this.callerAnalyzer = callerAnalyzer;



......@@ -32,7 +32,7 @@ public class IncomingEdge<Field, Fact, Stmt, Method> {









 }










 










 public WrappedFact<Field, Fact, Stmt, Method> getCallerCallSiteFact() {










 return factAtCallSite.getFact();










 return factAtCallSite.getWrappedFact();










 }










 










 public WrappedFact<Field, Fact, Stmt, Method> getCallerSourceFact() {



......@@ -53,16 +53,16 @@ public class IncomingEdge<Field, Fact, Stmt, Method> {









 if(!factAtCallSite.canDeltaBeApplied(delta))










 return;










 










 factAtCallSite.getFact().getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 factAtCallSite.getWrappedFact().getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFactWithDelta = new WrappedFact<>(calleeSourceFact.getFact(), delta.applyTo(calleeSourceFact.getAccessPath()), resolver);










 if(interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath()) != PrefixTestResult.GUARANTEED_PREFIX)










 throw new AssertionError();










 interestedAnalyzer.addIncomingEdge(new IncomingEdge<>(analyzer, 










 interestedAnalyzer.addIncomingEdge(new CallEdge<>(analyzer, 










 new WrappedFactAtStatement<>(factAtCallSite.getStatement(), 










 new WrappedFact<>(factAtCallSite.getFact().getFact(), delta.applyTo(factAtCallSite.getFact().getAccessPath()), resolver)), 










 new WrappedFact<>(factAtCallSite.getWrappedFact().getFact(), delta.applyTo(factAtCallSite.getWrappedFact().getAccessPath()), resolver)), 










 calleeSourceFactWithDelta));










 }










 



......@@ -96,7 +96,7 @@ public class IncomingEdge<Field, Fact, Stmt, Method> {









 return false;










 if (getClass() != obj.getClass())










 return false;










 IncomingEdge other = (IncomingEdge) obj;










 CallEdge other = (CallEdge) obj;










 if (calleeSourceFact == null) {










 if (other.calleeSourceFact != null)










 return false;



......






......@@ -13,13 +13,13 @@ package heros.alias;









import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;





















public class IncomingEdge<Field, Fact, Stmt, Method> {










public class CallEdge<Field, Fact, Stmt, Method> {





















 private WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact;










 private PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> callerAnalyzer;










 private WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtCallSite;










 










 public IncomingEdge(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> callerAnalyzer, 










 public CallEdge(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> callerAnalyzer, 










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtCallSite,










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact) {










 this.callerAnalyzer = callerAnalyzer;



......@@ -32,7 +32,7 @@ public class IncomingEdge<Field, Fact, Stmt, Method> {









 }










 










 public WrappedFact<Field, Fact, Stmt, Method> getCallerCallSiteFact() {










 return factAtCallSite.getFact();










 return factAtCallSite.getWrappedFact();










 }










 










 public WrappedFact<Field, Fact, Stmt, Method> getCallerSourceFact() {



......@@ -53,16 +53,16 @@ public class IncomingEdge<Field, Fact, Stmt, Method> {









 if(!factAtCallSite.canDeltaBeApplied(delta))










 return;










 










 factAtCallSite.getFact().getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 factAtCallSite.getWrappedFact().getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFactWithDelta = new WrappedFact<>(calleeSourceFact.getFact(), delta.applyTo(calleeSourceFact.getAccessPath()), resolver);










 if(interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath()) != PrefixTestResult.GUARANTEED_PREFIX)










 throw new AssertionError();










 interestedAnalyzer.addIncomingEdge(new IncomingEdge<>(analyzer, 










 interestedAnalyzer.addIncomingEdge(new CallEdge<>(analyzer, 










 new WrappedFactAtStatement<>(factAtCallSite.getStatement(), 










 new WrappedFact<>(factAtCallSite.getFact().getFact(), delta.applyTo(factAtCallSite.getFact().getAccessPath()), resolver)), 










 new WrappedFact<>(factAtCallSite.getWrappedFact().getFact(), delta.applyTo(factAtCallSite.getWrappedFact().getAccessPath()), resolver)), 










 calleeSourceFactWithDelta));










 }










 



......@@ -96,7 +96,7 @@ public class IncomingEdge<Field, Fact, Stmt, Method> {









 return false;










 if (getClass() != obj.getClass())










 return false;










 IncomingEdge other = (IncomingEdge) obj;










 CallEdge other = (CallEdge) obj;










 if (calleeSourceFact == null) {










 if (other.calleeSourceFact != null)










 return false;



......


import heros.alias.AccessPath.Delta;importheros.alias.AccessPath.Delta;import heros.alias.AccessPath.PrefixTestResult;importheros.alias.AccessPath.PrefixTestResult;public class IncomingEdge<Field, Fact, Stmt, Method> {publicclassIncomingEdgeIncoming<Field,Fact,Stmt,Method>{public class CallEdge<Field, Fact, Stmt, Method> {publicclassCallEdgeCall<Field,Fact,Stmt,Method>{ private WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact;privateWrappedFact<Field,Fact,Stmt,Method>calleeSourceFact; private PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> callerAnalyzer;privatePerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>callerAnalyzer; private WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtCallSite;privateWrappedFactAtStatement<Field,Fact,Stmt,Method>factAtCallSite;  public IncomingEdge(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> callerAnalyzer, publicIncomingEdgeIncoming(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>callerAnalyzer, public CallEdge(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> callerAnalyzer, publicCallEdgeCall(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>callerAnalyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtCallSite,WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtCallSite, WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact) {WrappedFact<Field,Fact,Stmt,Method>calleeSourceFact){ this.callerAnalyzer = callerAnalyzer;this.callerAnalyzer=callerAnalyzer; }}  public WrappedFact<Field, Fact, Stmt, Method> getCallerCallSiteFact() {publicWrappedFact<Field,Fact,Stmt,Method>getCallerCallSiteFact(){ return factAtCallSite.getFact();returnfactAtCallSite.getFact(); return factAtCallSite.getWrappedFact();returnfactAtCallSite.getWrappedFactWrapped(); }}  public WrappedFact<Field, Fact, Stmt, Method> getCallerSourceFact() {publicWrappedFact<Field,Fact,Stmt,Method>getCallerSourceFact(){ if(!factAtCallSite.canDeltaBeApplied(delta))if(!factAtCallSite.canDeltaBeApplied(delta)) return;return;  factAtCallSite.getFact().getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {factAtCallSite.getFact().getResolver().resolve(newDeltaConstraint<Field>(delta),newInterestCallback<Field,Fact,Stmt,Method>(){ factAtCallSite.getWrappedFact().getResolver().resolve(new DeltaConstraint<Field>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {factAtCallSite.getWrappedFactWrapped().getResolver().resolve(newDeltaConstraint<Field>(delta),newInterestCallback<Field,Fact,Stmt,Method>(){  @Override@Override public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {publicvoidinterest(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,Resolver<Field,Fact,Stmt,Method>resolver){ WrappedFact<Field, Fact, Stmt, Method> calleeSourceFactWithDelta = new WrappedFact<>(calleeSourceFact.getFact(), delta.applyTo(calleeSourceFact.getAccessPath()), resolver);WrappedFact<Field,Fact,Stmt,Method>calleeSourceFactWithDelta=newWrappedFact<>(calleeSourceFact.getFact(),delta.applyTo(calleeSourceFact.getAccessPath()),resolver); if(interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath()) != PrefixTestResult.GUARANTEED_PREFIX)if(interestedAnalyzer.getAccessPath().isPrefixOf(calleeSourceFactWithDelta.getAccessPath())!=PrefixTestResult.GUARANTEED_PREFIX) throw new AssertionError();thrownewAssertionError(); interestedAnalyzer.addIncomingEdge(new IncomingEdge<>(analyzer, interestedAnalyzer.addIncomingEdge(newIncomingEdgeIncoming<>(analyzer, interestedAnalyzer.addIncomingEdge(new CallEdge<>(analyzer, interestedAnalyzer.addIncomingEdge(newCallEdgeCall<>(analyzer, new WrappedFactAtStatement<>(factAtCallSite.getStatement(), newWrappedFactAtStatement<>(factAtCallSite.getStatement(), new WrappedFact<>(factAtCallSite.getFact().getFact(), delta.applyTo(factAtCallSite.getFact().getAccessPath()), resolver)), newWrappedFact<>(factAtCallSite.getFact().getFact(),delta.applyTo(factAtCallSite.getFact().getAccessPath()),resolver)), new WrappedFact<>(factAtCallSite.getWrappedFact().getFact(), delta.applyTo(factAtCallSite.getWrappedFact().getAccessPath()), resolver)), newWrappedFact<>(factAtCallSite.getWrappedFactWrapped().getFact(),delta.applyTo(factAtCallSite.getWrappedFactWrapped().getAccessPath()),resolver)), calleeSourceFactWithDelta));calleeSourceFactWithDelta)); }}  return false;returnfalse; if (getClass() != obj.getClass())if(getClass()!=obj.getClass()) return false;returnfalse; IncomingEdge other = (IncomingEdge) obj;IncomingEdgeIncomingother=(IncomingEdgeIncoming)obj; CallEdge other = (CallEdge) obj;CallEdgeCallother=(CallEdgeCall)obj; if (calleeSourceFact == null) {if(calleeSourceFact==null){ if (other.calleeSourceFact != null)if(other.calleeSourceFact!=null) return false;returnfalse;








src/heros/alias/CallEdgeResolver.java








View file @ 90319070






......@@ -10,31 +10,52 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.Constraint;










import com.google.common.collect.Lists;
































class CallEdgeResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {










class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> {





















 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 super(analyzer);










 this(analyzer, null);










 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 }





















 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) { 










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(analyzer.getAccessPath()) && !analyzer.isLocked() && !doesContain(constraint)) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(analyzer.getAccessPath());










 PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method> nestedAnalyzer = analyzer.getOrCreateNestedAnalyzer(newAccPath);










 nestedAnalyzer.getCallEdgeResolver().registerCallback(callback);










 }










 protected AccessPath<Field> getResolvedAccessPath() {










 return analyzer.getAccessPath();










 }










 










 @Override










 protected AccessPath<Field> getAccessPathOf(CallEdge<Field, Fact, Stmt, Method> inc) {










 return inc.getCalleeSourceFact().getAccessPath();










 }










 










 @Override










 protected void processIncomingGuaranteedPrefix(CallEdge<Field, Fact, Stmt, Method> inc) {










 analyzer.applySummaries(inc);










 }










 










 //FIXME: this is a dirty hack (and unsound?!)










 private boolean doesContain(Constraint<Field> constraint) {










 AccessPath<Field> accPath = constraint.applyToAccessPath(new AccessPath<Field>());










 return analyzer.getAccessPath().contains(accPath);










 @Override










 protected void processIncomingPotentialPrefix(CallEdge<Field, Fact, Stmt, Method> inc) {










 lock();










 inc.registerInterestCallback(analyzer);










 unlock();










 }





















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return analyzer.createWithAccessPath(newAccPath).getCallEdgeResolver();










 }










 










 public void applySummaries(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 for(CallEdge<Field, Fact, Stmt, Method> incEdge : Lists.newLinkedList(incomingEdges)) {










 analyzer.applySummary(incEdge, factAtStmt);










 }










 }










 










 @Override










 public String toString() {










 return "";



......@@ -45,5 +66,9 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact,









 analyzer.log(message);










 }





















 public boolean hasIncomingEdges() {










 return !incomingEdges.isEmpty();










 }
































}




\ No newline at end of file












src/heros/alias/CallEdgeResolver.java








View file @ 90319070








src/heros/alias/CallEdgeResolver.java










View file @ 90319070


90319070



......@@ -10,31 +10,52 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.Constraint;










import com.google.common.collect.Lists;
































class CallEdgeResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {










class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> {





















 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 super(analyzer);










 this(analyzer, null);










 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 }





















 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) { 










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(analyzer.getAccessPath()) && !analyzer.isLocked() && !doesContain(constraint)) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(analyzer.getAccessPath());










 PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method> nestedAnalyzer = analyzer.getOrCreateNestedAnalyzer(newAccPath);










 nestedAnalyzer.getCallEdgeResolver().registerCallback(callback);










 }










 protected AccessPath<Field> getResolvedAccessPath() {










 return analyzer.getAccessPath();










 }










 










 @Override










 protected AccessPath<Field> getAccessPathOf(CallEdge<Field, Fact, Stmt, Method> inc) {










 return inc.getCalleeSourceFact().getAccessPath();










 }










 










 @Override










 protected void processIncomingGuaranteedPrefix(CallEdge<Field, Fact, Stmt, Method> inc) {










 analyzer.applySummaries(inc);










 }










 










 //FIXME: this is a dirty hack (and unsound?!)










 private boolean doesContain(Constraint<Field> constraint) {










 AccessPath<Field> accPath = constraint.applyToAccessPath(new AccessPath<Field>());










 return analyzer.getAccessPath().contains(accPath);










 @Override










 protected void processIncomingPotentialPrefix(CallEdge<Field, Fact, Stmt, Method> inc) {










 lock();










 inc.registerInterestCallback(analyzer);










 unlock();










 }





















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return analyzer.createWithAccessPath(newAccPath).getCallEdgeResolver();










 }










 










 public void applySummaries(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 for(CallEdge<Field, Fact, Stmt, Method> incEdge : Lists.newLinkedList(incomingEdges)) {










 analyzer.applySummary(incEdge, factAtStmt);










 }










 }










 










 @Override










 public String toString() {










 return "";



......@@ -45,5 +66,9 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact,









 analyzer.log(message);










 }





















 public boolean hasIncomingEdges() {










 return !incomingEdges.isEmpty();










 }
































}




\ No newline at end of file






......@@ -10,31 +10,52 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.Constraint;










import com.google.common.collect.Lists;
































class CallEdgeResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {










class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> {





















 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {










 super(analyzer);










 this(analyzer, null);










 }










 










 public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 }





















 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) { 










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(analyzer.getAccessPath()) && !analyzer.isLocked() && !doesContain(constraint)) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(analyzer.getAccessPath());










 PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method> nestedAnalyzer = analyzer.getOrCreateNestedAnalyzer(newAccPath);










 nestedAnalyzer.getCallEdgeResolver().registerCallback(callback);










 }










 protected AccessPath<Field> getResolvedAccessPath() {










 return analyzer.getAccessPath();










 }










 










 @Override










 protected AccessPath<Field> getAccessPathOf(CallEdge<Field, Fact, Stmt, Method> inc) {










 return inc.getCalleeSourceFact().getAccessPath();










 }










 










 @Override










 protected void processIncomingGuaranteedPrefix(CallEdge<Field, Fact, Stmt, Method> inc) {










 analyzer.applySummaries(inc);










 }










 










 //FIXME: this is a dirty hack (and unsound?!)










 private boolean doesContain(Constraint<Field> constraint) {










 AccessPath<Field> accPath = constraint.applyToAccessPath(new AccessPath<Field>());










 return analyzer.getAccessPath().contains(accPath);










 @Override










 protected void processIncomingPotentialPrefix(CallEdge<Field, Fact, Stmt, Method> inc) {










 lock();










 inc.registerInterestCallback(analyzer);










 unlock();










 }





















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return analyzer.createWithAccessPath(newAccPath).getCallEdgeResolver();










 }










 










 public void applySummaries(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 for(CallEdge<Field, Fact, Stmt, Method> incEdge : Lists.newLinkedList(incomingEdges)) {










 analyzer.applySummary(incEdge, factAtStmt);










 }










 }










 










 @Override










 public String toString() {










 return "";



......@@ -45,5 +66,9 @@ class CallEdgeResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact,









 analyzer.log(message);










 }





















 public boolean hasIncomingEdges() {










 return !incomingEdges.isEmpty();










 }
































}




\ No newline at end of file


 ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;import heros.alias.FlowFunction.Constraint;importheros.alias.FlowFunction.Constraintheros.alias.FlowFunction.Constraint;import com.google.common.collect.Lists;importcom.google.common.collect.Listscom.google.common.collect.Lists;class CallEdgeResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {classCallEdgeResolver<Field,Fact,Stmt,Method>extendsResolver<Field,Fact,Stmt,Method>{class CallEdgeResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> {classCallEdgeResolver<Field,Fact,Stmt,Method>extendsResolverTemplateTemplate<Field,Fact,Stmt,Method,, CallEdgeCallEdge<<FieldField,, FactFact,, StmtStmt,, MethodMethod>>>{ public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer) {publicCallEdgeResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer){ super(analyzer);super(analyzer); this(analyzer, null);this(analyzer,null); }}  public CallEdgeResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, CallEdgeResolver<Field, Fact, Stmt, Method> parent) {publicCallEdgeResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,CallEdgeResolver<Field,Fact,Stmt,Method>parent){ super(analyzer, parent);super(analyzer,parent); }} @Override@Override public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) { publicvoidresolve(Constraint<Field>constraint,InterestCallback<Field,Fact,Stmt,Method>callback){ log("Resolve: "+constraint);log("Resolve: "+constraint); if(constraint.canBeAppliedTo(analyzer.getAccessPath()) && !analyzer.isLocked() && !doesContain(constraint)) {if(constraint.canBeAppliedTo(analyzer.getAccessPath())&&!analyzer.isLocked()&&!doesContain(constraint)){ AccessPath<Field> newAccPath = constraint.applyToAccessPath(analyzer.getAccessPath());AccessPath<Field>newAccPath=constraint.applyToAccessPath(analyzer.getAccessPath()); PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method> nestedAnalyzer = analyzer.getOrCreateNestedAnalyzer(newAccPath);PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>nestedAnalyzer=analyzer.getOrCreateNestedAnalyzer(newAccPath); nestedAnalyzer.getCallEdgeResolver().registerCallback(callback);nestedAnalyzer.getCallEdgeResolver().registerCallback(callback); }} protected AccessPath<Field> getResolvedAccessPath() {protectedAccessPath<Field>getResolvedAccessPath(){ return analyzer.getAccessPath();returnanalyzer.getAccessPath(); }}  @Override@Override protected AccessPath<Field> getAccessPathOf(CallEdge<Field, Fact, Stmt, Method> inc) {protectedAccessPath<Field>getAccessPathOf(CallEdge<Field,Fact,Stmt,Method>inc){ return inc.getCalleeSourceFact().getAccessPath();returninc.getCalleeSourceFact().getAccessPath(); }}  @Override@Override protected void processIncomingGuaranteedPrefix(CallEdge<Field, Fact, Stmt, Method> inc) {protectedvoidprocessIncomingGuaranteedPrefix(CallEdge<Field,Fact,Stmt,Method>inc){ analyzer.applySummaries(inc);analyzer.applySummaries(inc); }}  //FIXME: this is a dirty hack (and unsound?!)//FIXME: this is a dirty hack (and unsound?!) private boolean doesContain(Constraint<Field> constraint) {privatebooleandoesContain(Constraint<Field>constraint){ AccessPath<Field> accPath = constraint.applyToAccessPath(new AccessPath<Field>());AccessPath<Field>accPath=constraint.applyToAccessPath(newAccessPath<Field>()); return analyzer.getAccessPath().contains(accPath);returnanalyzer.getAccessPath().contains(accPath); @Override@Override protected void processIncomingPotentialPrefix(CallEdge<Field, Fact, Stmt, Method> inc) {protectedvoidprocessIncomingPotentialPrefix(CallEdge<Field,Fact,Stmt,Method>inc){ lock();lock(); inc.registerInterestCallback(analyzer);inc.registerInterestCallback(analyzer); unlock();unlock(); }} @Override@Override protected ResolverTemplate<Field, Fact, Stmt, Method, CallEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {protectedResolverTemplate<Field,Fact,Stmt,Method,CallEdge<Field,Fact,Stmt,Method>>createNestedResolver(AccessPath<Field>newAccPath){ return analyzer.createWithAccessPath(newAccPath).getCallEdgeResolver();returnanalyzer.createWithAccessPath(newAccPath).getCallEdgeResolver(); }}  public void applySummaries(WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {publicvoidapplySummaries(WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt){ for(CallEdge<Field, Fact, Stmt, Method> incEdge : Lists.newLinkedList(incomingEdges)) {for(CallEdge<Field,Fact,Stmt,Method>incEdge:Lists.newLinkedList(incomingEdges)){ analyzer.applySummary(incEdge, factAtStmt);analyzer.applySummary(incEdge,factAtStmt); }} }}  @Override@Override public String toString() {publicStringtoString(){ return "";return""; analyzer.log(message);analyzer.log(message); }} public boolean hasIncomingEdges() {publicbooleanhasIncomingEdges(){ return !incomingEdges.isEmpty();return!incomingEdges.isEmpty(); }}}}








src/heros/alias/Context.java








View file @ 90319070






......@@ -12,26 +12,26 @@ package heros.alias;




















import heros.InterproceduralCFG;





















public abstract class Context<FieldRef, FactAbstraction, Statement, Method> {










public abstract class Context<Field, Fact, Stmt, Method> {





















 public final InterproceduralCFG<Statement, Method> icfg;










 public final FlowFunctionProcessor<FactAbstraction, Statement, Method, FieldRef> flowProcessor;










 public final InterproceduralCFG<Stmt, Method> icfg;










 public final Scheduler scheduler;










 public final FactAbstraction zeroValue;










 public final Fact zeroValue;










 public final boolean followReturnsPastSeeds;










 public final FactMergeHandler<FactAbstraction> factHandler;










 public final ZeroHandler<FieldRef> zeroHandler;










 public final FactMergeHandler<Fact> factHandler;










 public final ZeroHandler<Field> zeroHandler;










 public final FlowFunctions<Stmt, Field, Fact, Method> flowFunctions;










 










 Context(InterproceduralCFG<Statement, Method> icfg, FlowFunctionProcessor<FactAbstraction, Statement, Method, FieldRef> flowProcessor, 










 Scheduler scheduler, FactAbstraction zeroValue, boolean followReturnsPastSeeds, FactMergeHandler<FactAbstraction> factHandler, ZeroHandler<FieldRef> zeroHandler) {










 this.icfg = icfg;










 this.flowProcessor = flowProcessor;










 Context(IFDSTabulationProblem<Stmt, Field, Fact, Method, ? extends InterproceduralCFG<Stmt, Method>> tabulationProblem, 










 Scheduler scheduler, FactMergeHandler<Fact> factHandler) {










 this.icfg = tabulationProblem.interproceduralCFG();










 this.flowFunctions = tabulationProblem.flowFunctions();










 this.scheduler = scheduler;










 this.zeroValue = zeroValue;










 this.followReturnsPastSeeds = followReturnsPastSeeds;










 this.zeroValue = tabulationProblem.zeroValue();










 this.followReturnsPastSeeds = tabulationProblem.followReturnsPastSeeds();










 this.factHandler = factHandler;










 this.zeroHandler = zeroHandler;










 this.zeroHandler = tabulationProblem.zeroHandler();










 }










 










 public abstract MethodAnalyzer<FieldRef, FactAbstraction, Statement, Method> getAnalyzer(Method method);










 public abstract MethodAnalyzer<Field, Fact, Stmt, Method> getAnalyzer(Method method);










}












src/heros/alias/Context.java








View file @ 90319070








src/heros/alias/Context.java










View file @ 90319070


90319070



......@@ -12,26 +12,26 @@ package heros.alias;




















import heros.InterproceduralCFG;





















public abstract class Context<FieldRef, FactAbstraction, Statement, Method> {










public abstract class Context<Field, Fact, Stmt, Method> {





















 public final InterproceduralCFG<Statement, Method> icfg;










 public final FlowFunctionProcessor<FactAbstraction, Statement, Method, FieldRef> flowProcessor;










 public final InterproceduralCFG<Stmt, Method> icfg;










 public final Scheduler scheduler;










 public final FactAbstraction zeroValue;










 public final Fact zeroValue;










 public final boolean followReturnsPastSeeds;










 public final FactMergeHandler<FactAbstraction> factHandler;










 public final ZeroHandler<FieldRef> zeroHandler;










 public final FactMergeHandler<Fact> factHandler;










 public final ZeroHandler<Field> zeroHandler;










 public final FlowFunctions<Stmt, Field, Fact, Method> flowFunctions;










 










 Context(InterproceduralCFG<Statement, Method> icfg, FlowFunctionProcessor<FactAbstraction, Statement, Method, FieldRef> flowProcessor, 










 Scheduler scheduler, FactAbstraction zeroValue, boolean followReturnsPastSeeds, FactMergeHandler<FactAbstraction> factHandler, ZeroHandler<FieldRef> zeroHandler) {










 this.icfg = icfg;










 this.flowProcessor = flowProcessor;










 Context(IFDSTabulationProblem<Stmt, Field, Fact, Method, ? extends InterproceduralCFG<Stmt, Method>> tabulationProblem, 










 Scheduler scheduler, FactMergeHandler<Fact> factHandler) {










 this.icfg = tabulationProblem.interproceduralCFG();










 this.flowFunctions = tabulationProblem.flowFunctions();










 this.scheduler = scheduler;










 this.zeroValue = zeroValue;










 this.followReturnsPastSeeds = followReturnsPastSeeds;










 this.zeroValue = tabulationProblem.zeroValue();










 this.followReturnsPastSeeds = tabulationProblem.followReturnsPastSeeds();










 this.factHandler = factHandler;










 this.zeroHandler = zeroHandler;










 this.zeroHandler = tabulationProblem.zeroHandler();










 }










 










 public abstract MethodAnalyzer<FieldRef, FactAbstraction, Statement, Method> getAnalyzer(Method method);










 public abstract MethodAnalyzer<Field, Fact, Stmt, Method> getAnalyzer(Method method);










}






......@@ -12,26 +12,26 @@ package heros.alias;




















import heros.InterproceduralCFG;





















public abstract class Context<FieldRef, FactAbstraction, Statement, Method> {










public abstract class Context<Field, Fact, Stmt, Method> {





















 public final InterproceduralCFG<Statement, Method> icfg;










 public final FlowFunctionProcessor<FactAbstraction, Statement, Method, FieldRef> flowProcessor;










 public final InterproceduralCFG<Stmt, Method> icfg;










 public final Scheduler scheduler;










 public final FactAbstraction zeroValue;










 public final Fact zeroValue;










 public final boolean followReturnsPastSeeds;










 public final FactMergeHandler<FactAbstraction> factHandler;










 public final ZeroHandler<FieldRef> zeroHandler;










 public final FactMergeHandler<Fact> factHandler;










 public final ZeroHandler<Field> zeroHandler;










 public final FlowFunctions<Stmt, Field, Fact, Method> flowFunctions;










 










 Context(InterproceduralCFG<Statement, Method> icfg, FlowFunctionProcessor<FactAbstraction, Statement, Method, FieldRef> flowProcessor, 










 Scheduler scheduler, FactAbstraction zeroValue, boolean followReturnsPastSeeds, FactMergeHandler<FactAbstraction> factHandler, ZeroHandler<FieldRef> zeroHandler) {










 this.icfg = icfg;










 this.flowProcessor = flowProcessor;










 Context(IFDSTabulationProblem<Stmt, Field, Fact, Method, ? extends InterproceduralCFG<Stmt, Method>> tabulationProblem, 










 Scheduler scheduler, FactMergeHandler<Fact> factHandler) {










 this.icfg = tabulationProblem.interproceduralCFG();










 this.flowFunctions = tabulationProblem.flowFunctions();










 this.scheduler = scheduler;










 this.zeroValue = zeroValue;










 this.followReturnsPastSeeds = followReturnsPastSeeds;










 this.zeroValue = tabulationProblem.zeroValue();










 this.followReturnsPastSeeds = tabulationProblem.followReturnsPastSeeds();










 this.factHandler = factHandler;










 this.zeroHandler = zeroHandler;










 this.zeroHandler = tabulationProblem.zeroHandler();










 }










 










 public abstract MethodAnalyzer<FieldRef, FactAbstraction, Statement, Method> getAnalyzer(Method method);










 public abstract MethodAnalyzer<Field, Fact, Stmt, Method> getAnalyzer(Method method);










}


import heros.InterproceduralCFG;importheros.InterproceduralCFG;public abstract class Context<FieldRef, FactAbstraction, Statement, Method> {publicabstractclassContext<FieldRefRef,FactAbstractionAbstraction,, StatementStatemen,Method>{public abstract class Context<Field, Fact, Stmt, Method> {publicabstractclassContext<Field,Fact,, StmtStm,Method>{ public final InterproceduralCFG<Statement, Method> icfg;publicfinalInterproceduralCFG<Statement,Method>icfg; public final FlowFunctionProcessor<FactAbstraction, Statement, Method, FieldRef> flowProcessor;publicfinalFlowFunctionProcessor<FactAbstraction,Statement,Method,FieldRef>flowProcessor; public final InterproceduralCFG<Stmt, Method> icfg;publicfinalInterproceduralCFG<Stmt,Method>icfg; public final Scheduler scheduler;publicfinalSchedulerscheduler; public final FactAbstraction zeroValue;publicfinalFactAbstractionAbstractionzeroValue; public final Fact zeroValue;publicfinalFactzeroValue; public final boolean followReturnsPastSeeds;publicfinalbooleanfollowReturnsPastSeeds; public final FactMergeHandler<FactAbstraction> factHandler;publicfinalFactMergeHandler<FactAbstraction>factHandler; public final ZeroHandler<FieldRef> zeroHandler;publicfinalZeroHandler<FieldRef>zeroHandler; public final FactMergeHandler<Fact> factHandler;publicfinalFactMergeHandler<Fact>factHandler; public final ZeroHandler<Field> zeroHandler;publicfinalZeroHandler<Field>zeroHandler; public final FlowFunctions<Stmt, Field, Fact, Method> flowFunctions;publicfinalFlowFunctions<Stmt,Field,Fact,Method>flowFunctions;  Context(InterproceduralCFG<Statement, Method> icfg, FlowFunctionProcessor<FactAbstraction, Statement, Method, FieldRef> flowProcessor, Context(InterproceduralCFGnterproceduralCFG<<StatementStatement,, MethodMethod>> icfgicfg,, FlowFunctionProcessorFlowFunctionProcessor<<FactAbstractionFactAbstraction,, StatementStatement,, MethodMethod,, FieldRefFieldRef>> flowProcessorflowProcessor, Scheduler scheduler, FactAbstraction zeroValue, boolean followReturnsPastSeeds, FactMergeHandler<FactAbstraction> factHandler, ZeroHandler<FieldRef> zeroHandler) {Schedulerscheduler,FactAbstractionAbstraction zeroValuezeroValue,, booleanboolean followReturnsPastSeedsfollowReturnsPastSeeds,, FactMergeHandlerFactMergeHandler<<FactAbstractionFactAbstraction>> factHandlerfactHandler,, ZeroHandlerZeroHandler<<FieldRefFieldRef>> zeroHandlerzero){ this.icfg = icfg;this.icfg=icfgicfg; this.flowProcessor = flowProcessor;this.flowProcessorProcessor == flowProcessorflowProcessor; Context(IFDSTabulationProblem<Stmt, Field, Fact, Method, ? extends InterproceduralCFG<Stmt, Method>> tabulationProblem, Context(IFDSTabulationProblemFDSTabulationProblem<<StmtStmt,, FieldField,, FactFact,, MethodMethod,, ?? extendsextends InterproceduralCFGInterproceduralCFG<<StmtStmt,, MethodMethod>>>> tabulationProblemtabulationProblem, Scheduler scheduler, FactMergeHandler<Fact> factHandler) {Schedulerscheduler,FactMergeHandlerMergeHandler<<FactFact>> factHandlerfact){ this.icfg = tabulationProblem.interproceduralCFG();this.icfg=tabulationProblemtabulationProblem..interproceduralCFGinterproceduralCFG();() this.flowFunctions = tabulationProblem.flowFunctions();this.flowFunctionsFunctions == tabulationProblemtabulationProblem..flowFunctionsflowFunctions();() this.scheduler = scheduler;this.scheduler=scheduler; this.zeroValue = zeroValue;this.zeroValue=zeroValue; this.followReturnsPastSeeds = followReturnsPastSeeds;this.followReturnsPastSeeds=followReturnsPastSeeds; this.zeroValue = tabulationProblem.zeroValue();this.zeroValue=tabulationProblemtabulationProblem..zeroValue();() this.followReturnsPastSeeds = tabulationProblem.followReturnsPastSeeds();this.followReturnsPastSeeds=tabulationProblemtabulationProblem..followReturnsPastSeeds();() this.factHandler = factHandler;this.factHandler=factHandler; this.zeroHandler = zeroHandler;this.zeroHandler=zeroHandler; this.zeroHandler = tabulationProblem.zeroHandler();this.zeroHandler=tabulationProblemtabulationProblem..zeroHandler();() }}  public abstract MethodAnalyzer<FieldRef, FactAbstraction, Statement, Method> getAnalyzer(Method method);publicabstractMethodAnalyzer<FieldRefRef,FactAbstractionAbstraction,, StatementStatemen,Method>getAnalyzer(Methodmethod); public abstract MethodAnalyzer<Field, Fact, Stmt, Method> getAnalyzer(Method method);publicabstractMethodAnalyzer<Field,Fact,, StmtStm,Method>getAnalyzer(Methodmethod);}}








src/heros/alias/ControlFlowJoinResolver.java








View file @ 90319070






......@@ -10,110 +10,61 @@









 ******************************************************************************/










package heros.alias;





















import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.Constraint;





















public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {










public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {





















 private boolean recursiveLock = false;










 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private Set<WrappedFact<Field, Fact, Stmt, Method>> incomingFacts = Sets.newHashSet();










 private boolean propagated = false;










 private Map<AccessPath<Field>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> nestedResolvers = Maps.newHashMap();










 private ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent;





















 public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(analyzer, joinStmt, new AccessPath<Field>(), null);










 propagated=false;










 }










 










 private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer);










 super(analyzer, parent);










 this.joinStmt = joinStmt;










 this.resolvedAccPath = resolvedAccPath;










 this.parent = parent;










 }





















 public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact) {










 if(resolvedAccPath.isPrefixOf(fact.getAccessPath()) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Fact "+fact);










 if(!incomingFacts.add(fact))










 return;










 










 interest(analyzer, this);










 for(ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver : nestedResolvers.values())










 nestedResolver.addIncoming(fact);










 










 if(!propagated) {










 propagated=true;










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }










 }










 else if(fact.getAccessPath().isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);










 }





















 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 }










 propagated=true;










 }










 










 private boolean isLocked() {










 if(recursiveLock)










 return true;










 if(parent == null)










 return false;










 return parent.isLocked();










 @Override










 protected AccessPath<Field> getAccessPathOf(WrappedFact<Field, Fact, Stmt, Method> inc) {










 return inc.getAccessPath();










 }





















 protected void processIncomingGuaranteedPrefix(heros.alias.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 propagated=true;










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }










 };










 










 @Override










 public void resolve(Constraint<Field> constraint, final InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(!constraint.canBeAppliedTo(resolvedAccPath) || isLocked())










 return;










 










 AccessPath<Field> candidateAccPath = constraint.applyToAccessPath(resolvedAccPath);










 recursiveLock = true;










 ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = getOrCreateNestedResolver(candidateAccPath);










 if(!nestedResolver.resolvedAccPath.equals(constraint.applyToAccessPath(resolvedAccPath)))










 throw new AssertionError();










 










 nestedResolver.registerCallback(callback);










 recursiveLock = false;










 protected void processIncomingPotentialPrefix(WrappedFact<Field, Fact, Stmt, Method> fact) {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);










 }





















 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 unlock();










 }










 










 private ControlFlowJoinResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> candidateAccPath) {










 if(resolvedAccPath.equals(candidateAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(candidateAccPath)) {










 assert resolvedAccPath.getDeltaTo(candidateAccPath).accesses.length <= 1;










 










 final ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = new ControlFlowJoinResolver<>(analyzer, joinStmt, candidateAccPath, this);










 nestedResolver.propagated = true;










 nestedResolvers.put(candidateAccPath, nestedResolver);





















 for(WrappedFact<Field, Fact, Stmt, Method> incFact: incomingFacts) {










 nestedResolver.addIncoming(incFact);










 } 










 }










 return nestedResolvers.get(candidateAccPath);










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<>(analyzer, joinStmt, newAccPath, this);










 }





















 @Override



......@@ -126,6 +77,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 return "<"+resolvedAccPath+":"+joinStmt+">";










 }





















 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 }



......












src/heros/alias/ControlFlowJoinResolver.java








View file @ 90319070








src/heros/alias/ControlFlowJoinResolver.java










View file @ 90319070


90319070



......@@ -10,110 +10,61 @@









 ******************************************************************************/










package heros.alias;





















import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.Constraint;





















public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {










public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {





















 private boolean recursiveLock = false;










 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private Set<WrappedFact<Field, Fact, Stmt, Method>> incomingFacts = Sets.newHashSet();










 private boolean propagated = false;










 private Map<AccessPath<Field>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> nestedResolvers = Maps.newHashMap();










 private ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent;





















 public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(analyzer, joinStmt, new AccessPath<Field>(), null);










 propagated=false;










 }










 










 private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer);










 super(analyzer, parent);










 this.joinStmt = joinStmt;










 this.resolvedAccPath = resolvedAccPath;










 this.parent = parent;










 }





















 public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact) {










 if(resolvedAccPath.isPrefixOf(fact.getAccessPath()) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Fact "+fact);










 if(!incomingFacts.add(fact))










 return;










 










 interest(analyzer, this);










 for(ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver : nestedResolvers.values())










 nestedResolver.addIncoming(fact);










 










 if(!propagated) {










 propagated=true;










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }










 }










 else if(fact.getAccessPath().isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);










 }





















 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 }










 propagated=true;










 }










 










 private boolean isLocked() {










 if(recursiveLock)










 return true;










 if(parent == null)










 return false;










 return parent.isLocked();










 @Override










 protected AccessPath<Field> getAccessPathOf(WrappedFact<Field, Fact, Stmt, Method> inc) {










 return inc.getAccessPath();










 }





















 protected void processIncomingGuaranteedPrefix(heros.alias.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 propagated=true;










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }










 };










 










 @Override










 public void resolve(Constraint<Field> constraint, final InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(!constraint.canBeAppliedTo(resolvedAccPath) || isLocked())










 return;










 










 AccessPath<Field> candidateAccPath = constraint.applyToAccessPath(resolvedAccPath);










 recursiveLock = true;










 ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = getOrCreateNestedResolver(candidateAccPath);










 if(!nestedResolver.resolvedAccPath.equals(constraint.applyToAccessPath(resolvedAccPath)))










 throw new AssertionError();










 










 nestedResolver.registerCallback(callback);










 recursiveLock = false;










 protected void processIncomingPotentialPrefix(WrappedFact<Field, Fact, Stmt, Method> fact) {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);










 }





















 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 unlock();










 }










 










 private ControlFlowJoinResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> candidateAccPath) {










 if(resolvedAccPath.equals(candidateAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(candidateAccPath)) {










 assert resolvedAccPath.getDeltaTo(candidateAccPath).accesses.length <= 1;










 










 final ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = new ControlFlowJoinResolver<>(analyzer, joinStmt, candidateAccPath, this);










 nestedResolver.propagated = true;










 nestedResolvers.put(candidateAccPath, nestedResolver);





















 for(WrappedFact<Field, Fact, Stmt, Method> incFact: incomingFacts) {










 nestedResolver.addIncoming(incFact);










 } 










 }










 return nestedResolvers.get(candidateAccPath);










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<>(analyzer, joinStmt, newAccPath, this);










 }





















 @Override



......@@ -126,6 +77,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 return "<"+resolvedAccPath+":"+joinStmt+">";










 }





















 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 }



......






......@@ -10,110 +10,61 @@









 ******************************************************************************/










package heros.alias;





















import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.Constraint;





















public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {










public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {





















 private boolean recursiveLock = false;










 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private Set<WrappedFact<Field, Fact, Stmt, Method>> incomingFacts = Sets.newHashSet();










 private boolean propagated = false;










 private Map<AccessPath<Field>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> nestedResolvers = Maps.newHashMap();










 private ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent;





















 public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(analyzer, joinStmt, new AccessPath<Field>(), null);










 propagated=false;










 }










 










 private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer);










 super(analyzer, parent);










 this.joinStmt = joinStmt;










 this.resolvedAccPath = resolvedAccPath;










 this.parent = parent;










 }





















 public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact) {










 if(resolvedAccPath.isPrefixOf(fact.getAccessPath()) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Fact "+fact);










 if(!incomingFacts.add(fact))










 return;










 










 interest(analyzer, this);










 for(ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver : nestedResolvers.values())










 nestedResolver.addIncoming(fact);










 










 if(!propagated) {










 propagated=true;










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }










 }










 else if(fact.getAccessPath().isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);










 }





















 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 }










 propagated=true;










 }










 










 private boolean isLocked() {










 if(recursiveLock)










 return true;










 if(parent == null)










 return false;










 return parent.isLocked();










 @Override










 protected AccessPath<Field> getAccessPathOf(WrappedFact<Field, Fact, Stmt, Method> inc) {










 return inc.getAccessPath();










 }





















 protected void processIncomingGuaranteedPrefix(heros.alias.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 propagated=true;










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }










 };










 










 @Override










 public void resolve(Constraint<Field> constraint, final InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(!constraint.canBeAppliedTo(resolvedAccPath) || isLocked())










 return;










 










 AccessPath<Field> candidateAccPath = constraint.applyToAccessPath(resolvedAccPath);










 recursiveLock = true;










 ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = getOrCreateNestedResolver(candidateAccPath);










 if(!nestedResolver.resolvedAccPath.equals(constraint.applyToAccessPath(resolvedAccPath)))










 throw new AssertionError();










 










 nestedResolver.registerCallback(callback);










 recursiveLock = false;










 protected void processIncomingPotentialPrefix(WrappedFact<Field, Fact, Stmt, Method> fact) {










 lock();










 Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);










 fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);










 }





















 @Override










 public void canBeResolvedEmpty() {










 ControlFlowJoinResolver.this.canBeResolvedEmpty();










 }










 });










 unlock();










 }










 










 private ControlFlowJoinResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> candidateAccPath) {










 if(resolvedAccPath.equals(candidateAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(candidateAccPath)) {










 assert resolvedAccPath.getDeltaTo(candidateAccPath).accesses.length <= 1;










 










 final ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = new ControlFlowJoinResolver<>(analyzer, joinStmt, candidateAccPath, this);










 nestedResolver.propagated = true;










 nestedResolvers.put(candidateAccPath, nestedResolver);





















 for(WrappedFact<Field, Fact, Stmt, Method> incFact: incomingFacts) {










 nestedResolver.addIncoming(incFact);










 } 










 }










 return nestedResolvers.get(candidateAccPath);










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<>(analyzer, joinStmt, newAccPath, this);










 }





















 @Override



......@@ -126,6 +77,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 return "<"+resolvedAccPath+":"+joinStmt+">";










 }





















 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 }



......


 ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;import java.util.Map;importjava.util.Map;import java.util.Set;importjava.util.Set;import com.google.common.collect.Maps;importcom.google.common.collect.Maps;import com.google.common.collect.Sets;importcom.google.common.collect.Sets;import heros.alias.AccessPath.Delta;importheros.alias.AccessPath.Delta;import heros.alias.AccessPath.PrefixTestResult;importheros.alias.AccessPath.PrefixTestResult;import heros.alias.FlowFunction.Constraint;importheros.alias.FlowFunction.Constraint;public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {publicclassControlFlowJoinResolver<Field,Fact,Stmt,Method>extendsResolver<Field,Fact,Stmt,Method>{public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {publicclassControlFlowJoinResolver<Field,Fact,Stmt,Method>extendsResolverTemplateTemplate<Field,Fact,Stmt,Method,, WrappedFactWrappedFact<<FieldField,, FactFact,, StmtStmt,, MethodMethod>>>{ private boolean recursiveLock = false;privatebooleanrecursiveLock=false; private Stmt joinStmt;privateStmtjoinStmt; private AccessPath<Field> resolvedAccPath;privateAccessPath<Field>resolvedAccPath; private Set<WrappedFact<Field, Fact, Stmt, Method>> incomingFacts = Sets.newHashSet();privateSet<WrappedFact<Field,Fact,Stmt,Method>>incomingFacts=Sets.newHashSet(); private boolean propagated = false;privatebooleanpropagated=false; private Map<AccessPath<Field>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> nestedResolvers = Maps.newHashMap();privateMap<AccessPath<Field>,ControlFlowJoinResolver<Field,Fact,Stmt,Method>>nestedResolvers=Maps.newHashMap(); private ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent;privateControlFlowJoinResolver<Field,Fact,Stmt,Method>parent; public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {publicControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtjoinStmt){ this(analyzer, joinStmt, new AccessPath<Field>(), null);this(analyzer,joinStmt,newAccessPath<Field>(),null); propagated=false;propagated=false; }}  private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {privateControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtjoinStmt,AccessPath<Field>resolvedAccPath,ControlFlowJoinResolver<Field,Fact,Stmt,Method>parent){ super(analyzer);super(analyzer); super(analyzer, parent);super(analyzer,, parentparent); this.joinStmt = joinStmt;this.joinStmt=joinStmt; this.resolvedAccPath = resolvedAccPath;this.resolvedAccPath=resolvedAccPath; this.parent = parent;this.parent=parent; }} public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact) {publicvoidaddIncoming(finalWrappedFact<Field,Fact,Stmt,Method>fact){ if(resolvedAccPath.isPrefixOf(fact.getAccessPath()) == PrefixTestResult.GUARANTEED_PREFIX) {if(resolvedAccPath.isPrefixOf(fact.getAccessPath())==PrefixTestResult.GUARANTEED_PREFIX){ log("Incoming Fact "+fact);log("Incoming Fact "+fact); if(!incomingFacts.add(fact))if(!incomingFacts.add(fact)) return;return;  interest(analyzer, this);interest(analyzer,this); for(ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver : nestedResolvers.values())for(ControlFlowJoinResolver<Field,Fact,Stmt,Method>nestedResolver:nestedResolvers.values()) nestedResolver.addIncoming(fact);nestedResolver.addIncoming(fact);  if(!propagated) {if(!propagated){ propagated=true;propagated=true; analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(analyzer.processFlowFromJoinStmt(newWrappedFactAtStatement<>(joinStmt,newWrappedFact<>( fact.getFact(), new AccessPath<Field>(), this)));fact.getFact(),newAccessPath<Field>(),this))); }} }} else if(fact.getAccessPath().isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {elseif(fact.getAccessPath().isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)){ Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);Delta<Field>delta=fact.getAccessPath().getDeltaTo(resolvedAccPath); fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {fact.getResolver().resolve(newDeltaConstraint<>(delta),newInterestCallback<Field,Fact,Stmt,Method>(){ @Override@Override public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, publicvoidinterest(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {Resolver<Field,Fact,Stmt,Method>resolver){ ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);ControlFlowJoinResolver.this.interest(analyzer,ControlFlowJoinResolver.this); }} @Override@Override public void canBeResolvedEmpty() {publicvoidcanBeResolvedEmpty(){ ControlFlowJoinResolver.this.canBeResolvedEmpty();ControlFlowJoinResolver.this.canBeResolvedEmpty(); }} });}); }} propagated=true;propagated=true; }}  private boolean isLocked() {privatebooleanisLocked(){ if(recursiveLock)if(recursiveLock) return true;returntrue; if(parent == null)if(parent==null) return false;returnfalse; return parent.isLocked();returnparent.isLocked(); @Override@Override protected AccessPath<Field> getAccessPathOf(WrappedFact<Field, Fact, Stmt, Method> inc) {protectedAccessPath<Field>getAccessPathOf(WrappedFact<Field,Fact,Stmt,Method>inc){ return inc.getAccessPath();returninc.getAccessPath(); }} protected void processIncomingGuaranteedPrefix(heros.alias.WrappedFact<Field,Fact,Stmt,Method> fact) {protectedvoidprocessIncomingGuaranteedPrefix(heros.alias.WrappedFact<Field,Fact,Stmt,Method>fact){ if(!propagated) {if(!propagated){ propagated=true;propagated=true; analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(analyzer.processFlowFromJoinStmt(newWrappedFactAtStatement<>(joinStmt,newWrappedFact<>( fact.getFact(), new AccessPath<Field>(), this)));fact.getFact(),newAccessPath<Field>(),this))); }} };};  @Override@Override public void resolve(Constraint<Field> constraint, final InterestCallback<Field, Fact, Stmt, Method> callback) {publicvoidresolve(Constraint<Field>constraint,finalInterestCallback<Field,Fact,Stmt,Method>callback){ log("Resolve: "+constraint);log("Resolve: "+constraint); if(!constraint.canBeAppliedTo(resolvedAccPath) || isLocked())if(!constraint.canBeAppliedTo(resolvedAccPath)||isLocked()) return;return;  AccessPath<Field> candidateAccPath = constraint.applyToAccessPath(resolvedAccPath);AccessPath<Field>candidateAccPath=constraint.applyToAccessPath(resolvedAccPath); recursiveLock = true;recursiveLock=true; ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = getOrCreateNestedResolver(candidateAccPath);ControlFlowJoinResolver<Field,Fact,Stmt,Method>nestedResolver=getOrCreateNestedResolver(candidateAccPath); if(!nestedResolver.resolvedAccPath.equals(constraint.applyToAccessPath(resolvedAccPath)))if(!nestedResolver.resolvedAccPath.equals(constraint.applyToAccessPath(resolvedAccPath))) throw new AssertionError();thrownewAssertionError();  nestedResolver.registerCallback(callback);nestedResolver.registerCallback(callback); recursiveLock = false;recursiveLock=false; protected void processIncomingPotentialPrefix(WrappedFact<Field, Fact, Stmt, Method> fact) {protectedvoidprocessIncomingPotentialPrefix(WrappedFact<Field,Fact,Stmt,Method>fact){ lock();lock(); Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);Delta<Field>delta=fact.getAccessPath().getDeltaTo(resolvedAccPath); fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {fact.getResolver().resolve(newDeltaConstraint<>(delta),newInterestCallback<Field,Fact,Stmt,Method>(){ @Override@Override public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, publicvoidinterest(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {Resolver<Field,Fact,Stmt,Method>resolver){ ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);ControlFlowJoinResolver.this.interest(analyzer,ControlFlowJoinResolver.this); }} @Override@Override public void canBeResolvedEmpty() {publicvoidcanBeResolvedEmpty(){ ControlFlowJoinResolver.this.canBeResolvedEmpty();ControlFlowJoinResolver.this.canBeResolvedEmpty(); }} });}); unlock();unlock(); }}  private ControlFlowJoinResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> candidateAccPath) {privateControlFlowJoinResolver<Field,Fact,Stmt,Method>getOrCreateNestedResolver(AccessPath<Field>candidateAccPath){ if(resolvedAccPath.equals(candidateAccPath))if(resolvedAccPath.equals(candidateAccPath)) return this;returnthis;  if(!nestedResolvers.containsKey(candidateAccPath)) {if(!nestedResolvers.containsKey(candidateAccPath)){ assert resolvedAccPath.getDeltaTo(candidateAccPath).accesses.length <= 1;assertresolvedAccPath.getDeltaTo(candidateAccPath).accesses.length<=1;  final ControlFlowJoinResolver<Field, Fact, Stmt, Method> nestedResolver = new ControlFlowJoinResolver<>(analyzer, joinStmt, candidateAccPath, this);finalControlFlowJoinResolver<Field,Fact,Stmt,Method>nestedResolver=newControlFlowJoinResolver<>(analyzer,joinStmt,candidateAccPath,this); nestedResolver.propagated = true;nestedResolver.propagated=true; nestedResolvers.put(candidateAccPath, nestedResolver);nestedResolvers.put(candidateAccPath,nestedResolver); for(WrappedFact<Field, Fact, Stmt, Method> incFact: incomingFacts) {for(WrappedFact<Field,Fact,Stmt,Method>incFact:incomingFacts){ nestedResolver.addIncoming(incFact);nestedResolver.addIncoming(incFact); } } }} return nestedResolvers.get(candidateAccPath);returnnestedResolvers.get(candidateAccPath); @Override@Override protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {protectedResolverTemplate<Field,Fact,Stmt,Method,WrappedFact<Field,Fact,Stmt,Method>>createNestedResolver(AccessPath<Field>newAccPath){ return new ControlFlowJoinResolver<>(analyzer, joinStmt, newAccPath, this);returnnewControlFlowJoinResolver<>(analyzer,joinStmt,newAccPath,this); }} @Override@Override return "<"+resolvedAccPath+":"+joinStmt+">";return"<"+resolvedAccPath+":"+joinStmt+">"; }} @Override@Override public AccessPath<Field> getResolvedAccessPath() {publicAccessPath<Field>getResolvedAccessPath(){ return resolvedAccPath;returnresolvedAccPath; }}








src/heros/alias/FactMergeHandler.java








View file @ 90319070






......@@ -12,7 +12,17 @@ package heros.alias;




















public interface FactMergeHandler<Fact> {





















 /**










	 * Called when propagating a Fact to a statement at which an equal Fact was already propagated to.










	 * @param previousFact The Fact instance that was propagated to the statement first.










	 * @param currentFact The Fact that was propagated to the statement last.










	 */










 void merge(Fact previousFact, Fact currentFact);










 










 /**










	 * Called on Facts being propagated over a return edge. Via this method context can be restored that was abstracted when propagating over the call edge.










	 * @param factAtReturnSite The fact being propagated over the return edge.










	 * @param factAtCallSite The Fact that was present at the call site, i.e., the Fact used as input to the call flow function.










	 */










 void restoreCallingContext(Fact factAtReturnSite, Fact factAtCallSite);










}












src/heros/alias/FactMergeHandler.java








View file @ 90319070








src/heros/alias/FactMergeHandler.java










View file @ 90319070


90319070



......@@ -12,7 +12,17 @@ package heros.alias;




















public interface FactMergeHandler<Fact> {





















 /**










	 * Called when propagating a Fact to a statement at which an equal Fact was already propagated to.










	 * @param previousFact The Fact instance that was propagated to the statement first.










	 * @param currentFact The Fact that was propagated to the statement last.










	 */










 void merge(Fact previousFact, Fact currentFact);










 










 /**










	 * Called on Facts being propagated over a return edge. Via this method context can be restored that was abstracted when propagating over the call edge.










	 * @param factAtReturnSite The fact being propagated over the return edge.










	 * @param factAtCallSite The Fact that was present at the call site, i.e., the Fact used as input to the call flow function.










	 */










 void restoreCallingContext(Fact factAtReturnSite, Fact factAtCallSite);










}






......@@ -12,7 +12,17 @@ package heros.alias;




















public interface FactMergeHandler<Fact> {





















 /**










	 * Called when propagating a Fact to a statement at which an equal Fact was already propagated to.










	 * @param previousFact The Fact instance that was propagated to the statement first.










	 * @param currentFact The Fact that was propagated to the statement last.










	 */










 void merge(Fact previousFact, Fact currentFact);










 










 /**










	 * Called on Facts being propagated over a return edge. Via this method context can be restored that was abstracted when propagating over the call edge.










	 * @param factAtReturnSite The fact being propagated over the return edge.










	 * @param factAtCallSite The Fact that was present at the call site, i.e., the Fact used as input to the call flow function.










	 */










 void restoreCallingContext(Fact factAtReturnSite, Fact factAtCallSite);










}


public interface FactMergeHandler<Fact> {publicinterfaceFactMergeHandler<Fact>{ /**/**	 * Called when propagating a Fact to a statement at which an equal Fact was already propagated to.	 * Called when propagating a Fact to a statement at which an equal Fact was already propagated to.	 * @param previousFact The Fact instance that was propagated to the statement first.	 * @param previousFact The Fact instance that was propagated to the statement first.	 * @param currentFact The Fact that was propagated to the statement last.	 * @param currentFact The Fact that was propagated to the statement last.	 */	 */ void merge(Fact previousFact, Fact currentFact);voidmerge(FactpreviousFact,FactcurrentFact);  /**/**	 * Called on Facts being propagated over a return edge. Via this method context can be restored that was abstracted when propagating over the call edge.	 * Called on Facts being propagated over a return edge. Via this method context can be restored that was abstracted when propagating over the call edge.	 * @param factAtReturnSite The fact being propagated over the return edge.	 * @param factAtReturnSite The fact being propagated over the return edge.	 * @param factAtCallSite The Fact that was present at the call site, i.e., the Fact used as input to the call flow function.	 * @param factAtCallSite The Fact that was present at the call site, i.e., the Fact used as input to the call flow function.	 */	 */ void restoreCallingContext(Fact factAtReturnSite, Fact factAtCallSite);voidrestoreCallingContext(FactfactAtReturnSite,FactfactAtCallSite);}}








src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 90319070






......@@ -18,10 +18,11 @@ import java.util.Set;









import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















import com.sun.istack.internal.Nullable;





















public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends InterproceduralCFG<N, M>> {





















 protected static final Logger logger = LoggerFactory.getLogger(FieldSensitiveIFDSSolver.class);










 private FlowFunctionProcessor<D, N, M, FieldRef> flowProcessor;










 










 private CacheMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new CacheMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {










 @Override



......@@ -35,19 +36,17 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur









 private Debugger<FieldRef, D, N, M, I> debugger;










 private Scheduler scheduler;





















 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, @Nullable Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 this.tabulationProblem = tabulationProblem;










 this.scheduler = scheduler;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;










 this.debugger.setICFG(tabulationProblem.interproceduralCFG());










 flowProcessor = new FlowFunctionProcessor<>(tabulationProblem.flowFunctions());










 context = initContext(tabulationProblem, factHandler);










 submitInitialSeeds();










 }





















 protected Context<FieldRef, D, N, M> initContext(IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem, FactMergeHandler<D> factHandler) {










 return new Context<FieldRef, D, N, M>(tabulationProblem.interproceduralCFG(), flowProcessor, scheduler, tabulationProblem.zeroValue(), 










 tabulationProblem.followReturnsPastSeeds(), factHandler, tabulationProblem.zeroHandler()) {










 private Context<FieldRef, D, N, M> initContext(IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem, FactMergeHandler<D> factHandler) {










 return new Context<FieldRef, D, N, M>(tabulationProblem, scheduler, factHandler) {










 @Override










 public MethodAnalyzer<FieldRef, D, N, M> getAnalyzer(M method) {










 if(method == null)



......@@ -63,10 +62,8 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 /**










	 * Schedules the processing of initial seeds, initiating the analysis.










	 * Clients should only call this methods if performing synchronization on










	 * their own. Normally, {@link #solve()} should be called instead.










	 */










 protected void submitInitialSeeds() {










 private void submitInitialSeeds() {










 for(Entry<N, Set<D>> seed: tabulationProblem.initialSeeds().entrySet()) {










 N startPoint = seed.getKey();










 MethodAnalyzer<FieldRef, D,N,M> analyzer = methodAnalyzers.getOrCreate(tabulationProblem.interproceduralCFG().getMethodOf(startPoint));



......












src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 90319070








src/heros/alias/FieldSensitiveIFDSSolver.java










View file @ 90319070


90319070



......@@ -18,10 +18,11 @@ import java.util.Set;









import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















import com.sun.istack.internal.Nullable;





















public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends InterproceduralCFG<N, M>> {





















 protected static final Logger logger = LoggerFactory.getLogger(FieldSensitiveIFDSSolver.class);










 private FlowFunctionProcessor<D, N, M, FieldRef> flowProcessor;










 










 private CacheMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new CacheMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {










 @Override



......@@ -35,19 +36,17 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur









 private Debugger<FieldRef, D, N, M, I> debugger;










 private Scheduler scheduler;





















 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, @Nullable Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 this.tabulationProblem = tabulationProblem;










 this.scheduler = scheduler;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;










 this.debugger.setICFG(tabulationProblem.interproceduralCFG());










 flowProcessor = new FlowFunctionProcessor<>(tabulationProblem.flowFunctions());










 context = initContext(tabulationProblem, factHandler);










 submitInitialSeeds();










 }





















 protected Context<FieldRef, D, N, M> initContext(IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem, FactMergeHandler<D> factHandler) {










 return new Context<FieldRef, D, N, M>(tabulationProblem.interproceduralCFG(), flowProcessor, scheduler, tabulationProblem.zeroValue(), 










 tabulationProblem.followReturnsPastSeeds(), factHandler, tabulationProblem.zeroHandler()) {










 private Context<FieldRef, D, N, M> initContext(IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem, FactMergeHandler<D> factHandler) {










 return new Context<FieldRef, D, N, M>(tabulationProblem, scheduler, factHandler) {










 @Override










 public MethodAnalyzer<FieldRef, D, N, M> getAnalyzer(M method) {










 if(method == null)



......@@ -63,10 +62,8 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 /**










	 * Schedules the processing of initial seeds, initiating the analysis.










	 * Clients should only call this methods if performing synchronization on










	 * their own. Normally, {@link #solve()} should be called instead.










	 */










 protected void submitInitialSeeds() {










 private void submitInitialSeeds() {










 for(Entry<N, Set<D>> seed: tabulationProblem.initialSeeds().entrySet()) {










 N startPoint = seed.getKey();










 MethodAnalyzer<FieldRef, D,N,M> analyzer = methodAnalyzers.getOrCreate(tabulationProblem.interproceduralCFG().getMethodOf(startPoint));



......






......@@ -18,10 +18,11 @@ import java.util.Set;









import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















import com.sun.istack.internal.Nullable;





















public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends InterproceduralCFG<N, M>> {





















 protected static final Logger logger = LoggerFactory.getLogger(FieldSensitiveIFDSSolver.class);










 private FlowFunctionProcessor<D, N, M, FieldRef> flowProcessor;










 










 private CacheMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new CacheMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {










 @Override



......@@ -35,19 +36,17 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur









 private Debugger<FieldRef, D, N, M, I> debugger;










 private Scheduler scheduler;





















 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, @Nullable Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {










 this.tabulationProblem = tabulationProblem;










 this.scheduler = scheduler;










 this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;










 this.debugger.setICFG(tabulationProblem.interproceduralCFG());










 flowProcessor = new FlowFunctionProcessor<>(tabulationProblem.flowFunctions());










 context = initContext(tabulationProblem, factHandler);










 submitInitialSeeds();










 }





















 protected Context<FieldRef, D, N, M> initContext(IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem, FactMergeHandler<D> factHandler) {










 return new Context<FieldRef, D, N, M>(tabulationProblem.interproceduralCFG(), flowProcessor, scheduler, tabulationProblem.zeroValue(), 










 tabulationProblem.followReturnsPastSeeds(), factHandler, tabulationProblem.zeroHandler()) {










 private Context<FieldRef, D, N, M> initContext(IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem, FactMergeHandler<D> factHandler) {










 return new Context<FieldRef, D, N, M>(tabulationProblem, scheduler, factHandler) {










 @Override










 public MethodAnalyzer<FieldRef, D, N, M> getAnalyzer(M method) {










 if(method == null)



......@@ -63,10 +62,8 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 /**










	 * Schedules the processing of initial seeds, initiating the analysis.










	 * Clients should only call this methods if performing synchronization on










	 * their own. Normally, {@link #solve()} should be called instead.










	 */










 protected void submitInitialSeeds() {










 private void submitInitialSeeds() {










 for(Entry<N, Set<D>> seed: tabulationProblem.initialSeeds().entrySet()) {










 N startPoint = seed.getKey();










 MethodAnalyzer<FieldRef, D,N,M> analyzer = methodAnalyzers.getOrCreate(tabulationProblem.interproceduralCFG().getMethodOf(startPoint));



......


import org.slf4j.Logger;importorg.slf4j.Logger;import org.slf4j.LoggerFactory;importorg.slf4j.LoggerFactory;import com.sun.istack.internal.Nullable;importcom.sun.istack.internal.Nullable;public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends InterproceduralCFG<N, M>> {publicclassFieldSensitiveIFDSSolver<FieldRef,D,N,M,IextendsInterproceduralCFG<N,M>>{ protected static final Logger logger = LoggerFactory.getLogger(FieldSensitiveIFDSSolver.class);protectedstaticfinalLoggerlogger=LoggerFactory.getLogger(FieldSensitiveIFDSSolver.class); private FlowFunctionProcessor<D, N, M, FieldRef> flowProcessor;privateFlowFunctionProcessor<D,N,M,FieldRef>flowProcessor;  private CacheMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new CacheMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {privateCacheMap<M,MethodAnalyzer<FieldRef,D,N,M>>methodAnalyzers=newCacheMap<M,MethodAnalyzer<FieldRef,D,N,M>>(){ @Override@Override private Debugger<FieldRef, D, N, M, I> debugger;privateDebugger<FieldRef,D,N,M,I>debugger; private Scheduler scheduler;privateSchedulerscheduler; public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {publicFieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I>tabulationProblem,FactMergeHandler<D>factHandler,Debugger<FieldRef,D,N,M,I>debugger,Schedulerscheduler){ public FieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I> tabulationProblem, FactMergeHandler<D> factHandler, @Nullable Debugger<FieldRef, D, N, M, I> debugger, Scheduler scheduler) {publicFieldSensitiveIFDSSolver(IFDSTabulationProblem<N,FieldRef,D,M,I>tabulationProblem,FactMergeHandler<D>factHandler,@Nullable@Nullable Debugger<FieldRef,D,N,M,I>debugger,Schedulerscheduler){ this.tabulationProblem = tabulationProblem;this.tabulationProblem=tabulationProblem; this.scheduler = scheduler;this.scheduler=scheduler; this.debugger = debugger == null ? new Debugger.NullDebugger<FieldRef, D, N, M, I>() : debugger;this.debugger=debugger==null?newDebugger.NullDebugger<FieldRef,D,N,M,I>():debugger; this.debugger.setICFG(tabulationProblem.interproceduralCFG());this.debugger.setICFG(tabulationProblem.interproceduralCFG()); flowProcessor = new FlowFunctionProcessor<>(tabulationProblem.flowFunctions());flowProcessor=newFlowFunctionProcessor<>(tabulationProblem.flowFunctions()); context = initContext(tabulationProblem, factHandler);context=initContext(tabulationProblem,factHandler); submitInitialSeeds();submitInitialSeeds(); }} protected Context<FieldRef, D, N, M> initContext(IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem, FactMergeHandler<D> factHandler) {protectedContext<FieldRef,D,N,M>initContext(IFDSTabulationProblem<N,FieldRef,D,M,I>tabulationProblem,FactMergeHandler<D>factHandler){ return new Context<FieldRef, D, N, M>(tabulationProblem.interproceduralCFG(), flowProcessor, scheduler, tabulationProblem.zeroValue(), returnnewContext<FieldRef,D,N,M>(tabulationProblem.interproceduralCFG(),flowProcessor,scheduler,tabulationProblem.zeroValue(), tabulationProblem.followReturnsPastSeeds(), factHandler, tabulationProblem.zeroHandler()) {tabulationProblem.followReturnsPastSeeds(),factHandler,tabulationProblem.zeroHandler()){ private Context<FieldRef, D, N, M> initContext(IFDSTabulationProblem<N, FieldRef, D, M, I> tabulationProblem, FactMergeHandler<D> factHandler) {privateContext<FieldRef,D,N,M>initContext(IFDSTabulationProblem<N,FieldRef,D,M,I>tabulationProblem,FactMergeHandler<D>factHandler){ return new Context<FieldRef, D, N, M>(tabulationProblem, scheduler, factHandler) {returnnewContext<FieldRef,D,N,M>(tabulationProblem,scheduler,factHandler){ @Override@Override public MethodAnalyzer<FieldRef, D, N, M> getAnalyzer(M method) {publicMethodAnalyzer<FieldRef,D,N,M>getAnalyzer(Mmethod){ if(method == null)if(method==null) /**/**	 * Schedules the processing of initial seeds, initiating the analysis.	 * Schedules the processing of initial seeds, initiating the analysis.	 * Clients should only call this methods if performing synchronization on	 * Clients should only call this methods if performing synchronization on	 * their own. Normally, {@link #solve()} should be called instead.	 * their own. Normally, {@link #solve()} should be called instead.	 */	 */ protected void submitInitialSeeds() {protectedotecdvoidsubmitInitialSeeds(){ private void submitInitialSeeds() {privateivavoidsubmitInitialSeeds(){ for(Entry<N, Set<D>> seed: tabulationProblem.initialSeeds().entrySet()) {for(Entry<N,Set<D>>seed:tabulationProblem.initialSeeds().entrySet()){ N startPoint = seed.getKey();NstartPoint=seed.getKey(); MethodAnalyzer<FieldRef, D,N,M> analyzer = methodAnalyzers.getOrCreate(tabulationProblem.interproceduralCFG().getMethodOf(startPoint));MethodAnalyzer<FieldRef,D,N,M>analyzer=methodAnalyzers.getOrCreate(tabulationProblem.interproceduralCFG().getMethodOf(startPoint));








src/heros/alias/FlowFunctionProcessor.java

deleted


100644 â†’ 0







View file @ eb98a856













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.ConstrainedFact;





















import java.util.Set;





















import com.google.common.collect.Sets;





















public class FlowFunctionProcessor<Fact, Stmt, Method, Field> {





















 private FlowFunctions<Stmt, Field, Fact, Method> flowFunctions;





















 public FlowFunctionProcessor(FlowFunctions<Stmt, Field, Fact, Method> flowFunctions) {










 this.flowFunctions = flowFunctions;










 }










 










 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeNormalFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> source) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getNormalFlowFunction(source.getStatement());










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }










 










 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeCallFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> source, Method calledMethod) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getCallFlowFunction(source.getStatement(), calledMethod);










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }





















 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeCallToReturnFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> source, Stmt returnSite) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getCallToReturnFlowFunction(source.getStatement(), returnSite);










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }





















 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeReturnFlow(FactMergeHandler<Fact> factHandler, WrappedFactAtStatement<Field, Fact, Stmt, Method> source, Method calleeMethod, Stmt returnSite,










 IncomingEdge<Field, Fact, Stmt, Method> incEdge) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getReturnFlowFunction(incEdge.getCallSite(), calleeMethod, source.getStatement(), returnSite);










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 










 for (ConstrainedFact<Field, Fact, Stmt, Method> constrainedFact : targets) {










 factHandler.restoreCallingContext(constrainedFact.getFact().getFact(), incEdge.getCallerCallSiteFact().getFact());










 }










 return targets;










 }





















 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeUnbalancedReturnFlow(Fact zero, WrappedFactAtStatement<Field, Fact, Stmt, Method> source, 










 Method calleeMethod, Stmt returnSite, Stmt callSite) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getReturnFlowFunction(callSite, calleeMethod, source.getStatement(), returnSite);










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }










}












src/heros/alias/FlowFunctionProcessor.java

deleted


100644 â†’ 0







View file @ eb98a856








src/heros/alias/FlowFunctionProcessor.java

deleted


100644 â†’ 0









View file @ eb98a856


eb98a856










/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.ConstrainedFact;





















import java.util.Set;





















import com.google.common.collect.Sets;





















public class FlowFunctionProcessor<Fact, Stmt, Method, Field> {





















 private FlowFunctions<Stmt, Field, Fact, Method> flowFunctions;





















 public FlowFunctionProcessor(FlowFunctions<Stmt, Field, Fact, Method> flowFunctions) {










 this.flowFunctions = flowFunctions;










 }










 










 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeNormalFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> source) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getNormalFlowFunction(source.getStatement());










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }










 










 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeCallFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> source, Method calledMethod) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getCallFlowFunction(source.getStatement(), calledMethod);










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }





















 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeCallToReturnFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> source, Stmt returnSite) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getCallToReturnFlowFunction(source.getStatement(), returnSite);










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }





















 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeReturnFlow(FactMergeHandler<Fact> factHandler, WrappedFactAtStatement<Field, Fact, Stmt, Method> source, Method calleeMethod, Stmt returnSite,










 IncomingEdge<Field, Fact, Stmt, Method> incEdge) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getReturnFlowFunction(incEdge.getCallSite(), calleeMethod, source.getStatement(), returnSite);










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 










 for (ConstrainedFact<Field, Fact, Stmt, Method> constrainedFact : targets) {










 factHandler.restoreCallingContext(constrainedFact.getFact().getFact(), incEdge.getCallerCallSiteFact().getFact());










 }










 return targets;










 }





















 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeUnbalancedReturnFlow(Fact zero, WrappedFactAtStatement<Field, Fact, Stmt, Method> source, 










 Method calleeMethod, Stmt returnSite, Stmt callSite) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getReturnFlowFunction(callSite, calleeMethod, source.getStatement(), returnSite);










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }










}













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.ConstrainedFact;





















import java.util.Set;





















import com.google.common.collect.Sets;





















public class FlowFunctionProcessor<Fact, Stmt, Method, Field> {





















 private FlowFunctions<Stmt, Field, Fact, Method> flowFunctions;





















 public FlowFunctionProcessor(FlowFunctions<Stmt, Field, Fact, Method> flowFunctions) {










 this.flowFunctions = flowFunctions;










 }










 










 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeNormalFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> source) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getNormalFlowFunction(source.getStatement());










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }










 










 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeCallFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> source, Method calledMethod) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getCallFlowFunction(source.getStatement(), calledMethod);










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }





















 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeCallToReturnFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> source, Stmt returnSite) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getCallToReturnFlowFunction(source.getStatement(), returnSite);










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }





















 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeReturnFlow(FactMergeHandler<Fact> factHandler, WrappedFactAtStatement<Field, Fact, Stmt, Method> source, Method calleeMethod, Stmt returnSite,










 IncomingEdge<Field, Fact, Stmt, Method> incEdge) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getReturnFlowFunction(incEdge.getCallSite(), calleeMethod, source.getStatement(), returnSite);










 Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 










 for (ConstrainedFact<Field, Fact, Stmt, Method> constrainedFact : targets) {










 factHandler.restoreCallingContext(constrainedFact.getFact().getFact(), incEdge.getCallerCallSiteFact().getFact());










 }










 return targets;










 }





















 public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeUnbalancedReturnFlow(Fact zero, WrappedFactAtStatement<Field, Fact, Stmt, Method> source, 










 Method calleeMethod, Stmt returnSite, Stmt callSite) {










 FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getReturnFlowFunction(callSite, calleeMethod, source.getStatement(), returnSite);










 return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));










 }










}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2015 Johannes Lerch. * Copyright (c) 2015 Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;import heros.alias.FlowFunction.ConstrainedFact;importheros.alias.FlowFunction.ConstrainedFact;import java.util.Set;importjava.util.Set;import com.google.common.collect.Sets;importcom.google.common.collect.Sets;public class FlowFunctionProcessor<Fact, Stmt, Method, Field> {publicclassFlowFunctionProcessor<Fact,Stmt,Method,Field>{ private FlowFunctions<Stmt, Field, Fact, Method> flowFunctions;privateFlowFunctions<Stmt,Field,Fact,Method>flowFunctions; public FlowFunctionProcessor(FlowFunctions<Stmt, Field, Fact, Method> flowFunctions) {publicFlowFunctionProcessor(FlowFunctions<Stmt,Field,Fact,Method>flowFunctions){ this.flowFunctions = flowFunctions;this.flowFunctions=flowFunctions; }}  public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeNormalFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> source) {publicSet<ConstrainedFact<Field,Fact,Stmt,Method>>computeNormalFlow(WrappedFactAtStatement<Field,Fact,Stmt,Method>source){ FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getNormalFlowFunction(source.getStatement());FlowFunction<Field,Fact,Stmt,Method>flowFunction=flowFunctions.getNormalFlowFunction(source.getStatement()); return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));returnflowFunction.computeTargets(source.getFact().getFact(),newAccessPathHandler<>(source.getFact().getAccessPath(),source.getFact().getResolver())); }}  public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeCallFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> source, Method calledMethod) {publicSet<ConstrainedFact<Field,Fact,Stmt,Method>>computeCallFlow(WrappedFactAtStatement<Field,Fact,Stmt,Method>source,MethodcalledMethod){ FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getCallFlowFunction(source.getStatement(), calledMethod);FlowFunction<Field,Fact,Stmt,Method>flowFunction=flowFunctions.getCallFlowFunction(source.getStatement(),calledMethod); return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));returnflowFunction.computeTargets(source.getFact().getFact(),newAccessPathHandler<>(source.getFact().getAccessPath(),source.getFact().getResolver())); }} public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeCallToReturnFlow(WrappedFactAtStatement<Field, Fact, Stmt, Method> source, Stmt returnSite) {publicSet<ConstrainedFact<Field,Fact,Stmt,Method>>computeCallToReturnFlow(WrappedFactAtStatement<Field,Fact,Stmt,Method>source,StmtreturnSite){ FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getCallToReturnFlowFunction(source.getStatement(), returnSite);FlowFunction<Field,Fact,Stmt,Method>flowFunction=flowFunctions.getCallToReturnFlowFunction(source.getStatement(),returnSite); return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));returnflowFunction.computeTargets(source.getFact().getFact(),newAccessPathHandler<>(source.getFact().getAccessPath(),source.getFact().getResolver())); }} public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeReturnFlow(FactMergeHandler<Fact> factHandler, WrappedFactAtStatement<Field, Fact, Stmt, Method> source, Method calleeMethod, Stmt returnSite,publicSet<ConstrainedFact<Field,Fact,Stmt,Method>>computeReturnFlow(FactMergeHandler<Fact>factHandler,WrappedFactAtStatement<Field,Fact,Stmt,Method>source,MethodcalleeMethod,StmtreturnSite, IncomingEdge<Field, Fact, Stmt, Method> incEdge) {IncomingEdge<Field,Fact,Stmt,Method>incEdge){ FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getReturnFlowFunction(incEdge.getCallSite(), calleeMethod, source.getStatement(), returnSite);FlowFunction<Field,Fact,Stmt,Method>flowFunction=flowFunctions.getReturnFlowFunction(incEdge.getCallSite(),calleeMethod,source.getStatement(),returnSite); Set<ConstrainedFact<Field, Fact, Stmt, Method>> targets = flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));Set<ConstrainedFact<Field,Fact,Stmt,Method>>targets=flowFunction.computeTargets(source.getFact().getFact(),newAccessPathHandler<>(source.getFact().getAccessPath(),source.getFact().getResolver()));  for (ConstrainedFact<Field, Fact, Stmt, Method> constrainedFact : targets) {for(ConstrainedFact<Field,Fact,Stmt,Method>constrainedFact:targets){ factHandler.restoreCallingContext(constrainedFact.getFact().getFact(), incEdge.getCallerCallSiteFact().getFact());factHandler.restoreCallingContext(constrainedFact.getFact().getFact(),incEdge.getCallerCallSiteFact().getFact()); }} return targets;returntargets; }} public Set<ConstrainedFact<Field, Fact, Stmt, Method>> computeUnbalancedReturnFlow(Fact zero, WrappedFactAtStatement<Field, Fact, Stmt, Method> source, publicSet<ConstrainedFact<Field,Fact,Stmt,Method>>computeUnbalancedReturnFlow(Factzero,WrappedFactAtStatement<Field,Fact,Stmt,Method>source, Method calleeMethod, Stmt returnSite, Stmt callSite) {MethodcalleeMethod,StmtreturnSite,StmtcallSite){ FlowFunction<Field, Fact, Stmt, Method> flowFunction = flowFunctions.getReturnFlowFunction(callSite, calleeMethod, source.getStatement(), returnSite);FlowFunction<Field,Fact,Stmt,Method>flowFunction=flowFunctions.getReturnFlowFunction(callSite,calleeMethod,source.getStatement(),returnSite); return flowFunction.computeTargets(source.getFact().getFact(), new AccessPathHandler<>(source.getFact().getAccessPath(), source.getFact().getResolver()));returnflowFunction.computeTargets(source.getFact().getFact(),newAccessPathHandler<>(source.getFact().getAccessPath(),source.getFact().getResolver())); }}}}








src/heros/alias/MethodAnalyzer.java








View file @ 90319070






......@@ -12,7 +12,7 @@ package heros.alias;




















public interface MethodAnalyzer<Field,Fact,Stmt,Method> {





















 public void addIncomingEdge(IncomingEdge<Field, Fact, Stmt, Method> incEdge);










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge);










 










 public void addInitialSeed(Stmt startPoint, Fact val);










 



......












src/heros/alias/MethodAnalyzer.java








View file @ 90319070








src/heros/alias/MethodAnalyzer.java










View file @ 90319070


90319070



......@@ -12,7 +12,7 @@ package heros.alias;




















public interface MethodAnalyzer<Field,Fact,Stmt,Method> {





















 public void addIncomingEdge(IncomingEdge<Field, Fact, Stmt, Method> incEdge);










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge);










 










 public void addInitialSeed(Stmt startPoint, Fact val);










 



......






......@@ -12,7 +12,7 @@ package heros.alias;




















public interface MethodAnalyzer<Field,Fact,Stmt,Method> {





















 public void addIncomingEdge(IncomingEdge<Field, Fact, Stmt, Method> incEdge);










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge);










 










 public void addInitialSeed(Stmt startPoint, Fact val);










 



......


public interface MethodAnalyzer<Field,Fact,Stmt,Method> {publicinterfaceMethodAnalyzer<Field,Fact,Stmt,Method>{ public void addIncomingEdge(IncomingEdge<Field, Fact, Stmt, Method> incEdge);publicvoidaddIncomingEdge(IncomingEdgeIncoming<Field,Fact,Stmt,Method>incEdge); public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge);publicvoidaddIncomingEdge(CallEdgeCall<Field,Fact,Stmt,Method>incEdge);  public void addInitialSeed(Stmt startPoint, Fact val);publicvoidaddInitialSeed(StmtstartPoint,Factval); 








src/heros/alias/MethodAnalyzerImpl.java








View file @ 90319070






......@@ -29,10 +29,9 @@ public class MethodAnalyzerImpl<Field,Fact, Stmt, Method>









 }










 










 @Override










 public void addIncomingEdge(IncomingEdge<Field, Fact, Stmt, Method> incEdge) {










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact = incEdge.getCalleeSourceFact();










 PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer = perSourceAnalyzer.getOrCreate(calleeSourceFact.getFact());










 analyzer.bootstrapAtMethodStartPoints();










 analyzer.addIncomingEdge(incEdge);










 }














......












src/heros/alias/MethodAnalyzerImpl.java








View file @ 90319070








src/heros/alias/MethodAnalyzerImpl.java










View file @ 90319070


90319070



......@@ -29,10 +29,9 @@ public class MethodAnalyzerImpl<Field,Fact, Stmt, Method>









 }










 










 @Override










 public void addIncomingEdge(IncomingEdge<Field, Fact, Stmt, Method> incEdge) {










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact = incEdge.getCalleeSourceFact();










 PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer = perSourceAnalyzer.getOrCreate(calleeSourceFact.getFact());










 analyzer.bootstrapAtMethodStartPoints();










 analyzer.addIncomingEdge(incEdge);










 }














......






......@@ -29,10 +29,9 @@ public class MethodAnalyzerImpl<Field,Fact, Stmt, Method>









 }










 










 @Override










 public void addIncomingEdge(IncomingEdge<Field, Fact, Stmt, Method> incEdge) {










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact = incEdge.getCalleeSourceFact();










 PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer = perSourceAnalyzer.getOrCreate(calleeSourceFact.getFact());










 analyzer.bootstrapAtMethodStartPoints();










 analyzer.addIncomingEdge(incEdge);










 }














......


 }}  @Override@Override public void addIncomingEdge(IncomingEdge<Field, Fact, Stmt, Method> incEdge) {publicvoidaddIncomingEdge(IncomingEdgeIncoming<Field,Fact,Stmt,Method>incEdge){ public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {publicvoidaddIncomingEdge(CallEdgeCall<Field,Fact,Stmt,Method>incEdge){ WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact = incEdge.getCalleeSourceFact();WrappedFact<Field,Fact,Stmt,Method>calleeSourceFact=incEdge.getCalleeSourceFact(); PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer = perSourceAnalyzer.getOrCreate(calleeSourceFact.getFact());PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer=perSourceAnalyzer.getOrCreate(calleeSourceFact.getFact()); analyzer.bootstrapAtMethodStartPoints();analyzer.bootstrapAtMethodStartPoints(); analyzer.addIncomingEdge(incEdge);analyzer.addIncomingEdge(incEdge); }}








src/heros/alias/PerAccessPathMethodAnalyzer.java








View file @ 90319070





This diff is collapsed.
Click to expand it.











src/heros/alias/PerAccessPathMethodAnalyzer.java








View file @ 90319070








src/heros/alias/PerAccessPathMethodAnalyzer.java










View file @ 90319070


90319070


This diff is collapsed.
Click to expand it.




This diff is collapsed.
Click to expand it.


This diff is collapsed.
Click to expand it.









src/heros/alias/Resolver.java








View file @ 90319070






......@@ -10,15 +10,12 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.Constraint;





















import java.util.List;










import java.util.Map;





















import com.google.common.collect.HashMultimap;










import com.google.common.collect.Lists;





















import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;





















public abstract class Resolver<Field, Fact, Stmt, Method> {





















 private boolean interest = false;



......












src/heros/alias/Resolver.java








View file @ 90319070








src/heros/alias/Resolver.java










View file @ 90319070


90319070



......@@ -10,15 +10,12 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.Constraint;





















import java.util.List;










import java.util.Map;





















import com.google.common.collect.HashMultimap;










import com.google.common.collect.Lists;





















import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;





















public abstract class Resolver<Field, Fact, Stmt, Method> {





















 private boolean interest = false;



......






......@@ -10,15 +10,12 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.FlowFunction.Constraint;





















import java.util.List;










import java.util.Map;





















import com.google.common.collect.HashMultimap;










import com.google.common.collect.Lists;





















import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;





















public abstract class Resolver<Field, Fact, Stmt, Method> {





















 private boolean interest = false;



......


 ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;import heros.alias.FlowFunction.Constraint;importheros.alias.FlowFunction.Constraint;import java.util.List;importjava.util.List;import java.util.Map;importjava.util.Map;import com.google.common.collect.HashMultimap;importcom.google.common.collect.HashMultimap;import com.google.common.collect.Lists;importcom.google.common.collect.Lists;import heros.alias.FlowFunction.ConstrainedFact;importheros.alias.FlowFunction.ConstrainedFact;import heros.alias.FlowFunction.Constraint;importheros.alias.FlowFunction.Constraint;public abstract class Resolver<Field, Fact, Stmt, Method> {publicabstractclassResolver<Field,Fact,Stmt,Method>{ private boolean interest = false;privatebooleaninterest=false;








src/heros/alias/ResolverTemplate.java



0 â†’ 100644







View file @ 90319070













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.Constraint;
































public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming> extends Resolver<Field, Fact, Stmt, Method> {





















 private boolean recursionLock = false;










 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent) {










 super(analyzer);










 this.parent = parent;










 }










 










 protected boolean isLocked() {










 if(recursionLock)










 return true;










 if(parent == null)










 return false;










 return parent.isLocked();










 }





















 protected void lock() {










 recursionLock = true;










 }










 










 protected void unlock() {










 recursionLock = false;










 }










 










 protected abstract AccessPath<Field> getResolvedAccessPath();










 










 protected abstract AccessPath<Field> getAccessPathOf(Incoming inc);










 










 public void addIncoming(Incoming inc) {










 if(getResolvedAccessPath().isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge: "+inc);










 if(!incomingEdges.add(inc))










 return;










 










 interest(analyzer, this);










 










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : nestedResolvers.values()) {










 nestedResolver.addIncoming(inc);










 }










 










 processIncomingGuaranteedPrefix(inc);










 }










 else if(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 processIncomingPotentialPrefix(inc);










 }










 }





















 protected abstract void processIncomingPotentialPrefix(Incoming inc);





















 protected abstract void processIncomingGuaranteedPrefix(Incoming inc);










 










 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(getResolvedAccessPath()) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(getResolvedAccessPath());










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = getOrCreateNestedResolver(newAccPath);










 assert nestedResolver.getResolvedAccessPath().equals(constraint.applyToAccessPath(getResolvedAccessPath()));










 nestedResolver.registerCallback(callback);










 }










 }





















 protected ResolverTemplate<Field, Fact, Stmt, Method, Incoming> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 if(getResolvedAccessPath().equals(newAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(newAccPath)) {










 assert getResolvedAccessPath().getDeltaTo(newAccPath).accesses.length <= 1;










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = createNestedResolver(newAccPath);










 nestedResolvers.put(newAccPath, nestedResolver);










 










 for(Incoming inc : incomingEdges) {










 nestedResolver.addIncoming(inc);










 }










 }










 return nestedResolvers.get(newAccPath);










 }










 










 protected abstract ResolverTemplate<Field, Fact, Stmt, Method, Incoming> createNestedResolver(AccessPath<Field> newAccPath);










}




\ No newline at end of file












src/heros/alias/ResolverTemplate.java



0 â†’ 100644







View file @ 90319070








src/heros/alias/ResolverTemplate.java



0 â†’ 100644









View file @ 90319070


90319070










/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.Constraint;
































public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming> extends Resolver<Field, Fact, Stmt, Method> {





















 private boolean recursionLock = false;










 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent) {










 super(analyzer);










 this.parent = parent;










 }










 










 protected boolean isLocked() {










 if(recursionLock)










 return true;










 if(parent == null)










 return false;










 return parent.isLocked();










 }





















 protected void lock() {










 recursionLock = true;










 }










 










 protected void unlock() {










 recursionLock = false;










 }










 










 protected abstract AccessPath<Field> getResolvedAccessPath();










 










 protected abstract AccessPath<Field> getAccessPathOf(Incoming inc);










 










 public void addIncoming(Incoming inc) {










 if(getResolvedAccessPath().isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge: "+inc);










 if(!incomingEdges.add(inc))










 return;










 










 interest(analyzer, this);










 










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : nestedResolvers.values()) {










 nestedResolver.addIncoming(inc);










 }










 










 processIncomingGuaranteedPrefix(inc);










 }










 else if(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 processIncomingPotentialPrefix(inc);










 }










 }





















 protected abstract void processIncomingPotentialPrefix(Incoming inc);





















 protected abstract void processIncomingGuaranteedPrefix(Incoming inc);










 










 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(getResolvedAccessPath()) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(getResolvedAccessPath());










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = getOrCreateNestedResolver(newAccPath);










 assert nestedResolver.getResolvedAccessPath().equals(constraint.applyToAccessPath(getResolvedAccessPath()));










 nestedResolver.registerCallback(callback);










 }










 }





















 protected ResolverTemplate<Field, Fact, Stmt, Method, Incoming> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 if(getResolvedAccessPath().equals(newAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(newAccPath)) {










 assert getResolvedAccessPath().getDeltaTo(newAccPath).accesses.length <= 1;










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = createNestedResolver(newAccPath);










 nestedResolvers.put(newAccPath, nestedResolver);










 










 for(Incoming inc : incomingEdges) {










 nestedResolver.addIncoming(inc);










 }










 }










 return nestedResolvers.get(newAccPath);










 }










 










 protected abstract ResolverTemplate<Field, Fact, Stmt, Method, Incoming> createNestedResolver(AccessPath<Field> newAccPath);










}




\ No newline at end of file













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.Constraint;
































public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming> extends Resolver<Field, Fact, Stmt, Method> {





















 private boolean recursionLock = false;










 protected Set<Incoming> incomingEdges = Sets.newHashSet();










 private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;










 private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();





















 public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent) {










 super(analyzer);










 this.parent = parent;










 }










 










 protected boolean isLocked() {










 if(recursionLock)










 return true;










 if(parent == null)










 return false;










 return parent.isLocked();










 }





















 protected void lock() {










 recursionLock = true;










 }










 










 protected void unlock() {










 recursionLock = false;










 }










 










 protected abstract AccessPath<Field> getResolvedAccessPath();










 










 protected abstract AccessPath<Field> getAccessPathOf(Incoming inc);










 










 public void addIncoming(Incoming inc) {










 if(getResolvedAccessPath().isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge: "+inc);










 if(!incomingEdges.add(inc))










 return;










 










 interest(analyzer, this);










 










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : nestedResolvers.values()) {










 nestedResolver.addIncoming(inc);










 }










 










 processIncomingGuaranteedPrefix(inc);










 }










 else if(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 processIncomingPotentialPrefix(inc);










 }










 }





















 protected abstract void processIncomingPotentialPrefix(Incoming inc);





















 protected abstract void processIncomingGuaranteedPrefix(Incoming inc);










 










 @Override










 public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(constraint.canBeAppliedTo(getResolvedAccessPath()) && !isLocked()) {










 AccessPath<Field> newAccPath = constraint.applyToAccessPath(getResolvedAccessPath());










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = getOrCreateNestedResolver(newAccPath);










 assert nestedResolver.getResolvedAccessPath().equals(constraint.applyToAccessPath(getResolvedAccessPath()));










 nestedResolver.registerCallback(callback);










 }










 }





















 protected ResolverTemplate<Field, Fact, Stmt, Method, Incoming> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 if(getResolvedAccessPath().equals(newAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(newAccPath)) {










 assert getResolvedAccessPath().getDeltaTo(newAccPath).accesses.length <= 1;










 ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = createNestedResolver(newAccPath);










 nestedResolvers.put(newAccPath, nestedResolver);










 










 for(Incoming inc : incomingEdges) {










 nestedResolver.addIncoming(inc);










 }










 }










 return nestedResolvers.get(newAccPath);










 }










 










 protected abstract ResolverTemplate<Field, Fact, Stmt, Method, Incoming> createNestedResolver(AccessPath<Field> newAccPath);










}




\ No newline at end of file


/*******************************************************************************/******************************************************************************* * Copyright (c) 2015 Johannes Lerch. * Copyright (c) 2015 Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;import java.util.Map;importjava.util.Map;import java.util.Set;importjava.util.Set;import com.google.common.collect.Maps;importcom.google.common.collect.Maps;import com.google.common.collect.Sets;importcom.google.common.collect.Sets;import heros.alias.AccessPath.PrefixTestResult;importheros.alias.AccessPath.PrefixTestResult;import heros.alias.FlowFunction.Constraint;importheros.alias.FlowFunction.Constraint;public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming> extends Resolver<Field, Fact, Stmt, Method> {publicabstractclassResolverTemplate<Field,Fact,Stmt,Method,Incoming>extendsResolver<Field,Fact,Stmt,Method>{ private boolean recursionLock = false;privatebooleanrecursionLock=false; protected Set<Incoming> incomingEdges = Sets.newHashSet();protectedSet<Incoming>incomingEdges=Sets.newHashSet(); private ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent;privateResolverTemplate<Field,Fact,Stmt,Method,Incoming>parent; private Map<AccessPath<Field>, ResolverTemplate<Field, Fact, Stmt, Method, Incoming>> nestedResolvers = Maps.newHashMap();privateMap<AccessPath<Field>,ResolverTemplate<Field,Fact,Stmt,Method,Incoming>>nestedResolvers=Maps.newHashMap(); public ResolverTemplate(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, publicResolverTemplate(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer, ResolverTemplate<Field, Fact, Stmt, Method, Incoming> parent) {ResolverTemplate<Field,Fact,Stmt,Method,Incoming>parent){ super(analyzer);super(analyzer); this.parent = parent;this.parent=parent; }}  protected boolean isLocked() {protectedbooleanisLocked(){ if(recursionLock)if(recursionLock) return true;returntrue; if(parent == null)if(parent==null) return false;returnfalse; return parent.isLocked();returnparent.isLocked(); }} protected void lock() {protectedvoidlock(){ recursionLock = true;recursionLock=true; }}  protected void unlock() {protectedvoidunlock(){ recursionLock = false;recursionLock=false; }}  protected abstract AccessPath<Field> getResolvedAccessPath();protectedabstractAccessPath<Field>getResolvedAccessPath();  protected abstract AccessPath<Field> getAccessPathOf(Incoming inc);protectedabstractAccessPath<Field>getAccessPathOf(Incominginc);  public void addIncoming(Incoming inc) {publicvoidaddIncoming(Incominginc){ if(getResolvedAccessPath().isPrefixOf(getAccessPathOf(inc)) == PrefixTestResult.GUARANTEED_PREFIX) {if(getResolvedAccessPath().isPrefixOf(getAccessPathOf(inc))==PrefixTestResult.GUARANTEED_PREFIX){ log("Incoming Edge: "+inc);log("Incoming Edge: "+inc); if(!incomingEdges.add(inc))if(!incomingEdges.add(inc)) return;return;  interest(analyzer, this);interest(analyzer,this);  for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : nestedResolvers.values()) {for(ResolverTemplate<Field,Fact,Stmt,Method,Incoming>nestedResolver:nestedResolvers.values()){ nestedResolver.addIncoming(inc);nestedResolver.addIncoming(inc); }}  processIncomingGuaranteedPrefix(inc);processIncomingGuaranteedPrefix(inc); }} else if(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {elseif(getAccessPathOf(inc).isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)){ processIncomingPotentialPrefix(inc);processIncomingPotentialPrefix(inc); }} }} protected abstract void processIncomingPotentialPrefix(Incoming inc);protectedabstractvoidprocessIncomingPotentialPrefix(Incominginc); protected abstract void processIncomingGuaranteedPrefix(Incoming inc);protectedabstractvoidprocessIncomingGuaranteedPrefix(Incominginc);  @Override@Override public void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback) {publicvoidresolve(Constraint<Field>constraint,InterestCallback<Field,Fact,Stmt,Method>callback){ log("Resolve: "+constraint);log("Resolve: "+constraint); if(constraint.canBeAppliedTo(getResolvedAccessPath()) && !isLocked()) {if(constraint.canBeAppliedTo(getResolvedAccessPath())&&!isLocked()){ AccessPath<Field> newAccPath = constraint.applyToAccessPath(getResolvedAccessPath());AccessPath<Field>newAccPath=constraint.applyToAccessPath(getResolvedAccessPath()); ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = getOrCreateNestedResolver(newAccPath);ResolverTemplate<Field,Fact,Stmt,Method,Incoming>nestedResolver=getOrCreateNestedResolver(newAccPath); assert nestedResolver.getResolvedAccessPath().equals(constraint.applyToAccessPath(getResolvedAccessPath()));assertnestedResolver.getResolvedAccessPath().equals(constraint.applyToAccessPath(getResolvedAccessPath())); nestedResolver.registerCallback(callback);nestedResolver.registerCallback(callback); }} }} protected ResolverTemplate<Field, Fact, Stmt, Method, Incoming> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {protectedResolverTemplate<Field,Fact,Stmt,Method,Incoming>getOrCreateNestedResolver(AccessPath<Field>newAccPath){ if(getResolvedAccessPath().equals(newAccPath))if(getResolvedAccessPath().equals(newAccPath)) return this;returnthis;  if(!nestedResolvers.containsKey(newAccPath)) {if(!nestedResolvers.containsKey(newAccPath)){ assert getResolvedAccessPath().getDeltaTo(newAccPath).accesses.length <= 1;assertgetResolvedAccessPath().getDeltaTo(newAccPath).accesses.length<=1; ResolverTemplate<Field,Fact,Stmt,Method,Incoming> nestedResolver = createNestedResolver(newAccPath);ResolverTemplate<Field,Fact,Stmt,Method,Incoming>nestedResolver=createNestedResolver(newAccPath); nestedResolvers.put(newAccPath, nestedResolver);nestedResolvers.put(newAccPath,nestedResolver);  for(Incoming inc : incomingEdges) {for(Incominginc:incomingEdges){ nestedResolver.addIncoming(inc);nestedResolver.addIncoming(inc); }} }} return nestedResolvers.get(newAccPath);returnnestedResolvers.get(newAccPath); }}  protected abstract ResolverTemplate<Field, Fact, Stmt, Method, Incoming> createNestedResolver(AccessPath<Field> newAccPath);protectedabstractResolverTemplate<Field,Fact,Stmt,Method,Incoming>createNestedResolver(AccessPath<Field>newAccPath);}}








src/heros/alias/ReturnEdge.java



0 â†’ 100644







View file @ 90319070













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;





















class ReturnEdge<Field, Fact, Stmt, Method> {





















 final Fact incFact;










 final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 final Delta<Field> callDelta;










 final AccessPath<Field> incAccessPath;










 final Resolver<Field, Fact, Stmt, Method> incResolver;










 final Delta<Field> usedAccessPathOfIncResolver;





















 public ReturnEdge(WrappedFact<Field, Fact, Stmt, Method> fact, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller,










 Delta<Field> callDelta) {










 this(fact.getFact(), fact.getAccessPath(), fact.getResolver(), resolverAtCaller, callDelta, Delta.<Field>empty());










 }










 










 private ReturnEdge(Fact incFact, 










 AccessPath<Field> incAccessPath, 










 Resolver<Field, Fact, Stmt, Method> incResolver, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, 










 Delta<Field> callDelta, 










 Delta<Field> usedAccessPathOfIncResolver) {










 this.incFact = incFact;










 this.incAccessPath = incAccessPath;










 this.incResolver = incResolver;










 this.resolverAtCaller = resolverAtCaller;










 this.callDelta = callDelta;










 this.usedAccessPathOfIncResolver = usedAccessPathOfIncResolver;










 }










 










 public ReturnEdge<Field, Fact, Stmt, Method> copyWithIncomingResolver(










 Resolver<Field, Fact, Stmt, Method> incResolver, Delta<Field> usedAccessPathOfIncResolver) {










 return new ReturnEdge<>(incFact, incAccessPath, incResolver, resolverAtCaller, callDelta, usedAccessPathOfIncResolver);










 }










 










 public ReturnEdge<Field, Fact, Stmt, Method> copyWithResolverAtCaller(










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, Delta<Field> usedAccessPathOfIncResolver) {










 return new ReturnEdge<>(incFact, incAccessPath, null, resolverAtCaller, callDelta, usedAccessPathOfIncResolver);










 }










 










 @Override










 public String toString() {










 return String.format("IncFact: %s%s, Delta: %s, IncResolver: <%s:%s>, ResolverAtCallSite: %s", incFact, incAccessPath, callDelta, usedAccessPathOfIncResolver, incResolver, resolverAtCaller);










 }










 










 










}




\ No newline at end of file












src/heros/alias/ReturnEdge.java



0 â†’ 100644







View file @ 90319070








src/heros/alias/ReturnEdge.java



0 â†’ 100644









View file @ 90319070


90319070










/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;





















class ReturnEdge<Field, Fact, Stmt, Method> {





















 final Fact incFact;










 final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 final Delta<Field> callDelta;










 final AccessPath<Field> incAccessPath;










 final Resolver<Field, Fact, Stmt, Method> incResolver;










 final Delta<Field> usedAccessPathOfIncResolver;





















 public ReturnEdge(WrappedFact<Field, Fact, Stmt, Method> fact, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller,










 Delta<Field> callDelta) {










 this(fact.getFact(), fact.getAccessPath(), fact.getResolver(), resolverAtCaller, callDelta, Delta.<Field>empty());










 }










 










 private ReturnEdge(Fact incFact, 










 AccessPath<Field> incAccessPath, 










 Resolver<Field, Fact, Stmt, Method> incResolver, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, 










 Delta<Field> callDelta, 










 Delta<Field> usedAccessPathOfIncResolver) {










 this.incFact = incFact;










 this.incAccessPath = incAccessPath;










 this.incResolver = incResolver;










 this.resolverAtCaller = resolverAtCaller;










 this.callDelta = callDelta;










 this.usedAccessPathOfIncResolver = usedAccessPathOfIncResolver;










 }










 










 public ReturnEdge<Field, Fact, Stmt, Method> copyWithIncomingResolver(










 Resolver<Field, Fact, Stmt, Method> incResolver, Delta<Field> usedAccessPathOfIncResolver) {










 return new ReturnEdge<>(incFact, incAccessPath, incResolver, resolverAtCaller, callDelta, usedAccessPathOfIncResolver);










 }










 










 public ReturnEdge<Field, Fact, Stmt, Method> copyWithResolverAtCaller(










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, Delta<Field> usedAccessPathOfIncResolver) {










 return new ReturnEdge<>(incFact, incAccessPath, null, resolverAtCaller, callDelta, usedAccessPathOfIncResolver);










 }










 










 @Override










 public String toString() {










 return String.format("IncFact: %s%s, Delta: %s, IncResolver: <%s:%s>, ResolverAtCallSite: %s", incFact, incAccessPath, callDelta, usedAccessPathOfIncResolver, incResolver, resolverAtCaller);










 }










 










 










}




\ No newline at end of file













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;





















class ReturnEdge<Field, Fact, Stmt, Method> {





















 final Fact incFact;










 final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 final Delta<Field> callDelta;










 final AccessPath<Field> incAccessPath;










 final Resolver<Field, Fact, Stmt, Method> incResolver;










 final Delta<Field> usedAccessPathOfIncResolver;





















 public ReturnEdge(WrappedFact<Field, Fact, Stmt, Method> fact, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller,










 Delta<Field> callDelta) {










 this(fact.getFact(), fact.getAccessPath(), fact.getResolver(), resolverAtCaller, callDelta, Delta.<Field>empty());










 }










 










 private ReturnEdge(Fact incFact, 










 AccessPath<Field> incAccessPath, 










 Resolver<Field, Fact, Stmt, Method> incResolver, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, 










 Delta<Field> callDelta, 










 Delta<Field> usedAccessPathOfIncResolver) {










 this.incFact = incFact;










 this.incAccessPath = incAccessPath;










 this.incResolver = incResolver;










 this.resolverAtCaller = resolverAtCaller;










 this.callDelta = callDelta;










 this.usedAccessPathOfIncResolver = usedAccessPathOfIncResolver;










 }










 










 public ReturnEdge<Field, Fact, Stmt, Method> copyWithIncomingResolver(










 Resolver<Field, Fact, Stmt, Method> incResolver, Delta<Field> usedAccessPathOfIncResolver) {










 return new ReturnEdge<>(incFact, incAccessPath, incResolver, resolverAtCaller, callDelta, usedAccessPathOfIncResolver);










 }










 










 public ReturnEdge<Field, Fact, Stmt, Method> copyWithResolverAtCaller(










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, Delta<Field> usedAccessPathOfIncResolver) {










 return new ReturnEdge<>(incFact, incAccessPath, null, resolverAtCaller, callDelta, usedAccessPathOfIncResolver);










 }










 










 @Override










 public String toString() {










 return String.format("IncFact: %s%s, Delta: %s, IncResolver: <%s:%s>, ResolverAtCallSite: %s", incFact, incAccessPath, callDelta, usedAccessPathOfIncResolver, incResolver, resolverAtCaller);










 }










 










 










}




\ No newline at end of file


/*******************************************************************************/******************************************************************************* * Copyright (c) 2015 Johannes Lerch. * Copyright (c) 2015 Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;import heros.alias.AccessPath.Delta;importheros.alias.AccessPath.Delta;import heros.alias.AccessPath.PrefixTestResult;importheros.alias.AccessPath.PrefixTestResult;class ReturnEdge<Field, Fact, Stmt, Method> {classReturnEdge<Field,Fact,Stmt,Method>{ final Fact incFact;finalFactincFact; final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;finalResolver<Field,Fact,Stmt,Method>resolverAtCaller; final Delta<Field> callDelta;finalDelta<Field>callDelta; final AccessPath<Field> incAccessPath;finalAccessPath<Field>incAccessPath; final Resolver<Field, Fact, Stmt, Method> incResolver;finalResolver<Field,Fact,Stmt,Method>incResolver; final Delta<Field> usedAccessPathOfIncResolver;finalDelta<Field>usedAccessPathOfIncResolver; public ReturnEdge(WrappedFact<Field, Fact, Stmt, Method> fact, publicReturnEdge(WrappedFact<Field,Fact,Stmt,Method>fact, Resolver<Field, Fact, Stmt, Method> resolverAtCaller,Resolver<Field,Fact,Stmt,Method>resolverAtCaller, Delta<Field> callDelta) {Delta<Field>callDelta){ this(fact.getFact(), fact.getAccessPath(), fact.getResolver(), resolverAtCaller, callDelta, Delta.<Field>empty());this(fact.getFact(),fact.getAccessPath(),fact.getResolver(),resolverAtCaller,callDelta,Delta.<Field>empty()); }}  private ReturnEdge(Fact incFact, privateReturnEdge(FactincFact, AccessPath<Field> incAccessPath, AccessPath<Field>incAccessPath, Resolver<Field, Fact, Stmt, Method> incResolver, Resolver<Field,Fact,Stmt,Method>incResolver, Resolver<Field, Fact, Stmt, Method> resolverAtCaller, Resolver<Field,Fact,Stmt,Method>resolverAtCaller, Delta<Field> callDelta, Delta<Field>callDelta, Delta<Field> usedAccessPathOfIncResolver) {Delta<Field>usedAccessPathOfIncResolver){ this.incFact = incFact;this.incFact=incFact; this.incAccessPath = incAccessPath;this.incAccessPath=incAccessPath; this.incResolver = incResolver;this.incResolver=incResolver; this.resolverAtCaller = resolverAtCaller;this.resolverAtCaller=resolverAtCaller; this.callDelta = callDelta;this.callDelta=callDelta; this.usedAccessPathOfIncResolver = usedAccessPathOfIncResolver;this.usedAccessPathOfIncResolver=usedAccessPathOfIncResolver; }}  public ReturnEdge<Field, Fact, Stmt, Method> copyWithIncomingResolver(publicReturnEdge<Field,Fact,Stmt,Method>copyWithIncomingResolver( Resolver<Field, Fact, Stmt, Method> incResolver, Delta<Field> usedAccessPathOfIncResolver) {Resolver<Field,Fact,Stmt,Method>incResolver,Delta<Field>usedAccessPathOfIncResolver){ return new ReturnEdge<>(incFact, incAccessPath, incResolver, resolverAtCaller, callDelta, usedAccessPathOfIncResolver);returnnewReturnEdge<>(incFact,incAccessPath,incResolver,resolverAtCaller,callDelta,usedAccessPathOfIncResolver); }}  public ReturnEdge<Field, Fact, Stmt, Method> copyWithResolverAtCaller(publicReturnEdge<Field,Fact,Stmt,Method>copyWithResolverAtCaller( Resolver<Field, Fact, Stmt, Method> resolverAtCaller, Delta<Field> usedAccessPathOfIncResolver) {Resolver<Field,Fact,Stmt,Method>resolverAtCaller,Delta<Field>usedAccessPathOfIncResolver){ return new ReturnEdge<>(incFact, incAccessPath, null, resolverAtCaller, callDelta, usedAccessPathOfIncResolver);returnnewReturnEdge<>(incFact,incAccessPath,null,resolverAtCaller,callDelta,usedAccessPathOfIncResolver); }}  @Override@Override public String toString() {publicStringtoString(){ return String.format("IncFact: %s%s, Delta: %s, IncResolver: <%s:%s>, ResolverAtCallSite: %s", incFact, incAccessPath, callDelta, usedAccessPathOfIncResolver, incResolver, resolverAtCaller);returnString.format("IncFact: %s%s, Delta: %s, IncResolver: <%s:%s>, ResolverAtCallSite: %s",incFact,incAccessPath,callDelta,usedAccessPathOfIncResolver,incResolver,resolverAtCaller); }}  }}








src/heros/alias/ReturnSiteResolver.java








View file @ 90319070






......@@ -12,33 +12,24 @@ package heros.alias;




















import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.Constraint;





















import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {










public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {





















 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Set<ReturnEdge> incomingFacts;










 private Map<AccessPath<Field>, ReturnSiteResolver<Field, Fact, Stmt, Method>> nestedResolvers = Maps.newHashMap();










 private ReturnSiteResolver<Field, Fact, Stmt, Method> parent;





















 public ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(analyzer, returnSite, new AccessPath<Field>(), null);










 propagated = false;










 }





















 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer);










 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 this.returnSite = returnSite;










 this.resolvedAccPath = resolvedAccPath;










 this.parent = parent;










 this.incomingFacts = Sets.newHashSet();










 propagated=true;










 }










 










 @Override



......@@ -46,160 +37,97 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends Resolver<Fiel









 return "<"+resolvedAccPath+":"+returnSite+">";










 }










 










 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 }










 










 protected AccessPath<Field> getAccessPathOf(ReturnEdge<Field, Fact, Stmt, Method> inc) {










 return inc.incAccessPath;










 }










 










 public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, 










 Delta<Field> callDelta) {










 










 addIncoming(new ReturnEdge(fact, resolverAtCaller, callDelta));










 addIncoming(new ReturnEdge<Field, Fact, Stmt, Method>(fact, resolverAtCaller, callDelta));










 }










 










 private void addIncoming(final ReturnEdge retEdge) {










 if(resolvedAccPath.isPrefixOf(retEdge.incAccessPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge "+retEdge);










 if(!incomingFacts.add(retEdge))










 return;





















 interest(analyzer, this);










 










 for(ReturnSiteResolver<Field, Fact, Stmt, Method> nestedResolver : nestedResolvers.values())










 nestedResolver.addIncoming(nestedResolver.new ReturnEdge(retEdge.incFact, retEdge.incAccessPath, retEdge.incResolver, 










 retEdge.resolverAtCaller, retEdge.callDelta, retEdge.usedAccessPathOfIncResolver));





















 if(!propagated) {










 propagated=true;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<>(retEdge.incFact, new AccessPath<Field>(), this)));










 }










 }










 else if(retEdge.incAccessPath.isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 log("Incoming potential prefix:  "+retEdge);










 retEdge.resolveViaDelta();










 protected void processIncomingGuaranteedPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(!propagated) {










 propagated=true;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<>(retEdge.incFact, new AccessPath<Field>(), this)));










 }










 }










 };










 










 protected void processIncomingPotentialPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 log("Incoming potential prefix:  "+retEdge);










 resolveViaDelta(retEdge);










 };










 










 protected void log(String message) {










 analyzer.log("Return Site "+toString()+": "+message);










 }





















 @Override










 public void resolve(Constraint<Field> constraint, final InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(!constraint.canBeAppliedTo(resolvedAccPath))










 return;










 










 AccessPath<Field> candidateAccPath = constraint.applyToAccessPath(resolvedAccPath);










 ReturnSiteResolver<Field, Fact, Stmt, Method> nestedResolver = getOrCreateNestedResolver(candidateAccPath);










 if(!nestedResolver.resolvedAccPath.equals(constraint.applyToAccessPath(resolvedAccPath)))










 throw new AssertionError();










 










 nestedResolver.registerCallback(callback);










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<>(analyzer, returnSite, newAccPath, this);










 }










 










 private ReturnSiteResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> candidateAccPath) {










 if(resolvedAccPath.equals(candidateAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(candidateAccPath)) {










 assert resolvedAccPath.getDeltaTo(candidateAccPath).accesses.length <= 1;










 final ReturnSiteResolver<Field, Fact, Stmt, Method> nestedResolver = new ReturnSiteResolver<>(analyzer, returnSite, candidateAccPath, this);










 nestedResolver.propagated = true;










 nestedResolvers.put(candidateAccPath, nestedResolver);





















 for(ReturnSiteResolver<Field, Fact, Stmt, Method>.ReturnEdge retEdge: incomingFacts) {










 nestedResolver.addIncoming(nestedResolver.new ReturnEdge(retEdge.incFact, retEdge.incAccessPath, retEdge.incResolver, 










 retEdge.resolverAtCaller, retEdge.callDelta, retEdge.usedAccessPathOfIncResolver));










 } 










 }










 return nestedResolvers.get(candidateAccPath);










 public Stmt getReturnSite() {










 return returnSite;










 }










 










 private class ReturnEdge {





















 final Fact incFact;










 final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 final Delta<Field> callDelta;










 final AccessPath<Field> incAccessPath;










 final Resolver<Field, Fact, Stmt, Method> incResolver;










 final Delta<Field> usedAccessPathOfIncResolver;





















 public ReturnEdge(WrappedFact<Field, Fact, Stmt, Method> fact, Resolver<Field, Fact, Stmt, Method> resolverAtCaller,










 Delta<Field> callDelta) {










 this(fact.getFact(), fact.getAccessPath(), fact.getResolver(), resolverAtCaller, callDelta, Delta.<Field>empty());










 }










 










 private ReturnEdge(Fact incFact, AccessPath<Field> incAccessPath, Resolver<Field, Fact, Stmt, Method> incResolver, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, Delta<Field> callDelta, Delta<Field> usedAccessPathOfIncResolver) {










 this.incFact = incFact;










 this.incAccessPath = incAccessPath;










 this.incResolver = incResolver;










 this.resolverAtCaller = resolverAtCaller;










 this.callDelta = callDelta;










 this.usedAccessPathOfIncResolver = usedAccessPathOfIncResolver;










 }










 










 @Override










 public String toString() {










 return String.format("IncFact: %s%s, Delta: %s, IncResolver: <%s:%s>, ResolverAtCallSite: %s", incFact, incAccessPath, callDelta, usedAccessPathOfIncResolver, incResolver, resolverAtCaller);










 }










 










 public void resolveViaDelta() {










 if(incResolver == null || incResolver instanceof CallEdgeResolver) {










 resolveViaDeltaAndPotentiallyDelegateToCallSite();










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = usedAccessPathOfIncResolver.applyTo(incAccessPath).getDeltaTo(resolvedAccPath);










 assert delta.accesses.length <= 1;










 incResolver.resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {





















 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingFacts.add(new ReturnEdge(incFact, incAccessPath, resolver, resolverAtCaller, callDelta, incAccessPath.getDeltaTo(resolvedAccPath)));










 ReturnSiteResolver.this.interest(analyzer, resolver);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 resolveViaDeltaAndPotentiallyDelegateToCallSite();










 }










 });










 } 










 }





















 private void resolveViaDeltaAndPotentiallyDelegateToCallSite() {










 final AccessPath<Field> currAccPath = callDelta.applyTo(usedAccessPathOfIncResolver.applyTo(incAccessPath));










 if(resolvedAccPath.isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingFacts.add(new ReturnEdge(incFact, incAccessPath, null, resolverAtCaller, callDelta, usedAccessPathOfIncResolver));










 ReturnSiteResolver.this.interest(analyzer, ReturnSiteResolver.this);










 } else if(currAccPath.isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(currAccPath);










 }










 }










 private void resolveViaDelta(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(retEdge.incResolver == null || retEdge.incResolver instanceof CallEdgeResolver) {










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPath());










 assert delta.accesses.length <= 1;










 retEdge.incResolver.resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {





















 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(analyzer, resolver);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 }










 });










 } 










 }





















 protected void resolveViaCallSiteResolver(AccessPath<Field> currAccPath) {










 if(resolverAtCaller == null || resolverAtCaller instanceof CallEdgeResolver) {










 ReturnSiteResolver.this.canBeResolvedEmpty();










 } else {










 resolverAtCaller.resolve(new DeltaConstraint<>(currAccPath.getDeltaTo(resolvedAccPath)), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingFacts.add(new ReturnEdge(incFact, incAccessPath, null, resolver, Delta.<Field>empty(), incAccessPath.getDeltaTo(resolvedAccPath)));










 ReturnSiteResolver.this.interest(analyzer, ReturnSiteResolver.this);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 ReturnSiteResolver.this.canBeResolvedEmpty();










 }










 });










 }










 private void resolveViaDeltaAndPotentiallyDelegateToCallSite(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath));










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest(analyzer, this);










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }










 }





















 public Stmt getReturnSite() {










 return returnSite;










 protected void resolveViaCallSiteResolver(final ReturnEdge<Field, Fact, Stmt, Method> retEdge, AccessPath<Field> currAccPath) {










 if(retEdge.resolverAtCaller == null || retEdge.resolverAtCaller instanceof CallEdgeResolver) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(analyzer, ReturnSiteResolver.this);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 ReturnSiteResolver.this.canBeResolvedEmpty();










 }










 });










 }










 }










}












src/heros/alias/ReturnSiteResolver.java








View file @ 90319070








src/heros/alias/ReturnSiteResolver.java










View file @ 90319070


90319070



......@@ -12,33 +12,24 @@ package heros.alias;




















import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.Constraint;





















import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {










public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {





















 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Set<ReturnEdge> incomingFacts;










 private Map<AccessPath<Field>, ReturnSiteResolver<Field, Fact, Stmt, Method>> nestedResolvers = Maps.newHashMap();










 private ReturnSiteResolver<Field, Fact, Stmt, Method> parent;





















 public ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(analyzer, returnSite, new AccessPath<Field>(), null);










 propagated = false;










 }





















 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer);










 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 this.returnSite = returnSite;










 this.resolvedAccPath = resolvedAccPath;










 this.parent = parent;










 this.incomingFacts = Sets.newHashSet();










 propagated=true;










 }










 










 @Override



......@@ -46,160 +37,97 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends Resolver<Fiel









 return "<"+resolvedAccPath+":"+returnSite+">";










 }










 










 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 }










 










 protected AccessPath<Field> getAccessPathOf(ReturnEdge<Field, Fact, Stmt, Method> inc) {










 return inc.incAccessPath;










 }










 










 public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, 










 Delta<Field> callDelta) {










 










 addIncoming(new ReturnEdge(fact, resolverAtCaller, callDelta));










 addIncoming(new ReturnEdge<Field, Fact, Stmt, Method>(fact, resolverAtCaller, callDelta));










 }










 










 private void addIncoming(final ReturnEdge retEdge) {










 if(resolvedAccPath.isPrefixOf(retEdge.incAccessPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge "+retEdge);










 if(!incomingFacts.add(retEdge))










 return;





















 interest(analyzer, this);










 










 for(ReturnSiteResolver<Field, Fact, Stmt, Method> nestedResolver : nestedResolvers.values())










 nestedResolver.addIncoming(nestedResolver.new ReturnEdge(retEdge.incFact, retEdge.incAccessPath, retEdge.incResolver, 










 retEdge.resolverAtCaller, retEdge.callDelta, retEdge.usedAccessPathOfIncResolver));





















 if(!propagated) {










 propagated=true;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<>(retEdge.incFact, new AccessPath<Field>(), this)));










 }










 }










 else if(retEdge.incAccessPath.isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 log("Incoming potential prefix:  "+retEdge);










 retEdge.resolveViaDelta();










 protected void processIncomingGuaranteedPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(!propagated) {










 propagated=true;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<>(retEdge.incFact, new AccessPath<Field>(), this)));










 }










 }










 };










 










 protected void processIncomingPotentialPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 log("Incoming potential prefix:  "+retEdge);










 resolveViaDelta(retEdge);










 };










 










 protected void log(String message) {










 analyzer.log("Return Site "+toString()+": "+message);










 }





















 @Override










 public void resolve(Constraint<Field> constraint, final InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(!constraint.canBeAppliedTo(resolvedAccPath))










 return;










 










 AccessPath<Field> candidateAccPath = constraint.applyToAccessPath(resolvedAccPath);










 ReturnSiteResolver<Field, Fact, Stmt, Method> nestedResolver = getOrCreateNestedResolver(candidateAccPath);










 if(!nestedResolver.resolvedAccPath.equals(constraint.applyToAccessPath(resolvedAccPath)))










 throw new AssertionError();










 










 nestedResolver.registerCallback(callback);










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<>(analyzer, returnSite, newAccPath, this);










 }










 










 private ReturnSiteResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> candidateAccPath) {










 if(resolvedAccPath.equals(candidateAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(candidateAccPath)) {










 assert resolvedAccPath.getDeltaTo(candidateAccPath).accesses.length <= 1;










 final ReturnSiteResolver<Field, Fact, Stmt, Method> nestedResolver = new ReturnSiteResolver<>(analyzer, returnSite, candidateAccPath, this);










 nestedResolver.propagated = true;










 nestedResolvers.put(candidateAccPath, nestedResolver);





















 for(ReturnSiteResolver<Field, Fact, Stmt, Method>.ReturnEdge retEdge: incomingFacts) {










 nestedResolver.addIncoming(nestedResolver.new ReturnEdge(retEdge.incFact, retEdge.incAccessPath, retEdge.incResolver, 










 retEdge.resolverAtCaller, retEdge.callDelta, retEdge.usedAccessPathOfIncResolver));










 } 










 }










 return nestedResolvers.get(candidateAccPath);










 public Stmt getReturnSite() {










 return returnSite;










 }










 










 private class ReturnEdge {





















 final Fact incFact;










 final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 final Delta<Field> callDelta;










 final AccessPath<Field> incAccessPath;










 final Resolver<Field, Fact, Stmt, Method> incResolver;










 final Delta<Field> usedAccessPathOfIncResolver;





















 public ReturnEdge(WrappedFact<Field, Fact, Stmt, Method> fact, Resolver<Field, Fact, Stmt, Method> resolverAtCaller,










 Delta<Field> callDelta) {










 this(fact.getFact(), fact.getAccessPath(), fact.getResolver(), resolverAtCaller, callDelta, Delta.<Field>empty());










 }










 










 private ReturnEdge(Fact incFact, AccessPath<Field> incAccessPath, Resolver<Field, Fact, Stmt, Method> incResolver, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, Delta<Field> callDelta, Delta<Field> usedAccessPathOfIncResolver) {










 this.incFact = incFact;










 this.incAccessPath = incAccessPath;










 this.incResolver = incResolver;










 this.resolverAtCaller = resolverAtCaller;










 this.callDelta = callDelta;










 this.usedAccessPathOfIncResolver = usedAccessPathOfIncResolver;










 }










 










 @Override










 public String toString() {










 return String.format("IncFact: %s%s, Delta: %s, IncResolver: <%s:%s>, ResolverAtCallSite: %s", incFact, incAccessPath, callDelta, usedAccessPathOfIncResolver, incResolver, resolverAtCaller);










 }










 










 public void resolveViaDelta() {










 if(incResolver == null || incResolver instanceof CallEdgeResolver) {










 resolveViaDeltaAndPotentiallyDelegateToCallSite();










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = usedAccessPathOfIncResolver.applyTo(incAccessPath).getDeltaTo(resolvedAccPath);










 assert delta.accesses.length <= 1;










 incResolver.resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {





















 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingFacts.add(new ReturnEdge(incFact, incAccessPath, resolver, resolverAtCaller, callDelta, incAccessPath.getDeltaTo(resolvedAccPath)));










 ReturnSiteResolver.this.interest(analyzer, resolver);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 resolveViaDeltaAndPotentiallyDelegateToCallSite();










 }










 });










 } 










 }





















 private void resolveViaDeltaAndPotentiallyDelegateToCallSite() {










 final AccessPath<Field> currAccPath = callDelta.applyTo(usedAccessPathOfIncResolver.applyTo(incAccessPath));










 if(resolvedAccPath.isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingFacts.add(new ReturnEdge(incFact, incAccessPath, null, resolverAtCaller, callDelta, usedAccessPathOfIncResolver));










 ReturnSiteResolver.this.interest(analyzer, ReturnSiteResolver.this);










 } else if(currAccPath.isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(currAccPath);










 }










 }










 private void resolveViaDelta(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(retEdge.incResolver == null || retEdge.incResolver instanceof CallEdgeResolver) {










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPath());










 assert delta.accesses.length <= 1;










 retEdge.incResolver.resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {





















 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(analyzer, resolver);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 }










 });










 } 










 }





















 protected void resolveViaCallSiteResolver(AccessPath<Field> currAccPath) {










 if(resolverAtCaller == null || resolverAtCaller instanceof CallEdgeResolver) {










 ReturnSiteResolver.this.canBeResolvedEmpty();










 } else {










 resolverAtCaller.resolve(new DeltaConstraint<>(currAccPath.getDeltaTo(resolvedAccPath)), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingFacts.add(new ReturnEdge(incFact, incAccessPath, null, resolver, Delta.<Field>empty(), incAccessPath.getDeltaTo(resolvedAccPath)));










 ReturnSiteResolver.this.interest(analyzer, ReturnSiteResolver.this);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 ReturnSiteResolver.this.canBeResolvedEmpty();










 }










 });










 }










 private void resolveViaDeltaAndPotentiallyDelegateToCallSite(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath));










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest(analyzer, this);










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }










 }





















 public Stmt getReturnSite() {










 return returnSite;










 protected void resolveViaCallSiteResolver(final ReturnEdge<Field, Fact, Stmt, Method> retEdge, AccessPath<Field> currAccPath) {










 if(retEdge.resolverAtCaller == null || retEdge.resolverAtCaller instanceof CallEdgeResolver) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(analyzer, ReturnSiteResolver.this);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 ReturnSiteResolver.this.canBeResolvedEmpty();










 }










 });










 }










 }










}






......@@ -12,33 +12,24 @@ package heros.alias;




















import heros.alias.AccessPath.Delta;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.Constraint;





















import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Maps;










import com.google.common.collect.Sets;





















public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {










public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {





















 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Set<ReturnEdge> incomingFacts;










 private Map<AccessPath<Field>, ReturnSiteResolver<Field, Fact, Stmt, Method>> nestedResolvers = Maps.newHashMap();










 private ReturnSiteResolver<Field, Fact, Stmt, Method> parent;





















 public ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(analyzer, returnSite, new AccessPath<Field>(), null);










 propagated = false;










 }





















 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer);










 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 this.returnSite = returnSite;










 this.resolvedAccPath = resolvedAccPath;










 this.parent = parent;










 this.incomingFacts = Sets.newHashSet();










 propagated=true;










 }










 










 @Override



......@@ -46,160 +37,97 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends Resolver<Fiel









 return "<"+resolvedAccPath+":"+returnSite+">";










 }










 










 @Override










 public AccessPath<Field> getResolvedAccessPath() {










 return resolvedAccPath;










 }










 










 protected AccessPath<Field> getAccessPathOf(ReturnEdge<Field, Fact, Stmt, Method> inc) {










 return inc.incAccessPath;










 }










 










 public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, 










 Delta<Field> callDelta) {










 










 addIncoming(new ReturnEdge(fact, resolverAtCaller, callDelta));










 addIncoming(new ReturnEdge<Field, Fact, Stmt, Method>(fact, resolverAtCaller, callDelta));










 }










 










 private void addIncoming(final ReturnEdge retEdge) {










 if(resolvedAccPath.isPrefixOf(retEdge.incAccessPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 log("Incoming Edge "+retEdge);










 if(!incomingFacts.add(retEdge))










 return;





















 interest(analyzer, this);










 










 for(ReturnSiteResolver<Field, Fact, Stmt, Method> nestedResolver : nestedResolvers.values())










 nestedResolver.addIncoming(nestedResolver.new ReturnEdge(retEdge.incFact, retEdge.incAccessPath, retEdge.incResolver, 










 retEdge.resolverAtCaller, retEdge.callDelta, retEdge.usedAccessPathOfIncResolver));





















 if(!propagated) {










 propagated=true;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<>(retEdge.incFact, new AccessPath<Field>(), this)));










 }










 }










 else if(retEdge.incAccessPath.isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 log("Incoming potential prefix:  "+retEdge);










 retEdge.resolveViaDelta();










 protected void processIncomingGuaranteedPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(!propagated) {










 propagated=true;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<>(retEdge.incFact, new AccessPath<Field>(), this)));










 }










 }










 };










 










 protected void processIncomingPotentialPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 log("Incoming potential prefix:  "+retEdge);










 resolveViaDelta(retEdge);










 };










 










 protected void log(String message) {










 analyzer.log("Return Site "+toString()+": "+message);










 }





















 @Override










 public void resolve(Constraint<Field> constraint, final InterestCallback<Field, Fact, Stmt, Method> callback) {










 log("Resolve: "+constraint);










 if(!constraint.canBeAppliedTo(resolvedAccPath))










 return;










 










 AccessPath<Field> candidateAccPath = constraint.applyToAccessPath(resolvedAccPath);










 ReturnSiteResolver<Field, Fact, Stmt, Method> nestedResolver = getOrCreateNestedResolver(candidateAccPath);










 if(!nestedResolver.resolvedAccPath.equals(constraint.applyToAccessPath(resolvedAccPath)))










 throw new AssertionError();










 










 nestedResolver.registerCallback(callback);










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<>(analyzer, returnSite, newAccPath, this);










 }










 










 private ReturnSiteResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> candidateAccPath) {










 if(resolvedAccPath.equals(candidateAccPath))










 return this;










 










 if(!nestedResolvers.containsKey(candidateAccPath)) {










 assert resolvedAccPath.getDeltaTo(candidateAccPath).accesses.length <= 1;










 final ReturnSiteResolver<Field, Fact, Stmt, Method> nestedResolver = new ReturnSiteResolver<>(analyzer, returnSite, candidateAccPath, this);










 nestedResolver.propagated = true;










 nestedResolvers.put(candidateAccPath, nestedResolver);





















 for(ReturnSiteResolver<Field, Fact, Stmt, Method>.ReturnEdge retEdge: incomingFacts) {










 nestedResolver.addIncoming(nestedResolver.new ReturnEdge(retEdge.incFact, retEdge.incAccessPath, retEdge.incResolver, 










 retEdge.resolverAtCaller, retEdge.callDelta, retEdge.usedAccessPathOfIncResolver));










 } 










 }










 return nestedResolvers.get(candidateAccPath);










 public Stmt getReturnSite() {










 return returnSite;










 }










 










 private class ReturnEdge {





















 final Fact incFact;










 final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 final Delta<Field> callDelta;










 final AccessPath<Field> incAccessPath;










 final Resolver<Field, Fact, Stmt, Method> incResolver;










 final Delta<Field> usedAccessPathOfIncResolver;





















 public ReturnEdge(WrappedFact<Field, Fact, Stmt, Method> fact, Resolver<Field, Fact, Stmt, Method> resolverAtCaller,










 Delta<Field> callDelta) {










 this(fact.getFact(), fact.getAccessPath(), fact.getResolver(), resolverAtCaller, callDelta, Delta.<Field>empty());










 }










 










 private ReturnEdge(Fact incFact, AccessPath<Field> incAccessPath, Resolver<Field, Fact, Stmt, Method> incResolver, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller, Delta<Field> callDelta, Delta<Field> usedAccessPathOfIncResolver) {










 this.incFact = incFact;










 this.incAccessPath = incAccessPath;










 this.incResolver = incResolver;










 this.resolverAtCaller = resolverAtCaller;










 this.callDelta = callDelta;










 this.usedAccessPathOfIncResolver = usedAccessPathOfIncResolver;










 }










 










 @Override










 public String toString() {










 return String.format("IncFact: %s%s, Delta: %s, IncResolver: <%s:%s>, ResolverAtCallSite: %s", incFact, incAccessPath, callDelta, usedAccessPathOfIncResolver, incResolver, resolverAtCaller);










 }










 










 public void resolveViaDelta() {










 if(incResolver == null || incResolver instanceof CallEdgeResolver) {










 resolveViaDeltaAndPotentiallyDelegateToCallSite();










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = usedAccessPathOfIncResolver.applyTo(incAccessPath).getDeltaTo(resolvedAccPath);










 assert delta.accesses.length <= 1;










 incResolver.resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {





















 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingFacts.add(new ReturnEdge(incFact, incAccessPath, resolver, resolverAtCaller, callDelta, incAccessPath.getDeltaTo(resolvedAccPath)));










 ReturnSiteResolver.this.interest(analyzer, resolver);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 resolveViaDeltaAndPotentiallyDelegateToCallSite();










 }










 });










 } 










 }





















 private void resolveViaDeltaAndPotentiallyDelegateToCallSite() {










 final AccessPath<Field> currAccPath = callDelta.applyTo(usedAccessPathOfIncResolver.applyTo(incAccessPath));










 if(resolvedAccPath.isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingFacts.add(new ReturnEdge(incFact, incAccessPath, null, resolverAtCaller, callDelta, usedAccessPathOfIncResolver));










 ReturnSiteResolver.this.interest(analyzer, ReturnSiteResolver.this);










 } else if(currAccPath.isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(currAccPath);










 }










 }










 private void resolveViaDelta(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(retEdge.incResolver == null || retEdge.incResolver instanceof CallEdgeResolver) {










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 } else {










 //resolve via incoming facts resolver










 Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPath());










 assert delta.accesses.length <= 1;










 retEdge.incResolver.resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {





















 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(analyzer, resolver);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);










 }










 });










 } 










 }





















 protected void resolveViaCallSiteResolver(AccessPath<Field> currAccPath) {










 if(resolverAtCaller == null || resolverAtCaller instanceof CallEdgeResolver) {










 ReturnSiteResolver.this.canBeResolvedEmpty();










 } else {










 resolverAtCaller.resolve(new DeltaConstraint<>(currAccPath.getDeltaTo(resolvedAccPath)), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingFacts.add(new ReturnEdge(incFact, incAccessPath, null, resolver, Delta.<Field>empty(), incAccessPath.getDeltaTo(resolvedAccPath)));










 ReturnSiteResolver.this.interest(analyzer, ReturnSiteResolver.this);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 ReturnSiteResolver.this.canBeResolvedEmpty();










 }










 });










 }










 private void resolveViaDeltaAndPotentiallyDelegateToCallSite(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath));










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest(analyzer, this);










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }










 }





















 public Stmt getReturnSite() {










 return returnSite;










 protected void resolveViaCallSiteResolver(final ReturnEdge<Field, Fact, Stmt, Method> retEdge, AccessPath<Field> currAccPath) {










 if(retEdge.resolverAtCaller == null || retEdge.resolverAtCaller instanceof CallEdgeResolver) {










 canBeResolvedEmpty();










 } else {










 retEdge.resolverAtCaller.resolve(new DeltaConstraint<>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(analyzer, ReturnSiteResolver.this);










 }










 










 @Override










 public void canBeResolvedEmpty() {










 ReturnSiteResolver.this.canBeResolvedEmpty();










 }










 });










 }










 }










}


import heros.alias.AccessPath.Delta;importheros.alias.AccessPath.Delta;import heros.alias.AccessPath.PrefixTestResult;importheros.alias.AccessPath.PrefixTestResult;import heros.alias.FlowFunction.Constraint;importheros.alias.FlowFunction.Constraint;import java.util.Map;importjava.util.Map;import java.util.Set;importjava.util.Set;import com.google.common.collect.Maps;importcom.google.common.collect.Maps;import com.google.common.collect.Sets;importcom.google.common.collect.Sets;public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends Resolver<Field, Fact, Stmt, Method> {publicclassReturnSiteResolver<Field,Fact,Stmt,Method>extendsResolver<Field,Fact,Stmt,Method>{public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {publicclassReturnSiteResolver<Field,Fact,Stmt,Method>extendsResolverTemplate<Field,Fact,Stmt,Method,ReturnEdge<Field,Fact,Stmt,Method>>{ private Stmt returnSite;privateStmtreturnSite; private AccessPath<Field> resolvedAccPath;privateAccessPath<Field>resolvedAccPath; private boolean propagated = false;privatebooleanpropagated=false; private Set<ReturnEdge> incomingFacts;privateSet<ReturnEdge>incomingFacts; private Map<AccessPath<Field>, ReturnSiteResolver<Field, Fact, Stmt, Method>> nestedResolvers = Maps.newHashMap();privateMap<AccessPath<Field>,ReturnSiteResolver<Field,Fact,Stmt,Method>>nestedResolvers=Maps.newHashMap(); private ReturnSiteResolver<Field, Fact, Stmt, Method> parent;privateReturnSiteResolver<Field,Fact,Stmt,Method>parent; public ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {publicReturnSiteResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtreturnSite){ this(analyzer, returnSite, new AccessPath<Field>(), null);this(analyzer,returnSite,newAccessPath<Field>(),null); propagated = false;propagated=false; }} private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {privateReturnSiteResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtreturnSite,AccessPath<Field>resolvedAccPath,ReturnSiteResolver<Field,Fact,Stmt,Method>parent){ super(analyzer);super(analyzer); private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, privateReturnSiteResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtreturnSite, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {AccessPath<Field>resolvedAccPath,ReturnSiteResolver<Field,Fact,Stmt,Method>parent){ super(analyzer, parent);super(analyzer,parent); this.returnSite = returnSite;this.returnSite=returnSite; this.resolvedAccPath = resolvedAccPath;this.resolvedAccPath=resolvedAccPath; this.parent = parent;this.parent=parent; this.incomingFacts = Sets.newHashSet();this.incomingFacts=Sets.newHashSet(); propagated=true;propagated=true; }}  @Override@Override return "<"+resolvedAccPath+":"+returnSite+">";return"<"+resolvedAccPath+":"+returnSite+">"; }}  @Override@Override public AccessPath<Field> getResolvedAccessPath() {publicAccessPath<Field>getResolvedAccessPath(){ return resolvedAccPath;returnresolvedAccPath; }}  protected AccessPath<Field> getAccessPathOf(ReturnEdge<Field, Fact, Stmt, Method> inc) {protectedAccessPath<Field>getAccessPathOf(ReturnEdge<Field,Fact,Stmt,Method>inc){ return inc.incAccessPath;returninc.incAccessPath; }}  public void addIncoming(final WrappedFact<Field, Fact, Stmt, Method> fact, publicvoidaddIncoming(finalWrappedFact<Field,Fact,Stmt,Method>fact, Resolver<Field, Fact, Stmt, Method> resolverAtCaller, Resolver<Field,Fact,Stmt,Method>resolverAtCaller, Delta<Field> callDelta) {Delta<Field>callDelta){  addIncoming(new ReturnEdge(fact, resolverAtCaller, callDelta));addIncoming(newReturnEdge(fact,resolverAtCaller,callDelta)); addIncoming(new ReturnEdge<Field, Fact, Stmt, Method>(fact, resolverAtCaller, callDelta));addIncoming(newReturnEdge<<FieldField,, FactFact,, StmtStmt,, MethodMethod>(>fact,resolverAtCaller,callDelta)); }}  private void addIncoming(final ReturnEdge retEdge) {privatevoidaddIncoming(finalReturnEdgeretEdge){ if(resolvedAccPath.isPrefixOf(retEdge.incAccessPath) == PrefixTestResult.GUARANTEED_PREFIX) {if(resolvedAccPath.isPrefixOf(retEdge.incAccessPath)==PrefixTestResult.GUARANTEED_PREFIX){ log("Incoming Edge "+retEdge);log("Incoming Edge "+retEdge); if(!incomingFacts.add(retEdge))if(!incomingFacts.add(retEdge)) return;return; interest(analyzer, this);interest(analyzer,this);  for(ReturnSiteResolver<Field, Fact, Stmt, Method> nestedResolver : nestedResolvers.values())for(ReturnSiteResolver<Field,Fact,Stmt,Method>nestedResolver:nestedResolvers.values()) nestedResolver.addIncoming(nestedResolver.new ReturnEdge(retEdge.incFact, retEdge.incAccessPath, retEdge.incResolver, nestedResolver.addIncoming(nestedResolver.newReturnEdge(retEdge.incFact,retEdge.incAccessPath,retEdge.incResolver, retEdge.resolverAtCaller, retEdge.callDelta, retEdge.usedAccessPathOfIncResolver));retEdge.resolverAtCaller,retEdge.callDelta,retEdge.usedAccessPathOfIncResolver)); if(!propagated) {if(!propagated){ propagated=true;propagated=true; analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, analyzer.scheduleEdgeTo(newWrappedFactAtStatement<Field,Fact,Stmt,Method>(returnSite, new WrappedFact<>(retEdge.incFact, new AccessPath<Field>(), this)));newWrappedFact<>(retEdge.incFact,newAccessPath<Field>(),this))); }} }} else if(retEdge.incAccessPath.isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {elseif(retEdge.incAccessPath.isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)){ log("Incoming potential prefix:  "+retEdge);log("Incoming potential prefix:  "+retEdge); retEdge.resolveViaDelta();retEdge.resolveViaDelta(); protected void processIncomingGuaranteedPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {protectedvoidprocessIncomingGuaranteedPrefix(ReturnEdge<Field,Fact,Stmt,Method>retEdge){ if(!propagated) {if(!propagated){ propagated=true;propagated=true; analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, analyzer.scheduleEdgeTo(newWrappedFactAtStatement<Field,Fact,Stmt,Method>(returnSite, new WrappedFact<>(retEdge.incFact, new AccessPath<Field>(), this)));newWrappedFact<>(retEdge.incFact,newAccessPath<Field>(),this))); }} }} };};  protected void processIncomingPotentialPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {protectedvoidprocessIncomingPotentialPrefix(ReturnEdge<Field,Fact,Stmt,Method>retEdge){ log("Incoming potential prefix:  "+retEdge);log("Incoming potential prefix:  "+retEdge); resolveViaDelta(retEdge);resolveViaDelta(retEdge); };};  protected void log(String message) {protectedvoidlog(Stringmessage){ analyzer.log("Return Site "+toString()+": "+message);analyzer.log("Return Site "+toString()+": "+message); }} @Override@Override public void resolve(Constraint<Field> constraint, final InterestCallback<Field, Fact, Stmt, Method> callback) {publicvoidresolve(Constraint<Field>constraint,finalInterestCallback<Field,Fact,Stmt,Method>callback){ log("Resolve: "+constraint);log("Resolve: "+constraint); if(!constraint.canBeAppliedTo(resolvedAccPath))if(!constraint.canBeAppliedTo(resolvedAccPath)) return;return;  AccessPath<Field> candidateAccPath = constraint.applyToAccessPath(resolvedAccPath);AccessPath<Field>candidateAccPath=constraint.applyToAccessPath(resolvedAccPath); ReturnSiteResolver<Field, Fact, Stmt, Method> nestedResolver = getOrCreateNestedResolver(candidateAccPath);ReturnSiteResolver<Field,Fact,Stmt,Method>nestedResolver=getOrCreateNestedResolver(candidateAccPath); if(!nestedResolver.resolvedAccPath.equals(constraint.applyToAccessPath(resolvedAccPath)))if(!nestedResolver.resolvedAccPath.equals(constraint.applyToAccessPath(resolvedAccPath))) throw new AssertionError();thrownewAssertionError();  nestedResolver.registerCallback(callback);nestedResolver.registerCallback(callback); protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {protectedResolverTemplate<Field,Fact,Stmt,Method,ReturnEdge<Field,Fact,Stmt,Method>>createNestedResolver(AccessPath<Field>newAccPath){ return new ReturnSiteResolver<>(analyzer, returnSite, newAccPath, this);returnnewReturnSiteResolver<>(analyzer,returnSite,newAccPath,this); }}  private ReturnSiteResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> candidateAccPath) {privateReturnSiteResolver<Field,Fact,Stmt,Method>getOrCreateNestedResolver(AccessPath<Field>candidateAccPath){ if(resolvedAccPath.equals(candidateAccPath))if(resolvedAccPath.equals(candidateAccPath)) return this;returnthis;  if(!nestedResolvers.containsKey(candidateAccPath)) {if(!nestedResolvers.containsKey(candidateAccPath)){ assert resolvedAccPath.getDeltaTo(candidateAccPath).accesses.length <= 1;assertresolvedAccPath.getDeltaTo(candidateAccPath).accesses.length<=1; final ReturnSiteResolver<Field, Fact, Stmt, Method> nestedResolver = new ReturnSiteResolver<>(analyzer, returnSite, candidateAccPath, this);finalReturnSiteResolver<Field,Fact,Stmt,Method>nestedResolver=newReturnSiteResolver<>(analyzer,returnSite,candidateAccPath,this); nestedResolver.propagated = true;nestedResolver.propagated=true; nestedResolvers.put(candidateAccPath, nestedResolver);nestedResolvers.put(candidateAccPath,nestedResolver); for(ReturnSiteResolver<Field, Fact, Stmt, Method>.ReturnEdge retEdge: incomingFacts) {for(ReturnSiteResolver<Field,Fact,Stmt,Method>.ReturnEdgeretEdge:incomingFacts){ nestedResolver.addIncoming(nestedResolver.new ReturnEdge(retEdge.incFact, retEdge.incAccessPath, retEdge.incResolver, nestedResolver.addIncoming(nestedResolver.newReturnEdge(retEdge.incFact,retEdge.incAccessPath,retEdge.incResolver, retEdge.resolverAtCaller, retEdge.callDelta, retEdge.usedAccessPathOfIncResolver));retEdge.resolverAtCaller,retEdge.callDelta,retEdge.usedAccessPathOfIncResolver)); } } }} return nestedResolvers.get(candidateAccPath);returnnestedResolvers.get(candidateAccPath); public Stmt getReturnSite() {publicStmtgetReturnSite(){ return returnSite;returnreturnSite; }}  private class ReturnEdge {privateclassReturnEdge{ final Fact incFact;finalFactincFact; final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;finalResolver<Field,Fact,Stmt,Method>resolverAtCaller; final Delta<Field> callDelta;finalDelta<Field>callDelta; final AccessPath<Field> incAccessPath;finalAccessPath<Field>incAccessPath; final Resolver<Field, Fact, Stmt, Method> incResolver;finalResolver<Field,Fact,Stmt,Method>incResolver; final Delta<Field> usedAccessPathOfIncResolver;finalDelta<Field>usedAccessPathOfIncResolver; public ReturnEdge(WrappedFact<Field, Fact, Stmt, Method> fact, Resolver<Field, Fact, Stmt, Method> resolverAtCaller,publicReturnEdge(WrappedFact<Field,Fact,Stmt,Method>fact,Resolver<Field,Fact,Stmt,Method>resolverAtCaller, Delta<Field> callDelta) {Delta<Field>callDelta){ this(fact.getFact(), fact.getAccessPath(), fact.getResolver(), resolverAtCaller, callDelta, Delta.<Field>empty());this(fact.getFact(),fact.getAccessPath(),fact.getResolver(),resolverAtCaller,callDelta,Delta.<Field>empty()); }}  private ReturnEdge(Fact incFact, AccessPath<Field> incAccessPath, Resolver<Field, Fact, Stmt, Method> incResolver, privateReturnEdge(FactincFact,AccessPath<Field>incAccessPath,Resolver<Field,Fact,Stmt,Method>incResolver, Resolver<Field, Fact, Stmt, Method> resolverAtCaller, Delta<Field> callDelta, Delta<Field> usedAccessPathOfIncResolver) {Resolver<Field,Fact,Stmt,Method>resolverAtCaller,Delta<Field>callDelta,Delta<Field>usedAccessPathOfIncResolver){ this.incFact = incFact;this.incFact=incFact; this.incAccessPath = incAccessPath;this.incAccessPath=incAccessPath; this.incResolver = incResolver;this.incResolver=incResolver; this.resolverAtCaller = resolverAtCaller;this.resolverAtCaller=resolverAtCaller; this.callDelta = callDelta;this.callDelta=callDelta; this.usedAccessPathOfIncResolver = usedAccessPathOfIncResolver;this.usedAccessPathOfIncResolver=usedAccessPathOfIncResolver; }}  @Override@Override public String toString() {publicStringtoString(){ return String.format("IncFact: %s%s, Delta: %s, IncResolver: <%s:%s>, ResolverAtCallSite: %s", incFact, incAccessPath, callDelta, usedAccessPathOfIncResolver, incResolver, resolverAtCaller);returnString.format("IncFact: %s%s, Delta: %s, IncResolver: <%s:%s>, ResolverAtCallSite: %s",incFact,incAccessPath,callDelta,usedAccessPathOfIncResolver,incResolver,resolverAtCaller); }}  public void resolveViaDelta() {publicvoidresolveViaDelta(){ if(incResolver == null || incResolver instanceof CallEdgeResolver) {if(incResolver==null||incResolverinstanceofCallEdgeResolver){ resolveViaDeltaAndPotentiallyDelegateToCallSite();resolveViaDeltaAndPotentiallyDelegateToCallSite(); } else {}else{ //resolve via incoming facts resolver//resolve via incoming facts resolver Delta<Field> delta = usedAccessPathOfIncResolver.applyTo(incAccessPath).getDeltaTo(resolvedAccPath);Delta<Field>delta=usedAccessPathOfIncResolver.applyTo(incAccessPath).getDeltaTo(resolvedAccPath); assert delta.accesses.length <= 1;assertdelta.accesses.length<=1; incResolver.resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {incResolver.resolve(newDeltaConstraint<>(delta),newInterestCallback<Field,Fact,Stmt,Method>(){ @Override@Override public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {publicvoidinterest(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,Resolver<Field,Fact,Stmt,Method>resolver){ incomingFacts.add(new ReturnEdge(incFact, incAccessPath, resolver, resolverAtCaller, callDelta, incAccessPath.getDeltaTo(resolvedAccPath)));incomingFacts.add(newReturnEdge(incFact,incAccessPath,resolver,resolverAtCaller,callDelta,incAccessPath.getDeltaTo(resolvedAccPath))); ReturnSiteResolver.this.interest(analyzer, resolver);ReturnSiteResolver.this.interest(analyzer,resolver); }}  @Override@Override public void canBeResolvedEmpty() {publicvoidcanBeResolvedEmpty(){ resolveViaDeltaAndPotentiallyDelegateToCallSite();resolveViaDeltaAndPotentiallyDelegateToCallSite(); }} });}); } } }} private void resolveViaDeltaAndPotentiallyDelegateToCallSite() {privatevoidresolveViaDeltaAndPotentiallyDelegateToCallSite(){ final AccessPath<Field> currAccPath = callDelta.applyTo(usedAccessPathOfIncResolver.applyTo(incAccessPath));finalAccessPath<Field>currAccPath=callDelta.applyTo(usedAccessPathOfIncResolver.applyTo(incAccessPath)); if(resolvedAccPath.isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {if(resolvedAccPath.isPrefixOf(currAccPath)==PrefixTestResult.GUARANTEED_PREFIX){ incomingFacts.add(new ReturnEdge(incFact, incAccessPath, null, resolverAtCaller, callDelta, usedAccessPathOfIncResolver));incomingFacts.add(newReturnEdge(incFact,incAccessPath,null,resolverAtCaller,callDelta,usedAccessPathOfIncResolver)); ReturnSiteResolver.this.interest(analyzer, ReturnSiteResolver.this);ReturnSiteResolver.this.interest(analyzer,ReturnSiteResolver.this); } else if(currAccPath.isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {}elseif(currAccPath.isPrefixOf(resolvedAccPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX)){ resolveViaCallSiteResolver(currAccPath);resolveViaCallSiteResolver(currAccPath); }} }} private void resolveViaDelta(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {privatevoidresolveViaDelta(finalReturnEdge<Field,Fact,Stmt,Method>retEdge){ if(retEdge.incResolver == null || retEdge.incResolver instanceof CallEdgeResolver) {if(retEdge.incResolver==null||retEdge.incResolverinstanceofCallEdgeResolver){ resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge); } else {}else{ //resolve via incoming facts resolver//resolve via incoming facts resolver Delta<Field> delta = retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPath());Delta<Field>delta=retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath).getDeltaTo(getResolvedAccessPath()); assert delta.accesses.length <= 1;assertdelta.accesses.length<=1; retEdge.incResolver.resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {retEdge.incResolver.resolve(newDeltaConstraint<>(delta),newInterestCallback<Field,Fact,Stmt,Method>(){ @Override@Override public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {publicvoidinterest(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,Resolver<Field,Fact,Stmt,Method>resolver){ incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));incomingEdges.add(retEdge.copyWithIncomingResolver(resolver,retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath()))); ReturnSiteResolver.this.interest(analyzer, resolver);ReturnSiteResolver.this.interest(analyzer,resolver); }}  @Override@Override public void canBeResolvedEmpty() {publicvoidcanBeResolvedEmpty(){ resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge);resolveViaDeltaAndPotentiallyDelegateToCallSite(retEdge); }} });}); } } }} protected void resolveViaCallSiteResolver(AccessPath<Field> currAccPath) {protectedvoidresolveViaCallSiteResolver(AccessPath<Field>currAccPath){ if(resolverAtCaller == null || resolverAtCaller instanceof CallEdgeResolver) {if(resolverAtCaller==null||resolverAtCallerinstanceofCallEdgeResolver){ ReturnSiteResolver.this.canBeResolvedEmpty();ReturnSiteResolver.this.canBeResolvedEmpty(); } else {}else{ resolverAtCaller.resolve(new DeltaConstraint<>(currAccPath.getDeltaTo(resolvedAccPath)), new InterestCallback<Field, Fact, Stmt, Method>() {resolverAtCaller.resolve(newDeltaConstraint<>(currAccPath.getDeltaTo(resolvedAccPath)),newInterestCallback<Field,Fact,Stmt,Method>(){ @Override@Override public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {publicvoidinterest(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,Resolver<Field,Fact,Stmt,Method>resolver){ incomingFacts.add(new ReturnEdge(incFact, incAccessPath, null, resolver, Delta.<Field>empty(), incAccessPath.getDeltaTo(resolvedAccPath)));incomingFacts.add(newReturnEdge(incFact,incAccessPath,null,resolver,Delta.<Field>empty(),incAccessPath.getDeltaTo(resolvedAccPath))); ReturnSiteResolver.this.interest(analyzer, ReturnSiteResolver.this);ReturnSiteResolver.this.interest(analyzer,ReturnSiteResolver.this); }}  @Override@Override public void canBeResolvedEmpty() {publicvoidcanBeResolvedEmpty(){ ReturnSiteResolver.this.canBeResolvedEmpty();ReturnSiteResolver.this.canBeResolvedEmpty(); }} });}); }} private void resolveViaDeltaAndPotentiallyDelegateToCallSite(final ReturnEdge<Field, Fact, Stmt, Method> retEdge) {privatevoidresolveViaDeltaAndPotentiallyDelegateToCallSite(finalReturnEdge<Field,Fact,Stmt,Method>retEdge){ final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath));finalAccessPath<Field>currAccPath=retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath)); if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {if(getResolvedAccessPath().isPrefixOf(currAccPath)==PrefixTestResult.GUARANTEED_PREFIX){ incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));incomingEdges.add(retEdge.copyWithIncomingResolver(null,retEdge.usedAccessPathOfIncResolver)); interest(analyzer, this);interest(analyzer,this); } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {}elseif(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)){ resolveViaCallSiteResolver(retEdge, currAccPath);resolveViaCallSiteResolver(retEdge,currAccPath); }} }} public Stmt getReturnSite() {publicStmtgetReturnSite(){ return returnSite;returnreturnSite; protected void resolveViaCallSiteResolver(final ReturnEdge<Field, Fact, Stmt, Method> retEdge, AccessPath<Field> currAccPath) {protectedvoidresolveViaCallSiteResolver(finalReturnEdge<Field,Fact,Stmt,Method>retEdge,AccessPath<Field>currAccPath){ if(retEdge.resolverAtCaller == null || retEdge.resolverAtCaller instanceof CallEdgeResolver) {if(retEdge.resolverAtCaller==null||retEdge.resolverAtCallerinstanceofCallEdgeResolver){ canBeResolvedEmpty();canBeResolvedEmpty(); } else {}else{ retEdge.resolverAtCaller.resolve(new DeltaConstraint<>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {retEdge.resolverAtCaller.resolve(newDeltaConstraint<>(currAccPath.getDeltaTo(getResolvedAccessPath())),newInterestCallback<Field,Fact,Stmt,Method>(){ @Override@Override public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {publicvoidinterest(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,Resolver<Field,Fact,Stmt,Method>resolver){ incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver,retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath()))); ReturnSiteResolver.this.interest(analyzer, ReturnSiteResolver.this);ReturnSiteResolver.this.interest(analyzer,ReturnSiteResolver.this); }}  @Override@Override public void canBeResolvedEmpty() {publicvoidcanBeResolvedEmpty(){ ReturnSiteResolver.this.canBeResolvedEmpty();ReturnSiteResolver.this.canBeResolvedEmpty(); }} });}); }} }}}}








src/heros/alias/bidi/SourceStmtAnnotatedMethodAnalyzer.java

â†’

src/heros/alias/SourceStmtAnnotatedMethodAnalyzer.java








View file @ 90319070






......@@ -8,16 +8,8 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias.bidi;










package heros.alias;





















import heros.alias.AccessPath;










import heros.alias.CacheMap;










import heros.alias.Context;










import heros.alias.IncomingEdge;










import heros.alias.MethodAnalyzer;










import heros.alias.PerAccessPathMethodAnalyzer;










import heros.alias.WrappedFact;










import heros.alias.WrappedFactAtStatement;





















public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>










 implements MethodAnalyzer<Field, Fact, Stmt, Method> {



......@@ -40,11 +32,10 @@ public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>









 }










 










 @Override










 public void addIncomingEdge(IncomingEdge<Field, Fact, Stmt, Method> incEdge) {










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact = incEdge.getCalleeSourceFact();










 Key<Fact, Stmt> key = new Key<Fact, Stmt>(calleeSourceFact.getFact(), null);










 PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer = perSourceAnalyzer.getOrCreate(key);










 analyzer.bootstrapAtMethodStartPoints();










 analyzer.addIncomingEdge(incEdge); 










 }














......












src/heros/alias/bidi/SourceStmtAnnotatedMethodAnalyzer.java

â†’

src/heros/alias/SourceStmtAnnotatedMethodAnalyzer.java








View file @ 90319070








src/heros/alias/bidi/SourceStmtAnnotatedMethodAnalyzer.java

â†’

src/heros/alias/SourceStmtAnnotatedMethodAnalyzer.java





bidi/




View file @ 90319070


90319070



......@@ -8,16 +8,8 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias.bidi;










package heros.alias;





















import heros.alias.AccessPath;










import heros.alias.CacheMap;










import heros.alias.Context;










import heros.alias.IncomingEdge;










import heros.alias.MethodAnalyzer;










import heros.alias.PerAccessPathMethodAnalyzer;










import heros.alias.WrappedFact;










import heros.alias.WrappedFactAtStatement;





















public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>










 implements MethodAnalyzer<Field, Fact, Stmt, Method> {



......@@ -40,11 +32,10 @@ public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>









 }










 










 @Override










 public void addIncomingEdge(IncomingEdge<Field, Fact, Stmt, Method> incEdge) {










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact = incEdge.getCalleeSourceFact();










 Key<Fact, Stmt> key = new Key<Fact, Stmt>(calleeSourceFact.getFact(), null);










 PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer = perSourceAnalyzer.getOrCreate(key);










 analyzer.bootstrapAtMethodStartPoints();










 analyzer.addIncomingEdge(incEdge); 










 }














......






......@@ -8,16 +8,8 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias.bidi;










package heros.alias;





















import heros.alias.AccessPath;










import heros.alias.CacheMap;










import heros.alias.Context;










import heros.alias.IncomingEdge;










import heros.alias.MethodAnalyzer;










import heros.alias.PerAccessPathMethodAnalyzer;










import heros.alias.WrappedFact;










import heros.alias.WrappedFactAtStatement;





















public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>










 implements MethodAnalyzer<Field, Fact, Stmt, Method> {



......@@ -40,11 +32,10 @@ public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>









 }










 










 @Override










 public void addIncomingEdge(IncomingEdge<Field, Fact, Stmt, Method> incEdge) {










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact = incEdge.getCalleeSourceFact();










 Key<Fact, Stmt> key = new Key<Fact, Stmt>(calleeSourceFact.getFact(), null);










 PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer = perSourceAnalyzer.getOrCreate(key);










 analyzer.bootstrapAtMethodStartPoints();










 analyzer.addIncomingEdge(incEdge); 










 }














......


 * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.alias.bidi;packageheros.alias.bidi.bidi;package heros.alias;packageheros.alias;import heros.alias.AccessPath;importheros.alias.AccessPath;import heros.alias.CacheMap;importheros.alias.CacheMap;import heros.alias.Context;importheros.alias.Context;import heros.alias.IncomingEdge;importheros.alias.IncomingEdge;import heros.alias.MethodAnalyzer;importheros.alias.MethodAnalyzer;import heros.alias.PerAccessPathMethodAnalyzer;importheros.alias.PerAccessPathMethodAnalyzer;import heros.alias.WrappedFact;importheros.alias.WrappedFact;import heros.alias.WrappedFactAtStatement;importheros.alias.WrappedFactAtStatement;public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>publicclassSourceStmtAnnotatedMethodAnalyzer<Field,Fact,Stmt,Method> implements MethodAnalyzer<Field, Fact, Stmt, Method> {implementsMethodAnalyzer<Field,Fact,Stmt,Method>{ }}  @Override@Override public void addIncomingEdge(IncomingEdge<Field, Fact, Stmt, Method> incEdge) {publicvoidaddIncomingEdge(IncomingEdgeIncoming<Field,Fact,Stmt,Method>incEdge){ public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {publicvoidaddIncomingEdge(CallEdgeCall<Field,Fact,Stmt,Method>incEdge){ WrappedFact<Field, Fact, Stmt, Method> calleeSourceFact = incEdge.getCalleeSourceFact();WrappedFact<Field,Fact,Stmt,Method>calleeSourceFact=incEdge.getCalleeSourceFact(); Key<Fact, Stmt> key = new Key<Fact, Stmt>(calleeSourceFact.getFact(), null);Key<Fact,Stmt>key=newKey<Fact,Stmt>(calleeSourceFact.getFact(),null); PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer = perSourceAnalyzer.getOrCreate(key);PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer=perSourceAnalyzer.getOrCreate(key); analyzer.bootstrapAtMethodStartPoints();analyzer.bootstrapAtMethodStartPoints(); analyzer.addIncomingEdge(incEdge); analyzer.addIncomingEdge(incEdge); }}








src/heros/alias/WrappedFactAtStatement.java








View file @ 90319070






......@@ -20,9 +20,21 @@ public class WrappedFactAtStatement<Field, Fact, Stmt, Method> {









 this.fact = fact;










 }





















 public WrappedFact<Field,Fact, Stmt, Method> getFact() {










 public WrappedFact<Field,Fact, Stmt, Method> getWrappedFact() {










 return fact;










 }










 










 public Fact getFact() {










 return fact.getFact();










 }










 










 public AccessPath<Field> getAccessPath() {










 return fact.getAccessPath();










 }










 










 public Resolver<Field, Fact, Stmt, Method> getResolver() {










 return fact.getResolver();










 }





















 public Stmt getStatement() {










 return stmt;



......












src/heros/alias/WrappedFactAtStatement.java








View file @ 90319070








src/heros/alias/WrappedFactAtStatement.java










View file @ 90319070


90319070



......@@ -20,9 +20,21 @@ public class WrappedFactAtStatement<Field, Fact, Stmt, Method> {









 this.fact = fact;










 }





















 public WrappedFact<Field,Fact, Stmt, Method> getFact() {










 public WrappedFact<Field,Fact, Stmt, Method> getWrappedFact() {










 return fact;










 }










 










 public Fact getFact() {










 return fact.getFact();










 }










 










 public AccessPath<Field> getAccessPath() {










 return fact.getAccessPath();










 }










 










 public Resolver<Field, Fact, Stmt, Method> getResolver() {










 return fact.getResolver();










 }





















 public Stmt getStatement() {










 return stmt;



......






......@@ -20,9 +20,21 @@ public class WrappedFactAtStatement<Field, Fact, Stmt, Method> {









 this.fact = fact;










 }





















 public WrappedFact<Field,Fact, Stmt, Method> getFact() {










 public WrappedFact<Field,Fact, Stmt, Method> getWrappedFact() {










 return fact;










 }










 










 public Fact getFact() {










 return fact.getFact();










 }










 










 public AccessPath<Field> getAccessPath() {










 return fact.getAccessPath();










 }










 










 public Resolver<Field, Fact, Stmt, Method> getResolver() {










 return fact.getResolver();










 }





















 public Stmt getStatement() {










 return stmt;



......


 this.fact = fact;this.fact=fact; }} public WrappedFact<Field,Fact, Stmt, Method> getFact() {publicWrappedFact<Field,Fact,Stmt,Method>getFact(){ public WrappedFact<Field,Fact, Stmt, Method> getWrappedFact() {publicWrappedFact<Field,Fact,Stmt,Method>getWrappedFactWrapped(){ return fact;returnfact; }}  public Fact getFact() {publicFactgetFact(){ return fact.getFact();returnfact.getFact(); }}  public AccessPath<Field> getAccessPath() {publicAccessPath<Field>getAccessPath(){ return fact.getAccessPath();returnfact.getAccessPath(); }}  public Resolver<Field, Fact, Stmt, Method> getResolver() {publicResolver<Field,Fact,Stmt,Method>getResolver(){ return fact.getResolver();returnfact.getResolver(); }} public Stmt getStatement() {publicStmtgetStatement(){ return stmt;returnstmt;








src/heros/alias/ZeroCallEdgeResolver.java








View file @ 90319070






......@@ -10,7 +10,6 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.AccessPath.Delta;










import heros.alias.FlowFunction.Constraint;





















public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeResolver<Field, Fact, Stmt, Method> {



......@@ -31,4 +30,9 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 }










 










 @Override










 protected ZeroCallEdgeResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 return this;










 }










}












src/heros/alias/ZeroCallEdgeResolver.java








View file @ 90319070








src/heros/alias/ZeroCallEdgeResolver.java










View file @ 90319070


90319070



......@@ -10,7 +10,6 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.AccessPath.Delta;










import heros.alias.FlowFunction.Constraint;





















public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeResolver<Field, Fact, Stmt, Method> {



......@@ -31,4 +30,9 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 }










 










 @Override










 protected ZeroCallEdgeResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 return this;










 }










}






......@@ -10,7 +10,6 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.AccessPath.Delta;










import heros.alias.FlowFunction.Constraint;





















public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeResolver<Field, Fact, Stmt, Method> {



......@@ -31,4 +30,9 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 }










 










 @Override










 protected ZeroCallEdgeResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {










 return this;










 }










}


 ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;import heros.alias.AccessPath.Delta;importheros.alias.AccessPath.Delta;import heros.alias.FlowFunction.Constraint;importheros.alias.FlowFunction.Constraint;public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeResolver<Field, Fact, Stmt, Method> {publicclassZeroCallEdgeResolver<Field,Fact,Stmt,Method>extendsCallEdgeResolver<Field,Fact,Stmt,Method>{ @Override@Override public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {publicvoidinterest(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,Resolver<Field,Fact,Stmt,Method>resolver){ }}  @Override@Override protected ZeroCallEdgeResolver<Field, Fact, Stmt, Method> getOrCreateNestedResolver(AccessPath<Field> newAccPath) {protectedZeroCallEdgeResolver<Field,Fact,Stmt,Method>getOrCreateNestedResolver(AccessPath<Field>newAccPath){ return this;returnthis; }}}}








src/heros/alias/ZeroHandler.java








View file @ 90319070






......@@ -12,5 +12,11 @@ package heros.alias;




















public interface ZeroHandler<Field> {





















 /**










	 * If reading fields on a fact abstraction directly connected to a Zero fact, this handler is consulted










	 * to decide if the field may be read. 










	 * @param accPath The AccessPath consisting of fields already read in addition to a new field to be read.










	 * @return true if the AccessPath can be generated from within the Zero fact, false otherwise.










	 */










 boolean shouldGenerateAccessPath(AccessPath<Field> accPath);










}












src/heros/alias/ZeroHandler.java








View file @ 90319070








src/heros/alias/ZeroHandler.java










View file @ 90319070


90319070



......@@ -12,5 +12,11 @@ package heros.alias;




















public interface ZeroHandler<Field> {





















 /**










	 * If reading fields on a fact abstraction directly connected to a Zero fact, this handler is consulted










	 * to decide if the field may be read. 










	 * @param accPath The AccessPath consisting of fields already read in addition to a new field to be read.










	 * @return true if the AccessPath can be generated from within the Zero fact, false otherwise.










	 */










 boolean shouldGenerateAccessPath(AccessPath<Field> accPath);










}






......@@ -12,5 +12,11 @@ package heros.alias;




















public interface ZeroHandler<Field> {





















 /**










	 * If reading fields on a fact abstraction directly connected to a Zero fact, this handler is consulted










	 * to decide if the field may be read. 










	 * @param accPath The AccessPath consisting of fields already read in addition to a new field to be read.










	 * @return true if the AccessPath can be generated from within the Zero fact, false otherwise.










	 */










 boolean shouldGenerateAccessPath(AccessPath<Field> accPath);










}


public interface ZeroHandler<Field> {publicinterfaceZeroHandler<Field>{ /**/**	 * If reading fields on a fact abstraction directly connected to a Zero fact, this handler is consulted	 * If reading fields on a fact abstraction directly connected to a Zero fact, this handler is consulted	 * to decide if the field may be read. 	 * to decide if the field may be read. 	 * @param accPath The AccessPath consisting of fields already read in addition to a new field to be read.	 * @param accPath The AccessPath consisting of fields already read in addition to a new field to be read.	 * @return true if the AccessPath can be generated from within the Zero fact, false otherwise.	 * @return true if the AccessPath can be generated from within the Zero fact, false otherwise.	 */	 */ boolean shouldGenerateAccessPath(AccessPath<Field> accPath);booleanshouldGenerateAccessPath(AccessPath<Field>accPath);}}









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






