



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

8302b8d3















Commit
8302b8d3


authored
Sep 13, 2013
by


Marc-André Laverdière



Browse files




Ported to SLF4J Logging







parent
aacc49a7













Changes
6




Hide whitespace changes

Inline
Side-by-side















slf4j-api-1.7.5.jar



0 → 100644




View file @ 8302b8d3





File added













slf4j-simple-1.7.5.jar



0 → 100644




View file @ 8302b8d3





File added













src/heros/EdgeFunctionCache.java








View file @ 8302b8d3






......@@ -13,6 +13,8 @@ package heros;









import com.google.common.cache.CacheBuilder;










import com.google.common.cache.CacheLoader;










import com.google.common.cache.LoadingCache;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V> {










 



......@@ -25,8 +27,9 @@ public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V>









 protected final LoadingCache<ReturnKey, EdgeFunction<V>> returnCache;





















 protected final LoadingCache<NDNDKey, EdgeFunction<V>> callToReturnCache;










 










 @SuppressWarnings("unchecked")





















 Logger logger = LoggerFactory.getLogger(getClass());





















 public EdgeFunctionCache(final EdgeFunctions<N, D, M, V> delegate, @SuppressWarnings("rawtypes") CacheBuilder builder) {










 this.delegate = delegate;










 



......@@ -265,15 +268,12 @@ public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V>































 public void printStats() {










 System.err.println("Stats for edge-function cache:");










 System.err.print("Normal:         ");










 System.err.println(normalCache.stats());










 System.err.print("Call:           ");










 System.err.println(callCache.stats());










 System.err.print("Return:         ");










 System.err.println(returnCache.stats());










 System.err.print("Call-to-return: ");










 System.err.println(callToReturnCache.stats());










 logger.debug("Stats for edge-function cache:\n" +










 "Normal:         {}\n"+










 "Call:           {}\n"+










 "Return:         {}\n"+










 "Call-to-return: {}\n",










 normalCache.stats(), callCache.stats(),returnCache.stats(),callToReturnCache.stats());










 }





















}














src/heros/FlowFunctionCache.java








View file @ 8302b8d3






......@@ -13,6 +13,8 @@ package heros;









import com.google.common.cache.CacheBuilder;










import com.google.common.cache.CacheLoader;










import com.google.common.cache.LoadingCache;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















public class FlowFunctionCache<N, D, M> implements FlowFunctions<N, D, M> {










 



......@@ -26,6 +28,8 @@ public class FlowFunctionCache<N, D, M> implements FlowFunctions<N, D, M> {




















 protected final LoadingCache<NNKey, FlowFunction<D>> callToReturnCache;





















 private final Logger logger = LoggerFactory.getLogger(getClass());





















 @SuppressWarnings("unchecked")










 public FlowFunctionCache(final FlowFunctions<N, D, M> delegate, @SuppressWarnings("rawtypes") CacheBuilder builder) {










 this.delegate = delegate;



......@@ -218,15 +222,12 @@ public class FlowFunctionCache<N, D, M> implements FlowFunctions<N, D, M> {









 }










 










 public void printStats() {










 System.err.println("Stats for flow-function cache:");










 System.err.print("Normal:         ");










 System.err.println(normalCache.stats());










 System.err.print("Call:           ");










 System.err.println(callCache.stats());










 System.err.print("Return:         ");










 System.err.println(returnCache.stats());










 System.err.print("Call-to-return: ");










 System.err.println(callToReturnCache.stats());










 logger.debug("Stats for flow-function cache:\n" +










 "Normal:         {}\n"+










 "Call:           {}\n"+










 "Return:         {}\n"+










 "Call-to-return: {}\n",










 normalCache.stats(), callCache.stats(),returnCache.stats(),callToReturnCache.stats());










 }










 














......














src/heros/solver/BiDiIFDSSolver.java








View file @ 8302b8d3






......@@ -110,8 +110,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);










 if(DEBUG)










 System.err.println("++ PAUSE "+debugName+": "+edge);










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 } else {










 //the default case



......@@ -148,8 +147,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 if(DEBUG)










 System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge);










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 }










 pausedPathEdges.remove(sourceStmt);



......














src/heros/solver/IDESolver.java








View file @ 8302b8d3






......@@ -43,6 +43,8 @@ import com.google.common.collect.HashBasedTable;









import com.google.common.collect.Maps;










import com.google.common.collect.Table;










import com.google.common.collect.Table.Cell;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;
































/**



......@@ -50,7 +52,7 @@ import com.google.common.collect.Table.Cell;









 * Horwitz and Reps. To solve the problem, call {@link #solve()}. Results can then be










 * queried by using {@link #resultAt(Object, Object)} and {@link #resultsAt(Object)}.










 * 










 * Note that this solver and its data structures internally use mostly {@link LinkedHashSet}s










 * Note that this solver and its data structures internally use mostly {@link java.util.LinkedHashSet}s










 * instead of normal {@link HashSet}s to fix the iteration order as much as possible. This










 * is to produce, as much as possible, reproducible benchmarking results. We have found










 * that the iteration order can matter a lot in terms of speed.



......@@ -65,7 +67,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 public static CacheBuilder<Object, Object> DEFAULT_CACHE_BUILDER = CacheBuilder.newBuilder().concurrencyLevel(Runtime.getRuntime().availableProcessors()).initialCapacity(10000).softValues();










 










 public static final boolean DEBUG = !System.getProperty("HEROS_DEBUG", "false").equals("false");










 protected final Logger logger = LoggerFactory.getLogger(getClass());










 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")



......@@ -153,7 +155,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.










	 */










 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {










 if(DEBUG) {










 if(logger.isDebugEnabled()) {










 flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();










 edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();










 }



......@@ -225,7 +227,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 computeValues();










 durationFlowFunctionApplication = System.currentTimeMillis() - before;










 }










 if(DEBUG) 










 if(logger.isDebugEnabled())










 printStats();










 










 //ask executor to shut down;



......@@ -288,6 +290,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 private void processCall(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); // a call node; line 14...





















 logger.trace("Processing call to {}", n);





















 final D d2 = edge.factAtTarget();










 EdgeFunction<V> f = jumpFunction(edge);










 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);



......@@ -544,24 +549,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {










 if(targetVal!=zeroValue) { 










 StringBuilder result = new StringBuilder();










 result.append(getDebugName());










 result.append(": ");










 result.append("EDGE:  <");










 result.append(icfg.getMethodOf(target));










 result.append(",");










 result.append(sourceVal);










 result.append("> -> <");










 result.append(target);










 result.append(",");










 result.append(targetVal);










 result.append("> - ");










 result.append(fPrime);










 System.err.println(result.toString());










 }










 }










 if(targetVal!=zeroValue) {










 logger.debug("EDGE: <{},{}> -> <{},{}> - {}", icfg.getMethodOf(target), sourceVal, target, targetVal, fPrime );





















 }










 }










 }










 



......@@ -670,8 +661,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 else










 val.put(nHashN, nHashD,l);










 }










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 logger.debug("VALUE: {} {} {} {}", icfg.getMethodOf(nHashN), nHashN, nHashD, l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N,D> edge) {



......@@ -761,13 +751,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 public void printStats() {










 if(DEBUG) {










 if(logger.isDebugEnabled()) {










 if(ffCache!=null)










 ffCache.printStats();










 if(efCache!=null)










 efCache.printStats();










 } else {










 System.err.println("No statistics were collected, as DEBUG is disabled.");










 logger.info("No statistics were collected, as DEBUG is disabled.");










 }










 }










 



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

8302b8d3















Commit
8302b8d3


authored
Sep 13, 2013
by


Marc-André Laverdière



Browse files




Ported to SLF4J Logging







parent
aacc49a7













Changes
6




Hide whitespace changes

Inline
Side-by-side















slf4j-api-1.7.5.jar



0 → 100644




View file @ 8302b8d3





File added













slf4j-simple-1.7.5.jar



0 → 100644




View file @ 8302b8d3





File added













src/heros/EdgeFunctionCache.java








View file @ 8302b8d3






......@@ -13,6 +13,8 @@ package heros;









import com.google.common.cache.CacheBuilder;










import com.google.common.cache.CacheLoader;










import com.google.common.cache.LoadingCache;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V> {










 



......@@ -25,8 +27,9 @@ public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V>









 protected final LoadingCache<ReturnKey, EdgeFunction<V>> returnCache;





















 protected final LoadingCache<NDNDKey, EdgeFunction<V>> callToReturnCache;










 










 @SuppressWarnings("unchecked")





















 Logger logger = LoggerFactory.getLogger(getClass());





















 public EdgeFunctionCache(final EdgeFunctions<N, D, M, V> delegate, @SuppressWarnings("rawtypes") CacheBuilder builder) {










 this.delegate = delegate;










 



......@@ -265,15 +268,12 @@ public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V>































 public void printStats() {










 System.err.println("Stats for edge-function cache:");










 System.err.print("Normal:         ");










 System.err.println(normalCache.stats());










 System.err.print("Call:           ");










 System.err.println(callCache.stats());










 System.err.print("Return:         ");










 System.err.println(returnCache.stats());










 System.err.print("Call-to-return: ");










 System.err.println(callToReturnCache.stats());










 logger.debug("Stats for edge-function cache:\n" +










 "Normal:         {}\n"+










 "Call:           {}\n"+










 "Return:         {}\n"+










 "Call-to-return: {}\n",










 normalCache.stats(), callCache.stats(),returnCache.stats(),callToReturnCache.stats());










 }





















}














src/heros/FlowFunctionCache.java








View file @ 8302b8d3






......@@ -13,6 +13,8 @@ package heros;









import com.google.common.cache.CacheBuilder;










import com.google.common.cache.CacheLoader;










import com.google.common.cache.LoadingCache;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















public class FlowFunctionCache<N, D, M> implements FlowFunctions<N, D, M> {










 



......@@ -26,6 +28,8 @@ public class FlowFunctionCache<N, D, M> implements FlowFunctions<N, D, M> {




















 protected final LoadingCache<NNKey, FlowFunction<D>> callToReturnCache;





















 private final Logger logger = LoggerFactory.getLogger(getClass());





















 @SuppressWarnings("unchecked")










 public FlowFunctionCache(final FlowFunctions<N, D, M> delegate, @SuppressWarnings("rawtypes") CacheBuilder builder) {










 this.delegate = delegate;



......@@ -218,15 +222,12 @@ public class FlowFunctionCache<N, D, M> implements FlowFunctions<N, D, M> {









 }










 










 public void printStats() {










 System.err.println("Stats for flow-function cache:");










 System.err.print("Normal:         ");










 System.err.println(normalCache.stats());










 System.err.print("Call:           ");










 System.err.println(callCache.stats());










 System.err.print("Return:         ");










 System.err.println(returnCache.stats());










 System.err.print("Call-to-return: ");










 System.err.println(callToReturnCache.stats());










 logger.debug("Stats for flow-function cache:\n" +










 "Normal:         {}\n"+










 "Call:           {}\n"+










 "Return:         {}\n"+










 "Call-to-return: {}\n",










 normalCache.stats(), callCache.stats(),returnCache.stats(),callToReturnCache.stats());










 }










 














......














src/heros/solver/BiDiIFDSSolver.java








View file @ 8302b8d3






......@@ -110,8 +110,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);










 if(DEBUG)










 System.err.println("++ PAUSE "+debugName+": "+edge);










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 } else {










 //the default case



......@@ -148,8 +147,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 if(DEBUG)










 System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge);










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 }










 pausedPathEdges.remove(sourceStmt);



......














src/heros/solver/IDESolver.java








View file @ 8302b8d3






......@@ -43,6 +43,8 @@ import com.google.common.collect.HashBasedTable;









import com.google.common.collect.Maps;










import com.google.common.collect.Table;










import com.google.common.collect.Table.Cell;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;
































/**



......@@ -50,7 +52,7 @@ import com.google.common.collect.Table.Cell;









 * Horwitz and Reps. To solve the problem, call {@link #solve()}. Results can then be










 * queried by using {@link #resultAt(Object, Object)} and {@link #resultsAt(Object)}.










 * 










 * Note that this solver and its data structures internally use mostly {@link LinkedHashSet}s










 * Note that this solver and its data structures internally use mostly {@link java.util.LinkedHashSet}s










 * instead of normal {@link HashSet}s to fix the iteration order as much as possible. This










 * is to produce, as much as possible, reproducible benchmarking results. We have found










 * that the iteration order can matter a lot in terms of speed.



......@@ -65,7 +67,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 public static CacheBuilder<Object, Object> DEFAULT_CACHE_BUILDER = CacheBuilder.newBuilder().concurrencyLevel(Runtime.getRuntime().availableProcessors()).initialCapacity(10000).softValues();










 










 public static final boolean DEBUG = !System.getProperty("HEROS_DEBUG", "false").equals("false");










 protected final Logger logger = LoggerFactory.getLogger(getClass());










 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")



......@@ -153,7 +155,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.










	 */










 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {










 if(DEBUG) {










 if(logger.isDebugEnabled()) {










 flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();










 edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();










 }



......@@ -225,7 +227,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 computeValues();










 durationFlowFunctionApplication = System.currentTimeMillis() - before;










 }










 if(DEBUG) 










 if(logger.isDebugEnabled())










 printStats();










 










 //ask executor to shut down;



......@@ -288,6 +290,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 private void processCall(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); // a call node; line 14...





















 logger.trace("Processing call to {}", n);





















 final D d2 = edge.factAtTarget();










 EdgeFunction<V> f = jumpFunction(edge);










 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);



......@@ -544,24 +549,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {










 if(targetVal!=zeroValue) { 










 StringBuilder result = new StringBuilder();










 result.append(getDebugName());










 result.append(": ");










 result.append("EDGE:  <");










 result.append(icfg.getMethodOf(target));










 result.append(",");










 result.append(sourceVal);










 result.append("> -> <");










 result.append(target);










 result.append(",");










 result.append(targetVal);










 result.append("> - ");










 result.append(fPrime);










 System.err.println(result.toString());










 }










 }










 if(targetVal!=zeroValue) {










 logger.debug("EDGE: <{},{}> -> <{},{}> - {}", icfg.getMethodOf(target), sourceVal, target, targetVal, fPrime );





















 }










 }










 }










 



......@@ -670,8 +661,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 else










 val.put(nHashN, nHashD,l);










 }










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 logger.debug("VALUE: {} {} {} {}", icfg.getMethodOf(nHashN), nHashN, nHashD, l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N,D> edge) {



......@@ -761,13 +751,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 public void printStats() {










 if(DEBUG) {










 if(logger.isDebugEnabled()) {










 if(ffCache!=null)










 ffCache.printStats();










 if(efCache!=null)










 efCache.printStats();










 } else {










 System.err.println("No statistics were collected, as DEBUG is disabled.");










 logger.info("No statistics were collected, as DEBUG is disabled.");










 }










 }










 



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

8302b8d3







Open sidebar



Joshua Garcia heros
Commits

8302b8d3




Open sidebar

Joshua Garcia heros
Commits

8302b8d3


Joshua GarciaherosherosCommits
8302b8d3








Commit
8302b8d3


authored
Sep 13, 2013
by


Marc-André Laverdière



Browse files




Ported to SLF4J Logging







parent
aacc49a7













Changes
6




Hide whitespace changes

Inline
Side-by-side















slf4j-api-1.7.5.jar



0 → 100644




View file @ 8302b8d3





File added













slf4j-simple-1.7.5.jar



0 → 100644




View file @ 8302b8d3





File added













src/heros/EdgeFunctionCache.java








View file @ 8302b8d3






......@@ -13,6 +13,8 @@ package heros;









import com.google.common.cache.CacheBuilder;










import com.google.common.cache.CacheLoader;










import com.google.common.cache.LoadingCache;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V> {










 



......@@ -25,8 +27,9 @@ public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V>









 protected final LoadingCache<ReturnKey, EdgeFunction<V>> returnCache;





















 protected final LoadingCache<NDNDKey, EdgeFunction<V>> callToReturnCache;










 










 @SuppressWarnings("unchecked")





















 Logger logger = LoggerFactory.getLogger(getClass());





















 public EdgeFunctionCache(final EdgeFunctions<N, D, M, V> delegate, @SuppressWarnings("rawtypes") CacheBuilder builder) {










 this.delegate = delegate;










 



......@@ -265,15 +268,12 @@ public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V>































 public void printStats() {










 System.err.println("Stats for edge-function cache:");










 System.err.print("Normal:         ");










 System.err.println(normalCache.stats());










 System.err.print("Call:           ");










 System.err.println(callCache.stats());










 System.err.print("Return:         ");










 System.err.println(returnCache.stats());










 System.err.print("Call-to-return: ");










 System.err.println(callToReturnCache.stats());










 logger.debug("Stats for edge-function cache:\n" +










 "Normal:         {}\n"+










 "Call:           {}\n"+










 "Return:         {}\n"+










 "Call-to-return: {}\n",










 normalCache.stats(), callCache.stats(),returnCache.stats(),callToReturnCache.stats());










 }





















}














src/heros/FlowFunctionCache.java








View file @ 8302b8d3






......@@ -13,6 +13,8 @@ package heros;









import com.google.common.cache.CacheBuilder;










import com.google.common.cache.CacheLoader;










import com.google.common.cache.LoadingCache;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















public class FlowFunctionCache<N, D, M> implements FlowFunctions<N, D, M> {










 



......@@ -26,6 +28,8 @@ public class FlowFunctionCache<N, D, M> implements FlowFunctions<N, D, M> {




















 protected final LoadingCache<NNKey, FlowFunction<D>> callToReturnCache;





















 private final Logger logger = LoggerFactory.getLogger(getClass());





















 @SuppressWarnings("unchecked")










 public FlowFunctionCache(final FlowFunctions<N, D, M> delegate, @SuppressWarnings("rawtypes") CacheBuilder builder) {










 this.delegate = delegate;



......@@ -218,15 +222,12 @@ public class FlowFunctionCache<N, D, M> implements FlowFunctions<N, D, M> {









 }










 










 public void printStats() {










 System.err.println("Stats for flow-function cache:");










 System.err.print("Normal:         ");










 System.err.println(normalCache.stats());










 System.err.print("Call:           ");










 System.err.println(callCache.stats());










 System.err.print("Return:         ");










 System.err.println(returnCache.stats());










 System.err.print("Call-to-return: ");










 System.err.println(callToReturnCache.stats());










 logger.debug("Stats for flow-function cache:\n" +










 "Normal:         {}\n"+










 "Call:           {}\n"+










 "Return:         {}\n"+










 "Call-to-return: {}\n",










 normalCache.stats(), callCache.stats(),returnCache.stats(),callToReturnCache.stats());










 }










 














......














src/heros/solver/BiDiIFDSSolver.java








View file @ 8302b8d3






......@@ -110,8 +110,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);










 if(DEBUG)










 System.err.println("++ PAUSE "+debugName+": "+edge);










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 } else {










 //the default case



......@@ -148,8 +147,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 if(DEBUG)










 System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge);










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 }










 pausedPathEdges.remove(sourceStmt);



......














src/heros/solver/IDESolver.java








View file @ 8302b8d3






......@@ -43,6 +43,8 @@ import com.google.common.collect.HashBasedTable;









import com.google.common.collect.Maps;










import com.google.common.collect.Table;










import com.google.common.collect.Table.Cell;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;
































/**



......@@ -50,7 +52,7 @@ import com.google.common.collect.Table.Cell;









 * Horwitz and Reps. To solve the problem, call {@link #solve()}. Results can then be










 * queried by using {@link #resultAt(Object, Object)} and {@link #resultsAt(Object)}.










 * 










 * Note that this solver and its data structures internally use mostly {@link LinkedHashSet}s










 * Note that this solver and its data structures internally use mostly {@link java.util.LinkedHashSet}s










 * instead of normal {@link HashSet}s to fix the iteration order as much as possible. This










 * is to produce, as much as possible, reproducible benchmarking results. We have found










 * that the iteration order can matter a lot in terms of speed.



......@@ -65,7 +67,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 public static CacheBuilder<Object, Object> DEFAULT_CACHE_BUILDER = CacheBuilder.newBuilder().concurrencyLevel(Runtime.getRuntime().availableProcessors()).initialCapacity(10000).softValues();










 










 public static final boolean DEBUG = !System.getProperty("HEROS_DEBUG", "false").equals("false");










 protected final Logger logger = LoggerFactory.getLogger(getClass());










 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")



......@@ -153,7 +155,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.










	 */










 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {










 if(DEBUG) {










 if(logger.isDebugEnabled()) {










 flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();










 edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();










 }



......@@ -225,7 +227,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 computeValues();










 durationFlowFunctionApplication = System.currentTimeMillis() - before;










 }










 if(DEBUG) 










 if(logger.isDebugEnabled())










 printStats();










 










 //ask executor to shut down;



......@@ -288,6 +290,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 private void processCall(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); // a call node; line 14...





















 logger.trace("Processing call to {}", n);





















 final D d2 = edge.factAtTarget();










 EdgeFunction<V> f = jumpFunction(edge);










 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);



......@@ -544,24 +549,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {










 if(targetVal!=zeroValue) { 










 StringBuilder result = new StringBuilder();










 result.append(getDebugName());










 result.append(": ");










 result.append("EDGE:  <");










 result.append(icfg.getMethodOf(target));










 result.append(",");










 result.append(sourceVal);










 result.append("> -> <");










 result.append(target);










 result.append(",");










 result.append(targetVal);










 result.append("> - ");










 result.append(fPrime);










 System.err.println(result.toString());










 }










 }










 if(targetVal!=zeroValue) {










 logger.debug("EDGE: <{},{}> -> <{},{}> - {}", icfg.getMethodOf(target), sourceVal, target, targetVal, fPrime );





















 }










 }










 }










 



......@@ -670,8 +661,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 else










 val.put(nHashN, nHashD,l);










 }










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 logger.debug("VALUE: {} {} {} {}", icfg.getMethodOf(nHashN), nHashN, nHashD, l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N,D> edge) {



......@@ -761,13 +751,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 public void printStats() {










 if(DEBUG) {










 if(logger.isDebugEnabled()) {










 if(ffCache!=null)










 ffCache.printStats();










 if(efCache!=null)










 efCache.printStats();










 } else {










 System.err.println("No statistics were collected, as DEBUG is disabled.");










 logger.info("No statistics were collected, as DEBUG is disabled.");










 }










 }










 



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
8302b8d3


authored
Sep 13, 2013
by


Marc-André Laverdière



Browse files




Ported to SLF4J Logging







parent
aacc49a7













Changes
6




Hide whitespace changes

Inline
Side-by-side















slf4j-api-1.7.5.jar



0 → 100644




View file @ 8302b8d3





File added













slf4j-simple-1.7.5.jar



0 → 100644




View file @ 8302b8d3





File added













src/heros/EdgeFunctionCache.java








View file @ 8302b8d3






......@@ -13,6 +13,8 @@ package heros;









import com.google.common.cache.CacheBuilder;










import com.google.common.cache.CacheLoader;










import com.google.common.cache.LoadingCache;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V> {










 



......@@ -25,8 +27,9 @@ public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V>









 protected final LoadingCache<ReturnKey, EdgeFunction<V>> returnCache;





















 protected final LoadingCache<NDNDKey, EdgeFunction<V>> callToReturnCache;










 










 @SuppressWarnings("unchecked")





















 Logger logger = LoggerFactory.getLogger(getClass());





















 public EdgeFunctionCache(final EdgeFunctions<N, D, M, V> delegate, @SuppressWarnings("rawtypes") CacheBuilder builder) {










 this.delegate = delegate;










 



......@@ -265,15 +268,12 @@ public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V>































 public void printStats() {










 System.err.println("Stats for edge-function cache:");










 System.err.print("Normal:         ");










 System.err.println(normalCache.stats());










 System.err.print("Call:           ");










 System.err.println(callCache.stats());










 System.err.print("Return:         ");










 System.err.println(returnCache.stats());










 System.err.print("Call-to-return: ");










 System.err.println(callToReturnCache.stats());










 logger.debug("Stats for edge-function cache:\n" +










 "Normal:         {}\n"+










 "Call:           {}\n"+










 "Return:         {}\n"+










 "Call-to-return: {}\n",










 normalCache.stats(), callCache.stats(),returnCache.stats(),callToReturnCache.stats());










 }





















}














src/heros/FlowFunctionCache.java








View file @ 8302b8d3






......@@ -13,6 +13,8 @@ package heros;









import com.google.common.cache.CacheBuilder;










import com.google.common.cache.CacheLoader;










import com.google.common.cache.LoadingCache;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















public class FlowFunctionCache<N, D, M> implements FlowFunctions<N, D, M> {










 



......@@ -26,6 +28,8 @@ public class FlowFunctionCache<N, D, M> implements FlowFunctions<N, D, M> {




















 protected final LoadingCache<NNKey, FlowFunction<D>> callToReturnCache;





















 private final Logger logger = LoggerFactory.getLogger(getClass());





















 @SuppressWarnings("unchecked")










 public FlowFunctionCache(final FlowFunctions<N, D, M> delegate, @SuppressWarnings("rawtypes") CacheBuilder builder) {










 this.delegate = delegate;



......@@ -218,15 +222,12 @@ public class FlowFunctionCache<N, D, M> implements FlowFunctions<N, D, M> {









 }










 










 public void printStats() {










 System.err.println("Stats for flow-function cache:");










 System.err.print("Normal:         ");










 System.err.println(normalCache.stats());










 System.err.print("Call:           ");










 System.err.println(callCache.stats());










 System.err.print("Return:         ");










 System.err.println(returnCache.stats());










 System.err.print("Call-to-return: ");










 System.err.println(callToReturnCache.stats());










 logger.debug("Stats for flow-function cache:\n" +










 "Normal:         {}\n"+










 "Call:           {}\n"+










 "Return:         {}\n"+










 "Call-to-return: {}\n",










 normalCache.stats(), callCache.stats(),returnCache.stats(),callToReturnCache.stats());










 }










 














......














src/heros/solver/BiDiIFDSSolver.java








View file @ 8302b8d3






......@@ -110,8 +110,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);










 if(DEBUG)










 System.err.println("++ PAUSE "+debugName+": "+edge);










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 } else {










 //the default case



......@@ -148,8 +147,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 if(DEBUG)










 System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge);










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 }










 pausedPathEdges.remove(sourceStmt);



......














src/heros/solver/IDESolver.java








View file @ 8302b8d3






......@@ -43,6 +43,8 @@ import com.google.common.collect.HashBasedTable;









import com.google.common.collect.Maps;










import com.google.common.collect.Table;










import com.google.common.collect.Table.Cell;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;
































/**



......@@ -50,7 +52,7 @@ import com.google.common.collect.Table.Cell;









 * Horwitz and Reps. To solve the problem, call {@link #solve()}. Results can then be










 * queried by using {@link #resultAt(Object, Object)} and {@link #resultsAt(Object)}.










 * 










 * Note that this solver and its data structures internally use mostly {@link LinkedHashSet}s










 * Note that this solver and its data structures internally use mostly {@link java.util.LinkedHashSet}s










 * instead of normal {@link HashSet}s to fix the iteration order as much as possible. This










 * is to produce, as much as possible, reproducible benchmarking results. We have found










 * that the iteration order can matter a lot in terms of speed.



......@@ -65,7 +67,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 public static CacheBuilder<Object, Object> DEFAULT_CACHE_BUILDER = CacheBuilder.newBuilder().concurrencyLevel(Runtime.getRuntime().availableProcessors()).initialCapacity(10000).softValues();










 










 public static final boolean DEBUG = !System.getProperty("HEROS_DEBUG", "false").equals("false");










 protected final Logger logger = LoggerFactory.getLogger(getClass());










 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")



......@@ -153,7 +155,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.










	 */










 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {










 if(DEBUG) {










 if(logger.isDebugEnabled()) {










 flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();










 edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();










 }



......@@ -225,7 +227,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 computeValues();










 durationFlowFunctionApplication = System.currentTimeMillis() - before;










 }










 if(DEBUG) 










 if(logger.isDebugEnabled())










 printStats();










 










 //ask executor to shut down;



......@@ -288,6 +290,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 private void processCall(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); // a call node; line 14...





















 logger.trace("Processing call to {}", n);





















 final D d2 = edge.factAtTarget();










 EdgeFunction<V> f = jumpFunction(edge);










 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);



......@@ -544,24 +549,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {










 if(targetVal!=zeroValue) { 










 StringBuilder result = new StringBuilder();










 result.append(getDebugName());










 result.append(": ");










 result.append("EDGE:  <");










 result.append(icfg.getMethodOf(target));










 result.append(",");










 result.append(sourceVal);










 result.append("> -> <");










 result.append(target);










 result.append(",");










 result.append(targetVal);










 result.append("> - ");










 result.append(fPrime);










 System.err.println(result.toString());










 }










 }










 if(targetVal!=zeroValue) {










 logger.debug("EDGE: <{},{}> -> <{},{}> - {}", icfg.getMethodOf(target), sourceVal, target, targetVal, fPrime );





















 }










 }










 }










 



......@@ -670,8 +661,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 else










 val.put(nHashN, nHashD,l);










 }










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 logger.debug("VALUE: {} {} {} {}", icfg.getMethodOf(nHashN), nHashN, nHashD, l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N,D> edge) {



......@@ -761,13 +751,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 public void printStats() {










 if(DEBUG) {










 if(logger.isDebugEnabled()) {










 if(ffCache!=null)










 ffCache.printStats();










 if(efCache!=null)










 efCache.printStats();










 } else {










 System.err.println("No statistics were collected, as DEBUG is disabled.");










 logger.info("No statistics were collected, as DEBUG is disabled.");










 }










 }










 



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
8302b8d3


authored
Sep 13, 2013
by


Marc-André Laverdière



Browse files



Commit
8302b8d3


authored
Sep 13, 2013
by


Marc-André Laverdière

8302b8d3authoredbyMarc-André Laverdière

Ported to SLF4J Logging






parent
aacc49a7
















parent
aacc49a7





parent












Changes
6
6


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










slf4j-api-1.7.5.jar



0 → 100644




View file @ 8302b8d3





File added













slf4j-simple-1.7.5.jar



0 → 100644




View file @ 8302b8d3





File added













src/heros/EdgeFunctionCache.java








View file @ 8302b8d3






......@@ -13,6 +13,8 @@ package heros;









import com.google.common.cache.CacheBuilder;










import com.google.common.cache.CacheLoader;










import com.google.common.cache.LoadingCache;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V> {










 



......@@ -25,8 +27,9 @@ public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V>









 protected final LoadingCache<ReturnKey, EdgeFunction<V>> returnCache;





















 protected final LoadingCache<NDNDKey, EdgeFunction<V>> callToReturnCache;










 










 @SuppressWarnings("unchecked")





















 Logger logger = LoggerFactory.getLogger(getClass());





















 public EdgeFunctionCache(final EdgeFunctions<N, D, M, V> delegate, @SuppressWarnings("rawtypes") CacheBuilder builder) {










 this.delegate = delegate;










 



......@@ -265,15 +268,12 @@ public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V>































 public void printStats() {










 System.err.println("Stats for edge-function cache:");










 System.err.print("Normal:         ");










 System.err.println(normalCache.stats());










 System.err.print("Call:           ");










 System.err.println(callCache.stats());










 System.err.print("Return:         ");










 System.err.println(returnCache.stats());










 System.err.print("Call-to-return: ");










 System.err.println(callToReturnCache.stats());










 logger.debug("Stats for edge-function cache:\n" +










 "Normal:         {}\n"+










 "Call:           {}\n"+










 "Return:         {}\n"+










 "Call-to-return: {}\n",










 normalCache.stats(), callCache.stats(),returnCache.stats(),callToReturnCache.stats());










 }





















}














src/heros/FlowFunctionCache.java








View file @ 8302b8d3






......@@ -13,6 +13,8 @@ package heros;









import com.google.common.cache.CacheBuilder;










import com.google.common.cache.CacheLoader;










import com.google.common.cache.LoadingCache;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















public class FlowFunctionCache<N, D, M> implements FlowFunctions<N, D, M> {










 



......@@ -26,6 +28,8 @@ public class FlowFunctionCache<N, D, M> implements FlowFunctions<N, D, M> {




















 protected final LoadingCache<NNKey, FlowFunction<D>> callToReturnCache;





















 private final Logger logger = LoggerFactory.getLogger(getClass());





















 @SuppressWarnings("unchecked")










 public FlowFunctionCache(final FlowFunctions<N, D, M> delegate, @SuppressWarnings("rawtypes") CacheBuilder builder) {










 this.delegate = delegate;



......@@ -218,15 +222,12 @@ public class FlowFunctionCache<N, D, M> implements FlowFunctions<N, D, M> {









 }










 










 public void printStats() {










 System.err.println("Stats for flow-function cache:");










 System.err.print("Normal:         ");










 System.err.println(normalCache.stats());










 System.err.print("Call:           ");










 System.err.println(callCache.stats());










 System.err.print("Return:         ");










 System.err.println(returnCache.stats());










 System.err.print("Call-to-return: ");










 System.err.println(callToReturnCache.stats());










 logger.debug("Stats for flow-function cache:\n" +










 "Normal:         {}\n"+










 "Call:           {}\n"+










 "Return:         {}\n"+










 "Call-to-return: {}\n",










 normalCache.stats(), callCache.stats(),returnCache.stats(),callToReturnCache.stats());










 }










 














......














src/heros/solver/BiDiIFDSSolver.java








View file @ 8302b8d3






......@@ -110,8 +110,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);










 if(DEBUG)










 System.err.println("++ PAUSE "+debugName+": "+edge);










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 } else {










 //the default case



......@@ -148,8 +147,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 if(DEBUG)










 System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge);










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 }










 pausedPathEdges.remove(sourceStmt);



......














src/heros/solver/IDESolver.java








View file @ 8302b8d3






......@@ -43,6 +43,8 @@ import com.google.common.collect.HashBasedTable;









import com.google.common.collect.Maps;










import com.google.common.collect.Table;










import com.google.common.collect.Table.Cell;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;
































/**



......@@ -50,7 +52,7 @@ import com.google.common.collect.Table.Cell;









 * Horwitz and Reps. To solve the problem, call {@link #solve()}. Results can then be










 * queried by using {@link #resultAt(Object, Object)} and {@link #resultsAt(Object)}.










 * 










 * Note that this solver and its data structures internally use mostly {@link LinkedHashSet}s










 * Note that this solver and its data structures internally use mostly {@link java.util.LinkedHashSet}s










 * instead of normal {@link HashSet}s to fix the iteration order as much as possible. This










 * is to produce, as much as possible, reproducible benchmarking results. We have found










 * that the iteration order can matter a lot in terms of speed.



......@@ -65,7 +67,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 public static CacheBuilder<Object, Object> DEFAULT_CACHE_BUILDER = CacheBuilder.newBuilder().concurrencyLevel(Runtime.getRuntime().availableProcessors()).initialCapacity(10000).softValues();










 










 public static final boolean DEBUG = !System.getProperty("HEROS_DEBUG", "false").equals("false");










 protected final Logger logger = LoggerFactory.getLogger(getClass());










 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")



......@@ -153,7 +155,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.










	 */










 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {










 if(DEBUG) {










 if(logger.isDebugEnabled()) {










 flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();










 edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();










 }



......@@ -225,7 +227,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 computeValues();










 durationFlowFunctionApplication = System.currentTimeMillis() - before;










 }










 if(DEBUG) 










 if(logger.isDebugEnabled())










 printStats();










 










 //ask executor to shut down;



......@@ -288,6 +290,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 private void processCall(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); // a call node; line 14...





















 logger.trace("Processing call to {}", n);





















 final D d2 = edge.factAtTarget();










 EdgeFunction<V> f = jumpFunction(edge);










 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);



......@@ -544,24 +549,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {










 if(targetVal!=zeroValue) { 










 StringBuilder result = new StringBuilder();










 result.append(getDebugName());










 result.append(": ");










 result.append("EDGE:  <");










 result.append(icfg.getMethodOf(target));










 result.append(",");










 result.append(sourceVal);










 result.append("> -> <");










 result.append(target);










 result.append(",");










 result.append(targetVal);










 result.append("> - ");










 result.append(fPrime);










 System.err.println(result.toString());










 }










 }










 if(targetVal!=zeroValue) {










 logger.debug("EDGE: <{},{}> -> <{},{}> - {}", icfg.getMethodOf(target), sourceVal, target, targetVal, fPrime );





















 }










 }










 }










 



......@@ -670,8 +661,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 else










 val.put(nHashN, nHashD,l);










 }










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 logger.debug("VALUE: {} {} {} {}", icfg.getMethodOf(nHashN), nHashN, nHashD, l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N,D> edge) {



......@@ -761,13 +751,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 public void printStats() {










 if(DEBUG) {










 if(logger.isDebugEnabled()) {










 if(ffCache!=null)










 ffCache.printStats();










 if(efCache!=null)










 efCache.printStats();










 } else {










 System.err.println("No statistics were collected, as DEBUG is disabled.");










 logger.info("No statistics were collected, as DEBUG is disabled.");










 }










 }










 



......














slf4j-api-1.7.5.jar



0 → 100644




View file @ 8302b8d3





File added











slf4j-api-1.7.5.jar



0 → 100644




View file @ 8302b8d3








slf4j-api-1.7.5.jar



0 → 100644






View file @ 8302b8d3
8302b8d3


File added




File added


File added









slf4j-simple-1.7.5.jar



0 → 100644




View file @ 8302b8d3





File added











slf4j-simple-1.7.5.jar



0 → 100644




View file @ 8302b8d3








slf4j-simple-1.7.5.jar



0 → 100644






View file @ 8302b8d3
8302b8d3


File added




File added


File added









src/heros/EdgeFunctionCache.java








View file @ 8302b8d3






......@@ -13,6 +13,8 @@ package heros;









import com.google.common.cache.CacheBuilder;










import com.google.common.cache.CacheLoader;










import com.google.common.cache.LoadingCache;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V> {










 



......@@ -25,8 +27,9 @@ public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V>









 protected final LoadingCache<ReturnKey, EdgeFunction<V>> returnCache;





















 protected final LoadingCache<NDNDKey, EdgeFunction<V>> callToReturnCache;










 










 @SuppressWarnings("unchecked")





















 Logger logger = LoggerFactory.getLogger(getClass());





















 public EdgeFunctionCache(final EdgeFunctions<N, D, M, V> delegate, @SuppressWarnings("rawtypes") CacheBuilder builder) {










 this.delegate = delegate;










 



......@@ -265,15 +268,12 @@ public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V>































 public void printStats() {










 System.err.println("Stats for edge-function cache:");










 System.err.print("Normal:         ");










 System.err.println(normalCache.stats());










 System.err.print("Call:           ");










 System.err.println(callCache.stats());










 System.err.print("Return:         ");










 System.err.println(returnCache.stats());










 System.err.print("Call-to-return: ");










 System.err.println(callToReturnCache.stats());










 logger.debug("Stats for edge-function cache:\n" +










 "Normal:         {}\n"+










 "Call:           {}\n"+










 "Return:         {}\n"+










 "Call-to-return: {}\n",










 normalCache.stats(), callCache.stats(),returnCache.stats(),callToReturnCache.stats());










 }





















}












src/heros/EdgeFunctionCache.java








View file @ 8302b8d3








src/heros/EdgeFunctionCache.java










View file @ 8302b8d3


8302b8d3



......@@ -13,6 +13,8 @@ package heros;









import com.google.common.cache.CacheBuilder;










import com.google.common.cache.CacheLoader;










import com.google.common.cache.LoadingCache;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V> {










 



......@@ -25,8 +27,9 @@ public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V>









 protected final LoadingCache<ReturnKey, EdgeFunction<V>> returnCache;





















 protected final LoadingCache<NDNDKey, EdgeFunction<V>> callToReturnCache;










 










 @SuppressWarnings("unchecked")





















 Logger logger = LoggerFactory.getLogger(getClass());





















 public EdgeFunctionCache(final EdgeFunctions<N, D, M, V> delegate, @SuppressWarnings("rawtypes") CacheBuilder builder) {










 this.delegate = delegate;










 



......@@ -265,15 +268,12 @@ public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V>































 public void printStats() {










 System.err.println("Stats for edge-function cache:");










 System.err.print("Normal:         ");










 System.err.println(normalCache.stats());










 System.err.print("Call:           ");










 System.err.println(callCache.stats());










 System.err.print("Return:         ");










 System.err.println(returnCache.stats());










 System.err.print("Call-to-return: ");










 System.err.println(callToReturnCache.stats());










 logger.debug("Stats for edge-function cache:\n" +










 "Normal:         {}\n"+










 "Call:           {}\n"+










 "Return:         {}\n"+










 "Call-to-return: {}\n",










 normalCache.stats(), callCache.stats(),returnCache.stats(),callToReturnCache.stats());










 }





















}






......@@ -13,6 +13,8 @@ package heros;









import com.google.common.cache.CacheBuilder;










import com.google.common.cache.CacheLoader;










import com.google.common.cache.LoadingCache;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V> {










 



......@@ -25,8 +27,9 @@ public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V>









 protected final LoadingCache<ReturnKey, EdgeFunction<V>> returnCache;





















 protected final LoadingCache<NDNDKey, EdgeFunction<V>> callToReturnCache;










 










 @SuppressWarnings("unchecked")





















 Logger logger = LoggerFactory.getLogger(getClass());





















 public EdgeFunctionCache(final EdgeFunctions<N, D, M, V> delegate, @SuppressWarnings("rawtypes") CacheBuilder builder) {










 this.delegate = delegate;










 



......@@ -265,15 +268,12 @@ public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V>































 public void printStats() {










 System.err.println("Stats for edge-function cache:");










 System.err.print("Normal:         ");










 System.err.println(normalCache.stats());










 System.err.print("Call:           ");










 System.err.println(callCache.stats());










 System.err.print("Return:         ");










 System.err.println(returnCache.stats());










 System.err.print("Call-to-return: ");










 System.err.println(callToReturnCache.stats());










 logger.debug("Stats for edge-function cache:\n" +










 "Normal:         {}\n"+










 "Call:           {}\n"+










 "Return:         {}\n"+










 "Call-to-return: {}\n",










 normalCache.stats(), callCache.stats(),returnCache.stats(),callToReturnCache.stats());










 }





















}


import com.google.common.cache.CacheBuilder;importcom.google.common.cache.CacheBuilder;import com.google.common.cache.CacheLoader;importcom.google.common.cache.CacheLoader;import com.google.common.cache.LoadingCache;importcom.google.common.cache.LoadingCache;import org.slf4j.Logger;importorg.slf4j.Logger;import org.slf4j.LoggerFactory;importorg.slf4j.LoggerFactory;public class EdgeFunctionCache<N, D, M, V> implements EdgeFunctions<N, D, M, V> {publicclassEdgeFunctionCache<N,D,M,V>implementsEdgeFunctions<N,D,M,V>{  protected final LoadingCache<ReturnKey, EdgeFunction<V>> returnCache;protectedfinalLoadingCache<ReturnKey,EdgeFunction<V>>returnCache; protected final LoadingCache<NDNDKey, EdgeFunction<V>> callToReturnCache;protectedfinalLoadingCache<NDNDKey,EdgeFunction<V>>callToReturnCache;  @SuppressWarnings("unchecked")@SuppressWarnings("unchecked") Logger logger = LoggerFactory.getLogger(getClass());Loggerlogger=LoggerFactory.getLogger(getClass()); public EdgeFunctionCache(final EdgeFunctions<N, D, M, V> delegate, @SuppressWarnings("rawtypes") CacheBuilder builder) {publicEdgeFunctionCache(finalEdgeFunctions<N,D,M,V>delegate,@SuppressWarnings("rawtypes")CacheBuilderbuilder){ this.delegate = delegate;this.delegate=delegate;  public void printStats() {publicvoidprintStats(){ System.err.println("Stats for edge-function cache:");System.err.println("Stats for edge-function cache:"); System.err.print("Normal:         ");System.err.print("Normal:         "); System.err.println(normalCache.stats());System.err.println(normalCache.stats()); System.err.print("Call:           ");System.err.print("Call:           "); System.err.println(callCache.stats());System.err.println(callCache.stats()); System.err.print("Return:         ");System.err.print("Return:         "); System.err.println(returnCache.stats());System.err.println(returnCache.stats()); System.err.print("Call-to-return: ");System.err.print("Call-to-return: "); System.err.println(callToReturnCache.stats());System.err.println(callToReturnCache.stats()); logger.debug("Stats for edge-function cache:\n" +logger.debug("Stats for edge-function cache:\n"+ "Normal:         {}\n"+"Normal:         {}\n"+ "Call:           {}\n"+"Call:           {}\n"+ "Return:         {}\n"+"Return:         {}\n"+ "Call-to-return: {}\n","Call-to-return: {}\n", normalCache.stats(), callCache.stats(),returnCache.stats(),callToReturnCache.stats());normalCache.stats(),callCache.stats(),returnCache.stats(),callToReturnCache.stats()); }}}}








src/heros/FlowFunctionCache.java








View file @ 8302b8d3






......@@ -13,6 +13,8 @@ package heros;









import com.google.common.cache.CacheBuilder;










import com.google.common.cache.CacheLoader;










import com.google.common.cache.LoadingCache;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















public class FlowFunctionCache<N, D, M> implements FlowFunctions<N, D, M> {










 



......@@ -26,6 +28,8 @@ public class FlowFunctionCache<N, D, M> implements FlowFunctions<N, D, M> {




















 protected final LoadingCache<NNKey, FlowFunction<D>> callToReturnCache;





















 private final Logger logger = LoggerFactory.getLogger(getClass());





















 @SuppressWarnings("unchecked")










 public FlowFunctionCache(final FlowFunctions<N, D, M> delegate, @SuppressWarnings("rawtypes") CacheBuilder builder) {










 this.delegate = delegate;



......@@ -218,15 +222,12 @@ public class FlowFunctionCache<N, D, M> implements FlowFunctions<N, D, M> {









 }










 










 public void printStats() {










 System.err.println("Stats for flow-function cache:");










 System.err.print("Normal:         ");










 System.err.println(normalCache.stats());










 System.err.print("Call:           ");










 System.err.println(callCache.stats());










 System.err.print("Return:         ");










 System.err.println(returnCache.stats());










 System.err.print("Call-to-return: ");










 System.err.println(callToReturnCache.stats());










 logger.debug("Stats for flow-function cache:\n" +










 "Normal:         {}\n"+










 "Call:           {}\n"+










 "Return:         {}\n"+










 "Call-to-return: {}\n",










 normalCache.stats(), callCache.stats(),returnCache.stats(),callToReturnCache.stats());










 }










 














......












src/heros/FlowFunctionCache.java








View file @ 8302b8d3








src/heros/FlowFunctionCache.java










View file @ 8302b8d3


8302b8d3



......@@ -13,6 +13,8 @@ package heros;









import com.google.common.cache.CacheBuilder;










import com.google.common.cache.CacheLoader;










import com.google.common.cache.LoadingCache;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















public class FlowFunctionCache<N, D, M> implements FlowFunctions<N, D, M> {










 



......@@ -26,6 +28,8 @@ public class FlowFunctionCache<N, D, M> implements FlowFunctions<N, D, M> {




















 protected final LoadingCache<NNKey, FlowFunction<D>> callToReturnCache;





















 private final Logger logger = LoggerFactory.getLogger(getClass());





















 @SuppressWarnings("unchecked")










 public FlowFunctionCache(final FlowFunctions<N, D, M> delegate, @SuppressWarnings("rawtypes") CacheBuilder builder) {










 this.delegate = delegate;



......@@ -218,15 +222,12 @@ public class FlowFunctionCache<N, D, M> implements FlowFunctions<N, D, M> {









 }










 










 public void printStats() {










 System.err.println("Stats for flow-function cache:");










 System.err.print("Normal:         ");










 System.err.println(normalCache.stats());










 System.err.print("Call:           ");










 System.err.println(callCache.stats());










 System.err.print("Return:         ");










 System.err.println(returnCache.stats());










 System.err.print("Call-to-return: ");










 System.err.println(callToReturnCache.stats());










 logger.debug("Stats for flow-function cache:\n" +










 "Normal:         {}\n"+










 "Call:           {}\n"+










 "Return:         {}\n"+










 "Call-to-return: {}\n",










 normalCache.stats(), callCache.stats(),returnCache.stats(),callToReturnCache.stats());










 }










 














......






......@@ -13,6 +13,8 @@ package heros;









import com.google.common.cache.CacheBuilder;










import com.google.common.cache.CacheLoader;










import com.google.common.cache.LoadingCache;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;





















public class FlowFunctionCache<N, D, M> implements FlowFunctions<N, D, M> {










 



......@@ -26,6 +28,8 @@ public class FlowFunctionCache<N, D, M> implements FlowFunctions<N, D, M> {




















 protected final LoadingCache<NNKey, FlowFunction<D>> callToReturnCache;





















 private final Logger logger = LoggerFactory.getLogger(getClass());





















 @SuppressWarnings("unchecked")










 public FlowFunctionCache(final FlowFunctions<N, D, M> delegate, @SuppressWarnings("rawtypes") CacheBuilder builder) {










 this.delegate = delegate;



......@@ -218,15 +222,12 @@ public class FlowFunctionCache<N, D, M> implements FlowFunctions<N, D, M> {









 }










 










 public void printStats() {










 System.err.println("Stats for flow-function cache:");










 System.err.print("Normal:         ");










 System.err.println(normalCache.stats());










 System.err.print("Call:           ");










 System.err.println(callCache.stats());










 System.err.print("Return:         ");










 System.err.println(returnCache.stats());










 System.err.print("Call-to-return: ");










 System.err.println(callToReturnCache.stats());










 logger.debug("Stats for flow-function cache:\n" +










 "Normal:         {}\n"+










 "Call:           {}\n"+










 "Return:         {}\n"+










 "Call-to-return: {}\n",










 normalCache.stats(), callCache.stats(),returnCache.stats(),callToReturnCache.stats());










 }










 














......


import com.google.common.cache.CacheBuilder;importcom.google.common.cache.CacheBuilder;import com.google.common.cache.CacheLoader;importcom.google.common.cache.CacheLoader;import com.google.common.cache.LoadingCache;importcom.google.common.cache.LoadingCache;import org.slf4j.Logger;importorg.slf4j.Logger;import org.slf4j.LoggerFactory;importorg.slf4j.LoggerFactory;public class FlowFunctionCache<N, D, M> implements FlowFunctions<N, D, M> {publicclassFlowFunctionCache<N,D,M>implementsFlowFunctions<N,D,M>{  protected final LoadingCache<NNKey, FlowFunction<D>> callToReturnCache;protectedfinalLoadingCache<NNKey,FlowFunction<D>>callToReturnCache; private final Logger logger = LoggerFactory.getLogger(getClass());privatefinalLoggerlogger=LoggerFactory.getLogger(getClass()); @SuppressWarnings("unchecked")@SuppressWarnings("unchecked") public FlowFunctionCache(final FlowFunctions<N, D, M> delegate, @SuppressWarnings("rawtypes") CacheBuilder builder) {publicFlowFunctionCache(finalFlowFunctions<N,D,M>delegate,@SuppressWarnings("rawtypes")CacheBuilderbuilder){ this.delegate = delegate;this.delegate=delegate; }}  public void printStats() {publicvoidprintStats(){ System.err.println("Stats for flow-function cache:");System.err.println("Stats for flow-function cache:"); System.err.print("Normal:         ");System.err.print("Normal:         "); System.err.println(normalCache.stats());System.err.println(normalCache.stats()); System.err.print("Call:           ");System.err.print("Call:           "); System.err.println(callCache.stats());System.err.println(callCache.stats()); System.err.print("Return:         ");System.err.print("Return:         "); System.err.println(returnCache.stats());System.err.println(returnCache.stats()); System.err.print("Call-to-return: ");System.err.print("Call-to-return: "); System.err.println(callToReturnCache.stats());System.err.println(callToReturnCache.stats()); logger.debug("Stats for flow-function cache:\n" +logger.debug("Stats for flow-function cache:\n"+ "Normal:         {}\n"+"Normal:         {}\n"+ "Call:           {}\n"+"Call:           {}\n"+ "Return:         {}\n"+"Return:         {}\n"+ "Call-to-return: {}\n","Call-to-return: {}\n", normalCache.stats(), callCache.stats(),returnCache.stats(),callToReturnCache.stats());normalCache.stats(),callCache.stats(),returnCache.stats(),callToReturnCache.stats()); }} 








src/heros/solver/BiDiIFDSSolver.java








View file @ 8302b8d3






......@@ -110,8 +110,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);










 if(DEBUG)










 System.err.println("++ PAUSE "+debugName+": "+edge);










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 } else {










 //the default case



......@@ -148,8 +147,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 if(DEBUG)










 System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge);










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 }










 pausedPathEdges.remove(sourceStmt);



......












src/heros/solver/BiDiIFDSSolver.java








View file @ 8302b8d3








src/heros/solver/BiDiIFDSSolver.java










View file @ 8302b8d3


8302b8d3



......@@ -110,8 +110,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);










 if(DEBUG)










 System.err.println("++ PAUSE "+debugName+": "+edge);










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 } else {










 //the default case



......@@ -148,8 +147,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 if(DEBUG)










 System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge);










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 }










 pausedPathEdges.remove(sourceStmt);



......






......@@ -110,8 +110,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);










 if(DEBUG)










 System.err.println("++ PAUSE "+debugName+": "+edge);










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 } else {










 //the default case



......@@ -148,8 +147,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 if(DEBUG)










 System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge);










 logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);










 super.processExit(pausedEdge);










 }










 pausedPathEdges.remove(sourceStmt);



......


 pausedPathEdges.put(sourceStmt,pausedEdges);pausedPathEdges.put(sourceStmt,pausedEdges); } } pausedEdges.add(edge);pausedEdges.add(edge); if(DEBUG)if(DEBUG) System.err.println("++ PAUSE "+debugName+": "+edge);System.err.println("++ PAUSE "+debugName+": "+edge); logger.debug(" ++ PAUSE {}: {}", debugName, edge);logger.debug(" ++ PAUSE {}: {}",debugName,edge); }} } else {}else{ //the default case//the default case Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>pausedEdges=pausedPathEdges.get(sourceStmt); if(pausedEdges!=null) {if(pausedEdges!=null){ for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {for(PathEdge<N,AbstractionWithSourceStmt<N,D>>pausedEdge:pausedEdges){ if(DEBUG)if(DEBUG) System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge);System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge); logger.debug("-- UNPAUSE {}: {}",debugName, pausedEdge);logger.debug("-- UNPAUSE {}: {}",debugName,pausedEdge); super.processExit(pausedEdge);super.processExit(pausedEdge); }} pausedPathEdges.remove(sourceStmt);pausedPathEdges.remove(sourceStmt);








src/heros/solver/IDESolver.java








View file @ 8302b8d3






......@@ -43,6 +43,8 @@ import com.google.common.collect.HashBasedTable;









import com.google.common.collect.Maps;










import com.google.common.collect.Table;










import com.google.common.collect.Table.Cell;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;
































/**



......@@ -50,7 +52,7 @@ import com.google.common.collect.Table.Cell;









 * Horwitz and Reps. To solve the problem, call {@link #solve()}. Results can then be










 * queried by using {@link #resultAt(Object, Object)} and {@link #resultsAt(Object)}.










 * 










 * Note that this solver and its data structures internally use mostly {@link LinkedHashSet}s










 * Note that this solver and its data structures internally use mostly {@link java.util.LinkedHashSet}s










 * instead of normal {@link HashSet}s to fix the iteration order as much as possible. This










 * is to produce, as much as possible, reproducible benchmarking results. We have found










 * that the iteration order can matter a lot in terms of speed.



......@@ -65,7 +67,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 public static CacheBuilder<Object, Object> DEFAULT_CACHE_BUILDER = CacheBuilder.newBuilder().concurrencyLevel(Runtime.getRuntime().availableProcessors()).initialCapacity(10000).softValues();










 










 public static final boolean DEBUG = !System.getProperty("HEROS_DEBUG", "false").equals("false");










 protected final Logger logger = LoggerFactory.getLogger(getClass());










 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")



......@@ -153,7 +155,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.










	 */










 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {










 if(DEBUG) {










 if(logger.isDebugEnabled()) {










 flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();










 edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();










 }



......@@ -225,7 +227,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 computeValues();










 durationFlowFunctionApplication = System.currentTimeMillis() - before;










 }










 if(DEBUG) 










 if(logger.isDebugEnabled())










 printStats();










 










 //ask executor to shut down;



......@@ -288,6 +290,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 private void processCall(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); // a call node; line 14...





















 logger.trace("Processing call to {}", n);





















 final D d2 = edge.factAtTarget();










 EdgeFunction<V> f = jumpFunction(edge);










 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);



......@@ -544,24 +549,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {










 if(targetVal!=zeroValue) { 










 StringBuilder result = new StringBuilder();










 result.append(getDebugName());










 result.append(": ");










 result.append("EDGE:  <");










 result.append(icfg.getMethodOf(target));










 result.append(",");










 result.append(sourceVal);










 result.append("> -> <");










 result.append(target);










 result.append(",");










 result.append(targetVal);










 result.append("> - ");










 result.append(fPrime);










 System.err.println(result.toString());










 }










 }










 if(targetVal!=zeroValue) {










 logger.debug("EDGE: <{},{}> -> <{},{}> - {}", icfg.getMethodOf(target), sourceVal, target, targetVal, fPrime );





















 }










 }










 }










 



......@@ -670,8 +661,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 else










 val.put(nHashN, nHashD,l);










 }










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 logger.debug("VALUE: {} {} {} {}", icfg.getMethodOf(nHashN), nHashN, nHashD, l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N,D> edge) {



......@@ -761,13 +751,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 public void printStats() {










 if(DEBUG) {










 if(logger.isDebugEnabled()) {










 if(ffCache!=null)










 ffCache.printStats();










 if(efCache!=null)










 efCache.printStats();










 } else {










 System.err.println("No statistics were collected, as DEBUG is disabled.");










 logger.info("No statistics were collected, as DEBUG is disabled.");










 }










 }










 



......












src/heros/solver/IDESolver.java








View file @ 8302b8d3








src/heros/solver/IDESolver.java










View file @ 8302b8d3


8302b8d3



......@@ -43,6 +43,8 @@ import com.google.common.collect.HashBasedTable;









import com.google.common.collect.Maps;










import com.google.common.collect.Table;










import com.google.common.collect.Table.Cell;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;
































/**



......@@ -50,7 +52,7 @@ import com.google.common.collect.Table.Cell;









 * Horwitz and Reps. To solve the problem, call {@link #solve()}. Results can then be










 * queried by using {@link #resultAt(Object, Object)} and {@link #resultsAt(Object)}.










 * 










 * Note that this solver and its data structures internally use mostly {@link LinkedHashSet}s










 * Note that this solver and its data structures internally use mostly {@link java.util.LinkedHashSet}s










 * instead of normal {@link HashSet}s to fix the iteration order as much as possible. This










 * is to produce, as much as possible, reproducible benchmarking results. We have found










 * that the iteration order can matter a lot in terms of speed.



......@@ -65,7 +67,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 public static CacheBuilder<Object, Object> DEFAULT_CACHE_BUILDER = CacheBuilder.newBuilder().concurrencyLevel(Runtime.getRuntime().availableProcessors()).initialCapacity(10000).softValues();










 










 public static final boolean DEBUG = !System.getProperty("HEROS_DEBUG", "false").equals("false");










 protected final Logger logger = LoggerFactory.getLogger(getClass());










 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")



......@@ -153,7 +155,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.










	 */










 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {










 if(DEBUG) {










 if(logger.isDebugEnabled()) {










 flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();










 edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();










 }



......@@ -225,7 +227,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 computeValues();










 durationFlowFunctionApplication = System.currentTimeMillis() - before;










 }










 if(DEBUG) 










 if(logger.isDebugEnabled())










 printStats();










 










 //ask executor to shut down;



......@@ -288,6 +290,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 private void processCall(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); // a call node; line 14...





















 logger.trace("Processing call to {}", n);





















 final D d2 = edge.factAtTarget();










 EdgeFunction<V> f = jumpFunction(edge);










 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);



......@@ -544,24 +549,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {










 if(targetVal!=zeroValue) { 










 StringBuilder result = new StringBuilder();










 result.append(getDebugName());










 result.append(": ");










 result.append("EDGE:  <");










 result.append(icfg.getMethodOf(target));










 result.append(",");










 result.append(sourceVal);










 result.append("> -> <");










 result.append(target);










 result.append(",");










 result.append(targetVal);










 result.append("> - ");










 result.append(fPrime);










 System.err.println(result.toString());










 }










 }










 if(targetVal!=zeroValue) {










 logger.debug("EDGE: <{},{}> -> <{},{}> - {}", icfg.getMethodOf(target), sourceVal, target, targetVal, fPrime );





















 }










 }










 }










 



......@@ -670,8 +661,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 else










 val.put(nHashN, nHashD,l);










 }










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 logger.debug("VALUE: {} {} {} {}", icfg.getMethodOf(nHashN), nHashN, nHashD, l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N,D> edge) {



......@@ -761,13 +751,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 public void printStats() {










 if(DEBUG) {










 if(logger.isDebugEnabled()) {










 if(ffCache!=null)










 ffCache.printStats();










 if(efCache!=null)










 efCache.printStats();










 } else {










 System.err.println("No statistics were collected, as DEBUG is disabled.");










 logger.info("No statistics were collected, as DEBUG is disabled.");










 }










 }










 



......






......@@ -43,6 +43,8 @@ import com.google.common.collect.HashBasedTable;









import com.google.common.collect.Maps;










import com.google.common.collect.Table;










import com.google.common.collect.Table.Cell;










import org.slf4j.Logger;










import org.slf4j.LoggerFactory;
































/**



......@@ -50,7 +52,7 @@ import com.google.common.collect.Table.Cell;









 * Horwitz and Reps. To solve the problem, call {@link #solve()}. Results can then be










 * queried by using {@link #resultAt(Object, Object)} and {@link #resultsAt(Object)}.










 * 










 * Note that this solver and its data structures internally use mostly {@link LinkedHashSet}s










 * Note that this solver and its data structures internally use mostly {@link java.util.LinkedHashSet}s










 * instead of normal {@link HashSet}s to fix the iteration order as much as possible. This










 * is to produce, as much as possible, reproducible benchmarking results. We have found










 * that the iteration order can matter a lot in terms of speed.



......@@ -65,7 +67,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 public static CacheBuilder<Object, Object> DEFAULT_CACHE_BUILDER = CacheBuilder.newBuilder().concurrencyLevel(Runtime.getRuntime().availableProcessors()).initialCapacity(10000).softValues();










 










 public static final boolean DEBUG = !System.getProperty("HEROS_DEBUG", "false").equals("false");










 protected final Logger logger = LoggerFactory.getLogger(getClass());










 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")



......@@ -153,7 +155,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.










	 */










 public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {










 if(DEBUG) {










 if(logger.isDebugEnabled()) {










 flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();










 edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();










 }



......@@ -225,7 +227,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 computeValues();










 durationFlowFunctionApplication = System.currentTimeMillis() - before;










 }










 if(DEBUG) 










 if(logger.isDebugEnabled())










 printStats();










 










 //ask executor to shut down;



......@@ -288,6 +290,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 private void processCall(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); // a call node; line 14...





















 logger.trace("Processing call to {}", n);





















 final D d2 = edge.factAtTarget();










 EdgeFunction<V> f = jumpFunction(edge);










 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);



......@@ -544,24 +549,10 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {










 if(targetVal!=zeroValue) { 










 StringBuilder result = new StringBuilder();










 result.append(getDebugName());










 result.append(": ");










 result.append("EDGE:  <");










 result.append(icfg.getMethodOf(target));










 result.append(",");










 result.append(sourceVal);










 result.append("> -> <");










 result.append(target);










 result.append(",");










 result.append(targetVal);










 result.append("> - ");










 result.append(fPrime);










 System.err.println(result.toString());










 }










 }










 if(targetVal!=zeroValue) {










 logger.debug("EDGE: <{},{}> -> <{},{}> - {}", icfg.getMethodOf(target), sourceVal, target, targetVal, fPrime );





















 }










 }










 }










 



......@@ -670,8 +661,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 else










 val.put(nHashN, nHashD,l);










 }










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 logger.debug("VALUE: {} {} {} {}", icfg.getMethodOf(nHashN), nHashN, nHashD, l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N,D> edge) {



......@@ -761,13 +751,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 public void printStats() {










 if(DEBUG) {










 if(logger.isDebugEnabled()) {










 if(ffCache!=null)










 ffCache.printStats();










 if(efCache!=null)










 efCache.printStats();










 } else {










 System.err.println("No statistics were collected, as DEBUG is disabled.");










 logger.info("No statistics were collected, as DEBUG is disabled.");










 }










 }










 



......


import com.google.common.collect.Maps;importcom.google.common.collect.Maps;import com.google.common.collect.Table;importcom.google.common.collect.Table;import com.google.common.collect.Table.Cell;importcom.google.common.collect.Table.Cell;import org.slf4j.Logger;importorg.slf4j.Logger;import org.slf4j.LoggerFactory;importorg.slf4j.LoggerFactory;/**/** * Horwitz and Reps. To solve the problem, call {@link #solve()}. Results can then be * Horwitz and Reps. To solve the problem, call {@link #solve()}. Results can then be * queried by using {@link #resultAt(Object, Object)} and {@link #resultsAt(Object)}. * queried by using {@link #resultAt(Object, Object)} and {@link #resultsAt(Object)}. *  *  * Note that this solver and its data structures internally use mostly {@link LinkedHashSet}s * Note that this solver and its data structures internally use mostly {@link LinkedHashSet}s * Note that this solver and its data structures internally use mostly {@link java.util.LinkedHashSet}s * Note that this solver and its data structures internally use mostly {@link java.util.LinkedHashSet}sjava.util. * instead of normal {@link HashSet}s to fix the iteration order as much as possible. This * instead of normal {@link HashSet}s to fix the iteration order as much as possible. This * is to produce, as much as possible, reproducible benchmarking results. We have found * is to produce, as much as possible, reproducible benchmarking results. We have found * that the iteration order can matter a lot in terms of speed. * that the iteration order can matter a lot in terms of speed.  public static CacheBuilder<Object, Object> DEFAULT_CACHE_BUILDER = CacheBuilder.newBuilder().concurrencyLevel(Runtime.getRuntime().availableProcessors()).initialCapacity(10000).softValues();publicstaticCacheBuilder<Object,Object>DEFAULT_CACHE_BUILDER=CacheBuilder.newBuilder().concurrencyLevel(Runtime.getRuntime().availableProcessors()).initialCapacity(10000).softValues();  public static final boolean DEBUG = !System.getProperty("HEROS_DEBUG", "false").equals("false"); publicpublic staticstatic finalfinal booleanboolean DEBUGDEBUG == !!SystemSystem..getPropertygetProperty(("HEROS_DEBUG""HEROS_DEBUG",, "false""false").).equalsequals(("false""false"); protected final Logger logger = LoggerFactory.getLogger(getClass()); protectedprotected finalfinal LoggerLogger loggerlogger == LoggerFactoryLoggerFactory..getLoggergetLogger((getClassgetClass());()  //executor for dispatching individual compute jobs (may be multi-threaded)//executor for dispatching individual compute jobs (may be multi-threaded) @DontSynchronize("only used by single thread")@DontSynchronize("only used by single thread")	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.	 * @param edgeFunctionCacheBuilder A valid {@link CacheBuilder} or <code>null</code> if no caching is to be used for edge functions.	 */	 */ public IDESolver(IDETabulationProblem<N,D,M,V,I> tabulationProblem, @SuppressWarnings("rawtypes") CacheBuilder flowFunctionCacheBuilder, @SuppressWarnings("rawtypes") CacheBuilder edgeFunctionCacheBuilder) {publicIDESolver(IDETabulationProblem<N,D,M,V,I>tabulationProblem,@SuppressWarnings("rawtypes")CacheBuilderflowFunctionCacheBuilder,@SuppressWarnings("rawtypes")CacheBuilderedgeFunctionCacheBuilder){ if(DEBUG) {if(DEBUGDEBUG){ if(logger.isDebugEnabled()) {if(loggerlogger..isDebugEnabledisDebugEnabled())(){ flowFunctionCacheBuilder = flowFunctionCacheBuilder.recordStats();flowFunctionCacheBuilder=flowFunctionCacheBuilder.recordStats(); edgeFunctionCacheBuilder = edgeFunctionCacheBuilder.recordStats();edgeFunctionCacheBuilder=edgeFunctionCacheBuilder.recordStats(); }} computeValues();computeValues(); durationFlowFunctionApplication = System.currentTimeMillis() - before;durationFlowFunctionApplication=System.currentTimeMillis()-before; }} if(DEBUG) if(DEBUGDEBUG))  if(logger.isDebugEnabled())if(loggerlogger..isDebugEnabledisDebugEnabled())()) printStats();printStats();  //ask executor to shut down;//ask executor to shut down; private void processCall(PathEdge<N,D> edge) {privatevoidprocessCall(PathEdge<N,D>edge){ final D d1 = edge.factAtSource();finalDd1=edge.factAtSource(); final N n = edge.getTarget(); // a call node; line 14...finalNn=edge.getTarget();// a call node; line 14... logger.trace("Processing call to {}", n);logger.trace("Processing call to {}",n); final D d2 = edge.factAtTarget();finalDd2=edge.factAtTarget(); EdgeFunction<V> f = jumpFunction(edge);EdgeFunction<V>f=jumpFunction(edge); List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);List<N>returnSiteNs=icfg.getReturnSitesOfCallAt(n); PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);PathEdge<N,D>edge=newPathEdge<N,D>(sourceVal,target,targetVal); scheduleEdgeProcessing(edge);scheduleEdgeProcessing(edge); if(DEBUG) {if(DEBUG){ if(targetVal!=zeroValue) { if(targetVal!=zeroValue){ StringBuilder result = new StringBuilder();StringBuilderresult=newStringBuilder(); result.append(getDebugName());result.append(getDebugName()); result.append(": ");result.append(": "); result.append("EDGE:  <");result.append("EDGE:  <"); result.append(icfg.getMethodOf(target));result.append(icfg.getMethodOf(target)); result.append(",");result.append(","); result.append(sourceVal);result.append(sourceVal); result.append("> -> <");result.append("> -> <"); result.append(target);result.append(target); result.append(",");result.append(","); result.append(targetVal);result.append(targetVal); result.append("> - ");result.append("> - "); result.append(fPrime);result.append(fPrime); System.err.println(result.toString());System.err.println(result.toString()); }} }} if(targetVal!=zeroValue) {if(targetVal!=zeroValue){ logger.debug("EDGE: <{},{}> -> <{},{}> - {}", icfg.getMethodOf(target), sourceVal, target, targetVal, fPrime );logger.debug("EDGE: <{},{}> -> <{},{}> - {}",icfg.getMethodOf(target),sourceVal,target,targetVal,fPrime); }} }} }}  elseelse val.put(nHashN, nHashD,l);val.put(nHashN,nHashD,l); }} if(DEBUG)if(DEBUG) System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+" "+l); logger.debug("VALUE: {} {} {} {}", icfg.getMethodOf(nHashN), nHashN, nHashD, l);logger.debug("VALUE: {} {} {} {}",icfg.getMethodOf(nHashN),nHashN,nHashD,l); }} private EdgeFunction<V> jumpFunction(PathEdge<N,D> edge) {privateEdgeFunction<V>jumpFunction(PathEdge<N,D>edge){ }} public void printStats() {publicvoidprintStats(){ if(DEBUG) {if(DEBUGDEBUG){ if(logger.isDebugEnabled()) {if(loggerlogger..isDebugEnabledisDebugEnabled())(){ if(ffCache!=null)if(ffCache!=null) ffCache.printStats();ffCache.printStats(); if(efCache!=null)if(efCache!=null) efCache.printStats();efCache.printStats(); } else {}else{ System.err.println("No statistics were collected, as DEBUG is disabled.");SystemSystem..errerr..printlnprintln("No statistics were collected, as DEBUG is disabled."); logger.info("No statistics were collected, as DEBUG is disabled.");loggerlogger..infoinfo("No statistics were collected, as DEBUG is disabled."); }} }} 









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






