



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros

c3a2821af68a4ccd51266451b9a5729ae42569f8

















c3a2821af68a4ccd51266451b9a5729ae42569f8


Switch branch/tag










heros


src


heros


alias


ControlFlowJoinResolver.java



Find file
Normal viewHistoryPermalink






ControlFlowJoinResolver.java



3.02 KB









Newer










Older









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import heros.alias.AccessPath.Delta;










refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






15




public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






16




17




18




19




20




21




22





	private Stmt joinStmt;
	private AccessPath<Field> resolvedAccPath;
	private boolean propagated = false;

	public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {
		this(analyzer, joinStmt, new AccessPath<Field>(), null);









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






23




		propagated=false;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






24




25




26




	}
	
	private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






27




		super(analyzer, parent);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






28




29




		this.joinStmt = joinStmt;
		this.resolvedAccPath = resolvedAccPath;









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






30




		propagated=true;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






31




32




	}
	









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






33




34




35




	@Override
	protected AccessPath<Field> getAccessPathOf(WrappedFact<Field, Fact, Stmt, Method> inc) {
		return inc.getAccessPath();









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






36




	}









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






37




38




39




40




41




42




43




44





	protected void processIncomingGuaranteedPrefix(heros.alias.WrappedFact<Field,Fact,Stmt,Method> fact) {
		if(!propagated) {
			propagated=true;
			analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(
					fact.getFact(), new AccessPath<Field>(), this)));
		}
	};









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






45




46




	
	@Override









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




	protected void processIncomingPotentialPrefix(WrappedFact<Field, Fact, Stmt, Method> fact) {
		lock();
		Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);
		fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {
			@Override
			public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 
					Resolver<Field, Fact, Stmt, Method> resolver) {
				ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);
			}

			@Override
			public void canBeResolvedEmpty() {
				ControlFlowJoinResolver.this.canBeResolvedEmpty();
			}
		});
		unlock();









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






63




64




	}
	









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






65




66




67




	@Override
	protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {
		return new ControlFlowJoinResolver<>(analyzer, joinStmt, newAccPath, this);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






68




69




70




71




72




73




74




75




76




77




78




79




	}

	@Override
	protected void log(String message) {
		analyzer.log("Join Stmt "+toString()+": "+message);
	}

	@Override
	public String toString() {
		return "<"+resolvedAccPath+":"+joinStmt+">";
	}










refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






80




	@Override









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






81




82




83




84




85




86




87




88




	public AccessPath<Field> getResolvedAccessPath() {
		return resolvedAccPath;
	}

	public Stmt getJoinStmt() {
		return joinStmt;
	}
}












H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros

c3a2821af68a4ccd51266451b9a5729ae42569f8

















c3a2821af68a4ccd51266451b9a5729ae42569f8


Switch branch/tag










heros


src


heros


alias


ControlFlowJoinResolver.java



Find file
Normal viewHistoryPermalink






ControlFlowJoinResolver.java



3.02 KB









Newer










Older









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import heros.alias.AccessPath.Delta;










refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






15




public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






16




17




18




19




20




21




22





	private Stmt joinStmt;
	private AccessPath<Field> resolvedAccPath;
	private boolean propagated = false;

	public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {
		this(analyzer, joinStmt, new AccessPath<Field>(), null);









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






23




		propagated=false;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






24




25




26




	}
	
	private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






27




		super(analyzer, parent);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






28




29




		this.joinStmt = joinStmt;
		this.resolvedAccPath = resolvedAccPath;









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






30




		propagated=true;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






31




32




	}
	









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






33




34




35




	@Override
	protected AccessPath<Field> getAccessPathOf(WrappedFact<Field, Fact, Stmt, Method> inc) {
		return inc.getAccessPath();









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






36




	}









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






37




38




39




40




41




42




43




44





	protected void processIncomingGuaranteedPrefix(heros.alias.WrappedFact<Field,Fact,Stmt,Method> fact) {
		if(!propagated) {
			propagated=true;
			analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(
					fact.getFact(), new AccessPath<Field>(), this)));
		}
	};









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






45




46




	
	@Override









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




	protected void processIncomingPotentialPrefix(WrappedFact<Field, Fact, Stmt, Method> fact) {
		lock();
		Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);
		fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {
			@Override
			public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 
					Resolver<Field, Fact, Stmt, Method> resolver) {
				ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);
			}

			@Override
			public void canBeResolvedEmpty() {
				ControlFlowJoinResolver.this.canBeResolvedEmpty();
			}
		});
		unlock();









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






63




64




	}
	









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






65




66




67




	@Override
	protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {
		return new ControlFlowJoinResolver<>(analyzer, joinStmt, newAccPath, this);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






68




69




70




71




72




73




74




75




76




77




78




79




	}

	@Override
	protected void log(String message) {
		analyzer.log("Join Stmt "+toString()+": "+message);
	}

	@Override
	public String toString() {
		return "<"+resolvedAccPath+":"+joinStmt+">";
	}










refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






80




	@Override









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






81




82




83




84




85




86




87




88




	public AccessPath<Field> getResolvedAccessPath() {
		return resolvedAccPath;
	}

	public Stmt getJoinStmt() {
		return joinStmt;
	}
}











Open sidebar



Joshua Garcia heros

c3a2821af68a4ccd51266451b9a5729ae42569f8







Open sidebar



Joshua Garcia heros

c3a2821af68a4ccd51266451b9a5729ae42569f8




Open sidebar

Joshua Garcia heros

c3a2821af68a4ccd51266451b9a5729ae42569f8


Joshua Garciaherosheros
c3a2821af68a4ccd51266451b9a5729ae42569f8










c3a2821af68a4ccd51266451b9a5729ae42569f8


Switch branch/tag










heros


src


heros


alias


ControlFlowJoinResolver.java



Find file
Normal viewHistoryPermalink






ControlFlowJoinResolver.java



3.02 KB









Newer










Older









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import heros.alias.AccessPath.Delta;










refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






15




public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






16




17




18




19




20




21




22





	private Stmt joinStmt;
	private AccessPath<Field> resolvedAccPath;
	private boolean propagated = false;

	public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {
		this(analyzer, joinStmt, new AccessPath<Field>(), null);









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






23




		propagated=false;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






24




25




26




	}
	
	private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






27




		super(analyzer, parent);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






28




29




		this.joinStmt = joinStmt;
		this.resolvedAccPath = resolvedAccPath;









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






30




		propagated=true;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






31




32




	}
	









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






33




34




35




	@Override
	protected AccessPath<Field> getAccessPathOf(WrappedFact<Field, Fact, Stmt, Method> inc) {
		return inc.getAccessPath();









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






36




	}









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






37




38




39




40




41




42




43




44





	protected void processIncomingGuaranteedPrefix(heros.alias.WrappedFact<Field,Fact,Stmt,Method> fact) {
		if(!propagated) {
			propagated=true;
			analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(
					fact.getFact(), new AccessPath<Field>(), this)));
		}
	};









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






45




46




	
	@Override









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




	protected void processIncomingPotentialPrefix(WrappedFact<Field, Fact, Stmt, Method> fact) {
		lock();
		Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);
		fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {
			@Override
			public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 
					Resolver<Field, Fact, Stmt, Method> resolver) {
				ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);
			}

			@Override
			public void canBeResolvedEmpty() {
				ControlFlowJoinResolver.this.canBeResolvedEmpty();
			}
		});
		unlock();









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






63




64




	}
	









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






65




66




67




	@Override
	protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {
		return new ControlFlowJoinResolver<>(analyzer, joinStmt, newAccPath, this);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






68




69




70




71




72




73




74




75




76




77




78




79




	}

	@Override
	protected void log(String message) {
		analyzer.log("Join Stmt "+toString()+": "+message);
	}

	@Override
	public String toString() {
		return "<"+resolvedAccPath+":"+joinStmt+">";
	}










refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






80




	@Override









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






81




82




83




84




85




86




87




88




	public AccessPath<Field> getResolvedAccessPath() {
		return resolvedAccPath;
	}

	public Stmt getJoinStmt() {
		return joinStmt;
	}
}














c3a2821af68a4ccd51266451b9a5729ae42569f8


Switch branch/tag










heros


src


heros


alias


ControlFlowJoinResolver.java



Find file
Normal viewHistoryPermalink






ControlFlowJoinResolver.java



3.02 KB









Newer










Older









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import heros.alias.AccessPath.Delta;










refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






15




public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






16




17




18




19




20




21




22





	private Stmt joinStmt;
	private AccessPath<Field> resolvedAccPath;
	private boolean propagated = false;

	public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {
		this(analyzer, joinStmt, new AccessPath<Field>(), null);









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






23




		propagated=false;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






24




25




26




	}
	
	private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






27




		super(analyzer, parent);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






28




29




		this.joinStmt = joinStmt;
		this.resolvedAccPath = resolvedAccPath;









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






30




		propagated=true;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






31




32




	}
	









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






33




34




35




	@Override
	protected AccessPath<Field> getAccessPathOf(WrappedFact<Field, Fact, Stmt, Method> inc) {
		return inc.getAccessPath();









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






36




	}









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






37




38




39




40




41




42




43




44





	protected void processIncomingGuaranteedPrefix(heros.alias.WrappedFact<Field,Fact,Stmt,Method> fact) {
		if(!propagated) {
			propagated=true;
			analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(
					fact.getFact(), new AccessPath<Field>(), this)));
		}
	};









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






45




46




	
	@Override









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




	protected void processIncomingPotentialPrefix(WrappedFact<Field, Fact, Stmt, Method> fact) {
		lock();
		Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);
		fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {
			@Override
			public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 
					Resolver<Field, Fact, Stmt, Method> resolver) {
				ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);
			}

			@Override
			public void canBeResolvedEmpty() {
				ControlFlowJoinResolver.this.canBeResolvedEmpty();
			}
		});
		unlock();









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






63




64




	}
	









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






65




66




67




	@Override
	protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {
		return new ControlFlowJoinResolver<>(analyzer, joinStmt, newAccPath, this);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






68




69




70




71




72




73




74




75




76




77




78




79




	}

	@Override
	protected void log(String message) {
		analyzer.log("Join Stmt "+toString()+": "+message);
	}

	@Override
	public String toString() {
		return "<"+resolvedAccPath+":"+joinStmt+">";
	}










refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






80




	@Override









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






81




82




83




84




85




86




87




88




	public AccessPath<Field> getResolvedAccessPath() {
		return resolvedAccPath;
	}

	public Stmt getJoinStmt() {
		return joinStmt;
	}
}










c3a2821af68a4ccd51266451b9a5729ae42569f8


Switch branch/tag










heros


src


heros


alias


ControlFlowJoinResolver.java



Find file
Normal viewHistoryPermalink




c3a2821af68a4ccd51266451b9a5729ae42569f8


Switch branch/tag










heros


src


heros


alias


ControlFlowJoinResolver.java





c3a2821af68a4ccd51266451b9a5729ae42569f8


Switch branch/tag








c3a2821af68a4ccd51266451b9a5729ae42569f8


Switch branch/tag





c3a2821af68a4ccd51266451b9a5729ae42569f8

Switch branch/tag





Switch branch/tag



Switch branch/tagSwitch branch/tag
heros

src

heros

alias

ControlFlowJoinResolver.java
Find file
Normal viewHistoryPermalink




ControlFlowJoinResolver.java



3.02 KB









Newer










Older









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import heros.alias.AccessPath.Delta;










refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






15




public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






16




17




18




19




20




21




22





	private Stmt joinStmt;
	private AccessPath<Field> resolvedAccPath;
	private boolean propagated = false;

	public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {
		this(analyzer, joinStmt, new AccessPath<Field>(), null);









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






23




		propagated=false;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






24




25




26




	}
	
	private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






27




		super(analyzer, parent);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






28




29




		this.joinStmt = joinStmt;
		this.resolvedAccPath = resolvedAccPath;









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






30




		propagated=true;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






31




32




	}
	









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






33




34




35




	@Override
	protected AccessPath<Field> getAccessPathOf(WrappedFact<Field, Fact, Stmt, Method> inc) {
		return inc.getAccessPath();









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






36




	}









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






37




38




39




40




41




42




43




44





	protected void processIncomingGuaranteedPrefix(heros.alias.WrappedFact<Field,Fact,Stmt,Method> fact) {
		if(!propagated) {
			propagated=true;
			analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(
					fact.getFact(), new AccessPath<Field>(), this)));
		}
	};









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






45




46




	
	@Override









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




	protected void processIncomingPotentialPrefix(WrappedFact<Field, Fact, Stmt, Method> fact) {
		lock();
		Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);
		fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {
			@Override
			public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 
					Resolver<Field, Fact, Stmt, Method> resolver) {
				ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);
			}

			@Override
			public void canBeResolvedEmpty() {
				ControlFlowJoinResolver.this.canBeResolvedEmpty();
			}
		});
		unlock();









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






63




64




	}
	









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






65




66




67




	@Override
	protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {
		return new ControlFlowJoinResolver<>(analyzer, joinStmt, newAccPath, this);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






68




69




70




71




72




73




74




75




76




77




78




79




	}

	@Override
	protected void log(String message) {
		analyzer.log("Join Stmt "+toString()+": "+message);
	}

	@Override
	public String toString() {
		return "<"+resolvedAccPath+":"+joinStmt+">";
	}










refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






80




	@Override









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






81




82




83




84




85




86




87




88




	public AccessPath<Field> getResolvedAccessPath() {
		return resolvedAccPath;
	}

	public Stmt getJoinStmt() {
		return joinStmt;
	}
}








ControlFlowJoinResolver.java



3.02 KB










ControlFlowJoinResolver.java



3.02 KB









Newer










Older
NewerOlder







rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import heros.alias.AccessPath.Delta;










refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






15




public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






16




17




18




19




20




21




22





	private Stmt joinStmt;
	private AccessPath<Field> resolvedAccPath;
	private boolean propagated = false;

	public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {
		this(analyzer, joinStmt, new AccessPath<Field>(), null);









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






23




		propagated=false;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






24




25




26




	}
	
	private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






27




		super(analyzer, parent);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






28




29




		this.joinStmt = joinStmt;
		this.resolvedAccPath = resolvedAccPath;









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






30




		propagated=true;









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






31




32




	}
	









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






33




34




35




	@Override
	protected AccessPath<Field> getAccessPathOf(WrappedFact<Field, Fact, Stmt, Method> inc) {
		return inc.getAccessPath();









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






36




	}









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






37




38




39




40




41




42




43




44





	protected void processIncomingGuaranteedPrefix(heros.alias.WrappedFact<Field,Fact,Stmt,Method> fact) {
		if(!propagated) {
			propagated=true;
			analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(
					fact.getFact(), new AccessPath<Field>(), this)));
		}
	};









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






45




46




	
	@Override









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






47




48




49




50




51




52




53




54




55




56




57




58




59




60




61




62




	protected void processIncomingPotentialPrefix(WrappedFact<Field, Fact, Stmt, Method> fact) {
		lock();
		Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);
		fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {
			@Override
			public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 
					Resolver<Field, Fact, Stmt, Method> resolver) {
				ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);
			}

			@Override
			public void canBeResolvedEmpty() {
				ControlFlowJoinResolver.this.canBeResolvedEmpty();
			}
		});
		unlock();









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






63




64




	}
	









refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






65




66




67




	@Override
	protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {
		return new ControlFlowJoinResolver<>(analyzer, joinStmt, newAccPath, this);









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






68




69




70




71




72




73




74




75




76




77




78




79




	}

	@Override
	protected void log(String message) {
		analyzer.log("Join Stmt "+toString()+": "+message);
	}

	@Override
	public String toString() {
		return "<"+resolvedAccPath+":"+joinStmt+">";
	}










refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015






80




	@Override









rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015






81




82




83




84




85




86




87




88




	public AccessPath<Field> getResolvedAccessPath() {
		return resolvedAccPath;
	}

	public Stmt getJoinStmt() {
		return joinStmt;
	}
}







rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

1

2

3

4

5

6

7

8

9

10

11

12

13

14
/*******************************************************************************/******************************************************************************* * Copyright (c) 2015 Johannes Lerch. * Copyright (c) 2015 Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;import heros.alias.AccessPath.Delta;importheros.alias.AccessPath.Delta;



refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015



refactoring


 

 

refactoring

 

Johannes Lerch
committed
Apr 01, 2015

15
public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {publicclassControlFlowJoinResolver<Field,Fact,Stmt,Method>extendsResolverTemplate<Field,Fact,Stmt,Method,WrappedFact<Field,Fact,Stmt,Method>>{



rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

16

17

18

19

20

21

22
	private Stmt joinStmt;privateStmtjoinStmt;	private AccessPath<Field> resolvedAccPath;privateAccessPath<Field>resolvedAccPath;	private boolean propagated = false;privatebooleanpropagated=false;	public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {publicControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtjoinStmt){		this(analyzer, joinStmt, new AccessPath<Field>(), null);this(analyzer,joinStmt,newAccessPath<Field>(),null);



refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015



refactoring


 

 

refactoring

 

Johannes Lerch
committed
Apr 01, 2015

23
		propagated=false;propagated=false;



rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

24

25

26
	}}		private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {privateControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtjoinStmt,AccessPath<Field>resolvedAccPath,ControlFlowJoinResolver<Field,Fact,Stmt,Method>parent){



refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015



refactoring


 

 

refactoring

 

Johannes Lerch
committed
Apr 01, 2015

27
		super(analyzer, parent);super(analyzer,parent);



rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

28

29
		this.joinStmt = joinStmt;this.joinStmt=joinStmt;		this.resolvedAccPath = resolvedAccPath;this.resolvedAccPath=resolvedAccPath;



refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015



refactoring


 

 

refactoring

 

Johannes Lerch
committed
Apr 01, 2015

30
		propagated=true;propagated=true;



rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

31

32
	}}	



refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015



refactoring


 

 

refactoring

 

Johannes Lerch
committed
Apr 01, 2015

33

34

35
	@Override@Override	protected AccessPath<Field> getAccessPathOf(WrappedFact<Field, Fact, Stmt, Method> inc) {protectedAccessPath<Field>getAccessPathOf(WrappedFact<Field,Fact,Stmt,Method>inc){		return inc.getAccessPath();returninc.getAccessPath();



rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

36
	}}



refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015



refactoring


 

 

refactoring

 

Johannes Lerch
committed
Apr 01, 2015

37

38

39

40

41

42

43

44
	protected void processIncomingGuaranteedPrefix(heros.alias.WrappedFact<Field,Fact,Stmt,Method> fact) {protectedvoidprocessIncomingGuaranteedPrefix(heros.alias.WrappedFact<Field,Fact,Stmt,Method>fact){		if(!propagated) {if(!propagated){			propagated=true;propagated=true;			analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(analyzer.processFlowFromJoinStmt(newWrappedFactAtStatement<>(joinStmt,newWrappedFact<>(					fact.getFact(), new AccessPath<Field>(), this)));fact.getFact(),newAccessPath<Field>(),this)));		}}	};};



rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

45

46
		@Override@Override



refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015



refactoring


 

 

refactoring

 

Johannes Lerch
committed
Apr 01, 2015

47

48

49

50

51

52

53

54

55

56

57

58

59

60

61

62
	protected void processIncomingPotentialPrefix(WrappedFact<Field, Fact, Stmt, Method> fact) {protectedvoidprocessIncomingPotentialPrefix(WrappedFact<Field,Fact,Stmt,Method>fact){		lock();lock();		Delta<Field> delta = fact.getAccessPath().getDeltaTo(resolvedAccPath);Delta<Field>delta=fact.getAccessPath().getDeltaTo(resolvedAccPath);		fact.getResolver().resolve(new DeltaConstraint<>(delta), new InterestCallback<Field, Fact, Stmt, Method>() {fact.getResolver().resolve(newDeltaConstraint<>(delta),newInterestCallback<Field,Fact,Stmt,Method>(){			@Override@Override			public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, publicvoidinterest(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,					Resolver<Field, Fact, Stmt, Method> resolver) {Resolver<Field,Fact,Stmt,Method>resolver){				ControlFlowJoinResolver.this.interest(analyzer, ControlFlowJoinResolver.this);ControlFlowJoinResolver.this.interest(analyzer,ControlFlowJoinResolver.this);			}}			@Override@Override			public void canBeResolvedEmpty() {publicvoidcanBeResolvedEmpty(){				ControlFlowJoinResolver.this.canBeResolvedEmpty();ControlFlowJoinResolver.this.canBeResolvedEmpty();			}}		});});		unlock();unlock();



rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

63

64
	}}	



refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015



refactoring


 

 

refactoring

 

Johannes Lerch
committed
Apr 01, 2015

65

66

67
	@Override@Override	protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {protectedResolverTemplate<Field,Fact,Stmt,Method,WrappedFact<Field,Fact,Stmt,Method>>createNestedResolver(AccessPath<Field>newAccPath){		return new ControlFlowJoinResolver<>(analyzer, joinStmt, newAccPath, this);returnnewControlFlowJoinResolver<>(analyzer,joinStmt,newAccPath,this);



rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

68

69

70

71

72

73

74

75

76

77

78

79
	}}	@Override@Override	protected void log(String message) {protectedvoidlog(Stringmessage){		analyzer.log("Join Stmt "+toString()+": "+message);analyzer.log("Join Stmt "+toString()+": "+message);	}}	@Override@Override	public String toString() {publicStringtoString(){		return "<"+resolvedAccPath+":"+joinStmt+">";return"<"+resolvedAccPath+":"+joinStmt+">";	}}



refactoring


 

 


Johannes Lerch
committed
Apr 01, 2015



refactoring


 

 

refactoring

 

Johannes Lerch
committed
Apr 01, 2015

80
	@Override@Override



rewrite of ifds solver



 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver



 

rewrite of ifds solver


Johannes Lerch
committed
Mar 19, 2015

81

82

83

84

85

86

87

88
	public AccessPath<Field> getResolvedAccessPath() {publicAccessPath<Field>getResolvedAccessPath(){		return resolvedAccPath;returnresolvedAccPath;	}}	public Stmt getJoinStmt() {publicStmtgetJoinStmt(){		return joinStmt;returnjoinStmt;	}}}}





