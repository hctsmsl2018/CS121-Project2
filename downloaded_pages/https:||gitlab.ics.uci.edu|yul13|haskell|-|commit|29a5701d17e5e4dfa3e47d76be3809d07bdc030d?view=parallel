



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


haskell






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Yu Liu haskell
Commits

29a5701d















Commit
29a5701d


authored
May 25, 2013
by


darlliu



Browse files




optimization







parent
e9171cd1













Changes
2




Expand all
Hide whitespace changes

Inline
Side-by-side















cybert/Cybert.hs








View file @ 29a5701d








...@@ -168,11 +168,11 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo
...@@ -168,11 +168,11 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo






getNums header ss ids = let nums = map (getNum header ss) ids





getNums header ss ids = let nums = map (getNum header ss) ids







 in if length nums == 1 then Left (nums !! 0)





 in if length nums == 1 then Left (nums !! 0)







 else Right $ filter (not . (== -1)) nums





 else Right $ filter (not . (== -1)) nums







lineToCybert :: (M.Map String (Maybe Int))-> [Cybert_entry] -> B.ByteString -> [Cybert_entry]





lineToCybert :: (M.Map String (Maybe Int))-> B.ByteString -> Cybert_entry







--take a header and an accumulator, then read the line and append the cybert entry





--take a header and an accumulator, then read the line and append the cybert entry







lineToCybert header xs line = xs ++ readLine line where





lineToCybert header line = readLine line where







 readLine s = let ss = B.split '\t' s 





 readLine s = let ss = B.split '\t' s 







 in if length ss /= M.size header then []





 in if length ss /= M.size header then cybert_entry







 else let cybt= cybert_entry {





 else let cybt= cybert_entry {







 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),





 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),







 --this is a must





 --this is a must



...@@ -185,9 +185,9 @@ lineToCybert header xs line = xs ++ readLine line where
...@@ -185,9 +185,9 @@ lineToCybert header xs line = xs ++ readLine line where






 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],





 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],







 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]





 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]







 --these are one or many





 --these are one or many







 , raw = s





 {-, raw = s-}







 --raw info





 --raw info







 } in [cybt]





 } in cybt





















loadCybert :: String -> IO (Maybe [Cybert_entry])





loadCybert :: String -> IO (Maybe [Cybert_entry])







loadCybert fname = catch





loadCybert fname = catch



...@@ -196,11 +196,9 @@ loadCybert fname = catch
...@@ -196,11 +196,9 @@ loadCybert fname = catch






 let mylines = B.split '\n' contents





 let mylines = B.split '\n' contents







 if length mylines <= 1 then return Nothing





 if length mylines <= 1 then return Nothing







 else let header = buildHeader (head mylines);





 else let header = buildHeader (head mylines);







 output = (Just (foldl (lineToCybert header) [] (drop 1 mylines)))





 output = (Just (map (lineToCybert header) (drop 1 mylines)))







 in if output == (Just []) then return Nothing





 in if output == (Just []) then return Nothing







 else do 





 else return output







 putStrLn "Done parsing"









 return output









 ))





 ))







 (\err -> do





 (\err -> do







 if isEOFError err





 if isEOFError err



...@@ -222,14 +220,14 @@ exportCybert xs fname = do
...@@ -222,14 +220,14 @@ exportCybert xs fname = do






exportGeneSyms :: [Cybert_entry] -> String -> IO()





exportGeneSyms :: [Cybert_entry] -> String -> IO()







exportGeneSyms xs fname = do





exportGeneSyms xs fname = do







 withFile fname WriteMode (\handle -> do





 withFile fname WriteMode (\handle -> do







 let contents = foldl1 (\acc x -> acc++"\n"++x) (map showJustS (map genesym xs))





 let contents = unlines (map showJustS (map genesym xs))







 hPutStr handle contents





 hPutStr handle contents







 )





 )





















exportProbes :: [Cybert_entry] -> String -> IO()





exportProbes :: [Cybert_entry] -> String -> IO()







exportProbes xs fname = do





exportProbes xs fname = do







 withFile fname WriteMode (\handle -> do





 withFile fname WriteMode (\handle -> do







 let contents = foldl1 (\acc x -> acc++"\n"++x) (map probe xs)





 let contents = unlines (map probe xs)







 hPutStr handle contents





 hPutStr handle contents







 )





 )

















......















cybert/tested.txt








View file @ 29a5701d





This diff is collapsed.
Click to expand it.















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


haskell






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


haskell


H
H
haskell




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Yu Liu haskell
Commits

29a5701d















Commit
29a5701d


authored
May 25, 2013
by


darlliu



Browse files




optimization







parent
e9171cd1













Changes
2




Expand all
Hide whitespace changes

Inline
Side-by-side















cybert/Cybert.hs








View file @ 29a5701d








...@@ -168,11 +168,11 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo
...@@ -168,11 +168,11 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo






getNums header ss ids = let nums = map (getNum header ss) ids





getNums header ss ids = let nums = map (getNum header ss) ids







 in if length nums == 1 then Left (nums !! 0)





 in if length nums == 1 then Left (nums !! 0)







 else Right $ filter (not . (== -1)) nums





 else Right $ filter (not . (== -1)) nums







lineToCybert :: (M.Map String (Maybe Int))-> [Cybert_entry] -> B.ByteString -> [Cybert_entry]





lineToCybert :: (M.Map String (Maybe Int))-> B.ByteString -> Cybert_entry







--take a header and an accumulator, then read the line and append the cybert entry





--take a header and an accumulator, then read the line and append the cybert entry







lineToCybert header xs line = xs ++ readLine line where





lineToCybert header line = readLine line where







 readLine s = let ss = B.split '\t' s 





 readLine s = let ss = B.split '\t' s 







 in if length ss /= M.size header then []





 in if length ss /= M.size header then cybert_entry







 else let cybt= cybert_entry {





 else let cybt= cybert_entry {







 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),





 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),







 --this is a must





 --this is a must



...@@ -185,9 +185,9 @@ lineToCybert header xs line = xs ++ readLine line where
...@@ -185,9 +185,9 @@ lineToCybert header xs line = xs ++ readLine line where






 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],





 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],







 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]





 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]







 --these are one or many





 --these are one or many







 , raw = s





 {-, raw = s-}







 --raw info





 --raw info







 } in [cybt]





 } in cybt





















loadCybert :: String -> IO (Maybe [Cybert_entry])





loadCybert :: String -> IO (Maybe [Cybert_entry])







loadCybert fname = catch





loadCybert fname = catch



...@@ -196,11 +196,9 @@ loadCybert fname = catch
...@@ -196,11 +196,9 @@ loadCybert fname = catch






 let mylines = B.split '\n' contents





 let mylines = B.split '\n' contents







 if length mylines <= 1 then return Nothing





 if length mylines <= 1 then return Nothing







 else let header = buildHeader (head mylines);





 else let header = buildHeader (head mylines);







 output = (Just (foldl (lineToCybert header) [] (drop 1 mylines)))





 output = (Just (map (lineToCybert header) (drop 1 mylines)))







 in if output == (Just []) then return Nothing





 in if output == (Just []) then return Nothing







 else do 





 else return output







 putStrLn "Done parsing"









 return output









 ))





 ))







 (\err -> do





 (\err -> do







 if isEOFError err





 if isEOFError err



...@@ -222,14 +220,14 @@ exportCybert xs fname = do
...@@ -222,14 +220,14 @@ exportCybert xs fname = do






exportGeneSyms :: [Cybert_entry] -> String -> IO()





exportGeneSyms :: [Cybert_entry] -> String -> IO()







exportGeneSyms xs fname = do





exportGeneSyms xs fname = do







 withFile fname WriteMode (\handle -> do





 withFile fname WriteMode (\handle -> do







 let contents = foldl1 (\acc x -> acc++"\n"++x) (map showJustS (map genesym xs))





 let contents = unlines (map showJustS (map genesym xs))







 hPutStr handle contents





 hPutStr handle contents







 )





 )





















exportProbes :: [Cybert_entry] -> String -> IO()





exportProbes :: [Cybert_entry] -> String -> IO()







exportProbes xs fname = do





exportProbes xs fname = do







 withFile fname WriteMode (\handle -> do





 withFile fname WriteMode (\handle -> do







 let contents = foldl1 (\acc x -> acc++"\n"++x) (map probe xs)





 let contents = unlines (map probe xs)







 hPutStr handle contents





 hPutStr handle contents







 )





 )

















......















cybert/tested.txt








View file @ 29a5701d





This diff is collapsed.
Click to expand it.















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Yu Liu haskell
Commits

29a5701d







Open sidebar



Yu Liu haskell
Commits

29a5701d




Open sidebar

Yu Liu haskell
Commits

29a5701d


Yu LiuhaskellhaskellCommits
29a5701d








Commit
29a5701d


authored
May 25, 2013
by


darlliu



Browse files




optimization







parent
e9171cd1













Changes
2




Expand all
Hide whitespace changes

Inline
Side-by-side















cybert/Cybert.hs








View file @ 29a5701d








...@@ -168,11 +168,11 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo
...@@ -168,11 +168,11 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo






getNums header ss ids = let nums = map (getNum header ss) ids





getNums header ss ids = let nums = map (getNum header ss) ids







 in if length nums == 1 then Left (nums !! 0)





 in if length nums == 1 then Left (nums !! 0)







 else Right $ filter (not . (== -1)) nums





 else Right $ filter (not . (== -1)) nums







lineToCybert :: (M.Map String (Maybe Int))-> [Cybert_entry] -> B.ByteString -> [Cybert_entry]





lineToCybert :: (M.Map String (Maybe Int))-> B.ByteString -> Cybert_entry







--take a header and an accumulator, then read the line and append the cybert entry





--take a header and an accumulator, then read the line and append the cybert entry







lineToCybert header xs line = xs ++ readLine line where





lineToCybert header line = readLine line where







 readLine s = let ss = B.split '\t' s 





 readLine s = let ss = B.split '\t' s 







 in if length ss /= M.size header then []





 in if length ss /= M.size header then cybert_entry







 else let cybt= cybert_entry {





 else let cybt= cybert_entry {







 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),





 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),







 --this is a must





 --this is a must



...@@ -185,9 +185,9 @@ lineToCybert header xs line = xs ++ readLine line where
...@@ -185,9 +185,9 @@ lineToCybert header xs line = xs ++ readLine line where






 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],





 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],







 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]





 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]







 --these are one or many





 --these are one or many







 , raw = s





 {-, raw = s-}







 --raw info





 --raw info







 } in [cybt]





 } in cybt





















loadCybert :: String -> IO (Maybe [Cybert_entry])





loadCybert :: String -> IO (Maybe [Cybert_entry])







loadCybert fname = catch





loadCybert fname = catch



...@@ -196,11 +196,9 @@ loadCybert fname = catch
...@@ -196,11 +196,9 @@ loadCybert fname = catch






 let mylines = B.split '\n' contents





 let mylines = B.split '\n' contents







 if length mylines <= 1 then return Nothing





 if length mylines <= 1 then return Nothing







 else let header = buildHeader (head mylines);





 else let header = buildHeader (head mylines);







 output = (Just (foldl (lineToCybert header) [] (drop 1 mylines)))





 output = (Just (map (lineToCybert header) (drop 1 mylines)))







 in if output == (Just []) then return Nothing





 in if output == (Just []) then return Nothing







 else do 





 else return output







 putStrLn "Done parsing"









 return output









 ))





 ))







 (\err -> do





 (\err -> do







 if isEOFError err





 if isEOFError err



...@@ -222,14 +220,14 @@ exportCybert xs fname = do
...@@ -222,14 +220,14 @@ exportCybert xs fname = do






exportGeneSyms :: [Cybert_entry] -> String -> IO()





exportGeneSyms :: [Cybert_entry] -> String -> IO()







exportGeneSyms xs fname = do





exportGeneSyms xs fname = do







 withFile fname WriteMode (\handle -> do





 withFile fname WriteMode (\handle -> do







 let contents = foldl1 (\acc x -> acc++"\n"++x) (map showJustS (map genesym xs))





 let contents = unlines (map showJustS (map genesym xs))







 hPutStr handle contents





 hPutStr handle contents







 )





 )





















exportProbes :: [Cybert_entry] -> String -> IO()





exportProbes :: [Cybert_entry] -> String -> IO()







exportProbes xs fname = do





exportProbes xs fname = do







 withFile fname WriteMode (\handle -> do





 withFile fname WriteMode (\handle -> do







 let contents = foldl1 (\acc x -> acc++"\n"++x) (map probe xs)





 let contents = unlines (map probe xs)







 hPutStr handle contents





 hPutStr handle contents







 )





 )

















......















cybert/tested.txt








View file @ 29a5701d





This diff is collapsed.
Click to expand it.















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
29a5701d


authored
May 25, 2013
by


darlliu



Browse files




optimization







parent
e9171cd1













Changes
2




Expand all
Hide whitespace changes

Inline
Side-by-side















cybert/Cybert.hs








View file @ 29a5701d








...@@ -168,11 +168,11 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo
...@@ -168,11 +168,11 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo






getNums header ss ids = let nums = map (getNum header ss) ids





getNums header ss ids = let nums = map (getNum header ss) ids







 in if length nums == 1 then Left (nums !! 0)





 in if length nums == 1 then Left (nums !! 0)







 else Right $ filter (not . (== -1)) nums





 else Right $ filter (not . (== -1)) nums







lineToCybert :: (M.Map String (Maybe Int))-> [Cybert_entry] -> B.ByteString -> [Cybert_entry]





lineToCybert :: (M.Map String (Maybe Int))-> B.ByteString -> Cybert_entry







--take a header and an accumulator, then read the line and append the cybert entry





--take a header and an accumulator, then read the line and append the cybert entry







lineToCybert header xs line = xs ++ readLine line where





lineToCybert header line = readLine line where







 readLine s = let ss = B.split '\t' s 





 readLine s = let ss = B.split '\t' s 







 in if length ss /= M.size header then []





 in if length ss /= M.size header then cybert_entry







 else let cybt= cybert_entry {





 else let cybt= cybert_entry {







 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),





 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),







 --this is a must





 --this is a must



...@@ -185,9 +185,9 @@ lineToCybert header xs line = xs ++ readLine line where
...@@ -185,9 +185,9 @@ lineToCybert header xs line = xs ++ readLine line where






 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],





 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],







 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]





 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]







 --these are one or many





 --these are one or many







 , raw = s





 {-, raw = s-}







 --raw info





 --raw info







 } in [cybt]





 } in cybt





















loadCybert :: String -> IO (Maybe [Cybert_entry])





loadCybert :: String -> IO (Maybe [Cybert_entry])







loadCybert fname = catch





loadCybert fname = catch



...@@ -196,11 +196,9 @@ loadCybert fname = catch
...@@ -196,11 +196,9 @@ loadCybert fname = catch






 let mylines = B.split '\n' contents





 let mylines = B.split '\n' contents







 if length mylines <= 1 then return Nothing





 if length mylines <= 1 then return Nothing







 else let header = buildHeader (head mylines);





 else let header = buildHeader (head mylines);







 output = (Just (foldl (lineToCybert header) [] (drop 1 mylines)))





 output = (Just (map (lineToCybert header) (drop 1 mylines)))







 in if output == (Just []) then return Nothing





 in if output == (Just []) then return Nothing







 else do 





 else return output







 putStrLn "Done parsing"









 return output









 ))





 ))







 (\err -> do





 (\err -> do







 if isEOFError err





 if isEOFError err



...@@ -222,14 +220,14 @@ exportCybert xs fname = do
...@@ -222,14 +220,14 @@ exportCybert xs fname = do






exportGeneSyms :: [Cybert_entry] -> String -> IO()





exportGeneSyms :: [Cybert_entry] -> String -> IO()







exportGeneSyms xs fname = do





exportGeneSyms xs fname = do







 withFile fname WriteMode (\handle -> do





 withFile fname WriteMode (\handle -> do







 let contents = foldl1 (\acc x -> acc++"\n"++x) (map showJustS (map genesym xs))





 let contents = unlines (map showJustS (map genesym xs))







 hPutStr handle contents





 hPutStr handle contents







 )





 )





















exportProbes :: [Cybert_entry] -> String -> IO()





exportProbes :: [Cybert_entry] -> String -> IO()







exportProbes xs fname = do





exportProbes xs fname = do







 withFile fname WriteMode (\handle -> do





 withFile fname WriteMode (\handle -> do







 let contents = foldl1 (\acc x -> acc++"\n"++x) (map probe xs)





 let contents = unlines (map probe xs)







 hPutStr handle contents





 hPutStr handle contents







 )





 )

















......















cybert/tested.txt








View file @ 29a5701d





This diff is collapsed.
Click to expand it.















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
29a5701d


authored
May 25, 2013
by


darlliu



Browse files



Commit
29a5701d


authored
May 25, 2013
by


darlliu

29a5701dauthoredbydarlliu

optimization






parent
e9171cd1
















parent
e9171cd1





parent












Changes
2
2


Expand all
Hide whitespace changes

Inline
Side-by-side






Expand all
Hide whitespace changes

Inline
Side-by-side




Expand all
Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










cybert/Cybert.hs








View file @ 29a5701d








...@@ -168,11 +168,11 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo
...@@ -168,11 +168,11 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo






getNums header ss ids = let nums = map (getNum header ss) ids





getNums header ss ids = let nums = map (getNum header ss) ids







 in if length nums == 1 then Left (nums !! 0)





 in if length nums == 1 then Left (nums !! 0)







 else Right $ filter (not . (== -1)) nums





 else Right $ filter (not . (== -1)) nums







lineToCybert :: (M.Map String (Maybe Int))-> [Cybert_entry] -> B.ByteString -> [Cybert_entry]





lineToCybert :: (M.Map String (Maybe Int))-> B.ByteString -> Cybert_entry







--take a header and an accumulator, then read the line and append the cybert entry





--take a header and an accumulator, then read the line and append the cybert entry







lineToCybert header xs line = xs ++ readLine line where





lineToCybert header line = readLine line where







 readLine s = let ss = B.split '\t' s 





 readLine s = let ss = B.split '\t' s 







 in if length ss /= M.size header then []





 in if length ss /= M.size header then cybert_entry







 else let cybt= cybert_entry {





 else let cybt= cybert_entry {







 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),





 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),







 --this is a must





 --this is a must



...@@ -185,9 +185,9 @@ lineToCybert header xs line = xs ++ readLine line where
...@@ -185,9 +185,9 @@ lineToCybert header xs line = xs ++ readLine line where






 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],





 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],







 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]





 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]







 --these are one or many





 --these are one or many







 , raw = s





 {-, raw = s-}







 --raw info





 --raw info







 } in [cybt]





 } in cybt





















loadCybert :: String -> IO (Maybe [Cybert_entry])





loadCybert :: String -> IO (Maybe [Cybert_entry])







loadCybert fname = catch





loadCybert fname = catch



...@@ -196,11 +196,9 @@ loadCybert fname = catch
...@@ -196,11 +196,9 @@ loadCybert fname = catch






 let mylines = B.split '\n' contents





 let mylines = B.split '\n' contents







 if length mylines <= 1 then return Nothing





 if length mylines <= 1 then return Nothing







 else let header = buildHeader (head mylines);





 else let header = buildHeader (head mylines);







 output = (Just (foldl (lineToCybert header) [] (drop 1 mylines)))





 output = (Just (map (lineToCybert header) (drop 1 mylines)))







 in if output == (Just []) then return Nothing





 in if output == (Just []) then return Nothing







 else do 





 else return output







 putStrLn "Done parsing"









 return output









 ))





 ))







 (\err -> do





 (\err -> do







 if isEOFError err





 if isEOFError err



...@@ -222,14 +220,14 @@ exportCybert xs fname = do
...@@ -222,14 +220,14 @@ exportCybert xs fname = do






exportGeneSyms :: [Cybert_entry] -> String -> IO()





exportGeneSyms :: [Cybert_entry] -> String -> IO()







exportGeneSyms xs fname = do





exportGeneSyms xs fname = do







 withFile fname WriteMode (\handle -> do





 withFile fname WriteMode (\handle -> do







 let contents = foldl1 (\acc x -> acc++"\n"++x) (map showJustS (map genesym xs))





 let contents = unlines (map showJustS (map genesym xs))







 hPutStr handle contents





 hPutStr handle contents







 )





 )





















exportProbes :: [Cybert_entry] -> String -> IO()





exportProbes :: [Cybert_entry] -> String -> IO()







exportProbes xs fname = do





exportProbes xs fname = do







 withFile fname WriteMode (\handle -> do





 withFile fname WriteMode (\handle -> do







 let contents = foldl1 (\acc x -> acc++"\n"++x) (map probe xs)





 let contents = unlines (map probe xs)







 hPutStr handle contents





 hPutStr handle contents







 )





 )

















......















cybert/tested.txt








View file @ 29a5701d





This diff is collapsed.
Click to expand it.













cybert/Cybert.hs








View file @ 29a5701d








...@@ -168,11 +168,11 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo
...@@ -168,11 +168,11 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo






getNums header ss ids = let nums = map (getNum header ss) ids





getNums header ss ids = let nums = map (getNum header ss) ids







 in if length nums == 1 then Left (nums !! 0)





 in if length nums == 1 then Left (nums !! 0)







 else Right $ filter (not . (== -1)) nums





 else Right $ filter (not . (== -1)) nums







lineToCybert :: (M.Map String (Maybe Int))-> [Cybert_entry] -> B.ByteString -> [Cybert_entry]





lineToCybert :: (M.Map String (Maybe Int))-> B.ByteString -> Cybert_entry







--take a header and an accumulator, then read the line and append the cybert entry





--take a header and an accumulator, then read the line and append the cybert entry







lineToCybert header xs line = xs ++ readLine line where





lineToCybert header line = readLine line where







 readLine s = let ss = B.split '\t' s 





 readLine s = let ss = B.split '\t' s 







 in if length ss /= M.size header then []





 in if length ss /= M.size header then cybert_entry







 else let cybt= cybert_entry {





 else let cybt= cybert_entry {







 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),





 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),







 --this is a must





 --this is a must



...@@ -185,9 +185,9 @@ lineToCybert header xs line = xs ++ readLine line where
...@@ -185,9 +185,9 @@ lineToCybert header xs line = xs ++ readLine line where






 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],





 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],







 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]





 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]







 --these are one or many





 --these are one or many







 , raw = s





 {-, raw = s-}







 --raw info





 --raw info







 } in [cybt]





 } in cybt





















loadCybert :: String -> IO (Maybe [Cybert_entry])





loadCybert :: String -> IO (Maybe [Cybert_entry])







loadCybert fname = catch





loadCybert fname = catch



...@@ -196,11 +196,9 @@ loadCybert fname = catch
...@@ -196,11 +196,9 @@ loadCybert fname = catch






 let mylines = B.split '\n' contents





 let mylines = B.split '\n' contents







 if length mylines <= 1 then return Nothing





 if length mylines <= 1 then return Nothing







 else let header = buildHeader (head mylines);





 else let header = buildHeader (head mylines);







 output = (Just (foldl (lineToCybert header) [] (drop 1 mylines)))





 output = (Just (map (lineToCybert header) (drop 1 mylines)))







 in if output == (Just []) then return Nothing





 in if output == (Just []) then return Nothing







 else do 





 else return output







 putStrLn "Done parsing"









 return output









 ))





 ))







 (\err -> do





 (\err -> do







 if isEOFError err





 if isEOFError err



...@@ -222,14 +220,14 @@ exportCybert xs fname = do
...@@ -222,14 +220,14 @@ exportCybert xs fname = do






exportGeneSyms :: [Cybert_entry] -> String -> IO()





exportGeneSyms :: [Cybert_entry] -> String -> IO()







exportGeneSyms xs fname = do





exportGeneSyms xs fname = do







 withFile fname WriteMode (\handle -> do





 withFile fname WriteMode (\handle -> do







 let contents = foldl1 (\acc x -> acc++"\n"++x) (map showJustS (map genesym xs))





 let contents = unlines (map showJustS (map genesym xs))







 hPutStr handle contents





 hPutStr handle contents







 )





 )





















exportProbes :: [Cybert_entry] -> String -> IO()





exportProbes :: [Cybert_entry] -> String -> IO()







exportProbes xs fname = do





exportProbes xs fname = do







 withFile fname WriteMode (\handle -> do





 withFile fname WriteMode (\handle -> do







 let contents = foldl1 (\acc x -> acc++"\n"++x) (map probe xs)





 let contents = unlines (map probe xs)







 hPutStr handle contents





 hPutStr handle contents







 )





 )

















......













cybert/Cybert.hs








View file @ 29a5701d








cybert/Cybert.hs










View file @ 29a5701d


29a5701d





...@@ -168,11 +168,11 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo
...@@ -168,11 +168,11 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo






getNums header ss ids = let nums = map (getNum header ss) ids





getNums header ss ids = let nums = map (getNum header ss) ids







 in if length nums == 1 then Left (nums !! 0)





 in if length nums == 1 then Left (nums !! 0)







 else Right $ filter (not . (== -1)) nums





 else Right $ filter (not . (== -1)) nums







lineToCybert :: (M.Map String (Maybe Int))-> [Cybert_entry] -> B.ByteString -> [Cybert_entry]





lineToCybert :: (M.Map String (Maybe Int))-> B.ByteString -> Cybert_entry







--take a header and an accumulator, then read the line and append the cybert entry





--take a header and an accumulator, then read the line and append the cybert entry







lineToCybert header xs line = xs ++ readLine line where





lineToCybert header line = readLine line where







 readLine s = let ss = B.split '\t' s 





 readLine s = let ss = B.split '\t' s 







 in if length ss /= M.size header then []





 in if length ss /= M.size header then cybert_entry







 else let cybt= cybert_entry {





 else let cybt= cybert_entry {







 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),





 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),







 --this is a must





 --this is a must



...@@ -185,9 +185,9 @@ lineToCybert header xs line = xs ++ readLine line where
...@@ -185,9 +185,9 @@ lineToCybert header xs line = xs ++ readLine line where






 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],





 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],







 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]





 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]







 --these are one or many





 --these are one or many







 , raw = s





 {-, raw = s-}







 --raw info





 --raw info







 } in [cybt]





 } in cybt





















loadCybert :: String -> IO (Maybe [Cybert_entry])





loadCybert :: String -> IO (Maybe [Cybert_entry])







loadCybert fname = catch





loadCybert fname = catch



...@@ -196,11 +196,9 @@ loadCybert fname = catch
...@@ -196,11 +196,9 @@ loadCybert fname = catch






 let mylines = B.split '\n' contents





 let mylines = B.split '\n' contents







 if length mylines <= 1 then return Nothing





 if length mylines <= 1 then return Nothing







 else let header = buildHeader (head mylines);





 else let header = buildHeader (head mylines);







 output = (Just (foldl (lineToCybert header) [] (drop 1 mylines)))





 output = (Just (map (lineToCybert header) (drop 1 mylines)))







 in if output == (Just []) then return Nothing





 in if output == (Just []) then return Nothing







 else do 





 else return output







 putStrLn "Done parsing"









 return output









 ))





 ))







 (\err -> do





 (\err -> do







 if isEOFError err





 if isEOFError err



...@@ -222,14 +220,14 @@ exportCybert xs fname = do
...@@ -222,14 +220,14 @@ exportCybert xs fname = do






exportGeneSyms :: [Cybert_entry] -> String -> IO()





exportGeneSyms :: [Cybert_entry] -> String -> IO()







exportGeneSyms xs fname = do





exportGeneSyms xs fname = do







 withFile fname WriteMode (\handle -> do





 withFile fname WriteMode (\handle -> do







 let contents = foldl1 (\acc x -> acc++"\n"++x) (map showJustS (map genesym xs))





 let contents = unlines (map showJustS (map genesym xs))







 hPutStr handle contents





 hPutStr handle contents







 )





 )





















exportProbes :: [Cybert_entry] -> String -> IO()





exportProbes :: [Cybert_entry] -> String -> IO()







exportProbes xs fname = do





exportProbes xs fname = do







 withFile fname WriteMode (\handle -> do





 withFile fname WriteMode (\handle -> do







 let contents = foldl1 (\acc x -> acc++"\n"++x) (map probe xs)





 let contents = unlines (map probe xs)







 hPutStr handle contents





 hPutStr handle contents







 )





 )

















......









...@@ -168,11 +168,11 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo
...@@ -168,11 +168,11 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo






getNums header ss ids = let nums = map (getNum header ss) ids





getNums header ss ids = let nums = map (getNum header ss) ids







 in if length nums == 1 then Left (nums !! 0)





 in if length nums == 1 then Left (nums !! 0)







 else Right $ filter (not . (== -1)) nums





 else Right $ filter (not . (== -1)) nums







lineToCybert :: (M.Map String (Maybe Int))-> [Cybert_entry] -> B.ByteString -> [Cybert_entry]





lineToCybert :: (M.Map String (Maybe Int))-> B.ByteString -> Cybert_entry







--take a header and an accumulator, then read the line and append the cybert entry





--take a header and an accumulator, then read the line and append the cybert entry







lineToCybert header xs line = xs ++ readLine line where





lineToCybert header line = readLine line where







 readLine s = let ss = B.split '\t' s 





 readLine s = let ss = B.split '\t' s 







 in if length ss /= M.size header then []





 in if length ss /= M.size header then cybert_entry







 else let cybt= cybert_entry {





 else let cybt= cybert_entry {







 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),





 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),







 --this is a must





 --this is a must



...@@ -185,9 +185,9 @@ lineToCybert header xs line = xs ++ readLine line where
...@@ -185,9 +185,9 @@ lineToCybert header xs line = xs ++ readLine line where






 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],





 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],







 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]





 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]







 --these are one or many





 --these are one or many







 , raw = s





 {-, raw = s-}







 --raw info





 --raw info







 } in [cybt]





 } in cybt





















loadCybert :: String -> IO (Maybe [Cybert_entry])





loadCybert :: String -> IO (Maybe [Cybert_entry])







loadCybert fname = catch





loadCybert fname = catch



...@@ -196,11 +196,9 @@ loadCybert fname = catch
...@@ -196,11 +196,9 @@ loadCybert fname = catch






 let mylines = B.split '\n' contents





 let mylines = B.split '\n' contents







 if length mylines <= 1 then return Nothing





 if length mylines <= 1 then return Nothing







 else let header = buildHeader (head mylines);





 else let header = buildHeader (head mylines);







 output = (Just (foldl (lineToCybert header) [] (drop 1 mylines)))





 output = (Just (map (lineToCybert header) (drop 1 mylines)))







 in if output == (Just []) then return Nothing





 in if output == (Just []) then return Nothing







 else do 





 else return output







 putStrLn "Done parsing"









 return output









 ))





 ))







 (\err -> do





 (\err -> do







 if isEOFError err





 if isEOFError err



...@@ -222,14 +220,14 @@ exportCybert xs fname = do
...@@ -222,14 +220,14 @@ exportCybert xs fname = do






exportGeneSyms :: [Cybert_entry] -> String -> IO()





exportGeneSyms :: [Cybert_entry] -> String -> IO()







exportGeneSyms xs fname = do





exportGeneSyms xs fname = do







 withFile fname WriteMode (\handle -> do





 withFile fname WriteMode (\handle -> do







 let contents = foldl1 (\acc x -> acc++"\n"++x) (map showJustS (map genesym xs))





 let contents = unlines (map showJustS (map genesym xs))







 hPutStr handle contents





 hPutStr handle contents







 )





 )





















exportProbes :: [Cybert_entry] -> String -> IO()





exportProbes :: [Cybert_entry] -> String -> IO()







exportProbes xs fname = do





exportProbes xs fname = do







 withFile fname WriteMode (\handle -> do





 withFile fname WriteMode (\handle -> do







 let contents = foldl1 (\acc x -> acc++"\n"++x) (map probe xs)





 let contents = unlines (map probe xs)







 hPutStr handle contents





 hPutStr handle contents







 )





 )

















......






...@@ -168,11 +168,11 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo
...@@ -168,11 +168,11 @@ getNums :: (M.Map String (Maybe Int))-> [B.ByteString] -> [String] -> Either Flo






getNums header ss ids = let nums = map (getNum header ss) ids





getNums header ss ids = let nums = map (getNum header ss) ids







 in if length nums == 1 then Left (nums !! 0)





 in if length nums == 1 then Left (nums !! 0)







 else Right $ filter (not . (== -1)) nums





 else Right $ filter (not . (== -1)) nums







lineToCybert :: (M.Map String (Maybe Int))-> [Cybert_entry] -> B.ByteString -> [Cybert_entry]





lineToCybert :: (M.Map String (Maybe Int))-> B.ByteString -> Cybert_entry







--take a header and an accumulator, then read the line and append the cybert entry





--take a header and an accumulator, then read the line and append the cybert entry







lineToCybert header xs line = xs ++ readLine line where





lineToCybert header line = readLine line where







 readLine s = let ss = B.split '\t' s 





 readLine s = let ss = B.split '\t' s 







 in if length ss /= M.size header then []





 in if length ss /= M.size header then cybert_entry







 else let cybt= cybert_entry {





 else let cybt= cybert_entry {







 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),





 probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),







 --this is a must





 --this is a must



...@@ -185,9 +185,9 @@ lineToCybert header xs line = xs ++ readLine line where
...@@ -185,9 +185,9 @@ lineToCybert header xs line = xs ++ readLine line where






 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],





 mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],







 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]





 sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]







 --these are one or many





 --these are one or many







 , raw = s





 {-, raw = s-}







 --raw info





 --raw info







 } in [cybt]





 } in cybt





















loadCybert :: String -> IO (Maybe [Cybert_entry])





loadCybert :: String -> IO (Maybe [Cybert_entry])







loadCybert fname = catch





loadCybert fname = catch



...@@ -196,11 +196,9 @@ loadCybert fname = catch
...@@ -196,11 +196,9 @@ loadCybert fname = catch






 let mylines = B.split '\n' contents





 let mylines = B.split '\n' contents







 if length mylines <= 1 then return Nothing





 if length mylines <= 1 then return Nothing







 else let header = buildHeader (head mylines);





 else let header = buildHeader (head mylines);







 output = (Just (foldl (lineToCybert header) [] (drop 1 mylines)))





 output = (Just (map (lineToCybert header) (drop 1 mylines)))







 in if output == (Just []) then return Nothing





 in if output == (Just []) then return Nothing







 else do 





 else return output







 putStrLn "Done parsing"









 return output









 ))





 ))







 (\err -> do





 (\err -> do







 if isEOFError err





 if isEOFError err



...@@ -222,14 +220,14 @@ exportCybert xs fname = do
...@@ -222,14 +220,14 @@ exportCybert xs fname = do






exportGeneSyms :: [Cybert_entry] -> String -> IO()





exportGeneSyms :: [Cybert_entry] -> String -> IO()







exportGeneSyms xs fname = do





exportGeneSyms xs fname = do







 withFile fname WriteMode (\handle -> do





 withFile fname WriteMode (\handle -> do







 let contents = foldl1 (\acc x -> acc++"\n"++x) (map showJustS (map genesym xs))





 let contents = unlines (map showJustS (map genesym xs))







 hPutStr handle contents





 hPutStr handle contents







 )





 )





















exportProbes :: [Cybert_entry] -> String -> IO()





exportProbes :: [Cybert_entry] -> String -> IO()







exportProbes xs fname = do





exportProbes xs fname = do







 withFile fname WriteMode (\handle -> do





 withFile fname WriteMode (\handle -> do







 let contents = foldl1 (\acc x -> acc++"\n"++x) (map probe xs)





 let contents = unlines (map probe xs)







 hPutStr handle contents





 hPutStr handle contents







 )





 )

















......


getNums header ss ids = let nums = map (getNum header ss) idsgetNumsheaderssids=letnums=map(getNumheaderss)idsgetNums header ss ids = let nums = map (getNum header ss) idsgetNumsheaderssids=letnums=map(getNumheaderss)ids in if length nums == 1 then Left (nums !! 0)iniflengthnums==1thenLeft(nums!!0) in if length nums == 1 then Left (nums !! 0)iniflengthnums==1thenLeft(nums!!0) else Right $ filter (not . (== -1)) numselseRight$filter(not.(==-1))nums else Right $ filter (not . (== -1)) numselseRight$filter(not.(==-1))numslineToCybert :: (M.Map String (Maybe Int))-> [Cybert_entry] -> B.ByteString -> [Cybert_entry]lineToCybert::(M.MapString(MaybeInt))->[[Cybert_entryCybert_entry]] ->->B.ByteString->[[Cybert_entry]]lineToCybert :: (M.Map String (Maybe Int))-> B.ByteString -> Cybert_entrylineToCybert::(M.MapString(MaybeInt))->B.ByteString->Cybert_entry--take a header and an accumulator, then read the line and append the cybert entry--take a header and an accumulator, then read the line and append the cybert entry--take a header and an accumulator, then read the line and append the cybert entry--take a header and an accumulator, then read the line and append the cybert entrylineToCybert header xs line = xs ++ readLine line wherelineToCybertheaderxsxs line=xsxs ++++ readLinelinewherelineToCybert header line = readLine line wherelineToCybertheaderline=readLinelinewhere readLine s = let ss = B.split '\t' s readLines=letss=B.split'\t's readLine s = let ss = B.split '\t' s readLines=letss=B.split'\t's in if length ss /= M.size header then []iniflengthss/=M.sizeheaderthen[][] in if length ss /= M.size header then cybert_entryiniflengthss/=M.sizeheaderthencybert_entrycybert_entry else let cybt= cybert_entry {elseletcybt=cybert_entry{ else let cybt= cybert_entry {elseletcybt=cybert_entry{ probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),probe=B.unpack$ss`maybeGet`(headerM.!"probe_id"), probe = B.unpack $ ss `maybeGet` (header M.! "probe_id"),probe=B.unpack$ss`maybeGet`(headerM.!"probe_id"), --this is a must--this is a must --this is a must--this is a must mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],mean=getNumsheaderss$map("mean"++)["c","e","1","2","3","4","5","6","7"], mean = getNums header ss $ map ( "mean" ++ ) ["c","e","1","2","3","4","5","6","7"],mean=getNumsheaderss$map("mean"++)["c","e","1","2","3","4","5","6","7"], sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]sds=getNumsheaderss$map("std"++)["c","e","1","2","3","4","5","6","7"] sds = getNums header ss $ map ( "std" ++ ) ["c","e","1","2","3","4","5","6","7"]sds=getNumsheaderss$map("std"++)["c","e","1","2","3","4","5","6","7"] --these are one or many--these are one or many --these are one or many--these are one or many , raw = s,raw=s {-, raw = s-}{-, raw = s-}{--} --raw info--raw info --raw info--raw info } in [cybt]}in[[cybt]] } in cybt}incybtloadCybert :: String -> IO (Maybe [Cybert_entry])loadCybert::String->IO(Maybe[Cybert_entry])loadCybert :: String -> IO (Maybe [Cybert_entry])loadCybert::String->IO(Maybe[Cybert_entry])loadCybert fname = catchloadCybertfname=catchloadCybert fname = catchloadCybertfname=catch let mylines = B.split '\n' contentsletmylines=B.split'\n'contents let mylines = B.split '\n' contentsletmylines=B.split'\n'contents if length mylines <= 1 then return Nothingiflengthmylines<=1thenreturnNothing if length mylines <= 1 then return Nothingiflengthmylines<=1thenreturnNothing else let header = buildHeader (head mylines);elseletheader=buildHeader(headmylines); else let header = buildHeader (head mylines);elseletheader=buildHeader(headmylines); output = (Just (foldl (lineToCybert header) [] (drop 1 mylines)))output=(Just(foldlfoldl(lineToCybertheader)[][] (drop1mylines))) output = (Just (map (lineToCybert header) (drop 1 mylines)))output=(Just(mapmap(lineToCybertheader)(drop1mylines))) in if output == (Just []) then return Nothinginifoutput==(Just[])thenreturnNothing in if output == (Just []) then return Nothinginifoutput==(Just[])thenreturnNothing else do elsedo else return outputelsereturnoutput putStrLn "Done parsing"putStrLn"Done parsing" return outputreturnoutput )))) )))) (\err -> do(\err->do (\err -> do(\err->do if isEOFError errifisEOFErrorerr if isEOFError errifisEOFErrorerrexportGeneSyms :: [Cybert_entry] -> String -> IO()exportGeneSyms::[Cybert_entry]->String->IO()exportGeneSyms :: [Cybert_entry] -> String -> IO()exportGeneSyms::[Cybert_entry]->String->IO()exportGeneSyms xs fname = doexportGeneSymsxsfname=doexportGeneSyms xs fname = doexportGeneSymsxsfname=do withFile fname WriteMode (\handle -> dowithFilefnameWriteMode(\handle->do withFile fname WriteMode (\handle -> dowithFilefnameWriteMode(\handle->do let contents = foldl1 (\acc x -> acc++"\n"++x) (map showJustS (map genesym xs))letcontents=foldl1foldl1 ((\\accacc xx ->-> accacc++++""\n\n""++++xx))(mapshowJustS(mapgenesymxs)) let contents = unlines (map showJustS (map genesym xs))letcontents=unlinesunlines(mapshowJustS(mapgenesymxs)) hPutStr handle contentshPutStrhandlecontents hPutStr handle contentshPutStrhandlecontents )) ))exportProbes :: [Cybert_entry] -> String -> IO()exportProbes::[Cybert_entry]->String->IO()exportProbes :: [Cybert_entry] -> String -> IO()exportProbes::[Cybert_entry]->String->IO()exportProbes xs fname = doexportProbesxsfname=doexportProbes xs fname = doexportProbesxsfname=do withFile fname WriteMode (\handle -> dowithFilefnameWriteMode(\handle->do withFile fname WriteMode (\handle -> dowithFilefnameWriteMode(\handle->do let contents = foldl1 (\acc x -> acc++"\n"++x) (map probe xs)letcontents=foldl1foldl1 ((\\accacc xx ->-> accacc++++""\n\n""++++xx))(mapprobexs) let contents = unlines (map probe xs)letcontents=unlinesunlines(mapprobexs) hPutStr handle contentshPutStrhandlecontents hPutStr handle contentshPutStrhandlecontents )) ))








cybert/tested.txt








View file @ 29a5701d





This diff is collapsed.
Click to expand it.











cybert/tested.txt








View file @ 29a5701d








cybert/tested.txt










View file @ 29a5701d


29a5701d


This diff is collapsed.
Click to expand it.




This diff is collapsed.
Click to expand it.


This diff is collapsed.
Click to expand it.










Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






