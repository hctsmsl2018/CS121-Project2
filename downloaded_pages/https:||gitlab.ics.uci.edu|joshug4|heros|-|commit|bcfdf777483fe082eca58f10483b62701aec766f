



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

bcfdf777















Commit
bcfdf777


authored
Dec 12, 2012
by


Eric Bodden



Browse files




reordered some methods







parent
0378270e













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ bcfdf777






......@@ -274,120 +274,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 /**










	 * Computes the final values for edge functions.










	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 nodeWorklist.add(superGraphNode);










 }










 while(true) {










 synchronized (nodeWorklist) {










 if(!nodeWorklist.isEmpty()) {










 //pop job










 Pair<N,D> nAndD = nodeWorklist.remove(0); 










 numTasks.getAndIncrement();










 










 //dispatch processing of job (potentially in a different thread)










 executor.execute(new ValuePropagationTask(nAndD));










 } else if(numTasks.intValue()==0) {










 //node worklist is empty; no running tasks, we are done










 break;










 } else {










 //the node worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 nodeWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 }










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads










 Set<N> allNonCallStartNodes = icfg.allNonCallStartNodes();










 @SuppressWarnings("unchecked")










 N[] nonCallStartNodesArray = (N[]) new Object[allNonCallStartNodes.size()];










 int i=0;










 for (N n : allNonCallStartNodes) {










 nonCallStartNodesArray[i] = n;










 i++;










 } 










 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //wait until done










 executor.shutdown();










 try {










 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }





















 private void propagateValueAtStart(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2(); 










 M p = icfg.getMethodOf(n);










 for(N c: icfg.getCallsFromWithin(p)) { 










 Set<Entry<D, EdgeFunction<V>>> entries; 










 synchronized (jumpFn) {










 entries = jumpFn.forwardLookup(d,c).entrySet();










 for(Map.Entry<D,EdgeFunction<V>> dPAndFP: entries) {










 D dPrime = dPAndFP.getKey();










 EdgeFunction<V> fPrime = dPAndFP.getValue();










 N sP = n;










 propagateValue(c,dPrime,fPrime.computeTarget(val(sP,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValueAtCall(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2();










 for(M q: icfg.getCalleesOfCallAt(n)) {










 FlowFunction<D> callFlowFunction = flowFunctions.getCallFlowFunction(n, q);










 flowFunctionConstructionCount++;










 for(D dPrime: callFlowFunction.computeTargets(d)) {










 EdgeFunction<V> edgeFn = edgeFunctions.getCallEdgeFunction(n, d, q, dPrime);










 for(N startPoint: icfg.getStartPointsOf(q)) {










 propagateValue(startPoint,dPrime, edgeFn.computeTarget(val(n,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValue(N nHashN, D nHashD, V v) {










 synchronized (val) {










 V valNHash = val(nHashN, nHashD);










 V vPrime = valueLattice.join(valNHash,v);










 if(!vPrime.equals(valNHash)) {










 setVal(nHashN, nHashD, vPrime);










 synchronized (nodeWorklist) {










 nodeWorklist.add(new Pair<N,D>(nHashN,nHashD));










 }










 }










 }










 }





















 private V val(N nHashN, D nHashD){ 










 V l = val.get(nHashN, nHashD);










 if(l==null) return valueLattice.topElement(); //implicitly initialized to top; see line [1] of Fig. 7 in SRH96 paper










 else return l;










 }










 










 private void setVal(N nHashN, D nHashD,V l){ 










 val.put(nHashN, nHashD,l);










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 










 /**










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context










	 * @param edge an edge whose target node resembles a method call



......@@ -460,14 +346,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper










 return function;










 }










 }





















 /**










	 * Lines 21-32 of the algorithm.	










	 */



......@@ -580,6 +458,127 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 /**










	 * Computes the final values for edge functions.










	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 nodeWorklist.add(superGraphNode);










 }










 while(true) {










 synchronized (nodeWorklist) {










 if(!nodeWorklist.isEmpty()) {










 //pop job










 Pair<N,D> nAndD = nodeWorklist.remove(0); 










 numTasks.getAndIncrement();










 










 //dispatch processing of job (potentially in a different thread)










 executor.execute(new ValuePropagationTask(nAndD));










 } else if(numTasks.intValue()==0) {










 //node worklist is empty; no running tasks, we are done










 break;










 } else {










 //the node worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 nodeWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 }










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads










 Set<N> allNonCallStartNodes = icfg.allNonCallStartNodes();










 @SuppressWarnings("unchecked")










 N[] nonCallStartNodesArray = (N[]) new Object[allNonCallStartNodes.size()];










 int i=0;










 for (N n : allNonCallStartNodes) {










 nonCallStartNodesArray[i] = n;










 i++;










 } 










 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //wait until done










 executor.shutdown();










 try {










 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }





















 private void propagateValueAtStart(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2(); 










 M p = icfg.getMethodOf(n);










 for(N c: icfg.getCallsFromWithin(p)) { 










 Set<Entry<D, EdgeFunction<V>>> entries; 










 synchronized (jumpFn) {










 entries = jumpFn.forwardLookup(d,c).entrySet();










 for(Map.Entry<D,EdgeFunction<V>> dPAndFP: entries) {










 D dPrime = dPAndFP.getKey();










 EdgeFunction<V> fPrime = dPAndFP.getValue();










 N sP = n;










 propagateValue(c,dPrime,fPrime.computeTarget(val(sP,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValueAtCall(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2();










 for(M q: icfg.getCalleesOfCallAt(n)) {










 FlowFunction<D> callFlowFunction = flowFunctions.getCallFlowFunction(n, q);










 flowFunctionConstructionCount++;










 for(D dPrime: callFlowFunction.computeTargets(d)) {










 EdgeFunction<V> edgeFn = edgeFunctions.getCallEdgeFunction(n, d, q, dPrime);










 for(N startPoint: icfg.getStartPointsOf(q)) {










 propagateValue(startPoint,dPrime, edgeFn.computeTarget(val(n,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValue(N nHashN, D nHashD, V v) {










 synchronized (val) {










 V valNHash = val(nHashN, nHashD);










 V vPrime = valueLattice.join(valNHash,v);










 if(!vPrime.equals(valNHash)) {










 setVal(nHashN, nHashD, vPrime);










 synchronized (nodeWorklist) {










 nodeWorklist.add(new Pair<N,D>(nHashN,nHashD));










 }










 }










 }










 }





















 private V val(N nHashN, D nHashD){ 










 V l = val.get(nHashN, nHashD);










 if(l==null) return valueLattice.topElement(); //implicitly initialized to top; see line [1] of Fig. 7 in SRH96 paper










 else return l;










 }










 










 private void setVal(N nHashN, D nHashD,V l){ 










 val.put(nHashN, nHashD,l);










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper










 return function;










 }










 }





















 private Set<Cell<N, D, EdgeFunction<V>>> endSummary(N sP, D d3) {










 Table<N, D, EdgeFunction<V>> map = endSummary.get(sP, d3);










 if(map==null) return Collections.emptySet();



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

bcfdf777















Commit
bcfdf777


authored
Dec 12, 2012
by


Eric Bodden



Browse files




reordered some methods







parent
0378270e













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ bcfdf777






......@@ -274,120 +274,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 /**










	 * Computes the final values for edge functions.










	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 nodeWorklist.add(superGraphNode);










 }










 while(true) {










 synchronized (nodeWorklist) {










 if(!nodeWorklist.isEmpty()) {










 //pop job










 Pair<N,D> nAndD = nodeWorklist.remove(0); 










 numTasks.getAndIncrement();










 










 //dispatch processing of job (potentially in a different thread)










 executor.execute(new ValuePropagationTask(nAndD));










 } else if(numTasks.intValue()==0) {










 //node worklist is empty; no running tasks, we are done










 break;










 } else {










 //the node worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 nodeWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 }










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads










 Set<N> allNonCallStartNodes = icfg.allNonCallStartNodes();










 @SuppressWarnings("unchecked")










 N[] nonCallStartNodesArray = (N[]) new Object[allNonCallStartNodes.size()];










 int i=0;










 for (N n : allNonCallStartNodes) {










 nonCallStartNodesArray[i] = n;










 i++;










 } 










 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //wait until done










 executor.shutdown();










 try {










 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }





















 private void propagateValueAtStart(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2(); 










 M p = icfg.getMethodOf(n);










 for(N c: icfg.getCallsFromWithin(p)) { 










 Set<Entry<D, EdgeFunction<V>>> entries; 










 synchronized (jumpFn) {










 entries = jumpFn.forwardLookup(d,c).entrySet();










 for(Map.Entry<D,EdgeFunction<V>> dPAndFP: entries) {










 D dPrime = dPAndFP.getKey();










 EdgeFunction<V> fPrime = dPAndFP.getValue();










 N sP = n;










 propagateValue(c,dPrime,fPrime.computeTarget(val(sP,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValueAtCall(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2();










 for(M q: icfg.getCalleesOfCallAt(n)) {










 FlowFunction<D> callFlowFunction = flowFunctions.getCallFlowFunction(n, q);










 flowFunctionConstructionCount++;










 for(D dPrime: callFlowFunction.computeTargets(d)) {










 EdgeFunction<V> edgeFn = edgeFunctions.getCallEdgeFunction(n, d, q, dPrime);










 for(N startPoint: icfg.getStartPointsOf(q)) {










 propagateValue(startPoint,dPrime, edgeFn.computeTarget(val(n,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValue(N nHashN, D nHashD, V v) {










 synchronized (val) {










 V valNHash = val(nHashN, nHashD);










 V vPrime = valueLattice.join(valNHash,v);










 if(!vPrime.equals(valNHash)) {










 setVal(nHashN, nHashD, vPrime);










 synchronized (nodeWorklist) {










 nodeWorklist.add(new Pair<N,D>(nHashN,nHashD));










 }










 }










 }










 }





















 private V val(N nHashN, D nHashD){ 










 V l = val.get(nHashN, nHashD);










 if(l==null) return valueLattice.topElement(); //implicitly initialized to top; see line [1] of Fig. 7 in SRH96 paper










 else return l;










 }










 










 private void setVal(N nHashN, D nHashD,V l){ 










 val.put(nHashN, nHashD,l);










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 










 /**










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context










	 * @param edge an edge whose target node resembles a method call



......@@ -460,14 +346,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper










 return function;










 }










 }





















 /**










	 * Lines 21-32 of the algorithm.	










	 */



......@@ -580,6 +458,127 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 /**










	 * Computes the final values for edge functions.










	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 nodeWorklist.add(superGraphNode);










 }










 while(true) {










 synchronized (nodeWorklist) {










 if(!nodeWorklist.isEmpty()) {










 //pop job










 Pair<N,D> nAndD = nodeWorklist.remove(0); 










 numTasks.getAndIncrement();










 










 //dispatch processing of job (potentially in a different thread)










 executor.execute(new ValuePropagationTask(nAndD));










 } else if(numTasks.intValue()==0) {










 //node worklist is empty; no running tasks, we are done










 break;










 } else {










 //the node worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 nodeWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 }










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads










 Set<N> allNonCallStartNodes = icfg.allNonCallStartNodes();










 @SuppressWarnings("unchecked")










 N[] nonCallStartNodesArray = (N[]) new Object[allNonCallStartNodes.size()];










 int i=0;










 for (N n : allNonCallStartNodes) {










 nonCallStartNodesArray[i] = n;










 i++;










 } 










 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //wait until done










 executor.shutdown();










 try {










 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }





















 private void propagateValueAtStart(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2(); 










 M p = icfg.getMethodOf(n);










 for(N c: icfg.getCallsFromWithin(p)) { 










 Set<Entry<D, EdgeFunction<V>>> entries; 










 synchronized (jumpFn) {










 entries = jumpFn.forwardLookup(d,c).entrySet();










 for(Map.Entry<D,EdgeFunction<V>> dPAndFP: entries) {










 D dPrime = dPAndFP.getKey();










 EdgeFunction<V> fPrime = dPAndFP.getValue();










 N sP = n;










 propagateValue(c,dPrime,fPrime.computeTarget(val(sP,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValueAtCall(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2();










 for(M q: icfg.getCalleesOfCallAt(n)) {










 FlowFunction<D> callFlowFunction = flowFunctions.getCallFlowFunction(n, q);










 flowFunctionConstructionCount++;










 for(D dPrime: callFlowFunction.computeTargets(d)) {










 EdgeFunction<V> edgeFn = edgeFunctions.getCallEdgeFunction(n, d, q, dPrime);










 for(N startPoint: icfg.getStartPointsOf(q)) {










 propagateValue(startPoint,dPrime, edgeFn.computeTarget(val(n,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValue(N nHashN, D nHashD, V v) {










 synchronized (val) {










 V valNHash = val(nHashN, nHashD);










 V vPrime = valueLattice.join(valNHash,v);










 if(!vPrime.equals(valNHash)) {










 setVal(nHashN, nHashD, vPrime);










 synchronized (nodeWorklist) {










 nodeWorklist.add(new Pair<N,D>(nHashN,nHashD));










 }










 }










 }










 }





















 private V val(N nHashN, D nHashD){ 










 V l = val.get(nHashN, nHashD);










 if(l==null) return valueLattice.topElement(); //implicitly initialized to top; see line [1] of Fig. 7 in SRH96 paper










 else return l;










 }










 










 private void setVal(N nHashN, D nHashD,V l){ 










 val.put(nHashN, nHashD,l);










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper










 return function;










 }










 }





















 private Set<Cell<N, D, EdgeFunction<V>>> endSummary(N sP, D d3) {










 Table<N, D, EdgeFunction<V>> map = endSummary.get(sP, d3);










 if(map==null) return Collections.emptySet();



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

bcfdf777







Open sidebar



Joshua Garcia heros
Commits

bcfdf777




Open sidebar

Joshua Garcia heros
Commits

bcfdf777


Joshua GarciaherosherosCommits
bcfdf777








Commit
bcfdf777


authored
Dec 12, 2012
by


Eric Bodden



Browse files




reordered some methods







parent
0378270e













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ bcfdf777






......@@ -274,120 +274,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 /**










	 * Computes the final values for edge functions.










	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 nodeWorklist.add(superGraphNode);










 }










 while(true) {










 synchronized (nodeWorklist) {










 if(!nodeWorklist.isEmpty()) {










 //pop job










 Pair<N,D> nAndD = nodeWorklist.remove(0); 










 numTasks.getAndIncrement();










 










 //dispatch processing of job (potentially in a different thread)










 executor.execute(new ValuePropagationTask(nAndD));










 } else if(numTasks.intValue()==0) {










 //node worklist is empty; no running tasks, we are done










 break;










 } else {










 //the node worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 nodeWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 }










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads










 Set<N> allNonCallStartNodes = icfg.allNonCallStartNodes();










 @SuppressWarnings("unchecked")










 N[] nonCallStartNodesArray = (N[]) new Object[allNonCallStartNodes.size()];










 int i=0;










 for (N n : allNonCallStartNodes) {










 nonCallStartNodesArray[i] = n;










 i++;










 } 










 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //wait until done










 executor.shutdown();










 try {










 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }





















 private void propagateValueAtStart(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2(); 










 M p = icfg.getMethodOf(n);










 for(N c: icfg.getCallsFromWithin(p)) { 










 Set<Entry<D, EdgeFunction<V>>> entries; 










 synchronized (jumpFn) {










 entries = jumpFn.forwardLookup(d,c).entrySet();










 for(Map.Entry<D,EdgeFunction<V>> dPAndFP: entries) {










 D dPrime = dPAndFP.getKey();










 EdgeFunction<V> fPrime = dPAndFP.getValue();










 N sP = n;










 propagateValue(c,dPrime,fPrime.computeTarget(val(sP,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValueAtCall(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2();










 for(M q: icfg.getCalleesOfCallAt(n)) {










 FlowFunction<D> callFlowFunction = flowFunctions.getCallFlowFunction(n, q);










 flowFunctionConstructionCount++;










 for(D dPrime: callFlowFunction.computeTargets(d)) {










 EdgeFunction<V> edgeFn = edgeFunctions.getCallEdgeFunction(n, d, q, dPrime);










 for(N startPoint: icfg.getStartPointsOf(q)) {










 propagateValue(startPoint,dPrime, edgeFn.computeTarget(val(n,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValue(N nHashN, D nHashD, V v) {










 synchronized (val) {










 V valNHash = val(nHashN, nHashD);










 V vPrime = valueLattice.join(valNHash,v);










 if(!vPrime.equals(valNHash)) {










 setVal(nHashN, nHashD, vPrime);










 synchronized (nodeWorklist) {










 nodeWorklist.add(new Pair<N,D>(nHashN,nHashD));










 }










 }










 }










 }





















 private V val(N nHashN, D nHashD){ 










 V l = val.get(nHashN, nHashD);










 if(l==null) return valueLattice.topElement(); //implicitly initialized to top; see line [1] of Fig. 7 in SRH96 paper










 else return l;










 }










 










 private void setVal(N nHashN, D nHashD,V l){ 










 val.put(nHashN, nHashD,l);










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 










 /**










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context










	 * @param edge an edge whose target node resembles a method call



......@@ -460,14 +346,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper










 return function;










 }










 }





















 /**










	 * Lines 21-32 of the algorithm.	










	 */



......@@ -580,6 +458,127 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 /**










	 * Computes the final values for edge functions.










	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 nodeWorklist.add(superGraphNode);










 }










 while(true) {










 synchronized (nodeWorklist) {










 if(!nodeWorklist.isEmpty()) {










 //pop job










 Pair<N,D> nAndD = nodeWorklist.remove(0); 










 numTasks.getAndIncrement();










 










 //dispatch processing of job (potentially in a different thread)










 executor.execute(new ValuePropagationTask(nAndD));










 } else if(numTasks.intValue()==0) {










 //node worklist is empty; no running tasks, we are done










 break;










 } else {










 //the node worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 nodeWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 }










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads










 Set<N> allNonCallStartNodes = icfg.allNonCallStartNodes();










 @SuppressWarnings("unchecked")










 N[] nonCallStartNodesArray = (N[]) new Object[allNonCallStartNodes.size()];










 int i=0;










 for (N n : allNonCallStartNodes) {










 nonCallStartNodesArray[i] = n;










 i++;










 } 










 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //wait until done










 executor.shutdown();










 try {










 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }





















 private void propagateValueAtStart(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2(); 










 M p = icfg.getMethodOf(n);










 for(N c: icfg.getCallsFromWithin(p)) { 










 Set<Entry<D, EdgeFunction<V>>> entries; 










 synchronized (jumpFn) {










 entries = jumpFn.forwardLookup(d,c).entrySet();










 for(Map.Entry<D,EdgeFunction<V>> dPAndFP: entries) {










 D dPrime = dPAndFP.getKey();










 EdgeFunction<V> fPrime = dPAndFP.getValue();










 N sP = n;










 propagateValue(c,dPrime,fPrime.computeTarget(val(sP,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValueAtCall(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2();










 for(M q: icfg.getCalleesOfCallAt(n)) {










 FlowFunction<D> callFlowFunction = flowFunctions.getCallFlowFunction(n, q);










 flowFunctionConstructionCount++;










 for(D dPrime: callFlowFunction.computeTargets(d)) {










 EdgeFunction<V> edgeFn = edgeFunctions.getCallEdgeFunction(n, d, q, dPrime);










 for(N startPoint: icfg.getStartPointsOf(q)) {










 propagateValue(startPoint,dPrime, edgeFn.computeTarget(val(n,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValue(N nHashN, D nHashD, V v) {










 synchronized (val) {










 V valNHash = val(nHashN, nHashD);










 V vPrime = valueLattice.join(valNHash,v);










 if(!vPrime.equals(valNHash)) {










 setVal(nHashN, nHashD, vPrime);










 synchronized (nodeWorklist) {










 nodeWorklist.add(new Pair<N,D>(nHashN,nHashD));










 }










 }










 }










 }





















 private V val(N nHashN, D nHashD){ 










 V l = val.get(nHashN, nHashD);










 if(l==null) return valueLattice.topElement(); //implicitly initialized to top; see line [1] of Fig. 7 in SRH96 paper










 else return l;










 }










 










 private void setVal(N nHashN, D nHashD,V l){ 










 val.put(nHashN, nHashD,l);










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper










 return function;










 }










 }





















 private Set<Cell<N, D, EdgeFunction<V>>> endSummary(N sP, D d3) {










 Table<N, D, EdgeFunction<V>> map = endSummary.get(sP, d3);










 if(map==null) return Collections.emptySet();



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
bcfdf777


authored
Dec 12, 2012
by


Eric Bodden



Browse files




reordered some methods







parent
0378270e













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ bcfdf777






......@@ -274,120 +274,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 /**










	 * Computes the final values for edge functions.










	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 nodeWorklist.add(superGraphNode);










 }










 while(true) {










 synchronized (nodeWorklist) {










 if(!nodeWorklist.isEmpty()) {










 //pop job










 Pair<N,D> nAndD = nodeWorklist.remove(0); 










 numTasks.getAndIncrement();










 










 //dispatch processing of job (potentially in a different thread)










 executor.execute(new ValuePropagationTask(nAndD));










 } else if(numTasks.intValue()==0) {










 //node worklist is empty; no running tasks, we are done










 break;










 } else {










 //the node worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 nodeWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 }










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads










 Set<N> allNonCallStartNodes = icfg.allNonCallStartNodes();










 @SuppressWarnings("unchecked")










 N[] nonCallStartNodesArray = (N[]) new Object[allNonCallStartNodes.size()];










 int i=0;










 for (N n : allNonCallStartNodes) {










 nonCallStartNodesArray[i] = n;










 i++;










 } 










 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //wait until done










 executor.shutdown();










 try {










 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }





















 private void propagateValueAtStart(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2(); 










 M p = icfg.getMethodOf(n);










 for(N c: icfg.getCallsFromWithin(p)) { 










 Set<Entry<D, EdgeFunction<V>>> entries; 










 synchronized (jumpFn) {










 entries = jumpFn.forwardLookup(d,c).entrySet();










 for(Map.Entry<D,EdgeFunction<V>> dPAndFP: entries) {










 D dPrime = dPAndFP.getKey();










 EdgeFunction<V> fPrime = dPAndFP.getValue();










 N sP = n;










 propagateValue(c,dPrime,fPrime.computeTarget(val(sP,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValueAtCall(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2();










 for(M q: icfg.getCalleesOfCallAt(n)) {










 FlowFunction<D> callFlowFunction = flowFunctions.getCallFlowFunction(n, q);










 flowFunctionConstructionCount++;










 for(D dPrime: callFlowFunction.computeTargets(d)) {










 EdgeFunction<V> edgeFn = edgeFunctions.getCallEdgeFunction(n, d, q, dPrime);










 for(N startPoint: icfg.getStartPointsOf(q)) {










 propagateValue(startPoint,dPrime, edgeFn.computeTarget(val(n,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValue(N nHashN, D nHashD, V v) {










 synchronized (val) {










 V valNHash = val(nHashN, nHashD);










 V vPrime = valueLattice.join(valNHash,v);










 if(!vPrime.equals(valNHash)) {










 setVal(nHashN, nHashD, vPrime);










 synchronized (nodeWorklist) {










 nodeWorklist.add(new Pair<N,D>(nHashN,nHashD));










 }










 }










 }










 }





















 private V val(N nHashN, D nHashD){ 










 V l = val.get(nHashN, nHashD);










 if(l==null) return valueLattice.topElement(); //implicitly initialized to top; see line [1] of Fig. 7 in SRH96 paper










 else return l;










 }










 










 private void setVal(N nHashN, D nHashD,V l){ 










 val.put(nHashN, nHashD,l);










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 










 /**










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context










	 * @param edge an edge whose target node resembles a method call



......@@ -460,14 +346,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper










 return function;










 }










 }





















 /**










	 * Lines 21-32 of the algorithm.	










	 */



......@@ -580,6 +458,127 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 /**










	 * Computes the final values for edge functions.










	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 nodeWorklist.add(superGraphNode);










 }










 while(true) {










 synchronized (nodeWorklist) {










 if(!nodeWorklist.isEmpty()) {










 //pop job










 Pair<N,D> nAndD = nodeWorklist.remove(0); 










 numTasks.getAndIncrement();










 










 //dispatch processing of job (potentially in a different thread)










 executor.execute(new ValuePropagationTask(nAndD));










 } else if(numTasks.intValue()==0) {










 //node worklist is empty; no running tasks, we are done










 break;










 } else {










 //the node worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 nodeWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 }










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads










 Set<N> allNonCallStartNodes = icfg.allNonCallStartNodes();










 @SuppressWarnings("unchecked")










 N[] nonCallStartNodesArray = (N[]) new Object[allNonCallStartNodes.size()];










 int i=0;










 for (N n : allNonCallStartNodes) {










 nonCallStartNodesArray[i] = n;










 i++;










 } 










 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //wait until done










 executor.shutdown();










 try {










 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }





















 private void propagateValueAtStart(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2(); 










 M p = icfg.getMethodOf(n);










 for(N c: icfg.getCallsFromWithin(p)) { 










 Set<Entry<D, EdgeFunction<V>>> entries; 










 synchronized (jumpFn) {










 entries = jumpFn.forwardLookup(d,c).entrySet();










 for(Map.Entry<D,EdgeFunction<V>> dPAndFP: entries) {










 D dPrime = dPAndFP.getKey();










 EdgeFunction<V> fPrime = dPAndFP.getValue();










 N sP = n;










 propagateValue(c,dPrime,fPrime.computeTarget(val(sP,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValueAtCall(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2();










 for(M q: icfg.getCalleesOfCallAt(n)) {










 FlowFunction<D> callFlowFunction = flowFunctions.getCallFlowFunction(n, q);










 flowFunctionConstructionCount++;










 for(D dPrime: callFlowFunction.computeTargets(d)) {










 EdgeFunction<V> edgeFn = edgeFunctions.getCallEdgeFunction(n, d, q, dPrime);










 for(N startPoint: icfg.getStartPointsOf(q)) {










 propagateValue(startPoint,dPrime, edgeFn.computeTarget(val(n,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValue(N nHashN, D nHashD, V v) {










 synchronized (val) {










 V valNHash = val(nHashN, nHashD);










 V vPrime = valueLattice.join(valNHash,v);










 if(!vPrime.equals(valNHash)) {










 setVal(nHashN, nHashD, vPrime);










 synchronized (nodeWorklist) {










 nodeWorklist.add(new Pair<N,D>(nHashN,nHashD));










 }










 }










 }










 }





















 private V val(N nHashN, D nHashD){ 










 V l = val.get(nHashN, nHashD);










 if(l==null) return valueLattice.topElement(); //implicitly initialized to top; see line [1] of Fig. 7 in SRH96 paper










 else return l;










 }










 










 private void setVal(N nHashN, D nHashD,V l){ 










 val.put(nHashN, nHashD,l);










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper










 return function;










 }










 }





















 private Set<Cell<N, D, EdgeFunction<V>>> endSummary(N sP, D d3) {










 Table<N, D, EdgeFunction<V>> map = endSummary.get(sP, d3);










 if(map==null) return Collections.emptySet();



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
bcfdf777


authored
Dec 12, 2012
by


Eric Bodden



Browse files



Commit
bcfdf777


authored
Dec 12, 2012
by


Eric Bodden

bcfdf777authoredbyEric Bodden

reordered some methods






parent
0378270e
















parent
0378270e





parent












Changes
1
1


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/solver/IDESolver.java








View file @ bcfdf777






......@@ -274,120 +274,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 /**










	 * Computes the final values for edge functions.










	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 nodeWorklist.add(superGraphNode);










 }










 while(true) {










 synchronized (nodeWorklist) {










 if(!nodeWorklist.isEmpty()) {










 //pop job










 Pair<N,D> nAndD = nodeWorklist.remove(0); 










 numTasks.getAndIncrement();










 










 //dispatch processing of job (potentially in a different thread)










 executor.execute(new ValuePropagationTask(nAndD));










 } else if(numTasks.intValue()==0) {










 //node worklist is empty; no running tasks, we are done










 break;










 } else {










 //the node worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 nodeWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 }










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads










 Set<N> allNonCallStartNodes = icfg.allNonCallStartNodes();










 @SuppressWarnings("unchecked")










 N[] nonCallStartNodesArray = (N[]) new Object[allNonCallStartNodes.size()];










 int i=0;










 for (N n : allNonCallStartNodes) {










 nonCallStartNodesArray[i] = n;










 i++;










 } 










 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //wait until done










 executor.shutdown();










 try {










 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }





















 private void propagateValueAtStart(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2(); 










 M p = icfg.getMethodOf(n);










 for(N c: icfg.getCallsFromWithin(p)) { 










 Set<Entry<D, EdgeFunction<V>>> entries; 










 synchronized (jumpFn) {










 entries = jumpFn.forwardLookup(d,c).entrySet();










 for(Map.Entry<D,EdgeFunction<V>> dPAndFP: entries) {










 D dPrime = dPAndFP.getKey();










 EdgeFunction<V> fPrime = dPAndFP.getValue();










 N sP = n;










 propagateValue(c,dPrime,fPrime.computeTarget(val(sP,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValueAtCall(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2();










 for(M q: icfg.getCalleesOfCallAt(n)) {










 FlowFunction<D> callFlowFunction = flowFunctions.getCallFlowFunction(n, q);










 flowFunctionConstructionCount++;










 for(D dPrime: callFlowFunction.computeTargets(d)) {










 EdgeFunction<V> edgeFn = edgeFunctions.getCallEdgeFunction(n, d, q, dPrime);










 for(N startPoint: icfg.getStartPointsOf(q)) {










 propagateValue(startPoint,dPrime, edgeFn.computeTarget(val(n,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValue(N nHashN, D nHashD, V v) {










 synchronized (val) {










 V valNHash = val(nHashN, nHashD);










 V vPrime = valueLattice.join(valNHash,v);










 if(!vPrime.equals(valNHash)) {










 setVal(nHashN, nHashD, vPrime);










 synchronized (nodeWorklist) {










 nodeWorklist.add(new Pair<N,D>(nHashN,nHashD));










 }










 }










 }










 }





















 private V val(N nHashN, D nHashD){ 










 V l = val.get(nHashN, nHashD);










 if(l==null) return valueLattice.topElement(); //implicitly initialized to top; see line [1] of Fig. 7 in SRH96 paper










 else return l;










 }










 










 private void setVal(N nHashN, D nHashD,V l){ 










 val.put(nHashN, nHashD,l);










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 










 /**










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context










	 * @param edge an edge whose target node resembles a method call



......@@ -460,14 +346,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper










 return function;










 }










 }





















 /**










	 * Lines 21-32 of the algorithm.	










	 */



......@@ -580,6 +458,127 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 /**










	 * Computes the final values for edge functions.










	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 nodeWorklist.add(superGraphNode);










 }










 while(true) {










 synchronized (nodeWorklist) {










 if(!nodeWorklist.isEmpty()) {










 //pop job










 Pair<N,D> nAndD = nodeWorklist.remove(0); 










 numTasks.getAndIncrement();










 










 //dispatch processing of job (potentially in a different thread)










 executor.execute(new ValuePropagationTask(nAndD));










 } else if(numTasks.intValue()==0) {










 //node worklist is empty; no running tasks, we are done










 break;










 } else {










 //the node worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 nodeWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 }










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads










 Set<N> allNonCallStartNodes = icfg.allNonCallStartNodes();










 @SuppressWarnings("unchecked")










 N[] nonCallStartNodesArray = (N[]) new Object[allNonCallStartNodes.size()];










 int i=0;










 for (N n : allNonCallStartNodes) {










 nonCallStartNodesArray[i] = n;










 i++;










 } 










 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //wait until done










 executor.shutdown();










 try {










 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }





















 private void propagateValueAtStart(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2(); 










 M p = icfg.getMethodOf(n);










 for(N c: icfg.getCallsFromWithin(p)) { 










 Set<Entry<D, EdgeFunction<V>>> entries; 










 synchronized (jumpFn) {










 entries = jumpFn.forwardLookup(d,c).entrySet();










 for(Map.Entry<D,EdgeFunction<V>> dPAndFP: entries) {










 D dPrime = dPAndFP.getKey();










 EdgeFunction<V> fPrime = dPAndFP.getValue();










 N sP = n;










 propagateValue(c,dPrime,fPrime.computeTarget(val(sP,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValueAtCall(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2();










 for(M q: icfg.getCalleesOfCallAt(n)) {










 FlowFunction<D> callFlowFunction = flowFunctions.getCallFlowFunction(n, q);










 flowFunctionConstructionCount++;










 for(D dPrime: callFlowFunction.computeTargets(d)) {










 EdgeFunction<V> edgeFn = edgeFunctions.getCallEdgeFunction(n, d, q, dPrime);










 for(N startPoint: icfg.getStartPointsOf(q)) {










 propagateValue(startPoint,dPrime, edgeFn.computeTarget(val(n,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValue(N nHashN, D nHashD, V v) {










 synchronized (val) {










 V valNHash = val(nHashN, nHashD);










 V vPrime = valueLattice.join(valNHash,v);










 if(!vPrime.equals(valNHash)) {










 setVal(nHashN, nHashD, vPrime);










 synchronized (nodeWorklist) {










 nodeWorklist.add(new Pair<N,D>(nHashN,nHashD));










 }










 }










 }










 }





















 private V val(N nHashN, D nHashD){ 










 V l = val.get(nHashN, nHashD);










 if(l==null) return valueLattice.topElement(); //implicitly initialized to top; see line [1] of Fig. 7 in SRH96 paper










 else return l;










 }










 










 private void setVal(N nHashN, D nHashD,V l){ 










 val.put(nHashN, nHashD,l);










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper










 return function;










 }










 }





















 private Set<Cell<N, D, EdgeFunction<V>>> endSummary(N sP, D d3) {










 Table<N, D, EdgeFunction<V>> map = endSummary.get(sP, d3);










 if(map==null) return Collections.emptySet();



......














src/heros/solver/IDESolver.java








View file @ bcfdf777






......@@ -274,120 +274,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 /**










	 * Computes the final values for edge functions.










	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 nodeWorklist.add(superGraphNode);










 }










 while(true) {










 synchronized (nodeWorklist) {










 if(!nodeWorklist.isEmpty()) {










 //pop job










 Pair<N,D> nAndD = nodeWorklist.remove(0); 










 numTasks.getAndIncrement();










 










 //dispatch processing of job (potentially in a different thread)










 executor.execute(new ValuePropagationTask(nAndD));










 } else if(numTasks.intValue()==0) {










 //node worklist is empty; no running tasks, we are done










 break;










 } else {










 //the node worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 nodeWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 }










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads










 Set<N> allNonCallStartNodes = icfg.allNonCallStartNodes();










 @SuppressWarnings("unchecked")










 N[] nonCallStartNodesArray = (N[]) new Object[allNonCallStartNodes.size()];










 int i=0;










 for (N n : allNonCallStartNodes) {










 nonCallStartNodesArray[i] = n;










 i++;










 } 










 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //wait until done










 executor.shutdown();










 try {










 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }





















 private void propagateValueAtStart(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2(); 










 M p = icfg.getMethodOf(n);










 for(N c: icfg.getCallsFromWithin(p)) { 










 Set<Entry<D, EdgeFunction<V>>> entries; 










 synchronized (jumpFn) {










 entries = jumpFn.forwardLookup(d,c).entrySet();










 for(Map.Entry<D,EdgeFunction<V>> dPAndFP: entries) {










 D dPrime = dPAndFP.getKey();










 EdgeFunction<V> fPrime = dPAndFP.getValue();










 N sP = n;










 propagateValue(c,dPrime,fPrime.computeTarget(val(sP,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValueAtCall(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2();










 for(M q: icfg.getCalleesOfCallAt(n)) {










 FlowFunction<D> callFlowFunction = flowFunctions.getCallFlowFunction(n, q);










 flowFunctionConstructionCount++;










 for(D dPrime: callFlowFunction.computeTargets(d)) {










 EdgeFunction<V> edgeFn = edgeFunctions.getCallEdgeFunction(n, d, q, dPrime);










 for(N startPoint: icfg.getStartPointsOf(q)) {










 propagateValue(startPoint,dPrime, edgeFn.computeTarget(val(n,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValue(N nHashN, D nHashD, V v) {










 synchronized (val) {










 V valNHash = val(nHashN, nHashD);










 V vPrime = valueLattice.join(valNHash,v);










 if(!vPrime.equals(valNHash)) {










 setVal(nHashN, nHashD, vPrime);










 synchronized (nodeWorklist) {










 nodeWorklist.add(new Pair<N,D>(nHashN,nHashD));










 }










 }










 }










 }





















 private V val(N nHashN, D nHashD){ 










 V l = val.get(nHashN, nHashD);










 if(l==null) return valueLattice.topElement(); //implicitly initialized to top; see line [1] of Fig. 7 in SRH96 paper










 else return l;










 }










 










 private void setVal(N nHashN, D nHashD,V l){ 










 val.put(nHashN, nHashD,l);










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 










 /**










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context










	 * @param edge an edge whose target node resembles a method call



......@@ -460,14 +346,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper










 return function;










 }










 }





















 /**










	 * Lines 21-32 of the algorithm.	










	 */



......@@ -580,6 +458,127 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 /**










	 * Computes the final values for edge functions.










	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 nodeWorklist.add(superGraphNode);










 }










 while(true) {










 synchronized (nodeWorklist) {










 if(!nodeWorklist.isEmpty()) {










 //pop job










 Pair<N,D> nAndD = nodeWorklist.remove(0); 










 numTasks.getAndIncrement();










 










 //dispatch processing of job (potentially in a different thread)










 executor.execute(new ValuePropagationTask(nAndD));










 } else if(numTasks.intValue()==0) {










 //node worklist is empty; no running tasks, we are done










 break;










 } else {










 //the node worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 nodeWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 }










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads










 Set<N> allNonCallStartNodes = icfg.allNonCallStartNodes();










 @SuppressWarnings("unchecked")










 N[] nonCallStartNodesArray = (N[]) new Object[allNonCallStartNodes.size()];










 int i=0;










 for (N n : allNonCallStartNodes) {










 nonCallStartNodesArray[i] = n;










 i++;










 } 










 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //wait until done










 executor.shutdown();










 try {










 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }





















 private void propagateValueAtStart(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2(); 










 M p = icfg.getMethodOf(n);










 for(N c: icfg.getCallsFromWithin(p)) { 










 Set<Entry<D, EdgeFunction<V>>> entries; 










 synchronized (jumpFn) {










 entries = jumpFn.forwardLookup(d,c).entrySet();










 for(Map.Entry<D,EdgeFunction<V>> dPAndFP: entries) {










 D dPrime = dPAndFP.getKey();










 EdgeFunction<V> fPrime = dPAndFP.getValue();










 N sP = n;










 propagateValue(c,dPrime,fPrime.computeTarget(val(sP,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValueAtCall(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2();










 for(M q: icfg.getCalleesOfCallAt(n)) {










 FlowFunction<D> callFlowFunction = flowFunctions.getCallFlowFunction(n, q);










 flowFunctionConstructionCount++;










 for(D dPrime: callFlowFunction.computeTargets(d)) {










 EdgeFunction<V> edgeFn = edgeFunctions.getCallEdgeFunction(n, d, q, dPrime);










 for(N startPoint: icfg.getStartPointsOf(q)) {










 propagateValue(startPoint,dPrime, edgeFn.computeTarget(val(n,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValue(N nHashN, D nHashD, V v) {










 synchronized (val) {










 V valNHash = val(nHashN, nHashD);










 V vPrime = valueLattice.join(valNHash,v);










 if(!vPrime.equals(valNHash)) {










 setVal(nHashN, nHashD, vPrime);










 synchronized (nodeWorklist) {










 nodeWorklist.add(new Pair<N,D>(nHashN,nHashD));










 }










 }










 }










 }





















 private V val(N nHashN, D nHashD){ 










 V l = val.get(nHashN, nHashD);










 if(l==null) return valueLattice.topElement(); //implicitly initialized to top; see line [1] of Fig. 7 in SRH96 paper










 else return l;










 }










 










 private void setVal(N nHashN, D nHashD,V l){ 










 val.put(nHashN, nHashD,l);










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper










 return function;










 }










 }





















 private Set<Cell<N, D, EdgeFunction<V>>> endSummary(N sP, D d3) {










 Table<N, D, EdgeFunction<V>> map = endSummary.get(sP, d3);










 if(map==null) return Collections.emptySet();



......












src/heros/solver/IDESolver.java








View file @ bcfdf777








src/heros/solver/IDESolver.java










View file @ bcfdf777


bcfdf777



......@@ -274,120 +274,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 /**










	 * Computes the final values for edge functions.










	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 nodeWorklist.add(superGraphNode);










 }










 while(true) {










 synchronized (nodeWorklist) {










 if(!nodeWorklist.isEmpty()) {










 //pop job










 Pair<N,D> nAndD = nodeWorklist.remove(0); 










 numTasks.getAndIncrement();










 










 //dispatch processing of job (potentially in a different thread)










 executor.execute(new ValuePropagationTask(nAndD));










 } else if(numTasks.intValue()==0) {










 //node worklist is empty; no running tasks, we are done










 break;










 } else {










 //the node worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 nodeWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 }










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads










 Set<N> allNonCallStartNodes = icfg.allNonCallStartNodes();










 @SuppressWarnings("unchecked")










 N[] nonCallStartNodesArray = (N[]) new Object[allNonCallStartNodes.size()];










 int i=0;










 for (N n : allNonCallStartNodes) {










 nonCallStartNodesArray[i] = n;










 i++;










 } 










 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //wait until done










 executor.shutdown();










 try {










 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }





















 private void propagateValueAtStart(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2(); 










 M p = icfg.getMethodOf(n);










 for(N c: icfg.getCallsFromWithin(p)) { 










 Set<Entry<D, EdgeFunction<V>>> entries; 










 synchronized (jumpFn) {










 entries = jumpFn.forwardLookup(d,c).entrySet();










 for(Map.Entry<D,EdgeFunction<V>> dPAndFP: entries) {










 D dPrime = dPAndFP.getKey();










 EdgeFunction<V> fPrime = dPAndFP.getValue();










 N sP = n;










 propagateValue(c,dPrime,fPrime.computeTarget(val(sP,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValueAtCall(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2();










 for(M q: icfg.getCalleesOfCallAt(n)) {










 FlowFunction<D> callFlowFunction = flowFunctions.getCallFlowFunction(n, q);










 flowFunctionConstructionCount++;










 for(D dPrime: callFlowFunction.computeTargets(d)) {










 EdgeFunction<V> edgeFn = edgeFunctions.getCallEdgeFunction(n, d, q, dPrime);










 for(N startPoint: icfg.getStartPointsOf(q)) {










 propagateValue(startPoint,dPrime, edgeFn.computeTarget(val(n,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValue(N nHashN, D nHashD, V v) {










 synchronized (val) {










 V valNHash = val(nHashN, nHashD);










 V vPrime = valueLattice.join(valNHash,v);










 if(!vPrime.equals(valNHash)) {










 setVal(nHashN, nHashD, vPrime);










 synchronized (nodeWorklist) {










 nodeWorklist.add(new Pair<N,D>(nHashN,nHashD));










 }










 }










 }










 }





















 private V val(N nHashN, D nHashD){ 










 V l = val.get(nHashN, nHashD);










 if(l==null) return valueLattice.topElement(); //implicitly initialized to top; see line [1] of Fig. 7 in SRH96 paper










 else return l;










 }










 










 private void setVal(N nHashN, D nHashD,V l){ 










 val.put(nHashN, nHashD,l);










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 










 /**










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context










	 * @param edge an edge whose target node resembles a method call



......@@ -460,14 +346,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper










 return function;










 }










 }





















 /**










	 * Lines 21-32 of the algorithm.	










	 */



......@@ -580,6 +458,127 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 /**










	 * Computes the final values for edge functions.










	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 nodeWorklist.add(superGraphNode);










 }










 while(true) {










 synchronized (nodeWorklist) {










 if(!nodeWorklist.isEmpty()) {










 //pop job










 Pair<N,D> nAndD = nodeWorklist.remove(0); 










 numTasks.getAndIncrement();










 










 //dispatch processing of job (potentially in a different thread)










 executor.execute(new ValuePropagationTask(nAndD));










 } else if(numTasks.intValue()==0) {










 //node worklist is empty; no running tasks, we are done










 break;










 } else {










 //the node worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 nodeWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 }










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads










 Set<N> allNonCallStartNodes = icfg.allNonCallStartNodes();










 @SuppressWarnings("unchecked")










 N[] nonCallStartNodesArray = (N[]) new Object[allNonCallStartNodes.size()];










 int i=0;










 for (N n : allNonCallStartNodes) {










 nonCallStartNodesArray[i] = n;










 i++;










 } 










 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //wait until done










 executor.shutdown();










 try {










 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }





















 private void propagateValueAtStart(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2(); 










 M p = icfg.getMethodOf(n);










 for(N c: icfg.getCallsFromWithin(p)) { 










 Set<Entry<D, EdgeFunction<V>>> entries; 










 synchronized (jumpFn) {










 entries = jumpFn.forwardLookup(d,c).entrySet();










 for(Map.Entry<D,EdgeFunction<V>> dPAndFP: entries) {










 D dPrime = dPAndFP.getKey();










 EdgeFunction<V> fPrime = dPAndFP.getValue();










 N sP = n;










 propagateValue(c,dPrime,fPrime.computeTarget(val(sP,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValueAtCall(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2();










 for(M q: icfg.getCalleesOfCallAt(n)) {










 FlowFunction<D> callFlowFunction = flowFunctions.getCallFlowFunction(n, q);










 flowFunctionConstructionCount++;










 for(D dPrime: callFlowFunction.computeTargets(d)) {










 EdgeFunction<V> edgeFn = edgeFunctions.getCallEdgeFunction(n, d, q, dPrime);










 for(N startPoint: icfg.getStartPointsOf(q)) {










 propagateValue(startPoint,dPrime, edgeFn.computeTarget(val(n,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValue(N nHashN, D nHashD, V v) {










 synchronized (val) {










 V valNHash = val(nHashN, nHashD);










 V vPrime = valueLattice.join(valNHash,v);










 if(!vPrime.equals(valNHash)) {










 setVal(nHashN, nHashD, vPrime);










 synchronized (nodeWorklist) {










 nodeWorklist.add(new Pair<N,D>(nHashN,nHashD));










 }










 }










 }










 }





















 private V val(N nHashN, D nHashD){ 










 V l = val.get(nHashN, nHashD);










 if(l==null) return valueLattice.topElement(); //implicitly initialized to top; see line [1] of Fig. 7 in SRH96 paper










 else return l;










 }










 










 private void setVal(N nHashN, D nHashD,V l){ 










 val.put(nHashN, nHashD,l);










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper










 return function;










 }










 }





















 private Set<Cell<N, D, EdgeFunction<V>>> endSummary(N sP, D d3) {










 Table<N, D, EdgeFunction<V>> map = endSummary.get(sP, d3);










 if(map==null) return Collections.emptySet();



......






......@@ -274,120 +274,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 /**










	 * Computes the final values for edge functions.










	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 nodeWorklist.add(superGraphNode);










 }










 while(true) {










 synchronized (nodeWorklist) {










 if(!nodeWorklist.isEmpty()) {










 //pop job










 Pair<N,D> nAndD = nodeWorklist.remove(0); 










 numTasks.getAndIncrement();










 










 //dispatch processing of job (potentially in a different thread)










 executor.execute(new ValuePropagationTask(nAndD));










 } else if(numTasks.intValue()==0) {










 //node worklist is empty; no running tasks, we are done










 break;










 } else {










 //the node worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 nodeWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 }










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads










 Set<N> allNonCallStartNodes = icfg.allNonCallStartNodes();










 @SuppressWarnings("unchecked")










 N[] nonCallStartNodesArray = (N[]) new Object[allNonCallStartNodes.size()];










 int i=0;










 for (N n : allNonCallStartNodes) {










 nonCallStartNodesArray[i] = n;










 i++;










 } 










 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //wait until done










 executor.shutdown();










 try {










 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }





















 private void propagateValueAtStart(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2(); 










 M p = icfg.getMethodOf(n);










 for(N c: icfg.getCallsFromWithin(p)) { 










 Set<Entry<D, EdgeFunction<V>>> entries; 










 synchronized (jumpFn) {










 entries = jumpFn.forwardLookup(d,c).entrySet();










 for(Map.Entry<D,EdgeFunction<V>> dPAndFP: entries) {










 D dPrime = dPAndFP.getKey();










 EdgeFunction<V> fPrime = dPAndFP.getValue();










 N sP = n;










 propagateValue(c,dPrime,fPrime.computeTarget(val(sP,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValueAtCall(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2();










 for(M q: icfg.getCalleesOfCallAt(n)) {










 FlowFunction<D> callFlowFunction = flowFunctions.getCallFlowFunction(n, q);










 flowFunctionConstructionCount++;










 for(D dPrime: callFlowFunction.computeTargets(d)) {










 EdgeFunction<V> edgeFn = edgeFunctions.getCallEdgeFunction(n, d, q, dPrime);










 for(N startPoint: icfg.getStartPointsOf(q)) {










 propagateValue(startPoint,dPrime, edgeFn.computeTarget(val(n,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValue(N nHashN, D nHashD, V v) {










 synchronized (val) {










 V valNHash = val(nHashN, nHashD);










 V vPrime = valueLattice.join(valNHash,v);










 if(!vPrime.equals(valNHash)) {










 setVal(nHashN, nHashD, vPrime);










 synchronized (nodeWorklist) {










 nodeWorklist.add(new Pair<N,D>(nHashN,nHashD));










 }










 }










 }










 }





















 private V val(N nHashN, D nHashD){ 










 V l = val.get(nHashN, nHashD);










 if(l==null) return valueLattice.topElement(); //implicitly initialized to top; see line [1] of Fig. 7 in SRH96 paper










 else return l;










 }










 










 private void setVal(N nHashN, D nHashD,V l){ 










 val.put(nHashN, nHashD,l);










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 










 /**










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context










	 * @param edge an edge whose target node resembles a method call



......@@ -460,14 +346,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper










 return function;










 }










 }





















 /**










	 * Lines 21-32 of the algorithm.	










	 */



......@@ -580,6 +458,127 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 /**










	 * Computes the final values for edge functions.










	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 nodeWorklist.add(superGraphNode);










 }










 while(true) {










 synchronized (nodeWorklist) {










 if(!nodeWorklist.isEmpty()) {










 //pop job










 Pair<N,D> nAndD = nodeWorklist.remove(0); 










 numTasks.getAndIncrement();










 










 //dispatch processing of job (potentially in a different thread)










 executor.execute(new ValuePropagationTask(nAndD));










 } else if(numTasks.intValue()==0) {










 //node worklist is empty; no running tasks, we are done










 break;










 } else {










 //the node worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 nodeWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 }










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads










 Set<N> allNonCallStartNodes = icfg.allNonCallStartNodes();










 @SuppressWarnings("unchecked")










 N[] nonCallStartNodesArray = (N[]) new Object[allNonCallStartNodes.size()];










 int i=0;










 for (N n : allNonCallStartNodes) {










 nonCallStartNodesArray[i] = n;










 i++;










 } 










 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //wait until done










 executor.shutdown();










 try {










 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }





















 private void propagateValueAtStart(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2(); 










 M p = icfg.getMethodOf(n);










 for(N c: icfg.getCallsFromWithin(p)) { 










 Set<Entry<D, EdgeFunction<V>>> entries; 










 synchronized (jumpFn) {










 entries = jumpFn.forwardLookup(d,c).entrySet();










 for(Map.Entry<D,EdgeFunction<V>> dPAndFP: entries) {










 D dPrime = dPAndFP.getKey();










 EdgeFunction<V> fPrime = dPAndFP.getValue();










 N sP = n;










 propagateValue(c,dPrime,fPrime.computeTarget(val(sP,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValueAtCall(Pair<N, D> nAndD, N n) {










 D d = nAndD.getO2();










 for(M q: icfg.getCalleesOfCallAt(n)) {










 FlowFunction<D> callFlowFunction = flowFunctions.getCallFlowFunction(n, q);










 flowFunctionConstructionCount++;










 for(D dPrime: callFlowFunction.computeTargets(d)) {










 EdgeFunction<V> edgeFn = edgeFunctions.getCallEdgeFunction(n, d, q, dPrime);










 for(N startPoint: icfg.getStartPointsOf(q)) {










 propagateValue(startPoint,dPrime, edgeFn.computeTarget(val(n,d)));










 flowFunctionApplicationCount++;










 }










 }










 }










 }










 










 private void propagateValue(N nHashN, D nHashD, V v) {










 synchronized (val) {










 V valNHash = val(nHashN, nHashD);










 V vPrime = valueLattice.join(valNHash,v);










 if(!vPrime.equals(valNHash)) {










 setVal(nHashN, nHashD, vPrime);










 synchronized (nodeWorklist) {










 nodeWorklist.add(new Pair<N,D>(nHashN,nHashD));










 }










 }










 }










 }





















 private V val(N nHashN, D nHashD){ 










 V l = val.get(nHashN, nHashD);










 if(l==null) return valueLattice.topElement(); //implicitly initialized to top; see line [1] of Fig. 7 in SRH96 paper










 else return l;










 }










 










 private void setVal(N nHashN, D nHashD,V l){ 










 val.put(nHashN, nHashD,l);










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper










 return function;










 }










 }





















 private Set<Cell<N, D, EdgeFunction<V>>> endSummary(N sP, D d3) {










 Table<N, D, EdgeFunction<V>> map = endSummary.get(sP, d3);










 if(map==null) return Collections.emptySet();



......


 }} }}  /**/**	 * Computes the final values for edge functions.	 * Computes the final values for edge functions.	 */	 */ private void computeValues() { privatevoidcomputeValues(){ //Phase II(i)//Phase II(i) for(N startPoint: initialSeeds) {for(NstartPoint:initialSeeds){ setVal(startPoint, zeroValue, valueLattice.bottomElement());setVal(startPoint,zeroValue,valueLattice.bottomElement()); Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); Pair<N,D>superGraphNode=newPair<N,D>(startPoint,zeroValue); nodeWorklist.add(superGraphNode);nodeWorklist.add(superGraphNode); }} while(true) {while(true){ synchronized (nodeWorklist) {synchronized(nodeWorklist){ if(!nodeWorklist.isEmpty()) {if(!nodeWorklist.isEmpty()){ //pop job//pop job Pair<N,D> nAndD = nodeWorklist.remove(0); Pair<N,D>nAndD=nodeWorklist.remove(0); numTasks.getAndIncrement();numTasks.getAndIncrement();  //dispatch processing of job (potentially in a different thread)//dispatch processing of job (potentially in a different thread) executor.execute(new ValuePropagationTask(nAndD));executor.execute(newValuePropagationTask(nAndD)); } else if(numTasks.intValue()==0) {}elseif(numTasks.intValue()==0){ //node worklist is empty; no running tasks, we are done//node worklist is empty; no running tasks, we are done break;break; } else {}else{ //the node worklist is empty but we still have running tasks//the node worklist is empty but we still have running tasks //wait until woken up, then try again//wait until woken up, then try again try {try{ nodeWorklist.wait();nodeWorklist.wait(); } catch (InterruptedException e) {}catch(InterruptedExceptione){ throw new RuntimeException(e);thrownewRuntimeException(e); }} }} }} }} //Phase II(ii)//Phase II(ii) //we create an array of all nodes and then dispatch fractions of this array to multiple threads//we create an array of all nodes and then dispatch fractions of this array to multiple threads Set<N> allNonCallStartNodes = icfg.allNonCallStartNodes();Set<N>allNonCallStartNodes=icfg.allNonCallStartNodes(); @SuppressWarnings("unchecked")@SuppressWarnings("unchecked") N[] nonCallStartNodesArray = (N[]) new Object[allNonCallStartNodes.size()];N[]nonCallStartNodesArray=(N[])newObject[allNonCallStartNodes.size()]; int i=0;inti=0; for (N n : allNonCallStartNodes) {for(Nn:allNonCallStartNodes){ nonCallStartNodesArray[i] = n;nonCallStartNodesArray[i]=n; i++;i++; } } for(int t=0;t<numThreads; t++) {for(intt=0;t<numThreads;t++){ executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));executor.execute(newValueComputationTask(nonCallStartNodesArray,t)); }} //wait until done//wait until done executor.shutdown();executor.shutdown(); try {try{ executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);executor.awaitTermination(Long.MAX_VALUE,TimeUnit.DAYS); } catch (InterruptedException e) {}catch(InterruptedExceptione){ throw new RuntimeException(e);thrownewRuntimeException(e); }} }} private void propagateValueAtStart(Pair<N, D> nAndD, N n) {privatevoidpropagateValueAtStart(Pair<N,D>nAndD,Nn){ D d = nAndD.getO2(); Dd=nAndD.getO2(); M p = icfg.getMethodOf(n);Mp=icfg.getMethodOf(n); for(N c: icfg.getCallsFromWithin(p)) { for(Nc:icfg.getCallsFromWithin(p)){ Set<Entry<D, EdgeFunction<V>>> entries; Set<Entry<D,EdgeFunction<V>>>entries; synchronized (jumpFn) {synchronized(jumpFn){ entries = jumpFn.forwardLookup(d,c).entrySet();entries=jumpFn.forwardLookup(d,c).entrySet(); for(Map.Entry<D,EdgeFunction<V>> dPAndFP: entries) {for(Map.Entry<D,EdgeFunction<V>>dPAndFP:entries){ D dPrime = dPAndFP.getKey();DdPrime=dPAndFP.getKey(); EdgeFunction<V> fPrime = dPAndFP.getValue();EdgeFunction<V>fPrime=dPAndFP.getValue(); N sP = n;NsP=n; propagateValue(c,dPrime,fPrime.computeTarget(val(sP,d)));propagateValue(c,dPrime,fPrime.computeTarget(val(sP,d))); flowFunctionApplicationCount++;flowFunctionApplicationCount++; }} }} }} }}  private void propagateValueAtCall(Pair<N, D> nAndD, N n) {privatevoidpropagateValueAtCall(Pair<N,D>nAndD,Nn){ D d = nAndD.getO2();Dd=nAndD.getO2(); for(M q: icfg.getCalleesOfCallAt(n)) {for(Mq:icfg.getCalleesOfCallAt(n)){ FlowFunction<D> callFlowFunction = flowFunctions.getCallFlowFunction(n, q);FlowFunction<D>callFlowFunction=flowFunctions.getCallFlowFunction(n,q); flowFunctionConstructionCount++;flowFunctionConstructionCount++; for(D dPrime: callFlowFunction.computeTargets(d)) {for(DdPrime:callFlowFunction.computeTargets(d)){ EdgeFunction<V> edgeFn = edgeFunctions.getCallEdgeFunction(n, d, q, dPrime);EdgeFunction<V>edgeFn=edgeFunctions.getCallEdgeFunction(n,d,q,dPrime); for(N startPoint: icfg.getStartPointsOf(q)) {for(NstartPoint:icfg.getStartPointsOf(q)){ propagateValue(startPoint,dPrime, edgeFn.computeTarget(val(n,d)));propagateValue(startPoint,dPrime,edgeFn.computeTarget(val(n,d))); flowFunctionApplicationCount++;flowFunctionApplicationCount++; }} }} }} }}  private void propagateValue(N nHashN, D nHashD, V v) {privatevoidpropagateValue(NnHashN,DnHashD,Vv){ synchronized (val) {synchronized(val){ V valNHash = val(nHashN, nHashD);VvalNHash=val(nHashN,nHashD); V vPrime = valueLattice.join(valNHash,v);VvPrime=valueLattice.join(valNHash,v); if(!vPrime.equals(valNHash)) {if(!vPrime.equals(valNHash)){ setVal(nHashN, nHashD, vPrime);setVal(nHashN,nHashD,vPrime); synchronized (nodeWorklist) {synchronized(nodeWorklist){ nodeWorklist.add(new Pair<N,D>(nHashN,nHashD));nodeWorklist.add(newPair<N,D>(nHashN,nHashD)); }} }} }} }} private V val(N nHashN, D nHashD){ privateVval(NnHashN,DnHashD){ V l = val.get(nHashN, nHashD);Vl=val.get(nHashN,nHashD); if(l==null) return valueLattice.topElement(); //implicitly initialized to top; see line [1] of Fig. 7 in SRH96 paperif(l==null)returnvalueLattice.topElement();//implicitly initialized to top; see line [1] of Fig. 7 in SRH96 paper else return l;elsereturnl; }}  private void setVal(N nHashN, D nHashD,V l){ privatevoidsetVal(NnHashN,DnHashD,Vl){ val.put(nHashN, nHashD,l);val.put(nHashN,nHashD,l); if(DEBUG)if(DEBUG) System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+" "+l); }}  /**/**	 * Lines 13-20 of the algorithm; processing a call site in the caller's context	 * Lines 13-20 of the algorithm; processing a call site in the caller's context	 * @param edge an edge whose target node resembles a method call	 * @param edge an edge whose target node resembles a method call }} }} private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {privateEdgeFunction<V>jumpFunction(PathEdge<N,D,M>edge){ synchronized (jumpFn) {synchronized(jumpFn){ EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());EdgeFunction<V>function=jumpFn.forwardLookup(edge.factAtSource(),edge.getTarget()).get(edge.factAtTarget()); if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paperif(function==null)returnallTop;//JumpFn initialized to all-top, see line [2] in SRH96 paper return function;returnfunction; }} }} /**/**	 * Lines 21-32 of the algorithm.		 * Lines 21-32 of the algorithm.		 */	 */ }} }}  /**/**	 * Computes the final values for edge functions.	 * Computes the final values for edge functions.	 */	 */ private void computeValues() { privatevoidcomputeValues(){ //Phase II(i)//Phase II(i) for(N startPoint: initialSeeds) {for(NstartPoint:initialSeeds){ setVal(startPoint, zeroValue, valueLattice.bottomElement());setVal(startPoint,zeroValue,valueLattice.bottomElement()); Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); Pair<N,D>superGraphNode=newPair<N,D>(startPoint,zeroValue); nodeWorklist.add(superGraphNode);nodeWorklist.add(superGraphNode); }} while(true) {while(true){ synchronized (nodeWorklist) {synchronized(nodeWorklist){ if(!nodeWorklist.isEmpty()) {if(!nodeWorklist.isEmpty()){ //pop job//pop job Pair<N,D> nAndD = nodeWorklist.remove(0); Pair<N,D>nAndD=nodeWorklist.remove(0); numTasks.getAndIncrement();numTasks.getAndIncrement();  //dispatch processing of job (potentially in a different thread)//dispatch processing of job (potentially in a different thread) executor.execute(new ValuePropagationTask(nAndD));executor.execute(newValuePropagationTask(nAndD)); } else if(numTasks.intValue()==0) {}elseif(numTasks.intValue()==0){ //node worklist is empty; no running tasks, we are done//node worklist is empty; no running tasks, we are done break;break; } else {}else{ //the node worklist is empty but we still have running tasks//the node worklist is empty but we still have running tasks //wait until woken up, then try again//wait until woken up, then try again try {try{ nodeWorklist.wait();nodeWorklist.wait(); } catch (InterruptedException e) {}catch(InterruptedExceptione){ throw new RuntimeException(e);thrownewRuntimeException(e); }} }} }} }} //Phase II(ii)//Phase II(ii) //we create an array of all nodes and then dispatch fractions of this array to multiple threads//we create an array of all nodes and then dispatch fractions of this array to multiple threads Set<N> allNonCallStartNodes = icfg.allNonCallStartNodes();Set<N>allNonCallStartNodes=icfg.allNonCallStartNodes(); @SuppressWarnings("unchecked")@SuppressWarnings("unchecked") N[] nonCallStartNodesArray = (N[]) new Object[allNonCallStartNodes.size()];N[]nonCallStartNodesArray=(N[])newObject[allNonCallStartNodes.size()]; int i=0;inti=0; for (N n : allNonCallStartNodes) {for(Nn:allNonCallStartNodes){ nonCallStartNodesArray[i] = n;nonCallStartNodesArray[i]=n; i++;i++; } } for(int t=0;t<numThreads; t++) {for(intt=0;t<numThreads;t++){ executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));executor.execute(newValueComputationTask(nonCallStartNodesArray,t)); }} //wait until done//wait until done executor.shutdown();executor.shutdown(); try {try{ executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);executor.awaitTermination(Long.MAX_VALUE,TimeUnit.DAYS); } catch (InterruptedException e) {}catch(InterruptedExceptione){ throw new RuntimeException(e);thrownewRuntimeException(e); }} }} private void propagateValueAtStart(Pair<N, D> nAndD, N n) {privatevoidpropagateValueAtStart(Pair<N,D>nAndD,Nn){ D d = nAndD.getO2(); Dd=nAndD.getO2(); M p = icfg.getMethodOf(n);Mp=icfg.getMethodOf(n); for(N c: icfg.getCallsFromWithin(p)) { for(Nc:icfg.getCallsFromWithin(p)){ Set<Entry<D, EdgeFunction<V>>> entries; Set<Entry<D,EdgeFunction<V>>>entries; synchronized (jumpFn) {synchronized(jumpFn){ entries = jumpFn.forwardLookup(d,c).entrySet();entries=jumpFn.forwardLookup(d,c).entrySet(); for(Map.Entry<D,EdgeFunction<V>> dPAndFP: entries) {for(Map.Entry<D,EdgeFunction<V>>dPAndFP:entries){ D dPrime = dPAndFP.getKey();DdPrime=dPAndFP.getKey(); EdgeFunction<V> fPrime = dPAndFP.getValue();EdgeFunction<V>fPrime=dPAndFP.getValue(); N sP = n;NsP=n; propagateValue(c,dPrime,fPrime.computeTarget(val(sP,d)));propagateValue(c,dPrime,fPrime.computeTarget(val(sP,d))); flowFunctionApplicationCount++;flowFunctionApplicationCount++; }} }} }} }}  private void propagateValueAtCall(Pair<N, D> nAndD, N n) {privatevoidpropagateValueAtCall(Pair<N,D>nAndD,Nn){ D d = nAndD.getO2();Dd=nAndD.getO2(); for(M q: icfg.getCalleesOfCallAt(n)) {for(Mq:icfg.getCalleesOfCallAt(n)){ FlowFunction<D> callFlowFunction = flowFunctions.getCallFlowFunction(n, q);FlowFunction<D>callFlowFunction=flowFunctions.getCallFlowFunction(n,q); flowFunctionConstructionCount++;flowFunctionConstructionCount++; for(D dPrime: callFlowFunction.computeTargets(d)) {for(DdPrime:callFlowFunction.computeTargets(d)){ EdgeFunction<V> edgeFn = edgeFunctions.getCallEdgeFunction(n, d, q, dPrime);EdgeFunction<V>edgeFn=edgeFunctions.getCallEdgeFunction(n,d,q,dPrime); for(N startPoint: icfg.getStartPointsOf(q)) {for(NstartPoint:icfg.getStartPointsOf(q)){ propagateValue(startPoint,dPrime, edgeFn.computeTarget(val(n,d)));propagateValue(startPoint,dPrime,edgeFn.computeTarget(val(n,d))); flowFunctionApplicationCount++;flowFunctionApplicationCount++; }} }} }} }}  private void propagateValue(N nHashN, D nHashD, V v) {privatevoidpropagateValue(NnHashN,DnHashD,Vv){ synchronized (val) {synchronized(val){ V valNHash = val(nHashN, nHashD);VvalNHash=val(nHashN,nHashD); V vPrime = valueLattice.join(valNHash,v);VvPrime=valueLattice.join(valNHash,v); if(!vPrime.equals(valNHash)) {if(!vPrime.equals(valNHash)){ setVal(nHashN, nHashD, vPrime);setVal(nHashN,nHashD,vPrime); synchronized (nodeWorklist) {synchronized(nodeWorklist){ nodeWorklist.add(new Pair<N,D>(nHashN,nHashD));nodeWorklist.add(newPair<N,D>(nHashN,nHashD)); }} }} }} }} private V val(N nHashN, D nHashD){ privateVval(NnHashN,DnHashD){ V l = val.get(nHashN, nHashD);Vl=val.get(nHashN,nHashD); if(l==null) return valueLattice.topElement(); //implicitly initialized to top; see line [1] of Fig. 7 in SRH96 paperif(l==null)returnvalueLattice.topElement();//implicitly initialized to top; see line [1] of Fig. 7 in SRH96 paper else return l;elsereturnl; }}  private void setVal(N nHashN, D nHashD,V l){ privatevoidsetVal(NnHashN,DnHashD,Vl){ val.put(nHashN, nHashD,l);val.put(nHashN,nHashD,l); if(DEBUG)if(DEBUG) System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+" "+l); }} private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {privateEdgeFunction<V>jumpFunction(PathEdge<N,D,M>edge){ synchronized (jumpFn) {synchronized(jumpFn){ EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());EdgeFunction<V>function=jumpFn.forwardLookup(edge.factAtSource(),edge.getTarget()).get(edge.factAtTarget()); if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paperif(function==null)returnallTop;//JumpFn initialized to all-top, see line [2] in SRH96 paper return function;returnfunction; }} }} private Set<Cell<N, D, EdgeFunction<V>>> endSummary(N sP, D d3) {privateSet<Cell<N,D,EdgeFunction<V>>>endSummary(NsP,Dd3){ Table<N, D, EdgeFunction<V>> map = endSummary.get(sP, d3);Table<N,D,EdgeFunction<V>>map=endSummary.get(sP,d3); if(map==null) return Collections.emptySet();if(map==null)returnCollections.emptySet();









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






