



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

8d40408f















Commit
8d40408f


authored
Nov 27, 2014
by


Johannes Lerch



Browse files




handling the case that incoming edge is prefix of existing summary







parent
dea31cae













Changes
4




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPathUtil.java








View file @ 8d40408f






......@@ -57,7 +57,7 @@ public class AccessPathUtil {









 return fact.cloneWithAccessPath(accessPath);










 }










 










 public static <D extends FieldSensitiveFact<?, D>> D generalizeCallerSourceFact(IncomingEdge<D, ?> incomingEdge, D calleeSourceFact) {










 public static <D extends FieldSensitiveFact<?, D>> D concretizeCallerSourceFact(IncomingEdge<D, ?> incomingEdge, D calleeSourceFact) {










 if(!isPrefixOf(incomingEdge.getCalleeSourceFact(), calleeSourceFact))










 throw new IllegalArgumentException(String.format("Callee Source Fact in IncomingEdge '%s' is not a prefix of the given fact '%s'.", incomingEdge, calleeSourceFact));










 



......














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 8d40408f






......@@ -235,7 +235,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>










 //line 15.1 of Naeem/Lhotak/Rodriguez










 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3.getFact(),n,d1,d2)))










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(d3.getFact(),n,d1,d2);










 if (!addIncoming(sCalledProcN, incomingEdge))










 continue;










 










 resumeEdges(sCalledProcN, d3.getFact());



......@@ -249,16 +250,31 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 //because we have observed a potentially new incoming edge into <sP,d3>










 if (endSumm != null)










 for(SummaryEdge<D, N> summary: endSumm) {










 D d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, d4, n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1, retSiteN, d5p_restoredCtx, n, false);










 if(AccessPathUtil.isPrefixOf(summary.getSourceFact(), d3.getFact())) {










 D d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, d4, n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1, retSiteN, d5p_restoredCtx, n, false);










 }










 }










 } else {










 // incoming fact is prefix of summary: create new edge on caller side with complemented access path 










 D d1_concretized = AccessPathUtil.concretizeCallerSourceFact(incomingEdge, d3.getFact());










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, summary.getTargetFact(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1_concretized, retSiteN, d5p_restoredCtx, n, false);










 }










 }










 }










 }



......@@ -364,7 +380,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 // for each incoming-call value










 for (AnnotatedFact<D> callerTargetAnnotatedFact : callerTargetFacts) {










 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());










 D callerSourceFact = AccessPathUtil.generalizeCallerSourceFact(incomingEdge, summaryEdge.getSourceFact());










 D callerSourceFact = AccessPathUtil.concretizeCallerSourceFact(incomingEdge, summaryEdge.getSourceFact());










 propagate(callerSourceFact, retSiteC, callerTargetFact, callSite, false);










 }










 } 



......@@ -568,7 +584,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 return Sets.filter(map, new Predicate<SummaryEdge<D,N>>() {










 @Override










 public boolean apply(SummaryEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3);










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3) || AccessPathUtil.isPrefixOf(d3, edge.getSourceFact());










 }










 });










 }



......














test/heros/alias/AccessPathUtilTest.java








View file @ 8d40408f






......@@ -61,17 +61,17 @@ public class AccessPathUtilTest {









 }










 










 @Test










 public void testGeneralizeCallerSourceFact() {










 assertEquals(new Fact("0.f"), AccessPathUtil.generalizeCallerSourceFact(new IncomingEdge<>(new Fact("2"), null, new Fact("0"), null), new Fact("2.f")));










 public void testConcretizeCallerSourceFact() {










 assertEquals(new Fact("0.f"), AccessPathUtil.concretizeCallerSourceFact(new IncomingEdge<>(new Fact("2"), null, new Fact("0"), null), new Fact("2.f")));










 }










 










 @Test










 public void testGeneralizeCallerSourceFactIdentity() {










 assertEquals(new Fact("0.f"), AccessPathUtil.generalizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2.f")));










 public void testConcretizeCallerSourceFactIdentity() {










 assertEquals(new Fact("0.f"), AccessPathUtil.concretizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2.f")));










 }










 










 @Test(expected=IllegalArgumentException.class)










 public void testGeneralizeCallerSourceFactNoPrefix() {










 AccessPathUtil.generalizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2"));










 public void testConcretizeCallerSourceFactNoPrefix() {










 AccessPathUtil.concretizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2"));










 }










}














test/heros/alias/FieldSensitiveSolverTest.java








View file @ 8d40408f






......@@ -124,7 +124,7 @@ public class FieldSensitiveSolverTest {









 }










 










 @Test










 public void prefixFactOfOnHoldFactIncoming() {










 public void prefixFactOfOnHoldFactIncoming_ProcessExitCase() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),



......@@ -139,6 +139,23 @@ public class FieldSensitiveSolverTest {









 helper.runSolver(false, "a");










 }










 










 @Test










 public void prefixFactOfSummaryIncoming_ProcessCallCase() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0","1")),










 callSite("b").calls("bar", flow("1", "2.f")).retSite("e", kill("1")),










 callSite("e").calls("bar", flow("4", "2")).retSite("f", kill("4")),










 normalStmt("f").succ("g", kill("5")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("2", readField("f"), "3")),










 exitStmt("d").returns(over("b"), to("e"), flow("3", "4")).returns(over("e"), to("f"), flow("3", "5")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void doNotPauseZeroSources() {










 helper.method("foo",



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

8d40408f















Commit
8d40408f


authored
Nov 27, 2014
by


Johannes Lerch



Browse files




handling the case that incoming edge is prefix of existing summary







parent
dea31cae













Changes
4




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPathUtil.java








View file @ 8d40408f






......@@ -57,7 +57,7 @@ public class AccessPathUtil {









 return fact.cloneWithAccessPath(accessPath);










 }










 










 public static <D extends FieldSensitiveFact<?, D>> D generalizeCallerSourceFact(IncomingEdge<D, ?> incomingEdge, D calleeSourceFact) {










 public static <D extends FieldSensitiveFact<?, D>> D concretizeCallerSourceFact(IncomingEdge<D, ?> incomingEdge, D calleeSourceFact) {










 if(!isPrefixOf(incomingEdge.getCalleeSourceFact(), calleeSourceFact))










 throw new IllegalArgumentException(String.format("Callee Source Fact in IncomingEdge '%s' is not a prefix of the given fact '%s'.", incomingEdge, calleeSourceFact));










 



......














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 8d40408f






......@@ -235,7 +235,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>










 //line 15.1 of Naeem/Lhotak/Rodriguez










 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3.getFact(),n,d1,d2)))










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(d3.getFact(),n,d1,d2);










 if (!addIncoming(sCalledProcN, incomingEdge))










 continue;










 










 resumeEdges(sCalledProcN, d3.getFact());



......@@ -249,16 +250,31 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 //because we have observed a potentially new incoming edge into <sP,d3>










 if (endSumm != null)










 for(SummaryEdge<D, N> summary: endSumm) {










 D d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, d4, n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1, retSiteN, d5p_restoredCtx, n, false);










 if(AccessPathUtil.isPrefixOf(summary.getSourceFact(), d3.getFact())) {










 D d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, d4, n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1, retSiteN, d5p_restoredCtx, n, false);










 }










 }










 } else {










 // incoming fact is prefix of summary: create new edge on caller side with complemented access path 










 D d1_concretized = AccessPathUtil.concretizeCallerSourceFact(incomingEdge, d3.getFact());










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, summary.getTargetFact(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1_concretized, retSiteN, d5p_restoredCtx, n, false);










 }










 }










 }










 }



......@@ -364,7 +380,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 // for each incoming-call value










 for (AnnotatedFact<D> callerTargetAnnotatedFact : callerTargetFacts) {










 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());










 D callerSourceFact = AccessPathUtil.generalizeCallerSourceFact(incomingEdge, summaryEdge.getSourceFact());










 D callerSourceFact = AccessPathUtil.concretizeCallerSourceFact(incomingEdge, summaryEdge.getSourceFact());










 propagate(callerSourceFact, retSiteC, callerTargetFact, callSite, false);










 }










 } 



......@@ -568,7 +584,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 return Sets.filter(map, new Predicate<SummaryEdge<D,N>>() {










 @Override










 public boolean apply(SummaryEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3);










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3) || AccessPathUtil.isPrefixOf(d3, edge.getSourceFact());










 }










 });










 }



......














test/heros/alias/AccessPathUtilTest.java








View file @ 8d40408f






......@@ -61,17 +61,17 @@ public class AccessPathUtilTest {









 }










 










 @Test










 public void testGeneralizeCallerSourceFact() {










 assertEquals(new Fact("0.f"), AccessPathUtil.generalizeCallerSourceFact(new IncomingEdge<>(new Fact("2"), null, new Fact("0"), null), new Fact("2.f")));










 public void testConcretizeCallerSourceFact() {










 assertEquals(new Fact("0.f"), AccessPathUtil.concretizeCallerSourceFact(new IncomingEdge<>(new Fact("2"), null, new Fact("0"), null), new Fact("2.f")));










 }










 










 @Test










 public void testGeneralizeCallerSourceFactIdentity() {










 assertEquals(new Fact("0.f"), AccessPathUtil.generalizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2.f")));










 public void testConcretizeCallerSourceFactIdentity() {










 assertEquals(new Fact("0.f"), AccessPathUtil.concretizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2.f")));










 }










 










 @Test(expected=IllegalArgumentException.class)










 public void testGeneralizeCallerSourceFactNoPrefix() {










 AccessPathUtil.generalizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2"));










 public void testConcretizeCallerSourceFactNoPrefix() {










 AccessPathUtil.concretizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2"));










 }










}














test/heros/alias/FieldSensitiveSolverTest.java








View file @ 8d40408f






......@@ -124,7 +124,7 @@ public class FieldSensitiveSolverTest {









 }










 










 @Test










 public void prefixFactOfOnHoldFactIncoming() {










 public void prefixFactOfOnHoldFactIncoming_ProcessExitCase() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),



......@@ -139,6 +139,23 @@ public class FieldSensitiveSolverTest {









 helper.runSolver(false, "a");










 }










 










 @Test










 public void prefixFactOfSummaryIncoming_ProcessCallCase() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0","1")),










 callSite("b").calls("bar", flow("1", "2.f")).retSite("e", kill("1")),










 callSite("e").calls("bar", flow("4", "2")).retSite("f", kill("4")),










 normalStmt("f").succ("g", kill("5")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("2", readField("f"), "3")),










 exitStmt("d").returns(over("b"), to("e"), flow("3", "4")).returns(over("e"), to("f"), flow("3", "5")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void doNotPauseZeroSources() {










 helper.method("foo",



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

8d40408f







Open sidebar



Joshua Garcia heros
Commits

8d40408f




Open sidebar

Joshua Garcia heros
Commits

8d40408f


Joshua GarciaherosherosCommits
8d40408f








Commit
8d40408f


authored
Nov 27, 2014
by


Johannes Lerch



Browse files




handling the case that incoming edge is prefix of existing summary







parent
dea31cae













Changes
4




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPathUtil.java








View file @ 8d40408f






......@@ -57,7 +57,7 @@ public class AccessPathUtil {









 return fact.cloneWithAccessPath(accessPath);










 }










 










 public static <D extends FieldSensitiveFact<?, D>> D generalizeCallerSourceFact(IncomingEdge<D, ?> incomingEdge, D calleeSourceFact) {










 public static <D extends FieldSensitiveFact<?, D>> D concretizeCallerSourceFact(IncomingEdge<D, ?> incomingEdge, D calleeSourceFact) {










 if(!isPrefixOf(incomingEdge.getCalleeSourceFact(), calleeSourceFact))










 throw new IllegalArgumentException(String.format("Callee Source Fact in IncomingEdge '%s' is not a prefix of the given fact '%s'.", incomingEdge, calleeSourceFact));










 



......














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 8d40408f






......@@ -235,7 +235,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>










 //line 15.1 of Naeem/Lhotak/Rodriguez










 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3.getFact(),n,d1,d2)))










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(d3.getFact(),n,d1,d2);










 if (!addIncoming(sCalledProcN, incomingEdge))










 continue;










 










 resumeEdges(sCalledProcN, d3.getFact());



......@@ -249,16 +250,31 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 //because we have observed a potentially new incoming edge into <sP,d3>










 if (endSumm != null)










 for(SummaryEdge<D, N> summary: endSumm) {










 D d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, d4, n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1, retSiteN, d5p_restoredCtx, n, false);










 if(AccessPathUtil.isPrefixOf(summary.getSourceFact(), d3.getFact())) {










 D d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, d4, n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1, retSiteN, d5p_restoredCtx, n, false);










 }










 }










 } else {










 // incoming fact is prefix of summary: create new edge on caller side with complemented access path 










 D d1_concretized = AccessPathUtil.concretizeCallerSourceFact(incomingEdge, d3.getFact());










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, summary.getTargetFact(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1_concretized, retSiteN, d5p_restoredCtx, n, false);










 }










 }










 }










 }



......@@ -364,7 +380,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 // for each incoming-call value










 for (AnnotatedFact<D> callerTargetAnnotatedFact : callerTargetFacts) {










 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());










 D callerSourceFact = AccessPathUtil.generalizeCallerSourceFact(incomingEdge, summaryEdge.getSourceFact());










 D callerSourceFact = AccessPathUtil.concretizeCallerSourceFact(incomingEdge, summaryEdge.getSourceFact());










 propagate(callerSourceFact, retSiteC, callerTargetFact, callSite, false);










 }










 } 



......@@ -568,7 +584,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 return Sets.filter(map, new Predicate<SummaryEdge<D,N>>() {










 @Override










 public boolean apply(SummaryEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3);










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3) || AccessPathUtil.isPrefixOf(d3, edge.getSourceFact());










 }










 });










 }



......














test/heros/alias/AccessPathUtilTest.java








View file @ 8d40408f






......@@ -61,17 +61,17 @@ public class AccessPathUtilTest {









 }










 










 @Test










 public void testGeneralizeCallerSourceFact() {










 assertEquals(new Fact("0.f"), AccessPathUtil.generalizeCallerSourceFact(new IncomingEdge<>(new Fact("2"), null, new Fact("0"), null), new Fact("2.f")));










 public void testConcretizeCallerSourceFact() {










 assertEquals(new Fact("0.f"), AccessPathUtil.concretizeCallerSourceFact(new IncomingEdge<>(new Fact("2"), null, new Fact("0"), null), new Fact("2.f")));










 }










 










 @Test










 public void testGeneralizeCallerSourceFactIdentity() {










 assertEquals(new Fact("0.f"), AccessPathUtil.generalizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2.f")));










 public void testConcretizeCallerSourceFactIdentity() {










 assertEquals(new Fact("0.f"), AccessPathUtil.concretizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2.f")));










 }










 










 @Test(expected=IllegalArgumentException.class)










 public void testGeneralizeCallerSourceFactNoPrefix() {










 AccessPathUtil.generalizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2"));










 public void testConcretizeCallerSourceFactNoPrefix() {










 AccessPathUtil.concretizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2"));










 }










}














test/heros/alias/FieldSensitiveSolverTest.java








View file @ 8d40408f






......@@ -124,7 +124,7 @@ public class FieldSensitiveSolverTest {









 }










 










 @Test










 public void prefixFactOfOnHoldFactIncoming() {










 public void prefixFactOfOnHoldFactIncoming_ProcessExitCase() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),



......@@ -139,6 +139,23 @@ public class FieldSensitiveSolverTest {









 helper.runSolver(false, "a");










 }










 










 @Test










 public void prefixFactOfSummaryIncoming_ProcessCallCase() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0","1")),










 callSite("b").calls("bar", flow("1", "2.f")).retSite("e", kill("1")),










 callSite("e").calls("bar", flow("4", "2")).retSite("f", kill("4")),










 normalStmt("f").succ("g", kill("5")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("2", readField("f"), "3")),










 exitStmt("d").returns(over("b"), to("e"), flow("3", "4")).returns(over("e"), to("f"), flow("3", "5")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void doNotPauseZeroSources() {










 helper.method("foo",



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
8d40408f


authored
Nov 27, 2014
by


Johannes Lerch



Browse files




handling the case that incoming edge is prefix of existing summary







parent
dea31cae













Changes
4




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPathUtil.java








View file @ 8d40408f






......@@ -57,7 +57,7 @@ public class AccessPathUtil {









 return fact.cloneWithAccessPath(accessPath);










 }










 










 public static <D extends FieldSensitiveFact<?, D>> D generalizeCallerSourceFact(IncomingEdge<D, ?> incomingEdge, D calleeSourceFact) {










 public static <D extends FieldSensitiveFact<?, D>> D concretizeCallerSourceFact(IncomingEdge<D, ?> incomingEdge, D calleeSourceFact) {










 if(!isPrefixOf(incomingEdge.getCalleeSourceFact(), calleeSourceFact))










 throw new IllegalArgumentException(String.format("Callee Source Fact in IncomingEdge '%s' is not a prefix of the given fact '%s'.", incomingEdge, calleeSourceFact));










 



......














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 8d40408f






......@@ -235,7 +235,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>










 //line 15.1 of Naeem/Lhotak/Rodriguez










 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3.getFact(),n,d1,d2)))










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(d3.getFact(),n,d1,d2);










 if (!addIncoming(sCalledProcN, incomingEdge))










 continue;










 










 resumeEdges(sCalledProcN, d3.getFact());



......@@ -249,16 +250,31 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 //because we have observed a potentially new incoming edge into <sP,d3>










 if (endSumm != null)










 for(SummaryEdge<D, N> summary: endSumm) {










 D d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, d4, n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1, retSiteN, d5p_restoredCtx, n, false);










 if(AccessPathUtil.isPrefixOf(summary.getSourceFact(), d3.getFact())) {










 D d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, d4, n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1, retSiteN, d5p_restoredCtx, n, false);










 }










 }










 } else {










 // incoming fact is prefix of summary: create new edge on caller side with complemented access path 










 D d1_concretized = AccessPathUtil.concretizeCallerSourceFact(incomingEdge, d3.getFact());










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, summary.getTargetFact(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1_concretized, retSiteN, d5p_restoredCtx, n, false);










 }










 }










 }










 }



......@@ -364,7 +380,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 // for each incoming-call value










 for (AnnotatedFact<D> callerTargetAnnotatedFact : callerTargetFacts) {










 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());










 D callerSourceFact = AccessPathUtil.generalizeCallerSourceFact(incomingEdge, summaryEdge.getSourceFact());










 D callerSourceFact = AccessPathUtil.concretizeCallerSourceFact(incomingEdge, summaryEdge.getSourceFact());










 propagate(callerSourceFact, retSiteC, callerTargetFact, callSite, false);










 }










 } 



......@@ -568,7 +584,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 return Sets.filter(map, new Predicate<SummaryEdge<D,N>>() {










 @Override










 public boolean apply(SummaryEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3);










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3) || AccessPathUtil.isPrefixOf(d3, edge.getSourceFact());










 }










 });










 }



......














test/heros/alias/AccessPathUtilTest.java








View file @ 8d40408f






......@@ -61,17 +61,17 @@ public class AccessPathUtilTest {









 }










 










 @Test










 public void testGeneralizeCallerSourceFact() {










 assertEquals(new Fact("0.f"), AccessPathUtil.generalizeCallerSourceFact(new IncomingEdge<>(new Fact("2"), null, new Fact("0"), null), new Fact("2.f")));










 public void testConcretizeCallerSourceFact() {










 assertEquals(new Fact("0.f"), AccessPathUtil.concretizeCallerSourceFact(new IncomingEdge<>(new Fact("2"), null, new Fact("0"), null), new Fact("2.f")));










 }










 










 @Test










 public void testGeneralizeCallerSourceFactIdentity() {










 assertEquals(new Fact("0.f"), AccessPathUtil.generalizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2.f")));










 public void testConcretizeCallerSourceFactIdentity() {










 assertEquals(new Fact("0.f"), AccessPathUtil.concretizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2.f")));










 }










 










 @Test(expected=IllegalArgumentException.class)










 public void testGeneralizeCallerSourceFactNoPrefix() {










 AccessPathUtil.generalizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2"));










 public void testConcretizeCallerSourceFactNoPrefix() {










 AccessPathUtil.concretizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2"));










 }










}














test/heros/alias/FieldSensitiveSolverTest.java








View file @ 8d40408f






......@@ -124,7 +124,7 @@ public class FieldSensitiveSolverTest {









 }










 










 @Test










 public void prefixFactOfOnHoldFactIncoming() {










 public void prefixFactOfOnHoldFactIncoming_ProcessExitCase() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),



......@@ -139,6 +139,23 @@ public class FieldSensitiveSolverTest {









 helper.runSolver(false, "a");










 }










 










 @Test










 public void prefixFactOfSummaryIncoming_ProcessCallCase() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0","1")),










 callSite("b").calls("bar", flow("1", "2.f")).retSite("e", kill("1")),










 callSite("e").calls("bar", flow("4", "2")).retSite("f", kill("4")),










 normalStmt("f").succ("g", kill("5")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("2", readField("f"), "3")),










 exitStmt("d").returns(over("b"), to("e"), flow("3", "4")).returns(over("e"), to("f"), flow("3", "5")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void doNotPauseZeroSources() {










 helper.method("foo",



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
8d40408f


authored
Nov 27, 2014
by


Johannes Lerch



Browse files



Commit
8d40408f


authored
Nov 27, 2014
by


Johannes Lerch

8d40408fauthoredbyJohannes Lerch

handling the case that incoming edge is prefix of existing summary






parent
dea31cae
















parent
dea31cae





parent












Changes
4
4


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/alias/AccessPathUtil.java








View file @ 8d40408f






......@@ -57,7 +57,7 @@ public class AccessPathUtil {









 return fact.cloneWithAccessPath(accessPath);










 }










 










 public static <D extends FieldSensitiveFact<?, D>> D generalizeCallerSourceFact(IncomingEdge<D, ?> incomingEdge, D calleeSourceFact) {










 public static <D extends FieldSensitiveFact<?, D>> D concretizeCallerSourceFact(IncomingEdge<D, ?> incomingEdge, D calleeSourceFact) {










 if(!isPrefixOf(incomingEdge.getCalleeSourceFact(), calleeSourceFact))










 throw new IllegalArgumentException(String.format("Callee Source Fact in IncomingEdge '%s' is not a prefix of the given fact '%s'.", incomingEdge, calleeSourceFact));










 



......














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 8d40408f






......@@ -235,7 +235,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>










 //line 15.1 of Naeem/Lhotak/Rodriguez










 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3.getFact(),n,d1,d2)))










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(d3.getFact(),n,d1,d2);










 if (!addIncoming(sCalledProcN, incomingEdge))










 continue;










 










 resumeEdges(sCalledProcN, d3.getFact());



......@@ -249,16 +250,31 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 //because we have observed a potentially new incoming edge into <sP,d3>










 if (endSumm != null)










 for(SummaryEdge<D, N> summary: endSumm) {










 D d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, d4, n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1, retSiteN, d5p_restoredCtx, n, false);










 if(AccessPathUtil.isPrefixOf(summary.getSourceFact(), d3.getFact())) {










 D d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, d4, n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1, retSiteN, d5p_restoredCtx, n, false);










 }










 }










 } else {










 // incoming fact is prefix of summary: create new edge on caller side with complemented access path 










 D d1_concretized = AccessPathUtil.concretizeCallerSourceFact(incomingEdge, d3.getFact());










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, summary.getTargetFact(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1_concretized, retSiteN, d5p_restoredCtx, n, false);










 }










 }










 }










 }



......@@ -364,7 +380,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 // for each incoming-call value










 for (AnnotatedFact<D> callerTargetAnnotatedFact : callerTargetFacts) {










 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());










 D callerSourceFact = AccessPathUtil.generalizeCallerSourceFact(incomingEdge, summaryEdge.getSourceFact());










 D callerSourceFact = AccessPathUtil.concretizeCallerSourceFact(incomingEdge, summaryEdge.getSourceFact());










 propagate(callerSourceFact, retSiteC, callerTargetFact, callSite, false);










 }










 } 



......@@ -568,7 +584,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 return Sets.filter(map, new Predicate<SummaryEdge<D,N>>() {










 @Override










 public boolean apply(SummaryEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3);










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3) || AccessPathUtil.isPrefixOf(d3, edge.getSourceFact());










 }










 });










 }



......














test/heros/alias/AccessPathUtilTest.java








View file @ 8d40408f






......@@ -61,17 +61,17 @@ public class AccessPathUtilTest {









 }










 










 @Test










 public void testGeneralizeCallerSourceFact() {










 assertEquals(new Fact("0.f"), AccessPathUtil.generalizeCallerSourceFact(new IncomingEdge<>(new Fact("2"), null, new Fact("0"), null), new Fact("2.f")));










 public void testConcretizeCallerSourceFact() {










 assertEquals(new Fact("0.f"), AccessPathUtil.concretizeCallerSourceFact(new IncomingEdge<>(new Fact("2"), null, new Fact("0"), null), new Fact("2.f")));










 }










 










 @Test










 public void testGeneralizeCallerSourceFactIdentity() {










 assertEquals(new Fact("0.f"), AccessPathUtil.generalizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2.f")));










 public void testConcretizeCallerSourceFactIdentity() {










 assertEquals(new Fact("0.f"), AccessPathUtil.concretizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2.f")));










 }










 










 @Test(expected=IllegalArgumentException.class)










 public void testGeneralizeCallerSourceFactNoPrefix() {










 AccessPathUtil.generalizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2"));










 public void testConcretizeCallerSourceFactNoPrefix() {










 AccessPathUtil.concretizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2"));










 }










}














test/heros/alias/FieldSensitiveSolverTest.java








View file @ 8d40408f






......@@ -124,7 +124,7 @@ public class FieldSensitiveSolverTest {









 }










 










 @Test










 public void prefixFactOfOnHoldFactIncoming() {










 public void prefixFactOfOnHoldFactIncoming_ProcessExitCase() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),



......@@ -139,6 +139,23 @@ public class FieldSensitiveSolverTest {









 helper.runSolver(false, "a");










 }










 










 @Test










 public void prefixFactOfSummaryIncoming_ProcessCallCase() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0","1")),










 callSite("b").calls("bar", flow("1", "2.f")).retSite("e", kill("1")),










 callSite("e").calls("bar", flow("4", "2")).retSite("f", kill("4")),










 normalStmt("f").succ("g", kill("5")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("2", readField("f"), "3")),










 exitStmt("d").returns(over("b"), to("e"), flow("3", "4")).returns(over("e"), to("f"), flow("3", "5")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void doNotPauseZeroSources() {










 helper.method("foo",



......














src/heros/alias/AccessPathUtil.java








View file @ 8d40408f






......@@ -57,7 +57,7 @@ public class AccessPathUtil {









 return fact.cloneWithAccessPath(accessPath);










 }










 










 public static <D extends FieldSensitiveFact<?, D>> D generalizeCallerSourceFact(IncomingEdge<D, ?> incomingEdge, D calleeSourceFact) {










 public static <D extends FieldSensitiveFact<?, D>> D concretizeCallerSourceFact(IncomingEdge<D, ?> incomingEdge, D calleeSourceFact) {










 if(!isPrefixOf(incomingEdge.getCalleeSourceFact(), calleeSourceFact))










 throw new IllegalArgumentException(String.format("Callee Source Fact in IncomingEdge '%s' is not a prefix of the given fact '%s'.", incomingEdge, calleeSourceFact));










 



......












src/heros/alias/AccessPathUtil.java








View file @ 8d40408f








src/heros/alias/AccessPathUtil.java










View file @ 8d40408f


8d40408f



......@@ -57,7 +57,7 @@ public class AccessPathUtil {









 return fact.cloneWithAccessPath(accessPath);










 }










 










 public static <D extends FieldSensitiveFact<?, D>> D generalizeCallerSourceFact(IncomingEdge<D, ?> incomingEdge, D calleeSourceFact) {










 public static <D extends FieldSensitiveFact<?, D>> D concretizeCallerSourceFact(IncomingEdge<D, ?> incomingEdge, D calleeSourceFact) {










 if(!isPrefixOf(incomingEdge.getCalleeSourceFact(), calleeSourceFact))










 throw new IllegalArgumentException(String.format("Callee Source Fact in IncomingEdge '%s' is not a prefix of the given fact '%s'.", incomingEdge, calleeSourceFact));










 



......






......@@ -57,7 +57,7 @@ public class AccessPathUtil {









 return fact.cloneWithAccessPath(accessPath);










 }










 










 public static <D extends FieldSensitiveFact<?, D>> D generalizeCallerSourceFact(IncomingEdge<D, ?> incomingEdge, D calleeSourceFact) {










 public static <D extends FieldSensitiveFact<?, D>> D concretizeCallerSourceFact(IncomingEdge<D, ?> incomingEdge, D calleeSourceFact) {










 if(!isPrefixOf(incomingEdge.getCalleeSourceFact(), calleeSourceFact))










 throw new IllegalArgumentException(String.format("Callee Source Fact in IncomingEdge '%s' is not a prefix of the given fact '%s'.", incomingEdge, calleeSourceFact));










 



......


 return fact.cloneWithAccessPath(accessPath);returnfact.cloneWithAccessPath(accessPath); }}  public static <D extends FieldSensitiveFact<?, D>> D generalizeCallerSourceFact(IncomingEdge<D, ?> incomingEdge, D calleeSourceFact) {publicstatic<DextendsFieldSensitiveFact<?,D>>DgeneralizeCallerSourceFactgeneral(IncomingEdge<D,?>incomingEdge,DcalleeSourceFact){ public static <D extends FieldSensitiveFact<?, D>> D concretizeCallerSourceFact(IncomingEdge<D, ?> incomingEdge, D calleeSourceFact) {publicstatic<DextendsFieldSensitiveFact<?,D>>DconcretizeCallerSourceFactconcret(IncomingEdge<D,?>incomingEdge,DcalleeSourceFact){ if(!isPrefixOf(incomingEdge.getCalleeSourceFact(), calleeSourceFact))if(!isPrefixOf(incomingEdge.getCalleeSourceFact(),calleeSourceFact)) throw new IllegalArgumentException(String.format("Callee Source Fact in IncomingEdge '%s' is not a prefix of the given fact '%s'.", incomingEdge, calleeSourceFact));thrownewIllegalArgumentException(String.format("Callee Source Fact in IncomingEdge '%s' is not a prefix of the given fact '%s'.",incomingEdge,calleeSourceFact)); 








src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 8d40408f






......@@ -235,7 +235,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>










 //line 15.1 of Naeem/Lhotak/Rodriguez










 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3.getFact(),n,d1,d2)))










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(d3.getFact(),n,d1,d2);










 if (!addIncoming(sCalledProcN, incomingEdge))










 continue;










 










 resumeEdges(sCalledProcN, d3.getFact());



......@@ -249,16 +250,31 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 //because we have observed a potentially new incoming edge into <sP,d3>










 if (endSumm != null)










 for(SummaryEdge<D, N> summary: endSumm) {










 D d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, d4, n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1, retSiteN, d5p_restoredCtx, n, false);










 if(AccessPathUtil.isPrefixOf(summary.getSourceFact(), d3.getFact())) {










 D d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, d4, n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1, retSiteN, d5p_restoredCtx, n, false);










 }










 }










 } else {










 // incoming fact is prefix of summary: create new edge on caller side with complemented access path 










 D d1_concretized = AccessPathUtil.concretizeCallerSourceFact(incomingEdge, d3.getFact());










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, summary.getTargetFact(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1_concretized, retSiteN, d5p_restoredCtx, n, false);










 }










 }










 }










 }



......@@ -364,7 +380,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 // for each incoming-call value










 for (AnnotatedFact<D> callerTargetAnnotatedFact : callerTargetFacts) {










 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());










 D callerSourceFact = AccessPathUtil.generalizeCallerSourceFact(incomingEdge, summaryEdge.getSourceFact());










 D callerSourceFact = AccessPathUtil.concretizeCallerSourceFact(incomingEdge, summaryEdge.getSourceFact());










 propagate(callerSourceFact, retSiteC, callerTargetFact, callSite, false);










 }










 } 



......@@ -568,7 +584,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 return Sets.filter(map, new Predicate<SummaryEdge<D,N>>() {










 @Override










 public boolean apply(SummaryEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3);










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3) || AccessPathUtil.isPrefixOf(d3, edge.getSourceFact());










 }










 });










 }



......












src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 8d40408f








src/heros/alias/FieldSensitiveIFDSSolver.java










View file @ 8d40408f


8d40408f



......@@ -235,7 +235,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>










 //line 15.1 of Naeem/Lhotak/Rodriguez










 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3.getFact(),n,d1,d2)))










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(d3.getFact(),n,d1,d2);










 if (!addIncoming(sCalledProcN, incomingEdge))










 continue;










 










 resumeEdges(sCalledProcN, d3.getFact());



......@@ -249,16 +250,31 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 //because we have observed a potentially new incoming edge into <sP,d3>










 if (endSumm != null)










 for(SummaryEdge<D, N> summary: endSumm) {










 D d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, d4, n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1, retSiteN, d5p_restoredCtx, n, false);










 if(AccessPathUtil.isPrefixOf(summary.getSourceFact(), d3.getFact())) {










 D d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, d4, n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1, retSiteN, d5p_restoredCtx, n, false);










 }










 }










 } else {










 // incoming fact is prefix of summary: create new edge on caller side with complemented access path 










 D d1_concretized = AccessPathUtil.concretizeCallerSourceFact(incomingEdge, d3.getFact());










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, summary.getTargetFact(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1_concretized, retSiteN, d5p_restoredCtx, n, false);










 }










 }










 }










 }



......@@ -364,7 +380,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 // for each incoming-call value










 for (AnnotatedFact<D> callerTargetAnnotatedFact : callerTargetFacts) {










 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());










 D callerSourceFact = AccessPathUtil.generalizeCallerSourceFact(incomingEdge, summaryEdge.getSourceFact());










 D callerSourceFact = AccessPathUtil.concretizeCallerSourceFact(incomingEdge, summaryEdge.getSourceFact());










 propagate(callerSourceFact, retSiteC, callerTargetFact, callSite, false);










 }










 } 



......@@ -568,7 +584,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 return Sets.filter(map, new Predicate<SummaryEdge<D,N>>() {










 @Override










 public boolean apply(SummaryEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3);










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3) || AccessPathUtil.isPrefixOf(d3, edge.getSourceFact());










 }










 });










 }



......






......@@ -235,7 +235,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>










 //line 15.1 of Naeem/Lhotak/Rodriguez










 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3.getFact(),n,d1,d2)))










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(d3.getFact(),n,d1,d2);










 if (!addIncoming(sCalledProcN, incomingEdge))










 continue;










 










 resumeEdges(sCalledProcN, d3.getFact());



......@@ -249,16 +250,31 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 //because we have observed a potentially new incoming edge into <sP,d3>










 if (endSumm != null)










 for(SummaryEdge<D, N> summary: endSumm) {










 D d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, d4, n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1, retSiteN, d5p_restoredCtx, n, false);










 if(AccessPathUtil.isPrefixOf(summary.getSourceFact(), d3.getFact())) {










 D d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, d4, n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1, retSiteN, d5p_restoredCtx, n, false);










 }










 }










 } else {










 // incoming fact is prefix of summary: create new edge on caller side with complemented access path 










 D d1_concretized = AccessPathUtil.concretizeCallerSourceFact(incomingEdge, d3.getFact());










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, summary.getTargetFact(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1_concretized, retSiteN, d5p_restoredCtx, n, false);










 }










 }










 }










 }



......@@ -364,7 +380,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 // for each incoming-call value










 for (AnnotatedFact<D> callerTargetAnnotatedFact : callerTargetFacts) {










 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());










 D callerSourceFact = AccessPathUtil.generalizeCallerSourceFact(incomingEdge, summaryEdge.getSourceFact());










 D callerSourceFact = AccessPathUtil.concretizeCallerSourceFact(incomingEdge, summaryEdge.getSourceFact());










 propagate(callerSourceFact, retSiteC, callerTargetFact, callSite, false);










 }










 } 



......@@ -568,7 +584,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact









 return Sets.filter(map, new Predicate<SummaryEdge<D,N>>() {










 @Override










 public boolean apply(SummaryEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3);










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3) || AccessPathUtil.isPrefixOf(d3, edge.getSourceFact());










 }










 });










 }



......


  //register the fact that <sp,d3> has an incoming edge from <n,d2>//register the fact that <sp,d3> has an incoming edge from <n,d2> //line 15.1 of Naeem/Lhotak/Rodriguez//line 15.1 of Naeem/Lhotak/Rodriguez if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3.getFact(),n,d1,d2)))if(!addIncoming(sCalledProcN,newIncomingEdge<D,N>(d3.getFact(),n,d1,d2))) IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(d3.getFact(),n,d1,d2);IncomingEdge<D,N>incomingEdge=newIncomingEdge<D,N>(d3.getFact(),n,d1,d2); if (!addIncoming(sCalledProcN, incomingEdge))if(!addIncoming(sCalledProcN,incomingEdge)) continue;continue;  resumeEdges(sCalledProcN, d3.getFact());resumeEdges(sCalledProcN,d3.getFact()); //because we have observed a potentially new incoming edge into <sP,d3>//because we have observed a potentially new incoming edge into <sP,d3> if (endSumm != null)if(endSumm!=null) for(SummaryEdge<D, N> summary: endSumm) {for(SummaryEdge<D,N>summary:endSumm){ D d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);Dd4=AccessPathUtil.applyAbstractedSummary(d3.getFact(),summary);  //for each return site//for each return site for(N retSiteN: returnSiteNs) {for(NretSiteN:returnSiteNs){ //compute return-flow function//compute return-flow function FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);FlowFunction<D>retFunction=flowFunctions.getReturnFlowFunction(n,sCalledProcN,summary.getTargetStmt(),retSiteN); //for each target value of the function//for each target value of the function for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, d4, n)) {for(AnnotatedFact<D>d5:computeReturnFlowFunction(retFunction,d4,n)){ D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());Dd5p_restoredCtx=restoreContextOnReturnedFact(d2,d5.getFact()); propagate(d1, retSiteN, d5p_restoredCtx, n, false);propagate(d1,retSiteN,d5p_restoredCtx,n,false); if(AccessPathUtil.isPrefixOf(summary.getSourceFact(), d3.getFact())) {if(AccessPathUtil.isPrefixOf(summary.getSourceFact(),d3.getFact())){ D d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);Dd4=AccessPathUtil.applyAbstractedSummary(d3.getFact(),summary);  //for each return site//for each return site for(N retSiteN: returnSiteNs) {for(NretSiteN:returnSiteNs){ //compute return-flow function//compute return-flow function FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);FlowFunction<D>retFunction=flowFunctions.getReturnFlowFunction(n,sCalledProcN,summary.getTargetStmt(),retSiteN); //for each target value of the function//for each target value of the function for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, d4, n)) {for(AnnotatedFact<D>d5:computeReturnFlowFunction(retFunction,d4,n)){ D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());Dd5p_restoredCtx=restoreContextOnReturnedFact(d2,d5.getFact()); propagate(d1, retSiteN, d5p_restoredCtx, n, false);propagate(d1,retSiteN,d5p_restoredCtx,n,false); }} }} } else {}else{ // incoming fact is prefix of summary: create new edge on caller side with complemented access path // incoming fact is prefix of summary: create new edge on caller side with complemented access path  D d1_concretized = AccessPathUtil.concretizeCallerSourceFact(incomingEdge, d3.getFact());Dd1_concretized=AccessPathUtil.concretizeCallerSourceFact(incomingEdge,d3.getFact()); //for each return site//for each return site for(N retSiteN: returnSiteNs) {for(NretSiteN:returnSiteNs){ //compute return-flow function//compute return-flow function FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);FlowFunction<D>retFunction=flowFunctions.getReturnFlowFunction(n,sCalledProcN,summary.getTargetStmt(),retSiteN); //for each target value of the function//for each target value of the function for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, summary.getTargetFact(), n)) {for(AnnotatedFact<D>d5:computeReturnFlowFunction(retFunction,summary.getTargetFact(),n)){ D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());Dd5p_restoredCtx=restoreContextOnReturnedFact(d2,d5.getFact()); propagate(d1_concretized, retSiteN, d5p_restoredCtx, n, false);propagate(d1_concretized,retSiteN,d5p_restoredCtx,n,false); }} }} }} }} // for each incoming-call value// for each incoming-call value for (AnnotatedFact<D> callerTargetAnnotatedFact : callerTargetFacts) {for(AnnotatedFact<D>callerTargetAnnotatedFact:callerTargetFacts){ D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());DcallerTargetFact=restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(),callerTargetAnnotatedFact.getFact()); D callerSourceFact = AccessPathUtil.generalizeCallerSourceFact(incomingEdge, summaryEdge.getSourceFact());DcallerSourceFact=AccessPathUtil.generalizeCallerSourceFactgeneral(incomingEdge,summaryEdge.getSourceFact()); D callerSourceFact = AccessPathUtil.concretizeCallerSourceFact(incomingEdge, summaryEdge.getSourceFact());DcallerSourceFact=AccessPathUtil.concretizeCallerSourceFactconcret(incomingEdge,summaryEdge.getSourceFact()); propagate(callerSourceFact, retSiteC, callerTargetFact, callSite, false);propagate(callerSourceFact,retSiteC,callerTargetFact,callSite,false); }} } } return Sets.filter(map, new Predicate<SummaryEdge<D,N>>() {returnSets.filter(map,newPredicate<SummaryEdge<D,N>>(){ @Override@Override public boolean apply(SummaryEdge<D, N> edge) {publicbooleanapply(SummaryEdge<D,N>edge){ return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3);returnAccessPathUtil.isPrefixOf(edge.getSourceFact(),d3); return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3) || AccessPathUtil.isPrefixOf(d3, edge.getSourceFact());returnAccessPathUtil.isPrefixOf(edge.getSourceFact(),d3) |||| AccessPathUtilAccessPathUtil..isPrefixOfisPrefixOf((d3d3,, edgeedge..getSourceFactgetSourceFact());()) }} });}); }}








test/heros/alias/AccessPathUtilTest.java








View file @ 8d40408f






......@@ -61,17 +61,17 @@ public class AccessPathUtilTest {









 }










 










 @Test










 public void testGeneralizeCallerSourceFact() {










 assertEquals(new Fact("0.f"), AccessPathUtil.generalizeCallerSourceFact(new IncomingEdge<>(new Fact("2"), null, new Fact("0"), null), new Fact("2.f")));










 public void testConcretizeCallerSourceFact() {










 assertEquals(new Fact("0.f"), AccessPathUtil.concretizeCallerSourceFact(new IncomingEdge<>(new Fact("2"), null, new Fact("0"), null), new Fact("2.f")));










 }










 










 @Test










 public void testGeneralizeCallerSourceFactIdentity() {










 assertEquals(new Fact("0.f"), AccessPathUtil.generalizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2.f")));










 public void testConcretizeCallerSourceFactIdentity() {










 assertEquals(new Fact("0.f"), AccessPathUtil.concretizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2.f")));










 }










 










 @Test(expected=IllegalArgumentException.class)










 public void testGeneralizeCallerSourceFactNoPrefix() {










 AccessPathUtil.generalizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2"));










 public void testConcretizeCallerSourceFactNoPrefix() {










 AccessPathUtil.concretizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2"));










 }










}












test/heros/alias/AccessPathUtilTest.java








View file @ 8d40408f








test/heros/alias/AccessPathUtilTest.java










View file @ 8d40408f


8d40408f



......@@ -61,17 +61,17 @@ public class AccessPathUtilTest {









 }










 










 @Test










 public void testGeneralizeCallerSourceFact() {










 assertEquals(new Fact("0.f"), AccessPathUtil.generalizeCallerSourceFact(new IncomingEdge<>(new Fact("2"), null, new Fact("0"), null), new Fact("2.f")));










 public void testConcretizeCallerSourceFact() {










 assertEquals(new Fact("0.f"), AccessPathUtil.concretizeCallerSourceFact(new IncomingEdge<>(new Fact("2"), null, new Fact("0"), null), new Fact("2.f")));










 }










 










 @Test










 public void testGeneralizeCallerSourceFactIdentity() {










 assertEquals(new Fact("0.f"), AccessPathUtil.generalizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2.f")));










 public void testConcretizeCallerSourceFactIdentity() {










 assertEquals(new Fact("0.f"), AccessPathUtil.concretizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2.f")));










 }










 










 @Test(expected=IllegalArgumentException.class)










 public void testGeneralizeCallerSourceFactNoPrefix() {










 AccessPathUtil.generalizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2"));










 public void testConcretizeCallerSourceFactNoPrefix() {










 AccessPathUtil.concretizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2"));










 }










}






......@@ -61,17 +61,17 @@ public class AccessPathUtilTest {









 }










 










 @Test










 public void testGeneralizeCallerSourceFact() {










 assertEquals(new Fact("0.f"), AccessPathUtil.generalizeCallerSourceFact(new IncomingEdge<>(new Fact("2"), null, new Fact("0"), null), new Fact("2.f")));










 public void testConcretizeCallerSourceFact() {










 assertEquals(new Fact("0.f"), AccessPathUtil.concretizeCallerSourceFact(new IncomingEdge<>(new Fact("2"), null, new Fact("0"), null), new Fact("2.f")));










 }










 










 @Test










 public void testGeneralizeCallerSourceFactIdentity() {










 assertEquals(new Fact("0.f"), AccessPathUtil.generalizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2.f")));










 public void testConcretizeCallerSourceFactIdentity() {










 assertEquals(new Fact("0.f"), AccessPathUtil.concretizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2.f")));










 }










 










 @Test(expected=IllegalArgumentException.class)










 public void testGeneralizeCallerSourceFactNoPrefix() {










 AccessPathUtil.generalizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2"));










 public void testConcretizeCallerSourceFactNoPrefix() {










 AccessPathUtil.concretizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2"));










 }










}


 }}  @Test@Test public void testGeneralizeCallerSourceFact() {publicvoidtestGeneralizeCallerSourceFactGeneral(){ assertEquals(new Fact("0.f"), AccessPathUtil.generalizeCallerSourceFact(new IncomingEdge<>(new Fact("2"), null, new Fact("0"), null), new Fact("2.f")));assertEquals(newFact("0.f"),AccessPathUtil.generalizeCallerSourceFactgeneral(newIncomingEdge<>(newFact("2"),null,newFact("0"),null),newFact("2.f"))); public void testConcretizeCallerSourceFact() {publicvoidtestConcretizeCallerSourceFactConcret(){ assertEquals(new Fact("0.f"), AccessPathUtil.concretizeCallerSourceFact(new IncomingEdge<>(new Fact("2"), null, new Fact("0"), null), new Fact("2.f")));assertEquals(newFact("0.f"),AccessPathUtil.concretizeCallerSourceFactconcret(newIncomingEdge<>(newFact("2"),null,newFact("0"),null),newFact("2.f"))); }}  @Test@Test public void testGeneralizeCallerSourceFactIdentity() {publicvoidtestGeneralizeCallerSourceFactIdentityGeneral(){ assertEquals(new Fact("0.f"), AccessPathUtil.generalizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2.f")));assertEquals(newFact("0.f"),AccessPathUtil.generalizeCallerSourceFactgeneral(newIncomingEdge<>(newFact("2.f"),null,newFact("0.f"),null),newFact("2.f"))); public void testConcretizeCallerSourceFactIdentity() {publicvoidtestConcretizeCallerSourceFactIdentityConcret(){ assertEquals(new Fact("0.f"), AccessPathUtil.concretizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2.f")));assertEquals(newFact("0.f"),AccessPathUtil.concretizeCallerSourceFactconcret(newIncomingEdge<>(newFact("2.f"),null,newFact("0.f"),null),newFact("2.f"))); }}  @Test(expected=IllegalArgumentException.class)@Test(expected=IllegalArgumentException.class) public void testGeneralizeCallerSourceFactNoPrefix() {publicvoidtestGeneralizeCallerSourceFactNoPrefixGeneral(){ AccessPathUtil.generalizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2"));AccessPathUtil.generalizeCallerSourceFactgeneral(newIncomingEdge<>(newFact("2.f"),null,newFact("0.f"),null),newFact("2")); public void testConcretizeCallerSourceFactNoPrefix() {publicvoidtestConcretizeCallerSourceFactNoPrefixConcret(){ AccessPathUtil.concretizeCallerSourceFact(new IncomingEdge<>(new Fact("2.f"), null, new Fact("0.f"), null), new Fact("2"));AccessPathUtil.concretizeCallerSourceFactconcret(newIncomingEdge<>(newFact("2.f"),null,newFact("0.f"),null),newFact("2")); }}}}








test/heros/alias/FieldSensitiveSolverTest.java








View file @ 8d40408f






......@@ -124,7 +124,7 @@ public class FieldSensitiveSolverTest {









 }










 










 @Test










 public void prefixFactOfOnHoldFactIncoming() {










 public void prefixFactOfOnHoldFactIncoming_ProcessExitCase() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),



......@@ -139,6 +139,23 @@ public class FieldSensitiveSolverTest {









 helper.runSolver(false, "a");










 }










 










 @Test










 public void prefixFactOfSummaryIncoming_ProcessCallCase() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0","1")),










 callSite("b").calls("bar", flow("1", "2.f")).retSite("e", kill("1")),










 callSite("e").calls("bar", flow("4", "2")).retSite("f", kill("4")),










 normalStmt("f").succ("g", kill("5")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("2", readField("f"), "3")),










 exitStmt("d").returns(over("b"), to("e"), flow("3", "4")).returns(over("e"), to("f"), flow("3", "5")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void doNotPauseZeroSources() {










 helper.method("foo",



......












test/heros/alias/FieldSensitiveSolverTest.java








View file @ 8d40408f








test/heros/alias/FieldSensitiveSolverTest.java










View file @ 8d40408f


8d40408f



......@@ -124,7 +124,7 @@ public class FieldSensitiveSolverTest {









 }










 










 @Test










 public void prefixFactOfOnHoldFactIncoming() {










 public void prefixFactOfOnHoldFactIncoming_ProcessExitCase() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),



......@@ -139,6 +139,23 @@ public class FieldSensitiveSolverTest {









 helper.runSolver(false, "a");










 }










 










 @Test










 public void prefixFactOfSummaryIncoming_ProcessCallCase() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0","1")),










 callSite("b").calls("bar", flow("1", "2.f")).retSite("e", kill("1")),










 callSite("e").calls("bar", flow("4", "2")).retSite("f", kill("4")),










 normalStmt("f").succ("g", kill("5")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("2", readField("f"), "3")),










 exitStmt("d").returns(over("b"), to("e"), flow("3", "4")).returns(over("e"), to("f"), flow("3", "5")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void doNotPauseZeroSources() {










 helper.method("foo",



......






......@@ -124,7 +124,7 @@ public class FieldSensitiveSolverTest {









 }










 










 @Test










 public void prefixFactOfOnHoldFactIncoming() {










 public void prefixFactOfOnHoldFactIncoming_ProcessExitCase() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1")),



......@@ -139,6 +139,23 @@ public class FieldSensitiveSolverTest {









 helper.runSolver(false, "a");










 }










 










 @Test










 public void prefixFactOfSummaryIncoming_ProcessCallCase() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0","1")),










 callSite("b").calls("bar", flow("1", "2.f")).retSite("e", kill("1")),










 callSite("e").calls("bar", flow("4", "2")).retSite("f", kill("4")),










 normalStmt("f").succ("g", kill("5")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("2", readField("f"), "3")),










 exitStmt("d").returns(over("b"), to("e"), flow("3", "4")).returns(over("e"), to("f"), flow("3", "5")));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void doNotPauseZeroSources() {










 helper.method("foo",



......


 }}  @Test@Test public void prefixFactOfOnHoldFactIncoming() {publicvoidprefixFactOfOnHoldFactIncoming(){ public void prefixFactOfOnHoldFactIncoming_ProcessExitCase() {publicvoidprefixFactOfOnHoldFactIncoming_ProcessExitCase_ProcessExitCase(){ helper.method("foo",helper.method("foo", startPoints("a"),startPoints("a"), normalStmt("a").succ("b", flow("0", "1")),normalStmt("a").succ("b",flow("0","1")), helper.runSolver(false, "a");helper.runSolver(false,"a"); }}  @Test@Test public void prefixFactOfSummaryIncoming_ProcessCallCase() {publicvoidprefixFactOfSummaryIncoming_ProcessCallCase(){ helper.method("foo",helper.method("foo", startPoints("a"),startPoints("a"), normalStmt("a").succ("b", flow("0","1")),normalStmt("a").succ("b",flow("0","1")), callSite("b").calls("bar", flow("1", "2.f")).retSite("e", kill("1")),callSite("b").calls("bar",flow("1","2.f")).retSite("e",kill("1")), callSite("e").calls("bar", flow("4", "2")).retSite("f", kill("4")),callSite("e").calls("bar",flow("4","2")).retSite("f",kill("4")), normalStmt("f").succ("g", kill("5")));normalStmt("f").succ("g",kill("5")));  helper.method("bar",helper.method("bar", startPoints("c"),startPoints("c"), normalStmt("c").succ("d", flow("2", readField("f"), "3")),normalStmt("c").succ("d",flow("2",readField("f"),"3")), exitStmt("d").returns(over("b"), to("e"), flow("3", "4")).returns(over("e"), to("f"), flow("3", "5")));exitStmt("d").returns(over("b"),to("e"),flow("3","4")).returns(over("e"),to("f"),flow("3","5")));  helper.runSolver(false, "a");helper.runSolver(false,"a"); }}  @Test@Test public void doNotPauseZeroSources() {publicvoiddoNotPauseZeroSources(){ helper.method("foo",helper.method("foo",









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






