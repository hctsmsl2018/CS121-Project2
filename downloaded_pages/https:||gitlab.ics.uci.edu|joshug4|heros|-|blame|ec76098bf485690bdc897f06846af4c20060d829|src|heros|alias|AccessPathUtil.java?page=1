



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros

ec76098bf485690bdc897f06846af4c20060d829

















ec76098bf485690bdc897f06846af4c20060d829


Switch branch/tag










heros


src


heros


alias


AccessPathUtil.java



Find file
Normal viewHistoryPermalink






AccessPathUtil.java



4.75 KB









Newer










Older









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






1




2




3




4




5




6




7




8




9




10




11




12




/*******************************************************************************
 * Copyright (c) 2014 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;










handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






13




14




15




16




17




import java.util.ArrayList;

import com.google.common.base.Optional;

import heros.alias.FieldReference.Any;









annotated facts (WIP)


 

 


Johannes Lerch
committed
Nov 13, 2014






18




19




import heros.alias.FieldReference.SpecificFieldReference;










use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






20




21




22




23




24




25




26




27




28




29




public class AccessPathUtil {

	public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {
		if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))
			return false;	
		
		FieldReference[] prefixAccessPath = prefixCandidate.getAccessPath();
		FieldReference[] factAccessPath = fact.getAccessPath();
		
		for(int i=0; i<prefixAccessPath.length; i++) {









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






30




31




32




33




34




35




			if(i < factAccessPath.length) {
				if(!prefixAccessPath[i].includes(factAccessPath[i]))
					return false;
			}
			else if(!(prefixAccessPath[i] instanceof Any))
				return false;	









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






36




37




38




39




40




		}
		
		return true;
	}
	









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






41




	public static <D extends FieldSensitiveFact<?, D>> Optional<D> applyAbstractedSummary(D sourceFact, SummaryEdge<D, ?> summary) {









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






42




43




44




45




		if(!isPrefixOf(summary.getSourceFact(), sourceFact))
			throw new IllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'", summary, sourceFact));
		
		FieldReference[] concreteAccessPath = sourceFact.getAccessPath();









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






46




		FieldReference[] abstractAccessPath = summary.getSourceFact().getAccessPath();









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






47




48




49




		FieldReference[] targetAccessPath = summary.getTargetFact().getAccessPath();
		
		









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






50




51




52




53




54




55




56




		ArrayList<FieldReference> result = new ArrayList<>(targetAccessPath.length + concreteAccessPath.length - abstractAccessPath.length);
		int lastSpecificField = -1;
		for(int i=0; i< targetAccessPath.length; i++) {
			result.add(targetAccessPath[i]);
			if(targetAccessPath[i] instanceof SpecificFieldReference)
				lastSpecificField = i;
		}









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






57




		









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






58




59




60




61




62




63




64




65




66




67




68




69




70




		for(int i=abstractAccessPath.length; i<concreteAccessPath.length; i++) {
			if(lastSpecificField+1 < result.size()) {
				Optional<? extends FieldReference> mergedFieldRef = concreteAccessPath[i].merge((Any) result.get(lastSpecificField+1));
				if(!mergedFieldRef.isPresent())
					return Optional.absent();
				
				result.set(lastSpecificField+1, mergedFieldRef.get());
				lastSpecificField++;
			} else {
				result.add(concreteAccessPath[i]);
			}
		}
		return Optional.of(summary.getTargetFact().cloneWithAccessPath(result.toArray(new FieldReference[result.size()])));









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






71




	}









annotated facts (WIP)


 

 


Johannes Lerch
committed
Nov 13, 2014






72




73




74




75




76




77




78





	public static <D extends FieldSensitiveFact<?, D>> D cloneWithConcatenatedAccessPath(D fact, FieldReference... fieldRefs) {
		FieldReference[] accessPath = new FieldReference[fact.getAccessPath().length+fieldRefs.length];
		System.arraycopy(fact.getAccessPath(), 0, accessPath, 0, fact.getAccessPath().length);
		System.arraycopy(fieldRefs, 0, accessPath, fact.getAccessPath().length, fieldRefs.length);
		return fact.cloneWithAccessPath(accessPath);
	}









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






79




	









handling the case that incoming edge is prefix of existing summary


 

 


Johannes Lerch
committed
Nov 27, 2014






80




	public static <D extends FieldSensitiveFact<?, D>> D concretizeCallerSourceFact(IncomingEdge<D, ?> incomingEdge, D calleeSourceFact) {









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




		if(!isPrefixOf(incomingEdge.getCalleeSourceFact(), calleeSourceFact))
			throw new IllegalArgumentException(String.format("Callee Source Fact in IncomingEdge '%s' is not a prefix of the given fact '%s'.", incomingEdge, calleeSourceFact));
		
		FieldReference[] abstractAccessPath = incomingEdge.getCalleeSourceFact().getAccessPath();
		FieldReference[] concreteAccessPath = calleeSourceFact.getAccessPath();
		FieldReference[] targetAccessPath = incomingEdge.getCallerSourceFact().getAccessPath();
		
		FieldReference[] resultAccessPath = new FieldReference[targetAccessPath.length + concreteAccessPath.length - abstractAccessPath.length];

		//copy old access path
		System.arraycopy(targetAccessPath, 0, resultAccessPath, 0, targetAccessPath.length);
		
		//copy delta access path that was omitted while creating the abstracted source fact
		System.arraycopy(concreteAccessPath, abstractAccessPath.length, resultAccessPath, targetAccessPath.length, concreteAccessPath.length - abstractAccessPath.length);
		
		return incomingEdge.getCallerSourceFact().cloneWithAccessPath(resultAccessPath);
	}









Bug/test fixes


 

 


Johannes Lerch
committed
Dec 10, 2014






98




99




100




101




102




103




	
	public static FieldReference[] getAccessPathDelta(FieldReference[] prefixAccessPath, FieldReference[] accessPath) {
		FieldReference[] result = new FieldReference[accessPath.length - prefixAccessPath.length];
		System.arraycopy(accessPath, prefixAccessPath.length, result, 0, result.length);
		return result;
	}









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






104




}












H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros

ec76098bf485690bdc897f06846af4c20060d829

















ec76098bf485690bdc897f06846af4c20060d829


Switch branch/tag










heros


src


heros


alias


AccessPathUtil.java



Find file
Normal viewHistoryPermalink






AccessPathUtil.java



4.75 KB









Newer










Older









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






1




2




3




4




5




6




7




8




9




10




11




12




/*******************************************************************************
 * Copyright (c) 2014 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;










handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






13




14




15




16




17




import java.util.ArrayList;

import com.google.common.base.Optional;

import heros.alias.FieldReference.Any;









annotated facts (WIP)


 

 


Johannes Lerch
committed
Nov 13, 2014






18




19




import heros.alias.FieldReference.SpecificFieldReference;










use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






20




21




22




23




24




25




26




27




28




29




public class AccessPathUtil {

	public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {
		if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))
			return false;	
		
		FieldReference[] prefixAccessPath = prefixCandidate.getAccessPath();
		FieldReference[] factAccessPath = fact.getAccessPath();
		
		for(int i=0; i<prefixAccessPath.length; i++) {









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






30




31




32




33




34




35




			if(i < factAccessPath.length) {
				if(!prefixAccessPath[i].includes(factAccessPath[i]))
					return false;
			}
			else if(!(prefixAccessPath[i] instanceof Any))
				return false;	









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






36




37




38




39




40




		}
		
		return true;
	}
	









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






41




	public static <D extends FieldSensitiveFact<?, D>> Optional<D> applyAbstractedSummary(D sourceFact, SummaryEdge<D, ?> summary) {









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






42




43




44




45




		if(!isPrefixOf(summary.getSourceFact(), sourceFact))
			throw new IllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'", summary, sourceFact));
		
		FieldReference[] concreteAccessPath = sourceFact.getAccessPath();









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






46




		FieldReference[] abstractAccessPath = summary.getSourceFact().getAccessPath();









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






47




48




49




		FieldReference[] targetAccessPath = summary.getTargetFact().getAccessPath();
		
		









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






50




51




52




53




54




55




56




		ArrayList<FieldReference> result = new ArrayList<>(targetAccessPath.length + concreteAccessPath.length - abstractAccessPath.length);
		int lastSpecificField = -1;
		for(int i=0; i< targetAccessPath.length; i++) {
			result.add(targetAccessPath[i]);
			if(targetAccessPath[i] instanceof SpecificFieldReference)
				lastSpecificField = i;
		}









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






57




		









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






58




59




60




61




62




63




64




65




66




67




68




69




70




		for(int i=abstractAccessPath.length; i<concreteAccessPath.length; i++) {
			if(lastSpecificField+1 < result.size()) {
				Optional<? extends FieldReference> mergedFieldRef = concreteAccessPath[i].merge((Any) result.get(lastSpecificField+1));
				if(!mergedFieldRef.isPresent())
					return Optional.absent();
				
				result.set(lastSpecificField+1, mergedFieldRef.get());
				lastSpecificField++;
			} else {
				result.add(concreteAccessPath[i]);
			}
		}
		return Optional.of(summary.getTargetFact().cloneWithAccessPath(result.toArray(new FieldReference[result.size()])));









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






71




	}









annotated facts (WIP)


 

 


Johannes Lerch
committed
Nov 13, 2014






72




73




74




75




76




77




78





	public static <D extends FieldSensitiveFact<?, D>> D cloneWithConcatenatedAccessPath(D fact, FieldReference... fieldRefs) {
		FieldReference[] accessPath = new FieldReference[fact.getAccessPath().length+fieldRefs.length];
		System.arraycopy(fact.getAccessPath(), 0, accessPath, 0, fact.getAccessPath().length);
		System.arraycopy(fieldRefs, 0, accessPath, fact.getAccessPath().length, fieldRefs.length);
		return fact.cloneWithAccessPath(accessPath);
	}









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






79




	









handling the case that incoming edge is prefix of existing summary


 

 


Johannes Lerch
committed
Nov 27, 2014






80




	public static <D extends FieldSensitiveFact<?, D>> D concretizeCallerSourceFact(IncomingEdge<D, ?> incomingEdge, D calleeSourceFact) {









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




		if(!isPrefixOf(incomingEdge.getCalleeSourceFact(), calleeSourceFact))
			throw new IllegalArgumentException(String.format("Callee Source Fact in IncomingEdge '%s' is not a prefix of the given fact '%s'.", incomingEdge, calleeSourceFact));
		
		FieldReference[] abstractAccessPath = incomingEdge.getCalleeSourceFact().getAccessPath();
		FieldReference[] concreteAccessPath = calleeSourceFact.getAccessPath();
		FieldReference[] targetAccessPath = incomingEdge.getCallerSourceFact().getAccessPath();
		
		FieldReference[] resultAccessPath = new FieldReference[targetAccessPath.length + concreteAccessPath.length - abstractAccessPath.length];

		//copy old access path
		System.arraycopy(targetAccessPath, 0, resultAccessPath, 0, targetAccessPath.length);
		
		//copy delta access path that was omitted while creating the abstracted source fact
		System.arraycopy(concreteAccessPath, abstractAccessPath.length, resultAccessPath, targetAccessPath.length, concreteAccessPath.length - abstractAccessPath.length);
		
		return incomingEdge.getCallerSourceFact().cloneWithAccessPath(resultAccessPath);
	}









Bug/test fixes


 

 


Johannes Lerch
committed
Dec 10, 2014






98




99




100




101




102




103




	
	public static FieldReference[] getAccessPathDelta(FieldReference[] prefixAccessPath, FieldReference[] accessPath) {
		FieldReference[] result = new FieldReference[accessPath.length - prefixAccessPath.length];
		System.arraycopy(accessPath, prefixAccessPath.length, result, 0, result.length);
		return result;
	}









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






104




}











Open sidebar



Joshua Garcia heros

ec76098bf485690bdc897f06846af4c20060d829







Open sidebar



Joshua Garcia heros

ec76098bf485690bdc897f06846af4c20060d829




Open sidebar

Joshua Garcia heros

ec76098bf485690bdc897f06846af4c20060d829


Joshua Garciaherosheros
ec76098bf485690bdc897f06846af4c20060d829










ec76098bf485690bdc897f06846af4c20060d829


Switch branch/tag










heros


src


heros


alias


AccessPathUtil.java



Find file
Normal viewHistoryPermalink






AccessPathUtil.java



4.75 KB









Newer










Older









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






1




2




3




4




5




6




7




8




9




10




11




12




/*******************************************************************************
 * Copyright (c) 2014 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;










handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






13




14




15




16




17




import java.util.ArrayList;

import com.google.common.base.Optional;

import heros.alias.FieldReference.Any;









annotated facts (WIP)


 

 


Johannes Lerch
committed
Nov 13, 2014






18




19




import heros.alias.FieldReference.SpecificFieldReference;










use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






20




21




22




23




24




25




26




27




28




29




public class AccessPathUtil {

	public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {
		if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))
			return false;	
		
		FieldReference[] prefixAccessPath = prefixCandidate.getAccessPath();
		FieldReference[] factAccessPath = fact.getAccessPath();
		
		for(int i=0; i<prefixAccessPath.length; i++) {









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






30




31




32




33




34




35




			if(i < factAccessPath.length) {
				if(!prefixAccessPath[i].includes(factAccessPath[i]))
					return false;
			}
			else if(!(prefixAccessPath[i] instanceof Any))
				return false;	









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






36




37




38




39




40




		}
		
		return true;
	}
	









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






41




	public static <D extends FieldSensitiveFact<?, D>> Optional<D> applyAbstractedSummary(D sourceFact, SummaryEdge<D, ?> summary) {









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






42




43




44




45




		if(!isPrefixOf(summary.getSourceFact(), sourceFact))
			throw new IllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'", summary, sourceFact));
		
		FieldReference[] concreteAccessPath = sourceFact.getAccessPath();









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






46




		FieldReference[] abstractAccessPath = summary.getSourceFact().getAccessPath();









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






47




48




49




		FieldReference[] targetAccessPath = summary.getTargetFact().getAccessPath();
		
		









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






50




51




52




53




54




55




56




		ArrayList<FieldReference> result = new ArrayList<>(targetAccessPath.length + concreteAccessPath.length - abstractAccessPath.length);
		int lastSpecificField = -1;
		for(int i=0; i< targetAccessPath.length; i++) {
			result.add(targetAccessPath[i]);
			if(targetAccessPath[i] instanceof SpecificFieldReference)
				lastSpecificField = i;
		}









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






57




		









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






58




59




60




61




62




63




64




65




66




67




68




69




70




		for(int i=abstractAccessPath.length; i<concreteAccessPath.length; i++) {
			if(lastSpecificField+1 < result.size()) {
				Optional<? extends FieldReference> mergedFieldRef = concreteAccessPath[i].merge((Any) result.get(lastSpecificField+1));
				if(!mergedFieldRef.isPresent())
					return Optional.absent();
				
				result.set(lastSpecificField+1, mergedFieldRef.get());
				lastSpecificField++;
			} else {
				result.add(concreteAccessPath[i]);
			}
		}
		return Optional.of(summary.getTargetFact().cloneWithAccessPath(result.toArray(new FieldReference[result.size()])));









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






71




	}









annotated facts (WIP)


 

 


Johannes Lerch
committed
Nov 13, 2014






72




73




74




75




76




77




78





	public static <D extends FieldSensitiveFact<?, D>> D cloneWithConcatenatedAccessPath(D fact, FieldReference... fieldRefs) {
		FieldReference[] accessPath = new FieldReference[fact.getAccessPath().length+fieldRefs.length];
		System.arraycopy(fact.getAccessPath(), 0, accessPath, 0, fact.getAccessPath().length);
		System.arraycopy(fieldRefs, 0, accessPath, fact.getAccessPath().length, fieldRefs.length);
		return fact.cloneWithAccessPath(accessPath);
	}









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






79




	









handling the case that incoming edge is prefix of existing summary


 

 


Johannes Lerch
committed
Nov 27, 2014






80




	public static <D extends FieldSensitiveFact<?, D>> D concretizeCallerSourceFact(IncomingEdge<D, ?> incomingEdge, D calleeSourceFact) {









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




		if(!isPrefixOf(incomingEdge.getCalleeSourceFact(), calleeSourceFact))
			throw new IllegalArgumentException(String.format("Callee Source Fact in IncomingEdge '%s' is not a prefix of the given fact '%s'.", incomingEdge, calleeSourceFact));
		
		FieldReference[] abstractAccessPath = incomingEdge.getCalleeSourceFact().getAccessPath();
		FieldReference[] concreteAccessPath = calleeSourceFact.getAccessPath();
		FieldReference[] targetAccessPath = incomingEdge.getCallerSourceFact().getAccessPath();
		
		FieldReference[] resultAccessPath = new FieldReference[targetAccessPath.length + concreteAccessPath.length - abstractAccessPath.length];

		//copy old access path
		System.arraycopy(targetAccessPath, 0, resultAccessPath, 0, targetAccessPath.length);
		
		//copy delta access path that was omitted while creating the abstracted source fact
		System.arraycopy(concreteAccessPath, abstractAccessPath.length, resultAccessPath, targetAccessPath.length, concreteAccessPath.length - abstractAccessPath.length);
		
		return incomingEdge.getCallerSourceFact().cloneWithAccessPath(resultAccessPath);
	}









Bug/test fixes


 

 


Johannes Lerch
committed
Dec 10, 2014






98




99




100




101




102




103




	
	public static FieldReference[] getAccessPathDelta(FieldReference[] prefixAccessPath, FieldReference[] accessPath) {
		FieldReference[] result = new FieldReference[accessPath.length - prefixAccessPath.length];
		System.arraycopy(accessPath, prefixAccessPath.length, result, 0, result.length);
		return result;
	}









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






104




}














ec76098bf485690bdc897f06846af4c20060d829


Switch branch/tag










heros


src


heros


alias


AccessPathUtil.java



Find file
Normal viewHistoryPermalink






AccessPathUtil.java



4.75 KB









Newer










Older









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






1




2




3




4




5




6




7




8




9




10




11




12




/*******************************************************************************
 * Copyright (c) 2014 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;










handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






13




14




15




16




17




import java.util.ArrayList;

import com.google.common.base.Optional;

import heros.alias.FieldReference.Any;









annotated facts (WIP)


 

 


Johannes Lerch
committed
Nov 13, 2014






18




19




import heros.alias.FieldReference.SpecificFieldReference;










use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






20




21




22




23




24




25




26




27




28




29




public class AccessPathUtil {

	public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {
		if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))
			return false;	
		
		FieldReference[] prefixAccessPath = prefixCandidate.getAccessPath();
		FieldReference[] factAccessPath = fact.getAccessPath();
		
		for(int i=0; i<prefixAccessPath.length; i++) {









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






30




31




32




33




34




35




			if(i < factAccessPath.length) {
				if(!prefixAccessPath[i].includes(factAccessPath[i]))
					return false;
			}
			else if(!(prefixAccessPath[i] instanceof Any))
				return false;	









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






36




37




38




39




40




		}
		
		return true;
	}
	









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






41




	public static <D extends FieldSensitiveFact<?, D>> Optional<D> applyAbstractedSummary(D sourceFact, SummaryEdge<D, ?> summary) {









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






42




43




44




45




		if(!isPrefixOf(summary.getSourceFact(), sourceFact))
			throw new IllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'", summary, sourceFact));
		
		FieldReference[] concreteAccessPath = sourceFact.getAccessPath();









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






46




		FieldReference[] abstractAccessPath = summary.getSourceFact().getAccessPath();









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






47




48




49




		FieldReference[] targetAccessPath = summary.getTargetFact().getAccessPath();
		
		









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






50




51




52




53




54




55




56




		ArrayList<FieldReference> result = new ArrayList<>(targetAccessPath.length + concreteAccessPath.length - abstractAccessPath.length);
		int lastSpecificField = -1;
		for(int i=0; i< targetAccessPath.length; i++) {
			result.add(targetAccessPath[i]);
			if(targetAccessPath[i] instanceof SpecificFieldReference)
				lastSpecificField = i;
		}









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






57




		









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






58




59




60




61




62




63




64




65




66




67




68




69




70




		for(int i=abstractAccessPath.length; i<concreteAccessPath.length; i++) {
			if(lastSpecificField+1 < result.size()) {
				Optional<? extends FieldReference> mergedFieldRef = concreteAccessPath[i].merge((Any) result.get(lastSpecificField+1));
				if(!mergedFieldRef.isPresent())
					return Optional.absent();
				
				result.set(lastSpecificField+1, mergedFieldRef.get());
				lastSpecificField++;
			} else {
				result.add(concreteAccessPath[i]);
			}
		}
		return Optional.of(summary.getTargetFact().cloneWithAccessPath(result.toArray(new FieldReference[result.size()])));









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






71




	}









annotated facts (WIP)


 

 


Johannes Lerch
committed
Nov 13, 2014






72




73




74




75




76




77




78





	public static <D extends FieldSensitiveFact<?, D>> D cloneWithConcatenatedAccessPath(D fact, FieldReference... fieldRefs) {
		FieldReference[] accessPath = new FieldReference[fact.getAccessPath().length+fieldRefs.length];
		System.arraycopy(fact.getAccessPath(), 0, accessPath, 0, fact.getAccessPath().length);
		System.arraycopy(fieldRefs, 0, accessPath, fact.getAccessPath().length, fieldRefs.length);
		return fact.cloneWithAccessPath(accessPath);
	}









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






79




	









handling the case that incoming edge is prefix of existing summary


 

 


Johannes Lerch
committed
Nov 27, 2014






80




	public static <D extends FieldSensitiveFact<?, D>> D concretizeCallerSourceFact(IncomingEdge<D, ?> incomingEdge, D calleeSourceFact) {









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




		if(!isPrefixOf(incomingEdge.getCalleeSourceFact(), calleeSourceFact))
			throw new IllegalArgumentException(String.format("Callee Source Fact in IncomingEdge '%s' is not a prefix of the given fact '%s'.", incomingEdge, calleeSourceFact));
		
		FieldReference[] abstractAccessPath = incomingEdge.getCalleeSourceFact().getAccessPath();
		FieldReference[] concreteAccessPath = calleeSourceFact.getAccessPath();
		FieldReference[] targetAccessPath = incomingEdge.getCallerSourceFact().getAccessPath();
		
		FieldReference[] resultAccessPath = new FieldReference[targetAccessPath.length + concreteAccessPath.length - abstractAccessPath.length];

		//copy old access path
		System.arraycopy(targetAccessPath, 0, resultAccessPath, 0, targetAccessPath.length);
		
		//copy delta access path that was omitted while creating the abstracted source fact
		System.arraycopy(concreteAccessPath, abstractAccessPath.length, resultAccessPath, targetAccessPath.length, concreteAccessPath.length - abstractAccessPath.length);
		
		return incomingEdge.getCallerSourceFact().cloneWithAccessPath(resultAccessPath);
	}









Bug/test fixes


 

 


Johannes Lerch
committed
Dec 10, 2014






98




99




100




101




102




103




	
	public static FieldReference[] getAccessPathDelta(FieldReference[] prefixAccessPath, FieldReference[] accessPath) {
		FieldReference[] result = new FieldReference[accessPath.length - prefixAccessPath.length];
		System.arraycopy(accessPath, prefixAccessPath.length, result, 0, result.length);
		return result;
	}









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






104




}










ec76098bf485690bdc897f06846af4c20060d829


Switch branch/tag










heros


src


heros


alias


AccessPathUtil.java



Find file
Normal viewHistoryPermalink




ec76098bf485690bdc897f06846af4c20060d829


Switch branch/tag










heros


src


heros


alias


AccessPathUtil.java





ec76098bf485690bdc897f06846af4c20060d829


Switch branch/tag








ec76098bf485690bdc897f06846af4c20060d829


Switch branch/tag





ec76098bf485690bdc897f06846af4c20060d829

Switch branch/tag





Switch branch/tag



Switch branch/tagSwitch branch/tag
heros

src

heros

alias

AccessPathUtil.java
Find file
Normal viewHistoryPermalink




AccessPathUtil.java



4.75 KB









Newer










Older









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






1




2




3




4




5




6




7




8




9




10




11




12




/*******************************************************************************
 * Copyright (c) 2014 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;










handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






13




14




15




16




17




import java.util.ArrayList;

import com.google.common.base.Optional;

import heros.alias.FieldReference.Any;









annotated facts (WIP)


 

 


Johannes Lerch
committed
Nov 13, 2014






18




19




import heros.alias.FieldReference.SpecificFieldReference;










use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






20




21




22




23




24




25




26




27




28




29




public class AccessPathUtil {

	public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {
		if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))
			return false;	
		
		FieldReference[] prefixAccessPath = prefixCandidate.getAccessPath();
		FieldReference[] factAccessPath = fact.getAccessPath();
		
		for(int i=0; i<prefixAccessPath.length; i++) {









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






30




31




32




33




34




35




			if(i < factAccessPath.length) {
				if(!prefixAccessPath[i].includes(factAccessPath[i]))
					return false;
			}
			else if(!(prefixAccessPath[i] instanceof Any))
				return false;	









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






36




37




38




39




40




		}
		
		return true;
	}
	









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






41




	public static <D extends FieldSensitiveFact<?, D>> Optional<D> applyAbstractedSummary(D sourceFact, SummaryEdge<D, ?> summary) {









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






42




43




44




45




		if(!isPrefixOf(summary.getSourceFact(), sourceFact))
			throw new IllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'", summary, sourceFact));
		
		FieldReference[] concreteAccessPath = sourceFact.getAccessPath();









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






46




		FieldReference[] abstractAccessPath = summary.getSourceFact().getAccessPath();









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






47




48




49




		FieldReference[] targetAccessPath = summary.getTargetFact().getAccessPath();
		
		









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






50




51




52




53




54




55




56




		ArrayList<FieldReference> result = new ArrayList<>(targetAccessPath.length + concreteAccessPath.length - abstractAccessPath.length);
		int lastSpecificField = -1;
		for(int i=0; i< targetAccessPath.length; i++) {
			result.add(targetAccessPath[i]);
			if(targetAccessPath[i] instanceof SpecificFieldReference)
				lastSpecificField = i;
		}









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






57




		









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






58




59




60




61




62




63




64




65




66




67




68




69




70




		for(int i=abstractAccessPath.length; i<concreteAccessPath.length; i++) {
			if(lastSpecificField+1 < result.size()) {
				Optional<? extends FieldReference> mergedFieldRef = concreteAccessPath[i].merge((Any) result.get(lastSpecificField+1));
				if(!mergedFieldRef.isPresent())
					return Optional.absent();
				
				result.set(lastSpecificField+1, mergedFieldRef.get());
				lastSpecificField++;
			} else {
				result.add(concreteAccessPath[i]);
			}
		}
		return Optional.of(summary.getTargetFact().cloneWithAccessPath(result.toArray(new FieldReference[result.size()])));









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






71




	}









annotated facts (WIP)


 

 


Johannes Lerch
committed
Nov 13, 2014






72




73




74




75




76




77




78





	public static <D extends FieldSensitiveFact<?, D>> D cloneWithConcatenatedAccessPath(D fact, FieldReference... fieldRefs) {
		FieldReference[] accessPath = new FieldReference[fact.getAccessPath().length+fieldRefs.length];
		System.arraycopy(fact.getAccessPath(), 0, accessPath, 0, fact.getAccessPath().length);
		System.arraycopy(fieldRefs, 0, accessPath, fact.getAccessPath().length, fieldRefs.length);
		return fact.cloneWithAccessPath(accessPath);
	}









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






79




	









handling the case that incoming edge is prefix of existing summary


 

 


Johannes Lerch
committed
Nov 27, 2014






80




	public static <D extends FieldSensitiveFact<?, D>> D concretizeCallerSourceFact(IncomingEdge<D, ?> incomingEdge, D calleeSourceFact) {









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




		if(!isPrefixOf(incomingEdge.getCalleeSourceFact(), calleeSourceFact))
			throw new IllegalArgumentException(String.format("Callee Source Fact in IncomingEdge '%s' is not a prefix of the given fact '%s'.", incomingEdge, calleeSourceFact));
		
		FieldReference[] abstractAccessPath = incomingEdge.getCalleeSourceFact().getAccessPath();
		FieldReference[] concreteAccessPath = calleeSourceFact.getAccessPath();
		FieldReference[] targetAccessPath = incomingEdge.getCallerSourceFact().getAccessPath();
		
		FieldReference[] resultAccessPath = new FieldReference[targetAccessPath.length + concreteAccessPath.length - abstractAccessPath.length];

		//copy old access path
		System.arraycopy(targetAccessPath, 0, resultAccessPath, 0, targetAccessPath.length);
		
		//copy delta access path that was omitted while creating the abstracted source fact
		System.arraycopy(concreteAccessPath, abstractAccessPath.length, resultAccessPath, targetAccessPath.length, concreteAccessPath.length - abstractAccessPath.length);
		
		return incomingEdge.getCallerSourceFact().cloneWithAccessPath(resultAccessPath);
	}









Bug/test fixes


 

 


Johannes Lerch
committed
Dec 10, 2014






98




99




100




101




102




103




	
	public static FieldReference[] getAccessPathDelta(FieldReference[] prefixAccessPath, FieldReference[] accessPath) {
		FieldReference[] result = new FieldReference[accessPath.length - prefixAccessPath.length];
		System.arraycopy(accessPath, prefixAccessPath.length, result, 0, result.length);
		return result;
	}









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






104




}








AccessPathUtil.java



4.75 KB










AccessPathUtil.java



4.75 KB









Newer










Older
NewerOlder







use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






1




2




3




4




5




6




7




8




9




10




11




12




/*******************************************************************************
 * Copyright (c) 2014 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;










handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






13




14




15




16




17




import java.util.ArrayList;

import com.google.common.base.Optional;

import heros.alias.FieldReference.Any;









annotated facts (WIP)


 

 


Johannes Lerch
committed
Nov 13, 2014






18




19




import heros.alias.FieldReference.SpecificFieldReference;










use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






20




21




22




23




24




25




26




27




28




29




public class AccessPathUtil {

	public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {
		if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))
			return false;	
		
		FieldReference[] prefixAccessPath = prefixCandidate.getAccessPath();
		FieldReference[] factAccessPath = fact.getAccessPath();
		
		for(int i=0; i<prefixAccessPath.length; i++) {









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






30




31




32




33




34




35




			if(i < factAccessPath.length) {
				if(!prefixAccessPath[i].includes(factAccessPath[i]))
					return false;
			}
			else if(!(prefixAccessPath[i] instanceof Any))
				return false;	









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






36




37




38




39




40




		}
		
		return true;
	}
	









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






41




	public static <D extends FieldSensitiveFact<?, D>> Optional<D> applyAbstractedSummary(D sourceFact, SummaryEdge<D, ?> summary) {









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






42




43




44




45




		if(!isPrefixOf(summary.getSourceFact(), sourceFact))
			throw new IllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'", summary, sourceFact));
		
		FieldReference[] concreteAccessPath = sourceFact.getAccessPath();









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






46




		FieldReference[] abstractAccessPath = summary.getSourceFact().getAccessPath();









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






47




48




49




		FieldReference[] targetAccessPath = summary.getTargetFact().getAccessPath();
		
		









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






50




51




52




53




54




55




56




		ArrayList<FieldReference> result = new ArrayList<>(targetAccessPath.length + concreteAccessPath.length - abstractAccessPath.length);
		int lastSpecificField = -1;
		for(int i=0; i< targetAccessPath.length; i++) {
			result.add(targetAccessPath[i]);
			if(targetAccessPath[i] instanceof SpecificFieldReference)
				lastSpecificField = i;
		}









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






57




		









handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015






58




59




60




61




62




63




64




65




66




67




68




69




70




		for(int i=abstractAccessPath.length; i<concreteAccessPath.length; i++) {
			if(lastSpecificField+1 < result.size()) {
				Optional<? extends FieldReference> mergedFieldRef = concreteAccessPath[i].merge((Any) result.get(lastSpecificField+1));
				if(!mergedFieldRef.isPresent())
					return Optional.absent();
				
				result.set(lastSpecificField+1, mergedFieldRef.get());
				lastSpecificField++;
			} else {
				result.add(concreteAccessPath[i]);
			}
		}
		return Optional.of(summary.getTargetFact().cloneWithAccessPath(result.toArray(new FieldReference[result.size()])));









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






71




	}









annotated facts (WIP)


 

 


Johannes Lerch
committed
Nov 13, 2014






72




73




74




75




76




77




78





	public static <D extends FieldSensitiveFact<?, D>> D cloneWithConcatenatedAccessPath(D fact, FieldReference... fieldRefs) {
		FieldReference[] accessPath = new FieldReference[fact.getAccessPath().length+fieldRefs.length];
		System.arraycopy(fact.getAccessPath(), 0, accessPath, 0, fact.getAccessPath().length);
		System.arraycopy(fieldRefs, 0, accessPath, fact.getAccessPath().length, fieldRefs.length);
		return fact.cloneWithAccessPath(accessPath);
	}









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






79




	









handling the case that incoming edge is prefix of existing summary


 

 


Johannes Lerch
committed
Nov 27, 2014






80




	public static <D extends FieldSensitiveFact<?, D>> D concretizeCallerSourceFact(IncomingEdge<D, ?> incomingEdge, D calleeSourceFact) {









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






81




82




83




84




85




86




87




88




89




90




91




92




93




94




95




96




97




		if(!isPrefixOf(incomingEdge.getCalleeSourceFact(), calleeSourceFact))
			throw new IllegalArgumentException(String.format("Callee Source Fact in IncomingEdge '%s' is not a prefix of the given fact '%s'.", incomingEdge, calleeSourceFact));
		
		FieldReference[] abstractAccessPath = incomingEdge.getCalleeSourceFact().getAccessPath();
		FieldReference[] concreteAccessPath = calleeSourceFact.getAccessPath();
		FieldReference[] targetAccessPath = incomingEdge.getCallerSourceFact().getAccessPath();
		
		FieldReference[] resultAccessPath = new FieldReference[targetAccessPath.length + concreteAccessPath.length - abstractAccessPath.length];

		//copy old access path
		System.arraycopy(targetAccessPath, 0, resultAccessPath, 0, targetAccessPath.length);
		
		//copy delta access path that was omitted while creating the abstracted source fact
		System.arraycopy(concreteAccessPath, abstractAccessPath.length, resultAccessPath, targetAccessPath.length, concreteAccessPath.length - abstractAccessPath.length);
		
		return incomingEdge.getCallerSourceFact().cloneWithAccessPath(resultAccessPath);
	}









Bug/test fixes


 

 


Johannes Lerch
committed
Dec 10, 2014






98




99




100




101




102




103




	
	public static FieldReference[] getAccessPathDelta(FieldReference[] prefixAccessPath, FieldReference[] accessPath) {
		FieldReference[] result = new FieldReference[accessPath.length - prefixAccessPath.length];
		System.arraycopy(accessPath, prefixAccessPath.length, result, 0, result.length);
		return result;
	}









use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014






104




}







use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014



use of abstracted summaries



 

use of abstracted summaries


Johannes Lerch
committed
Oct 22, 2014

1

2

3

4

5

6

7

8

9

10

11

12
/*******************************************************************************/******************************************************************************* * Copyright (c) 2014 Johannes Lerch. * Copyright (c) 2014 Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;



handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015



handling for writing fields / excluding access paths


 

 

handling for writing fields / excluding access paths

 

Johannes Lerch
committed
Jan 05, 2015

13

14

15

16

17
import java.util.ArrayList;importjava.util.ArrayList;import com.google.common.base.Optional;importcom.google.common.base.Optional;import heros.alias.FieldReference.Any;importheros.alias.FieldReference.Any;



annotated facts (WIP)


 

 


Johannes Lerch
committed
Nov 13, 2014



annotated facts (WIP)


 

 

annotated facts (WIP)

 

Johannes Lerch
committed
Nov 13, 2014

18

19
import heros.alias.FieldReference.SpecificFieldReference;importheros.alias.FieldReference.SpecificFieldReference;



use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014



use of abstracted summaries



 

use of abstracted summaries


Johannes Lerch
committed
Oct 22, 2014

20

21

22

23

24

25

26

27

28

29
public class AccessPathUtil {publicclassAccessPathUtil{	public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {publicstatic<DextendsFieldSensitiveFact<?,D>>booleanisPrefixOf(DprefixCandidate,Dfact){		if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))			return false;	returnfalse;				FieldReference[] prefixAccessPath = prefixCandidate.getAccessPath();FieldReference[]prefixAccessPath=prefixCandidate.getAccessPath();		FieldReference[] factAccessPath = fact.getAccessPath();FieldReference[]factAccessPath=fact.getAccessPath();				for(int i=0; i<prefixAccessPath.length; i++) {for(inti=0;i<prefixAccessPath.length;i++){



handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015



handling for writing fields / excluding access paths


 

 

handling for writing fields / excluding access paths

 

Johannes Lerch
committed
Jan 05, 2015

30

31

32

33

34

35
			if(i < factAccessPath.length) {if(i<factAccessPath.length){				if(!prefixAccessPath[i].includes(factAccessPath[i]))if(!prefixAccessPath[i].includes(factAccessPath[i]))					return false;returnfalse;			}}			else if(!(prefixAccessPath[i] instanceof Any))elseif(!(prefixAccessPath[i]instanceofAny))				return false;	returnfalse;



use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014



use of abstracted summaries



 

use of abstracted summaries


Johannes Lerch
committed
Oct 22, 2014

36

37

38

39

40
		}}				return true;returntrue;	}}	



handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015



handling for writing fields / excluding access paths


 

 

handling for writing fields / excluding access paths

 

Johannes Lerch
committed
Jan 05, 2015

41
	public static <D extends FieldSensitiveFact<?, D>> Optional<D> applyAbstractedSummary(D sourceFact, SummaryEdge<D, ?> summary) {publicstatic<DextendsFieldSensitiveFact<?,D>>Optional<D>applyAbstractedSummary(DsourceFact,SummaryEdge<D,?>summary){



use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014



use of abstracted summaries



 

use of abstracted summaries


Johannes Lerch
committed
Oct 22, 2014

42

43

44

45
		if(!isPrefixOf(summary.getSourceFact(), sourceFact))if(!isPrefixOf(summary.getSourceFact(),sourceFact))			throw new IllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'", summary, sourceFact));thrownewIllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'",summary,sourceFact));				FieldReference[] concreteAccessPath = sourceFact.getAccessPath();FieldReference[]concreteAccessPath=sourceFact.getAccessPath();



handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015



handling for writing fields / excluding access paths


 

 

handling for writing fields / excluding access paths

 

Johannes Lerch
committed
Jan 05, 2015

46
		FieldReference[] abstractAccessPath = summary.getSourceFact().getAccessPath();FieldReference[]abstractAccessPath=summary.getSourceFact().getAccessPath();



use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014



use of abstracted summaries



 

use of abstracted summaries


Johannes Lerch
committed
Oct 22, 2014

47

48

49
		FieldReference[] targetAccessPath = summary.getTargetFact().getAccessPath();FieldReference[]targetAccessPath=summary.getTargetFact().getAccessPath();				



handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015



handling for writing fields / excluding access paths


 

 

handling for writing fields / excluding access paths

 

Johannes Lerch
committed
Jan 05, 2015

50

51

52

53

54

55

56
		ArrayList<FieldReference> result = new ArrayList<>(targetAccessPath.length + concreteAccessPath.length - abstractAccessPath.length);ArrayList<FieldReference>result=newArrayList<>(targetAccessPath.length+concreteAccessPath.length-abstractAccessPath.length);		int lastSpecificField = -1;intlastSpecificField=-1;		for(int i=0; i< targetAccessPath.length; i++) {for(inti=0;i<targetAccessPath.length;i++){			result.add(targetAccessPath[i]);result.add(targetAccessPath[i]);			if(targetAccessPath[i] instanceof SpecificFieldReference)if(targetAccessPath[i]instanceofSpecificFieldReference)				lastSpecificField = i;lastSpecificField=i;		}}



use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014



use of abstracted summaries



 

use of abstracted summaries


Johannes Lerch
committed
Oct 22, 2014

57
		



handling for writing fields / excluding access paths


 

 


Johannes Lerch
committed
Jan 05, 2015



handling for writing fields / excluding access paths


 

 

handling for writing fields / excluding access paths

 

Johannes Lerch
committed
Jan 05, 2015

58

59

60

61

62

63

64

65

66

67

68

69

70
		for(int i=abstractAccessPath.length; i<concreteAccessPath.length; i++) {for(inti=abstractAccessPath.length;i<concreteAccessPath.length;i++){			if(lastSpecificField+1 < result.size()) {if(lastSpecificField+1<result.size()){				Optional<? extends FieldReference> mergedFieldRef = concreteAccessPath[i].merge((Any) result.get(lastSpecificField+1));Optional<?extendsFieldReference>mergedFieldRef=concreteAccessPath[i].merge((Any)result.get(lastSpecificField+1));				if(!mergedFieldRef.isPresent())if(!mergedFieldRef.isPresent())					return Optional.absent();returnOptional.absent();								result.set(lastSpecificField+1, mergedFieldRef.get());result.set(lastSpecificField+1,mergedFieldRef.get());				lastSpecificField++;lastSpecificField++;			} else {}else{				result.add(concreteAccessPath[i]);result.add(concreteAccessPath[i]);			}}		}}		return Optional.of(summary.getTargetFact().cloneWithAccessPath(result.toArray(new FieldReference[result.size()])));returnOptional.of(summary.getTargetFact().cloneWithAccessPath(result.toArray(newFieldReference[result.size()])));



use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014



use of abstracted summaries



 

use of abstracted summaries


Johannes Lerch
committed
Oct 22, 2014

71
	}}



annotated facts (WIP)


 

 


Johannes Lerch
committed
Nov 13, 2014



annotated facts (WIP)


 

 

annotated facts (WIP)

 

Johannes Lerch
committed
Nov 13, 2014

72

73

74

75

76

77

78
	public static <D extends FieldSensitiveFact<?, D>> D cloneWithConcatenatedAccessPath(D fact, FieldReference... fieldRefs) {publicstatic<DextendsFieldSensitiveFact<?,D>>DcloneWithConcatenatedAccessPath(Dfact,FieldReference...fieldRefs){		FieldReference[] accessPath = new FieldReference[fact.getAccessPath().length+fieldRefs.length];FieldReference[]accessPath=newFieldReference[fact.getAccessPath().length+fieldRefs.length];		System.arraycopy(fact.getAccessPath(), 0, accessPath, 0, fact.getAccessPath().length);System.arraycopy(fact.getAccessPath(),0,accessPath,0,fact.getAccessPath().length);		System.arraycopy(fieldRefs, 0, accessPath, fact.getAccessPath().length, fieldRefs.length);System.arraycopy(fieldRefs,0,accessPath,fact.getAccessPath().length,fieldRefs.length);		return fact.cloneWithAccessPath(accessPath);returnfact.cloneWithAccessPath(accessPath);	}}



edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014



edges on hold + resume


 

 

edges on hold + resume

 

Johannes Lerch
committed
Nov 25, 2014

79
	



handling the case that incoming edge is prefix of existing summary


 

 


Johannes Lerch
committed
Nov 27, 2014



handling the case that incoming edge is prefix of existing summary


 

 

handling the case that incoming edge is prefix of existing summary

 

Johannes Lerch
committed
Nov 27, 2014

80
	public static <D extends FieldSensitiveFact<?, D>> D concretizeCallerSourceFact(IncomingEdge<D, ?> incomingEdge, D calleeSourceFact) {publicstatic<DextendsFieldSensitiveFact<?,D>>DconcretizeCallerSourceFact(IncomingEdge<D,?>incomingEdge,DcalleeSourceFact){



edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014



edges on hold + resume


 

 

edges on hold + resume

 

Johannes Lerch
committed
Nov 25, 2014

81

82

83

84

85

86

87

88

89

90

91

92

93

94

95

96

97
		if(!isPrefixOf(incomingEdge.getCalleeSourceFact(), calleeSourceFact))if(!isPrefixOf(incomingEdge.getCalleeSourceFact(),calleeSourceFact))			throw new IllegalArgumentException(String.format("Callee Source Fact in IncomingEdge '%s' is not a prefix of the given fact '%s'.", incomingEdge, calleeSourceFact));thrownewIllegalArgumentException(String.format("Callee Source Fact in IncomingEdge '%s' is not a prefix of the given fact '%s'.",incomingEdge,calleeSourceFact));				FieldReference[] abstractAccessPath = incomingEdge.getCalleeSourceFact().getAccessPath();FieldReference[]abstractAccessPath=incomingEdge.getCalleeSourceFact().getAccessPath();		FieldReference[] concreteAccessPath = calleeSourceFact.getAccessPath();FieldReference[]concreteAccessPath=calleeSourceFact.getAccessPath();		FieldReference[] targetAccessPath = incomingEdge.getCallerSourceFact().getAccessPath();FieldReference[]targetAccessPath=incomingEdge.getCallerSourceFact().getAccessPath();				FieldReference[] resultAccessPath = new FieldReference[targetAccessPath.length + concreteAccessPath.length - abstractAccessPath.length];FieldReference[]resultAccessPath=newFieldReference[targetAccessPath.length+concreteAccessPath.length-abstractAccessPath.length];		//copy old access path//copy old access path		System.arraycopy(targetAccessPath, 0, resultAccessPath, 0, targetAccessPath.length);System.arraycopy(targetAccessPath,0,resultAccessPath,0,targetAccessPath.length);				//copy delta access path that was omitted while creating the abstracted source fact//copy delta access path that was omitted while creating the abstracted source fact		System.arraycopy(concreteAccessPath, abstractAccessPath.length, resultAccessPath, targetAccessPath.length, concreteAccessPath.length - abstractAccessPath.length);System.arraycopy(concreteAccessPath,abstractAccessPath.length,resultAccessPath,targetAccessPath.length,concreteAccessPath.length-abstractAccessPath.length);				return incomingEdge.getCallerSourceFact().cloneWithAccessPath(resultAccessPath);returnincomingEdge.getCallerSourceFact().cloneWithAccessPath(resultAccessPath);	}}



Bug/test fixes


 

 


Johannes Lerch
committed
Dec 10, 2014



Bug/test fixes


 

 

Bug/test fixes

 

Johannes Lerch
committed
Dec 10, 2014

98

99

100

101

102

103
		public static FieldReference[] getAccessPathDelta(FieldReference[] prefixAccessPath, FieldReference[] accessPath) {publicstaticFieldReference[]getAccessPathDelta(FieldReference[]prefixAccessPath,FieldReference[]accessPath){		FieldReference[] result = new FieldReference[accessPath.length - prefixAccessPath.length];FieldReference[]result=newFieldReference[accessPath.length-prefixAccessPath.length];		System.arraycopy(accessPath, prefixAccessPath.length, result, 0, result.length);System.arraycopy(accessPath,prefixAccessPath.length,result,0,result.length);		return result;returnresult;	}}



use of abstracted summaries



 


Johannes Lerch
committed
Oct 22, 2014



use of abstracted summaries



 

use of abstracted summaries


Johannes Lerch
committed
Oct 22, 2014

104
}}





