



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

7b66dd07















Commit
7b66dd07


authored
Oct 09, 2015
by


Steven Arzt



Browse files




Merge branch 'develop' of github.com:Sable/heros into develop


Conflicts:
	.classpath






parents
c3065cba
e0a26844













Changes
32




Show whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIDESolver.java



0 â†’ 100644







View file @ 7b66dd07













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.EdgeFunctions;










import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IDETabulationProblem;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.JoinLattice;










import heros.solver.IFDSSolver.BinaryDomain;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import com.google.common.collect.Maps;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 * 










 * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * reportable paths.  










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * 				reportable paths.










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIDESolver<N, D, M, V, I extends InterproceduralCFG<N, M>> {





















 private final IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> forwardProblem;










 private final IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 protected SingleDirectionSolver fwSolver;










 protected SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIDESolver} with the associated forward and backward problem.










	 */










 public BiDiIDESolver(IDETabulationProblem<N,D,M,V,I> forwardProblem, IDETabulationProblem<N,D,M,V,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() { 










 fwSolver = createSingleDirectionSolver(forwardProblem, "FW");










 bwSolver = createSingleDirectionSolver(backwardProblem, "BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 //start the bw solver










 bwSolver.submitInitialSeeds();










 










 //start the fw solver and block until both solvers have completed










 //(note that they both share the same executor, see below)










 //note to self: the order of the two should not matter










 fwSolver.solve();










 }










 










 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N retSiteC;










 private AbstractionWithSourceStmt targetVal;










 private EdgeFunction<V> edgeFunction;










 private N relatedCallSite;










 










 public PausedEdge(N retSiteC, AbstractionWithSourceStmt targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) {










 this.retSiteC = retSiteC;










 this.targetVal = targetVal;










 this.edgeFunction = edgeFunction;










 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends IDESolver<N,AbstractionWithSourceStmt,M,V,I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void propagateUnbalancedReturnFlow(N retSiteC, AbstractionWithSourceStmt targetVal,










 EdgeFunction<V> edgeFunction, N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge edge = new PausedEdge(retSiteC, targetVal, edgeFunction, relatedCallSite);










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 }










 










 @Override










 protected void propagate(AbstractionWithSourceStmt sourceVal, N target, AbstractionWithSourceStmt targetVal, EdgeFunction<V> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.retSiteC, edge.targetVal, edge.edgeFunction, edge.relatedCallSite);










 }










 }










 }










 }










 










 /* we share the same executor; this will cause the call to solve() above to block










		 * until both solvers have finished










		 */ 










 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 public D getAbstraction() {










 return abstraction;










 }










 










 public N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }










 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private class AugmentedTabulationProblem implements IDETabulationProblem<N, AbstractionWithSourceStmt,M,V,I> {





















 private final IDETabulationProblem<N,D,M,V,I> delegate;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IDETabulationProblem<N, D, M,V, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 Set<D> origTargets = originalFunctions.getCallFlowFunction(callStmt, destinationMethod).computeTargets(










 source.getAbstraction());





















 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for (D d : origTargets) {










 res.add(new AbstractionWithSourceStmt(d, null));










 }










 return res;










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);










 










 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }





















 @Override










 public EdgeFunctions<N, AbstractionWithSourceStmt, M, V> edgeFunctions() {










 return new EdgeFunctions<N, AbstractionWithSourceStmt, M, V>() {





















 @Override










 public EdgeFunction<V> getNormalEdgeFunction(N curr, AbstractionWithSourceStmt currNode, N succ,










 AbstractionWithSourceStmt succNode) {










 return delegate.edgeFunctions().getNormalEdgeFunction(curr, currNode.getAbstraction(), succ, succNode.getAbstraction());










 }





















 @Override










 public EdgeFunction<V> getCallEdgeFunction(N callStmt,AbstractionWithSourceStmt srcNode,










 M destinationMethod, AbstractionWithSourceStmt destNode) {










 return delegate.edgeFunctions().getCallEdgeFunction(callStmt, srcNode.getAbstraction(), destinationMethod, destNode.getAbstraction());










 }





















 @Override










 public EdgeFunction<V> getReturnEdgeFunction(N callSite, M calleeMethod, N exitStmt,










 AbstractionWithSourceStmt exitNode, N returnSite,










 AbstractionWithSourceStmt retNode) {










 return delegate.edgeFunctions().getReturnEdgeFunction(callSite, calleeMethod, exitStmt, exitNode.getAbstraction(), returnSite, retNode.getAbstraction());










 }





















 @Override










 public EdgeFunction<V> getCallToReturnEdgeFunction(N callSite, AbstractionWithSourceStmt callNode,










 N returnSite, AbstractionWithSourceStmt returnSideNode) {










 return delegate.edgeFunctions().getCallToReturnEdgeFunction(callSite, callNode.getAbstraction(), returnSite, returnSideNode.getAbstraction());










 }










 };










 }





















 @Override










 public JoinLattice<V> joinLattice() {










 return delegate.joinLattice();










 }





















 @Override










 public EdgeFunction<V> allTopFunction() {










 return delegate.allTopFunction();










 }





















 }










 










}














src/heros/solver/BiDiIFDSSolver.java








View file @ 7b66dd07






......@@ -49,426 +49,22 @@ import com.google.common.collect.Maps;









 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> extends BiDiIDESolver<N, D, M, BinaryDomain, I> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() { 










 fwSolver = createSingleDirectionSolver(forwardProblem, "FW");










 bwSolver = createSingleDirectionSolver(backwardProblem, "BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 //start the bw solver










 bwSolver.submitInitialSeeds();










 










 //start the fw solver and block until both solvers have completed










 //(note that they both share the same executor, see below)










 //note to self: the order of the two should not matter










 fwSolver.solve();










 }










 










 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N retSiteC;










 private AbstractionWithSourceStmt targetVal;










 private EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction;










 private N relatedCallSite;










 










 public PausedEdge(N retSiteC, AbstractionWithSourceStmt targetVal, EdgeFunction<BinaryDomain> edgeFunction, N relatedCallSite) {










 this.retSiteC = retSiteC;










 this.targetVal = targetVal;










 this.edgeFunction = edgeFunction;










 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends JoinHandlingNodesIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void propagateUnbalancedReturnFlow(N retSiteC, AbstractionWithSourceStmt targetVal,










 EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction, N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge edge = new PausedEdge(retSiteC, targetVal, edgeFunction, relatedCallSite);










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 }










 










 protected void propagate(AbstractionWithSourceStmt sourceVal, N target, AbstractionWithSourceStmt targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 d5.getAbstraction().setCallingContext(d4.getAbstraction());










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.retSiteC, edge.targetVal, edge.edgeFunction, edge.relatedCallSite);










 }










 }










 }










 }










 










 /* we share the same executor; this will cause the call to solve() above to block










		 * until both solvers have finished










		 */ 










 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements JoinHandlingNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 public D getAbstraction() {










 return abstraction;










 }










 










 public N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 @Override










 public boolean handleJoin(BiDiIFDSSolver<N, D, M, I>.AbstractionWithSourceStmt joiningNode) {










 return abstraction.handleJoin(joiningNode.getAbstraction());










 }





















 @Override










 public heros.solver.JoinHandlingNode.JoinKey createJoinKey() {










 return new JoinKey(source, abstraction.createJoinKey());










 }





















 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private class AugmentedTabulationProblem implements IFDSTabulationProblem<N, AbstractionWithSourceStmt,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 Set<D> origTargets = originalFunctions.getCallFlowFunction(callStmt, destinationMethod).computeTargets(










 source.getAbstraction());





















 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for (D d : origTargets) {










 res.add(new AbstractionWithSourceStmt(d, null));










 }










 return res;










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);










 










 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }





















 super(IFDSSolver.createIDETabulationProblem(forwardProblem), IFDSSolver.createIDETabulationProblem(backwardProblem));










 }










 










 public Set<D> fwIFDSResultAt(N stmt) {










 return extractResults(fwSolver.ifdsResultsAt(stmt));










 return extractResults(fwSolver.resultsAt(stmt).keySet());










 }










 










 










 public Set<D> bwIFDSResultAt(N stmt) {










 return extractResults(bwSolver.ifdsResultsAt(stmt));










 return extractResults(bwSolver.resultsAt(stmt).keySet());










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt> annotatedResults) {



......














src/heros/solver/CountingThreadPoolExecutor.java








View file @ 7b66dd07






......@@ -27,7 +27,7 @@ import org.slf4j.LoggerFactory;









 */










public class CountingThreadPoolExecutor extends ThreadPoolExecutor {










 










 protected static final Logger logger = LoggerFactory.getLogger(IDESolver.class);










 protected static final Logger logger = LoggerFactory.getLogger(CountingThreadPoolExecutor.class);





















 protected final CountLatch numRunningTasks = new CountLatch(0);










 



......














src/heros/solver/IFDSSolver.java








View file @ 7b66dd07






......@@ -49,7 +49,12 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









	 * {@link #solve()}.










	 */










 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {










 super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {










 super(createIDETabulationProblem(ifdsProblem));










 }





















 static <N, D, M, I extends InterproceduralCFG<N, M>> IDETabulationProblem<N, D, M, BinaryDomain, I> createIDETabulationProblem(










 final IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 return new IDETabulationProblem<N,D,M,BinaryDomain,I>() {





















 public FlowFunctions<N,D,M> flowFunctions() {










 return ifdsProblem.flowFunctions();



......@@ -140,7 +145,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 }










 }





















 });










 };










 }










 










 /**



......














src/heros/utilities/JsonArray.java








View file @ 7b66dd07






......@@ -27,6 +27,10 @@ public class JsonArray {









 for(String item: items) {










 JsonDocument.tabs(tabs+1, builder); builder.append("\""+item+"\",\n");










 }










 










 if(!items.isEmpty())










 builder.delete(builder.length()-2, builder.length()-1); 










 










 JsonDocument.tabs(tabs, builder); builder.append("]");










 }










}




\ No newline at end of file














test/heros/fieldsens/BiDiFieldSensitiveIFDSSolverTest.java








View file @ 7b66dd07






......@@ -10,13 +10,21 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.InterproceduralCFG;










import static heros.utilities.FieldSensitiveTestHelper.callSite;










import static heros.utilities.FieldSensitiveTestHelper.exitStmt;










import static heros.utilities.FieldSensitiveTestHelper.flow;










import static heros.utilities.FieldSensitiveTestHelper.kill;










import static heros.utilities.FieldSensitiveTestHelper.normalStmt;










import static heros.utilities.FieldSensitiveTestHelper.over;










import static heros.utilities.FieldSensitiveTestHelper.startPoints;










import static heros.utilities.FieldSensitiveTestHelper.times;










import static heros.utilities.FieldSensitiveTestHelper.to;










import heros.utilities.FieldSensitiveTestHelper;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;










import heros.utilities.Statement;










import heros.utilities.TestDebugger;










import heros.utilities.TestFact;










import heros.utilities.TestMethod;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;





















import java.util.Collection;










import java.util.LinkedList;



......@@ -28,8 +36,6 @@ import org.junit.runners.Parameterized.Parameters;




















import com.google.common.collect.Lists;





















import static heros.utilities.FieldSensitiveTestHelper.*;
































@RunWith(Parameterized.class)










public class BiDiFieldSensitiveIFDSSolverTest {



......@@ -37,11 +43,11 @@ public class BiDiFieldSensitiveIFDSSolverTest {









 private FieldSensitiveTestHelper forwardHelper;










 private FieldSensitiveTestHelper backwardHelper;










 private TabulationProblemExchange exchange;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;










 










 public BiDiFieldSensitiveIFDSSolverTest(TabulationProblemExchange exchange) {










 this.exchange = exchange;










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 forwardHelper = new FieldSensitiveTestHelper(debugger);










 backwardHelper = new FieldSensitiveTestHelper(debugger);










 }



......














test/heros/fieldsens/ControlFlowJoinResolverTest.java








View file @ 7b66dd07






......@@ -64,7 +64,8 @@ public class ControlFlowJoinResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 joinStmt = new Statement("joinStmt");










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(analyzer, joinStmt);










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt, 










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -109,7 +110,7 @@ public class ControlFlowJoinResolverTest {









 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), resolver));










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));










 verify(callback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 



......@@ -125,7 +126,7 @@ public class ControlFlowJoinResolverTest {









 @Override










 public boolean matches(Object argument) {










 ControlFlowJoinResolver resolver = (ControlFlowJoinResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 }










 }










}














test/heros/fieldsens/FieldSensitiveIFDSSolverTest.java








View file @ 7b66dd07






......@@ -30,12 +30,12 @@ import static heros.utilities.FieldSensitiveTestHelper.*;









public class FieldSensitiveIFDSSolverTest {





















 private FieldSensitiveTestHelper helper;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 @Before










 public void before() {










 System.err.println("-----");










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 helper = new FieldSensitiveTestHelper(debugger);










 }










 



......@@ -157,7 +157,7 @@ public class FieldSensitiveIFDSSolverTest {









 helper.method("bar",










 startPoints("c"),










 normalStmt("c", flow("2", readField("f"), "3")).succ("d"),










 exitStmt("d").returns(over("b"), to("e"), flow("3", "4")).returns(over("e"), to("f"), flow("3", "5")));










 exitStmt("d").returns(over("b"), to("e"), flow(2, "3", "4")).returns(over("e"), to("f"), flow(2, "3", "5")));










 










 helper.runSolver(false, "a");










 }



......@@ -718,7 +718,6 @@ public class FieldSensitiveIFDSSolverTest {









 normalStmt("f", flow("6", readField("f"), "7")).succ("g"),










 normalStmt("g", kill("7")).succ("h"));










 










 










 helper.runSolver(true, "a");










 }










 



......@@ -1176,4 +1175,109 @@ public class FieldSensitiveIFDSSolverTest {









 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void readMultipleAbstractedFields() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("0", prependField("f"), "1")).succ("b1").succ("b2"),










 normalStmt("b1", kill("1")).succ("c"),










 normalStmt("b2", flow("1", prependField("g"), "1")).succ("c"),










 normalStmt("c", flow("1", "2")).succ("d"),










 normalStmt("d", flow("2", "2")).succ("e1").succ("e2"),










 normalStmt("e1", flow("2", "3")).succ("f"),










 normalStmt("e2", kill("2")).succ("f"),










 normalStmt("f", flow("3", readField("g"), "4")).succ("g"),










 normalStmt("g", flow("4", readField("f"), "5")).succ("h"),










 normalStmt("h", kill("5")).succ("i"));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void intraproceduralStateExplosionInline0Resolver() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void intraproceduralStateExplosion() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("x"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void nestedResolversShouldFormAGraph() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("f"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b1").succ("b2"),










 normalStmt("b1", flow("1", overwriteField("x"), "1")).succ("c"),










 normalStmt("b2", flow("1", overwriteField("y"), "1")).succ("c"),










 normalStmt("c", flow(2, "1", "1")).succ("d1").succ("d2"),










 normalStmt("d1", flow(2, "1", overwriteField("x"), "1")).succ("e"),










 normalStmt("d2", flow(2, "1", overwriteField("y"), "1")).succ("e"),










 normalStmt("e", flow(3, "1", "1")).succ("f"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void maintainCallingContextInCtrlFlowJoin() {










 helper.method("main",










 startPoints("a"),










 normalStmt("a", flow("0", "1")).succ("b1").succ("b2"),










 callSite("b1").calls("foo", flow("1", prependField("f"), "2")).retSite("c1", kill("1")),










 callSite("b2").calls("foo", flow("1", "2")).retSite("c2", kill("1")),










 normalStmt("c1", kill("3")).succ("d"),










 normalStmt("c2", flow("3", readField("f"), "4")).succ("d"),










 normalStmt("d", kill("4")).succ("e"));










 










 helper.method("foo", 










 startPoints("f"),










 normalStmt("f", flow("2", "2")).succ("g").succ("f"),










 exitStmt("g").returns(over("b1"), to("c1"), flow("2", "3")).returns(over("b2"), to("c2"), flow("2", "3")));










 










 helper.runSolver(false, "a");










 }










}














test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ 7b66dd07






......@@ -12,16 +12,20 @@ package heros.fieldsens;




















import static org.junit.Assert.assertEquals;










import static org.junit.Assert.assertTrue;










import static org.mockito.Mockito.*;





















import java.util.List;





















import heros.fieldsens.CallEdgeResolver;










import heros.fieldsens.InterestCallback;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.ReturnSiteResolver;










import static org.mockito.Matchers.any;










import static org.mockito.Matchers.argThat;










import static org.mockito.Matchers.eq;










import static org.mockito.Mockito.RETURNS_DEEP_STUBS;










import static org.mockito.Mockito.RETURNS_MOCKS;










import static org.mockito.Mockito.RETURNS_SMART_NULLS;










import static org.mockito.Mockito.doAnswer;










import static org.mockito.Mockito.mock;










import static org.mockito.Mockito.never;










import static org.mockito.Mockito.verify;










import static org.mockito.Mockito.when;










import static org.mockito.Mockito.withSettings;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;



......@@ -29,6 +33,8 @@ import heros.utilities.Statement;









import heros.utilities.TestFact;










import heros.utilities.TestMethod;





















import java.util.List;





















import org.junit.Before;










import org.junit.Test;










import org.mockito.ArgumentMatcher;



......@@ -68,7 +74,8 @@ public class ReturnSiteResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 returnSite = new Statement("returnSite");










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(analyzer, returnSite);










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite,










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -225,17 +232,17 @@ public class ReturnSiteResolverTest {









 doAnswer(new Answer() {










 @Override










 public Object answer(InvocationOnMock invocation) throws Throwable {










 ReturnSiteResolver<String, TestFact, Statement, TestMethod> resolver = (ReturnSiteResolver) invocation.getArguments()[1];










 Resolver<String, TestFact, Statement, TestMethod> resolver = (Resolver) invocation.getArguments()[1];










 resolver.resolve(getDeltaConstraint("b"), secondCallback);










 return null;










 }










 










 }).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));










 }).when(callback).interest(eq(analyzer), eq(nestedResolver));










 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(secondCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));










 verify(secondCallback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 @Test



......@@ -269,6 +276,18 @@ public class ReturnSiteResolverTest {









 verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));










 }










 










 @Test










 public void incomingZeroCallEdgeResolver() {










 Resolver<String, TestFact, Statement, TestMethod> resolver = mock(Resolver.class);










 ZeroCallEdgeResolver<String, TestFact, Statement, TestMethod> zeroResolver = mock(ZeroCallEdgeResolver.class); 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), zeroResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(resolver, never()).resolve(any(Constraint.class), any(InterestCallback.class));










 verify(callback, never()).interest(any(PerAccessPathMethodAnalyzer.class), any(Resolver.class));










 verify(callback, never()).canBeResolvedEmpty();










 }










 










 private class ReturnSiteResolverArgumentMatcher extends










 ArgumentMatcher<ReturnSiteResolver<String, TestFact, Statement, TestMethod>> {














......@@ -281,7 +300,7 @@ public class ReturnSiteResolverTest {









 @Override










 public boolean matches(Object argument) {










 ReturnSiteResolver resolver = (ReturnSiteResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getReturnSite().equals(returnSite);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getReturnSite().equals(returnSite);










 }










 }










}














test/heros/utilities/FieldSensitiveTestHelper.java








View file @ 7b66dd07






......@@ -58,9 +58,9 @@ public class FieldSensitiveTestHelper {









 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, TestMethod> stmt2method = Maps.newHashMap();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger) {










 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod> debugger) {










 this.debugger = debugger;










 }














......@@ -266,6 +266,10 @@ public class FieldSensitiveTestHelper {









 if (edge.includeInCfg && edge.succUnit.equals(stmt))










 result.add(edge.unit);










 }










 for(Call2ReturnEdge edge : call2retEdges) {










 if(edge.includeInCfg && edge.returnSite.equals(stmt))










 result.add(edge.callSite);










 }










 return result;










 }














......














test/heros/utilities/TestDebugger.java








View file @ 7b66dd07






......@@ -18,11 +18,15 @@ import com.google.common.collect.Sets;




















import heros.InterproceduralCFG;










import heros.fieldsens.Debugger;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










public class TestDebugger<Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 private JsonDocument root = new JsonDocument();










 private I icfg;










 private InterproceduralCFG<Stmt, Method> icfg;










 










 public void writeJsonDebugFile(String filename) {










 try {



......@@ -41,7 +45,7 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









	 * @see heros.alias.Debugger#setICFG(I)










	 */










 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 this.icfg = icfg;










 }














......@@ -108,4 +112,36 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 stmt(exitStmt).doc("returns").doc(returnSite.toString()).keyValue("flow", expectedFlowFunctionsToString);










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void askedToResolve(Resolver<Field, Fact, Stmt, Method> resolver, Constraint<Field> constraint) {










 










 }





















}














test/heros/utilities/TestHelper.java








View file @ 7b66dd07






......@@ -70,7 +70,7 @@ public class TestHelper {









 return result;










 }





















 @SafeVarargs










 @SuppressWarnings("unchecked")










 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt, ExpectedFlowFunction<JoinableFact>...flowFunctions) {










 return new NormalStmtBuilder(new Statement(stmt), flowFunctions);










 }



......









Prev


1


2


Next















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

7b66dd07















Commit
7b66dd07


authored
Oct 09, 2015
by


Steven Arzt



Browse files




Merge branch 'develop' of github.com:Sable/heros into develop


Conflicts:
	.classpath






parents
c3065cba
e0a26844













Changes
32




Show whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIDESolver.java



0 â†’ 100644







View file @ 7b66dd07













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.EdgeFunctions;










import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IDETabulationProblem;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.JoinLattice;










import heros.solver.IFDSSolver.BinaryDomain;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import com.google.common.collect.Maps;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 * 










 * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * reportable paths.  










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * 				reportable paths.










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIDESolver<N, D, M, V, I extends InterproceduralCFG<N, M>> {





















 private final IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> forwardProblem;










 private final IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 protected SingleDirectionSolver fwSolver;










 protected SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIDESolver} with the associated forward and backward problem.










	 */










 public BiDiIDESolver(IDETabulationProblem<N,D,M,V,I> forwardProblem, IDETabulationProblem<N,D,M,V,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() { 










 fwSolver = createSingleDirectionSolver(forwardProblem, "FW");










 bwSolver = createSingleDirectionSolver(backwardProblem, "BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 //start the bw solver










 bwSolver.submitInitialSeeds();










 










 //start the fw solver and block until both solvers have completed










 //(note that they both share the same executor, see below)










 //note to self: the order of the two should not matter










 fwSolver.solve();










 }










 










 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N retSiteC;










 private AbstractionWithSourceStmt targetVal;










 private EdgeFunction<V> edgeFunction;










 private N relatedCallSite;










 










 public PausedEdge(N retSiteC, AbstractionWithSourceStmt targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) {










 this.retSiteC = retSiteC;










 this.targetVal = targetVal;










 this.edgeFunction = edgeFunction;










 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends IDESolver<N,AbstractionWithSourceStmt,M,V,I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void propagateUnbalancedReturnFlow(N retSiteC, AbstractionWithSourceStmt targetVal,










 EdgeFunction<V> edgeFunction, N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge edge = new PausedEdge(retSiteC, targetVal, edgeFunction, relatedCallSite);










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 }










 










 @Override










 protected void propagate(AbstractionWithSourceStmt sourceVal, N target, AbstractionWithSourceStmt targetVal, EdgeFunction<V> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.retSiteC, edge.targetVal, edge.edgeFunction, edge.relatedCallSite);










 }










 }










 }










 }










 










 /* we share the same executor; this will cause the call to solve() above to block










		 * until both solvers have finished










		 */ 










 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 public D getAbstraction() {










 return abstraction;










 }










 










 public N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }










 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private class AugmentedTabulationProblem implements IDETabulationProblem<N, AbstractionWithSourceStmt,M,V,I> {





















 private final IDETabulationProblem<N,D,M,V,I> delegate;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IDETabulationProblem<N, D, M,V, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 Set<D> origTargets = originalFunctions.getCallFlowFunction(callStmt, destinationMethod).computeTargets(










 source.getAbstraction());





















 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for (D d : origTargets) {










 res.add(new AbstractionWithSourceStmt(d, null));










 }










 return res;










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);










 










 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }





















 @Override










 public EdgeFunctions<N, AbstractionWithSourceStmt, M, V> edgeFunctions() {










 return new EdgeFunctions<N, AbstractionWithSourceStmt, M, V>() {





















 @Override










 public EdgeFunction<V> getNormalEdgeFunction(N curr, AbstractionWithSourceStmt currNode, N succ,










 AbstractionWithSourceStmt succNode) {










 return delegate.edgeFunctions().getNormalEdgeFunction(curr, currNode.getAbstraction(), succ, succNode.getAbstraction());










 }





















 @Override










 public EdgeFunction<V> getCallEdgeFunction(N callStmt,AbstractionWithSourceStmt srcNode,










 M destinationMethod, AbstractionWithSourceStmt destNode) {










 return delegate.edgeFunctions().getCallEdgeFunction(callStmt, srcNode.getAbstraction(), destinationMethod, destNode.getAbstraction());










 }





















 @Override










 public EdgeFunction<V> getReturnEdgeFunction(N callSite, M calleeMethod, N exitStmt,










 AbstractionWithSourceStmt exitNode, N returnSite,










 AbstractionWithSourceStmt retNode) {










 return delegate.edgeFunctions().getReturnEdgeFunction(callSite, calleeMethod, exitStmt, exitNode.getAbstraction(), returnSite, retNode.getAbstraction());










 }





















 @Override










 public EdgeFunction<V> getCallToReturnEdgeFunction(N callSite, AbstractionWithSourceStmt callNode,










 N returnSite, AbstractionWithSourceStmt returnSideNode) {










 return delegate.edgeFunctions().getCallToReturnEdgeFunction(callSite, callNode.getAbstraction(), returnSite, returnSideNode.getAbstraction());










 }










 };










 }





















 @Override










 public JoinLattice<V> joinLattice() {










 return delegate.joinLattice();










 }





















 @Override










 public EdgeFunction<V> allTopFunction() {










 return delegate.allTopFunction();










 }





















 }










 










}














src/heros/solver/BiDiIFDSSolver.java








View file @ 7b66dd07






......@@ -49,426 +49,22 @@ import com.google.common.collect.Maps;









 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> extends BiDiIDESolver<N, D, M, BinaryDomain, I> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() { 










 fwSolver = createSingleDirectionSolver(forwardProblem, "FW");










 bwSolver = createSingleDirectionSolver(backwardProblem, "BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 //start the bw solver










 bwSolver.submitInitialSeeds();










 










 //start the fw solver and block until both solvers have completed










 //(note that they both share the same executor, see below)










 //note to self: the order of the two should not matter










 fwSolver.solve();










 }










 










 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N retSiteC;










 private AbstractionWithSourceStmt targetVal;










 private EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction;










 private N relatedCallSite;










 










 public PausedEdge(N retSiteC, AbstractionWithSourceStmt targetVal, EdgeFunction<BinaryDomain> edgeFunction, N relatedCallSite) {










 this.retSiteC = retSiteC;










 this.targetVal = targetVal;










 this.edgeFunction = edgeFunction;










 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends JoinHandlingNodesIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void propagateUnbalancedReturnFlow(N retSiteC, AbstractionWithSourceStmt targetVal,










 EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction, N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge edge = new PausedEdge(retSiteC, targetVal, edgeFunction, relatedCallSite);










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 }










 










 protected void propagate(AbstractionWithSourceStmt sourceVal, N target, AbstractionWithSourceStmt targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 d5.getAbstraction().setCallingContext(d4.getAbstraction());










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.retSiteC, edge.targetVal, edge.edgeFunction, edge.relatedCallSite);










 }










 }










 }










 }










 










 /* we share the same executor; this will cause the call to solve() above to block










		 * until both solvers have finished










		 */ 










 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements JoinHandlingNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 public D getAbstraction() {










 return abstraction;










 }










 










 public N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 @Override










 public boolean handleJoin(BiDiIFDSSolver<N, D, M, I>.AbstractionWithSourceStmt joiningNode) {










 return abstraction.handleJoin(joiningNode.getAbstraction());










 }





















 @Override










 public heros.solver.JoinHandlingNode.JoinKey createJoinKey() {










 return new JoinKey(source, abstraction.createJoinKey());










 }





















 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private class AugmentedTabulationProblem implements IFDSTabulationProblem<N, AbstractionWithSourceStmt,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 Set<D> origTargets = originalFunctions.getCallFlowFunction(callStmt, destinationMethod).computeTargets(










 source.getAbstraction());





















 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for (D d : origTargets) {










 res.add(new AbstractionWithSourceStmt(d, null));










 }










 return res;










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);










 










 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }





















 super(IFDSSolver.createIDETabulationProblem(forwardProblem), IFDSSolver.createIDETabulationProblem(backwardProblem));










 }










 










 public Set<D> fwIFDSResultAt(N stmt) {










 return extractResults(fwSolver.ifdsResultsAt(stmt));










 return extractResults(fwSolver.resultsAt(stmt).keySet());










 }










 










 










 public Set<D> bwIFDSResultAt(N stmt) {










 return extractResults(bwSolver.ifdsResultsAt(stmt));










 return extractResults(bwSolver.resultsAt(stmt).keySet());










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt> annotatedResults) {



......














src/heros/solver/CountingThreadPoolExecutor.java








View file @ 7b66dd07






......@@ -27,7 +27,7 @@ import org.slf4j.LoggerFactory;









 */










public class CountingThreadPoolExecutor extends ThreadPoolExecutor {










 










 protected static final Logger logger = LoggerFactory.getLogger(IDESolver.class);










 protected static final Logger logger = LoggerFactory.getLogger(CountingThreadPoolExecutor.class);





















 protected final CountLatch numRunningTasks = new CountLatch(0);










 



......














src/heros/solver/IFDSSolver.java








View file @ 7b66dd07






......@@ -49,7 +49,12 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









	 * {@link #solve()}.










	 */










 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {










 super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {










 super(createIDETabulationProblem(ifdsProblem));










 }





















 static <N, D, M, I extends InterproceduralCFG<N, M>> IDETabulationProblem<N, D, M, BinaryDomain, I> createIDETabulationProblem(










 final IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 return new IDETabulationProblem<N,D,M,BinaryDomain,I>() {





















 public FlowFunctions<N,D,M> flowFunctions() {










 return ifdsProblem.flowFunctions();



......@@ -140,7 +145,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 }










 }





















 });










 };










 }










 










 /**



......














src/heros/utilities/JsonArray.java








View file @ 7b66dd07






......@@ -27,6 +27,10 @@ public class JsonArray {









 for(String item: items) {










 JsonDocument.tabs(tabs+1, builder); builder.append("\""+item+"\",\n");










 }










 










 if(!items.isEmpty())










 builder.delete(builder.length()-2, builder.length()-1); 










 










 JsonDocument.tabs(tabs, builder); builder.append("]");










 }










}




\ No newline at end of file














test/heros/fieldsens/BiDiFieldSensitiveIFDSSolverTest.java








View file @ 7b66dd07






......@@ -10,13 +10,21 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.InterproceduralCFG;










import static heros.utilities.FieldSensitiveTestHelper.callSite;










import static heros.utilities.FieldSensitiveTestHelper.exitStmt;










import static heros.utilities.FieldSensitiveTestHelper.flow;










import static heros.utilities.FieldSensitiveTestHelper.kill;










import static heros.utilities.FieldSensitiveTestHelper.normalStmt;










import static heros.utilities.FieldSensitiveTestHelper.over;










import static heros.utilities.FieldSensitiveTestHelper.startPoints;










import static heros.utilities.FieldSensitiveTestHelper.times;










import static heros.utilities.FieldSensitiveTestHelper.to;










import heros.utilities.FieldSensitiveTestHelper;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;










import heros.utilities.Statement;










import heros.utilities.TestDebugger;










import heros.utilities.TestFact;










import heros.utilities.TestMethod;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;





















import java.util.Collection;










import java.util.LinkedList;



......@@ -28,8 +36,6 @@ import org.junit.runners.Parameterized.Parameters;




















import com.google.common.collect.Lists;





















import static heros.utilities.FieldSensitiveTestHelper.*;
































@RunWith(Parameterized.class)










public class BiDiFieldSensitiveIFDSSolverTest {



......@@ -37,11 +43,11 @@ public class BiDiFieldSensitiveIFDSSolverTest {









 private FieldSensitiveTestHelper forwardHelper;










 private FieldSensitiveTestHelper backwardHelper;










 private TabulationProblemExchange exchange;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;










 










 public BiDiFieldSensitiveIFDSSolverTest(TabulationProblemExchange exchange) {










 this.exchange = exchange;










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 forwardHelper = new FieldSensitiveTestHelper(debugger);










 backwardHelper = new FieldSensitiveTestHelper(debugger);










 }



......














test/heros/fieldsens/ControlFlowJoinResolverTest.java








View file @ 7b66dd07






......@@ -64,7 +64,8 @@ public class ControlFlowJoinResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 joinStmt = new Statement("joinStmt");










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(analyzer, joinStmt);










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt, 










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -109,7 +110,7 @@ public class ControlFlowJoinResolverTest {









 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), resolver));










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));










 verify(callback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 



......@@ -125,7 +126,7 @@ public class ControlFlowJoinResolverTest {









 @Override










 public boolean matches(Object argument) {










 ControlFlowJoinResolver resolver = (ControlFlowJoinResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 }










 }










}














test/heros/fieldsens/FieldSensitiveIFDSSolverTest.java








View file @ 7b66dd07






......@@ -30,12 +30,12 @@ import static heros.utilities.FieldSensitiveTestHelper.*;









public class FieldSensitiveIFDSSolverTest {





















 private FieldSensitiveTestHelper helper;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 @Before










 public void before() {










 System.err.println("-----");










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 helper = new FieldSensitiveTestHelper(debugger);










 }










 



......@@ -157,7 +157,7 @@ public class FieldSensitiveIFDSSolverTest {









 helper.method("bar",










 startPoints("c"),










 normalStmt("c", flow("2", readField("f"), "3")).succ("d"),










 exitStmt("d").returns(over("b"), to("e"), flow("3", "4")).returns(over("e"), to("f"), flow("3", "5")));










 exitStmt("d").returns(over("b"), to("e"), flow(2, "3", "4")).returns(over("e"), to("f"), flow(2, "3", "5")));










 










 helper.runSolver(false, "a");










 }



......@@ -718,7 +718,6 @@ public class FieldSensitiveIFDSSolverTest {









 normalStmt("f", flow("6", readField("f"), "7")).succ("g"),










 normalStmt("g", kill("7")).succ("h"));










 










 










 helper.runSolver(true, "a");










 }










 



......@@ -1176,4 +1175,109 @@ public class FieldSensitiveIFDSSolverTest {









 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void readMultipleAbstractedFields() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("0", prependField("f"), "1")).succ("b1").succ("b2"),










 normalStmt("b1", kill("1")).succ("c"),










 normalStmt("b2", flow("1", prependField("g"), "1")).succ("c"),










 normalStmt("c", flow("1", "2")).succ("d"),










 normalStmt("d", flow("2", "2")).succ("e1").succ("e2"),










 normalStmt("e1", flow("2", "3")).succ("f"),










 normalStmt("e2", kill("2")).succ("f"),










 normalStmt("f", flow("3", readField("g"), "4")).succ("g"),










 normalStmt("g", flow("4", readField("f"), "5")).succ("h"),










 normalStmt("h", kill("5")).succ("i"));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void intraproceduralStateExplosionInline0Resolver() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void intraproceduralStateExplosion() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("x"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void nestedResolversShouldFormAGraph() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("f"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b1").succ("b2"),










 normalStmt("b1", flow("1", overwriteField("x"), "1")).succ("c"),










 normalStmt("b2", flow("1", overwriteField("y"), "1")).succ("c"),










 normalStmt("c", flow(2, "1", "1")).succ("d1").succ("d2"),










 normalStmt("d1", flow(2, "1", overwriteField("x"), "1")).succ("e"),










 normalStmt("d2", flow(2, "1", overwriteField("y"), "1")).succ("e"),










 normalStmt("e", flow(3, "1", "1")).succ("f"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void maintainCallingContextInCtrlFlowJoin() {










 helper.method("main",










 startPoints("a"),










 normalStmt("a", flow("0", "1")).succ("b1").succ("b2"),










 callSite("b1").calls("foo", flow("1", prependField("f"), "2")).retSite("c1", kill("1")),










 callSite("b2").calls("foo", flow("1", "2")).retSite("c2", kill("1")),










 normalStmt("c1", kill("3")).succ("d"),










 normalStmt("c2", flow("3", readField("f"), "4")).succ("d"),










 normalStmt("d", kill("4")).succ("e"));










 










 helper.method("foo", 










 startPoints("f"),










 normalStmt("f", flow("2", "2")).succ("g").succ("f"),










 exitStmt("g").returns(over("b1"), to("c1"), flow("2", "3")).returns(over("b2"), to("c2"), flow("2", "3")));










 










 helper.runSolver(false, "a");










 }










}














test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ 7b66dd07






......@@ -12,16 +12,20 @@ package heros.fieldsens;




















import static org.junit.Assert.assertEquals;










import static org.junit.Assert.assertTrue;










import static org.mockito.Mockito.*;





















import java.util.List;





















import heros.fieldsens.CallEdgeResolver;










import heros.fieldsens.InterestCallback;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.ReturnSiteResolver;










import static org.mockito.Matchers.any;










import static org.mockito.Matchers.argThat;










import static org.mockito.Matchers.eq;










import static org.mockito.Mockito.RETURNS_DEEP_STUBS;










import static org.mockito.Mockito.RETURNS_MOCKS;










import static org.mockito.Mockito.RETURNS_SMART_NULLS;










import static org.mockito.Mockito.doAnswer;










import static org.mockito.Mockito.mock;










import static org.mockito.Mockito.never;










import static org.mockito.Mockito.verify;










import static org.mockito.Mockito.when;










import static org.mockito.Mockito.withSettings;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;



......@@ -29,6 +33,8 @@ import heros.utilities.Statement;









import heros.utilities.TestFact;










import heros.utilities.TestMethod;





















import java.util.List;





















import org.junit.Before;










import org.junit.Test;










import org.mockito.ArgumentMatcher;



......@@ -68,7 +74,8 @@ public class ReturnSiteResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 returnSite = new Statement("returnSite");










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(analyzer, returnSite);










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite,










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -225,17 +232,17 @@ public class ReturnSiteResolverTest {









 doAnswer(new Answer() {










 @Override










 public Object answer(InvocationOnMock invocation) throws Throwable {










 ReturnSiteResolver<String, TestFact, Statement, TestMethod> resolver = (ReturnSiteResolver) invocation.getArguments()[1];










 Resolver<String, TestFact, Statement, TestMethod> resolver = (Resolver) invocation.getArguments()[1];










 resolver.resolve(getDeltaConstraint("b"), secondCallback);










 return null;










 }










 










 }).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));










 }).when(callback).interest(eq(analyzer), eq(nestedResolver));










 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(secondCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));










 verify(secondCallback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 @Test



......@@ -269,6 +276,18 @@ public class ReturnSiteResolverTest {









 verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));










 }










 










 @Test










 public void incomingZeroCallEdgeResolver() {










 Resolver<String, TestFact, Statement, TestMethod> resolver = mock(Resolver.class);










 ZeroCallEdgeResolver<String, TestFact, Statement, TestMethod> zeroResolver = mock(ZeroCallEdgeResolver.class); 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), zeroResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(resolver, never()).resolve(any(Constraint.class), any(InterestCallback.class));










 verify(callback, never()).interest(any(PerAccessPathMethodAnalyzer.class), any(Resolver.class));










 verify(callback, never()).canBeResolvedEmpty();










 }










 










 private class ReturnSiteResolverArgumentMatcher extends










 ArgumentMatcher<ReturnSiteResolver<String, TestFact, Statement, TestMethod>> {














......@@ -281,7 +300,7 @@ public class ReturnSiteResolverTest {









 @Override










 public boolean matches(Object argument) {










 ReturnSiteResolver resolver = (ReturnSiteResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getReturnSite().equals(returnSite);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getReturnSite().equals(returnSite);










 }










 }










}














test/heros/utilities/FieldSensitiveTestHelper.java








View file @ 7b66dd07






......@@ -58,9 +58,9 @@ public class FieldSensitiveTestHelper {









 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, TestMethod> stmt2method = Maps.newHashMap();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger) {










 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod> debugger) {










 this.debugger = debugger;










 }














......@@ -266,6 +266,10 @@ public class FieldSensitiveTestHelper {









 if (edge.includeInCfg && edge.succUnit.equals(stmt))










 result.add(edge.unit);










 }










 for(Call2ReturnEdge edge : call2retEdges) {










 if(edge.includeInCfg && edge.returnSite.equals(stmt))










 result.add(edge.callSite);










 }










 return result;










 }














......














test/heros/utilities/TestDebugger.java








View file @ 7b66dd07






......@@ -18,11 +18,15 @@ import com.google.common.collect.Sets;




















import heros.InterproceduralCFG;










import heros.fieldsens.Debugger;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










public class TestDebugger<Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 private JsonDocument root = new JsonDocument();










 private I icfg;










 private InterproceduralCFG<Stmt, Method> icfg;










 










 public void writeJsonDebugFile(String filename) {










 try {



......@@ -41,7 +45,7 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









	 * @see heros.alias.Debugger#setICFG(I)










	 */










 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 this.icfg = icfg;










 }














......@@ -108,4 +112,36 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 stmt(exitStmt).doc("returns").doc(returnSite.toString()).keyValue("flow", expectedFlowFunctionsToString);










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void askedToResolve(Resolver<Field, Fact, Stmt, Method> resolver, Constraint<Field> constraint) {










 










 }





















}














test/heros/utilities/TestHelper.java








View file @ 7b66dd07






......@@ -70,7 +70,7 @@ public class TestHelper {









 return result;










 }





















 @SafeVarargs










 @SuppressWarnings("unchecked")










 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt, ExpectedFlowFunction<JoinableFact>...flowFunctions) {










 return new NormalStmtBuilder(new Statement(stmt), flowFunctions);










 }



......









Prev


1


2


Next















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

7b66dd07







Open sidebar



Joshua Garcia heros
Commits

7b66dd07




Open sidebar

Joshua Garcia heros
Commits

7b66dd07


Joshua GarciaherosherosCommits
7b66dd07








Commit
7b66dd07


authored
Oct 09, 2015
by


Steven Arzt



Browse files




Merge branch 'develop' of github.com:Sable/heros into develop


Conflicts:
	.classpath






parents
c3065cba
e0a26844













Changes
32




Show whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIDESolver.java



0 â†’ 100644







View file @ 7b66dd07













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.EdgeFunctions;










import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IDETabulationProblem;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.JoinLattice;










import heros.solver.IFDSSolver.BinaryDomain;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import com.google.common.collect.Maps;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 * 










 * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * reportable paths.  










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * 				reportable paths.










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIDESolver<N, D, M, V, I extends InterproceduralCFG<N, M>> {





















 private final IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> forwardProblem;










 private final IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 protected SingleDirectionSolver fwSolver;










 protected SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIDESolver} with the associated forward and backward problem.










	 */










 public BiDiIDESolver(IDETabulationProblem<N,D,M,V,I> forwardProblem, IDETabulationProblem<N,D,M,V,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() { 










 fwSolver = createSingleDirectionSolver(forwardProblem, "FW");










 bwSolver = createSingleDirectionSolver(backwardProblem, "BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 //start the bw solver










 bwSolver.submitInitialSeeds();










 










 //start the fw solver and block until both solvers have completed










 //(note that they both share the same executor, see below)










 //note to self: the order of the two should not matter










 fwSolver.solve();










 }










 










 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N retSiteC;










 private AbstractionWithSourceStmt targetVal;










 private EdgeFunction<V> edgeFunction;










 private N relatedCallSite;










 










 public PausedEdge(N retSiteC, AbstractionWithSourceStmt targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) {










 this.retSiteC = retSiteC;










 this.targetVal = targetVal;










 this.edgeFunction = edgeFunction;










 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends IDESolver<N,AbstractionWithSourceStmt,M,V,I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void propagateUnbalancedReturnFlow(N retSiteC, AbstractionWithSourceStmt targetVal,










 EdgeFunction<V> edgeFunction, N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge edge = new PausedEdge(retSiteC, targetVal, edgeFunction, relatedCallSite);










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 }










 










 @Override










 protected void propagate(AbstractionWithSourceStmt sourceVal, N target, AbstractionWithSourceStmt targetVal, EdgeFunction<V> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.retSiteC, edge.targetVal, edge.edgeFunction, edge.relatedCallSite);










 }










 }










 }










 }










 










 /* we share the same executor; this will cause the call to solve() above to block










		 * until both solvers have finished










		 */ 










 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 public D getAbstraction() {










 return abstraction;










 }










 










 public N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }










 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private class AugmentedTabulationProblem implements IDETabulationProblem<N, AbstractionWithSourceStmt,M,V,I> {





















 private final IDETabulationProblem<N,D,M,V,I> delegate;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IDETabulationProblem<N, D, M,V, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 Set<D> origTargets = originalFunctions.getCallFlowFunction(callStmt, destinationMethod).computeTargets(










 source.getAbstraction());





















 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for (D d : origTargets) {










 res.add(new AbstractionWithSourceStmt(d, null));










 }










 return res;










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);










 










 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }





















 @Override










 public EdgeFunctions<N, AbstractionWithSourceStmt, M, V> edgeFunctions() {










 return new EdgeFunctions<N, AbstractionWithSourceStmt, M, V>() {





















 @Override










 public EdgeFunction<V> getNormalEdgeFunction(N curr, AbstractionWithSourceStmt currNode, N succ,










 AbstractionWithSourceStmt succNode) {










 return delegate.edgeFunctions().getNormalEdgeFunction(curr, currNode.getAbstraction(), succ, succNode.getAbstraction());










 }





















 @Override










 public EdgeFunction<V> getCallEdgeFunction(N callStmt,AbstractionWithSourceStmt srcNode,










 M destinationMethod, AbstractionWithSourceStmt destNode) {










 return delegate.edgeFunctions().getCallEdgeFunction(callStmt, srcNode.getAbstraction(), destinationMethod, destNode.getAbstraction());










 }





















 @Override










 public EdgeFunction<V> getReturnEdgeFunction(N callSite, M calleeMethod, N exitStmt,










 AbstractionWithSourceStmt exitNode, N returnSite,










 AbstractionWithSourceStmt retNode) {










 return delegate.edgeFunctions().getReturnEdgeFunction(callSite, calleeMethod, exitStmt, exitNode.getAbstraction(), returnSite, retNode.getAbstraction());










 }





















 @Override










 public EdgeFunction<V> getCallToReturnEdgeFunction(N callSite, AbstractionWithSourceStmt callNode,










 N returnSite, AbstractionWithSourceStmt returnSideNode) {










 return delegate.edgeFunctions().getCallToReturnEdgeFunction(callSite, callNode.getAbstraction(), returnSite, returnSideNode.getAbstraction());










 }










 };










 }





















 @Override










 public JoinLattice<V> joinLattice() {










 return delegate.joinLattice();










 }





















 @Override










 public EdgeFunction<V> allTopFunction() {










 return delegate.allTopFunction();










 }





















 }










 










}














src/heros/solver/BiDiIFDSSolver.java








View file @ 7b66dd07






......@@ -49,426 +49,22 @@ import com.google.common.collect.Maps;









 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> extends BiDiIDESolver<N, D, M, BinaryDomain, I> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() { 










 fwSolver = createSingleDirectionSolver(forwardProblem, "FW");










 bwSolver = createSingleDirectionSolver(backwardProblem, "BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 //start the bw solver










 bwSolver.submitInitialSeeds();










 










 //start the fw solver and block until both solvers have completed










 //(note that they both share the same executor, see below)










 //note to self: the order of the two should not matter










 fwSolver.solve();










 }










 










 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N retSiteC;










 private AbstractionWithSourceStmt targetVal;










 private EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction;










 private N relatedCallSite;










 










 public PausedEdge(N retSiteC, AbstractionWithSourceStmt targetVal, EdgeFunction<BinaryDomain> edgeFunction, N relatedCallSite) {










 this.retSiteC = retSiteC;










 this.targetVal = targetVal;










 this.edgeFunction = edgeFunction;










 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends JoinHandlingNodesIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void propagateUnbalancedReturnFlow(N retSiteC, AbstractionWithSourceStmt targetVal,










 EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction, N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge edge = new PausedEdge(retSiteC, targetVal, edgeFunction, relatedCallSite);










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 }










 










 protected void propagate(AbstractionWithSourceStmt sourceVal, N target, AbstractionWithSourceStmt targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 d5.getAbstraction().setCallingContext(d4.getAbstraction());










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.retSiteC, edge.targetVal, edge.edgeFunction, edge.relatedCallSite);










 }










 }










 }










 }










 










 /* we share the same executor; this will cause the call to solve() above to block










		 * until both solvers have finished










		 */ 










 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements JoinHandlingNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 public D getAbstraction() {










 return abstraction;










 }










 










 public N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 @Override










 public boolean handleJoin(BiDiIFDSSolver<N, D, M, I>.AbstractionWithSourceStmt joiningNode) {










 return abstraction.handleJoin(joiningNode.getAbstraction());










 }





















 @Override










 public heros.solver.JoinHandlingNode.JoinKey createJoinKey() {










 return new JoinKey(source, abstraction.createJoinKey());










 }





















 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private class AugmentedTabulationProblem implements IFDSTabulationProblem<N, AbstractionWithSourceStmt,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 Set<D> origTargets = originalFunctions.getCallFlowFunction(callStmt, destinationMethod).computeTargets(










 source.getAbstraction());





















 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for (D d : origTargets) {










 res.add(new AbstractionWithSourceStmt(d, null));










 }










 return res;










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);










 










 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }





















 super(IFDSSolver.createIDETabulationProblem(forwardProblem), IFDSSolver.createIDETabulationProblem(backwardProblem));










 }










 










 public Set<D> fwIFDSResultAt(N stmt) {










 return extractResults(fwSolver.ifdsResultsAt(stmt));










 return extractResults(fwSolver.resultsAt(stmt).keySet());










 }










 










 










 public Set<D> bwIFDSResultAt(N stmt) {










 return extractResults(bwSolver.ifdsResultsAt(stmt));










 return extractResults(bwSolver.resultsAt(stmt).keySet());










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt> annotatedResults) {



......














src/heros/solver/CountingThreadPoolExecutor.java








View file @ 7b66dd07






......@@ -27,7 +27,7 @@ import org.slf4j.LoggerFactory;









 */










public class CountingThreadPoolExecutor extends ThreadPoolExecutor {










 










 protected static final Logger logger = LoggerFactory.getLogger(IDESolver.class);










 protected static final Logger logger = LoggerFactory.getLogger(CountingThreadPoolExecutor.class);





















 protected final CountLatch numRunningTasks = new CountLatch(0);










 



......














src/heros/solver/IFDSSolver.java








View file @ 7b66dd07






......@@ -49,7 +49,12 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









	 * {@link #solve()}.










	 */










 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {










 super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {










 super(createIDETabulationProblem(ifdsProblem));










 }





















 static <N, D, M, I extends InterproceduralCFG<N, M>> IDETabulationProblem<N, D, M, BinaryDomain, I> createIDETabulationProblem(










 final IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 return new IDETabulationProblem<N,D,M,BinaryDomain,I>() {





















 public FlowFunctions<N,D,M> flowFunctions() {










 return ifdsProblem.flowFunctions();



......@@ -140,7 +145,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 }










 }





















 });










 };










 }










 










 /**



......














src/heros/utilities/JsonArray.java








View file @ 7b66dd07






......@@ -27,6 +27,10 @@ public class JsonArray {









 for(String item: items) {










 JsonDocument.tabs(tabs+1, builder); builder.append("\""+item+"\",\n");










 }










 










 if(!items.isEmpty())










 builder.delete(builder.length()-2, builder.length()-1); 










 










 JsonDocument.tabs(tabs, builder); builder.append("]");










 }










}




\ No newline at end of file














test/heros/fieldsens/BiDiFieldSensitiveIFDSSolverTest.java








View file @ 7b66dd07






......@@ -10,13 +10,21 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.InterproceduralCFG;










import static heros.utilities.FieldSensitiveTestHelper.callSite;










import static heros.utilities.FieldSensitiveTestHelper.exitStmt;










import static heros.utilities.FieldSensitiveTestHelper.flow;










import static heros.utilities.FieldSensitiveTestHelper.kill;










import static heros.utilities.FieldSensitiveTestHelper.normalStmt;










import static heros.utilities.FieldSensitiveTestHelper.over;










import static heros.utilities.FieldSensitiveTestHelper.startPoints;










import static heros.utilities.FieldSensitiveTestHelper.times;










import static heros.utilities.FieldSensitiveTestHelper.to;










import heros.utilities.FieldSensitiveTestHelper;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;










import heros.utilities.Statement;










import heros.utilities.TestDebugger;










import heros.utilities.TestFact;










import heros.utilities.TestMethod;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;





















import java.util.Collection;










import java.util.LinkedList;



......@@ -28,8 +36,6 @@ import org.junit.runners.Parameterized.Parameters;




















import com.google.common.collect.Lists;





















import static heros.utilities.FieldSensitiveTestHelper.*;
































@RunWith(Parameterized.class)










public class BiDiFieldSensitiveIFDSSolverTest {



......@@ -37,11 +43,11 @@ public class BiDiFieldSensitiveIFDSSolverTest {









 private FieldSensitiveTestHelper forwardHelper;










 private FieldSensitiveTestHelper backwardHelper;










 private TabulationProblemExchange exchange;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;










 










 public BiDiFieldSensitiveIFDSSolverTest(TabulationProblemExchange exchange) {










 this.exchange = exchange;










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 forwardHelper = new FieldSensitiveTestHelper(debugger);










 backwardHelper = new FieldSensitiveTestHelper(debugger);










 }



......














test/heros/fieldsens/ControlFlowJoinResolverTest.java








View file @ 7b66dd07






......@@ -64,7 +64,8 @@ public class ControlFlowJoinResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 joinStmt = new Statement("joinStmt");










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(analyzer, joinStmt);










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt, 










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -109,7 +110,7 @@ public class ControlFlowJoinResolverTest {









 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), resolver));










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));










 verify(callback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 



......@@ -125,7 +126,7 @@ public class ControlFlowJoinResolverTest {









 @Override










 public boolean matches(Object argument) {










 ControlFlowJoinResolver resolver = (ControlFlowJoinResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 }










 }










}














test/heros/fieldsens/FieldSensitiveIFDSSolverTest.java








View file @ 7b66dd07






......@@ -30,12 +30,12 @@ import static heros.utilities.FieldSensitiveTestHelper.*;









public class FieldSensitiveIFDSSolverTest {





















 private FieldSensitiveTestHelper helper;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 @Before










 public void before() {










 System.err.println("-----");










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 helper = new FieldSensitiveTestHelper(debugger);










 }










 



......@@ -157,7 +157,7 @@ public class FieldSensitiveIFDSSolverTest {









 helper.method("bar",










 startPoints("c"),










 normalStmt("c", flow("2", readField("f"), "3")).succ("d"),










 exitStmt("d").returns(over("b"), to("e"), flow("3", "4")).returns(over("e"), to("f"), flow("3", "5")));










 exitStmt("d").returns(over("b"), to("e"), flow(2, "3", "4")).returns(over("e"), to("f"), flow(2, "3", "5")));










 










 helper.runSolver(false, "a");










 }



......@@ -718,7 +718,6 @@ public class FieldSensitiveIFDSSolverTest {









 normalStmt("f", flow("6", readField("f"), "7")).succ("g"),










 normalStmt("g", kill("7")).succ("h"));










 










 










 helper.runSolver(true, "a");










 }










 



......@@ -1176,4 +1175,109 @@ public class FieldSensitiveIFDSSolverTest {









 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void readMultipleAbstractedFields() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("0", prependField("f"), "1")).succ("b1").succ("b2"),










 normalStmt("b1", kill("1")).succ("c"),










 normalStmt("b2", flow("1", prependField("g"), "1")).succ("c"),










 normalStmt("c", flow("1", "2")).succ("d"),










 normalStmt("d", flow("2", "2")).succ("e1").succ("e2"),










 normalStmt("e1", flow("2", "3")).succ("f"),










 normalStmt("e2", kill("2")).succ("f"),










 normalStmt("f", flow("3", readField("g"), "4")).succ("g"),










 normalStmt("g", flow("4", readField("f"), "5")).succ("h"),










 normalStmt("h", kill("5")).succ("i"));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void intraproceduralStateExplosionInline0Resolver() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void intraproceduralStateExplosion() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("x"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void nestedResolversShouldFormAGraph() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("f"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b1").succ("b2"),










 normalStmt("b1", flow("1", overwriteField("x"), "1")).succ("c"),










 normalStmt("b2", flow("1", overwriteField("y"), "1")).succ("c"),










 normalStmt("c", flow(2, "1", "1")).succ("d1").succ("d2"),










 normalStmt("d1", flow(2, "1", overwriteField("x"), "1")).succ("e"),










 normalStmt("d2", flow(2, "1", overwriteField("y"), "1")).succ("e"),










 normalStmt("e", flow(3, "1", "1")).succ("f"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void maintainCallingContextInCtrlFlowJoin() {










 helper.method("main",










 startPoints("a"),










 normalStmt("a", flow("0", "1")).succ("b1").succ("b2"),










 callSite("b1").calls("foo", flow("1", prependField("f"), "2")).retSite("c1", kill("1")),










 callSite("b2").calls("foo", flow("1", "2")).retSite("c2", kill("1")),










 normalStmt("c1", kill("3")).succ("d"),










 normalStmt("c2", flow("3", readField("f"), "4")).succ("d"),










 normalStmt("d", kill("4")).succ("e"));










 










 helper.method("foo", 










 startPoints("f"),










 normalStmt("f", flow("2", "2")).succ("g").succ("f"),










 exitStmt("g").returns(over("b1"), to("c1"), flow("2", "3")).returns(over("b2"), to("c2"), flow("2", "3")));










 










 helper.runSolver(false, "a");










 }










}














test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ 7b66dd07






......@@ -12,16 +12,20 @@ package heros.fieldsens;




















import static org.junit.Assert.assertEquals;










import static org.junit.Assert.assertTrue;










import static org.mockito.Mockito.*;





















import java.util.List;





















import heros.fieldsens.CallEdgeResolver;










import heros.fieldsens.InterestCallback;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.ReturnSiteResolver;










import static org.mockito.Matchers.any;










import static org.mockito.Matchers.argThat;










import static org.mockito.Matchers.eq;










import static org.mockito.Mockito.RETURNS_DEEP_STUBS;










import static org.mockito.Mockito.RETURNS_MOCKS;










import static org.mockito.Mockito.RETURNS_SMART_NULLS;










import static org.mockito.Mockito.doAnswer;










import static org.mockito.Mockito.mock;










import static org.mockito.Mockito.never;










import static org.mockito.Mockito.verify;










import static org.mockito.Mockito.when;










import static org.mockito.Mockito.withSettings;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;



......@@ -29,6 +33,8 @@ import heros.utilities.Statement;









import heros.utilities.TestFact;










import heros.utilities.TestMethod;





















import java.util.List;





















import org.junit.Before;










import org.junit.Test;










import org.mockito.ArgumentMatcher;



......@@ -68,7 +74,8 @@ public class ReturnSiteResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 returnSite = new Statement("returnSite");










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(analyzer, returnSite);










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite,










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -225,17 +232,17 @@ public class ReturnSiteResolverTest {









 doAnswer(new Answer() {










 @Override










 public Object answer(InvocationOnMock invocation) throws Throwable {










 ReturnSiteResolver<String, TestFact, Statement, TestMethod> resolver = (ReturnSiteResolver) invocation.getArguments()[1];










 Resolver<String, TestFact, Statement, TestMethod> resolver = (Resolver) invocation.getArguments()[1];










 resolver.resolve(getDeltaConstraint("b"), secondCallback);










 return null;










 }










 










 }).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));










 }).when(callback).interest(eq(analyzer), eq(nestedResolver));










 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(secondCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));










 verify(secondCallback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 @Test



......@@ -269,6 +276,18 @@ public class ReturnSiteResolverTest {









 verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));










 }










 










 @Test










 public void incomingZeroCallEdgeResolver() {










 Resolver<String, TestFact, Statement, TestMethod> resolver = mock(Resolver.class);










 ZeroCallEdgeResolver<String, TestFact, Statement, TestMethod> zeroResolver = mock(ZeroCallEdgeResolver.class); 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), zeroResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(resolver, never()).resolve(any(Constraint.class), any(InterestCallback.class));










 verify(callback, never()).interest(any(PerAccessPathMethodAnalyzer.class), any(Resolver.class));










 verify(callback, never()).canBeResolvedEmpty();










 }










 










 private class ReturnSiteResolverArgumentMatcher extends










 ArgumentMatcher<ReturnSiteResolver<String, TestFact, Statement, TestMethod>> {














......@@ -281,7 +300,7 @@ public class ReturnSiteResolverTest {









 @Override










 public boolean matches(Object argument) {










 ReturnSiteResolver resolver = (ReturnSiteResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getReturnSite().equals(returnSite);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getReturnSite().equals(returnSite);










 }










 }










}














test/heros/utilities/FieldSensitiveTestHelper.java








View file @ 7b66dd07






......@@ -58,9 +58,9 @@ public class FieldSensitiveTestHelper {









 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, TestMethod> stmt2method = Maps.newHashMap();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger) {










 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod> debugger) {










 this.debugger = debugger;










 }














......@@ -266,6 +266,10 @@ public class FieldSensitiveTestHelper {









 if (edge.includeInCfg && edge.succUnit.equals(stmt))










 result.add(edge.unit);










 }










 for(Call2ReturnEdge edge : call2retEdges) {










 if(edge.includeInCfg && edge.returnSite.equals(stmt))










 result.add(edge.callSite);










 }










 return result;










 }














......














test/heros/utilities/TestDebugger.java








View file @ 7b66dd07






......@@ -18,11 +18,15 @@ import com.google.common.collect.Sets;




















import heros.InterproceduralCFG;










import heros.fieldsens.Debugger;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










public class TestDebugger<Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 private JsonDocument root = new JsonDocument();










 private I icfg;










 private InterproceduralCFG<Stmt, Method> icfg;










 










 public void writeJsonDebugFile(String filename) {










 try {



......@@ -41,7 +45,7 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









	 * @see heros.alias.Debugger#setICFG(I)










	 */










 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 this.icfg = icfg;










 }














......@@ -108,4 +112,36 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 stmt(exitStmt).doc("returns").doc(returnSite.toString()).keyValue("flow", expectedFlowFunctionsToString);










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void askedToResolve(Resolver<Field, Fact, Stmt, Method> resolver, Constraint<Field> constraint) {










 










 }





















}














test/heros/utilities/TestHelper.java








View file @ 7b66dd07






......@@ -70,7 +70,7 @@ public class TestHelper {









 return result;










 }





















 @SafeVarargs










 @SuppressWarnings("unchecked")










 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt, ExpectedFlowFunction<JoinableFact>...flowFunctions) {










 return new NormalStmtBuilder(new Statement(stmt), flowFunctions);










 }



......









Prev


1


2


Next















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
7b66dd07


authored
Oct 09, 2015
by


Steven Arzt



Browse files




Merge branch 'develop' of github.com:Sable/heros into develop


Conflicts:
	.classpath






parents
c3065cba
e0a26844













Changes
32




Show whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIDESolver.java



0 â†’ 100644







View file @ 7b66dd07













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.EdgeFunctions;










import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IDETabulationProblem;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.JoinLattice;










import heros.solver.IFDSSolver.BinaryDomain;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import com.google.common.collect.Maps;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 * 










 * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * reportable paths.  










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * 				reportable paths.










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIDESolver<N, D, M, V, I extends InterproceduralCFG<N, M>> {





















 private final IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> forwardProblem;










 private final IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 protected SingleDirectionSolver fwSolver;










 protected SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIDESolver} with the associated forward and backward problem.










	 */










 public BiDiIDESolver(IDETabulationProblem<N,D,M,V,I> forwardProblem, IDETabulationProblem<N,D,M,V,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() { 










 fwSolver = createSingleDirectionSolver(forwardProblem, "FW");










 bwSolver = createSingleDirectionSolver(backwardProblem, "BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 //start the bw solver










 bwSolver.submitInitialSeeds();










 










 //start the fw solver and block until both solvers have completed










 //(note that they both share the same executor, see below)










 //note to self: the order of the two should not matter










 fwSolver.solve();










 }










 










 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N retSiteC;










 private AbstractionWithSourceStmt targetVal;










 private EdgeFunction<V> edgeFunction;










 private N relatedCallSite;










 










 public PausedEdge(N retSiteC, AbstractionWithSourceStmt targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) {










 this.retSiteC = retSiteC;










 this.targetVal = targetVal;










 this.edgeFunction = edgeFunction;










 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends IDESolver<N,AbstractionWithSourceStmt,M,V,I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void propagateUnbalancedReturnFlow(N retSiteC, AbstractionWithSourceStmt targetVal,










 EdgeFunction<V> edgeFunction, N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge edge = new PausedEdge(retSiteC, targetVal, edgeFunction, relatedCallSite);










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 }










 










 @Override










 protected void propagate(AbstractionWithSourceStmt sourceVal, N target, AbstractionWithSourceStmt targetVal, EdgeFunction<V> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.retSiteC, edge.targetVal, edge.edgeFunction, edge.relatedCallSite);










 }










 }










 }










 }










 










 /* we share the same executor; this will cause the call to solve() above to block










		 * until both solvers have finished










		 */ 










 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 public D getAbstraction() {










 return abstraction;










 }










 










 public N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }










 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private class AugmentedTabulationProblem implements IDETabulationProblem<N, AbstractionWithSourceStmt,M,V,I> {





















 private final IDETabulationProblem<N,D,M,V,I> delegate;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IDETabulationProblem<N, D, M,V, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 Set<D> origTargets = originalFunctions.getCallFlowFunction(callStmt, destinationMethod).computeTargets(










 source.getAbstraction());





















 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for (D d : origTargets) {










 res.add(new AbstractionWithSourceStmt(d, null));










 }










 return res;










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);










 










 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }





















 @Override










 public EdgeFunctions<N, AbstractionWithSourceStmt, M, V> edgeFunctions() {










 return new EdgeFunctions<N, AbstractionWithSourceStmt, M, V>() {





















 @Override










 public EdgeFunction<V> getNormalEdgeFunction(N curr, AbstractionWithSourceStmt currNode, N succ,










 AbstractionWithSourceStmt succNode) {










 return delegate.edgeFunctions().getNormalEdgeFunction(curr, currNode.getAbstraction(), succ, succNode.getAbstraction());










 }





















 @Override










 public EdgeFunction<V> getCallEdgeFunction(N callStmt,AbstractionWithSourceStmt srcNode,










 M destinationMethod, AbstractionWithSourceStmt destNode) {










 return delegate.edgeFunctions().getCallEdgeFunction(callStmt, srcNode.getAbstraction(), destinationMethod, destNode.getAbstraction());










 }





















 @Override










 public EdgeFunction<V> getReturnEdgeFunction(N callSite, M calleeMethod, N exitStmt,










 AbstractionWithSourceStmt exitNode, N returnSite,










 AbstractionWithSourceStmt retNode) {










 return delegate.edgeFunctions().getReturnEdgeFunction(callSite, calleeMethod, exitStmt, exitNode.getAbstraction(), returnSite, retNode.getAbstraction());










 }





















 @Override










 public EdgeFunction<V> getCallToReturnEdgeFunction(N callSite, AbstractionWithSourceStmt callNode,










 N returnSite, AbstractionWithSourceStmt returnSideNode) {










 return delegate.edgeFunctions().getCallToReturnEdgeFunction(callSite, callNode.getAbstraction(), returnSite, returnSideNode.getAbstraction());










 }










 };










 }





















 @Override










 public JoinLattice<V> joinLattice() {










 return delegate.joinLattice();










 }





















 @Override










 public EdgeFunction<V> allTopFunction() {










 return delegate.allTopFunction();










 }





















 }










 










}














src/heros/solver/BiDiIFDSSolver.java








View file @ 7b66dd07






......@@ -49,426 +49,22 @@ import com.google.common.collect.Maps;









 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> extends BiDiIDESolver<N, D, M, BinaryDomain, I> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() { 










 fwSolver = createSingleDirectionSolver(forwardProblem, "FW");










 bwSolver = createSingleDirectionSolver(backwardProblem, "BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 //start the bw solver










 bwSolver.submitInitialSeeds();










 










 //start the fw solver and block until both solvers have completed










 //(note that they both share the same executor, see below)










 //note to self: the order of the two should not matter










 fwSolver.solve();










 }










 










 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N retSiteC;










 private AbstractionWithSourceStmt targetVal;










 private EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction;










 private N relatedCallSite;










 










 public PausedEdge(N retSiteC, AbstractionWithSourceStmt targetVal, EdgeFunction<BinaryDomain> edgeFunction, N relatedCallSite) {










 this.retSiteC = retSiteC;










 this.targetVal = targetVal;










 this.edgeFunction = edgeFunction;










 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends JoinHandlingNodesIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void propagateUnbalancedReturnFlow(N retSiteC, AbstractionWithSourceStmt targetVal,










 EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction, N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge edge = new PausedEdge(retSiteC, targetVal, edgeFunction, relatedCallSite);










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 }










 










 protected void propagate(AbstractionWithSourceStmt sourceVal, N target, AbstractionWithSourceStmt targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 d5.getAbstraction().setCallingContext(d4.getAbstraction());










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.retSiteC, edge.targetVal, edge.edgeFunction, edge.relatedCallSite);










 }










 }










 }










 }










 










 /* we share the same executor; this will cause the call to solve() above to block










		 * until both solvers have finished










		 */ 










 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements JoinHandlingNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 public D getAbstraction() {










 return abstraction;










 }










 










 public N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 @Override










 public boolean handleJoin(BiDiIFDSSolver<N, D, M, I>.AbstractionWithSourceStmt joiningNode) {










 return abstraction.handleJoin(joiningNode.getAbstraction());










 }





















 @Override










 public heros.solver.JoinHandlingNode.JoinKey createJoinKey() {










 return new JoinKey(source, abstraction.createJoinKey());










 }





















 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private class AugmentedTabulationProblem implements IFDSTabulationProblem<N, AbstractionWithSourceStmt,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 Set<D> origTargets = originalFunctions.getCallFlowFunction(callStmt, destinationMethod).computeTargets(










 source.getAbstraction());





















 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for (D d : origTargets) {










 res.add(new AbstractionWithSourceStmt(d, null));










 }










 return res;










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);










 










 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }





















 super(IFDSSolver.createIDETabulationProblem(forwardProblem), IFDSSolver.createIDETabulationProblem(backwardProblem));










 }










 










 public Set<D> fwIFDSResultAt(N stmt) {










 return extractResults(fwSolver.ifdsResultsAt(stmt));










 return extractResults(fwSolver.resultsAt(stmt).keySet());










 }










 










 










 public Set<D> bwIFDSResultAt(N stmt) {










 return extractResults(bwSolver.ifdsResultsAt(stmt));










 return extractResults(bwSolver.resultsAt(stmt).keySet());










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt> annotatedResults) {



......














src/heros/solver/CountingThreadPoolExecutor.java








View file @ 7b66dd07






......@@ -27,7 +27,7 @@ import org.slf4j.LoggerFactory;









 */










public class CountingThreadPoolExecutor extends ThreadPoolExecutor {










 










 protected static final Logger logger = LoggerFactory.getLogger(IDESolver.class);










 protected static final Logger logger = LoggerFactory.getLogger(CountingThreadPoolExecutor.class);





















 protected final CountLatch numRunningTasks = new CountLatch(0);










 



......














src/heros/solver/IFDSSolver.java








View file @ 7b66dd07






......@@ -49,7 +49,12 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









	 * {@link #solve()}.










	 */










 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {










 super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {










 super(createIDETabulationProblem(ifdsProblem));










 }





















 static <N, D, M, I extends InterproceduralCFG<N, M>> IDETabulationProblem<N, D, M, BinaryDomain, I> createIDETabulationProblem(










 final IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 return new IDETabulationProblem<N,D,M,BinaryDomain,I>() {





















 public FlowFunctions<N,D,M> flowFunctions() {










 return ifdsProblem.flowFunctions();



......@@ -140,7 +145,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 }










 }





















 });










 };










 }










 










 /**



......














src/heros/utilities/JsonArray.java








View file @ 7b66dd07






......@@ -27,6 +27,10 @@ public class JsonArray {









 for(String item: items) {










 JsonDocument.tabs(tabs+1, builder); builder.append("\""+item+"\",\n");










 }










 










 if(!items.isEmpty())










 builder.delete(builder.length()-2, builder.length()-1); 










 










 JsonDocument.tabs(tabs, builder); builder.append("]");










 }










}




\ No newline at end of file














test/heros/fieldsens/BiDiFieldSensitiveIFDSSolverTest.java








View file @ 7b66dd07






......@@ -10,13 +10,21 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.InterproceduralCFG;










import static heros.utilities.FieldSensitiveTestHelper.callSite;










import static heros.utilities.FieldSensitiveTestHelper.exitStmt;










import static heros.utilities.FieldSensitiveTestHelper.flow;










import static heros.utilities.FieldSensitiveTestHelper.kill;










import static heros.utilities.FieldSensitiveTestHelper.normalStmt;










import static heros.utilities.FieldSensitiveTestHelper.over;










import static heros.utilities.FieldSensitiveTestHelper.startPoints;










import static heros.utilities.FieldSensitiveTestHelper.times;










import static heros.utilities.FieldSensitiveTestHelper.to;










import heros.utilities.FieldSensitiveTestHelper;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;










import heros.utilities.Statement;










import heros.utilities.TestDebugger;










import heros.utilities.TestFact;










import heros.utilities.TestMethod;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;





















import java.util.Collection;










import java.util.LinkedList;



......@@ -28,8 +36,6 @@ import org.junit.runners.Parameterized.Parameters;




















import com.google.common.collect.Lists;





















import static heros.utilities.FieldSensitiveTestHelper.*;
































@RunWith(Parameterized.class)










public class BiDiFieldSensitiveIFDSSolverTest {



......@@ -37,11 +43,11 @@ public class BiDiFieldSensitiveIFDSSolverTest {









 private FieldSensitiveTestHelper forwardHelper;










 private FieldSensitiveTestHelper backwardHelper;










 private TabulationProblemExchange exchange;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;










 










 public BiDiFieldSensitiveIFDSSolverTest(TabulationProblemExchange exchange) {










 this.exchange = exchange;










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 forwardHelper = new FieldSensitiveTestHelper(debugger);










 backwardHelper = new FieldSensitiveTestHelper(debugger);










 }



......














test/heros/fieldsens/ControlFlowJoinResolverTest.java








View file @ 7b66dd07






......@@ -64,7 +64,8 @@ public class ControlFlowJoinResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 joinStmt = new Statement("joinStmt");










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(analyzer, joinStmt);










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt, 










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -109,7 +110,7 @@ public class ControlFlowJoinResolverTest {









 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), resolver));










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));










 verify(callback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 



......@@ -125,7 +126,7 @@ public class ControlFlowJoinResolverTest {









 @Override










 public boolean matches(Object argument) {










 ControlFlowJoinResolver resolver = (ControlFlowJoinResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 }










 }










}














test/heros/fieldsens/FieldSensitiveIFDSSolverTest.java








View file @ 7b66dd07






......@@ -30,12 +30,12 @@ import static heros.utilities.FieldSensitiveTestHelper.*;









public class FieldSensitiveIFDSSolverTest {





















 private FieldSensitiveTestHelper helper;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 @Before










 public void before() {










 System.err.println("-----");










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 helper = new FieldSensitiveTestHelper(debugger);










 }










 



......@@ -157,7 +157,7 @@ public class FieldSensitiveIFDSSolverTest {









 helper.method("bar",










 startPoints("c"),










 normalStmt("c", flow("2", readField("f"), "3")).succ("d"),










 exitStmt("d").returns(over("b"), to("e"), flow("3", "4")).returns(over("e"), to("f"), flow("3", "5")));










 exitStmt("d").returns(over("b"), to("e"), flow(2, "3", "4")).returns(over("e"), to("f"), flow(2, "3", "5")));










 










 helper.runSolver(false, "a");










 }



......@@ -718,7 +718,6 @@ public class FieldSensitiveIFDSSolverTest {









 normalStmt("f", flow("6", readField("f"), "7")).succ("g"),










 normalStmt("g", kill("7")).succ("h"));










 










 










 helper.runSolver(true, "a");










 }










 



......@@ -1176,4 +1175,109 @@ public class FieldSensitiveIFDSSolverTest {









 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void readMultipleAbstractedFields() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("0", prependField("f"), "1")).succ("b1").succ("b2"),










 normalStmt("b1", kill("1")).succ("c"),










 normalStmt("b2", flow("1", prependField("g"), "1")).succ("c"),










 normalStmt("c", flow("1", "2")).succ("d"),










 normalStmt("d", flow("2", "2")).succ("e1").succ("e2"),










 normalStmt("e1", flow("2", "3")).succ("f"),










 normalStmt("e2", kill("2")).succ("f"),










 normalStmt("f", flow("3", readField("g"), "4")).succ("g"),










 normalStmt("g", flow("4", readField("f"), "5")).succ("h"),










 normalStmt("h", kill("5")).succ("i"));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void intraproceduralStateExplosionInline0Resolver() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void intraproceduralStateExplosion() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("x"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void nestedResolversShouldFormAGraph() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("f"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b1").succ("b2"),










 normalStmt("b1", flow("1", overwriteField("x"), "1")).succ("c"),










 normalStmt("b2", flow("1", overwriteField("y"), "1")).succ("c"),










 normalStmt("c", flow(2, "1", "1")).succ("d1").succ("d2"),










 normalStmt("d1", flow(2, "1", overwriteField("x"), "1")).succ("e"),










 normalStmt("d2", flow(2, "1", overwriteField("y"), "1")).succ("e"),










 normalStmt("e", flow(3, "1", "1")).succ("f"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void maintainCallingContextInCtrlFlowJoin() {










 helper.method("main",










 startPoints("a"),










 normalStmt("a", flow("0", "1")).succ("b1").succ("b2"),










 callSite("b1").calls("foo", flow("1", prependField("f"), "2")).retSite("c1", kill("1")),










 callSite("b2").calls("foo", flow("1", "2")).retSite("c2", kill("1")),










 normalStmt("c1", kill("3")).succ("d"),










 normalStmt("c2", flow("3", readField("f"), "4")).succ("d"),










 normalStmt("d", kill("4")).succ("e"));










 










 helper.method("foo", 










 startPoints("f"),










 normalStmt("f", flow("2", "2")).succ("g").succ("f"),










 exitStmt("g").returns(over("b1"), to("c1"), flow("2", "3")).returns(over("b2"), to("c2"), flow("2", "3")));










 










 helper.runSolver(false, "a");










 }










}














test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ 7b66dd07






......@@ -12,16 +12,20 @@ package heros.fieldsens;




















import static org.junit.Assert.assertEquals;










import static org.junit.Assert.assertTrue;










import static org.mockito.Mockito.*;





















import java.util.List;





















import heros.fieldsens.CallEdgeResolver;










import heros.fieldsens.InterestCallback;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.ReturnSiteResolver;










import static org.mockito.Matchers.any;










import static org.mockito.Matchers.argThat;










import static org.mockito.Matchers.eq;










import static org.mockito.Mockito.RETURNS_DEEP_STUBS;










import static org.mockito.Mockito.RETURNS_MOCKS;










import static org.mockito.Mockito.RETURNS_SMART_NULLS;










import static org.mockito.Mockito.doAnswer;










import static org.mockito.Mockito.mock;










import static org.mockito.Mockito.never;










import static org.mockito.Mockito.verify;










import static org.mockito.Mockito.when;










import static org.mockito.Mockito.withSettings;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;



......@@ -29,6 +33,8 @@ import heros.utilities.Statement;









import heros.utilities.TestFact;










import heros.utilities.TestMethod;





















import java.util.List;





















import org.junit.Before;










import org.junit.Test;










import org.mockito.ArgumentMatcher;



......@@ -68,7 +74,8 @@ public class ReturnSiteResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 returnSite = new Statement("returnSite");










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(analyzer, returnSite);










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite,










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -225,17 +232,17 @@ public class ReturnSiteResolverTest {









 doAnswer(new Answer() {










 @Override










 public Object answer(InvocationOnMock invocation) throws Throwable {










 ReturnSiteResolver<String, TestFact, Statement, TestMethod> resolver = (ReturnSiteResolver) invocation.getArguments()[1];










 Resolver<String, TestFact, Statement, TestMethod> resolver = (Resolver) invocation.getArguments()[1];










 resolver.resolve(getDeltaConstraint("b"), secondCallback);










 return null;










 }










 










 }).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));










 }).when(callback).interest(eq(analyzer), eq(nestedResolver));










 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(secondCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));










 verify(secondCallback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 @Test



......@@ -269,6 +276,18 @@ public class ReturnSiteResolverTest {









 verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));










 }










 










 @Test










 public void incomingZeroCallEdgeResolver() {










 Resolver<String, TestFact, Statement, TestMethod> resolver = mock(Resolver.class);










 ZeroCallEdgeResolver<String, TestFact, Statement, TestMethod> zeroResolver = mock(ZeroCallEdgeResolver.class); 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), zeroResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(resolver, never()).resolve(any(Constraint.class), any(InterestCallback.class));










 verify(callback, never()).interest(any(PerAccessPathMethodAnalyzer.class), any(Resolver.class));










 verify(callback, never()).canBeResolvedEmpty();










 }










 










 private class ReturnSiteResolverArgumentMatcher extends










 ArgumentMatcher<ReturnSiteResolver<String, TestFact, Statement, TestMethod>> {














......@@ -281,7 +300,7 @@ public class ReturnSiteResolverTest {









 @Override










 public boolean matches(Object argument) {










 ReturnSiteResolver resolver = (ReturnSiteResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getReturnSite().equals(returnSite);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getReturnSite().equals(returnSite);










 }










 }










}














test/heros/utilities/FieldSensitiveTestHelper.java








View file @ 7b66dd07






......@@ -58,9 +58,9 @@ public class FieldSensitiveTestHelper {









 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, TestMethod> stmt2method = Maps.newHashMap();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger) {










 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod> debugger) {










 this.debugger = debugger;










 }














......@@ -266,6 +266,10 @@ public class FieldSensitiveTestHelper {









 if (edge.includeInCfg && edge.succUnit.equals(stmt))










 result.add(edge.unit);










 }










 for(Call2ReturnEdge edge : call2retEdges) {










 if(edge.includeInCfg && edge.returnSite.equals(stmt))










 result.add(edge.callSite);










 }










 return result;










 }














......














test/heros/utilities/TestDebugger.java








View file @ 7b66dd07






......@@ -18,11 +18,15 @@ import com.google.common.collect.Sets;




















import heros.InterproceduralCFG;










import heros.fieldsens.Debugger;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










public class TestDebugger<Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 private JsonDocument root = new JsonDocument();










 private I icfg;










 private InterproceduralCFG<Stmt, Method> icfg;










 










 public void writeJsonDebugFile(String filename) {










 try {



......@@ -41,7 +45,7 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









	 * @see heros.alias.Debugger#setICFG(I)










	 */










 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 this.icfg = icfg;










 }














......@@ -108,4 +112,36 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 stmt(exitStmt).doc("returns").doc(returnSite.toString()).keyValue("flow", expectedFlowFunctionsToString);










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void askedToResolve(Resolver<Field, Fact, Stmt, Method> resolver, Constraint<Field> constraint) {










 










 }





















}














test/heros/utilities/TestHelper.java








View file @ 7b66dd07






......@@ -70,7 +70,7 @@ public class TestHelper {









 return result;










 }





















 @SafeVarargs










 @SuppressWarnings("unchecked")










 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt, ExpectedFlowFunction<JoinableFact>...flowFunctions) {










 return new NormalStmtBuilder(new Statement(stmt), flowFunctions);










 }



......









Prev


1


2


Next















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
7b66dd07


authored
Oct 09, 2015
by


Steven Arzt



Browse files



Commit
7b66dd07


authored
Oct 09, 2015
by


Steven Arzt

7b66dd07authoredbySteven Arzt

Merge branch 'develop' of github.com:Sable/heros into develop


Conflicts:
	.classpath





parents
c3065cba
e0a26844
















parents
c3065cba
e0a26844





parents












Changes
32
32


Show whitespace changes

Inline
Side-by-side






Show whitespace changes

Inline
Side-by-side




Show whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/solver/BiDiIDESolver.java



0 â†’ 100644







View file @ 7b66dd07













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.EdgeFunctions;










import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IDETabulationProblem;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.JoinLattice;










import heros.solver.IFDSSolver.BinaryDomain;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import com.google.common.collect.Maps;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 * 










 * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * reportable paths.  










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * 				reportable paths.










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIDESolver<N, D, M, V, I extends InterproceduralCFG<N, M>> {





















 private final IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> forwardProblem;










 private final IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 protected SingleDirectionSolver fwSolver;










 protected SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIDESolver} with the associated forward and backward problem.










	 */










 public BiDiIDESolver(IDETabulationProblem<N,D,M,V,I> forwardProblem, IDETabulationProblem<N,D,M,V,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() { 










 fwSolver = createSingleDirectionSolver(forwardProblem, "FW");










 bwSolver = createSingleDirectionSolver(backwardProblem, "BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 //start the bw solver










 bwSolver.submitInitialSeeds();










 










 //start the fw solver and block until both solvers have completed










 //(note that they both share the same executor, see below)










 //note to self: the order of the two should not matter










 fwSolver.solve();










 }










 










 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N retSiteC;










 private AbstractionWithSourceStmt targetVal;










 private EdgeFunction<V> edgeFunction;










 private N relatedCallSite;










 










 public PausedEdge(N retSiteC, AbstractionWithSourceStmt targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) {










 this.retSiteC = retSiteC;










 this.targetVal = targetVal;










 this.edgeFunction = edgeFunction;










 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends IDESolver<N,AbstractionWithSourceStmt,M,V,I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void propagateUnbalancedReturnFlow(N retSiteC, AbstractionWithSourceStmt targetVal,










 EdgeFunction<V> edgeFunction, N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge edge = new PausedEdge(retSiteC, targetVal, edgeFunction, relatedCallSite);










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 }










 










 @Override










 protected void propagate(AbstractionWithSourceStmt sourceVal, N target, AbstractionWithSourceStmt targetVal, EdgeFunction<V> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.retSiteC, edge.targetVal, edge.edgeFunction, edge.relatedCallSite);










 }










 }










 }










 }










 










 /* we share the same executor; this will cause the call to solve() above to block










		 * until both solvers have finished










		 */ 










 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 public D getAbstraction() {










 return abstraction;










 }










 










 public N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }










 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private class AugmentedTabulationProblem implements IDETabulationProblem<N, AbstractionWithSourceStmt,M,V,I> {





















 private final IDETabulationProblem<N,D,M,V,I> delegate;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IDETabulationProblem<N, D, M,V, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 Set<D> origTargets = originalFunctions.getCallFlowFunction(callStmt, destinationMethod).computeTargets(










 source.getAbstraction());





















 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for (D d : origTargets) {










 res.add(new AbstractionWithSourceStmt(d, null));










 }










 return res;










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);










 










 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }





















 @Override










 public EdgeFunctions<N, AbstractionWithSourceStmt, M, V> edgeFunctions() {










 return new EdgeFunctions<N, AbstractionWithSourceStmt, M, V>() {





















 @Override










 public EdgeFunction<V> getNormalEdgeFunction(N curr, AbstractionWithSourceStmt currNode, N succ,










 AbstractionWithSourceStmt succNode) {










 return delegate.edgeFunctions().getNormalEdgeFunction(curr, currNode.getAbstraction(), succ, succNode.getAbstraction());










 }





















 @Override










 public EdgeFunction<V> getCallEdgeFunction(N callStmt,AbstractionWithSourceStmt srcNode,










 M destinationMethod, AbstractionWithSourceStmt destNode) {










 return delegate.edgeFunctions().getCallEdgeFunction(callStmt, srcNode.getAbstraction(), destinationMethod, destNode.getAbstraction());










 }





















 @Override










 public EdgeFunction<V> getReturnEdgeFunction(N callSite, M calleeMethod, N exitStmt,










 AbstractionWithSourceStmt exitNode, N returnSite,










 AbstractionWithSourceStmt retNode) {










 return delegate.edgeFunctions().getReturnEdgeFunction(callSite, calleeMethod, exitStmt, exitNode.getAbstraction(), returnSite, retNode.getAbstraction());










 }





















 @Override










 public EdgeFunction<V> getCallToReturnEdgeFunction(N callSite, AbstractionWithSourceStmt callNode,










 N returnSite, AbstractionWithSourceStmt returnSideNode) {










 return delegate.edgeFunctions().getCallToReturnEdgeFunction(callSite, callNode.getAbstraction(), returnSite, returnSideNode.getAbstraction());










 }










 };










 }





















 @Override










 public JoinLattice<V> joinLattice() {










 return delegate.joinLattice();










 }





















 @Override










 public EdgeFunction<V> allTopFunction() {










 return delegate.allTopFunction();










 }





















 }










 










}














src/heros/solver/BiDiIFDSSolver.java








View file @ 7b66dd07






......@@ -49,426 +49,22 @@ import com.google.common.collect.Maps;









 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> extends BiDiIDESolver<N, D, M, BinaryDomain, I> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() { 










 fwSolver = createSingleDirectionSolver(forwardProblem, "FW");










 bwSolver = createSingleDirectionSolver(backwardProblem, "BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 //start the bw solver










 bwSolver.submitInitialSeeds();










 










 //start the fw solver and block until both solvers have completed










 //(note that they both share the same executor, see below)










 //note to self: the order of the two should not matter










 fwSolver.solve();










 }










 










 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N retSiteC;










 private AbstractionWithSourceStmt targetVal;










 private EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction;










 private N relatedCallSite;










 










 public PausedEdge(N retSiteC, AbstractionWithSourceStmt targetVal, EdgeFunction<BinaryDomain> edgeFunction, N relatedCallSite) {










 this.retSiteC = retSiteC;










 this.targetVal = targetVal;










 this.edgeFunction = edgeFunction;










 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends JoinHandlingNodesIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void propagateUnbalancedReturnFlow(N retSiteC, AbstractionWithSourceStmt targetVal,










 EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction, N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge edge = new PausedEdge(retSiteC, targetVal, edgeFunction, relatedCallSite);










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 }










 










 protected void propagate(AbstractionWithSourceStmt sourceVal, N target, AbstractionWithSourceStmt targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 d5.getAbstraction().setCallingContext(d4.getAbstraction());










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.retSiteC, edge.targetVal, edge.edgeFunction, edge.relatedCallSite);










 }










 }










 }










 }










 










 /* we share the same executor; this will cause the call to solve() above to block










		 * until both solvers have finished










		 */ 










 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements JoinHandlingNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 public D getAbstraction() {










 return abstraction;










 }










 










 public N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 @Override










 public boolean handleJoin(BiDiIFDSSolver<N, D, M, I>.AbstractionWithSourceStmt joiningNode) {










 return abstraction.handleJoin(joiningNode.getAbstraction());










 }





















 @Override










 public heros.solver.JoinHandlingNode.JoinKey createJoinKey() {










 return new JoinKey(source, abstraction.createJoinKey());










 }





















 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private class AugmentedTabulationProblem implements IFDSTabulationProblem<N, AbstractionWithSourceStmt,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 Set<D> origTargets = originalFunctions.getCallFlowFunction(callStmt, destinationMethod).computeTargets(










 source.getAbstraction());





















 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for (D d : origTargets) {










 res.add(new AbstractionWithSourceStmt(d, null));










 }










 return res;










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);










 










 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }





















 super(IFDSSolver.createIDETabulationProblem(forwardProblem), IFDSSolver.createIDETabulationProblem(backwardProblem));










 }










 










 public Set<D> fwIFDSResultAt(N stmt) {










 return extractResults(fwSolver.ifdsResultsAt(stmt));










 return extractResults(fwSolver.resultsAt(stmt).keySet());










 }










 










 










 public Set<D> bwIFDSResultAt(N stmt) {










 return extractResults(bwSolver.ifdsResultsAt(stmt));










 return extractResults(bwSolver.resultsAt(stmt).keySet());










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt> annotatedResults) {



......














src/heros/solver/CountingThreadPoolExecutor.java








View file @ 7b66dd07






......@@ -27,7 +27,7 @@ import org.slf4j.LoggerFactory;









 */










public class CountingThreadPoolExecutor extends ThreadPoolExecutor {










 










 protected static final Logger logger = LoggerFactory.getLogger(IDESolver.class);










 protected static final Logger logger = LoggerFactory.getLogger(CountingThreadPoolExecutor.class);





















 protected final CountLatch numRunningTasks = new CountLatch(0);










 



......














src/heros/solver/IFDSSolver.java








View file @ 7b66dd07






......@@ -49,7 +49,12 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









	 * {@link #solve()}.










	 */










 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {










 super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {










 super(createIDETabulationProblem(ifdsProblem));










 }





















 static <N, D, M, I extends InterproceduralCFG<N, M>> IDETabulationProblem<N, D, M, BinaryDomain, I> createIDETabulationProblem(










 final IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 return new IDETabulationProblem<N,D,M,BinaryDomain,I>() {





















 public FlowFunctions<N,D,M> flowFunctions() {










 return ifdsProblem.flowFunctions();



......@@ -140,7 +145,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 }










 }





















 });










 };










 }










 










 /**



......














src/heros/utilities/JsonArray.java








View file @ 7b66dd07






......@@ -27,6 +27,10 @@ public class JsonArray {









 for(String item: items) {










 JsonDocument.tabs(tabs+1, builder); builder.append("\""+item+"\",\n");










 }










 










 if(!items.isEmpty())










 builder.delete(builder.length()-2, builder.length()-1); 










 










 JsonDocument.tabs(tabs, builder); builder.append("]");










 }










}




\ No newline at end of file














test/heros/fieldsens/BiDiFieldSensitiveIFDSSolverTest.java








View file @ 7b66dd07






......@@ -10,13 +10,21 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.InterproceduralCFG;










import static heros.utilities.FieldSensitiveTestHelper.callSite;










import static heros.utilities.FieldSensitiveTestHelper.exitStmt;










import static heros.utilities.FieldSensitiveTestHelper.flow;










import static heros.utilities.FieldSensitiveTestHelper.kill;










import static heros.utilities.FieldSensitiveTestHelper.normalStmt;










import static heros.utilities.FieldSensitiveTestHelper.over;










import static heros.utilities.FieldSensitiveTestHelper.startPoints;










import static heros.utilities.FieldSensitiveTestHelper.times;










import static heros.utilities.FieldSensitiveTestHelper.to;










import heros.utilities.FieldSensitiveTestHelper;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;










import heros.utilities.Statement;










import heros.utilities.TestDebugger;










import heros.utilities.TestFact;










import heros.utilities.TestMethod;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;





















import java.util.Collection;










import java.util.LinkedList;



......@@ -28,8 +36,6 @@ import org.junit.runners.Parameterized.Parameters;




















import com.google.common.collect.Lists;





















import static heros.utilities.FieldSensitiveTestHelper.*;
































@RunWith(Parameterized.class)










public class BiDiFieldSensitiveIFDSSolverTest {



......@@ -37,11 +43,11 @@ public class BiDiFieldSensitiveIFDSSolverTest {









 private FieldSensitiveTestHelper forwardHelper;










 private FieldSensitiveTestHelper backwardHelper;










 private TabulationProblemExchange exchange;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;










 










 public BiDiFieldSensitiveIFDSSolverTest(TabulationProblemExchange exchange) {










 this.exchange = exchange;










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 forwardHelper = new FieldSensitiveTestHelper(debugger);










 backwardHelper = new FieldSensitiveTestHelper(debugger);










 }



......














test/heros/fieldsens/ControlFlowJoinResolverTest.java








View file @ 7b66dd07






......@@ -64,7 +64,8 @@ public class ControlFlowJoinResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 joinStmt = new Statement("joinStmt");










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(analyzer, joinStmt);










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt, 










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -109,7 +110,7 @@ public class ControlFlowJoinResolverTest {









 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), resolver));










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));










 verify(callback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 



......@@ -125,7 +126,7 @@ public class ControlFlowJoinResolverTest {









 @Override










 public boolean matches(Object argument) {










 ControlFlowJoinResolver resolver = (ControlFlowJoinResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 }










 }










}














test/heros/fieldsens/FieldSensitiveIFDSSolverTest.java








View file @ 7b66dd07






......@@ -30,12 +30,12 @@ import static heros.utilities.FieldSensitiveTestHelper.*;









public class FieldSensitiveIFDSSolverTest {





















 private FieldSensitiveTestHelper helper;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 @Before










 public void before() {










 System.err.println("-----");










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 helper = new FieldSensitiveTestHelper(debugger);










 }










 



......@@ -157,7 +157,7 @@ public class FieldSensitiveIFDSSolverTest {









 helper.method("bar",










 startPoints("c"),










 normalStmt("c", flow("2", readField("f"), "3")).succ("d"),










 exitStmt("d").returns(over("b"), to("e"), flow("3", "4")).returns(over("e"), to("f"), flow("3", "5")));










 exitStmt("d").returns(over("b"), to("e"), flow(2, "3", "4")).returns(over("e"), to("f"), flow(2, "3", "5")));










 










 helper.runSolver(false, "a");










 }



......@@ -718,7 +718,6 @@ public class FieldSensitiveIFDSSolverTest {









 normalStmt("f", flow("6", readField("f"), "7")).succ("g"),










 normalStmt("g", kill("7")).succ("h"));










 










 










 helper.runSolver(true, "a");










 }










 



......@@ -1176,4 +1175,109 @@ public class FieldSensitiveIFDSSolverTest {









 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void readMultipleAbstractedFields() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("0", prependField("f"), "1")).succ("b1").succ("b2"),










 normalStmt("b1", kill("1")).succ("c"),










 normalStmt("b2", flow("1", prependField("g"), "1")).succ("c"),










 normalStmt("c", flow("1", "2")).succ("d"),










 normalStmt("d", flow("2", "2")).succ("e1").succ("e2"),










 normalStmt("e1", flow("2", "3")).succ("f"),










 normalStmt("e2", kill("2")).succ("f"),










 normalStmt("f", flow("3", readField("g"), "4")).succ("g"),










 normalStmt("g", flow("4", readField("f"), "5")).succ("h"),










 normalStmt("h", kill("5")).succ("i"));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void intraproceduralStateExplosionInline0Resolver() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void intraproceduralStateExplosion() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("x"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void nestedResolversShouldFormAGraph() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("f"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b1").succ("b2"),










 normalStmt("b1", flow("1", overwriteField("x"), "1")).succ("c"),










 normalStmt("b2", flow("1", overwriteField("y"), "1")).succ("c"),










 normalStmt("c", flow(2, "1", "1")).succ("d1").succ("d2"),










 normalStmt("d1", flow(2, "1", overwriteField("x"), "1")).succ("e"),










 normalStmt("d2", flow(2, "1", overwriteField("y"), "1")).succ("e"),










 normalStmt("e", flow(3, "1", "1")).succ("f"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void maintainCallingContextInCtrlFlowJoin() {










 helper.method("main",










 startPoints("a"),










 normalStmt("a", flow("0", "1")).succ("b1").succ("b2"),










 callSite("b1").calls("foo", flow("1", prependField("f"), "2")).retSite("c1", kill("1")),










 callSite("b2").calls("foo", flow("1", "2")).retSite("c2", kill("1")),










 normalStmt("c1", kill("3")).succ("d"),










 normalStmt("c2", flow("3", readField("f"), "4")).succ("d"),










 normalStmt("d", kill("4")).succ("e"));










 










 helper.method("foo", 










 startPoints("f"),










 normalStmt("f", flow("2", "2")).succ("g").succ("f"),










 exitStmt("g").returns(over("b1"), to("c1"), flow("2", "3")).returns(over("b2"), to("c2"), flow("2", "3")));










 










 helper.runSolver(false, "a");










 }










}














test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ 7b66dd07






......@@ -12,16 +12,20 @@ package heros.fieldsens;




















import static org.junit.Assert.assertEquals;










import static org.junit.Assert.assertTrue;










import static org.mockito.Mockito.*;





















import java.util.List;





















import heros.fieldsens.CallEdgeResolver;










import heros.fieldsens.InterestCallback;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.ReturnSiteResolver;










import static org.mockito.Matchers.any;










import static org.mockito.Matchers.argThat;










import static org.mockito.Matchers.eq;










import static org.mockito.Mockito.RETURNS_DEEP_STUBS;










import static org.mockito.Mockito.RETURNS_MOCKS;










import static org.mockito.Mockito.RETURNS_SMART_NULLS;










import static org.mockito.Mockito.doAnswer;










import static org.mockito.Mockito.mock;










import static org.mockito.Mockito.never;










import static org.mockito.Mockito.verify;










import static org.mockito.Mockito.when;










import static org.mockito.Mockito.withSettings;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;



......@@ -29,6 +33,8 @@ import heros.utilities.Statement;









import heros.utilities.TestFact;










import heros.utilities.TestMethod;





















import java.util.List;





















import org.junit.Before;










import org.junit.Test;










import org.mockito.ArgumentMatcher;



......@@ -68,7 +74,8 @@ public class ReturnSiteResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 returnSite = new Statement("returnSite");










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(analyzer, returnSite);










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite,










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -225,17 +232,17 @@ public class ReturnSiteResolverTest {









 doAnswer(new Answer() {










 @Override










 public Object answer(InvocationOnMock invocation) throws Throwable {










 ReturnSiteResolver<String, TestFact, Statement, TestMethod> resolver = (ReturnSiteResolver) invocation.getArguments()[1];










 Resolver<String, TestFact, Statement, TestMethod> resolver = (Resolver) invocation.getArguments()[1];










 resolver.resolve(getDeltaConstraint("b"), secondCallback);










 return null;










 }










 










 }).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));










 }).when(callback).interest(eq(analyzer), eq(nestedResolver));










 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(secondCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));










 verify(secondCallback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 @Test



......@@ -269,6 +276,18 @@ public class ReturnSiteResolverTest {









 verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));










 }










 










 @Test










 public void incomingZeroCallEdgeResolver() {










 Resolver<String, TestFact, Statement, TestMethod> resolver = mock(Resolver.class);










 ZeroCallEdgeResolver<String, TestFact, Statement, TestMethod> zeroResolver = mock(ZeroCallEdgeResolver.class); 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), zeroResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(resolver, never()).resolve(any(Constraint.class), any(InterestCallback.class));










 verify(callback, never()).interest(any(PerAccessPathMethodAnalyzer.class), any(Resolver.class));










 verify(callback, never()).canBeResolvedEmpty();










 }










 










 private class ReturnSiteResolverArgumentMatcher extends










 ArgumentMatcher<ReturnSiteResolver<String, TestFact, Statement, TestMethod>> {














......@@ -281,7 +300,7 @@ public class ReturnSiteResolverTest {









 @Override










 public boolean matches(Object argument) {










 ReturnSiteResolver resolver = (ReturnSiteResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getReturnSite().equals(returnSite);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getReturnSite().equals(returnSite);










 }










 }










}














test/heros/utilities/FieldSensitiveTestHelper.java








View file @ 7b66dd07






......@@ -58,9 +58,9 @@ public class FieldSensitiveTestHelper {









 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, TestMethod> stmt2method = Maps.newHashMap();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger) {










 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod> debugger) {










 this.debugger = debugger;










 }














......@@ -266,6 +266,10 @@ public class FieldSensitiveTestHelper {









 if (edge.includeInCfg && edge.succUnit.equals(stmt))










 result.add(edge.unit);










 }










 for(Call2ReturnEdge edge : call2retEdges) {










 if(edge.includeInCfg && edge.returnSite.equals(stmt))










 result.add(edge.callSite);










 }










 return result;










 }














......














test/heros/utilities/TestDebugger.java








View file @ 7b66dd07






......@@ -18,11 +18,15 @@ import com.google.common.collect.Sets;




















import heros.InterproceduralCFG;










import heros.fieldsens.Debugger;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










public class TestDebugger<Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 private JsonDocument root = new JsonDocument();










 private I icfg;










 private InterproceduralCFG<Stmt, Method> icfg;










 










 public void writeJsonDebugFile(String filename) {










 try {



......@@ -41,7 +45,7 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









	 * @see heros.alias.Debugger#setICFG(I)










	 */










 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 this.icfg = icfg;










 }














......@@ -108,4 +112,36 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 stmt(exitStmt).doc("returns").doc(returnSite.toString()).keyValue("flow", expectedFlowFunctionsToString);










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void askedToResolve(Resolver<Field, Fact, Stmt, Method> resolver, Constraint<Field> constraint) {










 










 }





















}














test/heros/utilities/TestHelper.java








View file @ 7b66dd07






......@@ -70,7 +70,7 @@ public class TestHelper {









 return result;










 }





















 @SafeVarargs










 @SuppressWarnings("unchecked")










 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt, ExpectedFlowFunction<JoinableFact>...flowFunctions) {










 return new NormalStmtBuilder(new Statement(stmt), flowFunctions);










 }



......









Prev


1


2


Next













src/heros/solver/BiDiIDESolver.java



0 â†’ 100644







View file @ 7b66dd07













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.EdgeFunctions;










import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IDETabulationProblem;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.JoinLattice;










import heros.solver.IFDSSolver.BinaryDomain;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import com.google.common.collect.Maps;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 * 










 * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * reportable paths.  










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * 				reportable paths.










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIDESolver<N, D, M, V, I extends InterproceduralCFG<N, M>> {





















 private final IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> forwardProblem;










 private final IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 protected SingleDirectionSolver fwSolver;










 protected SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIDESolver} with the associated forward and backward problem.










	 */










 public BiDiIDESolver(IDETabulationProblem<N,D,M,V,I> forwardProblem, IDETabulationProblem<N,D,M,V,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() { 










 fwSolver = createSingleDirectionSolver(forwardProblem, "FW");










 bwSolver = createSingleDirectionSolver(backwardProblem, "BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 //start the bw solver










 bwSolver.submitInitialSeeds();










 










 //start the fw solver and block until both solvers have completed










 //(note that they both share the same executor, see below)










 //note to self: the order of the two should not matter










 fwSolver.solve();










 }










 










 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N retSiteC;










 private AbstractionWithSourceStmt targetVal;










 private EdgeFunction<V> edgeFunction;










 private N relatedCallSite;










 










 public PausedEdge(N retSiteC, AbstractionWithSourceStmt targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) {










 this.retSiteC = retSiteC;










 this.targetVal = targetVal;










 this.edgeFunction = edgeFunction;










 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends IDESolver<N,AbstractionWithSourceStmt,M,V,I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void propagateUnbalancedReturnFlow(N retSiteC, AbstractionWithSourceStmt targetVal,










 EdgeFunction<V> edgeFunction, N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge edge = new PausedEdge(retSiteC, targetVal, edgeFunction, relatedCallSite);










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 }










 










 @Override










 protected void propagate(AbstractionWithSourceStmt sourceVal, N target, AbstractionWithSourceStmt targetVal, EdgeFunction<V> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.retSiteC, edge.targetVal, edge.edgeFunction, edge.relatedCallSite);










 }










 }










 }










 }










 










 /* we share the same executor; this will cause the call to solve() above to block










		 * until both solvers have finished










		 */ 










 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 public D getAbstraction() {










 return abstraction;










 }










 










 public N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }










 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private class AugmentedTabulationProblem implements IDETabulationProblem<N, AbstractionWithSourceStmt,M,V,I> {





















 private final IDETabulationProblem<N,D,M,V,I> delegate;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IDETabulationProblem<N, D, M,V, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 Set<D> origTargets = originalFunctions.getCallFlowFunction(callStmt, destinationMethod).computeTargets(










 source.getAbstraction());





















 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for (D d : origTargets) {










 res.add(new AbstractionWithSourceStmt(d, null));










 }










 return res;










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);










 










 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }





















 @Override










 public EdgeFunctions<N, AbstractionWithSourceStmt, M, V> edgeFunctions() {










 return new EdgeFunctions<N, AbstractionWithSourceStmt, M, V>() {





















 @Override










 public EdgeFunction<V> getNormalEdgeFunction(N curr, AbstractionWithSourceStmt currNode, N succ,










 AbstractionWithSourceStmt succNode) {










 return delegate.edgeFunctions().getNormalEdgeFunction(curr, currNode.getAbstraction(), succ, succNode.getAbstraction());










 }





















 @Override










 public EdgeFunction<V> getCallEdgeFunction(N callStmt,AbstractionWithSourceStmt srcNode,










 M destinationMethod, AbstractionWithSourceStmt destNode) {










 return delegate.edgeFunctions().getCallEdgeFunction(callStmt, srcNode.getAbstraction(), destinationMethod, destNode.getAbstraction());










 }





















 @Override










 public EdgeFunction<V> getReturnEdgeFunction(N callSite, M calleeMethod, N exitStmt,










 AbstractionWithSourceStmt exitNode, N returnSite,










 AbstractionWithSourceStmt retNode) {










 return delegate.edgeFunctions().getReturnEdgeFunction(callSite, calleeMethod, exitStmt, exitNode.getAbstraction(), returnSite, retNode.getAbstraction());










 }





















 @Override










 public EdgeFunction<V> getCallToReturnEdgeFunction(N callSite, AbstractionWithSourceStmt callNode,










 N returnSite, AbstractionWithSourceStmt returnSideNode) {










 return delegate.edgeFunctions().getCallToReturnEdgeFunction(callSite, callNode.getAbstraction(), returnSite, returnSideNode.getAbstraction());










 }










 };










 }





















 @Override










 public JoinLattice<V> joinLattice() {










 return delegate.joinLattice();










 }





















 @Override










 public EdgeFunction<V> allTopFunction() {










 return delegate.allTopFunction();










 }





















 }










 










}












src/heros/solver/BiDiIDESolver.java



0 â†’ 100644







View file @ 7b66dd07








src/heros/solver/BiDiIDESolver.java



0 â†’ 100644









View file @ 7b66dd07


7b66dd07










/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.EdgeFunctions;










import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IDETabulationProblem;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.JoinLattice;










import heros.solver.IFDSSolver.BinaryDomain;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import com.google.common.collect.Maps;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 * 










 * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * reportable paths.  










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * 				reportable paths.










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIDESolver<N, D, M, V, I extends InterproceduralCFG<N, M>> {





















 private final IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> forwardProblem;










 private final IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 protected SingleDirectionSolver fwSolver;










 protected SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIDESolver} with the associated forward and backward problem.










	 */










 public BiDiIDESolver(IDETabulationProblem<N,D,M,V,I> forwardProblem, IDETabulationProblem<N,D,M,V,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() { 










 fwSolver = createSingleDirectionSolver(forwardProblem, "FW");










 bwSolver = createSingleDirectionSolver(backwardProblem, "BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 //start the bw solver










 bwSolver.submitInitialSeeds();










 










 //start the fw solver and block until both solvers have completed










 //(note that they both share the same executor, see below)










 //note to self: the order of the two should not matter










 fwSolver.solve();










 }










 










 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N retSiteC;










 private AbstractionWithSourceStmt targetVal;










 private EdgeFunction<V> edgeFunction;










 private N relatedCallSite;










 










 public PausedEdge(N retSiteC, AbstractionWithSourceStmt targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) {










 this.retSiteC = retSiteC;










 this.targetVal = targetVal;










 this.edgeFunction = edgeFunction;










 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends IDESolver<N,AbstractionWithSourceStmt,M,V,I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void propagateUnbalancedReturnFlow(N retSiteC, AbstractionWithSourceStmt targetVal,










 EdgeFunction<V> edgeFunction, N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge edge = new PausedEdge(retSiteC, targetVal, edgeFunction, relatedCallSite);










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 }










 










 @Override










 protected void propagate(AbstractionWithSourceStmt sourceVal, N target, AbstractionWithSourceStmt targetVal, EdgeFunction<V> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.retSiteC, edge.targetVal, edge.edgeFunction, edge.relatedCallSite);










 }










 }










 }










 }










 










 /* we share the same executor; this will cause the call to solve() above to block










		 * until both solvers have finished










		 */ 










 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 public D getAbstraction() {










 return abstraction;










 }










 










 public N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }










 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private class AugmentedTabulationProblem implements IDETabulationProblem<N, AbstractionWithSourceStmt,M,V,I> {





















 private final IDETabulationProblem<N,D,M,V,I> delegate;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IDETabulationProblem<N, D, M,V, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 Set<D> origTargets = originalFunctions.getCallFlowFunction(callStmt, destinationMethod).computeTargets(










 source.getAbstraction());





















 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for (D d : origTargets) {










 res.add(new AbstractionWithSourceStmt(d, null));










 }










 return res;










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);










 










 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }





















 @Override










 public EdgeFunctions<N, AbstractionWithSourceStmt, M, V> edgeFunctions() {










 return new EdgeFunctions<N, AbstractionWithSourceStmt, M, V>() {





















 @Override










 public EdgeFunction<V> getNormalEdgeFunction(N curr, AbstractionWithSourceStmt currNode, N succ,










 AbstractionWithSourceStmt succNode) {










 return delegate.edgeFunctions().getNormalEdgeFunction(curr, currNode.getAbstraction(), succ, succNode.getAbstraction());










 }





















 @Override










 public EdgeFunction<V> getCallEdgeFunction(N callStmt,AbstractionWithSourceStmt srcNode,










 M destinationMethod, AbstractionWithSourceStmt destNode) {










 return delegate.edgeFunctions().getCallEdgeFunction(callStmt, srcNode.getAbstraction(), destinationMethod, destNode.getAbstraction());










 }





















 @Override










 public EdgeFunction<V> getReturnEdgeFunction(N callSite, M calleeMethod, N exitStmt,










 AbstractionWithSourceStmt exitNode, N returnSite,










 AbstractionWithSourceStmt retNode) {










 return delegate.edgeFunctions().getReturnEdgeFunction(callSite, calleeMethod, exitStmt, exitNode.getAbstraction(), returnSite, retNode.getAbstraction());










 }





















 @Override










 public EdgeFunction<V> getCallToReturnEdgeFunction(N callSite, AbstractionWithSourceStmt callNode,










 N returnSite, AbstractionWithSourceStmt returnSideNode) {










 return delegate.edgeFunctions().getCallToReturnEdgeFunction(callSite, callNode.getAbstraction(), returnSite, returnSideNode.getAbstraction());










 }










 };










 }





















 @Override










 public JoinLattice<V> joinLattice() {










 return delegate.joinLattice();










 }





















 @Override










 public EdgeFunction<V> allTopFunction() {










 return delegate.allTopFunction();










 }





















 }










 










}













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.EdgeFunctions;










import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IDETabulationProblem;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.JoinLattice;










import heros.solver.IFDSSolver.BinaryDomain;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















import com.google.common.collect.Maps;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 * 










 * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * reportable paths.  










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form










 * 				reportable paths.










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIDESolver<N, D, M, V, I extends InterproceduralCFG<N, M>> {





















 private final IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> forwardProblem;










 private final IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 protected SingleDirectionSolver fwSolver;










 protected SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIDESolver} with the associated forward and backward problem.










	 */










 public BiDiIDESolver(IDETabulationProblem<N,D,M,V,I> forwardProblem, IDETabulationProblem<N,D,M,V,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() { 










 fwSolver = createSingleDirectionSolver(forwardProblem, "FW");










 bwSolver = createSingleDirectionSolver(backwardProblem, "BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 //start the bw solver










 bwSolver.submitInitialSeeds();










 










 //start the fw solver and block until both solvers have completed










 //(note that they both share the same executor, see below)










 //note to self: the order of the two should not matter










 fwSolver.solve();










 }










 










 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N retSiteC;










 private AbstractionWithSourceStmt targetVal;










 private EdgeFunction<V> edgeFunction;










 private N relatedCallSite;










 










 public PausedEdge(N retSiteC, AbstractionWithSourceStmt targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) {










 this.retSiteC = retSiteC;










 this.targetVal = targetVal;










 this.edgeFunction = edgeFunction;










 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends IDESolver<N,AbstractionWithSourceStmt,M,V,I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void propagateUnbalancedReturnFlow(N retSiteC, AbstractionWithSourceStmt targetVal,










 EdgeFunction<V> edgeFunction, N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge edge = new PausedEdge(retSiteC, targetVal, edgeFunction, relatedCallSite);










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 }










 










 @Override










 protected void propagate(AbstractionWithSourceStmt sourceVal, N target, AbstractionWithSourceStmt targetVal, EdgeFunction<V> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.retSiteC, edge.targetVal, edge.edgeFunction, edge.relatedCallSite);










 }










 }










 }










 }










 










 /* we share the same executor; this will cause the call to solve() above to block










		 * until both solvers have finished










		 */ 










 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 public D getAbstraction() {










 return abstraction;










 }










 










 public N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }










 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private class AugmentedTabulationProblem implements IDETabulationProblem<N, AbstractionWithSourceStmt,M,V,I> {





















 private final IDETabulationProblem<N,D,M,V,I> delegate;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IDETabulationProblem<N, D, M,V, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 Set<D> origTargets = originalFunctions.getCallFlowFunction(callStmt, destinationMethod).computeTargets(










 source.getAbstraction());





















 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for (D d : origTargets) {










 res.add(new AbstractionWithSourceStmt(d, null));










 }










 return res;










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);










 










 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }





















 @Override










 public EdgeFunctions<N, AbstractionWithSourceStmt, M, V> edgeFunctions() {










 return new EdgeFunctions<N, AbstractionWithSourceStmt, M, V>() {





















 @Override










 public EdgeFunction<V> getNormalEdgeFunction(N curr, AbstractionWithSourceStmt currNode, N succ,










 AbstractionWithSourceStmt succNode) {










 return delegate.edgeFunctions().getNormalEdgeFunction(curr, currNode.getAbstraction(), succ, succNode.getAbstraction());










 }





















 @Override










 public EdgeFunction<V> getCallEdgeFunction(N callStmt,AbstractionWithSourceStmt srcNode,










 M destinationMethod, AbstractionWithSourceStmt destNode) {










 return delegate.edgeFunctions().getCallEdgeFunction(callStmt, srcNode.getAbstraction(), destinationMethod, destNode.getAbstraction());










 }





















 @Override










 public EdgeFunction<V> getReturnEdgeFunction(N callSite, M calleeMethod, N exitStmt,










 AbstractionWithSourceStmt exitNode, N returnSite,










 AbstractionWithSourceStmt retNode) {










 return delegate.edgeFunctions().getReturnEdgeFunction(callSite, calleeMethod, exitStmt, exitNode.getAbstraction(), returnSite, retNode.getAbstraction());










 }





















 @Override










 public EdgeFunction<V> getCallToReturnEdgeFunction(N callSite, AbstractionWithSourceStmt callNode,










 N returnSite, AbstractionWithSourceStmt returnSideNode) {










 return delegate.edgeFunctions().getCallToReturnEdgeFunction(callSite, callNode.getAbstraction(), returnSite, returnSideNode.getAbstraction());










 }










 };










 }





















 @Override










 public JoinLattice<V> joinLattice() {










 return delegate.joinLattice();










 }





















 @Override










 public EdgeFunction<V> allTopFunction() {










 return delegate.allTopFunction();










 }





















 }










 










}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2012 Eric Bodden. * Copyright (c) 2012 Eric Bodden. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Eric Bodden - initial API and implementation *     Eric Bodden - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.solver;packageheros.solver;import heros.EdgeFunction;importheros.EdgeFunction;import heros.EdgeFunctions;importheros.EdgeFunctions;import heros.FlowFunction;importheros.FlowFunction;import heros.FlowFunctions;importheros.FlowFunctions;import heros.IDETabulationProblem;importheros.IDETabulationProblem;import heros.IFDSTabulationProblem;importheros.IFDSTabulationProblem;import heros.InterproceduralCFG;importheros.InterproceduralCFG;import heros.JoinLattice;importheros.JoinLattice;import heros.solver.IFDSSolver.BinaryDomain;importheros.solver.IFDSSolver.BinaryDomain;import java.util.Collections;importjava.util.Collections;import java.util.HashMap;importjava.util.HashMap;import java.util.HashSet;importjava.util.HashSet;import java.util.Map;importjava.util.Map;import java.util.Map.Entry;importjava.util.Map.Entry;import java.util.Set;importjava.util.Set;import java.util.concurrent.ConcurrentMap;importjava.util.concurrent.ConcurrentMap;import java.util.concurrent.LinkedBlockingQueue;importjava.util.concurrent.LinkedBlockingQueue;import java.util.concurrent.TimeUnit;importjava.util.concurrent.TimeUnit;import com.google.common.collect.Maps;importcom.google.common.collect.Maps;/**/** * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions. * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions. *  *  * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}. * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}. * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever). * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever). * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their * computed paths are realizable at the same time. * computed paths are realizable at the same time. *  *  * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form * This solver requires data-flow abstractions that implement the {@link LinkedNode} interface such that data-flow values can be linked to form * reportable paths.   * reportable paths.   * * * @param <N> see {@link IFDSSolver} * @param <N> see {@link IFDSSolver} * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form * @param <D> A data-flow abstraction that must implement the {@link LinkedNode} interface such that data-flow values can be linked to form * 				reportable paths. * 				reportable paths. * @param <M> see {@link IFDSSolver} * @param <M> see {@link IFDSSolver} * @param <I> see {@link IFDSSolver} * @param <I> see {@link IFDSSolver} */ */public class BiDiIDESolver<N, D, M, V, I extends InterproceduralCFG<N, M>> {publicclassBiDiIDESolver<N,D,M,V,IextendsInterproceduralCFG<N,M>>{ private final IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> forwardProblem;privatefinalIDETabulationProblem<N,AbstractionWithSourceStmt,M,V,I>forwardProblem; private final IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> backwardProblem;privatefinalIDETabulationProblem<N,AbstractionWithSourceStmt,M,V,I>backwardProblem; private final CountingThreadPoolExecutor sharedExecutor;privatefinalCountingThreadPoolExecutorsharedExecutor; protected SingleDirectionSolver fwSolver;protectedSingleDirectionSolverfwSolver; protected SingleDirectionSolver bwSolver;protectedSingleDirectionSolverbwSolver; /**/**	 * Instantiates a {@link BiDiIDESolver} with the associated forward and backward problem.	 * Instantiates a {@link BiDiIDESolver} with the associated forward and backward problem.	 */	 */ public BiDiIDESolver(IDETabulationProblem<N,D,M,V,I> forwardProblem, IDETabulationProblem<N,D,M,V,I> backwardProblem) {publicBiDiIDESolver(IDETabulationProblem<N,D,M,V,I>forwardProblem,IDETabulationProblem<N,D,M,V,I>backwardProblem){ if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {if(!forwardProblem.followReturnsPastSeeds()||!backwardProblem.followReturnsPastSeeds()){ throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); thrownewIllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); }} this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);this.forwardProblem=newAugmentedTabulationProblem(forwardProblem); this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);this.backwardProblem=newAugmentedTabulationProblem(backwardProblem); this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());this.sharedExecutor=newCountingThreadPoolExecutor(1,Math.max(1,forwardProblem.numThreads()),30,TimeUnit.SECONDS,newLinkedBlockingQueue<Runnable>()); }}  public void solve() { publicvoidsolve(){ fwSolver = createSingleDirectionSolver(forwardProblem, "FW");fwSolver=createSingleDirectionSolver(forwardProblem,"FW"); bwSolver = createSingleDirectionSolver(backwardProblem, "BW");bwSolver=createSingleDirectionSolver(backwardProblem,"BW"); fwSolver.otherSolver = bwSolver;fwSolver.otherSolver=bwSolver; bwSolver.otherSolver = fwSolver;bwSolver.otherSolver=fwSolver;  //start the bw solver//start the bw solver bwSolver.submitInitialSeeds();bwSolver.submitInitialSeeds();  //start the fw solver and block until both solvers have completed//start the fw solver and block until both solvers have completed //(note that they both share the same executor, see below)//(note that they both share the same executor, see below) //note to self: the order of the two should not matter//note to self: the order of the two should not matter fwSolver.solve();fwSolver.solve(); }}  /**/**	 * Creates a solver to be used for each single analysis direction.	 * Creates a solver to be used for each single analysis direction.	 */	 */ protected SingleDirectionSolver createSingleDirectionSolver(IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> problem, String debugName) {protectedSingleDirectionSolvercreateSingleDirectionSolver(IDETabulationProblem<N,AbstractionWithSourceStmt,M,V,I>problem,StringdebugName){ return new SingleDirectionSolver(problem, debugName);returnnewSingleDirectionSolver(problem,debugName); }}  private class PausedEdge {privateclassPausedEdge{ private N retSiteC;privateNretSiteC; private AbstractionWithSourceStmt targetVal;privateAbstractionWithSourceStmttargetVal; private EdgeFunction<V> edgeFunction;privateEdgeFunction<V>edgeFunction; private N relatedCallSite;privateNrelatedCallSite;  public PausedEdge(N retSiteC, AbstractionWithSourceStmt targetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) {publicPausedEdge(NretSiteC,AbstractionWithSourceStmttargetVal,EdgeFunction<V>edgeFunction,NrelatedCallSite){ this.retSiteC = retSiteC;this.retSiteC=retSiteC; this.targetVal = targetVal;this.targetVal=targetVal; this.edgeFunction = edgeFunction;this.edgeFunction=edgeFunction; this.relatedCallSite = relatedCallSite;this.relatedCallSite=relatedCallSite; }} }} /**/**	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.	 *	 *	 */	 */ private static class LeakKey<N> {privatestaticclassLeakKey<N>{ private N sourceStmt;privateNsourceStmt; private N relatedCallSite;privateNrelatedCallSite;  public LeakKey(N sourceStmt, N relatedCallSite) {publicLeakKey(NsourceStmt,NrelatedCallSite){ this.sourceStmt = sourceStmt;this.sourceStmt=sourceStmt; this.relatedCallSite = relatedCallSite;this.relatedCallSite=relatedCallSite; }}  @Override@Override public int hashCode() {publicinthashCode(){ final int prime = 31;finalintprime=31; int result = 1;intresult=1; result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());result=prime*result+((relatedCallSite==null)?0:relatedCallSite.hashCode()); result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());result=prime*result+((sourceStmt==null)?0:sourceStmt.hashCode()); return result;returnresult; }}  @SuppressWarnings("rawtypes")@SuppressWarnings("rawtypes") @Override@Override public boolean equals(Object obj) {publicbooleanequals(Objectobj){ if (this == obj)if(this==obj) return true;returntrue; if (obj == null)if(obj==null) return false;returnfalse; if (!(obj instanceof LeakKey))if(!(objinstanceofLeakKey)) return false;returnfalse; LeakKey other = (LeakKey) obj;LeakKeyother=(LeakKey)obj; if (relatedCallSite == null) {if(relatedCallSite==null){ if (other.relatedCallSite != null)if(other.relatedCallSite!=null) return false;returnfalse; } else if (!relatedCallSite.equals(other.relatedCallSite))}elseif(!relatedCallSite.equals(other.relatedCallSite)) return false;returnfalse; if (sourceStmt == null) {if(sourceStmt==null){ if (other.sourceStmt != null)if(other.sourceStmt!=null) return false;returnfalse; } else if (!sourceStmt.equals(other.sourceStmt))}elseif(!sourceStmt.equals(other.sourceStmt)) return false;returnfalse; return true;returntrue; }} }}  /**/**	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.	 */	 */ protected class SingleDirectionSolver extends IDESolver<N,AbstractionWithSourceStmt,M,V,I> {protectedclassSingleDirectionSolverextendsIDESolver<N,AbstractionWithSourceStmt,M,V,I>{ private final String debugName;privatefinalStringdebugName; private SingleDirectionSolver otherSolver;privateSingleDirectionSolverotherSolver; private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());privateSet<LeakKey<N>>leakedSources=Collections.newSetFromMap(Maps.<LeakKey<N>,Boolean>newConcurrentMap()); private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =privateConcurrentMap<LeakKey<N>,Set<PausedEdge>>pausedPathEdges= Maps.newConcurrentMap();Maps.newConcurrentMap(); public SingleDirectionSolver(IDETabulationProblem<N, AbstractionWithSourceStmt, M,V, I> ifdsProblem, String debugName) {publicSingleDirectionSolver(IDETabulationProblem<N,AbstractionWithSourceStmt,M,V,I>ifdsProblem,StringdebugName){ super(ifdsProblem);super(ifdsProblem); this.debugName = debugName;this.debugName=debugName; }}  @Override@Override protected void propagateUnbalancedReturnFlow(N retSiteC, AbstractionWithSourceStmt targetVal,protectedvoidpropagateUnbalancedReturnFlow(NretSiteC,AbstractionWithSourceStmttargetVal, EdgeFunction<V> edgeFunction, N relatedCallSite) {EdgeFunction<V>edgeFunction,NrelatedCallSite){ //if an edge is originating from ZERO then to us this signifies an unbalanced return edge//if an edge is originating from ZERO then to us this signifies an unbalanced return edge N sourceStmt = targetVal.getSourceStmt();NsourceStmt=targetVal.getSourceStmt(); //we mark the fact that this solver would like to "leak" this edge to the caller//we mark the fact that this solver would like to "leak" this edge to the caller LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);LeakKey<N>leakKey=newLeakKey<N>(sourceStmt,relatedCallSite); leakedSources.add(leakKey);leakedSources.add(leakKey); if(otherSolver.hasLeaked(leakKey)) {if(otherSolver.hasLeaked(leakKey)){ //if the other solver has leaked already then unpause its edges and continue//if the other solver has leaked already then unpause its edges and continue otherSolver.unpausePathEdgesForSource(leakKey);otherSolver.unpausePathEdgesForSource(leakKey); super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);super.propagateUnbalancedReturnFlow(retSiteC,targetVal,edgeFunction,relatedCallSite); } else {}else{ //otherwise we pause this solver's edge and don't continue//otherwise we pause this solver's edge and don't continue Set<PausedEdge> newPausedEdges = Set<PausedEdge>newPausedEdges= Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); Collections.newSetFromMap(Maps.<PausedEdge,Boolean>newConcurrentMap()); Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);Set<PausedEdge>existingPausedEdges=pausedPathEdges.putIfAbsent(leakKey,newPausedEdges); if(existingPausedEdges==null)if(existingPausedEdges==null) existingPausedEdges=newPausedEdges;existingPausedEdges=newPausedEdges;  PausedEdge edge = new PausedEdge(retSiteC, targetVal, edgeFunction, relatedCallSite);PausedEdgeedge=newPausedEdge(retSiteC,targetVal,edgeFunction,relatedCallSite); existingPausedEdges.add(edge);existingPausedEdges.add(edge);  //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused//if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(edge)) {if(otherSolver.hasLeaked(leakKey)&&existingPausedEdges.remove(edge)){ super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);super.propagateUnbalancedReturnFlow(retSiteC,targetVal,edgeFunction,relatedCallSite); }}  logger.debug(" ++ PAUSE {}: {}", debugName, edge);logger.debug(" ++ PAUSE {}: {}",debugName,edge); }} }}  @Override@Override protected void propagate(AbstractionWithSourceStmt sourceVal, N target, AbstractionWithSourceStmt targetVal, EdgeFunction<V> f, N relatedCallSite, boolean isUnbalancedReturn) {protectedvoidpropagate(AbstractionWithSourceStmtsourceVal,Ntarget,AbstractionWithSourceStmttargetVal,EdgeFunction<V>f,NrelatedCallSite,booleanisUnbalancedReturn){ //the follwing branch will be taken only on an unbalanced return//the follwing branch will be taken only on an unbalanced return if(isUnbalancedReturn) {if(isUnbalancedReturn){ assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";assertsourceVal.getSourceStmt()==null:"source value should have no statement attached";  //attach target statement as new "source" statement to track//attach target statement as new "source" statement to track targetVal = new AbstractionWithSourceStmt(targetVal.getAbstraction(), relatedCallSite);targetVal=newAbstractionWithSourceStmt(targetVal.getAbstraction(),relatedCallSite);  super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);super.propagate(sourceVal,target,targetVal,f,relatedCallSite,isUnbalancedReturn); } else { }else{ super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);super.propagate(sourceVal,target,targetVal,f,relatedCallSite,isUnbalancedReturn); }} }}  @Override@Override protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {protectedAbstractionWithSourceStmtrestoreContextOnReturnedFact(AbstractionWithSourceStmtd4,AbstractionWithSourceStmtd5){ return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());returnnewAbstractionWithSourceStmt(d5.getAbstraction(),d4.getSourceStmt()); }}  /**/**		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source		 * to its caller.		 * to its caller.		 */		 */ private boolean hasLeaked(LeakKey<N> leakKey) {privatebooleanhasLeaked(LeakKey<N>leakKey){ return leakedSources.contains(leakKey);returnleakedSources.contains(leakKey); }}  /**/**		 * Unpauses all edges associated with the given source statement.		 * Unpauses all edges associated with the given source statement.		 */		 */ private void unpausePathEdgesForSource(LeakKey<N> leakKey) {privatevoidunpausePathEdgesForSource(LeakKey<N>leakKey){ Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);Set<PausedEdge>pausedEdges=pausedPathEdges.get(leakKey); if(pausedEdges!=null) {if(pausedEdges!=null){ for(PausedEdge edge: pausedEdges) {for(PausedEdgeedge:pausedEdges){ if(pausedEdges.remove(edge)) {if(pausedEdges.remove(edge)){ if(DEBUG)if(DEBUG) logger.debug("-- UNPAUSE {}: {}",debugName, edge);logger.debug("-- UNPAUSE {}: {}",debugName,edge); super.propagateUnbalancedReturnFlow(edge.retSiteC, edge.targetVal, edge.edgeFunction, edge.relatedCallSite);super.propagateUnbalancedReturnFlow(edge.retSiteC,edge.targetVal,edge.edgeFunction,edge.relatedCallSite); }} }} }} }}  /* we share the same executor; this will cause the call to solve() above to block/* we share the same executor; this will cause the call to solve() above to block		 * until both solvers have finished		 * until both solvers have finished		 */ 		 */ protected CountingThreadPoolExecutor getExecutor() {protectedCountingThreadPoolExecutorgetExecutor(){ return sharedExecutor;returnsharedExecutor; }}  protected String getDebugName() {protectedStringgetDebugName(){ return debugName;returndebugName; }} }} /**/**	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the	 * abstraction the source statement from which this fact originated. 	 * abstraction the source statement from which this fact originated. 	 */	 */ public class AbstractionWithSourceStmt {publicclassAbstractionWithSourceStmt{ protected final D abstraction;protectedfinalDabstraction; protected final N source;protectedfinalNsource;  private AbstractionWithSourceStmt(D abstraction, N source) {privateAbstractionWithSourceStmt(Dabstraction,Nsource){ this.abstraction = abstraction;this.abstraction=abstraction; this.source = source;this.source=source; }} public D getAbstraction() {publicDgetAbstraction(){ return abstraction;returnabstraction; }}  public N getSourceStmt() {publicNgetSourceStmt(){ return source;returnsource; } }  @Override@Override public String toString() {publicStringtoString(){ if(source!=null)if(source!=null) return ""+abstraction+"-@-"+source+"";return""+abstraction+"-@-"+source+""; elseelse return abstraction.toString();returnabstraction.toString(); }} @Override@Override public int hashCode() {publicinthashCode(){ final int prime = 31;finalintprime=31; int result = 1;intresult=1; result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());result=prime*result+((abstraction==null)?0:abstraction.hashCode()); result = prime * result + ((source == null) ? 0 : source.hashCode());result=prime*result+((source==null)?0:source.hashCode()); return result;returnresult; }} @Override@Override public boolean equals(Object obj) {publicbooleanequals(Objectobj){ if (this == obj)if(this==obj) return true;returntrue; if (obj == null)if(obj==null) return false;returnfalse; if (getClass() != obj.getClass())if(getClass()!=obj.getClass()) return false;returnfalse; @SuppressWarnings("unchecked")@SuppressWarnings("unchecked") AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;AbstractionWithSourceStmtother=(AbstractionWithSourceStmt)obj; if (abstraction == null) {if(abstraction==null){ if (other.abstraction != null)if(other.abstraction!=null) return false;returnfalse; } else if (!abstraction.equals(other.abstraction))}elseif(!abstraction.equals(other.abstraction)) return false;returnfalse; if (source == null) {if(source==null){ if (other.source != null)if(other.source!=null) return false;returnfalse; } else if (!source.equals(other.source))}elseif(!source.equals(other.source)) return false;returnfalse; return true;returntrue; }} }}  /**/**	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.	 */	 */ private class AugmentedTabulationProblem implements IDETabulationProblem<N, AbstractionWithSourceStmt,M,V,I> {privateclassAugmentedTabulationProblemimplementsIDETabulationProblem<N,AbstractionWithSourceStmt,M,V,I>{ private final IDETabulationProblem<N,D,M,V,I> delegate;privatefinalIDETabulationProblem<N,D,M,V,I>delegate; private final AbstractionWithSourceStmt ZERO;privatefinalAbstractionWithSourceStmtZERO; private final FlowFunctions<N, D, M> originalFunctions;privatefinalFlowFunctions<N,D,M>originalFunctions;  public AugmentedTabulationProblem(IDETabulationProblem<N, D, M,V, I> delegate) {publicAugmentedTabulationProblem(IDETabulationProblem<N,D,M,V,I>delegate){ this.delegate = delegate;this.delegate=delegate; originalFunctions = this.delegate.flowFunctions();originalFunctions=this.delegate.flowFunctions(); ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);ZERO=newAbstractionWithSourceStmt(delegate.zeroValue(),null); }} @Override@Override public FlowFunctions<N, AbstractionWithSourceStmt, M> flowFunctions() {publicFlowFunctions<N,AbstractionWithSourceStmt,M>flowFunctions(){ return new FlowFunctions<N, AbstractionWithSourceStmt, M>() {returnnewFlowFunctions<N,AbstractionWithSourceStmt,M>(){ @Override@Override public FlowFunction<AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {publicFlowFunction<AbstractionWithSourceStmt>getNormalFlowFunction(finalNcurr,finalNsucc){ return new FlowFunction<AbstractionWithSourceStmt>() {returnnewFlowFunction<AbstractionWithSourceStmt>(){ @Override@Override public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {publicSet<AbstractionWithSourceStmt>computeTargets(AbstractionWithSourceStmtsource){ return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));returncopyOverSourceStmts(source,originalFunctions.getNormalFlowFunction(curr,succ)); }} };}; }} @Override@Override public FlowFunction<AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {publicFlowFunction<AbstractionWithSourceStmt>getCallFlowFunction(finalNcallStmt,finalMdestinationMethod){ return new FlowFunction<AbstractionWithSourceStmt>() {returnnewFlowFunction<AbstractionWithSourceStmt>(){ @Override@Override public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {publicSet<AbstractionWithSourceStmt>computeTargets(AbstractionWithSourceStmtsource){ Set<D> origTargets = originalFunctions.getCallFlowFunction(callStmt, destinationMethod).computeTargets(Set<D>origTargets=originalFunctions.getCallFlowFunction(callStmt,destinationMethod).computeTargets( source.getAbstraction());source.getAbstraction()); Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();Set<AbstractionWithSourceStmt>res=newHashSet<AbstractionWithSourceStmt>(); for (D d : origTargets) {for(Dd:origTargets){ res.add(new AbstractionWithSourceStmt(d, null));res.add(newAbstractionWithSourceStmt(d,null)); }} return res;returnres; }} };}; }} @Override@Override public FlowFunction<AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {publicFlowFunction<AbstractionWithSourceStmt>getReturnFlowFunction(finalNcallSite,finalMcalleeMethod,finalNexitStmt,finalNreturnSite){ return new FlowFunction<AbstractionWithSourceStmt>() {returnnewFlowFunction<AbstractionWithSourceStmt>(){ @Override@Override public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {publicSet<AbstractionWithSourceStmt>computeTargets(AbstractionWithSourceStmtsource){ return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));returncopyOverSourceStmts(source,originalFunctions.getReturnFlowFunction(callSite,calleeMethod,exitStmt,returnSite)); }} };}; }} @Override@Override public FlowFunction<AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {publicFlowFunction<AbstractionWithSourceStmt>getCallToReturnFlowFunction(finalNcallSite,finalNreturnSite){ return new FlowFunction<AbstractionWithSourceStmt>() {returnnewFlowFunction<AbstractionWithSourceStmt>(){ @Override@Override public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {publicSet<AbstractionWithSourceStmt>computeTargets(AbstractionWithSourceStmtsource){ return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));returncopyOverSourceStmts(source,originalFunctions.getCallToReturnFlowFunction(callSite,returnSite)); }} };}; }}  private Set<AbstractionWithSourceStmt> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<D> originalFunction) {privateSet<AbstractionWithSourceStmt>copyOverSourceStmts(AbstractionWithSourceStmtsource,FlowFunction<D>originalFunction){ D originalAbstraction = source.getAbstraction();DoriginalAbstraction=source.getAbstraction(); Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);Set<D>origTargets=originalFunction.computeTargets(originalAbstraction);  Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();Set<AbstractionWithSourceStmt>res=newHashSet<AbstractionWithSourceStmt>(); for(D d: origTargets) {for(Dd:origTargets){ res.add(new AbstractionWithSourceStmt(d,source.getSourceStmt()));res.add(newAbstractionWithSourceStmt(d,source.getSourceStmt())); }} return res;returnres; }} };}; }}  //delegate methods follow//delegate methods follow public boolean followReturnsPastSeeds() {publicbooleanfollowReturnsPastSeeds(){ return delegate.followReturnsPastSeeds();returndelegate.followReturnsPastSeeds(); }} public boolean autoAddZero() {publicbooleanautoAddZero(){ return delegate.autoAddZero();returndelegate.autoAddZero(); }} public int numThreads() {publicintnumThreads(){ return delegate.numThreads();returndelegate.numThreads(); }} public boolean computeValues() {publicbooleancomputeValues(){ return delegate.computeValues();returndelegate.computeValues(); }} public I interproceduralCFG() {publicIinterproceduralCFG(){ return delegate.interproceduralCFG();returndelegate.interproceduralCFG(); }} /* attaches the original seed statement to the abstraction/* attaches the original seed statement to the abstraction		 */		 */ public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {publicMap<N,Set<AbstractionWithSourceStmt>>initialSeeds(){ Map<N, Set<D>> originalSeeds = delegate.initialSeeds();Map<N,Set<D>>originalSeeds=delegate.initialSeeds(); Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();Map<N,Set<AbstractionWithSourceStmt>>res=newHashMap<N,Set<AbstractionWithSourceStmt>>(); for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {for(Entry<N,Set<D>>entry:originalSeeds.entrySet()){ N stmt = entry.getKey();Nstmt=entry.getKey(); Set<D> seeds = entry.getValue();Set<D>seeds=entry.getValue(); Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();Set<AbstractionWithSourceStmt>resSet=newHashSet<AbstractionWithSourceStmt>(); for (D d : seeds) {for(Dd:seeds){ //attach source stmt to abstraction//attach source stmt to abstraction resSet.add(new AbstractionWithSourceStmt(d, stmt));resSet.add(newAbstractionWithSourceStmt(d,stmt)); }} res.put(stmt, resSet);res.put(stmt,resSet); } } return res;returnres; }} public AbstractionWithSourceStmt zeroValue() {publicAbstractionWithSourceStmtzeroValue(){ return ZERO;returnZERO; }} @Override@Override public EdgeFunctions<N, AbstractionWithSourceStmt, M, V> edgeFunctions() {publicEdgeFunctions<N,AbstractionWithSourceStmt,M,V>edgeFunctions(){ return new EdgeFunctions<N, AbstractionWithSourceStmt, M, V>() {returnnewEdgeFunctions<N,AbstractionWithSourceStmt,M,V>(){ @Override@Override public EdgeFunction<V> getNormalEdgeFunction(N curr, AbstractionWithSourceStmt currNode, N succ,publicEdgeFunction<V>getNormalEdgeFunction(Ncurr,AbstractionWithSourceStmtcurrNode,Nsucc, AbstractionWithSourceStmt succNode) {AbstractionWithSourceStmtsuccNode){ return delegate.edgeFunctions().getNormalEdgeFunction(curr, currNode.getAbstraction(), succ, succNode.getAbstraction());returndelegate.edgeFunctions().getNormalEdgeFunction(curr,currNode.getAbstraction(),succ,succNode.getAbstraction()); }} @Override@Override public EdgeFunction<V> getCallEdgeFunction(N callStmt,AbstractionWithSourceStmt srcNode,publicEdgeFunction<V>getCallEdgeFunction(NcallStmt,AbstractionWithSourceStmtsrcNode, M destinationMethod, AbstractionWithSourceStmt destNode) {MdestinationMethod,AbstractionWithSourceStmtdestNode){ return delegate.edgeFunctions().getCallEdgeFunction(callStmt, srcNode.getAbstraction(), destinationMethod, destNode.getAbstraction());returndelegate.edgeFunctions().getCallEdgeFunction(callStmt,srcNode.getAbstraction(),destinationMethod,destNode.getAbstraction()); }} @Override@Override public EdgeFunction<V> getReturnEdgeFunction(N callSite, M calleeMethod, N exitStmt,publicEdgeFunction<V>getReturnEdgeFunction(NcallSite,McalleeMethod,NexitStmt, AbstractionWithSourceStmt exitNode, N returnSite,AbstractionWithSourceStmtexitNode,NreturnSite, AbstractionWithSourceStmt retNode) {AbstractionWithSourceStmtretNode){ return delegate.edgeFunctions().getReturnEdgeFunction(callSite, calleeMethod, exitStmt, exitNode.getAbstraction(), returnSite, retNode.getAbstraction());returndelegate.edgeFunctions().getReturnEdgeFunction(callSite,calleeMethod,exitStmt,exitNode.getAbstraction(),returnSite,retNode.getAbstraction()); }} @Override@Override public EdgeFunction<V> getCallToReturnEdgeFunction(N callSite, AbstractionWithSourceStmt callNode,publicEdgeFunction<V>getCallToReturnEdgeFunction(NcallSite,AbstractionWithSourceStmtcallNode, N returnSite, AbstractionWithSourceStmt returnSideNode) {NreturnSite,AbstractionWithSourceStmtreturnSideNode){ return delegate.edgeFunctions().getCallToReturnEdgeFunction(callSite, callNode.getAbstraction(), returnSite, returnSideNode.getAbstraction());returndelegate.edgeFunctions().getCallToReturnEdgeFunction(callSite,callNode.getAbstraction(),returnSite,returnSideNode.getAbstraction()); }} };}; }} @Override@Override public JoinLattice<V> joinLattice() {publicJoinLattice<V>joinLattice(){ return delegate.joinLattice();returndelegate.joinLattice(); }} @Override@Override public EdgeFunction<V> allTopFunction() {publicEdgeFunction<V>allTopFunction(){ return delegate.allTopFunction();returndelegate.allTopFunction(); }} }} }}








src/heros/solver/BiDiIFDSSolver.java








View file @ 7b66dd07






......@@ -49,426 +49,22 @@ import com.google.common.collect.Maps;









 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> extends BiDiIDESolver<N, D, M, BinaryDomain, I> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() { 










 fwSolver = createSingleDirectionSolver(forwardProblem, "FW");










 bwSolver = createSingleDirectionSolver(backwardProblem, "BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 //start the bw solver










 bwSolver.submitInitialSeeds();










 










 //start the fw solver and block until both solvers have completed










 //(note that they both share the same executor, see below)










 //note to self: the order of the two should not matter










 fwSolver.solve();










 }










 










 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N retSiteC;










 private AbstractionWithSourceStmt targetVal;










 private EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction;










 private N relatedCallSite;










 










 public PausedEdge(N retSiteC, AbstractionWithSourceStmt targetVal, EdgeFunction<BinaryDomain> edgeFunction, N relatedCallSite) {










 this.retSiteC = retSiteC;










 this.targetVal = targetVal;










 this.edgeFunction = edgeFunction;










 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends JoinHandlingNodesIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void propagateUnbalancedReturnFlow(N retSiteC, AbstractionWithSourceStmt targetVal,










 EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction, N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge edge = new PausedEdge(retSiteC, targetVal, edgeFunction, relatedCallSite);










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 }










 










 protected void propagate(AbstractionWithSourceStmt sourceVal, N target, AbstractionWithSourceStmt targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 d5.getAbstraction().setCallingContext(d4.getAbstraction());










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.retSiteC, edge.targetVal, edge.edgeFunction, edge.relatedCallSite);










 }










 }










 }










 }










 










 /* we share the same executor; this will cause the call to solve() above to block










		 * until both solvers have finished










		 */ 










 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements JoinHandlingNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 public D getAbstraction() {










 return abstraction;










 }










 










 public N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 @Override










 public boolean handleJoin(BiDiIFDSSolver<N, D, M, I>.AbstractionWithSourceStmt joiningNode) {










 return abstraction.handleJoin(joiningNode.getAbstraction());










 }





















 @Override










 public heros.solver.JoinHandlingNode.JoinKey createJoinKey() {










 return new JoinKey(source, abstraction.createJoinKey());










 }





















 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private class AugmentedTabulationProblem implements IFDSTabulationProblem<N, AbstractionWithSourceStmt,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 Set<D> origTargets = originalFunctions.getCallFlowFunction(callStmt, destinationMethod).computeTargets(










 source.getAbstraction());





















 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for (D d : origTargets) {










 res.add(new AbstractionWithSourceStmt(d, null));










 }










 return res;










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);










 










 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }





















 super(IFDSSolver.createIDETabulationProblem(forwardProblem), IFDSSolver.createIDETabulationProblem(backwardProblem));










 }










 










 public Set<D> fwIFDSResultAt(N stmt) {










 return extractResults(fwSolver.ifdsResultsAt(stmt));










 return extractResults(fwSolver.resultsAt(stmt).keySet());










 }










 










 










 public Set<D> bwIFDSResultAt(N stmt) {










 return extractResults(bwSolver.ifdsResultsAt(stmt));










 return extractResults(bwSolver.resultsAt(stmt).keySet());










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt> annotatedResults) {



......












src/heros/solver/BiDiIFDSSolver.java








View file @ 7b66dd07








src/heros/solver/BiDiIFDSSolver.java










View file @ 7b66dd07


7b66dd07



......@@ -49,426 +49,22 @@ import com.google.common.collect.Maps;









 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> extends BiDiIDESolver<N, D, M, BinaryDomain, I> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() { 










 fwSolver = createSingleDirectionSolver(forwardProblem, "FW");










 bwSolver = createSingleDirectionSolver(backwardProblem, "BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 //start the bw solver










 bwSolver.submitInitialSeeds();










 










 //start the fw solver and block until both solvers have completed










 //(note that they both share the same executor, see below)










 //note to self: the order of the two should not matter










 fwSolver.solve();










 }










 










 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N retSiteC;










 private AbstractionWithSourceStmt targetVal;










 private EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction;










 private N relatedCallSite;










 










 public PausedEdge(N retSiteC, AbstractionWithSourceStmt targetVal, EdgeFunction<BinaryDomain> edgeFunction, N relatedCallSite) {










 this.retSiteC = retSiteC;










 this.targetVal = targetVal;










 this.edgeFunction = edgeFunction;










 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends JoinHandlingNodesIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void propagateUnbalancedReturnFlow(N retSiteC, AbstractionWithSourceStmt targetVal,










 EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction, N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge edge = new PausedEdge(retSiteC, targetVal, edgeFunction, relatedCallSite);










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 }










 










 protected void propagate(AbstractionWithSourceStmt sourceVal, N target, AbstractionWithSourceStmt targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 d5.getAbstraction().setCallingContext(d4.getAbstraction());










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.retSiteC, edge.targetVal, edge.edgeFunction, edge.relatedCallSite);










 }










 }










 }










 }










 










 /* we share the same executor; this will cause the call to solve() above to block










		 * until both solvers have finished










		 */ 










 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements JoinHandlingNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 public D getAbstraction() {










 return abstraction;










 }










 










 public N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 @Override










 public boolean handleJoin(BiDiIFDSSolver<N, D, M, I>.AbstractionWithSourceStmt joiningNode) {










 return abstraction.handleJoin(joiningNode.getAbstraction());










 }





















 @Override










 public heros.solver.JoinHandlingNode.JoinKey createJoinKey() {










 return new JoinKey(source, abstraction.createJoinKey());










 }





















 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private class AugmentedTabulationProblem implements IFDSTabulationProblem<N, AbstractionWithSourceStmt,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 Set<D> origTargets = originalFunctions.getCallFlowFunction(callStmt, destinationMethod).computeTargets(










 source.getAbstraction());





















 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for (D d : origTargets) {










 res.add(new AbstractionWithSourceStmt(d, null));










 }










 return res;










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);










 










 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }





















 super(IFDSSolver.createIDETabulationProblem(forwardProblem), IFDSSolver.createIDETabulationProblem(backwardProblem));










 }










 










 public Set<D> fwIFDSResultAt(N stmt) {










 return extractResults(fwSolver.ifdsResultsAt(stmt));










 return extractResults(fwSolver.resultsAt(stmt).keySet());










 }










 










 










 public Set<D> bwIFDSResultAt(N stmt) {










 return extractResults(bwSolver.ifdsResultsAt(stmt));










 return extractResults(bwSolver.resultsAt(stmt).keySet());










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt> annotatedResults) {



......






......@@ -49,426 +49,22 @@ import com.google.common.collect.Maps;









 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> {










public class BiDiIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> extends BiDiIDESolver<N, D, M, BinaryDomain, I> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() { 










 fwSolver = createSingleDirectionSolver(forwardProblem, "FW");










 bwSolver = createSingleDirectionSolver(backwardProblem, "BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 //start the bw solver










 bwSolver.submitInitialSeeds();










 










 //start the fw solver and block until both solvers have completed










 //(note that they both share the same executor, see below)










 //note to self: the order of the two should not matter










 fwSolver.solve();










 }










 










 /**










	 * Creates a solver to be used for each single analysis direction.










	 */










 protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> problem, String debugName) {










 return new SingleDirectionSolver(problem, debugName);










 }










 










 private class PausedEdge {










 private N retSiteC;










 private AbstractionWithSourceStmt targetVal;










 private EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction;










 private N relatedCallSite;










 










 public PausedEdge(N retSiteC, AbstractionWithSourceStmt targetVal, EdgeFunction<BinaryDomain> edgeFunction, N relatedCallSite) {










 this.retSiteC = retSiteC;










 this.targetVal = targetVal;










 this.edgeFunction = edgeFunction;










 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 protected class SingleDirectionSolver extends JoinHandlingNodesIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void propagateUnbalancedReturnFlow(N retSiteC, AbstractionWithSourceStmt targetVal,










 EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction, N relatedCallSite) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 










 PausedEdge edge = new PausedEdge(retSiteC, targetVal, edgeFunction, relatedCallSite);










 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 










 logger.debug(" ++ PAUSE {}: {}", debugName, edge);










 }










 }










 










 protected void propagate(AbstractionWithSourceStmt sourceVal, N target, AbstractionWithSourceStmt targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 @Override










 protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {










 d5.getAbstraction().setCallingContext(d4.getAbstraction());










 return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {










 if(DEBUG)










 logger.debug("-- UNPAUSE {}: {}",debugName, edge);










 super.propagateUnbalancedReturnFlow(edge.retSiteC, edge.targetVal, edge.edgeFunction, edge.relatedCallSite);










 }










 }










 }










 }










 










 /* we share the same executor; this will cause the call to solve() above to block










		 * until both solvers have finished










		 */ 










 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public class AbstractionWithSourceStmt implements JoinHandlingNode<AbstractionWithSourceStmt> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 public D getAbstraction() {










 return abstraction;










 }










 










 public N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 @SuppressWarnings("unchecked")










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }





















 @Override










 public void setCallingContext(AbstractionWithSourceStmt callingContext) {










 abstraction.setCallingContext(callingContext.getAbstraction());










 }





















 @Override










 public boolean handleJoin(BiDiIFDSSolver<N, D, M, I>.AbstractionWithSourceStmt joiningNode) {










 return abstraction.handleJoin(joiningNode.getAbstraction());










 }





















 @Override










 public heros.solver.JoinHandlingNode.JoinKey createJoinKey() {










 return new JoinKey(source, abstraction.createJoinKey());










 }





















 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private class AugmentedTabulationProblem implements IFDSTabulationProblem<N, AbstractionWithSourceStmt,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 Set<D> origTargets = originalFunctions.getCallFlowFunction(callStmt, destinationMethod).computeTargets(










 source.getAbstraction());





















 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for (D d : origTargets) {










 res.add(new AbstractionWithSourceStmt(d, null));










 }










 return res;










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<AbstractionWithSourceStmt>() {










 @Override










 public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);










 










 Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt zeroValue() {










 return ZERO;










 }





















 super(IFDSSolver.createIDETabulationProblem(forwardProblem), IFDSSolver.createIDETabulationProblem(backwardProblem));










 }










 










 public Set<D> fwIFDSResultAt(N stmt) {










 return extractResults(fwSolver.ifdsResultsAt(stmt));










 return extractResults(fwSolver.resultsAt(stmt).keySet());










 }










 










 










 public Set<D> bwIFDSResultAt(N stmt) {










 return extractResults(bwSolver.ifdsResultsAt(stmt));










 return extractResults(bwSolver.resultsAt(stmt).keySet());










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt> annotatedResults) {



......


 * @param <M> see {@link IFDSSolver} * @param <M> see {@link IFDSSolver} * @param <I> see {@link IFDSSolver} * @param <I> see {@link IFDSSolver} */ */public class BiDiIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> {publicclassBiDiIFDSSolver<N,DextendsJoinHandlingNode<D>,M,IextendsInterproceduralCFG<N,M>>{public class BiDiIFDSSolver<N, D extends JoinHandlingNode<D>, M, I extends InterproceduralCFG<N, M>> extends BiDiIDESolver<N, D, M, BinaryDomain, I> {publicclassBiDiIFDSSolver<N,DextendsJoinHandlingNode<D>,M,IextendsInterproceduralCFG<N,M>>extendsextends BiDiIDESolverBiDiIDESolver<<NN,, DD,, MM,, BinaryDomainBinaryDomain,, II>> { private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> forwardProblem;privatefinalIFDSTabulationProblem<N,AbstractionWithSourceStmt,M,I>forwardProblem; private final IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> backwardProblem;privatefinalIFDSTabulationProblem<N,AbstractionWithSourceStmt,M,I>backwardProblem; private final CountingThreadPoolExecutor sharedExecutor;privatefinalCountingThreadPoolExecutorsharedExecutor; private SingleDirectionSolver fwSolver;privateSingleDirectionSolverfwSolver; private SingleDirectionSolver bwSolver;privateSingleDirectionSolverbwSolver; /**/**	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.	 */	 */ public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {publicBiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I>forwardProblem,IFDSTabulationProblem<N,D,M,I>backwardProblem){ if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {if(!forwardProblem.followReturnsPastSeeds()||!backwardProblem.followReturnsPastSeeds()){ throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); thrownewIllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); }} this.forwardProblem = new AugmentedTabulationProblem(forwardProblem);this.forwardProblem=newAugmentedTabulationProblem(forwardProblem); this.backwardProblem = new AugmentedTabulationProblem(backwardProblem);this.backwardProblem=newAugmentedTabulationProblem(backwardProblem); this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());this.sharedExecutor=newCountingThreadPoolExecutor(1,Math.max(1,forwardProblem.numThreads()),30,TimeUnit.SECONDS,newLinkedBlockingQueue<Runnable>()); }}  public void solve() { publicvoidsolve(){ fwSolver = createSingleDirectionSolver(forwardProblem, "FW");fwSolver=createSingleDirectionSolver(forwardProblem,"FW"); bwSolver = createSingleDirectionSolver(backwardProblem, "BW");bwSolver=createSingleDirectionSolver(backwardProblem,"BW"); fwSolver.otherSolver = bwSolver;fwSolver.otherSolver=bwSolver; bwSolver.otherSolver = fwSolver;bwSolver.otherSolver=fwSolver;  //start the bw solver//start the bw solver bwSolver.submitInitialSeeds();bwSolver.submitInitialSeeds();  //start the fw solver and block until both solvers have completed//start the fw solver and block until both solvers have completed //(note that they both share the same executor, see below)//(note that they both share the same executor, see below) //note to self: the order of the two should not matter//note to self: the order of the two should not matter fwSolver.solve();fwSolver.solve(); }}  /**/**	 * Creates a solver to be used for each single analysis direction.	 * Creates a solver to be used for each single analysis direction.	 */	 */ protected SingleDirectionSolver createSingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> problem, String debugName) {protectedSingleDirectionSolvercreateSingleDirectionSolver(IFDSTabulationProblem<N,AbstractionWithSourceStmt,M,I>problem,StringdebugName){ return new SingleDirectionSolver(problem, debugName);returnnewSingleDirectionSolver(problem,debugName); }}  private class PausedEdge {privateclassPausedEdge{ private N retSiteC;privateNretSiteC; private AbstractionWithSourceStmt targetVal;privateAbstractionWithSourceStmttargetVal; private EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction;privateEdgeFunction<heros.solver.IFDSSolver.BinaryDomain>edgeFunction; private N relatedCallSite;privateNrelatedCallSite;  public PausedEdge(N retSiteC, AbstractionWithSourceStmt targetVal, EdgeFunction<BinaryDomain> edgeFunction, N relatedCallSite) {publicPausedEdge(NretSiteC,AbstractionWithSourceStmttargetVal,EdgeFunction<BinaryDomain>edgeFunction,NrelatedCallSite){ this.retSiteC = retSiteC;this.retSiteC=retSiteC; this.targetVal = targetVal;this.targetVal=targetVal; this.edgeFunction = edgeFunction;this.edgeFunction=edgeFunction; this.relatedCallSite = relatedCallSite;this.relatedCallSite=relatedCallSite; }} }} /**/**	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.	 *	 *	 */	 */ private static class LeakKey<N> {privatestaticclassLeakKey<N>{ private N sourceStmt;privateNsourceStmt; private N relatedCallSite;privateNrelatedCallSite;  public LeakKey(N sourceStmt, N relatedCallSite) {publicLeakKey(NsourceStmt,NrelatedCallSite){ this.sourceStmt = sourceStmt;this.sourceStmt=sourceStmt; this.relatedCallSite = relatedCallSite;this.relatedCallSite=relatedCallSite; }}  @Override@Override public int hashCode() {publicinthashCode(){ final int prime = 31;finalintprime=31; int result = 1;intresult=1; result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());result=prime*result+((relatedCallSite==null)?0:relatedCallSite.hashCode()); result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());result=prime*result+((sourceStmt==null)?0:sourceStmt.hashCode()); return result;returnresult; }}  @SuppressWarnings("rawtypes")@SuppressWarnings("rawtypes") @Override@Override public boolean equals(Object obj) {publicbooleanequals(Objectobj){ if (this == obj)if(this==obj) return true;returntrue; if (obj == null)if(obj==null) return false;returnfalse; if (!(obj instanceof LeakKey))if(!(objinstanceofLeakKey)) return false;returnfalse; LeakKey other = (LeakKey) obj;LeakKeyother=(LeakKey)obj; if (relatedCallSite == null) {if(relatedCallSite==null){ if (other.relatedCallSite != null)if(other.relatedCallSite!=null) return false;returnfalse; } else if (!relatedCallSite.equals(other.relatedCallSite))}elseif(!relatedCallSite.equals(other.relatedCallSite)) return false;returnfalse; if (sourceStmt == null) {if(sourceStmt==null){ if (other.sourceStmt != null)if(other.sourceStmt!=null) return false;returnfalse; } else if (!sourceStmt.equals(other.sourceStmt))}elseif(!sourceStmt.equals(other.sourceStmt)) return false;returnfalse; return true;returntrue; }} }}  /**/**	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.	 */	 */ protected class SingleDirectionSolver extends JoinHandlingNodesIFDSSolver<N, AbstractionWithSourceStmt, M, I> {protectedclassSingleDirectionSolverextendsJoinHandlingNodesIFDSSolver<N,AbstractionWithSourceStmt,M,I>{ private final String debugName;privatefinalStringdebugName; private SingleDirectionSolver otherSolver;privateSingleDirectionSolverotherSolver; private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());privateSet<LeakKey<N>>leakedSources=Collections.newSetFromMap(Maps.<LeakKey<N>,Boolean>newConcurrentMap()); private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =privateConcurrentMap<LeakKey<N>,Set<PausedEdge>>pausedPathEdges= Maps.newConcurrentMap();Maps.newConcurrentMap(); public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {publicSingleDirectionSolver(IFDSTabulationProblem<N,AbstractionWithSourceStmt,M,I>ifdsProblem,StringdebugName){ super(ifdsProblem);super(ifdsProblem); this.debugName = debugName;this.debugName=debugName; }}  @Override@Override protected void propagateUnbalancedReturnFlow(N retSiteC, AbstractionWithSourceStmt targetVal,protectedvoidpropagateUnbalancedReturnFlow(NretSiteC,AbstractionWithSourceStmttargetVal, EdgeFunction<heros.solver.IFDSSolver.BinaryDomain> edgeFunction, N relatedCallSite) {EdgeFunction<heros.solver.IFDSSolver.BinaryDomain>edgeFunction,NrelatedCallSite){ //if an edge is originating from ZERO then to us this signifies an unbalanced return edge//if an edge is originating from ZERO then to us this signifies an unbalanced return edge N sourceStmt = targetVal.getSourceStmt();NsourceStmt=targetVal.getSourceStmt(); //we mark the fact that this solver would like to "leak" this edge to the caller//we mark the fact that this solver would like to "leak" this edge to the caller LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);LeakKey<N>leakKey=newLeakKey<N>(sourceStmt,relatedCallSite); leakedSources.add(leakKey);leakedSources.add(leakKey); if(otherSolver.hasLeaked(leakKey)) {if(otherSolver.hasLeaked(leakKey)){ //if the other solver has leaked already then unpause its edges and continue//if the other solver has leaked already then unpause its edges and continue otherSolver.unpausePathEdgesForSource(leakKey);otherSolver.unpausePathEdgesForSource(leakKey); super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);super.propagateUnbalancedReturnFlow(retSiteC,targetVal,edgeFunction,relatedCallSite); } else {}else{ //otherwise we pause this solver's edge and don't continue//otherwise we pause this solver's edge and don't continue Set<PausedEdge> newPausedEdges = Set<PausedEdge>newPausedEdges= Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); Collections.newSetFromMap(Maps.<PausedEdge,Boolean>newConcurrentMap()); Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);Set<PausedEdge>existingPausedEdges=pausedPathEdges.putIfAbsent(leakKey,newPausedEdges); if(existingPausedEdges==null)if(existingPausedEdges==null) existingPausedEdges=newPausedEdges;existingPausedEdges=newPausedEdges;  PausedEdge edge = new PausedEdge(retSiteC, targetVal, edgeFunction, relatedCallSite);PausedEdgeedge=newPausedEdge(retSiteC,targetVal,edgeFunction,relatedCallSite); existingPausedEdges.add(edge);existingPausedEdges.add(edge);  //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused//if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(edge)) {if(otherSolver.hasLeaked(leakKey)&&existingPausedEdges.remove(edge)){ super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);super.propagateUnbalancedReturnFlow(retSiteC,targetVal,edgeFunction,relatedCallSite); }}  logger.debug(" ++ PAUSE {}: {}", debugName, edge);logger.debug(" ++ PAUSE {}: {}",debugName,edge); }} }}  protected void propagate(AbstractionWithSourceStmt sourceVal, N target, AbstractionWithSourceStmt targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {protectedvoidpropagate(AbstractionWithSourceStmtsourceVal,Ntarget,AbstractionWithSourceStmttargetVal,EdgeFunction<IFDSSolver.BinaryDomain>f,NrelatedCallSite,booleanisUnbalancedReturn){ //the follwing branch will be taken only on an unbalanced return//the follwing branch will be taken only on an unbalanced return if(isUnbalancedReturn) {if(isUnbalancedReturn){ assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";assertsourceVal.getSourceStmt()==null:"source value should have no statement attached";  //attach target statement as new "source" statement to track//attach target statement as new "source" statement to track targetVal = new AbstractionWithSourceStmt(targetVal.getAbstraction(), relatedCallSite);targetVal=newAbstractionWithSourceStmt(targetVal.getAbstraction(),relatedCallSite);  super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);super.propagate(sourceVal,target,targetVal,f,relatedCallSite,isUnbalancedReturn); } else { }else{ super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);super.propagate(sourceVal,target,targetVal,f,relatedCallSite,isUnbalancedReturn); }} }}  @Override@Override protected AbstractionWithSourceStmt restoreContextOnReturnedFact(AbstractionWithSourceStmt d4, AbstractionWithSourceStmt d5) {protectedAbstractionWithSourceStmtrestoreContextOnReturnedFact(AbstractionWithSourceStmtd4,AbstractionWithSourceStmtd5){ d5.getAbstraction().setCallingContext(d4.getAbstraction());d5.getAbstraction().setCallingContext(d4.getAbstraction()); return new AbstractionWithSourceStmt(d5.getAbstraction(), d4.getSourceStmt());returnnewAbstractionWithSourceStmt(d5.getAbstraction(),d4.getSourceStmt()); }}  /**/**		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source		 * to its caller.		 * to its caller.		 */		 */ private boolean hasLeaked(LeakKey<N> leakKey) {privatebooleanhasLeaked(LeakKey<N>leakKey){ return leakedSources.contains(leakKey);returnleakedSources.contains(leakKey); }}  /**/**		 * Unpauses all edges associated with the given source statement.		 * Unpauses all edges associated with the given source statement.		 */		 */ private void unpausePathEdgesForSource(LeakKey<N> leakKey) {privatevoidunpausePathEdgesForSource(LeakKey<N>leakKey){ Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);Set<PausedEdge>pausedEdges=pausedPathEdges.get(leakKey); if(pausedEdges!=null) {if(pausedEdges!=null){ for(PausedEdge edge: pausedEdges) {for(PausedEdgeedge:pausedEdges){ if(pausedEdges.remove(edge)) {if(pausedEdges.remove(edge)){ if(DEBUG)if(DEBUG) logger.debug("-- UNPAUSE {}: {}",debugName, edge);logger.debug("-- UNPAUSE {}: {}",debugName,edge); super.propagateUnbalancedReturnFlow(edge.retSiteC, edge.targetVal, edge.edgeFunction, edge.relatedCallSite);super.propagateUnbalancedReturnFlow(edge.retSiteC,edge.targetVal,edge.edgeFunction,edge.relatedCallSite); }} }} }} }}  /* we share the same executor; this will cause the call to solve() above to block/* we share the same executor; this will cause the call to solve() above to block		 * until both solvers have finished		 * until both solvers have finished		 */ 		 */ protected CountingThreadPoolExecutor getExecutor() {protectedCountingThreadPoolExecutorgetExecutor(){ return sharedExecutor;returnsharedExecutor; }}  protected String getDebugName() {protectedStringgetDebugName(){ return debugName;returndebugName; }} }} /**/**	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the	 * abstraction the source statement from which this fact originated. 	 * abstraction the source statement from which this fact originated. 	 */	 */ public class AbstractionWithSourceStmt implements JoinHandlingNode<AbstractionWithSourceStmt> {publicclassAbstractionWithSourceStmtimplementsJoinHandlingNode<AbstractionWithSourceStmt>{ protected final D abstraction;protectedfinalDabstraction; protected final N source;protectedfinalNsource;  private AbstractionWithSourceStmt(D abstraction, N source) {privateAbstractionWithSourceStmt(Dabstraction,Nsource){ this.abstraction = abstraction;this.abstraction=abstraction; this.source = source;this.source=source; }} public D getAbstraction() {publicDgetAbstraction(){ return abstraction;returnabstraction; }}  public N getSourceStmt() {publicNgetSourceStmt(){ return source;returnsource; } }  @Override@Override public String toString() {publicStringtoString(){ if(source!=null)if(source!=null) return ""+abstraction+"-@-"+source+"";return""+abstraction+"-@-"+source+""; elseelse return abstraction.toString();returnabstraction.toString(); }} @Override@Override public int hashCode() {publicinthashCode(){ final int prime = 31;finalintprime=31; int result = 1;intresult=1; result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());result=prime*result+((abstraction==null)?0:abstraction.hashCode()); result = prime * result + ((source == null) ? 0 : source.hashCode());result=prime*result+((source==null)?0:source.hashCode()); return result;returnresult; }} @Override@Override public boolean equals(Object obj) {publicbooleanequals(Objectobj){ if (this == obj)if(this==obj) return true;returntrue; if (obj == null)if(obj==null) return false;returnfalse; if (getClass() != obj.getClass())if(getClass()!=obj.getClass()) return false;returnfalse; @SuppressWarnings("unchecked")@SuppressWarnings("unchecked") AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;AbstractionWithSourceStmtother=(AbstractionWithSourceStmt)obj; if (abstraction == null) {if(abstraction==null){ if (other.abstraction != null)if(other.abstraction!=null) return false;returnfalse; } else if (!abstraction.equals(other.abstraction))}elseif(!abstraction.equals(other.abstraction)) return false;returnfalse; if (source == null) {if(source==null){ if (other.source != null)if(other.source!=null) return false;returnfalse; } else if (!source.equals(other.source))}elseif(!source.equals(other.source)) return false;returnfalse; return true;returntrue; }} @Override@Override public void setCallingContext(AbstractionWithSourceStmt callingContext) {publicvoidsetCallingContext(AbstractionWithSourceStmtcallingContext){ abstraction.setCallingContext(callingContext.getAbstraction());abstraction.setCallingContext(callingContext.getAbstraction()); }} @Override@Override public boolean handleJoin(BiDiIFDSSolver<N, D, M, I>.AbstractionWithSourceStmt joiningNode) {publicbooleanhandleJoin(BiDiIFDSSolver<N,D,M,I>.AbstractionWithSourceStmtjoiningNode){ return abstraction.handleJoin(joiningNode.getAbstraction());returnabstraction.handleJoin(joiningNode.getAbstraction()); }} @Override@Override public heros.solver.JoinHandlingNode.JoinKey createJoinKey() {publicheros.solver.JoinHandlingNode.JoinKeycreateJoinKey(){ return new JoinKey(source, abstraction.createJoinKey());returnnewJoinKey(source,abstraction.createJoinKey()); }} }}  /**/**	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.	 */	 */ private class AugmentedTabulationProblem implements IFDSTabulationProblem<N, AbstractionWithSourceStmt,M,I> {privateclassAugmentedTabulationProblemimplementsIFDSTabulationProblem<N,AbstractionWithSourceStmt,M,I>{ private final IFDSTabulationProblem<N,D,M,I> delegate;privatefinalIFDSTabulationProblem<N,D,M,I>delegate; private final AbstractionWithSourceStmt ZERO;privatefinalAbstractionWithSourceStmtZERO; private final FlowFunctions<N, D, M> originalFunctions;privatefinalFlowFunctions<N,D,M>originalFunctions;  public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {publicAugmentedTabulationProblem(IFDSTabulationProblem<N,D,M,I>delegate){ this.delegate = delegate;this.delegate=delegate; originalFunctions = this.delegate.flowFunctions();originalFunctions=this.delegate.flowFunctions(); ZERO = new AbstractionWithSourceStmt(delegate.zeroValue(), null);ZERO=newAbstractionWithSourceStmt(delegate.zeroValue(),null); }} @Override@Override public FlowFunctions<N, AbstractionWithSourceStmt, M> flowFunctions() {publicFlowFunctions<N,AbstractionWithSourceStmt,M>flowFunctions(){ return new FlowFunctions<N, AbstractionWithSourceStmt, M>() {returnnewFlowFunctions<N,AbstractionWithSourceStmt,M>(){ @Override@Override public FlowFunction<AbstractionWithSourceStmt> getNormalFlowFunction(final N curr, final N succ) {publicFlowFunction<AbstractionWithSourceStmt>getNormalFlowFunction(finalNcurr,finalNsucc){ return new FlowFunction<AbstractionWithSourceStmt>() {returnnewFlowFunction<AbstractionWithSourceStmt>(){ @Override@Override public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {publicSet<AbstractionWithSourceStmt>computeTargets(AbstractionWithSourceStmtsource){ return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));returncopyOverSourceStmts(source,originalFunctions.getNormalFlowFunction(curr,succ)); }} };}; }} @Override@Override public FlowFunction<AbstractionWithSourceStmt> getCallFlowFunction(final N callStmt, final M destinationMethod) {publicFlowFunction<AbstractionWithSourceStmt>getCallFlowFunction(finalNcallStmt,finalMdestinationMethod){ return new FlowFunction<AbstractionWithSourceStmt>() {returnnewFlowFunction<AbstractionWithSourceStmt>(){ @Override@Override public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {publicSet<AbstractionWithSourceStmt>computeTargets(AbstractionWithSourceStmtsource){ Set<D> origTargets = originalFunctions.getCallFlowFunction(callStmt, destinationMethod).computeTargets(Set<D>origTargets=originalFunctions.getCallFlowFunction(callStmt,destinationMethod).computeTargets( source.getAbstraction());source.getAbstraction()); Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();Set<AbstractionWithSourceStmt>res=newHashSet<AbstractionWithSourceStmt>(); for (D d : origTargets) {for(Dd:origTargets){ res.add(new AbstractionWithSourceStmt(d, null));res.add(newAbstractionWithSourceStmt(d,null)); }} return res;returnres; }} };}; }} @Override@Override public FlowFunction<AbstractionWithSourceStmt> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {publicFlowFunction<AbstractionWithSourceStmt>getReturnFlowFunction(finalNcallSite,finalMcalleeMethod,finalNexitStmt,finalNreturnSite){ return new FlowFunction<AbstractionWithSourceStmt>() {returnnewFlowFunction<AbstractionWithSourceStmt>(){ @Override@Override public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {publicSet<AbstractionWithSourceStmt>computeTargets(AbstractionWithSourceStmtsource){ return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));returncopyOverSourceStmts(source,originalFunctions.getReturnFlowFunction(callSite,calleeMethod,exitStmt,returnSite)); }} };}; }} @Override@Override public FlowFunction<AbstractionWithSourceStmt> getCallToReturnFlowFunction(final N callSite, final N returnSite) {publicFlowFunction<AbstractionWithSourceStmt>getCallToReturnFlowFunction(finalNcallSite,finalNreturnSite){ return new FlowFunction<AbstractionWithSourceStmt>() {returnnewFlowFunction<AbstractionWithSourceStmt>(){ @Override@Override public Set<AbstractionWithSourceStmt> computeTargets(AbstractionWithSourceStmt source) {publicSet<AbstractionWithSourceStmt>computeTargets(AbstractionWithSourceStmtsource){ return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));returncopyOverSourceStmts(source,originalFunctions.getCallToReturnFlowFunction(callSite,returnSite)); }} };}; }}  private Set<AbstractionWithSourceStmt> copyOverSourceStmts(AbstractionWithSourceStmt source, FlowFunction<D> originalFunction) {privateSet<AbstractionWithSourceStmt>copyOverSourceStmts(AbstractionWithSourceStmtsource,FlowFunction<D>originalFunction){ D originalAbstraction = source.getAbstraction();DoriginalAbstraction=source.getAbstraction(); Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);Set<D>origTargets=originalFunction.computeTargets(originalAbstraction);  Set<AbstractionWithSourceStmt> res = new HashSet<AbstractionWithSourceStmt>();Set<AbstractionWithSourceStmt>res=newHashSet<AbstractionWithSourceStmt>(); for(D d: origTargets) {for(Dd:origTargets){ res.add(new AbstractionWithSourceStmt(d,source.getSourceStmt()));res.add(newAbstractionWithSourceStmt(d,source.getSourceStmt())); }} return res;returnres; }} };}; }}  //delegate methods follow//delegate methods follow public boolean followReturnsPastSeeds() {publicbooleanfollowReturnsPastSeeds(){ return delegate.followReturnsPastSeeds();returndelegate.followReturnsPastSeeds(); }} public boolean autoAddZero() {publicbooleanautoAddZero(){ return delegate.autoAddZero();returndelegate.autoAddZero(); }} public int numThreads() {publicintnumThreads(){ return delegate.numThreads();returndelegate.numThreads(); }} public boolean computeValues() {publicbooleancomputeValues(){ return delegate.computeValues();returndelegate.computeValues(); }} public I interproceduralCFG() {publicIinterproceduralCFG(){ return delegate.interproceduralCFG();returndelegate.interproceduralCFG(); }} /* attaches the original seed statement to the abstraction/* attaches the original seed statement to the abstraction		 */		 */ public Map<N,Set<AbstractionWithSourceStmt>> initialSeeds() {publicMap<N,Set<AbstractionWithSourceStmt>>initialSeeds(){ Map<N, Set<D>> originalSeeds = delegate.initialSeeds();Map<N,Set<D>>originalSeeds=delegate.initialSeeds(); Map<N,Set<AbstractionWithSourceStmt>> res = new HashMap<N, Set<AbstractionWithSourceStmt>>();Map<N,Set<AbstractionWithSourceStmt>>res=newHashMap<N,Set<AbstractionWithSourceStmt>>(); for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {for(Entry<N,Set<D>>entry:originalSeeds.entrySet()){ N stmt = entry.getKey();Nstmt=entry.getKey(); Set<D> seeds = entry.getValue();Set<D>seeds=entry.getValue(); Set<AbstractionWithSourceStmt> resSet = new HashSet<AbstractionWithSourceStmt>();Set<AbstractionWithSourceStmt>resSet=newHashSet<AbstractionWithSourceStmt>(); for (D d : seeds) {for(Dd:seeds){ //attach source stmt to abstraction//attach source stmt to abstraction resSet.add(new AbstractionWithSourceStmt(d, stmt));resSet.add(newAbstractionWithSourceStmt(d,stmt)); }} res.put(stmt, resSet);res.put(stmt,resSet); } } return res;returnres; }} public AbstractionWithSourceStmt zeroValue() {publicAbstractionWithSourceStmtzeroValue(){ return ZERO;returnZERO; }} super(IFDSSolver.createIDETabulationProblem(forwardProblem), IFDSSolver.createIDETabulationProblem(backwardProblem));super(IFDSSolver.createIDETabulationProblem(forwardProblem),IFDSSolver.createIDETabulationProblem(backwardProblem)); }}  public Set<D> fwIFDSResultAt(N stmt) {publicSet<D>fwIFDSResultAt(Nstmt){ return extractResults(fwSolver.ifdsResultsAt(stmt));returnextractResults(fwSolver.ifdsResultsAtifdsR(stmt)); return extractResults(fwSolver.resultsAt(stmt).keySet());returnextractResults(fwSolver.resultsAtr(stmt)..keySetkeySet());() }}   public Set<D> bwIFDSResultAt(N stmt) {publicSet<D>bwIFDSResultAt(Nstmt){ return extractResults(bwSolver.ifdsResultsAt(stmt));returnextractResults(bwSolver.ifdsResultsAtifdsR(stmt)); return extractResults(bwSolver.resultsAt(stmt).keySet());returnextractResults(bwSolver.resultsAtr(stmt)..keySetkeySet());() }} private Set<D> extractResults(Set<AbstractionWithSourceStmt> annotatedResults) {privateSet<D>extractResults(Set<AbstractionWithSourceStmt>annotatedResults){








src/heros/solver/CountingThreadPoolExecutor.java








View file @ 7b66dd07






......@@ -27,7 +27,7 @@ import org.slf4j.LoggerFactory;









 */










public class CountingThreadPoolExecutor extends ThreadPoolExecutor {










 










 protected static final Logger logger = LoggerFactory.getLogger(IDESolver.class);










 protected static final Logger logger = LoggerFactory.getLogger(CountingThreadPoolExecutor.class);





















 protected final CountLatch numRunningTasks = new CountLatch(0);










 



......












src/heros/solver/CountingThreadPoolExecutor.java








View file @ 7b66dd07








src/heros/solver/CountingThreadPoolExecutor.java










View file @ 7b66dd07


7b66dd07



......@@ -27,7 +27,7 @@ import org.slf4j.LoggerFactory;









 */










public class CountingThreadPoolExecutor extends ThreadPoolExecutor {










 










 protected static final Logger logger = LoggerFactory.getLogger(IDESolver.class);










 protected static final Logger logger = LoggerFactory.getLogger(CountingThreadPoolExecutor.class);





















 protected final CountLatch numRunningTasks = new CountLatch(0);










 



......






......@@ -27,7 +27,7 @@ import org.slf4j.LoggerFactory;









 */










public class CountingThreadPoolExecutor extends ThreadPoolExecutor {










 










 protected static final Logger logger = LoggerFactory.getLogger(IDESolver.class);










 protected static final Logger logger = LoggerFactory.getLogger(CountingThreadPoolExecutor.class);





















 protected final CountLatch numRunningTasks = new CountLatch(0);










 



......


 */ */public class CountingThreadPoolExecutor extends ThreadPoolExecutor {publicclassCountingThreadPoolExecutorextendsThreadPoolExecutor{  protected static final Logger logger = LoggerFactory.getLogger(IDESolver.class);protectedstaticfinalLoggerlogger=LoggerFactory.getLogger(IDESolverIDESolve.class); protected static final Logger logger = LoggerFactory.getLogger(CountingThreadPoolExecutor.class);protectedstaticfinalLoggerlogger=LoggerFactory.getLogger(CountingThreadPoolExecutorCountingThreadPoolExecuto.class); protected final CountLatch numRunningTasks = new CountLatch(0);protectedfinalCountLatchnumRunningTasks=newCountLatch(0); 








src/heros/solver/IFDSSolver.java








View file @ 7b66dd07






......@@ -49,7 +49,12 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









	 * {@link #solve()}.










	 */










 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {










 super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {










 super(createIDETabulationProblem(ifdsProblem));










 }





















 static <N, D, M, I extends InterproceduralCFG<N, M>> IDETabulationProblem<N, D, M, BinaryDomain, I> createIDETabulationProblem(










 final IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 return new IDETabulationProblem<N,D,M,BinaryDomain,I>() {





















 public FlowFunctions<N,D,M> flowFunctions() {










 return ifdsProblem.flowFunctions();



......@@ -140,7 +145,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 }










 }





















 });










 };










 }










 










 /**



......












src/heros/solver/IFDSSolver.java








View file @ 7b66dd07








src/heros/solver/IFDSSolver.java










View file @ 7b66dd07


7b66dd07



......@@ -49,7 +49,12 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









	 * {@link #solve()}.










	 */










 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {










 super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {










 super(createIDETabulationProblem(ifdsProblem));










 }





















 static <N, D, M, I extends InterproceduralCFG<N, M>> IDETabulationProblem<N, D, M, BinaryDomain, I> createIDETabulationProblem(










 final IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 return new IDETabulationProblem<N,D,M,BinaryDomain,I>() {





















 public FlowFunctions<N,D,M> flowFunctions() {










 return ifdsProblem.flowFunctions();



......@@ -140,7 +145,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 }










 }





















 });










 };










 }










 










 /**



......






......@@ -49,7 +49,12 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









	 * {@link #solve()}.










	 */










 public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {










 super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {










 super(createIDETabulationProblem(ifdsProblem));










 }





















 static <N, D, M, I extends InterproceduralCFG<N, M>> IDETabulationProblem<N, D, M, BinaryDomain, I> createIDETabulationProblem(










 final IFDSTabulationProblem<N, D, M, I> ifdsProblem) {










 return new IDETabulationProblem<N,D,M,BinaryDomain,I>() {





















 public FlowFunctions<N,D,M> flowFunctions() {










 return ifdsProblem.flowFunctions();



......@@ -140,7 +145,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 }










 }





















 });










 };










 }










 










 /**



......


	 * {@link #solve()}.	 * {@link #solve()}.	 */	 */ public IFDSSolver(final IFDSTabulationProblem<N,D,M,I> ifdsProblem) {publicIFDSSolver(finalIFDSTabulationProblem<N,D,M,I>ifdsProblem){ super(new IDETabulationProblem<N,D,M,BinaryDomain,I>() {super(newIDETabulationProblem<N,D,M,BinaryDomain,I>(){ super(createIDETabulationProblem(ifdsProblem));super(createIDETabulationProblem(ifdsProblem)); }} static <N, D, M, I extends InterproceduralCFG<N, M>> IDETabulationProblem<N, D, M, BinaryDomain, I> createIDETabulationProblem(static<N,D,M,IextendsInterproceduralCFG<N,M>>IDETabulationProblem<N,D,M,BinaryDomain,I>createIDETabulationProblem( final IFDSTabulationProblem<N, D, M, I> ifdsProblem) {finalIFDSTabulationProblem<N,D,M,I>ifdsProblem){ return new IDETabulationProblem<N,D,M,BinaryDomain,I>() {returnnewIDETabulationProblem<N,D,M,BinaryDomain,I>(){ public FlowFunctions<N,D,M> flowFunctions() {publicFlowFunctions<N,D,M>flowFunctions(){ return ifdsProblem.flowFunctions();returnifdsProblem.flowFunctions(); }} }} });});) };};
 }}  /**/**








src/heros/utilities/JsonArray.java








View file @ 7b66dd07






......@@ -27,6 +27,10 @@ public class JsonArray {









 for(String item: items) {










 JsonDocument.tabs(tabs+1, builder); builder.append("\""+item+"\",\n");










 }










 










 if(!items.isEmpty())










 builder.delete(builder.length()-2, builder.length()-1); 










 










 JsonDocument.tabs(tabs, builder); builder.append("]");










 }










}




\ No newline at end of file












src/heros/utilities/JsonArray.java








View file @ 7b66dd07








src/heros/utilities/JsonArray.java










View file @ 7b66dd07


7b66dd07



......@@ -27,6 +27,10 @@ public class JsonArray {









 for(String item: items) {










 JsonDocument.tabs(tabs+1, builder); builder.append("\""+item+"\",\n");










 }










 










 if(!items.isEmpty())










 builder.delete(builder.length()-2, builder.length()-1); 










 










 JsonDocument.tabs(tabs, builder); builder.append("]");










 }










}




\ No newline at end of file






......@@ -27,6 +27,10 @@ public class JsonArray {









 for(String item: items) {










 JsonDocument.tabs(tabs+1, builder); builder.append("\""+item+"\",\n");










 }










 










 if(!items.isEmpty())










 builder.delete(builder.length()-2, builder.length()-1); 










 










 JsonDocument.tabs(tabs, builder); builder.append("]");










 }










}




\ No newline at end of file


 for(String item: items) {for(Stringitem:items){ JsonDocument.tabs(tabs+1, builder); builder.append("\""+item+"\",\n");JsonDocument.tabs(tabs+1,builder);builder.append("\""+item+"\",\n"); }}  if(!items.isEmpty())if(!items.isEmpty()) builder.delete(builder.length()-2, builder.length()-1); builder.delete(builder.length()-2,builder.length()-1);  JsonDocument.tabs(tabs, builder); builder.append("]");JsonDocument.tabs(tabs,builder);builder.append("]"); }}}}








test/heros/fieldsens/BiDiFieldSensitiveIFDSSolverTest.java








View file @ 7b66dd07






......@@ -10,13 +10,21 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.InterproceduralCFG;










import static heros.utilities.FieldSensitiveTestHelper.callSite;










import static heros.utilities.FieldSensitiveTestHelper.exitStmt;










import static heros.utilities.FieldSensitiveTestHelper.flow;










import static heros.utilities.FieldSensitiveTestHelper.kill;










import static heros.utilities.FieldSensitiveTestHelper.normalStmt;










import static heros.utilities.FieldSensitiveTestHelper.over;










import static heros.utilities.FieldSensitiveTestHelper.startPoints;










import static heros.utilities.FieldSensitiveTestHelper.times;










import static heros.utilities.FieldSensitiveTestHelper.to;










import heros.utilities.FieldSensitiveTestHelper;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;










import heros.utilities.Statement;










import heros.utilities.TestDebugger;










import heros.utilities.TestFact;










import heros.utilities.TestMethod;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;





















import java.util.Collection;










import java.util.LinkedList;



......@@ -28,8 +36,6 @@ import org.junit.runners.Parameterized.Parameters;




















import com.google.common.collect.Lists;





















import static heros.utilities.FieldSensitiveTestHelper.*;
































@RunWith(Parameterized.class)










public class BiDiFieldSensitiveIFDSSolverTest {



......@@ -37,11 +43,11 @@ public class BiDiFieldSensitiveIFDSSolverTest {









 private FieldSensitiveTestHelper forwardHelper;










 private FieldSensitiveTestHelper backwardHelper;










 private TabulationProblemExchange exchange;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;










 










 public BiDiFieldSensitiveIFDSSolverTest(TabulationProblemExchange exchange) {










 this.exchange = exchange;










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 forwardHelper = new FieldSensitiveTestHelper(debugger);










 backwardHelper = new FieldSensitiveTestHelper(debugger);










 }



......












test/heros/fieldsens/BiDiFieldSensitiveIFDSSolverTest.java








View file @ 7b66dd07








test/heros/fieldsens/BiDiFieldSensitiveIFDSSolverTest.java










View file @ 7b66dd07


7b66dd07



......@@ -10,13 +10,21 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.InterproceduralCFG;










import static heros.utilities.FieldSensitiveTestHelper.callSite;










import static heros.utilities.FieldSensitiveTestHelper.exitStmt;










import static heros.utilities.FieldSensitiveTestHelper.flow;










import static heros.utilities.FieldSensitiveTestHelper.kill;










import static heros.utilities.FieldSensitiveTestHelper.normalStmt;










import static heros.utilities.FieldSensitiveTestHelper.over;










import static heros.utilities.FieldSensitiveTestHelper.startPoints;










import static heros.utilities.FieldSensitiveTestHelper.times;










import static heros.utilities.FieldSensitiveTestHelper.to;










import heros.utilities.FieldSensitiveTestHelper;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;










import heros.utilities.Statement;










import heros.utilities.TestDebugger;










import heros.utilities.TestFact;










import heros.utilities.TestMethod;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;





















import java.util.Collection;










import java.util.LinkedList;



......@@ -28,8 +36,6 @@ import org.junit.runners.Parameterized.Parameters;




















import com.google.common.collect.Lists;





















import static heros.utilities.FieldSensitiveTestHelper.*;
































@RunWith(Parameterized.class)










public class BiDiFieldSensitiveIFDSSolverTest {



......@@ -37,11 +43,11 @@ public class BiDiFieldSensitiveIFDSSolverTest {









 private FieldSensitiveTestHelper forwardHelper;










 private FieldSensitiveTestHelper backwardHelper;










 private TabulationProblemExchange exchange;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;










 










 public BiDiFieldSensitiveIFDSSolverTest(TabulationProblemExchange exchange) {










 this.exchange = exchange;










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 forwardHelper = new FieldSensitiveTestHelper(debugger);










 backwardHelper = new FieldSensitiveTestHelper(debugger);










 }



......






......@@ -10,13 +10,21 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.InterproceduralCFG;










import static heros.utilities.FieldSensitiveTestHelper.callSite;










import static heros.utilities.FieldSensitiveTestHelper.exitStmt;










import static heros.utilities.FieldSensitiveTestHelper.flow;










import static heros.utilities.FieldSensitiveTestHelper.kill;










import static heros.utilities.FieldSensitiveTestHelper.normalStmt;










import static heros.utilities.FieldSensitiveTestHelper.over;










import static heros.utilities.FieldSensitiveTestHelper.startPoints;










import static heros.utilities.FieldSensitiveTestHelper.times;










import static heros.utilities.FieldSensitiveTestHelper.to;










import heros.utilities.FieldSensitiveTestHelper;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;










import heros.utilities.Statement;










import heros.utilities.TestDebugger;










import heros.utilities.TestFact;










import heros.utilities.TestMethod;










import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;





















import java.util.Collection;










import java.util.LinkedList;



......@@ -28,8 +36,6 @@ import org.junit.runners.Parameterized.Parameters;




















import com.google.common.collect.Lists;





















import static heros.utilities.FieldSensitiveTestHelper.*;
































@RunWith(Parameterized.class)










public class BiDiFieldSensitiveIFDSSolverTest {



......@@ -37,11 +43,11 @@ public class BiDiFieldSensitiveIFDSSolverTest {









 private FieldSensitiveTestHelper forwardHelper;










 private FieldSensitiveTestHelper backwardHelper;










 private TabulationProblemExchange exchange;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;










 










 public BiDiFieldSensitiveIFDSSolverTest(TabulationProblemExchange exchange) {










 this.exchange = exchange;










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 forwardHelper = new FieldSensitiveTestHelper(debugger);










 backwardHelper = new FieldSensitiveTestHelper(debugger);










 }



......


 ******************************************************************************/ ******************************************************************************/package heros.fieldsens;packageheros.fieldsens;import heros.InterproceduralCFG;importheros.InterproceduralCFG;import static heros.utilities.FieldSensitiveTestHelper.callSite;importstaticheros.utilities.FieldSensitiveTestHelper.callSite;import static heros.utilities.FieldSensitiveTestHelper.exitStmt;importstaticheros.utilities.FieldSensitiveTestHelper.exitStmt;import static heros.utilities.FieldSensitiveTestHelper.flow;importstaticheros.utilities.FieldSensitiveTestHelper.flow;import static heros.utilities.FieldSensitiveTestHelper.kill;importstaticheros.utilities.FieldSensitiveTestHelper.kill;import static heros.utilities.FieldSensitiveTestHelper.normalStmt;importstaticheros.utilities.FieldSensitiveTestHelper.normalStmt;import static heros.utilities.FieldSensitiveTestHelper.over;importstaticheros.utilities.FieldSensitiveTestHelper.over;import static heros.utilities.FieldSensitiveTestHelper.startPoints;importstaticheros.utilities.FieldSensitiveTestHelper.startPoints;import static heros.utilities.FieldSensitiveTestHelper.times;importstaticheros.utilities.FieldSensitiveTestHelper.times;import static heros.utilities.FieldSensitiveTestHelper.to;importstaticheros.utilities.FieldSensitiveTestHelper.to;import heros.utilities.FieldSensitiveTestHelper;importheros.utilities.FieldSensitiveTestHelper;import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;importheros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;import heros.utilities.Statement;importheros.utilities.Statement;import heros.utilities.TestDebugger;importheros.utilities.TestDebugger;import heros.utilities.TestFact;importheros.utilities.TestFact;import heros.utilities.TestMethod;importheros.utilities.TestMethod;import heros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;importheros.utilities.FieldSensitiveTestHelper.TabulationProblemExchange;import java.util.Collection;importjava.util.Collection;import java.util.LinkedList;importjava.util.LinkedList;import com.google.common.collect.Lists;importcom.google.common.collect.Lists;import static heros.utilities.FieldSensitiveTestHelper.*;importstaticheros.utilities.FieldSensitiveTestHelper.*;@RunWith(Parameterized.class)@RunWith(Parameterized.class)public class BiDiFieldSensitiveIFDSSolverTest {publicclassBiDiFieldSensitiveIFDSSolverTest{ private FieldSensitiveTestHelper forwardHelper;privateFieldSensitiveTestHelperforwardHelper; private FieldSensitiveTestHelper backwardHelper;privateFieldSensitiveTestHelperbackwardHelper; private TabulationProblemExchange exchange;privateTabulationProblemExchangeexchange; private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;privateTestDebugger<String,TestFact,Statement,TestMethod,, InterproceduralCFGInterproceduralCFG<<StatementStatement,, TestMethodTestMethod>>>debugger; private TestDebugger<String, TestFact, Statement, TestMethod> debugger;privateTestDebugger<String,TestFact,Statement,TestMethod>debugger;  public BiDiFieldSensitiveIFDSSolverTest(TabulationProblemExchange exchange) {publicBiDiFieldSensitiveIFDSSolverTest(TabulationProblemExchangeexchange){ this.exchange = exchange;this.exchange=exchange; debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();debugger=newTestDebugger<String,TestFact,Statement,TestMethod,, InterproceduralCFGInterproceduralCFG<<StatementStatement,, TestMethodTestMethod>>();> debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();debugger=newTestDebugger<String,TestFact,Statement,TestMethod>(); forwardHelper = new FieldSensitiveTestHelper(debugger);forwardHelper=newFieldSensitiveTestHelper(debugger); backwardHelper = new FieldSensitiveTestHelper(debugger);backwardHelper=newFieldSensitiveTestHelper(debugger); }}








test/heros/fieldsens/ControlFlowJoinResolverTest.java








View file @ 7b66dd07






......@@ -64,7 +64,8 @@ public class ControlFlowJoinResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 joinStmt = new Statement("joinStmt");










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(analyzer, joinStmt);










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt, 










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -109,7 +110,7 @@ public class ControlFlowJoinResolverTest {









 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), resolver));










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));










 verify(callback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 



......@@ -125,7 +126,7 @@ public class ControlFlowJoinResolverTest {









 @Override










 public boolean matches(Object argument) {










 ControlFlowJoinResolver resolver = (ControlFlowJoinResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 }










 }










}












test/heros/fieldsens/ControlFlowJoinResolverTest.java








View file @ 7b66dd07








test/heros/fieldsens/ControlFlowJoinResolverTest.java










View file @ 7b66dd07


7b66dd07



......@@ -64,7 +64,8 @@ public class ControlFlowJoinResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 joinStmt = new Statement("joinStmt");










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(analyzer, joinStmt);










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt, 










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -109,7 +110,7 @@ public class ControlFlowJoinResolverTest {









 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), resolver));










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));










 verify(callback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 



......@@ -125,7 +126,7 @@ public class ControlFlowJoinResolverTest {









 @Override










 public boolean matches(Object argument) {










 ControlFlowJoinResolver resolver = (ControlFlowJoinResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 }










 }










}






......@@ -64,7 +64,8 @@ public class ControlFlowJoinResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 joinStmt = new Statement("joinStmt");










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(analyzer, joinStmt);










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt, 










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -109,7 +110,7 @@ public class ControlFlowJoinResolverTest {









 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), resolver));










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));










 verify(callback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 



......@@ -125,7 +126,7 @@ public class ControlFlowJoinResolverTest {









 @Override










 public boolean matches(Object argument) {










 ControlFlowJoinResolver resolver = (ControlFlowJoinResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getJoinStmt().equals(joinStmt);










 }










 }










}


 public void before() {publicvoidbefore(){ analyzer = mock(PerAccessPathMethodAnalyzer.class);analyzer=mock(PerAccessPathMethodAnalyzer.class); joinStmt = new Statement("joinStmt");joinStmt=newStatement("joinStmt"); sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(analyzer, joinStmt);sut=newControlFlowJoinResolver<String,TestFact,Statement,TestMethod>(analyzer,joinStmt); sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt, sut=newControlFlowJoinResolver<String,TestFact,Statement,TestMethod>(mock(FactMergeHandler.class),analyzer,joinStmt, new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());newDebugger.NullDebugger<String,TestFact,Statement,TestMethod>()); fact = new TestFact("value");fact=newTestFact("value"); callback = mock(InterestCallback.class);callback=mock(InterestCallback.class); callEdgeResolver = mock(CallEdgeResolver.class);callEdgeResolver=mock(CallEdgeResolver.class); sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), resolver));sut.addIncoming(newWrappedFact<String,TestFact,Statement,TestMethod>(fact,createAccessPath(),resolver)); sut.resolve(getDeltaConstraint("a"), callback);sut.resolve(getDeltaConstraint("a"),callback);  verify(callback).interest(eq(analyzer), argThat(new ResolverArgumentMatcher(createAccessPath("a"))));verify(callback).interest(eq(analyzer),argThatargThat((newnew ResolverArgumentMatcherResolverArgumentMatcher((createAccessPathcreateAccessPath(("a""a"))));)) verify(callback).interest(eq(analyzer), eq(nestedResolver));verify(callback).interest(eq(analyzer),eqeq((nestedResolvernestedResolver)); }}   @Override@Override public boolean matches(Object argument) {publicbooleanmatches(Objectargument){ ControlFlowJoinResolver resolver = (ControlFlowJoinResolver) argument;ControlFlowJoinResolverresolver=(ControlFlowJoinResolver)argument; return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getJoinStmt().equals(joinStmt);returnresolver.isInterestGiven()&&resolver.getResolvedAccessPathgetR().()equals(accPath)&&resolver.getJoinStmt().equals(joinStmt); return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getJoinStmt().equals(joinStmt);returnresolver.isInterestGiven()&&resolver.resolvedAccessPathr.equals(accPath)&&resolver.getJoinStmt().equals(joinStmt); }} }}}}








test/heros/fieldsens/FieldSensitiveIFDSSolverTest.java








View file @ 7b66dd07






......@@ -30,12 +30,12 @@ import static heros.utilities.FieldSensitiveTestHelper.*;









public class FieldSensitiveIFDSSolverTest {





















 private FieldSensitiveTestHelper helper;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 @Before










 public void before() {










 System.err.println("-----");










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 helper = new FieldSensitiveTestHelper(debugger);










 }










 



......@@ -157,7 +157,7 @@ public class FieldSensitiveIFDSSolverTest {









 helper.method("bar",










 startPoints("c"),










 normalStmt("c", flow("2", readField("f"), "3")).succ("d"),










 exitStmt("d").returns(over("b"), to("e"), flow("3", "4")).returns(over("e"), to("f"), flow("3", "5")));










 exitStmt("d").returns(over("b"), to("e"), flow(2, "3", "4")).returns(over("e"), to("f"), flow(2, "3", "5")));










 










 helper.runSolver(false, "a");










 }



......@@ -718,7 +718,6 @@ public class FieldSensitiveIFDSSolverTest {









 normalStmt("f", flow("6", readField("f"), "7")).succ("g"),










 normalStmt("g", kill("7")).succ("h"));










 










 










 helper.runSolver(true, "a");










 }










 



......@@ -1176,4 +1175,109 @@ public class FieldSensitiveIFDSSolverTest {









 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void readMultipleAbstractedFields() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("0", prependField("f"), "1")).succ("b1").succ("b2"),










 normalStmt("b1", kill("1")).succ("c"),










 normalStmt("b2", flow("1", prependField("g"), "1")).succ("c"),










 normalStmt("c", flow("1", "2")).succ("d"),










 normalStmt("d", flow("2", "2")).succ("e1").succ("e2"),










 normalStmt("e1", flow("2", "3")).succ("f"),










 normalStmt("e2", kill("2")).succ("f"),










 normalStmt("f", flow("3", readField("g"), "4")).succ("g"),










 normalStmt("g", flow("4", readField("f"), "5")).succ("h"),










 normalStmt("h", kill("5")).succ("i"));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void intraproceduralStateExplosionInline0Resolver() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void intraproceduralStateExplosion() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("x"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void nestedResolversShouldFormAGraph() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("f"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b1").succ("b2"),










 normalStmt("b1", flow("1", overwriteField("x"), "1")).succ("c"),










 normalStmt("b2", flow("1", overwriteField("y"), "1")).succ("c"),










 normalStmt("c", flow(2, "1", "1")).succ("d1").succ("d2"),










 normalStmt("d1", flow(2, "1", overwriteField("x"), "1")).succ("e"),










 normalStmt("d2", flow(2, "1", overwriteField("y"), "1")).succ("e"),










 normalStmt("e", flow(3, "1", "1")).succ("f"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void maintainCallingContextInCtrlFlowJoin() {










 helper.method("main",










 startPoints("a"),










 normalStmt("a", flow("0", "1")).succ("b1").succ("b2"),










 callSite("b1").calls("foo", flow("1", prependField("f"), "2")).retSite("c1", kill("1")),










 callSite("b2").calls("foo", flow("1", "2")).retSite("c2", kill("1")),










 normalStmt("c1", kill("3")).succ("d"),










 normalStmt("c2", flow("3", readField("f"), "4")).succ("d"),










 normalStmt("d", kill("4")).succ("e"));










 










 helper.method("foo", 










 startPoints("f"),










 normalStmt("f", flow("2", "2")).succ("g").succ("f"),










 exitStmt("g").returns(over("b1"), to("c1"), flow("2", "3")).returns(over("b2"), to("c2"), flow("2", "3")));










 










 helper.runSolver(false, "a");










 }










}












test/heros/fieldsens/FieldSensitiveIFDSSolverTest.java








View file @ 7b66dd07








test/heros/fieldsens/FieldSensitiveIFDSSolverTest.java










View file @ 7b66dd07


7b66dd07



......@@ -30,12 +30,12 @@ import static heros.utilities.FieldSensitiveTestHelper.*;









public class FieldSensitiveIFDSSolverTest {





















 private FieldSensitiveTestHelper helper;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 @Before










 public void before() {










 System.err.println("-----");










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 helper = new FieldSensitiveTestHelper(debugger);










 }










 



......@@ -157,7 +157,7 @@ public class FieldSensitiveIFDSSolverTest {









 helper.method("bar",










 startPoints("c"),










 normalStmt("c", flow("2", readField("f"), "3")).succ("d"),










 exitStmt("d").returns(over("b"), to("e"), flow("3", "4")).returns(over("e"), to("f"), flow("3", "5")));










 exitStmt("d").returns(over("b"), to("e"), flow(2, "3", "4")).returns(over("e"), to("f"), flow(2, "3", "5")));










 










 helper.runSolver(false, "a");










 }



......@@ -718,7 +718,6 @@ public class FieldSensitiveIFDSSolverTest {









 normalStmt("f", flow("6", readField("f"), "7")).succ("g"),










 normalStmt("g", kill("7")).succ("h"));










 










 










 helper.runSolver(true, "a");










 }










 



......@@ -1176,4 +1175,109 @@ public class FieldSensitiveIFDSSolverTest {









 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void readMultipleAbstractedFields() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("0", prependField("f"), "1")).succ("b1").succ("b2"),










 normalStmt("b1", kill("1")).succ("c"),










 normalStmt("b2", flow("1", prependField("g"), "1")).succ("c"),










 normalStmt("c", flow("1", "2")).succ("d"),










 normalStmt("d", flow("2", "2")).succ("e1").succ("e2"),










 normalStmt("e1", flow("2", "3")).succ("f"),










 normalStmt("e2", kill("2")).succ("f"),










 normalStmt("f", flow("3", readField("g"), "4")).succ("g"),










 normalStmt("g", flow("4", readField("f"), "5")).succ("h"),










 normalStmt("h", kill("5")).succ("i"));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void intraproceduralStateExplosionInline0Resolver() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void intraproceduralStateExplosion() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("x"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void nestedResolversShouldFormAGraph() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("f"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b1").succ("b2"),










 normalStmt("b1", flow("1", overwriteField("x"), "1")).succ("c"),










 normalStmt("b2", flow("1", overwriteField("y"), "1")).succ("c"),










 normalStmt("c", flow(2, "1", "1")).succ("d1").succ("d2"),










 normalStmt("d1", flow(2, "1", overwriteField("x"), "1")).succ("e"),










 normalStmt("d2", flow(2, "1", overwriteField("y"), "1")).succ("e"),










 normalStmt("e", flow(3, "1", "1")).succ("f"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void maintainCallingContextInCtrlFlowJoin() {










 helper.method("main",










 startPoints("a"),










 normalStmt("a", flow("0", "1")).succ("b1").succ("b2"),










 callSite("b1").calls("foo", flow("1", prependField("f"), "2")).retSite("c1", kill("1")),










 callSite("b2").calls("foo", flow("1", "2")).retSite("c2", kill("1")),










 normalStmt("c1", kill("3")).succ("d"),










 normalStmt("c2", flow("3", readField("f"), "4")).succ("d"),










 normalStmt("d", kill("4")).succ("e"));










 










 helper.method("foo", 










 startPoints("f"),










 normalStmt("f", flow("2", "2")).succ("g").succ("f"),










 exitStmt("g").returns(over("b1"), to("c1"), flow("2", "3")).returns(over("b2"), to("c2"), flow("2", "3")));










 










 helper.runSolver(false, "a");










 }










}






......@@ -30,12 +30,12 @@ import static heros.utilities.FieldSensitiveTestHelper.*;









public class FieldSensitiveIFDSSolverTest {





















 private FieldSensitiveTestHelper helper;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 @Before










 public void before() {










 System.err.println("-----");










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 helper = new FieldSensitiveTestHelper(debugger);










 }










 



......@@ -157,7 +157,7 @@ public class FieldSensitiveIFDSSolverTest {









 helper.method("bar",










 startPoints("c"),










 normalStmt("c", flow("2", readField("f"), "3")).succ("d"),










 exitStmt("d").returns(over("b"), to("e"), flow("3", "4")).returns(over("e"), to("f"), flow("3", "5")));










 exitStmt("d").returns(over("b"), to("e"), flow(2, "3", "4")).returns(over("e"), to("f"), flow(2, "3", "5")));










 










 helper.runSolver(false, "a");










 }



......@@ -718,7 +718,6 @@ public class FieldSensitiveIFDSSolverTest {









 normalStmt("f", flow("6", readField("f"), "7")).succ("g"),










 normalStmt("g", kill("7")).succ("h"));










 










 










 helper.runSolver(true, "a");










 }










 



......@@ -1176,4 +1175,109 @@ public class FieldSensitiveIFDSSolverTest {









 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void readMultipleAbstractedFields() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("0", prependField("f"), "1")).succ("b1").succ("b2"),










 normalStmt("b1", kill("1")).succ("c"),










 normalStmt("b2", flow("1", prependField("g"), "1")).succ("c"),










 normalStmt("c", flow("1", "2")).succ("d"),










 normalStmt("d", flow("2", "2")).succ("e1").succ("e2"),










 normalStmt("e1", flow("2", "3")).succ("f"),










 normalStmt("e2", kill("2")).succ("f"),










 normalStmt("f", flow("3", readField("g"), "4")).succ("g"),










 normalStmt("g", flow("4", readField("f"), "5")).succ("h"),










 normalStmt("h", kill("5")).succ("i"));










 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void intraproceduralStateExplosionInline0Resolver() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void intraproceduralStateExplosion() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("x"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b"),










 normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),










 normalStmt("c1", flow("1", "1")).succ("d"),










 normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),










 normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),










 normalStmt("e1", flow(2, "1", "1")).succ("f"),










 normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),










 normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),










 normalStmt("g1", flow(4, "1", "1")).succ("h"),










 normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),










 normalStmt("h", flow(8, "1", "1")).succ("i"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void nestedResolversShouldFormAGraph() {










 helper.method("main",










 startPoints("m_a"),










 normalStmt("m_a", flow("0", "1")).succ("m_b"),










 callSite("m_b").calls("foo", flow("1", prependField("f"), "1")));










 










 helper.method("foo",










 startPoints("a"),










 normalStmt("a", flow("1", "1")).succ("b1").succ("b2"),










 normalStmt("b1", flow("1", overwriteField("x"), "1")).succ("c"),










 normalStmt("b2", flow("1", overwriteField("y"), "1")).succ("c"),










 normalStmt("c", flow(2, "1", "1")).succ("d1").succ("d2"),










 normalStmt("d1", flow(2, "1", overwriteField("x"), "1")).succ("e"),










 normalStmt("d2", flow(2, "1", overwriteField("y"), "1")).succ("e"),










 normalStmt("e", flow(3, "1", "1")).succ("f"));










 










 helper.runSolver(false, "m_a");










 }










 










 @Test










 public void maintainCallingContextInCtrlFlowJoin() {










 helper.method("main",










 startPoints("a"),










 normalStmt("a", flow("0", "1")).succ("b1").succ("b2"),










 callSite("b1").calls("foo", flow("1", prependField("f"), "2")).retSite("c1", kill("1")),










 callSite("b2").calls("foo", flow("1", "2")).retSite("c2", kill("1")),










 normalStmt("c1", kill("3")).succ("d"),










 normalStmt("c2", flow("3", readField("f"), "4")).succ("d"),










 normalStmt("d", kill("4")).succ("e"));










 










 helper.method("foo", 










 startPoints("f"),










 normalStmt("f", flow("2", "2")).succ("g").succ("f"),










 exitStmt("g").returns(over("b1"), to("c1"), flow("2", "3")).returns(over("b2"), to("c2"), flow("2", "3")));










 










 helper.runSolver(false, "a");










 }










}


public class FieldSensitiveIFDSSolverTest {publicclassFieldSensitiveIFDSSolverTest{ private FieldSensitiveTestHelper helper;privateFieldSensitiveTestHelperhelper; private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;privateTestDebugger<String,TestFact,Statement,TestMethod,, InterproceduralCFGInterproceduralCFG<<StatementStatement,, TestMethodTestMethod>>>debugger; private TestDebugger<String, TestFact, Statement, TestMethod> debugger;privateTestDebugger<String,TestFact,Statement,TestMethod>debugger; @Before@Before public void before() {publicvoidbefore(){ System.err.println("-----");System.err.println("-----"); debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();debugger=newTestDebugger<String,TestFact,Statement,TestMethod,, InterproceduralCFGInterproceduralCFG<<StatementStatement,, TestMethodTestMethod>>();> debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();debugger=newTestDebugger<String,TestFact,Statement,TestMethod>(); helper = new FieldSensitiveTestHelper(debugger);helper=newFieldSensitiveTestHelper(debugger); }}  helper.method("bar",helper.method("bar", startPoints("c"),startPoints("c"), normalStmt("c", flow("2", readField("f"), "3")).succ("d"),normalStmt("c",flow("2",readField("f"),"3")).succ("d"), exitStmt("d").returns(over("b"), to("e"), flow("3", "4")).returns(over("e"), to("f"), flow("3", "5")));exitStmt("d").returns(over("b"),to("e"),flow("3","4")).returns(over("e"),to("f"),flow("3","5"))); exitStmt("d").returns(over("b"), to("e"), flow(2, "3", "4")).returns(over("e"), to("f"), flow(2, "3", "5")));exitStmt("d").returns(over("b"),to("e"),flow(22,, "3","4")).returns(over("e"),to("f"),flow(22,, "3","5")));  helper.runSolver(false, "a");helper.runSolver(false,"a"); }} normalStmt("f", flow("6", readField("f"), "7")).succ("g"),normalStmt("f",flow("6",readField("f"),"7")).succ("g"), normalStmt("g", kill("7")).succ("h"));normalStmt("g",kill("7")).succ("h"));   helper.runSolver(true, "a");helper.runSolver(true,"a"); }}   helper.runSolver(false, "a");helper.runSolver(false,"a"); }}  @Test@Test public void readMultipleAbstractedFields() {publicvoidreadMultipleAbstractedFields(){ helper.method("foo",helper.method("foo", startPoints("a"),startPoints("a"), normalStmt("a", flow("0", prependField("f"), "1")).succ("b1").succ("b2"),normalStmt("a",flow("0",prependField("f"),"1")).succ("b1").succ("b2"), normalStmt("b1", kill("1")).succ("c"),normalStmt("b1",kill("1")).succ("c"), normalStmt("b2", flow("1", prependField("g"), "1")).succ("c"),normalStmt("b2",flow("1",prependField("g"),"1")).succ("c"), normalStmt("c", flow("1", "2")).succ("d"),normalStmt("c",flow("1","2")).succ("d"), normalStmt("d", flow("2", "2")).succ("e1").succ("e2"),normalStmt("d",flow("2","2")).succ("e1").succ("e2"), normalStmt("e1", flow("2", "3")).succ("f"),normalStmt("e1",flow("2","3")).succ("f"), normalStmt("e2", kill("2")).succ("f"),normalStmt("e2",kill("2")).succ("f"), normalStmt("f", flow("3", readField("g"), "4")).succ("g"),normalStmt("f",flow("3",readField("g"),"4")).succ("g"), normalStmt("g", flow("4", readField("f"), "5")).succ("h"),normalStmt("g",flow("4",readField("f"),"5")).succ("h"), normalStmt("h", kill("5")).succ("i"));normalStmt("h",kill("5")).succ("i"));  helper.runSolver(false, "a");helper.runSolver(false,"a"); }}  @Test@Test public void intraproceduralStateExplosionInline0Resolver() {publicvoidintraproceduralStateExplosionInline0Resolver(){ helper.method("main",helper.method("main", startPoints("m_a"),startPoints("m_a"), normalStmt("m_a", flow("0", "1")).succ("m_b"),normalStmt("m_a",flow("0","1")).succ("m_b"), callSite("m_b").calls("foo", flow("1", "1")));callSite("m_b").calls("foo",flow("1","1")));  helper.method("foo",helper.method("foo", startPoints("a"),startPoints("a"), normalStmt("a", flow("1", "1")).succ("b"),normalStmt("a",flow("1","1")).succ("b"), normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),normalStmt("b",flow("1","1")).succ("c1").succ("c2"), normalStmt("c1", flow("1", "1")).succ("d"),normalStmt("c1",flow("1","1")).succ("d"), normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),normalStmt("c2",flow("1",overwriteField("f"),"1")).succ("d"), normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),normalStmt("d",flow(2,"1","1")).succ("e1").succ("e2"), normalStmt("e1", flow(2, "1", "1")).succ("f"),normalStmt("e1",flow(2,"1","1")).succ("f"), normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),normalStmt("e2",flow(2,"1",overwriteField("g"),"1")).succ("f"), normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),normalStmt("f",flow(4,"1","1")).succ("g1").succ("g2"), normalStmt("g1", flow(4, "1", "1")).succ("h"),normalStmt("g1",flow(4,"1","1")).succ("h"), normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),normalStmt("g2",flow(4,"1",overwriteField("h"),"1")).succ("h"), normalStmt("h", flow(8, "1", "1")).succ("i"));normalStmt("h",flow(8,"1","1")).succ("i"));  helper.runSolver(false, "m_a");helper.runSolver(false,"m_a"); }}  @Test@Test public void intraproceduralStateExplosion() {publicvoidintraproceduralStateExplosion(){ helper.method("main",helper.method("main", startPoints("m_a"),startPoints("m_a"), normalStmt("m_a", flow("0", "1")).succ("m_b"),normalStmt("m_a",flow("0","1")).succ("m_b"), callSite("m_b").calls("foo", flow("1", prependField("x"), "1")));callSite("m_b").calls("foo",flow("1",prependField("x"),"1")));  helper.method("foo",helper.method("foo", startPoints("a"),startPoints("a"), normalStmt("a", flow("1", "1")).succ("b"),normalStmt("a",flow("1","1")).succ("b"), normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),normalStmt("b",flow("1","1")).succ("c1").succ("c2"), normalStmt("c1", flow("1", "1")).succ("d"),normalStmt("c1",flow("1","1")).succ("d"), normalStmt("c2", flow("1", overwriteField("f"), "1")).succ("d"),normalStmt("c2",flow("1",overwriteField("f"),"1")).succ("d"), normalStmt("d", flow(2, "1", "1")).succ("e1").succ("e2"),normalStmt("d",flow(2,"1","1")).succ("e1").succ("e2"), normalStmt("e1", flow(2, "1", "1")).succ("f"),normalStmt("e1",flow(2,"1","1")).succ("f"), normalStmt("e2", flow(2, "1", overwriteField("g"), "1")).succ("f"),normalStmt("e2",flow(2,"1",overwriteField("g"),"1")).succ("f"), normalStmt("f", flow(4, "1", "1")).succ("g1").succ("g2"),normalStmt("f",flow(4,"1","1")).succ("g1").succ("g2"), normalStmt("g1", flow(4, "1", "1")).succ("h"),normalStmt("g1",flow(4,"1","1")).succ("h"), normalStmt("g2", flow(4, "1", overwriteField("h"), "1")).succ("h"),normalStmt("g2",flow(4,"1",overwriteField("h"),"1")).succ("h"), normalStmt("h", flow(8, "1", "1")).succ("i"));normalStmt("h",flow(8,"1","1")).succ("i"));  helper.runSolver(false, "m_a");helper.runSolver(false,"m_a"); }}  @Test@Test public void nestedResolversShouldFormAGraph() {publicvoidnestedResolversShouldFormAGraph(){ helper.method("main",helper.method("main", startPoints("m_a"),startPoints("m_a"), normalStmt("m_a", flow("0", "1")).succ("m_b"),normalStmt("m_a",flow("0","1")).succ("m_b"), callSite("m_b").calls("foo", flow("1", prependField("f"), "1")));callSite("m_b").calls("foo",flow("1",prependField("f"),"1")));  helper.method("foo",helper.method("foo", startPoints("a"),startPoints("a"), normalStmt("a", flow("1", "1")).succ("b1").succ("b2"),normalStmt("a",flow("1","1")).succ("b1").succ("b2"), normalStmt("b1", flow("1", overwriteField("x"), "1")).succ("c"),normalStmt("b1",flow("1",overwriteField("x"),"1")).succ("c"), normalStmt("b2", flow("1", overwriteField("y"), "1")).succ("c"),normalStmt("b2",flow("1",overwriteField("y"),"1")).succ("c"), normalStmt("c", flow(2, "1", "1")).succ("d1").succ("d2"),normalStmt("c",flow(2,"1","1")).succ("d1").succ("d2"), normalStmt("d1", flow(2, "1", overwriteField("x"), "1")).succ("e"),normalStmt("d1",flow(2,"1",overwriteField("x"),"1")).succ("e"), normalStmt("d2", flow(2, "1", overwriteField("y"), "1")).succ("e"),normalStmt("d2",flow(2,"1",overwriteField("y"),"1")).succ("e"), normalStmt("e", flow(3, "1", "1")).succ("f"));normalStmt("e",flow(3,"1","1")).succ("f"));  helper.runSolver(false, "m_a");helper.runSolver(false,"m_a"); }}  @Test@Test public void maintainCallingContextInCtrlFlowJoin() {publicvoidmaintainCallingContextInCtrlFlowJoin(){ helper.method("main",helper.method("main", startPoints("a"),startPoints("a"), normalStmt("a", flow("0", "1")).succ("b1").succ("b2"),normalStmt("a",flow("0","1")).succ("b1").succ("b2"), callSite("b1").calls("foo", flow("1", prependField("f"), "2")).retSite("c1", kill("1")),callSite("b1").calls("foo",flow("1",prependField("f"),"2")).retSite("c1",kill("1")), callSite("b2").calls("foo", flow("1", "2")).retSite("c2", kill("1")),callSite("b2").calls("foo",flow("1","2")).retSite("c2",kill("1")), normalStmt("c1", kill("3")).succ("d"),normalStmt("c1",kill("3")).succ("d"), normalStmt("c2", flow("3", readField("f"), "4")).succ("d"),normalStmt("c2",flow("3",readField("f"),"4")).succ("d"), normalStmt("d", kill("4")).succ("e"));normalStmt("d",kill("4")).succ("e"));  helper.method("foo", helper.method("foo", startPoints("f"),startPoints("f"), normalStmt("f", flow("2", "2")).succ("g").succ("f"),normalStmt("f",flow("2","2")).succ("g").succ("f"), exitStmt("g").returns(over("b1"), to("c1"), flow("2", "3")).returns(over("b2"), to("c2"), flow("2", "3")));exitStmt("g").returns(over("b1"),to("c1"),flow("2","3")).returns(over("b2"),to("c2"),flow("2","3")));  helper.runSolver(false, "a");helper.runSolver(false,"a"); }}}}








test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ 7b66dd07






......@@ -12,16 +12,20 @@ package heros.fieldsens;




















import static org.junit.Assert.assertEquals;










import static org.junit.Assert.assertTrue;










import static org.mockito.Mockito.*;





















import java.util.List;





















import heros.fieldsens.CallEdgeResolver;










import heros.fieldsens.InterestCallback;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.ReturnSiteResolver;










import static org.mockito.Matchers.any;










import static org.mockito.Matchers.argThat;










import static org.mockito.Matchers.eq;










import static org.mockito.Mockito.RETURNS_DEEP_STUBS;










import static org.mockito.Mockito.RETURNS_MOCKS;










import static org.mockito.Mockito.RETURNS_SMART_NULLS;










import static org.mockito.Mockito.doAnswer;










import static org.mockito.Mockito.mock;










import static org.mockito.Mockito.never;










import static org.mockito.Mockito.verify;










import static org.mockito.Mockito.when;










import static org.mockito.Mockito.withSettings;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;



......@@ -29,6 +33,8 @@ import heros.utilities.Statement;









import heros.utilities.TestFact;










import heros.utilities.TestMethod;





















import java.util.List;





















import org.junit.Before;










import org.junit.Test;










import org.mockito.ArgumentMatcher;



......@@ -68,7 +74,8 @@ public class ReturnSiteResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 returnSite = new Statement("returnSite");










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(analyzer, returnSite);










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite,










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -225,17 +232,17 @@ public class ReturnSiteResolverTest {









 doAnswer(new Answer() {










 @Override










 public Object answer(InvocationOnMock invocation) throws Throwable {










 ReturnSiteResolver<String, TestFact, Statement, TestMethod> resolver = (ReturnSiteResolver) invocation.getArguments()[1];










 Resolver<String, TestFact, Statement, TestMethod> resolver = (Resolver) invocation.getArguments()[1];










 resolver.resolve(getDeltaConstraint("b"), secondCallback);










 return null;










 }










 










 }).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));










 }).when(callback).interest(eq(analyzer), eq(nestedResolver));










 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(secondCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));










 verify(secondCallback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 @Test



......@@ -269,6 +276,18 @@ public class ReturnSiteResolverTest {









 verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));










 }










 










 @Test










 public void incomingZeroCallEdgeResolver() {










 Resolver<String, TestFact, Statement, TestMethod> resolver = mock(Resolver.class);










 ZeroCallEdgeResolver<String, TestFact, Statement, TestMethod> zeroResolver = mock(ZeroCallEdgeResolver.class); 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), zeroResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(resolver, never()).resolve(any(Constraint.class), any(InterestCallback.class));










 verify(callback, never()).interest(any(PerAccessPathMethodAnalyzer.class), any(Resolver.class));










 verify(callback, never()).canBeResolvedEmpty();










 }










 










 private class ReturnSiteResolverArgumentMatcher extends










 ArgumentMatcher<ReturnSiteResolver<String, TestFact, Statement, TestMethod>> {














......@@ -281,7 +300,7 @@ public class ReturnSiteResolverTest {









 @Override










 public boolean matches(Object argument) {










 ReturnSiteResolver resolver = (ReturnSiteResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getReturnSite().equals(returnSite);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getReturnSite().equals(returnSite);










 }










 }










}












test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ 7b66dd07








test/heros/fieldsens/ReturnSiteResolverTest.java










View file @ 7b66dd07


7b66dd07



......@@ -12,16 +12,20 @@ package heros.fieldsens;




















import static org.junit.Assert.assertEquals;










import static org.junit.Assert.assertTrue;










import static org.mockito.Mockito.*;





















import java.util.List;





















import heros.fieldsens.CallEdgeResolver;










import heros.fieldsens.InterestCallback;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.ReturnSiteResolver;










import static org.mockito.Matchers.any;










import static org.mockito.Matchers.argThat;










import static org.mockito.Matchers.eq;










import static org.mockito.Mockito.RETURNS_DEEP_STUBS;










import static org.mockito.Mockito.RETURNS_MOCKS;










import static org.mockito.Mockito.RETURNS_SMART_NULLS;










import static org.mockito.Mockito.doAnswer;










import static org.mockito.Mockito.mock;










import static org.mockito.Mockito.never;










import static org.mockito.Mockito.verify;










import static org.mockito.Mockito.when;










import static org.mockito.Mockito.withSettings;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;



......@@ -29,6 +33,8 @@ import heros.utilities.Statement;









import heros.utilities.TestFact;










import heros.utilities.TestMethod;





















import java.util.List;





















import org.junit.Before;










import org.junit.Test;










import org.mockito.ArgumentMatcher;



......@@ -68,7 +74,8 @@ public class ReturnSiteResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 returnSite = new Statement("returnSite");










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(analyzer, returnSite);










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite,










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -225,17 +232,17 @@ public class ReturnSiteResolverTest {









 doAnswer(new Answer() {










 @Override










 public Object answer(InvocationOnMock invocation) throws Throwable {










 ReturnSiteResolver<String, TestFact, Statement, TestMethod> resolver = (ReturnSiteResolver) invocation.getArguments()[1];










 Resolver<String, TestFact, Statement, TestMethod> resolver = (Resolver) invocation.getArguments()[1];










 resolver.resolve(getDeltaConstraint("b"), secondCallback);










 return null;










 }










 










 }).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));










 }).when(callback).interest(eq(analyzer), eq(nestedResolver));










 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(secondCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));










 verify(secondCallback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 @Test



......@@ -269,6 +276,18 @@ public class ReturnSiteResolverTest {









 verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));










 }










 










 @Test










 public void incomingZeroCallEdgeResolver() {










 Resolver<String, TestFact, Statement, TestMethod> resolver = mock(Resolver.class);










 ZeroCallEdgeResolver<String, TestFact, Statement, TestMethod> zeroResolver = mock(ZeroCallEdgeResolver.class); 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), zeroResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(resolver, never()).resolve(any(Constraint.class), any(InterestCallback.class));










 verify(callback, never()).interest(any(PerAccessPathMethodAnalyzer.class), any(Resolver.class));










 verify(callback, never()).canBeResolvedEmpty();










 }










 










 private class ReturnSiteResolverArgumentMatcher extends










 ArgumentMatcher<ReturnSiteResolver<String, TestFact, Statement, TestMethod>> {














......@@ -281,7 +300,7 @@ public class ReturnSiteResolverTest {









 @Override










 public boolean matches(Object argument) {










 ReturnSiteResolver resolver = (ReturnSiteResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getReturnSite().equals(returnSite);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getReturnSite().equals(returnSite);










 }










 }










}






......@@ -12,16 +12,20 @@ package heros.fieldsens;




















import static org.junit.Assert.assertEquals;










import static org.junit.Assert.assertTrue;










import static org.mockito.Mockito.*;





















import java.util.List;





















import heros.fieldsens.CallEdgeResolver;










import heros.fieldsens.InterestCallback;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.ReturnSiteResolver;










import static org.mockito.Matchers.any;










import static org.mockito.Matchers.argThat;










import static org.mockito.Matchers.eq;










import static org.mockito.Mockito.RETURNS_DEEP_STUBS;










import static org.mockito.Mockito.RETURNS_MOCKS;










import static org.mockito.Mockito.RETURNS_SMART_NULLS;










import static org.mockito.Mockito.doAnswer;










import static org.mockito.Mockito.mock;










import static org.mockito.Mockito.never;










import static org.mockito.Mockito.verify;










import static org.mockito.Mockito.when;










import static org.mockito.Mockito.withSettings;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;



......@@ -29,6 +33,8 @@ import heros.utilities.Statement;









import heros.utilities.TestFact;










import heros.utilities.TestMethod;





















import java.util.List;





















import org.junit.Before;










import org.junit.Test;










import org.mockito.ArgumentMatcher;



......@@ -68,7 +74,8 @@ public class ReturnSiteResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 returnSite = new Statement("returnSite");










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(analyzer, returnSite);










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite,










 new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......@@ -225,17 +232,17 @@ public class ReturnSiteResolverTest {









 doAnswer(new Answer() {










 @Override










 public Object answer(InvocationOnMock invocation) throws Throwable {










 ReturnSiteResolver<String, TestFact, Statement, TestMethod> resolver = (ReturnSiteResolver) invocation.getArguments()[1];










 Resolver<String, TestFact, Statement, TestMethod> resolver = (Resolver) invocation.getArguments()[1];










 resolver.resolve(getDeltaConstraint("b"), secondCallback);










 return null;










 }










 










 }).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));










 }).when(callback).interest(eq(analyzer), eq(nestedResolver));










 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(secondCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));










 verify(secondCallback).interest(eq(analyzer), eq(nestedResolver));










 }










 










 @Test



......@@ -269,6 +276,18 @@ public class ReturnSiteResolverTest {









 verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));










 }










 










 @Test










 public void incomingZeroCallEdgeResolver() {










 Resolver<String, TestFact, Statement, TestMethod> resolver = mock(Resolver.class);










 ZeroCallEdgeResolver<String, TestFact, Statement, TestMethod> zeroResolver = mock(ZeroCallEdgeResolver.class); 










 sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), zeroResolver), resolver, getDelta());










 sut.resolve(getDeltaConstraint("a"), callback);










 










 verify(resolver, never()).resolve(any(Constraint.class), any(InterestCallback.class));










 verify(callback, never()).interest(any(PerAccessPathMethodAnalyzer.class), any(Resolver.class));










 verify(callback, never()).canBeResolvedEmpty();










 }










 










 private class ReturnSiteResolverArgumentMatcher extends










 ArgumentMatcher<ReturnSiteResolver<String, TestFact, Statement, TestMethod>> {














......@@ -281,7 +300,7 @@ public class ReturnSiteResolverTest {









 @Override










 public boolean matches(Object argument) {










 ReturnSiteResolver resolver = (ReturnSiteResolver) argument;










 return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getReturnSite().equals(returnSite);










 return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getReturnSite().equals(returnSite);










 }










 }










}


import static org.junit.Assert.assertEquals;importstaticorg.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;importstaticorg.junit.Assert.assertTrue;import static org.mockito.Mockito.*;importstaticorg.mockito.Mockito.*;import java.util.List;importjava.util.List;import heros.fieldsens.CallEdgeResolver;importheros.fieldsens.CallEdgeResolver;import heros.fieldsens.InterestCallback;importheros.fieldsens.InterestCallback;import heros.fieldsens.PerAccessPathMethodAnalyzer;importheros.fieldsens.PerAccessPathMethodAnalyzer;import heros.fieldsens.Resolver;importheros.fieldsens.Resolver;import heros.fieldsens.ReturnSiteResolver;importheros.fieldsens.ReturnSiteResolver;import static org.mockito.Matchers.any;importstaticorg.mockito.Matchers.any;import static org.mockito.Matchers.argThat;importstaticorg.mockito.Matchers.argThat;import static org.mockito.Matchers.eq;importstaticorg.mockito.Matchers.eq;import static org.mockito.Mockito.RETURNS_DEEP_STUBS;importstaticorg.mockito.Mockito.RETURNS_DEEP_STUBS;import static org.mockito.Mockito.RETURNS_MOCKS;importstaticorg.mockito.Mockito.RETURNS_MOCKS;import static org.mockito.Mockito.RETURNS_SMART_NULLS;importstaticorg.mockito.Mockito.RETURNS_SMART_NULLS;import static org.mockito.Mockito.doAnswer;importstaticorg.mockito.Mockito.doAnswer;import static org.mockito.Mockito.mock;importstaticorg.mockito.Mockito.mock;import static org.mockito.Mockito.never;importstaticorg.mockito.Mockito.never;import static org.mockito.Mockito.verify;importstaticorg.mockito.Mockito.verify;import static org.mockito.Mockito.when;importstaticorg.mockito.Mockito.when;import static org.mockito.Mockito.withSettings;importstaticorg.mockito.Mockito.withSettings;import heros.fieldsens.AccessPath.Delta;importheros.fieldsens.AccessPath.Delta;import heros.fieldsens.FlowFunction.Constraint;importheros.fieldsens.FlowFunction.Constraint;import heros.fieldsens.structs.DeltaConstraint;importheros.fieldsens.structs.DeltaConstraint;import heros.fieldsens.structs.WrappedFact;importheros.fieldsens.structs.WrappedFact;import heros.fieldsens.structs.WrappedFactAtStatement;importheros.fieldsens.structs.WrappedFactAtStatement;import heros.utilities.TestFact;importheros.utilities.TestFact;import heros.utilities.TestMethod;importheros.utilities.TestMethod;import java.util.List;importjava.util.List;import org.junit.Before;importorg.junit.Before;import org.junit.Test;importorg.junit.Test;import org.mockito.ArgumentMatcher;importorg.mockito.ArgumentMatcher; public void before() {publicvoidbefore(){ analyzer = mock(PerAccessPathMethodAnalyzer.class);analyzer=mock(PerAccessPathMethodAnalyzer.class); returnSite = new Statement("returnSite");returnSite=newStatement("returnSite"); sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(analyzer, returnSite);sut=newReturnSiteResolver<String,TestFact,Statement,TestMethod>(analyzer,returnSite); sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite,sut=newReturnSiteResolver<String,TestFact,Statement,TestMethod>(mock(FactMergeHandler.class),analyzer,returnSite, new Debugger.NullDebugger<String, TestFact, Statement, TestMethod>());newDebugger.NullDebugger<String,TestFact,Statement,TestMethod>()); fact = new TestFact("value");fact=newTestFact("value"); callback = mock(InterestCallback.class);callback=mock(InterestCallback.class); callEdgeResolver = mock(CallEdgeResolver.class);callEdgeResolver=mock(CallEdgeResolver.class); doAnswer(new Answer() {doAnswer(newAnswer(){ @Override@Override public Object answer(InvocationOnMock invocation) throws Throwable {publicObjectanswer(InvocationOnMockinvocation)throwsThrowable{ ReturnSiteResolver<String, TestFact, Statement, TestMethod> resolver = (ReturnSiteResolver) invocation.getArguments()[1];ReturnSiteResolverReturnSite<String,TestFact,Statement,TestMethod>resolver=(ReturnSiteResolverReturnSite)invocation.getArguments()[1]; Resolver<String, TestFact, Statement, TestMethod> resolver = (Resolver) invocation.getArguments()[1];Resolver<String,TestFact,Statement,TestMethod>resolver=(Resolver)invocation.getArguments()[1]; resolver.resolve(getDeltaConstraint("b"), secondCallback);resolver.resolve(getDeltaConstraint("b"),secondCallback); return null;returnnull; }}  }).when(callback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a"))));}).when(callback).interest(eq(analyzer),argThatargThat((newnew ReturnSiteResolverArgumentMatcherReturnSiArgumentMatcher((createAccessPathcreateAccessPath(("a""a"))));)) }).when(callback).interest(eq(analyzer), eq(nestedResolver));}).when(callback).interest(eq(analyzer),eqeq((nestedResolvernesd));  sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), callEdgeResolver), resolver, getDelta());sut.addIncoming(newWrappedFact<String,TestFact,Statement,TestMethod>(fact,createAccessPath(),callEdgeResolver),resolver,getDelta()); sut.resolve(getDeltaConstraint("a"), callback);sut.resolve(getDeltaConstraint("a"),callback);  verify(secondCallback).interest(eq(analyzer), argThat(new ReturnSiteResolverArgumentMatcher(createAccessPath("a", "b"))));verify(secondCallback).interest(eq(analyzer),argThatargThat((newnew ReturnSiteResolverArgumentMatcherReturnSiArgumentMatcher((createAccessPathcreateAccessPath(("a""a",, "b""b"))));)) verify(secondCallback).interest(eq(analyzer), eq(nestedResolver));verify(secondCallback).interest(eq(analyzer),eqeq((nestedResolvernesd)); }}  @Test@Test verify(resolver).resolve(eq(getDeltaConstraint("a")), any(InterestCallback.class));verify(resolver).resolve(eq(getDeltaConstraint("a")),any(InterestCallback.class)); }}  @Test@Test public void incomingZeroCallEdgeResolver() {publicvoidincomingZeroCallEdgeResolver(){ Resolver<String, TestFact, Statement, TestMethod> resolver = mock(Resolver.class);Resolver<String,TestFact,Statement,TestMethod>resolver=mock(Resolver.class); ZeroCallEdgeResolver<String, TestFact, Statement, TestMethod> zeroResolver = mock(ZeroCallEdgeResolver.class); ZeroCallEdgeResolver<String,TestFact,Statement,TestMethod>zeroResolver=mock(ZeroCallEdgeResolver.class); sut.addIncoming(new WrappedFact<String, TestFact, Statement, TestMethod>(fact, createAccessPath(), zeroResolver), resolver, getDelta());sut.addIncoming(newWrappedFact<String,TestFact,Statement,TestMethod>(fact,createAccessPath(),zeroResolver),resolver,getDelta()); sut.resolve(getDeltaConstraint("a"), callback);sut.resolve(getDeltaConstraint("a"),callback);  verify(resolver, never()).resolve(any(Constraint.class), any(InterestCallback.class));verify(resolver,never()).resolve(any(Constraint.class),any(InterestCallback.class)); verify(callback, never()).interest(any(PerAccessPathMethodAnalyzer.class), any(Resolver.class));verify(callback,never()).interest(any(PerAccessPathMethodAnalyzer.class),any(Resolver.class)); verify(callback, never()).canBeResolvedEmpty();verify(callback,never()).canBeResolvedEmpty(); }}  private class ReturnSiteResolverArgumentMatcher extendsprivateclassReturnSiteResolverArgumentMatcherextends ArgumentMatcher<ReturnSiteResolver<String, TestFact, Statement, TestMethod>> {ArgumentMatcher<ReturnSiteResolver<String,TestFact,Statement,TestMethod>>{ @Override@Override public boolean matches(Object argument) {publicbooleanmatches(Objectargument){ ReturnSiteResolver resolver = (ReturnSiteResolver) argument;ReturnSiteResolverresolver=(ReturnSiteResolver)argument; return resolver.isInterestGiven() && resolver.getResolvedAccessPath().equals(accPath) && resolver.getReturnSite().equals(returnSite);returnresolver.isInterestGiven()&&resolver.getResolvedAccessPathgetR().()equals(accPath)&&resolver.getReturnSite().equals(returnSite); return resolver.isInterestGiven() && resolver.resolvedAccessPath.equals(accPath) && resolver.getReturnSite().equals(returnSite);returnresolver.isInterestGiven()&&resolver.resolvedAccessPathr.equals(accPath)&&resolver.getReturnSite().equals(returnSite); }} }}}}








test/heros/utilities/FieldSensitiveTestHelper.java








View file @ 7b66dd07






......@@ -58,9 +58,9 @@ public class FieldSensitiveTestHelper {









 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, TestMethod> stmt2method = Maps.newHashMap();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger) {










 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod> debugger) {










 this.debugger = debugger;










 }














......@@ -266,6 +266,10 @@ public class FieldSensitiveTestHelper {









 if (edge.includeInCfg && edge.succUnit.equals(stmt))










 result.add(edge.unit);










 }










 for(Call2ReturnEdge edge : call2retEdges) {










 if(edge.includeInCfg && edge.returnSite.equals(stmt))










 result.add(edge.callSite);










 }










 return result;










 }














......












test/heros/utilities/FieldSensitiveTestHelper.java








View file @ 7b66dd07








test/heros/utilities/FieldSensitiveTestHelper.java










View file @ 7b66dd07


7b66dd07



......@@ -58,9 +58,9 @@ public class FieldSensitiveTestHelper {









 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, TestMethod> stmt2method = Maps.newHashMap();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger) {










 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod> debugger) {










 this.debugger = debugger;










 }














......@@ -266,6 +266,10 @@ public class FieldSensitiveTestHelper {









 if (edge.includeInCfg && edge.succUnit.equals(stmt))










 result.add(edge.unit);










 }










 for(Call2ReturnEdge edge : call2retEdges) {










 if(edge.includeInCfg && edge.returnSite.equals(stmt))










 result.add(edge.callSite);










 }










 return result;










 }














......






......@@ -58,9 +58,9 @@ public class FieldSensitiveTestHelper {









 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, TestMethod> stmt2method = Maps.newHashMap();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger) {










 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod> debugger) {










 this.debugger = debugger;










 }














......@@ -266,6 +266,10 @@ public class FieldSensitiveTestHelper {









 if (edge.includeInCfg && edge.succUnit.equals(stmt))










 result.add(edge.unit);










 }










 for(Call2ReturnEdge edge : call2retEdges) {










 if(edge.includeInCfg && edge.returnSite.equals(stmt))










 result.add(edge.callSite);










 }










 return result;










 }














......


 private List<ReturnEdge> returnEdges = Lists.newLinkedList();privateList<ReturnEdge>returnEdges=Lists.newLinkedList(); private Map<Statement, TestMethod> stmt2method = Maps.newHashMap();privateMap<Statement,TestMethod>stmt2method=Maps.newHashMap(); private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();privateMultiset<ExpectedFlowFunction>remainingFlowFunctions=HashMultiset.create(); private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;privateTestDebugger<String,TestFact,Statement,TestMethod,, InterproceduralCFGInterproceduralCFG<<StatementStatement,, TestMethodTestMethod>>>debugger; private TestDebugger<String, TestFact, Statement, TestMethod> debugger;privateTestDebugger<String,TestFact,Statement,TestMethod>debugger; public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger) {publicFieldSensitiveTestHelper(TestDebugger<String,TestFact,Statement,TestMethod,, InterproceduralCFGInterproceduralCFG<<StatementStatement,, TestMethodTestMethod>>>debugger){ public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod> debugger) {publicFieldSensitiveTestHelper(TestDebugger<String,TestFact,Statement,TestMethod>debugger){ this.debugger = debugger;this.debugger=debugger; }} if (edge.includeInCfg && edge.succUnit.equals(stmt))if(edge.includeInCfg&&edge.succUnit.equals(stmt)) result.add(edge.unit);result.add(edge.unit); }} for(Call2ReturnEdge edge : call2retEdges) {for(Call2ReturnEdgeedge:call2retEdges){ if(edge.includeInCfg && edge.returnSite.equals(stmt))if(edge.includeInCfg&&edge.returnSite.equals(stmt)) result.add(edge.callSite);result.add(edge.callSite); }} return result;returnresult; }}








test/heros/utilities/TestDebugger.java








View file @ 7b66dd07






......@@ -18,11 +18,15 @@ import com.google.common.collect.Sets;




















import heros.InterproceduralCFG;










import heros.fieldsens.Debugger;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










public class TestDebugger<Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 private JsonDocument root = new JsonDocument();










 private I icfg;










 private InterproceduralCFG<Stmt, Method> icfg;










 










 public void writeJsonDebugFile(String filename) {










 try {



......@@ -41,7 +45,7 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









	 * @see heros.alias.Debugger#setICFG(I)










	 */










 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 this.icfg = icfg;










 }














......@@ -108,4 +112,36 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 stmt(exitStmt).doc("returns").doc(returnSite.toString()).keyValue("flow", expectedFlowFunctionsToString);










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void askedToResolve(Resolver<Field, Fact, Stmt, Method> resolver, Constraint<Field> constraint) {










 










 }





















}












test/heros/utilities/TestDebugger.java








View file @ 7b66dd07








test/heros/utilities/TestDebugger.java










View file @ 7b66dd07


7b66dd07



......@@ -18,11 +18,15 @@ import com.google.common.collect.Sets;




















import heros.InterproceduralCFG;










import heros.fieldsens.Debugger;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










public class TestDebugger<Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 private JsonDocument root = new JsonDocument();










 private I icfg;










 private InterproceduralCFG<Stmt, Method> icfg;










 










 public void writeJsonDebugFile(String filename) {










 try {



......@@ -41,7 +45,7 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









	 * @see heros.alias.Debugger#setICFG(I)










	 */










 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 this.icfg = icfg;










 }














......@@ -108,4 +112,36 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 stmt(exitStmt).doc("returns").doc(returnSite.toString()).keyValue("flow", expectedFlowFunctionsToString);










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void askedToResolve(Resolver<Field, Fact, Stmt, Method> resolver, Constraint<Field> constraint) {










 










 }





















}






......@@ -18,11 +18,15 @@ import com.google.common.collect.Sets;




















import heros.InterproceduralCFG;










import heros.fieldsens.Debugger;










import heros.fieldsens.FlowFunction.Constraint;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










public class TestDebugger<Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 private JsonDocument root = new JsonDocument();










 private I icfg;










 private InterproceduralCFG<Stmt, Method> icfg;










 










 public void writeJsonDebugFile(String filename) {










 try {



......@@ -41,7 +45,7 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









	 * @see heros.alias.Debugger#setICFG(I)










	 */










 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 this.icfg = icfg;










 }














......@@ -108,4 +112,36 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 stmt(exitStmt).doc("returns").doc(returnSite.toString()).keyValue("flow", expectedFlowFunctionsToString);










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















 @Override










 public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,










 WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void askedToResolve(Resolver<Field, Fact, Stmt, Method> resolver, Constraint<Field> constraint) {










 










 }





















}


import heros.InterproceduralCFG;importheros.InterproceduralCFG;import heros.fieldsens.Debugger;importheros.fieldsens.Debugger;import heros.fieldsens.FlowFunction.Constraint;importheros.fieldsens.FlowFunction.Constraint;import heros.fieldsens.PerAccessPathMethodAnalyzer;importheros.fieldsens.PerAccessPathMethodAnalyzer;import heros.fieldsens.Resolver;importheros.fieldsens.Resolver;import heros.fieldsens.structs.WrappedFactAtStatement;importheros.fieldsens.structs.WrappedFactAtStatement;public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {publicclassTestDebugger<Field,Fact,Stmt,Method,, II extendsextends InterproceduralCFGInterproceduralCFG<<StmtStmt,, MethodMethod>>>implementsDebugger<Field,Fact,Stmt,Method,, II>{public class TestDebugger<Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {publicclassTestDebugger<Field,Fact,Stmt,Method>implementsDebugger<Field,Fact,Stmt,Method>{ private JsonDocument root = new JsonDocument();privateJsonDocumentroot=newJsonDocument(); private I icfg;privateIicfg; private InterproceduralCFG<Stmt, Method> icfg;privateInterproceduralCFGnterproceduralCFG<<StmtStmt,, MethodMethod>>icfg;  public void writeJsonDebugFile(String filename) {publicvoidwriteJsonDebugFile(Stringfilename){ try {try{	 * @see heros.alias.Debugger#setICFG(I)	 * @see heros.alias.Debugger#setICFG(I)	 */	 */ @Override@Override public void setICFG(I icfg) {publicvoidsetICFG(Iicfg){ public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {publicvoidsetICFG(InterproceduralCFGnterproceduralCFG<<StmtStmt,, MethodMethod>>icfg){ this.icfg = icfg;this.icfg=icfg; }} stmt(exitStmt).doc("returns").doc(returnSite.toString()).keyValue("flow", expectedFlowFunctionsToString);stmt(exitStmt).doc("returns").doc(returnSite.toString()).keyValue("flow",expectedFlowFunctionsToString); }} @Override@Override public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {publicvoidedgeTo(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt){  }} @Override@Override public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {publicvoidnewResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,Resolver<Field,Fact,Stmt,Method>resolver){  }} @Override@Override public void newJob(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {publicvoidnewJob(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt){  }} @Override@Override public void jobStarted(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,publicvoidjobStarted(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt){  }} @Override@Override public void jobFinished(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer,publicvoidjobFinished(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt){  }} @Override@Override public void askedToResolve(Resolver<Field, Fact, Stmt, Method> resolver, Constraint<Field> constraint) {publicvoidaskedToResolve(Resolver<Field,Fact,Stmt,Method>resolver,Constraint<Field>constraint){  }}}}








test/heros/utilities/TestHelper.java








View file @ 7b66dd07






......@@ -70,7 +70,7 @@ public class TestHelper {









 return result;










 }





















 @SafeVarargs










 @SuppressWarnings("unchecked")










 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt, ExpectedFlowFunction<JoinableFact>...flowFunctions) {










 return new NormalStmtBuilder(new Statement(stmt), flowFunctions);










 }



......












test/heros/utilities/TestHelper.java








View file @ 7b66dd07








test/heros/utilities/TestHelper.java










View file @ 7b66dd07


7b66dd07



......@@ -70,7 +70,7 @@ public class TestHelper {









 return result;










 }





















 @SafeVarargs










 @SuppressWarnings("unchecked")










 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt, ExpectedFlowFunction<JoinableFact>...flowFunctions) {










 return new NormalStmtBuilder(new Statement(stmt), flowFunctions);










 }



......






......@@ -70,7 +70,7 @@ public class TestHelper {









 return result;










 }





















 @SafeVarargs










 @SuppressWarnings("unchecked")










 public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt, ExpectedFlowFunction<JoinableFact>...flowFunctions) {










 return new NormalStmtBuilder(new Statement(stmt), flowFunctions);










 }



......


 return result;returnresult; }} @SafeVarargs@SafeVarargsafeVarargs @SuppressWarnings("unchecked")@SuppressWarningsuppressWarnings(("unchecked""unchecked")) public static EdgeBuilder.NormalStmtBuilder normalStmt(String stmt, ExpectedFlowFunction<JoinableFact>...flowFunctions) {publicstaticEdgeBuilder.NormalStmtBuildernormalStmt(Stringstmt,ExpectedFlowFunction<JoinableFact>...flowFunctions){ return new NormalStmtBuilder(new Statement(stmt), flowFunctions);returnnewNormalStmtBuilder(newStatement(stmt),flowFunctions); }}



Prev


1


2


Next





Prev

1

2

Next











Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






