



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

0a1e0ff5















Commit
0a1e0ff5


authored
Jan 25, 2013
by


Marc-André Laverdière



Browse files




Fixed race condition in IDESolver and simplified the code







parent
cf6a08d3













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 0a1e0ff5













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * Copyright (c) 2013 Tata Consultancy Services & École Polytechnique de Montréal










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at



......@@ -7,6 +8,7 @@









 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 *     Marc-André Laverdière-Papineau - Fixed race condition










 ******************************************************************************/










package heros.solver;














......@@ -25,21 +27,18 @@ import heros.SynchronizedBy;









import heros.ZeroedFlowFunctions;










import heros.edgefunc.EdgeIdentity;





















import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Iterator;










import java.util.LinkedHashSet;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ExecutorService;










import java.util.concurrent.Executors;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;










import java.util.concurrent.atomic.AtomicInteger;










import java.util.concurrent.atomic.AtomicLong;





















import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;



......@@ -73,18 +72,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 protected ExecutorService executor;










 protected ThreadPoolExecutor executor;










 










 @DontSynchronize("only used by single thread")










 protected int numThreads;










 










 //the number of currently running tasks










 protected final AtomicInteger numTasks = new AtomicInteger();





















 @SynchronizedBy("consistent lock on field")










 //We are using a LinkedHashSet here to enforce FIFO semantics, which leads to a breath-first construction










 //of the exploded super graph. As we observed in experiments, this can speed up the construction.










 protected final Collection<PathEdge<N,D,M>> pathWorklist = new LinkedHashSet<PathEdge<N,D,M>>();










 protected final AtomicLong numTasks = new AtomicLong();










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 protected final JumpFunctions<N,D,V> jumpFn;



......@@ -116,9 +110,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 @DontSynchronize("stateless")










 protected final EdgeFunction<V> allTop;










 










 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 protected final List<Pair<N,D>> nodeWorklist = new LinkedList<Pair<N,D>>();





















 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 protected final Table<N,D,V> val = HashBasedTable.create(); 



......@@ -218,22 +209,31 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * @param numThreads The number of threads to use.










	 */










 public void solve(int numThreads) {










 if(numThreads<2) {










 this.executor = Executors.newSingleThreadExecutor();










 this.numThreads = 1;










 } else {










 this.executor = Executors.newFixedThreadPool(numThreads);










 this.numThreads = numThreads;










 }










 this.numThreads = numThreads < 2? 1: numThreads;










 this.executor = new ThreadPoolExecutor(1, numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 pathWorklist.add(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }










 {










 /**










		   * Forward-tabulates the same-level realizable paths and associated functions.










		   * Note that this is a little different from the original IFDS formulations because










		   * we can have statements that are, for instance, both "normal" and "exit" statements.










		   * This is for instance the case on a "throw" statement that may on the one hand










		   * lead to a catch block but on the other hand exit the method depending










		   * on the exception being thrown.










		   */










 final long before = System.currentTimeMillis();










 forwardComputeJumpFunctionsSLRPs(); 










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 durationFlowFunctionConstruction = System.currentTimeMillis() - before;










 }










 {



......@@ -247,43 +247,24 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 executor.shutdown();










 }





















 /**










	 * Forward-tabulates the same-level realizable paths and associated functions.










	 * Note that this is a little different from the original IFDS formulations because










	 * we can have statements that are, for instance, both "normal" and "exit" statements.










	 * This is for instance the case on a "throw" statement that may on the one hand










	 * lead to a catch block but on the other hand exit the method depending










	 * on the exception being thrown.










	 */










 private void forwardComputeJumpFunctionsSLRPs() {










 while(true) {










 










 synchronized (pathWorklist) {










 if(!pathWorklist.isEmpty()) {










 //pop edge










 Iterator<PathEdge<N,D,M>> iter = pathWorklist.iterator();










 PathEdge<N,D,M> edge = iter.next();










 iter.remove();










 numTasks.getAndIncrement();





















 //dispatch processing of edge (potentially in a different thread)










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 } else if(numTasks.intValue()==0){










 //path worklist is empty; no running tasks, we are done










 return;










 } else {










 //the path worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 pathWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 }










 }










 /**










   * Dispatch the processing of a given edge. It may be executed in a different thread.










   * @param edge the edge to process










   */










 private void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 numTasks.getAndIncrement();










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }










 










 /**










   * Dispatch the processing of a given value. It may be executed in a different thread.










   * @param vpt










   */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 numTasks.getAndIncrement();










 executor.execute(vpt);










 }










 










 /**










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context.



......@@ -487,9 +468,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 if(newFunction) {










 PathEdge<N,D,M> edge = new PathEdge<N,D,M>(sourceVal, target, targetVal);










 synchronized (pathWorklist) {










 pathWorklist.add(edge);










 }










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {










 if(targetVal!=zeroValue) { 



......@@ -518,31 +497,17 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 nodeWorklist.add(superGraphNode);










 }










 while(true) {










 synchronized (nodeWorklist) {










 if(!nodeWorklist.isEmpty()) {










 //pop job










 Pair<N,D> nAndD = nodeWorklist.remove(0); 










 numTasks.getAndIncrement();










 










 //dispatch processing of job (potentially in a different thread)










 executor.execute(new ValuePropagationTask(nAndD));










 } else if(numTasks.intValue()==0) {










 //node worklist is empty; no running tasks, we are done










 break;










 } else {










 //the node worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 nodeWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads










 Set<N> allNonCallStartNodes = icfg.allNonCallStartNodes();



......@@ -552,7 +517,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for (N n : allNonCallStartNodes) {










 nonCallStartNodesArray[i] = n;










 i++;










 } 










 }










 //No need to keep track of the number of tasks scheduled here, since we call shutdown










 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }



......@@ -604,9 +570,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 V vPrime = valueLattice.join(valNHash,v);










 if(!vPrime.equals(valNHash)) {










 setVal(nHashN, nHashD, vPrime);










 synchronized (nodeWorklist) {










 nodeWorklist.add(new Pair<N,D>(nHashN,nHashD));










 }










 scheduleValueProcessing(new ValuePropagationTask(new Pair<N,D>(nHashN,nHashD)));










 }










 }










 }



......@@ -721,12 +685,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 processNormalFlow(edge);










 }










 }










 synchronized (pathWorklist) {










 numTasks.getAndDecrement();










 //potentially wake up waiting broker thread










 //(see forwardComputeJumpFunctionsSLRPs())










 pathWorklist.notify();










 }










 }










 }










 



......@@ -745,12 +703,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 if(icfg.isCallStmt(n)) {










 propagateValueAtCall(nAndD, n);










 }










 synchronized (nodeWorklist) {










 numTasks.getAndDecrement();










 //potentially wake up waiting broker thread










 //(see forwardComputeJumpFunctionsSLRPs())










 nodeWorklist.notify();










 }










 }










 }










 



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

0a1e0ff5















Commit
0a1e0ff5


authored
Jan 25, 2013
by


Marc-André Laverdière



Browse files




Fixed race condition in IDESolver and simplified the code







parent
cf6a08d3













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 0a1e0ff5













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * Copyright (c) 2013 Tata Consultancy Services & École Polytechnique de Montréal










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at



......@@ -7,6 +8,7 @@









 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 *     Marc-André Laverdière-Papineau - Fixed race condition










 ******************************************************************************/










package heros.solver;














......@@ -25,21 +27,18 @@ import heros.SynchronizedBy;









import heros.ZeroedFlowFunctions;










import heros.edgefunc.EdgeIdentity;





















import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Iterator;










import java.util.LinkedHashSet;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ExecutorService;










import java.util.concurrent.Executors;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;










import java.util.concurrent.atomic.AtomicInteger;










import java.util.concurrent.atomic.AtomicLong;





















import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;



......@@ -73,18 +72,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 protected ExecutorService executor;










 protected ThreadPoolExecutor executor;










 










 @DontSynchronize("only used by single thread")










 protected int numThreads;










 










 //the number of currently running tasks










 protected final AtomicInteger numTasks = new AtomicInteger();





















 @SynchronizedBy("consistent lock on field")










 //We are using a LinkedHashSet here to enforce FIFO semantics, which leads to a breath-first construction










 //of the exploded super graph. As we observed in experiments, this can speed up the construction.










 protected final Collection<PathEdge<N,D,M>> pathWorklist = new LinkedHashSet<PathEdge<N,D,M>>();










 protected final AtomicLong numTasks = new AtomicLong();










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 protected final JumpFunctions<N,D,V> jumpFn;



......@@ -116,9 +110,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 @DontSynchronize("stateless")










 protected final EdgeFunction<V> allTop;










 










 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 protected final List<Pair<N,D>> nodeWorklist = new LinkedList<Pair<N,D>>();





















 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 protected final Table<N,D,V> val = HashBasedTable.create(); 



......@@ -218,22 +209,31 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * @param numThreads The number of threads to use.










	 */










 public void solve(int numThreads) {










 if(numThreads<2) {










 this.executor = Executors.newSingleThreadExecutor();










 this.numThreads = 1;










 } else {










 this.executor = Executors.newFixedThreadPool(numThreads);










 this.numThreads = numThreads;










 }










 this.numThreads = numThreads < 2? 1: numThreads;










 this.executor = new ThreadPoolExecutor(1, numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 pathWorklist.add(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }










 {










 /**










		   * Forward-tabulates the same-level realizable paths and associated functions.










		   * Note that this is a little different from the original IFDS formulations because










		   * we can have statements that are, for instance, both "normal" and "exit" statements.










		   * This is for instance the case on a "throw" statement that may on the one hand










		   * lead to a catch block but on the other hand exit the method depending










		   * on the exception being thrown.










		   */










 final long before = System.currentTimeMillis();










 forwardComputeJumpFunctionsSLRPs(); 










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 durationFlowFunctionConstruction = System.currentTimeMillis() - before;










 }










 {



......@@ -247,43 +247,24 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 executor.shutdown();










 }





















 /**










	 * Forward-tabulates the same-level realizable paths and associated functions.










	 * Note that this is a little different from the original IFDS formulations because










	 * we can have statements that are, for instance, both "normal" and "exit" statements.










	 * This is for instance the case on a "throw" statement that may on the one hand










	 * lead to a catch block but on the other hand exit the method depending










	 * on the exception being thrown.










	 */










 private void forwardComputeJumpFunctionsSLRPs() {










 while(true) {










 










 synchronized (pathWorklist) {










 if(!pathWorklist.isEmpty()) {










 //pop edge










 Iterator<PathEdge<N,D,M>> iter = pathWorklist.iterator();










 PathEdge<N,D,M> edge = iter.next();










 iter.remove();










 numTasks.getAndIncrement();





















 //dispatch processing of edge (potentially in a different thread)










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 } else if(numTasks.intValue()==0){










 //path worklist is empty; no running tasks, we are done










 return;










 } else {










 //the path worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 pathWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 }










 }










 /**










   * Dispatch the processing of a given edge. It may be executed in a different thread.










   * @param edge the edge to process










   */










 private void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 numTasks.getAndIncrement();










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }










 










 /**










   * Dispatch the processing of a given value. It may be executed in a different thread.










   * @param vpt










   */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 numTasks.getAndIncrement();










 executor.execute(vpt);










 }










 










 /**










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context.



......@@ -487,9 +468,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 if(newFunction) {










 PathEdge<N,D,M> edge = new PathEdge<N,D,M>(sourceVal, target, targetVal);










 synchronized (pathWorklist) {










 pathWorklist.add(edge);










 }










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {










 if(targetVal!=zeroValue) { 



......@@ -518,31 +497,17 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 nodeWorklist.add(superGraphNode);










 }










 while(true) {










 synchronized (nodeWorklist) {










 if(!nodeWorklist.isEmpty()) {










 //pop job










 Pair<N,D> nAndD = nodeWorklist.remove(0); 










 numTasks.getAndIncrement();










 










 //dispatch processing of job (potentially in a different thread)










 executor.execute(new ValuePropagationTask(nAndD));










 } else if(numTasks.intValue()==0) {










 //node worklist is empty; no running tasks, we are done










 break;










 } else {










 //the node worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 nodeWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads










 Set<N> allNonCallStartNodes = icfg.allNonCallStartNodes();



......@@ -552,7 +517,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for (N n : allNonCallStartNodes) {










 nonCallStartNodesArray[i] = n;










 i++;










 } 










 }










 //No need to keep track of the number of tasks scheduled here, since we call shutdown










 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }



......@@ -604,9 +570,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 V vPrime = valueLattice.join(valNHash,v);










 if(!vPrime.equals(valNHash)) {










 setVal(nHashN, nHashD, vPrime);










 synchronized (nodeWorklist) {










 nodeWorklist.add(new Pair<N,D>(nHashN,nHashD));










 }










 scheduleValueProcessing(new ValuePropagationTask(new Pair<N,D>(nHashN,nHashD)));










 }










 }










 }



......@@ -721,12 +685,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 processNormalFlow(edge);










 }










 }










 synchronized (pathWorklist) {










 numTasks.getAndDecrement();










 //potentially wake up waiting broker thread










 //(see forwardComputeJumpFunctionsSLRPs())










 pathWorklist.notify();










 }










 }










 }










 



......@@ -745,12 +703,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 if(icfg.isCallStmt(n)) {










 propagateValueAtCall(nAndD, n);










 }










 synchronized (nodeWorklist) {










 numTasks.getAndDecrement();










 //potentially wake up waiting broker thread










 //(see forwardComputeJumpFunctionsSLRPs())










 nodeWorklist.notify();










 }










 }










 }










 



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

0a1e0ff5







Open sidebar



Joshua Garcia heros
Commits

0a1e0ff5




Open sidebar

Joshua Garcia heros
Commits

0a1e0ff5


Joshua GarciaherosherosCommits
0a1e0ff5








Commit
0a1e0ff5


authored
Jan 25, 2013
by


Marc-André Laverdière



Browse files




Fixed race condition in IDESolver and simplified the code







parent
cf6a08d3













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 0a1e0ff5













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * Copyright (c) 2013 Tata Consultancy Services & École Polytechnique de Montréal










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at



......@@ -7,6 +8,7 @@









 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 *     Marc-André Laverdière-Papineau - Fixed race condition










 ******************************************************************************/










package heros.solver;














......@@ -25,21 +27,18 @@ import heros.SynchronizedBy;









import heros.ZeroedFlowFunctions;










import heros.edgefunc.EdgeIdentity;





















import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Iterator;










import java.util.LinkedHashSet;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ExecutorService;










import java.util.concurrent.Executors;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;










import java.util.concurrent.atomic.AtomicInteger;










import java.util.concurrent.atomic.AtomicLong;





















import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;



......@@ -73,18 +72,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 protected ExecutorService executor;










 protected ThreadPoolExecutor executor;










 










 @DontSynchronize("only used by single thread")










 protected int numThreads;










 










 //the number of currently running tasks










 protected final AtomicInteger numTasks = new AtomicInteger();





















 @SynchronizedBy("consistent lock on field")










 //We are using a LinkedHashSet here to enforce FIFO semantics, which leads to a breath-first construction










 //of the exploded super graph. As we observed in experiments, this can speed up the construction.










 protected final Collection<PathEdge<N,D,M>> pathWorklist = new LinkedHashSet<PathEdge<N,D,M>>();










 protected final AtomicLong numTasks = new AtomicLong();










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 protected final JumpFunctions<N,D,V> jumpFn;



......@@ -116,9 +110,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 @DontSynchronize("stateless")










 protected final EdgeFunction<V> allTop;










 










 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 protected final List<Pair<N,D>> nodeWorklist = new LinkedList<Pair<N,D>>();





















 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 protected final Table<N,D,V> val = HashBasedTable.create(); 



......@@ -218,22 +209,31 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * @param numThreads The number of threads to use.










	 */










 public void solve(int numThreads) {










 if(numThreads<2) {










 this.executor = Executors.newSingleThreadExecutor();










 this.numThreads = 1;










 } else {










 this.executor = Executors.newFixedThreadPool(numThreads);










 this.numThreads = numThreads;










 }










 this.numThreads = numThreads < 2? 1: numThreads;










 this.executor = new ThreadPoolExecutor(1, numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 pathWorklist.add(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }










 {










 /**










		   * Forward-tabulates the same-level realizable paths and associated functions.










		   * Note that this is a little different from the original IFDS formulations because










		   * we can have statements that are, for instance, both "normal" and "exit" statements.










		   * This is for instance the case on a "throw" statement that may on the one hand










		   * lead to a catch block but on the other hand exit the method depending










		   * on the exception being thrown.










		   */










 final long before = System.currentTimeMillis();










 forwardComputeJumpFunctionsSLRPs(); 










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 durationFlowFunctionConstruction = System.currentTimeMillis() - before;










 }










 {



......@@ -247,43 +247,24 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 executor.shutdown();










 }





















 /**










	 * Forward-tabulates the same-level realizable paths and associated functions.










	 * Note that this is a little different from the original IFDS formulations because










	 * we can have statements that are, for instance, both "normal" and "exit" statements.










	 * This is for instance the case on a "throw" statement that may on the one hand










	 * lead to a catch block but on the other hand exit the method depending










	 * on the exception being thrown.










	 */










 private void forwardComputeJumpFunctionsSLRPs() {










 while(true) {










 










 synchronized (pathWorklist) {










 if(!pathWorklist.isEmpty()) {










 //pop edge










 Iterator<PathEdge<N,D,M>> iter = pathWorklist.iterator();










 PathEdge<N,D,M> edge = iter.next();










 iter.remove();










 numTasks.getAndIncrement();





















 //dispatch processing of edge (potentially in a different thread)










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 } else if(numTasks.intValue()==0){










 //path worklist is empty; no running tasks, we are done










 return;










 } else {










 //the path worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 pathWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 }










 }










 /**










   * Dispatch the processing of a given edge. It may be executed in a different thread.










   * @param edge the edge to process










   */










 private void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 numTasks.getAndIncrement();










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }










 










 /**










   * Dispatch the processing of a given value. It may be executed in a different thread.










   * @param vpt










   */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 numTasks.getAndIncrement();










 executor.execute(vpt);










 }










 










 /**










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context.



......@@ -487,9 +468,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 if(newFunction) {










 PathEdge<N,D,M> edge = new PathEdge<N,D,M>(sourceVal, target, targetVal);










 synchronized (pathWorklist) {










 pathWorklist.add(edge);










 }










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {










 if(targetVal!=zeroValue) { 



......@@ -518,31 +497,17 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 nodeWorklist.add(superGraphNode);










 }










 while(true) {










 synchronized (nodeWorklist) {










 if(!nodeWorklist.isEmpty()) {










 //pop job










 Pair<N,D> nAndD = nodeWorklist.remove(0); 










 numTasks.getAndIncrement();










 










 //dispatch processing of job (potentially in a different thread)










 executor.execute(new ValuePropagationTask(nAndD));










 } else if(numTasks.intValue()==0) {










 //node worklist is empty; no running tasks, we are done










 break;










 } else {










 //the node worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 nodeWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads










 Set<N> allNonCallStartNodes = icfg.allNonCallStartNodes();



......@@ -552,7 +517,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for (N n : allNonCallStartNodes) {










 nonCallStartNodesArray[i] = n;










 i++;










 } 










 }










 //No need to keep track of the number of tasks scheduled here, since we call shutdown










 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }



......@@ -604,9 +570,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 V vPrime = valueLattice.join(valNHash,v);










 if(!vPrime.equals(valNHash)) {










 setVal(nHashN, nHashD, vPrime);










 synchronized (nodeWorklist) {










 nodeWorklist.add(new Pair<N,D>(nHashN,nHashD));










 }










 scheduleValueProcessing(new ValuePropagationTask(new Pair<N,D>(nHashN,nHashD)));










 }










 }










 }



......@@ -721,12 +685,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 processNormalFlow(edge);










 }










 }










 synchronized (pathWorklist) {










 numTasks.getAndDecrement();










 //potentially wake up waiting broker thread










 //(see forwardComputeJumpFunctionsSLRPs())










 pathWorklist.notify();










 }










 }










 }










 



......@@ -745,12 +703,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 if(icfg.isCallStmt(n)) {










 propagateValueAtCall(nAndD, n);










 }










 synchronized (nodeWorklist) {










 numTasks.getAndDecrement();










 //potentially wake up waiting broker thread










 //(see forwardComputeJumpFunctionsSLRPs())










 nodeWorklist.notify();










 }










 }










 }










 



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
0a1e0ff5


authored
Jan 25, 2013
by


Marc-André Laverdière



Browse files




Fixed race condition in IDESolver and simplified the code







parent
cf6a08d3













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 0a1e0ff5













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * Copyright (c) 2013 Tata Consultancy Services & École Polytechnique de Montréal










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at



......@@ -7,6 +8,7 @@









 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 *     Marc-André Laverdière-Papineau - Fixed race condition










 ******************************************************************************/










package heros.solver;














......@@ -25,21 +27,18 @@ import heros.SynchronizedBy;









import heros.ZeroedFlowFunctions;










import heros.edgefunc.EdgeIdentity;





















import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Iterator;










import java.util.LinkedHashSet;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ExecutorService;










import java.util.concurrent.Executors;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;










import java.util.concurrent.atomic.AtomicInteger;










import java.util.concurrent.atomic.AtomicLong;





















import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;



......@@ -73,18 +72,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 protected ExecutorService executor;










 protected ThreadPoolExecutor executor;










 










 @DontSynchronize("only used by single thread")










 protected int numThreads;










 










 //the number of currently running tasks










 protected final AtomicInteger numTasks = new AtomicInteger();





















 @SynchronizedBy("consistent lock on field")










 //We are using a LinkedHashSet here to enforce FIFO semantics, which leads to a breath-first construction










 //of the exploded super graph. As we observed in experiments, this can speed up the construction.










 protected final Collection<PathEdge<N,D,M>> pathWorklist = new LinkedHashSet<PathEdge<N,D,M>>();










 protected final AtomicLong numTasks = new AtomicLong();










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 protected final JumpFunctions<N,D,V> jumpFn;



......@@ -116,9 +110,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 @DontSynchronize("stateless")










 protected final EdgeFunction<V> allTop;










 










 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 protected final List<Pair<N,D>> nodeWorklist = new LinkedList<Pair<N,D>>();





















 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 protected final Table<N,D,V> val = HashBasedTable.create(); 



......@@ -218,22 +209,31 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * @param numThreads The number of threads to use.










	 */










 public void solve(int numThreads) {










 if(numThreads<2) {










 this.executor = Executors.newSingleThreadExecutor();










 this.numThreads = 1;










 } else {










 this.executor = Executors.newFixedThreadPool(numThreads);










 this.numThreads = numThreads;










 }










 this.numThreads = numThreads < 2? 1: numThreads;










 this.executor = new ThreadPoolExecutor(1, numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 pathWorklist.add(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }










 {










 /**










		   * Forward-tabulates the same-level realizable paths and associated functions.










		   * Note that this is a little different from the original IFDS formulations because










		   * we can have statements that are, for instance, both "normal" and "exit" statements.










		   * This is for instance the case on a "throw" statement that may on the one hand










		   * lead to a catch block but on the other hand exit the method depending










		   * on the exception being thrown.










		   */










 final long before = System.currentTimeMillis();










 forwardComputeJumpFunctionsSLRPs(); 










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 durationFlowFunctionConstruction = System.currentTimeMillis() - before;










 }










 {



......@@ -247,43 +247,24 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 executor.shutdown();










 }





















 /**










	 * Forward-tabulates the same-level realizable paths and associated functions.










	 * Note that this is a little different from the original IFDS formulations because










	 * we can have statements that are, for instance, both "normal" and "exit" statements.










	 * This is for instance the case on a "throw" statement that may on the one hand










	 * lead to a catch block but on the other hand exit the method depending










	 * on the exception being thrown.










	 */










 private void forwardComputeJumpFunctionsSLRPs() {










 while(true) {










 










 synchronized (pathWorklist) {










 if(!pathWorklist.isEmpty()) {










 //pop edge










 Iterator<PathEdge<N,D,M>> iter = pathWorklist.iterator();










 PathEdge<N,D,M> edge = iter.next();










 iter.remove();










 numTasks.getAndIncrement();





















 //dispatch processing of edge (potentially in a different thread)










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 } else if(numTasks.intValue()==0){










 //path worklist is empty; no running tasks, we are done










 return;










 } else {










 //the path worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 pathWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 }










 }










 /**










   * Dispatch the processing of a given edge. It may be executed in a different thread.










   * @param edge the edge to process










   */










 private void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 numTasks.getAndIncrement();










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }










 










 /**










   * Dispatch the processing of a given value. It may be executed in a different thread.










   * @param vpt










   */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 numTasks.getAndIncrement();










 executor.execute(vpt);










 }










 










 /**










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context.



......@@ -487,9 +468,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 if(newFunction) {










 PathEdge<N,D,M> edge = new PathEdge<N,D,M>(sourceVal, target, targetVal);










 synchronized (pathWorklist) {










 pathWorklist.add(edge);










 }










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {










 if(targetVal!=zeroValue) { 



......@@ -518,31 +497,17 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 nodeWorklist.add(superGraphNode);










 }










 while(true) {










 synchronized (nodeWorklist) {










 if(!nodeWorklist.isEmpty()) {










 //pop job










 Pair<N,D> nAndD = nodeWorklist.remove(0); 










 numTasks.getAndIncrement();










 










 //dispatch processing of job (potentially in a different thread)










 executor.execute(new ValuePropagationTask(nAndD));










 } else if(numTasks.intValue()==0) {










 //node worklist is empty; no running tasks, we are done










 break;










 } else {










 //the node worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 nodeWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads










 Set<N> allNonCallStartNodes = icfg.allNonCallStartNodes();



......@@ -552,7 +517,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for (N n : allNonCallStartNodes) {










 nonCallStartNodesArray[i] = n;










 i++;










 } 










 }










 //No need to keep track of the number of tasks scheduled here, since we call shutdown










 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }



......@@ -604,9 +570,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 V vPrime = valueLattice.join(valNHash,v);










 if(!vPrime.equals(valNHash)) {










 setVal(nHashN, nHashD, vPrime);










 synchronized (nodeWorklist) {










 nodeWorklist.add(new Pair<N,D>(nHashN,nHashD));










 }










 scheduleValueProcessing(new ValuePropagationTask(new Pair<N,D>(nHashN,nHashD)));










 }










 }










 }



......@@ -721,12 +685,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 processNormalFlow(edge);










 }










 }










 synchronized (pathWorklist) {










 numTasks.getAndDecrement();










 //potentially wake up waiting broker thread










 //(see forwardComputeJumpFunctionsSLRPs())










 pathWorklist.notify();










 }










 }










 }










 



......@@ -745,12 +703,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 if(icfg.isCallStmt(n)) {










 propagateValueAtCall(nAndD, n);










 }










 synchronized (nodeWorklist) {










 numTasks.getAndDecrement();










 //potentially wake up waiting broker thread










 //(see forwardComputeJumpFunctionsSLRPs())










 nodeWorklist.notify();










 }










 }










 }










 



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
0a1e0ff5


authored
Jan 25, 2013
by


Marc-André Laverdière



Browse files



Commit
0a1e0ff5


authored
Jan 25, 2013
by


Marc-André Laverdière

0a1e0ff5authoredbyMarc-André Laverdière

Fixed race condition in IDESolver and simplified the code






parent
cf6a08d3
















parent
cf6a08d3





parent












Changes
1
1


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/solver/IDESolver.java








View file @ 0a1e0ff5













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * Copyright (c) 2013 Tata Consultancy Services & École Polytechnique de Montréal










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at



......@@ -7,6 +8,7 @@









 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 *     Marc-André Laverdière-Papineau - Fixed race condition










 ******************************************************************************/










package heros.solver;














......@@ -25,21 +27,18 @@ import heros.SynchronizedBy;









import heros.ZeroedFlowFunctions;










import heros.edgefunc.EdgeIdentity;





















import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Iterator;










import java.util.LinkedHashSet;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ExecutorService;










import java.util.concurrent.Executors;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;










import java.util.concurrent.atomic.AtomicInteger;










import java.util.concurrent.atomic.AtomicLong;





















import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;



......@@ -73,18 +72,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 protected ExecutorService executor;










 protected ThreadPoolExecutor executor;










 










 @DontSynchronize("only used by single thread")










 protected int numThreads;










 










 //the number of currently running tasks










 protected final AtomicInteger numTasks = new AtomicInteger();





















 @SynchronizedBy("consistent lock on field")










 //We are using a LinkedHashSet here to enforce FIFO semantics, which leads to a breath-first construction










 //of the exploded super graph. As we observed in experiments, this can speed up the construction.










 protected final Collection<PathEdge<N,D,M>> pathWorklist = new LinkedHashSet<PathEdge<N,D,M>>();










 protected final AtomicLong numTasks = new AtomicLong();










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 protected final JumpFunctions<N,D,V> jumpFn;



......@@ -116,9 +110,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 @DontSynchronize("stateless")










 protected final EdgeFunction<V> allTop;










 










 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 protected final List<Pair<N,D>> nodeWorklist = new LinkedList<Pair<N,D>>();





















 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 protected final Table<N,D,V> val = HashBasedTable.create(); 



......@@ -218,22 +209,31 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * @param numThreads The number of threads to use.










	 */










 public void solve(int numThreads) {










 if(numThreads<2) {










 this.executor = Executors.newSingleThreadExecutor();










 this.numThreads = 1;










 } else {










 this.executor = Executors.newFixedThreadPool(numThreads);










 this.numThreads = numThreads;










 }










 this.numThreads = numThreads < 2? 1: numThreads;










 this.executor = new ThreadPoolExecutor(1, numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 pathWorklist.add(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }










 {










 /**










		   * Forward-tabulates the same-level realizable paths and associated functions.










		   * Note that this is a little different from the original IFDS formulations because










		   * we can have statements that are, for instance, both "normal" and "exit" statements.










		   * This is for instance the case on a "throw" statement that may on the one hand










		   * lead to a catch block but on the other hand exit the method depending










		   * on the exception being thrown.










		   */










 final long before = System.currentTimeMillis();










 forwardComputeJumpFunctionsSLRPs(); 










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 durationFlowFunctionConstruction = System.currentTimeMillis() - before;










 }










 {



......@@ -247,43 +247,24 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 executor.shutdown();










 }





















 /**










	 * Forward-tabulates the same-level realizable paths and associated functions.










	 * Note that this is a little different from the original IFDS formulations because










	 * we can have statements that are, for instance, both "normal" and "exit" statements.










	 * This is for instance the case on a "throw" statement that may on the one hand










	 * lead to a catch block but on the other hand exit the method depending










	 * on the exception being thrown.










	 */










 private void forwardComputeJumpFunctionsSLRPs() {










 while(true) {










 










 synchronized (pathWorklist) {










 if(!pathWorklist.isEmpty()) {










 //pop edge










 Iterator<PathEdge<N,D,M>> iter = pathWorklist.iterator();










 PathEdge<N,D,M> edge = iter.next();










 iter.remove();










 numTasks.getAndIncrement();





















 //dispatch processing of edge (potentially in a different thread)










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 } else if(numTasks.intValue()==0){










 //path worklist is empty; no running tasks, we are done










 return;










 } else {










 //the path worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 pathWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 }










 }










 /**










   * Dispatch the processing of a given edge. It may be executed in a different thread.










   * @param edge the edge to process










   */










 private void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 numTasks.getAndIncrement();










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }










 










 /**










   * Dispatch the processing of a given value. It may be executed in a different thread.










   * @param vpt










   */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 numTasks.getAndIncrement();










 executor.execute(vpt);










 }










 










 /**










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context.



......@@ -487,9 +468,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 if(newFunction) {










 PathEdge<N,D,M> edge = new PathEdge<N,D,M>(sourceVal, target, targetVal);










 synchronized (pathWorklist) {










 pathWorklist.add(edge);










 }










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {










 if(targetVal!=zeroValue) { 



......@@ -518,31 +497,17 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 nodeWorklist.add(superGraphNode);










 }










 while(true) {










 synchronized (nodeWorklist) {










 if(!nodeWorklist.isEmpty()) {










 //pop job










 Pair<N,D> nAndD = nodeWorklist.remove(0); 










 numTasks.getAndIncrement();










 










 //dispatch processing of job (potentially in a different thread)










 executor.execute(new ValuePropagationTask(nAndD));










 } else if(numTasks.intValue()==0) {










 //node worklist is empty; no running tasks, we are done










 break;










 } else {










 //the node worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 nodeWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads










 Set<N> allNonCallStartNodes = icfg.allNonCallStartNodes();



......@@ -552,7 +517,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for (N n : allNonCallStartNodes) {










 nonCallStartNodesArray[i] = n;










 i++;










 } 










 }










 //No need to keep track of the number of tasks scheduled here, since we call shutdown










 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }



......@@ -604,9 +570,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 V vPrime = valueLattice.join(valNHash,v);










 if(!vPrime.equals(valNHash)) {










 setVal(nHashN, nHashD, vPrime);










 synchronized (nodeWorklist) {










 nodeWorklist.add(new Pair<N,D>(nHashN,nHashD));










 }










 scheduleValueProcessing(new ValuePropagationTask(new Pair<N,D>(nHashN,nHashD)));










 }










 }










 }



......@@ -721,12 +685,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 processNormalFlow(edge);










 }










 }










 synchronized (pathWorklist) {










 numTasks.getAndDecrement();










 //potentially wake up waiting broker thread










 //(see forwardComputeJumpFunctionsSLRPs())










 pathWorklist.notify();










 }










 }










 }










 



......@@ -745,12 +703,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 if(icfg.isCallStmt(n)) {










 propagateValueAtCall(nAndD, n);










 }










 synchronized (nodeWorklist) {










 numTasks.getAndDecrement();










 //potentially wake up waiting broker thread










 //(see forwardComputeJumpFunctionsSLRPs())










 nodeWorklist.notify();










 }










 }










 }










 



......














src/heros/solver/IDESolver.java








View file @ 0a1e0ff5













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * Copyright (c) 2013 Tata Consultancy Services & École Polytechnique de Montréal










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at



......@@ -7,6 +8,7 @@









 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 *     Marc-André Laverdière-Papineau - Fixed race condition










 ******************************************************************************/










package heros.solver;














......@@ -25,21 +27,18 @@ import heros.SynchronizedBy;









import heros.ZeroedFlowFunctions;










import heros.edgefunc.EdgeIdentity;





















import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Iterator;










import java.util.LinkedHashSet;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ExecutorService;










import java.util.concurrent.Executors;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;










import java.util.concurrent.atomic.AtomicInteger;










import java.util.concurrent.atomic.AtomicLong;





















import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;



......@@ -73,18 +72,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 protected ExecutorService executor;










 protected ThreadPoolExecutor executor;










 










 @DontSynchronize("only used by single thread")










 protected int numThreads;










 










 //the number of currently running tasks










 protected final AtomicInteger numTasks = new AtomicInteger();





















 @SynchronizedBy("consistent lock on field")










 //We are using a LinkedHashSet here to enforce FIFO semantics, which leads to a breath-first construction










 //of the exploded super graph. As we observed in experiments, this can speed up the construction.










 protected final Collection<PathEdge<N,D,M>> pathWorklist = new LinkedHashSet<PathEdge<N,D,M>>();










 protected final AtomicLong numTasks = new AtomicLong();










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 protected final JumpFunctions<N,D,V> jumpFn;



......@@ -116,9 +110,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 @DontSynchronize("stateless")










 protected final EdgeFunction<V> allTop;










 










 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 protected final List<Pair<N,D>> nodeWorklist = new LinkedList<Pair<N,D>>();





















 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 protected final Table<N,D,V> val = HashBasedTable.create(); 



......@@ -218,22 +209,31 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * @param numThreads The number of threads to use.










	 */










 public void solve(int numThreads) {










 if(numThreads<2) {










 this.executor = Executors.newSingleThreadExecutor();










 this.numThreads = 1;










 } else {










 this.executor = Executors.newFixedThreadPool(numThreads);










 this.numThreads = numThreads;










 }










 this.numThreads = numThreads < 2? 1: numThreads;










 this.executor = new ThreadPoolExecutor(1, numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 pathWorklist.add(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }










 {










 /**










		   * Forward-tabulates the same-level realizable paths and associated functions.










		   * Note that this is a little different from the original IFDS formulations because










		   * we can have statements that are, for instance, both "normal" and "exit" statements.










		   * This is for instance the case on a "throw" statement that may on the one hand










		   * lead to a catch block but on the other hand exit the method depending










		   * on the exception being thrown.










		   */










 final long before = System.currentTimeMillis();










 forwardComputeJumpFunctionsSLRPs(); 










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 durationFlowFunctionConstruction = System.currentTimeMillis() - before;










 }










 {



......@@ -247,43 +247,24 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 executor.shutdown();










 }





















 /**










	 * Forward-tabulates the same-level realizable paths and associated functions.










	 * Note that this is a little different from the original IFDS formulations because










	 * we can have statements that are, for instance, both "normal" and "exit" statements.










	 * This is for instance the case on a "throw" statement that may on the one hand










	 * lead to a catch block but on the other hand exit the method depending










	 * on the exception being thrown.










	 */










 private void forwardComputeJumpFunctionsSLRPs() {










 while(true) {










 










 synchronized (pathWorklist) {










 if(!pathWorklist.isEmpty()) {










 //pop edge










 Iterator<PathEdge<N,D,M>> iter = pathWorklist.iterator();










 PathEdge<N,D,M> edge = iter.next();










 iter.remove();










 numTasks.getAndIncrement();





















 //dispatch processing of edge (potentially in a different thread)










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 } else if(numTasks.intValue()==0){










 //path worklist is empty; no running tasks, we are done










 return;










 } else {










 //the path worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 pathWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 }










 }










 /**










   * Dispatch the processing of a given edge. It may be executed in a different thread.










   * @param edge the edge to process










   */










 private void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 numTasks.getAndIncrement();










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }










 










 /**










   * Dispatch the processing of a given value. It may be executed in a different thread.










   * @param vpt










   */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 numTasks.getAndIncrement();










 executor.execute(vpt);










 }










 










 /**










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context.



......@@ -487,9 +468,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 if(newFunction) {










 PathEdge<N,D,M> edge = new PathEdge<N,D,M>(sourceVal, target, targetVal);










 synchronized (pathWorklist) {










 pathWorklist.add(edge);










 }










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {










 if(targetVal!=zeroValue) { 



......@@ -518,31 +497,17 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 nodeWorklist.add(superGraphNode);










 }










 while(true) {










 synchronized (nodeWorklist) {










 if(!nodeWorklist.isEmpty()) {










 //pop job










 Pair<N,D> nAndD = nodeWorklist.remove(0); 










 numTasks.getAndIncrement();










 










 //dispatch processing of job (potentially in a different thread)










 executor.execute(new ValuePropagationTask(nAndD));










 } else if(numTasks.intValue()==0) {










 //node worklist is empty; no running tasks, we are done










 break;










 } else {










 //the node worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 nodeWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads










 Set<N> allNonCallStartNodes = icfg.allNonCallStartNodes();



......@@ -552,7 +517,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for (N n : allNonCallStartNodes) {










 nonCallStartNodesArray[i] = n;










 i++;










 } 










 }










 //No need to keep track of the number of tasks scheduled here, since we call shutdown










 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }



......@@ -604,9 +570,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 V vPrime = valueLattice.join(valNHash,v);










 if(!vPrime.equals(valNHash)) {










 setVal(nHashN, nHashD, vPrime);










 synchronized (nodeWorklist) {










 nodeWorklist.add(new Pair<N,D>(nHashN,nHashD));










 }










 scheduleValueProcessing(new ValuePropagationTask(new Pair<N,D>(nHashN,nHashD)));










 }










 }










 }



......@@ -721,12 +685,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 processNormalFlow(edge);










 }










 }










 synchronized (pathWorklist) {










 numTasks.getAndDecrement();










 //potentially wake up waiting broker thread










 //(see forwardComputeJumpFunctionsSLRPs())










 pathWorklist.notify();










 }










 }










 }










 



......@@ -745,12 +703,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 if(icfg.isCallStmt(n)) {










 propagateValueAtCall(nAndD, n);










 }










 synchronized (nodeWorklist) {










 numTasks.getAndDecrement();










 //potentially wake up waiting broker thread










 //(see forwardComputeJumpFunctionsSLRPs())










 nodeWorklist.notify();










 }










 }










 }










 



......












src/heros/solver/IDESolver.java








View file @ 0a1e0ff5








src/heros/solver/IDESolver.java










View file @ 0a1e0ff5


0a1e0ff5










/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * Copyright (c) 2013 Tata Consultancy Services & École Polytechnique de Montréal










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at



......@@ -7,6 +8,7 @@









 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 *     Marc-André Laverdière-Papineau - Fixed race condition










 ******************************************************************************/










package heros.solver;














......@@ -25,21 +27,18 @@ import heros.SynchronizedBy;









import heros.ZeroedFlowFunctions;










import heros.edgefunc.EdgeIdentity;





















import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Iterator;










import java.util.LinkedHashSet;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ExecutorService;










import java.util.concurrent.Executors;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;










import java.util.concurrent.atomic.AtomicInteger;










import java.util.concurrent.atomic.AtomicLong;





















import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;



......@@ -73,18 +72,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 protected ExecutorService executor;










 protected ThreadPoolExecutor executor;










 










 @DontSynchronize("only used by single thread")










 protected int numThreads;










 










 //the number of currently running tasks










 protected final AtomicInteger numTasks = new AtomicInteger();





















 @SynchronizedBy("consistent lock on field")










 //We are using a LinkedHashSet here to enforce FIFO semantics, which leads to a breath-first construction










 //of the exploded super graph. As we observed in experiments, this can speed up the construction.










 protected final Collection<PathEdge<N,D,M>> pathWorklist = new LinkedHashSet<PathEdge<N,D,M>>();










 protected final AtomicLong numTasks = new AtomicLong();










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 protected final JumpFunctions<N,D,V> jumpFn;



......@@ -116,9 +110,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 @DontSynchronize("stateless")










 protected final EdgeFunction<V> allTop;










 










 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 protected final List<Pair<N,D>> nodeWorklist = new LinkedList<Pair<N,D>>();





















 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 protected final Table<N,D,V> val = HashBasedTable.create(); 



......@@ -218,22 +209,31 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * @param numThreads The number of threads to use.










	 */










 public void solve(int numThreads) {










 if(numThreads<2) {










 this.executor = Executors.newSingleThreadExecutor();










 this.numThreads = 1;










 } else {










 this.executor = Executors.newFixedThreadPool(numThreads);










 this.numThreads = numThreads;










 }










 this.numThreads = numThreads < 2? 1: numThreads;










 this.executor = new ThreadPoolExecutor(1, numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 pathWorklist.add(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }










 {










 /**










		   * Forward-tabulates the same-level realizable paths and associated functions.










		   * Note that this is a little different from the original IFDS formulations because










		   * we can have statements that are, for instance, both "normal" and "exit" statements.










		   * This is for instance the case on a "throw" statement that may on the one hand










		   * lead to a catch block but on the other hand exit the method depending










		   * on the exception being thrown.










		   */










 final long before = System.currentTimeMillis();










 forwardComputeJumpFunctionsSLRPs(); 










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 durationFlowFunctionConstruction = System.currentTimeMillis() - before;










 }










 {



......@@ -247,43 +247,24 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 executor.shutdown();










 }





















 /**










	 * Forward-tabulates the same-level realizable paths and associated functions.










	 * Note that this is a little different from the original IFDS formulations because










	 * we can have statements that are, for instance, both "normal" and "exit" statements.










	 * This is for instance the case on a "throw" statement that may on the one hand










	 * lead to a catch block but on the other hand exit the method depending










	 * on the exception being thrown.










	 */










 private void forwardComputeJumpFunctionsSLRPs() {










 while(true) {










 










 synchronized (pathWorklist) {










 if(!pathWorklist.isEmpty()) {










 //pop edge










 Iterator<PathEdge<N,D,M>> iter = pathWorklist.iterator();










 PathEdge<N,D,M> edge = iter.next();










 iter.remove();










 numTasks.getAndIncrement();





















 //dispatch processing of edge (potentially in a different thread)










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 } else if(numTasks.intValue()==0){










 //path worklist is empty; no running tasks, we are done










 return;










 } else {










 //the path worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 pathWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 }










 }










 /**










   * Dispatch the processing of a given edge. It may be executed in a different thread.










   * @param edge the edge to process










   */










 private void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 numTasks.getAndIncrement();










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }










 










 /**










   * Dispatch the processing of a given value. It may be executed in a different thread.










   * @param vpt










   */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 numTasks.getAndIncrement();










 executor.execute(vpt);










 }










 










 /**










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context.



......@@ -487,9 +468,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 if(newFunction) {










 PathEdge<N,D,M> edge = new PathEdge<N,D,M>(sourceVal, target, targetVal);










 synchronized (pathWorklist) {










 pathWorklist.add(edge);










 }










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {










 if(targetVal!=zeroValue) { 



......@@ -518,31 +497,17 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 nodeWorklist.add(superGraphNode);










 }










 while(true) {










 synchronized (nodeWorklist) {










 if(!nodeWorklist.isEmpty()) {










 //pop job










 Pair<N,D> nAndD = nodeWorklist.remove(0); 










 numTasks.getAndIncrement();










 










 //dispatch processing of job (potentially in a different thread)










 executor.execute(new ValuePropagationTask(nAndD));










 } else if(numTasks.intValue()==0) {










 //node worklist is empty; no running tasks, we are done










 break;










 } else {










 //the node worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 nodeWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads










 Set<N> allNonCallStartNodes = icfg.allNonCallStartNodes();



......@@ -552,7 +517,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for (N n : allNonCallStartNodes) {










 nonCallStartNodesArray[i] = n;










 i++;










 } 










 }










 //No need to keep track of the number of tasks scheduled here, since we call shutdown










 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }



......@@ -604,9 +570,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 V vPrime = valueLattice.join(valNHash,v);










 if(!vPrime.equals(valNHash)) {










 setVal(nHashN, nHashD, vPrime);










 synchronized (nodeWorklist) {










 nodeWorklist.add(new Pair<N,D>(nHashN,nHashD));










 }










 scheduleValueProcessing(new ValuePropagationTask(new Pair<N,D>(nHashN,nHashD)));










 }










 }










 }



......@@ -721,12 +685,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 processNormalFlow(edge);










 }










 }










 synchronized (pathWorklist) {










 numTasks.getAndDecrement();










 //potentially wake up waiting broker thread










 //(see forwardComputeJumpFunctionsSLRPs())










 pathWorklist.notify();










 }










 }










 }










 



......@@ -745,12 +703,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 if(icfg.isCallStmt(n)) {










 propagateValueAtCall(nAndD, n);










 }










 synchronized (nodeWorklist) {










 numTasks.getAndDecrement();










 //potentially wake up waiting broker thread










 //(see forwardComputeJumpFunctionsSLRPs())










 nodeWorklist.notify();










 }










 }










 }










 



......













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * Copyright (c) 2013 Tata Consultancy Services & École Polytechnique de Montréal










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at



......@@ -7,6 +8,7 @@









 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 *     Marc-André Laverdière-Papineau - Fixed race condition










 ******************************************************************************/










package heros.solver;














......@@ -25,21 +27,18 @@ import heros.SynchronizedBy;









import heros.ZeroedFlowFunctions;










import heros.edgefunc.EdgeIdentity;





















import java.util.Collection;










import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Iterator;










import java.util.LinkedHashSet;










import java.util.LinkedList;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.ExecutorService;










import java.util.concurrent.Executors;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;










import java.util.concurrent.atomic.AtomicInteger;










import java.util.concurrent.atomic.AtomicLong;





















import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;



......@@ -73,18 +72,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 protected ExecutorService executor;










 protected ThreadPoolExecutor executor;










 










 @DontSynchronize("only used by single thread")










 protected int numThreads;










 










 //the number of currently running tasks










 protected final AtomicInteger numTasks = new AtomicInteger();





















 @SynchronizedBy("consistent lock on field")










 //We are using a LinkedHashSet here to enforce FIFO semantics, which leads to a breath-first construction










 //of the exploded super graph. As we observed in experiments, this can speed up the construction.










 protected final Collection<PathEdge<N,D,M>> pathWorklist = new LinkedHashSet<PathEdge<N,D,M>>();










 protected final AtomicLong numTasks = new AtomicLong();










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 protected final JumpFunctions<N,D,V> jumpFn;



......@@ -116,9 +110,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 @DontSynchronize("stateless")










 protected final EdgeFunction<V> allTop;










 










 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 protected final List<Pair<N,D>> nodeWorklist = new LinkedList<Pair<N,D>>();





















 @DontSynchronize("only used by single thread - phase II not parallelized (yet)")










 protected final Table<N,D,V> val = HashBasedTable.create(); 



......@@ -218,22 +209,31 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * @param numThreads The number of threads to use.










	 */










 public void solve(int numThreads) {










 if(numThreads<2) {










 this.executor = Executors.newSingleThreadExecutor();










 this.numThreads = 1;










 } else {










 this.executor = Executors.newFixedThreadPool(numThreads);










 this.numThreads = numThreads;










 }










 this.numThreads = numThreads < 2? 1: numThreads;










 this.executor = new ThreadPoolExecutor(1, numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 pathWorklist.add(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }










 {










 /**










		   * Forward-tabulates the same-level realizable paths and associated functions.










		   * Note that this is a little different from the original IFDS formulations because










		   * we can have statements that are, for instance, both "normal" and "exit" statements.










		   * This is for instance the case on a "throw" statement that may on the one hand










		   * lead to a catch block but on the other hand exit the method depending










		   * on the exception being thrown.










		   */










 final long before = System.currentTimeMillis();










 forwardComputeJumpFunctionsSLRPs(); 










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 durationFlowFunctionConstruction = System.currentTimeMillis() - before;










 }










 {



......@@ -247,43 +247,24 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 executor.shutdown();










 }





















 /**










	 * Forward-tabulates the same-level realizable paths and associated functions.










	 * Note that this is a little different from the original IFDS formulations because










	 * we can have statements that are, for instance, both "normal" and "exit" statements.










	 * This is for instance the case on a "throw" statement that may on the one hand










	 * lead to a catch block but on the other hand exit the method depending










	 * on the exception being thrown.










	 */










 private void forwardComputeJumpFunctionsSLRPs() {










 while(true) {










 










 synchronized (pathWorklist) {










 if(!pathWorklist.isEmpty()) {










 //pop edge










 Iterator<PathEdge<N,D,M>> iter = pathWorklist.iterator();










 PathEdge<N,D,M> edge = iter.next();










 iter.remove();










 numTasks.getAndIncrement();





















 //dispatch processing of edge (potentially in a different thread)










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 } else if(numTasks.intValue()==0){










 //path worklist is empty; no running tasks, we are done










 return;










 } else {










 //the path worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 pathWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 }










 }










 /**










   * Dispatch the processing of a given edge. It may be executed in a different thread.










   * @param edge the edge to process










   */










 private void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 numTasks.getAndIncrement();










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }










 










 /**










   * Dispatch the processing of a given value. It may be executed in a different thread.










   * @param vpt










   */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 numTasks.getAndIncrement();










 executor.execute(vpt);










 }










 










 /**










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context.



......@@ -487,9 +468,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 if(newFunction) {










 PathEdge<N,D,M> edge = new PathEdge<N,D,M>(sourceVal, target, targetVal);










 synchronized (pathWorklist) {










 pathWorklist.add(edge);










 }










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {










 if(targetVal!=zeroValue) { 



......@@ -518,31 +497,17 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 nodeWorklist.add(superGraphNode);










 }










 while(true) {










 synchronized (nodeWorklist) {










 if(!nodeWorklist.isEmpty()) {










 //pop job










 Pair<N,D> nAndD = nodeWorklist.remove(0); 










 numTasks.getAndIncrement();










 










 //dispatch processing of job (potentially in a different thread)










 executor.execute(new ValuePropagationTask(nAndD));










 } else if(numTasks.intValue()==0) {










 //node worklist is empty; no running tasks, we are done










 break;










 } else {










 //the node worklist is empty but we still have running tasks










 //wait until woken up, then try again










 try {










 nodeWorklist.wait();










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 }










 }










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads










 Set<N> allNonCallStartNodes = icfg.allNonCallStartNodes();



......@@ -552,7 +517,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for (N n : allNonCallStartNodes) {










 nonCallStartNodesArray[i] = n;










 i++;










 } 










 }










 //No need to keep track of the number of tasks scheduled here, since we call shutdown










 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }



......@@ -604,9 +570,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 V vPrime = valueLattice.join(valNHash,v);










 if(!vPrime.equals(valNHash)) {










 setVal(nHashN, nHashD, vPrime);










 synchronized (nodeWorklist) {










 nodeWorklist.add(new Pair<N,D>(nHashN,nHashD));










 }










 scheduleValueProcessing(new ValuePropagationTask(new Pair<N,D>(nHashN,nHashD)));










 }










 }










 }



......@@ -721,12 +685,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 processNormalFlow(edge);










 }










 }










 synchronized (pathWorklist) {










 numTasks.getAndDecrement();










 //potentially wake up waiting broker thread










 //(see forwardComputeJumpFunctionsSLRPs())










 pathWorklist.notify();










 }










 }










 }










 



......@@ -745,12 +703,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 if(icfg.isCallStmt(n)) {










 propagateValueAtCall(nAndD, n);










 }










 synchronized (nodeWorklist) {










 numTasks.getAndDecrement();










 //potentially wake up waiting broker thread










 //(see forwardComputeJumpFunctionsSLRPs())










 nodeWorklist.notify();










 }










 }










 }










 



......


/*******************************************************************************/******************************************************************************* * Copyright (c) 2012 Eric Bodden. * Copyright (c) 2012 Eric Bodden. * Copyright (c) 2013 Tata Consultancy Services & École Polytechnique de Montréal * Copyright (c) 2013 Tata Consultancy Services & École Polytechnique de Montréal * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at *  *  * Contributors: * Contributors: *     Eric Bodden - initial API and implementation *     Eric Bodden - initial API and implementation *     Marc-André Laverdière-Papineau - Fixed race condition *     Marc-André Laverdière-Papineau - Fixed race condition ******************************************************************************/ ******************************************************************************/package heros.solver;packageheros.solver;import heros.ZeroedFlowFunctions;importheros.ZeroedFlowFunctions;import heros.edgefunc.EdgeIdentity;importheros.edgefunc.EdgeIdentity;import java.util.Collection;importjava.util.Collection;import java.util.Collections;importjava.util.Collections;import java.util.HashMap;importjava.util.HashMap;import java.util.HashSet;importjava.util.HashSet;import java.util.Iterator;importjava.util.Iterator;import java.util.LinkedHashSet;importjava.util.LinkedHashSet;import java.util.LinkedList;importjava.util.LinkedList;import java.util.List;importjava.util.List;import java.util.Map;importjava.util.Map;import java.util.Map.Entry;importjava.util.Map.Entry;import java.util.Set;importjava.util.Set;import java.util.concurrent.ExecutorService;importjava.util.concurrent.ExecutorServiceExecutorServic;import java.util.concurrent.Executors;importjava.util.concurrent.Executorss;import java.util.concurrent.LinkedBlockingQueue;importjava.util.concurrent.LinkedBlockingQueueLinkedBlockingQueu;import java.util.concurrent.ThreadPoolExecutor;importjava.util.concurrent.ThreadPoolExecutorThreadPool;import java.util.concurrent.TimeUnit;importjava.util.concurrent.TimeUnit;import java.util.concurrent.atomic.AtomicInteger;importjava.util.concurrent.atomic.AtomicIntegerInteger;import java.util.concurrent.atomic.AtomicLong;importjava.util.concurrent.atomic.AtomicLongLong;import com.google.common.base.Predicate;importcom.google.common.base.Predicate;import com.google.common.cache.CacheBuilder;importcom.google.common.cache.CacheBuilder;  //executor for dispatching individual compute jobs (may be multi-threaded)//executor for dispatching individual compute jobs (may be multi-threaded) @DontSynchronize("only used by single thread")@DontSynchronize("only used by single thread") protected ExecutorService executor;protectedExecutorServiceServiceexecutor; protected ThreadPoolExecutor executor;protectedThreadPoolExecutorThreadPoolexecutor;  @DontSynchronize("only used by single thread")@DontSynchronize("only used by single thread") protected int numThreads;protectedintnumThreads;  //the number of currently running tasks//the number of currently running tasks protected final AtomicInteger numTasks = new AtomicInteger();protectedfinalAtomicIntegernumTasks=newAtomicInteger(); @SynchronizedBy("consistent lock on field")@SynchronizedBy("consistent lock on field") //We are using a LinkedHashSet here to enforce FIFO semantics, which leads to a breath-first construction//We are using a LinkedHashSet here to enforce FIFO semantics, which leads to a breath-first construction //of the exploded super graph. As we observed in experiments, this can speed up the construction.//of the exploded super graph. As we observed in experiments, this can speed up the construction. protected final Collection<PathEdge<N,D,M>> pathWorklist = new LinkedHashSet<PathEdge<N,D,M>>();protectedfinalCollection<PathEdge<N,D,M>>pathWorklist=newLinkedHashSet<PathEdge<N,D,M>>(); protected final AtomicLong numTasks = new AtomicLong();protectedfinalAtomicLongnumTasks=newAtomicLong();  @SynchronizedBy("thread safe data structure, consistent locking when used")@SynchronizedBy("thread safe data structure, consistent locking when used") protected final JumpFunctions<N,D,V> jumpFn;protectedfinalJumpFunctions<N,D,V>jumpFn;  @DontSynchronize("stateless")@DontSynchronize("stateless") protected final EdgeFunction<V> allTop;protectedfinalEdgeFunction<V>allTop;  @DontSynchronize("only used by single thread - phase II not parallelized (yet)")@DontSynchronize("only used by single thread - phase II not parallelized (yet)") protected final List<Pair<N,D>> nodeWorklist = new LinkedList<Pair<N,D>>();protectedfinalList<Pair<N,D>>nodeWorklist=newLinkedList<Pair<N,D>>(); @DontSynchronize("only used by single thread - phase II not parallelized (yet)")@DontSynchronize("only used by single thread - phase II not parallelized (yet)") protected final Table<N,D,V> val = HashBasedTable.create(); protectedfinalTable<N,D,V>val=HashBasedTable.create();	 * @param numThreads The number of threads to use.	 * @param numThreads The number of threads to use.	 */	 */ public void solve(int numThreads) {publicvoidsolve(intnumThreads){ if(numThreads<2) {if(numThreads<2){ this.executor = Executors.newSingleThreadExecutor();this.executor=Executors.newSingleThreadExecutor(); this.numThreads = 1;this.numThreads=1; } else {}else{ this.executor = Executors.newFixedThreadPool(numThreads);this.executor=Executors.newFixedThreadPool(numThreads); this.numThreads = numThreads;this.numThreads=numThreads; }} this.numThreads = numThreads < 2? 1: numThreads;this.numThreads=numThreads<2?1:numThreads; this.executor = new ThreadPoolExecutor(1, numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());this.executor=newThreadPoolExecutor(1,numThreads,30,TimeUnit.SECONDS,newLinkedBlockingQueue<Runnable>());  for(N startPoint: initialSeeds) {for(NstartPoint:initialSeeds){ propagate(zeroValue, startPoint, zeroValue, allTop);propagate(zeroValue,startPoint,zeroValue,allTop); pathWorklist.add(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));pathWorklistpathWorklist..addadd(newPathEdge<N,D,M>(zeroValue,startPoint,zeroValue)); scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));scheduleEdgeProcessingscheduleEdgeProcessing(newPathEdge<N,D,M>(zeroValue,startPoint,zeroValue)); jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());jumpFn.addFunction(zeroValue,startPoint,zeroValue,EdgeIdentity.<V>v()); }} {{ /**/**		   * Forward-tabulates the same-level realizable paths and associated functions.		   * Forward-tabulates the same-level realizable paths and associated functions.		   * Note that this is a little different from the original IFDS formulations because		   * Note that this is a little different from the original IFDS formulations because		   * we can have statements that are, for instance, both "normal" and "exit" statements.		   * we can have statements that are, for instance, both "normal" and "exit" statements.		   * This is for instance the case on a "throw" statement that may on the one hand		   * This is for instance the case on a "throw" statement that may on the one hand		   * lead to a catch block but on the other hand exit the method depending		   * lead to a catch block but on the other hand exit the method depending		   * on the exception being thrown.		   * on the exception being thrown.		   */		   */ final long before = System.currentTimeMillis();finallongbefore=System.currentTimeMillis(); forwardComputeJumpFunctionsSLRPs(); forwardComputeJumpFunctionsSLRPs(); do { //Wait until we are done the processingdo{//Wait until we are done the processing try {try{ Thread.sleep(200);Thread.sleep(200); } catch (InterruptedException e) {}catch(InterruptedExceptione){ throw new RuntimeException(e);thrownewRuntimeException(e); }} } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());}while(!executor.getQueue().isEmpty()||numTasks.longValue()>executor.getCompletedTaskCount()); durationFlowFunctionConstruction = System.currentTimeMillis() - before;durationFlowFunctionConstruction=System.currentTimeMillis()-before; }} {{ executor.shutdown();executor.shutdown(); }} /**/**	 * Forward-tabulates the same-level realizable paths and associated functions.	 * Forward-tabulates the same-level realizable paths and associated functions.	 * Note that this is a little different from the original IFDS formulations because	 * Note that this is a little different from the original IFDS formulations because	 * we can have statements that are, for instance, both "normal" and "exit" statements.	 * we can have statements that are, for instance, both "normal" and "exit" statements.	 * This is for instance the case on a "throw" statement that may on the one hand	 * This is for instance the case on a "throw" statement that may on the one hand	 * lead to a catch block but on the other hand exit the method depending	 * lead to a catch block but on the other hand exit the method depending	 * on the exception being thrown.	 * on the exception being thrown.	 */	 */ private void forwardComputeJumpFunctionsSLRPs() {privatevoidforwardComputeJumpFunctionsSLRPs(){ while(true) {while(true){  synchronized (pathWorklist) {synchronized(pathWorklist){ if(!pathWorklist.isEmpty()) {if(!pathWorklist.isEmpty()){ //pop edge//pop edge Iterator<PathEdge<N,D,M>> iter = pathWorklist.iterator();Iterator<PathEdge<N,D,M>>iter=pathWorklist.iterator(); PathEdge<N,D,M> edge = iter.next();PathEdge<N,D,M>edge=iter.next(); iter.remove();iter.remove(); numTasks.getAndIncrement();numTasks.getAndIncrement(); //dispatch processing of edge (potentially in a different thread)//dispatch processing of edge (potentially in a different thread) executor.execute(new PathEdgeProcessingTask(edge));executor.execute(newPathEdgeProcessingTask(edge)); propagationCount++;propagationCount++; } else if(numTasks.intValue()==0){}elseif(numTasks.intValue()==0){ //path worklist is empty; no running tasks, we are done//path worklist is empty; no running tasks, we are done return;return; } else {}else{ //the path worklist is empty but we still have running tasks//the path worklist is empty but we still have running tasks //wait until woken up, then try again//wait until woken up, then try again try {try{ pathWorklist.wait();pathWorklist.wait(); } catch (InterruptedException e) {}catch(InterruptedExceptione){ throw new RuntimeException(e);thrownewRuntimeException(e); }} }} }} }} }} /**/**   * Dispatch the processing of a given edge. It may be executed in a different thread.   * Dispatch the processing of a given edge. It may be executed in a different thread.   * @param edge the edge to process   * @param edge the edge to process   */   */ private void scheduleEdgeProcessing(PathEdge<N,D,M> edge){privatevoidscheduleEdgeProcessing(PathEdge<N,D,M>edge){ numTasks.getAndIncrement();numTasks.getAndIncrement(); executor.execute(new PathEdgeProcessingTask(edge));executor.execute(newPathEdgeProcessingTask(edge)); propagationCount++;propagationCount++; }}  /**/**   * Dispatch the processing of a given value. It may be executed in a different thread.   * Dispatch the processing of a given value. It may be executed in a different thread.   * @param vpt   * @param vpt   */   */ private void scheduleValueProcessing(ValuePropagationTask vpt){privatevoidscheduleValueProcessing(ValuePropagationTaskvpt){ numTasks.getAndIncrement();numTasks.getAndIncrement(); executor.execute(vpt);executor.execute(vpt); }}  /**/**	 * Lines 13-20 of the algorithm; processing a call site in the caller's context.	 * Lines 13-20 of the algorithm; processing a call site in the caller's context. if(newFunction) {if(newFunction){ PathEdge<N,D,M> edge = new PathEdge<N,D,M>(sourceVal, target, targetVal);PathEdge<N,D,M>edge=newPathEdge<N,D,M>(sourceVal,target,targetVal); synchronized (pathWorklist) {synchronized(pathWorklist){ pathWorklist.add(edge);pathWorklist.add(edge); }} scheduleEdgeProcessing(edge);scheduleEdgeProcessing(edge); if(DEBUG) {if(DEBUG){ if(targetVal!=zeroValue) { if(targetVal!=zeroValue){ for(N startPoint: initialSeeds) {for(NstartPoint:initialSeeds){ setVal(startPoint, zeroValue, valueLattice.bottomElement());setVal(startPoint,zeroValue,valueLattice.bottomElement()); Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); Pair<N,D>superGraphNode=newPair<N,D>(startPoint,zeroValue); nodeWorklist.add(superGraphNode);nodeWorklist.add(superGraphNode); }} while(true) {while(true){ synchronized (nodeWorklist) {synchronized(nodeWorklist){ if(!nodeWorklist.isEmpty()) {if(!nodeWorklist.isEmpty()){ //pop job//pop job Pair<N,D> nAndD = nodeWorklist.remove(0); Pair<N,D>nAndD=nodeWorklist.remove(0); numTasks.getAndIncrement();numTasks.getAndIncrement();  //dispatch processing of job (potentially in a different thread)//dispatch processing of job (potentially in a different thread) executor.execute(new ValuePropagationTask(nAndD));executor.execute(newValuePropagationTask(nAndD)); } else if(numTasks.intValue()==0) {}elseif(numTasks.intValue()==0){ //node worklist is empty; no running tasks, we are done//node worklist is empty; no running tasks, we are done break;break; } else {}else{ //the node worklist is empty but we still have running tasks//the node worklist is empty but we still have running tasks //wait until woken up, then try again//wait until woken up, then try again try {try{ nodeWorklist.wait();nodeWorklist.wait(); } catch (InterruptedException e) {}catch(InterruptedExceptione){ throw new RuntimeException(e);thrownewRuntimeException(e); }} }} }} scheduleValueProcessing(new ValuePropagationTask(superGraphNode));scheduleValueProcessing(newValuePropagationTask(superGraphNode)); }}  do { //Wait until we are done the processingdo{//Wait until we are done the processing try {try{ Thread.sleep(200);Thread.sleep(200); } catch (InterruptedException e) {}catch(InterruptedExceptione){ throw new RuntimeException(e);thrownewRuntimeException(e); }} } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());}while(!executor.getQueue().isEmpty()||numTasks.longValue()>executor.getCompletedTaskCount());  //Phase II(ii)//Phase II(ii) //we create an array of all nodes and then dispatch fractions of this array to multiple threads//we create an array of all nodes and then dispatch fractions of this array to multiple threads Set<N> allNonCallStartNodes = icfg.allNonCallStartNodes();Set<N>allNonCallStartNodes=icfg.allNonCallStartNodes(); for (N n : allNonCallStartNodes) {for(Nn:allNonCallStartNodes){ nonCallStartNodesArray[i] = n;nonCallStartNodesArray[i]=n; i++;i++; } } }} //No need to keep track of the number of tasks scheduled here, since we call shutdown//No need to keep track of the number of tasks scheduled here, since we call shutdown for(int t=0;t<numThreads; t++) {for(intt=0;t<numThreads;t++){ executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));executor.execute(newValueComputationTask(nonCallStartNodesArray,t)); }} V vPrime = valueLattice.join(valNHash,v);VvPrime=valueLattice.join(valNHash,v); if(!vPrime.equals(valNHash)) {if(!vPrime.equals(valNHash)){ setVal(nHashN, nHashD, vPrime);setVal(nHashN,nHashD,vPrime); synchronized (nodeWorklist) {synchronized(nodeWorklist){ nodeWorklist.add(new Pair<N,D>(nHashN,nHashD));nodeWorklist.add(newPair<N,D>(nHashN,nHashD)); }} scheduleValueProcessing(new ValuePropagationTask(new Pair<N,D>(nHashN,nHashD)));scheduleValueProcessing(newValuePropagationTask(newPair<N,D>(nHashN,nHashD))); }} }} }} processNormalFlow(edge);processNormalFlow(edge); }} }} synchronized (pathWorklist) {synchronized(pathWorklist){ numTasks.getAndDecrement();numTasks.getAndDecrement(); //potentially wake up waiting broker thread//potentially wake up waiting broker thread //(see forwardComputeJumpFunctionsSLRPs())//(see forwardComputeJumpFunctionsSLRPs()) pathWorklist.notify();pathWorklist.notify(); }} }} }}  if(icfg.isCallStmt(n)) {if(icfg.isCallStmt(n)){ propagateValueAtCall(nAndD, n);propagateValueAtCall(nAndD,n); }} synchronized (nodeWorklist) {synchronized(nodeWorklist){ numTasks.getAndDecrement();numTasks.getAndDecrement(); //potentially wake up waiting broker thread//potentially wake up waiting broker thread //(see forwardComputeJumpFunctionsSLRPs())//(see forwardComputeJumpFunctionsSLRPs()) nodeWorklist.notify();nodeWorklist.notify(); }} }} }} 









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






