



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros

05779ceabcf73bb74c1b533e4eb4c502a3bacc8b

















05779ceabcf73bb74c1b533e4eb4c502a3bacc8b


Switch branch/tag










heros


src


heros


alias


FlowFunction.java



Find file
Normal viewHistoryPermalink






FlowFunction.java



4.39 KB









Newer










Older









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




/*******************************************************************************
 * Copyright (c) 2012 Eric Bodden.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Eric Bodden - initial API and implementation
 ******************************************************************************/
package heros.alias;

import java.util.LinkedHashSet;
import java.util.Set;

/**
 * A flow function computes which of the finitely many D-type values are reachable
 * from the current source values. Typically there will be one such function
 * associated with every possible control flow. 
 * 
 * <b>NOTE:</b> To be able to produce <b>deterministic benchmarking results</b>, we have found that
 * it helps to return {@link LinkedHashSet}s from {@link #computeTargets(Object)}. This is
 * because the duration of IDE's fixed point iteration may depend on the iteration order.
 * Within the solver, we have tried to fix this order as much as possible, but the
 * order, in general, does also depend on the order in which the result set
 * of {@link #computeTargets(Object)} is traversed.
 * 
 * <b>NOTE:</b> Methods defined on this type may be called simultaneously by different threads.
 * Hence, classes implementing this interface should synchronize accesses to
 * any mutable shared state.
 * 
 * @param <D> The type of data-flow facts to be computed by the tabulation problem.
 */









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






34




public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






35




36




37




38





	/**
	 * Returns the target values reachable from the source.
	 */









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






39




	Set<AnnotatedFact<FieldRef, D>> computeTargets(D source);









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






40




	









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






41




42




	//TODO: rename to ConstrainedFact
	public static class AnnotatedFact<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






43




44




		
		private D fact;









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






45




		private Constraint<FieldRef> constraint;









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






46




47




48




49




50




51




52




53




		
		//TODO: Refactor API to make things more intuitive
		/**
		 * 
		 * @param fact
		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value
		 * @param writtenField
		 */









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






54




		public AnnotatedFact(D fact, Constraint<FieldRef> constraint) {









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






55




			this.fact = fact;









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






56




			this.constraint = constraint;









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






57




58




59




60




61




62




		}
		
		public D getFact() {
			return fact;
		}
		









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






63




64




		public Constraint<FieldRef> getConstraint() {
			return constraint;









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






65




66




67




68




69




70




		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






71




			result = prime * result + ((constraint == null) ? 0 : constraint.hashCode());









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






72




73




74




75




76




77




78




79




80




81




82




83




84




			result = prime * result + ((fact == null) ? 0 : fact.hashCode());
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (!(obj instanceof AnnotatedFact))
				return false;
			AnnotatedFact other = (AnnotatedFact) obj;









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






85




86




87




88




89




			if (constraint == null) {
				if (other.constraint != null)
					return false;
			} else if (!constraint.equals(other.constraint))
				return false;









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






90




91




92




93




94




95




96




			if (fact == null) {
				if (other.fact != null)
					return false;
			} else if (!fact.equals(other.fact))
				return false;
			return true;
		}









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






97




98




99




		
		@Override
		public String toString() {









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




137




138




139




140




141




142




143




144




			return fact.toString()+"<"+constraint+">";
		}
	}
	
	public interface Constraint<FieldRef> {
		AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath);
	}
	
	public class WriteFieldConstraint<FieldRef> implements Constraint<FieldRef> {
		private FieldRef fieldRef;

		public WriteFieldConstraint(FieldRef fieldRef) {
			this.fieldRef = fieldRef;
		}

		@Override
		public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {
			if(accPath.hasExclusions())
				return accPath.getExclusions(0).addExclusion(fieldRef);
			else
				return accPath.appendExcludedFieldReference(fieldRef);
		}
		
		@Override
		public String toString() {
			return "^"+fieldRef.toString();
		}
	}
	
	public class ReadFieldConstraint<FieldRef> implements Constraint<FieldRef> {

		private FieldRef fieldRef;

		public ReadFieldConstraint(FieldRef fieldRef) {
			this.fieldRef = fieldRef;
		}
		
		@Override
		public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {
			return accPath.addFieldReference(fieldRef);
		}
		
		@Override
		public String toString() {
			return fieldRef.toString();









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






145




		}









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






146




147




	}
}












H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros

05779ceabcf73bb74c1b533e4eb4c502a3bacc8b

















05779ceabcf73bb74c1b533e4eb4c502a3bacc8b


Switch branch/tag










heros


src


heros


alias


FlowFunction.java



Find file
Normal viewHistoryPermalink






FlowFunction.java



4.39 KB









Newer










Older









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




/*******************************************************************************
 * Copyright (c) 2012 Eric Bodden.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Eric Bodden - initial API and implementation
 ******************************************************************************/
package heros.alias;

import java.util.LinkedHashSet;
import java.util.Set;

/**
 * A flow function computes which of the finitely many D-type values are reachable
 * from the current source values. Typically there will be one such function
 * associated with every possible control flow. 
 * 
 * <b>NOTE:</b> To be able to produce <b>deterministic benchmarking results</b>, we have found that
 * it helps to return {@link LinkedHashSet}s from {@link #computeTargets(Object)}. This is
 * because the duration of IDE's fixed point iteration may depend on the iteration order.
 * Within the solver, we have tried to fix this order as much as possible, but the
 * order, in general, does also depend on the order in which the result set
 * of {@link #computeTargets(Object)} is traversed.
 * 
 * <b>NOTE:</b> Methods defined on this type may be called simultaneously by different threads.
 * Hence, classes implementing this interface should synchronize accesses to
 * any mutable shared state.
 * 
 * @param <D> The type of data-flow facts to be computed by the tabulation problem.
 */









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






34




public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






35




36




37




38





	/**
	 * Returns the target values reachable from the source.
	 */









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






39




	Set<AnnotatedFact<FieldRef, D>> computeTargets(D source);









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






40




	









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






41




42




	//TODO: rename to ConstrainedFact
	public static class AnnotatedFact<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






43




44




		
		private D fact;









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






45




		private Constraint<FieldRef> constraint;









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






46




47




48




49




50




51




52




53




		
		//TODO: Refactor API to make things more intuitive
		/**
		 * 
		 * @param fact
		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value
		 * @param writtenField
		 */









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






54




		public AnnotatedFact(D fact, Constraint<FieldRef> constraint) {









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






55




			this.fact = fact;









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






56




			this.constraint = constraint;









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






57




58




59




60




61




62




		}
		
		public D getFact() {
			return fact;
		}
		









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






63




64




		public Constraint<FieldRef> getConstraint() {
			return constraint;









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






65




66




67




68




69




70




		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






71




			result = prime * result + ((constraint == null) ? 0 : constraint.hashCode());









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






72




73




74




75




76




77




78




79




80




81




82




83




84




			result = prime * result + ((fact == null) ? 0 : fact.hashCode());
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (!(obj instanceof AnnotatedFact))
				return false;
			AnnotatedFact other = (AnnotatedFact) obj;









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






85




86




87




88




89




			if (constraint == null) {
				if (other.constraint != null)
					return false;
			} else if (!constraint.equals(other.constraint))
				return false;









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






90




91




92




93




94




95




96




			if (fact == null) {
				if (other.fact != null)
					return false;
			} else if (!fact.equals(other.fact))
				return false;
			return true;
		}









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






97




98




99




		
		@Override
		public String toString() {









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




137




138




139




140




141




142




143




144




			return fact.toString()+"<"+constraint+">";
		}
	}
	
	public interface Constraint<FieldRef> {
		AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath);
	}
	
	public class WriteFieldConstraint<FieldRef> implements Constraint<FieldRef> {
		private FieldRef fieldRef;

		public WriteFieldConstraint(FieldRef fieldRef) {
			this.fieldRef = fieldRef;
		}

		@Override
		public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {
			if(accPath.hasExclusions())
				return accPath.getExclusions(0).addExclusion(fieldRef);
			else
				return accPath.appendExcludedFieldReference(fieldRef);
		}
		
		@Override
		public String toString() {
			return "^"+fieldRef.toString();
		}
	}
	
	public class ReadFieldConstraint<FieldRef> implements Constraint<FieldRef> {

		private FieldRef fieldRef;

		public ReadFieldConstraint(FieldRef fieldRef) {
			this.fieldRef = fieldRef;
		}
		
		@Override
		public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {
			return accPath.addFieldReference(fieldRef);
		}
		
		@Override
		public String toString() {
			return fieldRef.toString();









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






145




		}









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






146




147




	}
}











Open sidebar



Joshua Garcia heros

05779ceabcf73bb74c1b533e4eb4c502a3bacc8b







Open sidebar



Joshua Garcia heros

05779ceabcf73bb74c1b533e4eb4c502a3bacc8b




Open sidebar

Joshua Garcia heros

05779ceabcf73bb74c1b533e4eb4c502a3bacc8b


Joshua Garciaherosheros
05779ceabcf73bb74c1b533e4eb4c502a3bacc8b










05779ceabcf73bb74c1b533e4eb4c502a3bacc8b


Switch branch/tag










heros


src


heros


alias


FlowFunction.java



Find file
Normal viewHistoryPermalink






FlowFunction.java



4.39 KB









Newer










Older









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




/*******************************************************************************
 * Copyright (c) 2012 Eric Bodden.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Eric Bodden - initial API and implementation
 ******************************************************************************/
package heros.alias;

import java.util.LinkedHashSet;
import java.util.Set;

/**
 * A flow function computes which of the finitely many D-type values are reachable
 * from the current source values. Typically there will be one such function
 * associated with every possible control flow. 
 * 
 * <b>NOTE:</b> To be able to produce <b>deterministic benchmarking results</b>, we have found that
 * it helps to return {@link LinkedHashSet}s from {@link #computeTargets(Object)}. This is
 * because the duration of IDE's fixed point iteration may depend on the iteration order.
 * Within the solver, we have tried to fix this order as much as possible, but the
 * order, in general, does also depend on the order in which the result set
 * of {@link #computeTargets(Object)} is traversed.
 * 
 * <b>NOTE:</b> Methods defined on this type may be called simultaneously by different threads.
 * Hence, classes implementing this interface should synchronize accesses to
 * any mutable shared state.
 * 
 * @param <D> The type of data-flow facts to be computed by the tabulation problem.
 */









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






34




public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






35




36




37




38





	/**
	 * Returns the target values reachable from the source.
	 */









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






39




	Set<AnnotatedFact<FieldRef, D>> computeTargets(D source);









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






40




	









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






41




42




	//TODO: rename to ConstrainedFact
	public static class AnnotatedFact<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






43




44




		
		private D fact;









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






45




		private Constraint<FieldRef> constraint;









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






46




47




48




49




50




51




52




53




		
		//TODO: Refactor API to make things more intuitive
		/**
		 * 
		 * @param fact
		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value
		 * @param writtenField
		 */









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






54




		public AnnotatedFact(D fact, Constraint<FieldRef> constraint) {









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






55




			this.fact = fact;









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






56




			this.constraint = constraint;









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






57




58




59




60




61




62




		}
		
		public D getFact() {
			return fact;
		}
		









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






63




64




		public Constraint<FieldRef> getConstraint() {
			return constraint;









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






65




66




67




68




69




70




		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






71




			result = prime * result + ((constraint == null) ? 0 : constraint.hashCode());









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






72




73




74




75




76




77




78




79




80




81




82




83




84




			result = prime * result + ((fact == null) ? 0 : fact.hashCode());
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (!(obj instanceof AnnotatedFact))
				return false;
			AnnotatedFact other = (AnnotatedFact) obj;









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






85




86




87




88




89




			if (constraint == null) {
				if (other.constraint != null)
					return false;
			} else if (!constraint.equals(other.constraint))
				return false;









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






90




91




92




93




94




95




96




			if (fact == null) {
				if (other.fact != null)
					return false;
			} else if (!fact.equals(other.fact))
				return false;
			return true;
		}









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






97




98




99




		
		@Override
		public String toString() {









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




137




138




139




140




141




142




143




144




			return fact.toString()+"<"+constraint+">";
		}
	}
	
	public interface Constraint<FieldRef> {
		AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath);
	}
	
	public class WriteFieldConstraint<FieldRef> implements Constraint<FieldRef> {
		private FieldRef fieldRef;

		public WriteFieldConstraint(FieldRef fieldRef) {
			this.fieldRef = fieldRef;
		}

		@Override
		public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {
			if(accPath.hasExclusions())
				return accPath.getExclusions(0).addExclusion(fieldRef);
			else
				return accPath.appendExcludedFieldReference(fieldRef);
		}
		
		@Override
		public String toString() {
			return "^"+fieldRef.toString();
		}
	}
	
	public class ReadFieldConstraint<FieldRef> implements Constraint<FieldRef> {

		private FieldRef fieldRef;

		public ReadFieldConstraint(FieldRef fieldRef) {
			this.fieldRef = fieldRef;
		}
		
		@Override
		public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {
			return accPath.addFieldReference(fieldRef);
		}
		
		@Override
		public String toString() {
			return fieldRef.toString();









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






145




		}









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






146




147




	}
}














05779ceabcf73bb74c1b533e4eb4c502a3bacc8b


Switch branch/tag










heros


src


heros


alias


FlowFunction.java



Find file
Normal viewHistoryPermalink






FlowFunction.java



4.39 KB









Newer










Older









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




/*******************************************************************************
 * Copyright (c) 2012 Eric Bodden.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Eric Bodden - initial API and implementation
 ******************************************************************************/
package heros.alias;

import java.util.LinkedHashSet;
import java.util.Set;

/**
 * A flow function computes which of the finitely many D-type values are reachable
 * from the current source values. Typically there will be one such function
 * associated with every possible control flow. 
 * 
 * <b>NOTE:</b> To be able to produce <b>deterministic benchmarking results</b>, we have found that
 * it helps to return {@link LinkedHashSet}s from {@link #computeTargets(Object)}. This is
 * because the duration of IDE's fixed point iteration may depend on the iteration order.
 * Within the solver, we have tried to fix this order as much as possible, but the
 * order, in general, does also depend on the order in which the result set
 * of {@link #computeTargets(Object)} is traversed.
 * 
 * <b>NOTE:</b> Methods defined on this type may be called simultaneously by different threads.
 * Hence, classes implementing this interface should synchronize accesses to
 * any mutable shared state.
 * 
 * @param <D> The type of data-flow facts to be computed by the tabulation problem.
 */









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






34




public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






35




36




37




38





	/**
	 * Returns the target values reachable from the source.
	 */









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






39




	Set<AnnotatedFact<FieldRef, D>> computeTargets(D source);









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






40




	









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






41




42




	//TODO: rename to ConstrainedFact
	public static class AnnotatedFact<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






43




44




		
		private D fact;









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






45




		private Constraint<FieldRef> constraint;









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






46




47




48




49




50




51




52




53




		
		//TODO: Refactor API to make things more intuitive
		/**
		 * 
		 * @param fact
		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value
		 * @param writtenField
		 */









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






54




		public AnnotatedFact(D fact, Constraint<FieldRef> constraint) {









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






55




			this.fact = fact;









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






56




			this.constraint = constraint;









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






57




58




59




60




61




62




		}
		
		public D getFact() {
			return fact;
		}
		









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






63




64




		public Constraint<FieldRef> getConstraint() {
			return constraint;









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






65




66




67




68




69




70




		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






71




			result = prime * result + ((constraint == null) ? 0 : constraint.hashCode());









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






72




73




74




75




76




77




78




79




80




81




82




83




84




			result = prime * result + ((fact == null) ? 0 : fact.hashCode());
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (!(obj instanceof AnnotatedFact))
				return false;
			AnnotatedFact other = (AnnotatedFact) obj;









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






85




86




87




88




89




			if (constraint == null) {
				if (other.constraint != null)
					return false;
			} else if (!constraint.equals(other.constraint))
				return false;









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






90




91




92




93




94




95




96




			if (fact == null) {
				if (other.fact != null)
					return false;
			} else if (!fact.equals(other.fact))
				return false;
			return true;
		}









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






97




98




99




		
		@Override
		public String toString() {









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




137




138




139




140




141




142




143




144




			return fact.toString()+"<"+constraint+">";
		}
	}
	
	public interface Constraint<FieldRef> {
		AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath);
	}
	
	public class WriteFieldConstraint<FieldRef> implements Constraint<FieldRef> {
		private FieldRef fieldRef;

		public WriteFieldConstraint(FieldRef fieldRef) {
			this.fieldRef = fieldRef;
		}

		@Override
		public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {
			if(accPath.hasExclusions())
				return accPath.getExclusions(0).addExclusion(fieldRef);
			else
				return accPath.appendExcludedFieldReference(fieldRef);
		}
		
		@Override
		public String toString() {
			return "^"+fieldRef.toString();
		}
	}
	
	public class ReadFieldConstraint<FieldRef> implements Constraint<FieldRef> {

		private FieldRef fieldRef;

		public ReadFieldConstraint(FieldRef fieldRef) {
			this.fieldRef = fieldRef;
		}
		
		@Override
		public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {
			return accPath.addFieldReference(fieldRef);
		}
		
		@Override
		public String toString() {
			return fieldRef.toString();









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






145




		}









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






146




147




	}
}










05779ceabcf73bb74c1b533e4eb4c502a3bacc8b


Switch branch/tag










heros


src


heros


alias


FlowFunction.java



Find file
Normal viewHistoryPermalink




05779ceabcf73bb74c1b533e4eb4c502a3bacc8b


Switch branch/tag










heros


src


heros


alias


FlowFunction.java





05779ceabcf73bb74c1b533e4eb4c502a3bacc8b


Switch branch/tag








05779ceabcf73bb74c1b533e4eb4c502a3bacc8b


Switch branch/tag





05779ceabcf73bb74c1b533e4eb4c502a3bacc8b

Switch branch/tag





Switch branch/tag



Switch branch/tagSwitch branch/tag
heros

src

heros

alias

FlowFunction.java
Find file
Normal viewHistoryPermalink




FlowFunction.java



4.39 KB









Newer










Older









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




/*******************************************************************************
 * Copyright (c) 2012 Eric Bodden.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Eric Bodden - initial API and implementation
 ******************************************************************************/
package heros.alias;

import java.util.LinkedHashSet;
import java.util.Set;

/**
 * A flow function computes which of the finitely many D-type values are reachable
 * from the current source values. Typically there will be one such function
 * associated with every possible control flow. 
 * 
 * <b>NOTE:</b> To be able to produce <b>deterministic benchmarking results</b>, we have found that
 * it helps to return {@link LinkedHashSet}s from {@link #computeTargets(Object)}. This is
 * because the duration of IDE's fixed point iteration may depend on the iteration order.
 * Within the solver, we have tried to fix this order as much as possible, but the
 * order, in general, does also depend on the order in which the result set
 * of {@link #computeTargets(Object)} is traversed.
 * 
 * <b>NOTE:</b> Methods defined on this type may be called simultaneously by different threads.
 * Hence, classes implementing this interface should synchronize accesses to
 * any mutable shared state.
 * 
 * @param <D> The type of data-flow facts to be computed by the tabulation problem.
 */









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






34




public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






35




36




37




38





	/**
	 * Returns the target values reachable from the source.
	 */









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






39




	Set<AnnotatedFact<FieldRef, D>> computeTargets(D source);









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






40




	









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






41




42




	//TODO: rename to ConstrainedFact
	public static class AnnotatedFact<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






43




44




		
		private D fact;









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






45




		private Constraint<FieldRef> constraint;









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






46




47




48




49




50




51




52




53




		
		//TODO: Refactor API to make things more intuitive
		/**
		 * 
		 * @param fact
		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value
		 * @param writtenField
		 */









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






54




		public AnnotatedFact(D fact, Constraint<FieldRef> constraint) {









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






55




			this.fact = fact;









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






56




			this.constraint = constraint;









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






57




58




59




60




61




62




		}
		
		public D getFact() {
			return fact;
		}
		









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






63




64




		public Constraint<FieldRef> getConstraint() {
			return constraint;









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






65




66




67




68




69




70




		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






71




			result = prime * result + ((constraint == null) ? 0 : constraint.hashCode());









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






72




73




74




75




76




77




78




79




80




81




82




83




84




			result = prime * result + ((fact == null) ? 0 : fact.hashCode());
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (!(obj instanceof AnnotatedFact))
				return false;
			AnnotatedFact other = (AnnotatedFact) obj;









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






85




86




87




88




89




			if (constraint == null) {
				if (other.constraint != null)
					return false;
			} else if (!constraint.equals(other.constraint))
				return false;









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






90




91




92




93




94




95




96




			if (fact == null) {
				if (other.fact != null)
					return false;
			} else if (!fact.equals(other.fact))
				return false;
			return true;
		}









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






97




98




99




		
		@Override
		public String toString() {









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




137




138




139




140




141




142




143




144




			return fact.toString()+"<"+constraint+">";
		}
	}
	
	public interface Constraint<FieldRef> {
		AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath);
	}
	
	public class WriteFieldConstraint<FieldRef> implements Constraint<FieldRef> {
		private FieldRef fieldRef;

		public WriteFieldConstraint(FieldRef fieldRef) {
			this.fieldRef = fieldRef;
		}

		@Override
		public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {
			if(accPath.hasExclusions())
				return accPath.getExclusions(0).addExclusion(fieldRef);
			else
				return accPath.appendExcludedFieldReference(fieldRef);
		}
		
		@Override
		public String toString() {
			return "^"+fieldRef.toString();
		}
	}
	
	public class ReadFieldConstraint<FieldRef> implements Constraint<FieldRef> {

		private FieldRef fieldRef;

		public ReadFieldConstraint(FieldRef fieldRef) {
			this.fieldRef = fieldRef;
		}
		
		@Override
		public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {
			return accPath.addFieldReference(fieldRef);
		}
		
		@Override
		public String toString() {
			return fieldRef.toString();









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






145




		}









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






146




147




	}
}








FlowFunction.java



4.39 KB










FlowFunction.java



4.39 KB









Newer










Older
NewerOlder







annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




26




27




28




29




30




31




32




33




/*******************************************************************************
 * Copyright (c) 2012 Eric Bodden.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Eric Bodden - initial API and implementation
 ******************************************************************************/
package heros.alias;

import java.util.LinkedHashSet;
import java.util.Set;

/**
 * A flow function computes which of the finitely many D-type values are reachable
 * from the current source values. Typically there will be one such function
 * associated with every possible control flow. 
 * 
 * <b>NOTE:</b> To be able to produce <b>deterministic benchmarking results</b>, we have found that
 * it helps to return {@link LinkedHashSet}s from {@link #computeTargets(Object)}. This is
 * because the duration of IDE's fixed point iteration may depend on the iteration order.
 * Within the solver, we have tried to fix this order as much as possible, but the
 * order, in general, does also depend on the order in which the result set
 * of {@link #computeTargets(Object)} is traversed.
 * 
 * <b>NOTE:</b> Methods defined on this type may be called simultaneously by different threads.
 * Hence, classes implementing this interface should synchronize accesses to
 * any mutable shared state.
 * 
 * @param <D> The type of data-flow facts to be computed by the tabulation problem.
 */









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






34




public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






35




36




37




38





	/**
	 * Returns the target values reachable from the source.
	 */









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






39




	Set<AnnotatedFact<FieldRef, D>> computeTargets(D source);









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






40




	









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






41




42




	//TODO: rename to ConstrainedFact
	public static class AnnotatedFact<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






43




44




		
		private D fact;









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






45




		private Constraint<FieldRef> constraint;









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






46




47




48




49




50




51




52




53




		
		//TODO: Refactor API to make things more intuitive
		/**
		 * 
		 * @param fact
		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value
		 * @param writtenField
		 */









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






54




		public AnnotatedFact(D fact, Constraint<FieldRef> constraint) {









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






55




			this.fact = fact;









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






56




			this.constraint = constraint;









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






57




58




59




60




61




62




		}
		
		public D getFact() {
			return fact;
		}
		









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






63




64




		public Constraint<FieldRef> getConstraint() {
			return constraint;









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






65




66




67




68




69




70




		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






71




			result = prime * result + ((constraint == null) ? 0 : constraint.hashCode());









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






72




73




74




75




76




77




78




79




80




81




82




83




84




			result = prime * result + ((fact == null) ? 0 : fact.hashCode());
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (!(obj instanceof AnnotatedFact))
				return false;
			AnnotatedFact other = (AnnotatedFact) obj;









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






85




86




87




88




89




			if (constraint == null) {
				if (other.constraint != null)
					return false;
			} else if (!constraint.equals(other.constraint))
				return false;









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






90




91




92




93




94




95




96




			if (fact == null) {
				if (other.fact != null)
					return false;
			} else if (!fact.equals(other.fact))
				return false;
			return true;
		}









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






97




98




99




		
		@Override
		public String toString() {









cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015






100




101




102




103




104




105




106




107




108




109




110




111




112




113




114




115




116




117




118




119




120




121




122




123




124




125




126




127




128




129




130




131




132




133




134




135




136




137




138




139




140




141




142




143




144




			return fact.toString()+"<"+constraint+">";
		}
	}
	
	public interface Constraint<FieldRef> {
		AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath);
	}
	
	public class WriteFieldConstraint<FieldRef> implements Constraint<FieldRef> {
		private FieldRef fieldRef;

		public WriteFieldConstraint(FieldRef fieldRef) {
			this.fieldRef = fieldRef;
		}

		@Override
		public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {
			if(accPath.hasExclusions())
				return accPath.getExclusions(0).addExclusion(fieldRef);
			else
				return accPath.appendExcludedFieldReference(fieldRef);
		}
		
		@Override
		public String toString() {
			return "^"+fieldRef.toString();
		}
	}
	
	public class ReadFieldConstraint<FieldRef> implements Constraint<FieldRef> {

		private FieldRef fieldRef;

		public ReadFieldConstraint(FieldRef fieldRef) {
			this.fieldRef = fieldRef;
		}
		
		@Override
		public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {
			return accPath.addFieldReference(fieldRef);
		}
		
		@Override
		public String toString() {
			return fieldRef.toString();









edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014






145




		}









annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014






146




147




	}
}







annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014



annotated facts (WIP)



 

annotated facts (WIP)


Johannes Lerch
committed
Nov 13, 2014

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

28

29

30

31

32

33
/*******************************************************************************/******************************************************************************* * Copyright (c) 2012 Eric Bodden. * Copyright (c) 2012 Eric Bodden. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Eric Bodden - initial API and implementation *     Eric Bodden - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;import java.util.LinkedHashSet;importjava.util.LinkedHashSet;import java.util.Set;importjava.util.Set;/**/** * A flow function computes which of the finitely many D-type values are reachable * A flow function computes which of the finitely many D-type values are reachable * from the current source values. Typically there will be one such function * from the current source values. Typically there will be one such function * associated with every possible control flow.  * associated with every possible control flow.  *  *  * <b>NOTE:</b> To be able to produce <b>deterministic benchmarking results</b>, we have found that * <b>NOTE:</b> To be able to produce <b>deterministic benchmarking results</b>, we have found that * it helps to return {@link LinkedHashSet}s from {@link #computeTargets(Object)}. This is * it helps to return {@link LinkedHashSet}s from {@link #computeTargets(Object)}. This is * because the duration of IDE's fixed point iteration may depend on the iteration order. * because the duration of IDE's fixed point iteration may depend on the iteration order. * Within the solver, we have tried to fix this order as much as possible, but the * Within the solver, we have tried to fix this order as much as possible, but the * order, in general, does also depend on the order in which the result set * order, in general, does also depend on the order in which the result set * of {@link #computeTargets(Object)} is traversed. * of {@link #computeTargets(Object)} is traversed. *  *  * <b>NOTE:</b> Methods defined on this type may be called simultaneously by different threads. * <b>NOTE:</b> Methods defined on this type may be called simultaneously by different threads. * Hence, classes implementing this interface should synchronize accesses to * Hence, classes implementing this interface should synchronize accesses to * any mutable shared state. * any mutable shared state. *  *  * @param <D> The type of data-flow facts to be computed by the tabulation problem. * @param <D> The type of data-flow facts to be computed by the tabulation problem. */ */



cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015



cleaning code


 

 

cleaning code

 

Johannes Lerch
committed
Jan 07, 2015

34
public interface FlowFunction<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {publicinterfaceFlowFunction<FieldRef,DextendsFieldSensitiveFact<?,FieldRef,D>>{



annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014



annotated facts (WIP)



 

annotated facts (WIP)


Johannes Lerch
committed
Nov 13, 2014

35

36

37

38
	/**/**	 * Returns the target values reachable from the source.	 * Returns the target values reachable from the source.	 */	 */



cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015



cleaning code


 

 

cleaning code

 

Johannes Lerch
committed
Jan 07, 2015

39
	Set<AnnotatedFact<FieldRef, D>> computeTargets(D source);Set<AnnotatedFact<FieldRef,D>>computeTargets(Dsource);



annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014



annotated facts (WIP)



 

annotated facts (WIP)


Johannes Lerch
committed
Nov 13, 2014

40
	



cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015



cleaning code


 

 

cleaning code

 

Johannes Lerch
committed
Jan 07, 2015

41

42
	//TODO: rename to ConstrainedFact//TODO: rename to ConstrainedFact	public static class AnnotatedFact<FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> {publicstaticclassAnnotatedFact<FieldRef,DextendsFieldSensitiveFact<?,FieldRef,D>>{



annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014



annotated facts (WIP)



 

annotated facts (WIP)


Johannes Lerch
committed
Nov 13, 2014

43

44
				private D fact;privateDfact;



cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015



cleaning code


 

 

cleaning code

 

Johannes Lerch
committed
Jan 07, 2015

45
		private Constraint<FieldRef> constraint;privateConstraint<FieldRef>constraint;



annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014



annotated facts (WIP)



 

annotated facts (WIP)


Johannes Lerch
committed
Nov 13, 2014

46

47

48

49

50

51

52

53
				//TODO: Refactor API to make things more intuitive//TODO: Refactor API to make things more intuitive		/**/**		 * 		 * 		 * @param fact		 * @param fact		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value		 * @param writtenField		 * @param writtenField		 */		 */



cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015



cleaning code


 

 

cleaning code

 

Johannes Lerch
committed
Jan 07, 2015

54
		public AnnotatedFact(D fact, Constraint<FieldRef> constraint) {publicAnnotatedFact(Dfact,Constraint<FieldRef>constraint){



annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014



annotated facts (WIP)



 

annotated facts (WIP)


Johannes Lerch
committed
Nov 13, 2014

55
			this.fact = fact;this.fact=fact;



cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015



cleaning code


 

 

cleaning code

 

Johannes Lerch
committed
Jan 07, 2015

56
			this.constraint = constraint;this.constraint=constraint;



annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014



annotated facts (WIP)



 

annotated facts (WIP)


Johannes Lerch
committed
Nov 13, 2014

57

58

59

60

61

62
		}}				public D getFact() {publicDgetFact(){			return fact;returnfact;		}}		



cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015



cleaning code


 

 

cleaning code

 

Johannes Lerch
committed
Jan 07, 2015

63

64
		public Constraint<FieldRef> getConstraint() {publicConstraint<FieldRef>getConstraint(){			return constraint;returnconstraint;



annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014



annotated facts (WIP)



 

annotated facts (WIP)


Johannes Lerch
committed
Nov 13, 2014

65

66

67

68

69

70
		}}		@Override@Override		public int hashCode() {publicinthashCode(){			final int prime = 31;finalintprime=31;			int result = 1;intresult=1;



cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015



cleaning code


 

 

cleaning code

 

Johannes Lerch
committed
Jan 07, 2015

71
			result = prime * result + ((constraint == null) ? 0 : constraint.hashCode());result=prime*result+((constraint==null)?0:constraint.hashCode());



annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014



annotated facts (WIP)



 

annotated facts (WIP)


Johannes Lerch
committed
Nov 13, 2014

72

73

74

75

76

77

78

79

80

81

82

83

84
			result = prime * result + ((fact == null) ? 0 : fact.hashCode());result=prime*result+((fact==null)?0:fact.hashCode());			return result;returnresult;		}}		@Override@Override		public boolean equals(Object obj) {publicbooleanequals(Objectobj){			if (this == obj)if(this==obj)				return true;returntrue;			if (obj == null)if(obj==null)				return false;returnfalse;			if (!(obj instanceof AnnotatedFact))if(!(objinstanceofAnnotatedFact))				return false;returnfalse;			AnnotatedFact other = (AnnotatedFact) obj;AnnotatedFactother=(AnnotatedFact)obj;



cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015



cleaning code


 

 

cleaning code

 

Johannes Lerch
committed
Jan 07, 2015

85

86

87

88

89
			if (constraint == null) {if(constraint==null){				if (other.constraint != null)if(other.constraint!=null)					return false;returnfalse;			} else if (!constraint.equals(other.constraint))}elseif(!constraint.equals(other.constraint))				return false;returnfalse;



annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014



annotated facts (WIP)



 

annotated facts (WIP)


Johannes Lerch
committed
Nov 13, 2014

90

91

92

93

94

95

96
			if (fact == null) {if(fact==null){				if (other.fact != null)if(other.fact!=null)					return false;returnfalse;			} else if (!fact.equals(other.fact))}elseif(!fact.equals(other.fact))				return false;returnfalse;			return true;returntrue;		}}



edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014



edges on hold + resume


 

 

edges on hold + resume

 

Johannes Lerch
committed
Nov 25, 2014

97

98

99
				@Override@Override		public String toString() {publicStringtoString(){



cleaning code


 

 


Johannes Lerch
committed
Jan 07, 2015



cleaning code


 

 

cleaning code

 

Johannes Lerch
committed
Jan 07, 2015

100

101

102

103

104

105

106

107

108

109

110

111

112

113

114

115

116

117

118

119

120

121

122

123

124

125

126

127

128

129

130

131

132

133

134

135

136

137

138

139

140

141

142

143

144
			return fact.toString()+"<"+constraint+">";returnfact.toString()+"<"+constraint+">";		}}	}}		public interface Constraint<FieldRef> {publicinterfaceConstraint<FieldRef>{		AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath);AccessPath<FieldRef>applyToAccessPath(AccessPath<FieldRef>accPath);	}}		public class WriteFieldConstraint<FieldRef> implements Constraint<FieldRef> {publicclassWriteFieldConstraint<FieldRef>implementsConstraint<FieldRef>{		private FieldRef fieldRef;privateFieldReffieldRef;		public WriteFieldConstraint(FieldRef fieldRef) {publicWriteFieldConstraint(FieldReffieldRef){			this.fieldRef = fieldRef;this.fieldRef=fieldRef;		}}		@Override@Override		public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {publicAccessPath<FieldRef>applyToAccessPath(AccessPath<FieldRef>accPath){			if(accPath.hasExclusions())if(accPath.hasExclusions())				return accPath.getExclusions(0).addExclusion(fieldRef);returnaccPath.getExclusions(0).addExclusion(fieldRef);			elseelse				return accPath.appendExcludedFieldReference(fieldRef);returnaccPath.appendExcludedFieldReference(fieldRef);		}}				@Override@Override		public String toString() {publicStringtoString(){			return "^"+fieldRef.toString();return"^"+fieldRef.toString();		}}	}}		public class ReadFieldConstraint<FieldRef> implements Constraint<FieldRef> {publicclassReadFieldConstraint<FieldRef>implementsConstraint<FieldRef>{		private FieldRef fieldRef;privateFieldReffieldRef;		public ReadFieldConstraint(FieldRef fieldRef) {publicReadFieldConstraint(FieldReffieldRef){			this.fieldRef = fieldRef;this.fieldRef=fieldRef;		}}				@Override@Override		public AccessPath<FieldRef> applyToAccessPath(AccessPath<FieldRef> accPath) {publicAccessPath<FieldRef>applyToAccessPath(AccessPath<FieldRef>accPath){			return accPath.addFieldReference(fieldRef);returnaccPath.addFieldReference(fieldRef);		}}				@Override@Override		public String toString() {publicStringtoString(){			return fieldRef.toString();returnfieldRef.toString();



edges on hold + resume


 

 


Johannes Lerch
committed
Nov 25, 2014



edges on hold + resume


 

 

edges on hold + resume

 

Johannes Lerch
committed
Nov 25, 2014

145
		}}



annotated facts (WIP)



 


Johannes Lerch
committed
Nov 13, 2014



annotated facts (WIP)



 

annotated facts (WIP)


Johannes Lerch
committed
Nov 13, 2014

146

147
	}}}}





