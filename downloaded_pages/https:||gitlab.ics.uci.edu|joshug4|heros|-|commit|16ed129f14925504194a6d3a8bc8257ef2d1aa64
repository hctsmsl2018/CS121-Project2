



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

16ed129f















Commit
16ed129f


authored
Jul 10, 2013
by


Eric Bodden



Browse files




Merge branch 'develop' into feature/exception-handling


Conflicts:
	src/heros/solver/IDESolver.java






parents
cd7c8575
83d31a14













Changes
6




Hide whitespace changes

Inline
Side-by-side















src/heros/DefaultSeeds.java



0 → 100644







View file @ 16ed129f













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.Collections;










import java.util.HashMap;










import java.util.Map;










import java.util.Set;





















/**










 * A utility class for creating default seeds that cause an analysis to simply start at a given statement.










 * This is useful if seeding is performed entirely through flow functions as used to be the case in 










 * earlier versions of Heros.










 */










public class DefaultSeeds {










 










 public static <N,D> Map<N,Set<D>> make(Set<N> units, D zeroNode) {










 Map<N,Set<D>> res = new HashMap<N, Set<D>>();










 for (N n : units) {










 res.put(n, Collections.singleton(zeroNode));










 }










 return res;










 }





















}














src/heros/IFDSTabulationProblem.java








View file @ 16ed129f






......@@ -12,6 +12,7 @@ package heros;




















import heros.solver.IFDSSolver;





















import java.util.Map;










import java.util.Set;

























......@@ -45,9 +46,9 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>









 I interproceduralCFG();










 










 /**










	 * Returns initial seeds to be used for the analysis. (a set of statements)










	 * Returns initial seeds to be used for the analysis. This is a mapping of statements to initial analysis facts.










	 */










 Set<N> initialSeeds();










 Map<N,Set<D>> initialSeeds();










 










 /**










	 * This must be a data-flow fact of type {@link D}, but must <i>not</i>



......














src/heros/solver/BiDiIFDSSolver.java



0 → 100644







View file @ 16ed129f













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> see {@link IFDSSolver}










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, forwardProblem.numThreads(), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() { 










 fwSolver = new SingleDirectionSolver(forwardProblem, "FW");










 bwSolver = new SingleDirectionSolver(backwardProblem,"BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 //start the bw solver










 bwSolver.submitInitialSeeds();










 










 //start the fw solver and block until both solvers have completed










 //(note that they both share the same executor, see below)










 //note to self: the order of the two should not matter










 fwSolver.solve();










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 private class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();





















 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();










 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);










 if(DEBUG)










 System.err.println("++ PAUSE "+debugName+": "+edge);










 }










 } else {










 //the default case










 super.processExit(edge);










 }










 }










 










 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(N sourceStmt) {










 return leakedSources.contains(sourceStmt);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 if(DEBUG)










 System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge);










 super.processExit(pausedEdge);










 }










 pausedPathEdges.remove(sourceStmt);










 }










 }










 










 /* we share the same executor; this will cause the call to solve() above to block










		 * until both solvers have finished










		 */ 










 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 private D getAbstraction() {










 return abstraction;










 }










 










 private N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }










 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>>










 implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt<N, D>(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallFlowFunction(callStmt, destinationMethod));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);





















 //optimization










 if(origTargets.equals(Collections.singleton(originalAbstraction))) return Collections.singleton(source); 










 










 Set<AbstractionWithSourceStmt<N, D>> res = new HashSet<AbstractionWithSourceStmt<N,D>>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt<N,D>(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt<N, D>>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt<N, D>>> res = new HashMap<N, Set<AbstractionWithSourceStmt<N,D>>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt<N, D>> resSet = new HashSet<AbstractionWithSourceStmt<N,D>>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt<N,D>(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt<N, D> zeroValue() {










 return ZERO;










 }





















 }










 










 public Set<D> fwIFDSResultAt(N stmt) {










 return extractResults(fwSolver.ifdsResultsAt(stmt));










 }





















 










 public Set<D> bwIFDSResultAt(N stmt) {










 return extractResults(bwSolver.ifdsResultsAt(stmt));










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt<N, D>> annotatedResults) {










 Set<D> res = new HashSet<D>(); 










 for (AbstractionWithSourceStmt<N, D> abstractionWithSourceStmt : annotatedResults) {










 res.add(abstractionWithSourceStmt.getAbstraction());










 }










 return res;










 }










 










}














src/heros/solver/IDESolver.java








View file @ 16ed129f






......@@ -30,7 +30,6 @@ import heros.edgefunc.EdgeIdentity;









import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;



......@@ -98,7 +97,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 protected final EdgeFunctions<N,D,M,V> edgeFunctions;





















 @DontSynchronize("only used by single thread")










 protected final Set<N> initialSeeds;










 protected final Map<N,Set<D>> initialSeeds;





















 @DontSynchronize("stateless")










 protected final JoinLattice<V> valueLattice;



......@@ -191,20 +190,24 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * Runs the solver on the configured problem. This can take some time.










	 */










 public void solve() { 










 /*










		   * Forward-tabulates the same-level realizable paths and associated functions.










		   * Note that this is a little different from the original IFDS formulations because










		   * we can have statements that are, for instance, both "normal" and "exit" statements.










		   * This is for instance the case on a "throw" statement that may on the one hand










		   * lead to a catch block but on the other hand exit the method depending










		   * on the exception being thrown.










		   */










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 submitInitialSeeds();










 awaitCompletionComputeValuesAndShutdown();










 }





















 /**










	 * Schedules the processing of initial seeds, initiating the analysis.










	 * Clients should only call this methods if performing synchronization on










	 * their own. Normally, {@link #solve()} should be called instead.










	 */










 protected void submitInitialSeeds() {










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v(), null, false);










 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));










 }










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }










 awaitCompletionComputeValuesAndShutdown();










 }





















 /**



......@@ -255,7 +258,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * Dispatch the processing of a given edge. It may be executed in a different thread.










     * @param edge the edge to process










     */










 protected void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -284,7 +287,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method call










	 */










 private void processCall(PathEdge<N,D,M> edge) {










 private void processCall(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); // a call node; line 14...










 final D d2 = edge.factAtTarget();



......@@ -302,11 +305,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //for each callee's start point(s)










 Set<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 for(N sP: startPointsOf) { 










 for(N sP: startPointsOf) {










 //for each result node of the call-flow function










 for(D d3: res) {










 //create initial self-loop










 propagate(d3, sP, d3, EdgeIdentity.<V>v()); //line 15










 propagate(d3, sP, d3, EdgeIdentity.<V>v(), n, false); //line 15










 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>










 Set<Cell<N, D, EdgeFunction<V>>> endSumm;



......@@ -314,7 +317,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //line 15.1 of Naeem/Lhotak/Rodriguez










 addIncoming(sP,d3,n,d2);










 //line 15.2, copy to avoid concurrent modification exceptions by other threads










 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3)); 










 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));










 










 assert !jumpFn.reverseLookup(n, d2).isEmpty();










 }










 










 //still line 15.2 of Naeem/Lhotak/Rodriguez



......@@ -336,7 +341,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);










 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 










 propagate(d1, retSiteN, d5, f.composeWith(fPrime));










 propagate(d1, retSiteN, d5, f.composeWith(fPrime), n, false);










 }










 }










 }



......@@ -350,7 +355,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 flowFunctionConstructionCount++;










 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {










 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);










 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));










 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);










 }










 }










 }



......@@ -364,7 +369,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method exits










	 */










 private void processExit(PathEdge<N,D,M> edge) {










 protected void processExit(PathEdge<N,D> edge) {










 final N n = edge.getTarget(); // an exit node; line 21...










 EdgeFunction<V> f = jumpFunction(edge);










 M methodThatNeedsSummary = icfg.getMethodOf(n);



......@@ -411,7 +416,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)) {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime), c, false);










 }










 }










 }



......@@ -419,17 +424,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 // Make sure that the whole method was never called, regardless of the










 // calling jump function.










 boolean wasCalled = false;










 for(N sP: startPointsOf)










 if (incoming.containsRow(sP)) {










 wasCalled = true;










 break;










 }










 if(!wasCalled && followReturnsPastSeeds) {










 //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow










 //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only










 //be propagated into callers that have an incoming edge for this condition










 if(followReturnsPastSeeds && inc.isEmpty() && d1.equals(zeroValue)) {










 // only propagate up if we 










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {



......@@ -438,7 +437,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> targets = retFunction.computeTargets(d2);










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(zeroValue, retSiteC, d5, f.composeWith(f5));










 propagate(zeroValue, retSiteC, d5, f.composeWith(f5), c, true);










 }










 }










 }



......@@ -452,14 +451,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 }










 










 /**










	 * Lines 33-37 of the algorithm.










	 * Simply propagate normal, intra-procedural flows.










	 * @param edge










	 */










 private void processNormalFlow(PathEdge<N,D,M> edge) {










 private void processNormalFlow(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); 










 final D d2 = edge.factAtTarget();



......@@ -470,12 +468,26 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> res = flowFunction.computeTargets(d2);










 for (D d3 : res) {










 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));










 propagate(d1, m, d3, fprime); 










 propagate(d1, m, d3, fprime, null, false); 










 }










 }










 }










 










 private void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f) {










 /**










	 * Propagates the flow further down the exploded super graph, merging any edge function that might










	 * already have been computed for targetVal at target. 










	 * @param sourceVal the source value of the propagated summary edge










	 * @param target the target statement










	 * @param targetVal the target value at the target statement










	 * @param f the new edge function computed from (s0,sourceVal) to (target,targetVal) 










	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 










	 * @param isUnbalancedReturn <code>true</code> if this edge is propagating an unbalanced return










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 










	 */










 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f,










 /* deliberately exposed to clients */ N relatedCallSite,










 /* deliberately exposed to clients */ boolean isUnbalancedReturn) {










 EdgeFunction<V> jumpFnE;










 EdgeFunction<V> fPrime;










 boolean newFunction;



......@@ -490,12 +502,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 if(newFunction) {










 PathEdge<N,D,M> edge = new PathEdge<N,D,M>(sourceVal, target, targetVal);










 PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {










 if(targetVal!=zeroValue) { 










 StringBuilder result = new StringBuilder();










 result.append(getDebugName());










 result.append(": ");










 result.append("EDGE:  <");










 result.append(icfg.getMethodOf(target));










 result.append(",");



......@@ -517,10 +531,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 setVal(startPoint, val, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, val); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 }










 










 //await termination of tasks



......@@ -606,15 +623,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 else return l;










 }










 










 private void setVal(N nHashN, D nHashD,V l){ 










 private void setVal(N nHashN, D nHashD,V l){










 // TOP is the implicit default value which we do not need to store.










 synchronized (val) {










 val.put(nHashN, nHashD,l);










 if (l == valueLattice.topElement()) // do not store top values










 val.remove(nHashN, nHashD);










 else










 val.put(nHashN, nHashD,l);










 }










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 private EdgeFunction<V> jumpFunction(PathEdge<N,D> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper



......@@ -661,7 +682,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 } 










 










 /**










	 * Returns the V-type result for the given value at the given statement. 










	 * Returns the V-type result for the given value at the given statement.










	 * TOP values are never returned.










	 */










 public V resultAt(N stmt, D value) {










 //no need to synchronize here as all threads are known to have terminated



......@@ -670,7 +692,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 /**










	 * Returns the resulting environment for the given statement.










	 * The artificial zero value is automatically stripped.










	 * The artificial zero value is automatically stripped. TOP values are










	 * never returned.










	 */










 public Map<D,V> resultsAt(N stmt) {










 //filter out the artificial zero-value



......@@ -689,6 +712,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 protected CountingThreadPoolExecutor getExecutor() {










 return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 /**










	 * Returns a String used to identify the output of this solver in debug mode.










	 * Subclasses can overwrite this string to distinguish the output from different solvers.










	 */










 protected String getDebugName() {










 return "";










 }





















 public void printStats() {










 if(DEBUG) {



......@@ -702,9 +733,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 private class PathEdgeProcessingTask implements Runnable {










 private final PathEdge<N, D, M> edge;










 private final PathEdge<N,D> edge;





















 public PathEdgeProcessingTask(PathEdge<N, D, M> edge) {










 public PathEdgeProcessingTask(PathEdge<N,D> edge) {










 this.edge = edge;










 }














......@@ -734,7 +765,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.contains(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 initialSeeds.containsKey(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......














src/heros/solver/IFDSSolver.java








View file @ 16ed129f






......@@ -12,7 +12,6 @@ package heros.solver;




















import static heros.solver.IFDSSolver.BinaryDomain.BOTTOM;










import static heros.solver.IFDSSolver.BinaryDomain.TOP;





















import heros.EdgeFunction;










import heros.EdgeFunctions;










import heros.FlowFunctions;



......@@ -24,6 +23,7 @@ import heros.edgefunc.AllBottom;









import heros.edgefunc.AllTop;










import heros.edgefunc.EdgeIdentity;





















import java.util.Map;










import java.util.Set;





















/**



......@@ -59,7 +59,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 return ifdsProblem.interproceduralCFG();










 }





















 public Set<N> initialSeeds() {










 public Map<N,Set<D>> initialSeeds() {










 return ifdsProblem.initialSeeds();










 }














......














src/heros/solver/PathEdge.java








View file @ 16ed129f






......@@ -19,9 +19,8 @@ import heros.InterproceduralCFG;









 *










 * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}.










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.










 */










public class PathEdge<N,D,M> {










public class PathEdge<N,D> {





















 protected final N target;










 protected final D dSource, dTarget;



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

16ed129f















Commit
16ed129f


authored
Jul 10, 2013
by


Eric Bodden



Browse files




Merge branch 'develop' into feature/exception-handling


Conflicts:
	src/heros/solver/IDESolver.java






parents
cd7c8575
83d31a14













Changes
6




Hide whitespace changes

Inline
Side-by-side















src/heros/DefaultSeeds.java



0 → 100644







View file @ 16ed129f













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.Collections;










import java.util.HashMap;










import java.util.Map;










import java.util.Set;





















/**










 * A utility class for creating default seeds that cause an analysis to simply start at a given statement.










 * This is useful if seeding is performed entirely through flow functions as used to be the case in 










 * earlier versions of Heros.










 */










public class DefaultSeeds {










 










 public static <N,D> Map<N,Set<D>> make(Set<N> units, D zeroNode) {










 Map<N,Set<D>> res = new HashMap<N, Set<D>>();










 for (N n : units) {










 res.put(n, Collections.singleton(zeroNode));










 }










 return res;










 }





















}














src/heros/IFDSTabulationProblem.java








View file @ 16ed129f






......@@ -12,6 +12,7 @@ package heros;




















import heros.solver.IFDSSolver;





















import java.util.Map;










import java.util.Set;

























......@@ -45,9 +46,9 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>









 I interproceduralCFG();










 










 /**










	 * Returns initial seeds to be used for the analysis. (a set of statements)










	 * Returns initial seeds to be used for the analysis. This is a mapping of statements to initial analysis facts.










	 */










 Set<N> initialSeeds();










 Map<N,Set<D>> initialSeeds();










 










 /**










	 * This must be a data-flow fact of type {@link D}, but must <i>not</i>



......














src/heros/solver/BiDiIFDSSolver.java



0 → 100644







View file @ 16ed129f













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> see {@link IFDSSolver}










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, forwardProblem.numThreads(), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() { 










 fwSolver = new SingleDirectionSolver(forwardProblem, "FW");










 bwSolver = new SingleDirectionSolver(backwardProblem,"BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 //start the bw solver










 bwSolver.submitInitialSeeds();










 










 //start the fw solver and block until both solvers have completed










 //(note that they both share the same executor, see below)










 //note to self: the order of the two should not matter










 fwSolver.solve();










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 private class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();





















 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();










 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);










 if(DEBUG)










 System.err.println("++ PAUSE "+debugName+": "+edge);










 }










 } else {










 //the default case










 super.processExit(edge);










 }










 }










 










 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(N sourceStmt) {










 return leakedSources.contains(sourceStmt);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 if(DEBUG)










 System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge);










 super.processExit(pausedEdge);










 }










 pausedPathEdges.remove(sourceStmt);










 }










 }










 










 /* we share the same executor; this will cause the call to solve() above to block










		 * until both solvers have finished










		 */ 










 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 private D getAbstraction() {










 return abstraction;










 }










 










 private N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }










 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>>










 implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt<N, D>(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallFlowFunction(callStmt, destinationMethod));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);





















 //optimization










 if(origTargets.equals(Collections.singleton(originalAbstraction))) return Collections.singleton(source); 










 










 Set<AbstractionWithSourceStmt<N, D>> res = new HashSet<AbstractionWithSourceStmt<N,D>>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt<N,D>(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt<N, D>>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt<N, D>>> res = new HashMap<N, Set<AbstractionWithSourceStmt<N,D>>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt<N, D>> resSet = new HashSet<AbstractionWithSourceStmt<N,D>>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt<N,D>(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt<N, D> zeroValue() {










 return ZERO;










 }





















 }










 










 public Set<D> fwIFDSResultAt(N stmt) {










 return extractResults(fwSolver.ifdsResultsAt(stmt));










 }





















 










 public Set<D> bwIFDSResultAt(N stmt) {










 return extractResults(bwSolver.ifdsResultsAt(stmt));










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt<N, D>> annotatedResults) {










 Set<D> res = new HashSet<D>(); 










 for (AbstractionWithSourceStmt<N, D> abstractionWithSourceStmt : annotatedResults) {










 res.add(abstractionWithSourceStmt.getAbstraction());










 }










 return res;










 }










 










}














src/heros/solver/IDESolver.java








View file @ 16ed129f






......@@ -30,7 +30,6 @@ import heros.edgefunc.EdgeIdentity;









import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;



......@@ -98,7 +97,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 protected final EdgeFunctions<N,D,M,V> edgeFunctions;





















 @DontSynchronize("only used by single thread")










 protected final Set<N> initialSeeds;










 protected final Map<N,Set<D>> initialSeeds;





















 @DontSynchronize("stateless")










 protected final JoinLattice<V> valueLattice;



......@@ -191,20 +190,24 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * Runs the solver on the configured problem. This can take some time.










	 */










 public void solve() { 










 /*










		   * Forward-tabulates the same-level realizable paths and associated functions.










		   * Note that this is a little different from the original IFDS formulations because










		   * we can have statements that are, for instance, both "normal" and "exit" statements.










		   * This is for instance the case on a "throw" statement that may on the one hand










		   * lead to a catch block but on the other hand exit the method depending










		   * on the exception being thrown.










		   */










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 submitInitialSeeds();










 awaitCompletionComputeValuesAndShutdown();










 }





















 /**










	 * Schedules the processing of initial seeds, initiating the analysis.










	 * Clients should only call this methods if performing synchronization on










	 * their own. Normally, {@link #solve()} should be called instead.










	 */










 protected void submitInitialSeeds() {










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v(), null, false);










 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));










 }










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }










 awaitCompletionComputeValuesAndShutdown();










 }





















 /**



......@@ -255,7 +258,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * Dispatch the processing of a given edge. It may be executed in a different thread.










     * @param edge the edge to process










     */










 protected void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -284,7 +287,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method call










	 */










 private void processCall(PathEdge<N,D,M> edge) {










 private void processCall(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); // a call node; line 14...










 final D d2 = edge.factAtTarget();



......@@ -302,11 +305,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //for each callee's start point(s)










 Set<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 for(N sP: startPointsOf) { 










 for(N sP: startPointsOf) {










 //for each result node of the call-flow function










 for(D d3: res) {










 //create initial self-loop










 propagate(d3, sP, d3, EdgeIdentity.<V>v()); //line 15










 propagate(d3, sP, d3, EdgeIdentity.<V>v(), n, false); //line 15










 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>










 Set<Cell<N, D, EdgeFunction<V>>> endSumm;



......@@ -314,7 +317,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //line 15.1 of Naeem/Lhotak/Rodriguez










 addIncoming(sP,d3,n,d2);










 //line 15.2, copy to avoid concurrent modification exceptions by other threads










 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3)); 










 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));










 










 assert !jumpFn.reverseLookup(n, d2).isEmpty();










 }










 










 //still line 15.2 of Naeem/Lhotak/Rodriguez



......@@ -336,7 +341,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);










 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 










 propagate(d1, retSiteN, d5, f.composeWith(fPrime));










 propagate(d1, retSiteN, d5, f.composeWith(fPrime), n, false);










 }










 }










 }



......@@ -350,7 +355,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 flowFunctionConstructionCount++;










 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {










 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);










 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));










 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);










 }










 }










 }



......@@ -364,7 +369,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method exits










	 */










 private void processExit(PathEdge<N,D,M> edge) {










 protected void processExit(PathEdge<N,D> edge) {










 final N n = edge.getTarget(); // an exit node; line 21...










 EdgeFunction<V> f = jumpFunction(edge);










 M methodThatNeedsSummary = icfg.getMethodOf(n);



......@@ -411,7 +416,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)) {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime), c, false);










 }










 }










 }



......@@ -419,17 +424,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 // Make sure that the whole method was never called, regardless of the










 // calling jump function.










 boolean wasCalled = false;










 for(N sP: startPointsOf)










 if (incoming.containsRow(sP)) {










 wasCalled = true;










 break;










 }










 if(!wasCalled && followReturnsPastSeeds) {










 //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow










 //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only










 //be propagated into callers that have an incoming edge for this condition










 if(followReturnsPastSeeds && inc.isEmpty() && d1.equals(zeroValue)) {










 // only propagate up if we 










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {



......@@ -438,7 +437,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> targets = retFunction.computeTargets(d2);










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(zeroValue, retSiteC, d5, f.composeWith(f5));










 propagate(zeroValue, retSiteC, d5, f.composeWith(f5), c, true);










 }










 }










 }



......@@ -452,14 +451,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 }










 










 /**










	 * Lines 33-37 of the algorithm.










	 * Simply propagate normal, intra-procedural flows.










	 * @param edge










	 */










 private void processNormalFlow(PathEdge<N,D,M> edge) {










 private void processNormalFlow(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); 










 final D d2 = edge.factAtTarget();



......@@ -470,12 +468,26 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> res = flowFunction.computeTargets(d2);










 for (D d3 : res) {










 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));










 propagate(d1, m, d3, fprime); 










 propagate(d1, m, d3, fprime, null, false); 










 }










 }










 }










 










 private void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f) {










 /**










	 * Propagates the flow further down the exploded super graph, merging any edge function that might










	 * already have been computed for targetVal at target. 










	 * @param sourceVal the source value of the propagated summary edge










	 * @param target the target statement










	 * @param targetVal the target value at the target statement










	 * @param f the new edge function computed from (s0,sourceVal) to (target,targetVal) 










	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 










	 * @param isUnbalancedReturn <code>true</code> if this edge is propagating an unbalanced return










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 










	 */










 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f,










 /* deliberately exposed to clients */ N relatedCallSite,










 /* deliberately exposed to clients */ boolean isUnbalancedReturn) {










 EdgeFunction<V> jumpFnE;










 EdgeFunction<V> fPrime;










 boolean newFunction;



......@@ -490,12 +502,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 if(newFunction) {










 PathEdge<N,D,M> edge = new PathEdge<N,D,M>(sourceVal, target, targetVal);










 PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {










 if(targetVal!=zeroValue) { 










 StringBuilder result = new StringBuilder();










 result.append(getDebugName());










 result.append(": ");










 result.append("EDGE:  <");










 result.append(icfg.getMethodOf(target));










 result.append(",");



......@@ -517,10 +531,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 setVal(startPoint, val, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, val); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 }










 










 //await termination of tasks



......@@ -606,15 +623,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 else return l;










 }










 










 private void setVal(N nHashN, D nHashD,V l){ 










 private void setVal(N nHashN, D nHashD,V l){










 // TOP is the implicit default value which we do not need to store.










 synchronized (val) {










 val.put(nHashN, nHashD,l);










 if (l == valueLattice.topElement()) // do not store top values










 val.remove(nHashN, nHashD);










 else










 val.put(nHashN, nHashD,l);










 }










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 private EdgeFunction<V> jumpFunction(PathEdge<N,D> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper



......@@ -661,7 +682,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 } 










 










 /**










	 * Returns the V-type result for the given value at the given statement. 










	 * Returns the V-type result for the given value at the given statement.










	 * TOP values are never returned.










	 */










 public V resultAt(N stmt, D value) {










 //no need to synchronize here as all threads are known to have terminated



......@@ -670,7 +692,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 /**










	 * Returns the resulting environment for the given statement.










	 * The artificial zero value is automatically stripped.










	 * The artificial zero value is automatically stripped. TOP values are










	 * never returned.










	 */










 public Map<D,V> resultsAt(N stmt) {










 //filter out the artificial zero-value



......@@ -689,6 +712,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 protected CountingThreadPoolExecutor getExecutor() {










 return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 /**










	 * Returns a String used to identify the output of this solver in debug mode.










	 * Subclasses can overwrite this string to distinguish the output from different solvers.










	 */










 protected String getDebugName() {










 return "";










 }





















 public void printStats() {










 if(DEBUG) {



......@@ -702,9 +733,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 private class PathEdgeProcessingTask implements Runnable {










 private final PathEdge<N, D, M> edge;










 private final PathEdge<N,D> edge;





















 public PathEdgeProcessingTask(PathEdge<N, D, M> edge) {










 public PathEdgeProcessingTask(PathEdge<N,D> edge) {










 this.edge = edge;










 }














......@@ -734,7 +765,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.contains(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 initialSeeds.containsKey(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......














src/heros/solver/IFDSSolver.java








View file @ 16ed129f






......@@ -12,7 +12,6 @@ package heros.solver;




















import static heros.solver.IFDSSolver.BinaryDomain.BOTTOM;










import static heros.solver.IFDSSolver.BinaryDomain.TOP;





















import heros.EdgeFunction;










import heros.EdgeFunctions;










import heros.FlowFunctions;



......@@ -24,6 +23,7 @@ import heros.edgefunc.AllBottom;









import heros.edgefunc.AllTop;










import heros.edgefunc.EdgeIdentity;





















import java.util.Map;










import java.util.Set;





















/**



......@@ -59,7 +59,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 return ifdsProblem.interproceduralCFG();










 }





















 public Set<N> initialSeeds() {










 public Map<N,Set<D>> initialSeeds() {










 return ifdsProblem.initialSeeds();










 }














......














src/heros/solver/PathEdge.java








View file @ 16ed129f






......@@ -19,9 +19,8 @@ import heros.InterproceduralCFG;









 *










 * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}.










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.










 */










public class PathEdge<N,D,M> {










public class PathEdge<N,D> {





















 protected final N target;










 protected final D dSource, dTarget;



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

16ed129f







Open sidebar



Joshua Garcia heros
Commits

16ed129f




Open sidebar

Joshua Garcia heros
Commits

16ed129f


Joshua GarciaherosherosCommits
16ed129f








Commit
16ed129f


authored
Jul 10, 2013
by


Eric Bodden



Browse files




Merge branch 'develop' into feature/exception-handling


Conflicts:
	src/heros/solver/IDESolver.java






parents
cd7c8575
83d31a14













Changes
6




Hide whitespace changes

Inline
Side-by-side















src/heros/DefaultSeeds.java



0 → 100644







View file @ 16ed129f













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.Collections;










import java.util.HashMap;










import java.util.Map;










import java.util.Set;





















/**










 * A utility class for creating default seeds that cause an analysis to simply start at a given statement.










 * This is useful if seeding is performed entirely through flow functions as used to be the case in 










 * earlier versions of Heros.










 */










public class DefaultSeeds {










 










 public static <N,D> Map<N,Set<D>> make(Set<N> units, D zeroNode) {










 Map<N,Set<D>> res = new HashMap<N, Set<D>>();










 for (N n : units) {










 res.put(n, Collections.singleton(zeroNode));










 }










 return res;










 }





















}














src/heros/IFDSTabulationProblem.java








View file @ 16ed129f






......@@ -12,6 +12,7 @@ package heros;




















import heros.solver.IFDSSolver;





















import java.util.Map;










import java.util.Set;

























......@@ -45,9 +46,9 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>









 I interproceduralCFG();










 










 /**










	 * Returns initial seeds to be used for the analysis. (a set of statements)










	 * Returns initial seeds to be used for the analysis. This is a mapping of statements to initial analysis facts.










	 */










 Set<N> initialSeeds();










 Map<N,Set<D>> initialSeeds();










 










 /**










	 * This must be a data-flow fact of type {@link D}, but must <i>not</i>



......














src/heros/solver/BiDiIFDSSolver.java



0 → 100644







View file @ 16ed129f













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> see {@link IFDSSolver}










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, forwardProblem.numThreads(), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() { 










 fwSolver = new SingleDirectionSolver(forwardProblem, "FW");










 bwSolver = new SingleDirectionSolver(backwardProblem,"BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 //start the bw solver










 bwSolver.submitInitialSeeds();










 










 //start the fw solver and block until both solvers have completed










 //(note that they both share the same executor, see below)










 //note to self: the order of the two should not matter










 fwSolver.solve();










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 private class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();





















 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();










 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);










 if(DEBUG)










 System.err.println("++ PAUSE "+debugName+": "+edge);










 }










 } else {










 //the default case










 super.processExit(edge);










 }










 }










 










 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(N sourceStmt) {










 return leakedSources.contains(sourceStmt);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 if(DEBUG)










 System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge);










 super.processExit(pausedEdge);










 }










 pausedPathEdges.remove(sourceStmt);










 }










 }










 










 /* we share the same executor; this will cause the call to solve() above to block










		 * until both solvers have finished










		 */ 










 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 private D getAbstraction() {










 return abstraction;










 }










 










 private N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }










 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>>










 implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt<N, D>(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallFlowFunction(callStmt, destinationMethod));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);





















 //optimization










 if(origTargets.equals(Collections.singleton(originalAbstraction))) return Collections.singleton(source); 










 










 Set<AbstractionWithSourceStmt<N, D>> res = new HashSet<AbstractionWithSourceStmt<N,D>>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt<N,D>(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt<N, D>>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt<N, D>>> res = new HashMap<N, Set<AbstractionWithSourceStmt<N,D>>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt<N, D>> resSet = new HashSet<AbstractionWithSourceStmt<N,D>>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt<N,D>(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt<N, D> zeroValue() {










 return ZERO;










 }





















 }










 










 public Set<D> fwIFDSResultAt(N stmt) {










 return extractResults(fwSolver.ifdsResultsAt(stmt));










 }





















 










 public Set<D> bwIFDSResultAt(N stmt) {










 return extractResults(bwSolver.ifdsResultsAt(stmt));










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt<N, D>> annotatedResults) {










 Set<D> res = new HashSet<D>(); 










 for (AbstractionWithSourceStmt<N, D> abstractionWithSourceStmt : annotatedResults) {










 res.add(abstractionWithSourceStmt.getAbstraction());










 }










 return res;










 }










 










}














src/heros/solver/IDESolver.java








View file @ 16ed129f






......@@ -30,7 +30,6 @@ import heros.edgefunc.EdgeIdentity;









import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;



......@@ -98,7 +97,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 protected final EdgeFunctions<N,D,M,V> edgeFunctions;





















 @DontSynchronize("only used by single thread")










 protected final Set<N> initialSeeds;










 protected final Map<N,Set<D>> initialSeeds;





















 @DontSynchronize("stateless")










 protected final JoinLattice<V> valueLattice;



......@@ -191,20 +190,24 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * Runs the solver on the configured problem. This can take some time.










	 */










 public void solve() { 










 /*










		   * Forward-tabulates the same-level realizable paths and associated functions.










		   * Note that this is a little different from the original IFDS formulations because










		   * we can have statements that are, for instance, both "normal" and "exit" statements.










		   * This is for instance the case on a "throw" statement that may on the one hand










		   * lead to a catch block but on the other hand exit the method depending










		   * on the exception being thrown.










		   */










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 submitInitialSeeds();










 awaitCompletionComputeValuesAndShutdown();










 }





















 /**










	 * Schedules the processing of initial seeds, initiating the analysis.










	 * Clients should only call this methods if performing synchronization on










	 * their own. Normally, {@link #solve()} should be called instead.










	 */










 protected void submitInitialSeeds() {










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v(), null, false);










 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));










 }










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }










 awaitCompletionComputeValuesAndShutdown();










 }





















 /**



......@@ -255,7 +258,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * Dispatch the processing of a given edge. It may be executed in a different thread.










     * @param edge the edge to process










     */










 protected void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -284,7 +287,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method call










	 */










 private void processCall(PathEdge<N,D,M> edge) {










 private void processCall(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); // a call node; line 14...










 final D d2 = edge.factAtTarget();



......@@ -302,11 +305,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //for each callee's start point(s)










 Set<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 for(N sP: startPointsOf) { 










 for(N sP: startPointsOf) {










 //for each result node of the call-flow function










 for(D d3: res) {










 //create initial self-loop










 propagate(d3, sP, d3, EdgeIdentity.<V>v()); //line 15










 propagate(d3, sP, d3, EdgeIdentity.<V>v(), n, false); //line 15










 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>










 Set<Cell<N, D, EdgeFunction<V>>> endSumm;



......@@ -314,7 +317,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //line 15.1 of Naeem/Lhotak/Rodriguez










 addIncoming(sP,d3,n,d2);










 //line 15.2, copy to avoid concurrent modification exceptions by other threads










 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3)); 










 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));










 










 assert !jumpFn.reverseLookup(n, d2).isEmpty();










 }










 










 //still line 15.2 of Naeem/Lhotak/Rodriguez



......@@ -336,7 +341,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);










 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 










 propagate(d1, retSiteN, d5, f.composeWith(fPrime));










 propagate(d1, retSiteN, d5, f.composeWith(fPrime), n, false);










 }










 }










 }



......@@ -350,7 +355,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 flowFunctionConstructionCount++;










 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {










 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);










 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));










 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);










 }










 }










 }



......@@ -364,7 +369,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method exits










	 */










 private void processExit(PathEdge<N,D,M> edge) {










 protected void processExit(PathEdge<N,D> edge) {










 final N n = edge.getTarget(); // an exit node; line 21...










 EdgeFunction<V> f = jumpFunction(edge);










 M methodThatNeedsSummary = icfg.getMethodOf(n);



......@@ -411,7 +416,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)) {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime), c, false);










 }










 }










 }



......@@ -419,17 +424,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 // Make sure that the whole method was never called, regardless of the










 // calling jump function.










 boolean wasCalled = false;










 for(N sP: startPointsOf)










 if (incoming.containsRow(sP)) {










 wasCalled = true;










 break;










 }










 if(!wasCalled && followReturnsPastSeeds) {










 //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow










 //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only










 //be propagated into callers that have an incoming edge for this condition










 if(followReturnsPastSeeds && inc.isEmpty() && d1.equals(zeroValue)) {










 // only propagate up if we 










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {



......@@ -438,7 +437,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> targets = retFunction.computeTargets(d2);










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(zeroValue, retSiteC, d5, f.composeWith(f5));










 propagate(zeroValue, retSiteC, d5, f.composeWith(f5), c, true);










 }










 }










 }



......@@ -452,14 +451,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 }










 










 /**










	 * Lines 33-37 of the algorithm.










	 * Simply propagate normal, intra-procedural flows.










	 * @param edge










	 */










 private void processNormalFlow(PathEdge<N,D,M> edge) {










 private void processNormalFlow(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); 










 final D d2 = edge.factAtTarget();



......@@ -470,12 +468,26 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> res = flowFunction.computeTargets(d2);










 for (D d3 : res) {










 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));










 propagate(d1, m, d3, fprime); 










 propagate(d1, m, d3, fprime, null, false); 










 }










 }










 }










 










 private void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f) {










 /**










	 * Propagates the flow further down the exploded super graph, merging any edge function that might










	 * already have been computed for targetVal at target. 










	 * @param sourceVal the source value of the propagated summary edge










	 * @param target the target statement










	 * @param targetVal the target value at the target statement










	 * @param f the new edge function computed from (s0,sourceVal) to (target,targetVal) 










	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 










	 * @param isUnbalancedReturn <code>true</code> if this edge is propagating an unbalanced return










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 










	 */










 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f,










 /* deliberately exposed to clients */ N relatedCallSite,










 /* deliberately exposed to clients */ boolean isUnbalancedReturn) {










 EdgeFunction<V> jumpFnE;










 EdgeFunction<V> fPrime;










 boolean newFunction;



......@@ -490,12 +502,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 if(newFunction) {










 PathEdge<N,D,M> edge = new PathEdge<N,D,M>(sourceVal, target, targetVal);










 PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {










 if(targetVal!=zeroValue) { 










 StringBuilder result = new StringBuilder();










 result.append(getDebugName());










 result.append(": ");










 result.append("EDGE:  <");










 result.append(icfg.getMethodOf(target));










 result.append(",");



......@@ -517,10 +531,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 setVal(startPoint, val, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, val); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 }










 










 //await termination of tasks



......@@ -606,15 +623,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 else return l;










 }










 










 private void setVal(N nHashN, D nHashD,V l){ 










 private void setVal(N nHashN, D nHashD,V l){










 // TOP is the implicit default value which we do not need to store.










 synchronized (val) {










 val.put(nHashN, nHashD,l);










 if (l == valueLattice.topElement()) // do not store top values










 val.remove(nHashN, nHashD);










 else










 val.put(nHashN, nHashD,l);










 }










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 private EdgeFunction<V> jumpFunction(PathEdge<N,D> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper



......@@ -661,7 +682,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 } 










 










 /**










	 * Returns the V-type result for the given value at the given statement. 










	 * Returns the V-type result for the given value at the given statement.










	 * TOP values are never returned.










	 */










 public V resultAt(N stmt, D value) {










 //no need to synchronize here as all threads are known to have terminated



......@@ -670,7 +692,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 /**










	 * Returns the resulting environment for the given statement.










	 * The artificial zero value is automatically stripped.










	 * The artificial zero value is automatically stripped. TOP values are










	 * never returned.










	 */










 public Map<D,V> resultsAt(N stmt) {










 //filter out the artificial zero-value



......@@ -689,6 +712,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 protected CountingThreadPoolExecutor getExecutor() {










 return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 /**










	 * Returns a String used to identify the output of this solver in debug mode.










	 * Subclasses can overwrite this string to distinguish the output from different solvers.










	 */










 protected String getDebugName() {










 return "";










 }





















 public void printStats() {










 if(DEBUG) {



......@@ -702,9 +733,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 private class PathEdgeProcessingTask implements Runnable {










 private final PathEdge<N, D, M> edge;










 private final PathEdge<N,D> edge;





















 public PathEdgeProcessingTask(PathEdge<N, D, M> edge) {










 public PathEdgeProcessingTask(PathEdge<N,D> edge) {










 this.edge = edge;










 }














......@@ -734,7 +765,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.contains(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 initialSeeds.containsKey(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......














src/heros/solver/IFDSSolver.java








View file @ 16ed129f






......@@ -12,7 +12,6 @@ package heros.solver;




















import static heros.solver.IFDSSolver.BinaryDomain.BOTTOM;










import static heros.solver.IFDSSolver.BinaryDomain.TOP;





















import heros.EdgeFunction;










import heros.EdgeFunctions;










import heros.FlowFunctions;



......@@ -24,6 +23,7 @@ import heros.edgefunc.AllBottom;









import heros.edgefunc.AllTop;










import heros.edgefunc.EdgeIdentity;





















import java.util.Map;










import java.util.Set;





















/**



......@@ -59,7 +59,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 return ifdsProblem.interproceduralCFG();










 }





















 public Set<N> initialSeeds() {










 public Map<N,Set<D>> initialSeeds() {










 return ifdsProblem.initialSeeds();










 }














......














src/heros/solver/PathEdge.java








View file @ 16ed129f






......@@ -19,9 +19,8 @@ import heros.InterproceduralCFG;









 *










 * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}.










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.










 */










public class PathEdge<N,D,M> {










public class PathEdge<N,D> {





















 protected final N target;










 protected final D dSource, dTarget;



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
16ed129f


authored
Jul 10, 2013
by


Eric Bodden



Browse files




Merge branch 'develop' into feature/exception-handling


Conflicts:
	src/heros/solver/IDESolver.java






parents
cd7c8575
83d31a14













Changes
6




Hide whitespace changes

Inline
Side-by-side















src/heros/DefaultSeeds.java



0 → 100644







View file @ 16ed129f













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.Collections;










import java.util.HashMap;










import java.util.Map;










import java.util.Set;





















/**










 * A utility class for creating default seeds that cause an analysis to simply start at a given statement.










 * This is useful if seeding is performed entirely through flow functions as used to be the case in 










 * earlier versions of Heros.










 */










public class DefaultSeeds {










 










 public static <N,D> Map<N,Set<D>> make(Set<N> units, D zeroNode) {










 Map<N,Set<D>> res = new HashMap<N, Set<D>>();










 for (N n : units) {










 res.put(n, Collections.singleton(zeroNode));










 }










 return res;










 }





















}














src/heros/IFDSTabulationProblem.java








View file @ 16ed129f






......@@ -12,6 +12,7 @@ package heros;




















import heros.solver.IFDSSolver;





















import java.util.Map;










import java.util.Set;

























......@@ -45,9 +46,9 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>









 I interproceduralCFG();










 










 /**










	 * Returns initial seeds to be used for the analysis. (a set of statements)










	 * Returns initial seeds to be used for the analysis. This is a mapping of statements to initial analysis facts.










	 */










 Set<N> initialSeeds();










 Map<N,Set<D>> initialSeeds();










 










 /**










	 * This must be a data-flow fact of type {@link D}, but must <i>not</i>



......














src/heros/solver/BiDiIFDSSolver.java



0 → 100644







View file @ 16ed129f













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> see {@link IFDSSolver}










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, forwardProblem.numThreads(), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() { 










 fwSolver = new SingleDirectionSolver(forwardProblem, "FW");










 bwSolver = new SingleDirectionSolver(backwardProblem,"BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 //start the bw solver










 bwSolver.submitInitialSeeds();










 










 //start the fw solver and block until both solvers have completed










 //(note that they both share the same executor, see below)










 //note to self: the order of the two should not matter










 fwSolver.solve();










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 private class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();





















 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();










 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);










 if(DEBUG)










 System.err.println("++ PAUSE "+debugName+": "+edge);










 }










 } else {










 //the default case










 super.processExit(edge);










 }










 }










 










 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(N sourceStmt) {










 return leakedSources.contains(sourceStmt);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 if(DEBUG)










 System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge);










 super.processExit(pausedEdge);










 }










 pausedPathEdges.remove(sourceStmt);










 }










 }










 










 /* we share the same executor; this will cause the call to solve() above to block










		 * until both solvers have finished










		 */ 










 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 private D getAbstraction() {










 return abstraction;










 }










 










 private N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }










 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>>










 implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt<N, D>(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallFlowFunction(callStmt, destinationMethod));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);





















 //optimization










 if(origTargets.equals(Collections.singleton(originalAbstraction))) return Collections.singleton(source); 










 










 Set<AbstractionWithSourceStmt<N, D>> res = new HashSet<AbstractionWithSourceStmt<N,D>>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt<N,D>(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt<N, D>>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt<N, D>>> res = new HashMap<N, Set<AbstractionWithSourceStmt<N,D>>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt<N, D>> resSet = new HashSet<AbstractionWithSourceStmt<N,D>>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt<N,D>(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt<N, D> zeroValue() {










 return ZERO;










 }





















 }










 










 public Set<D> fwIFDSResultAt(N stmt) {










 return extractResults(fwSolver.ifdsResultsAt(stmt));










 }





















 










 public Set<D> bwIFDSResultAt(N stmt) {










 return extractResults(bwSolver.ifdsResultsAt(stmt));










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt<N, D>> annotatedResults) {










 Set<D> res = new HashSet<D>(); 










 for (AbstractionWithSourceStmt<N, D> abstractionWithSourceStmt : annotatedResults) {










 res.add(abstractionWithSourceStmt.getAbstraction());










 }










 return res;










 }










 










}














src/heros/solver/IDESolver.java








View file @ 16ed129f






......@@ -30,7 +30,6 @@ import heros.edgefunc.EdgeIdentity;









import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;



......@@ -98,7 +97,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 protected final EdgeFunctions<N,D,M,V> edgeFunctions;





















 @DontSynchronize("only used by single thread")










 protected final Set<N> initialSeeds;










 protected final Map<N,Set<D>> initialSeeds;





















 @DontSynchronize("stateless")










 protected final JoinLattice<V> valueLattice;



......@@ -191,20 +190,24 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * Runs the solver on the configured problem. This can take some time.










	 */










 public void solve() { 










 /*










		   * Forward-tabulates the same-level realizable paths and associated functions.










		   * Note that this is a little different from the original IFDS formulations because










		   * we can have statements that are, for instance, both "normal" and "exit" statements.










		   * This is for instance the case on a "throw" statement that may on the one hand










		   * lead to a catch block but on the other hand exit the method depending










		   * on the exception being thrown.










		   */










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 submitInitialSeeds();










 awaitCompletionComputeValuesAndShutdown();










 }





















 /**










	 * Schedules the processing of initial seeds, initiating the analysis.










	 * Clients should only call this methods if performing synchronization on










	 * their own. Normally, {@link #solve()} should be called instead.










	 */










 protected void submitInitialSeeds() {










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v(), null, false);










 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));










 }










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }










 awaitCompletionComputeValuesAndShutdown();










 }





















 /**



......@@ -255,7 +258,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * Dispatch the processing of a given edge. It may be executed in a different thread.










     * @param edge the edge to process










     */










 protected void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -284,7 +287,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method call










	 */










 private void processCall(PathEdge<N,D,M> edge) {










 private void processCall(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); // a call node; line 14...










 final D d2 = edge.factAtTarget();



......@@ -302,11 +305,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //for each callee's start point(s)










 Set<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 for(N sP: startPointsOf) { 










 for(N sP: startPointsOf) {










 //for each result node of the call-flow function










 for(D d3: res) {










 //create initial self-loop










 propagate(d3, sP, d3, EdgeIdentity.<V>v()); //line 15










 propagate(d3, sP, d3, EdgeIdentity.<V>v(), n, false); //line 15










 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>










 Set<Cell<N, D, EdgeFunction<V>>> endSumm;



......@@ -314,7 +317,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //line 15.1 of Naeem/Lhotak/Rodriguez










 addIncoming(sP,d3,n,d2);










 //line 15.2, copy to avoid concurrent modification exceptions by other threads










 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3)); 










 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));










 










 assert !jumpFn.reverseLookup(n, d2).isEmpty();










 }










 










 //still line 15.2 of Naeem/Lhotak/Rodriguez



......@@ -336,7 +341,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);










 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 










 propagate(d1, retSiteN, d5, f.composeWith(fPrime));










 propagate(d1, retSiteN, d5, f.composeWith(fPrime), n, false);










 }










 }










 }



......@@ -350,7 +355,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 flowFunctionConstructionCount++;










 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {










 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);










 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));










 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);










 }










 }










 }



......@@ -364,7 +369,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method exits










	 */










 private void processExit(PathEdge<N,D,M> edge) {










 protected void processExit(PathEdge<N,D> edge) {










 final N n = edge.getTarget(); // an exit node; line 21...










 EdgeFunction<V> f = jumpFunction(edge);










 M methodThatNeedsSummary = icfg.getMethodOf(n);



......@@ -411,7 +416,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)) {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime), c, false);










 }










 }










 }



......@@ -419,17 +424,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 // Make sure that the whole method was never called, regardless of the










 // calling jump function.










 boolean wasCalled = false;










 for(N sP: startPointsOf)










 if (incoming.containsRow(sP)) {










 wasCalled = true;










 break;










 }










 if(!wasCalled && followReturnsPastSeeds) {










 //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow










 //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only










 //be propagated into callers that have an incoming edge for this condition










 if(followReturnsPastSeeds && inc.isEmpty() && d1.equals(zeroValue)) {










 // only propagate up if we 










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {



......@@ -438,7 +437,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> targets = retFunction.computeTargets(d2);










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(zeroValue, retSiteC, d5, f.composeWith(f5));










 propagate(zeroValue, retSiteC, d5, f.composeWith(f5), c, true);










 }










 }










 }



......@@ -452,14 +451,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 }










 










 /**










	 * Lines 33-37 of the algorithm.










	 * Simply propagate normal, intra-procedural flows.










	 * @param edge










	 */










 private void processNormalFlow(PathEdge<N,D,M> edge) {










 private void processNormalFlow(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); 










 final D d2 = edge.factAtTarget();



......@@ -470,12 +468,26 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> res = flowFunction.computeTargets(d2);










 for (D d3 : res) {










 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));










 propagate(d1, m, d3, fprime); 










 propagate(d1, m, d3, fprime, null, false); 










 }










 }










 }










 










 private void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f) {










 /**










	 * Propagates the flow further down the exploded super graph, merging any edge function that might










	 * already have been computed for targetVal at target. 










	 * @param sourceVal the source value of the propagated summary edge










	 * @param target the target statement










	 * @param targetVal the target value at the target statement










	 * @param f the new edge function computed from (s0,sourceVal) to (target,targetVal) 










	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 










	 * @param isUnbalancedReturn <code>true</code> if this edge is propagating an unbalanced return










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 










	 */










 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f,










 /* deliberately exposed to clients */ N relatedCallSite,










 /* deliberately exposed to clients */ boolean isUnbalancedReturn) {










 EdgeFunction<V> jumpFnE;










 EdgeFunction<V> fPrime;










 boolean newFunction;



......@@ -490,12 +502,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 if(newFunction) {










 PathEdge<N,D,M> edge = new PathEdge<N,D,M>(sourceVal, target, targetVal);










 PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {










 if(targetVal!=zeroValue) { 










 StringBuilder result = new StringBuilder();










 result.append(getDebugName());










 result.append(": ");










 result.append("EDGE:  <");










 result.append(icfg.getMethodOf(target));










 result.append(",");



......@@ -517,10 +531,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 setVal(startPoint, val, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, val); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 }










 










 //await termination of tasks



......@@ -606,15 +623,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 else return l;










 }










 










 private void setVal(N nHashN, D nHashD,V l){ 










 private void setVal(N nHashN, D nHashD,V l){










 // TOP is the implicit default value which we do not need to store.










 synchronized (val) {










 val.put(nHashN, nHashD,l);










 if (l == valueLattice.topElement()) // do not store top values










 val.remove(nHashN, nHashD);










 else










 val.put(nHashN, nHashD,l);










 }










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 private EdgeFunction<V> jumpFunction(PathEdge<N,D> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper



......@@ -661,7 +682,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 } 










 










 /**










	 * Returns the V-type result for the given value at the given statement. 










	 * Returns the V-type result for the given value at the given statement.










	 * TOP values are never returned.










	 */










 public V resultAt(N stmt, D value) {










 //no need to synchronize here as all threads are known to have terminated



......@@ -670,7 +692,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 /**










	 * Returns the resulting environment for the given statement.










	 * The artificial zero value is automatically stripped.










	 * The artificial zero value is automatically stripped. TOP values are










	 * never returned.










	 */










 public Map<D,V> resultsAt(N stmt) {










 //filter out the artificial zero-value



......@@ -689,6 +712,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 protected CountingThreadPoolExecutor getExecutor() {










 return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 /**










	 * Returns a String used to identify the output of this solver in debug mode.










	 * Subclasses can overwrite this string to distinguish the output from different solvers.










	 */










 protected String getDebugName() {










 return "";










 }





















 public void printStats() {










 if(DEBUG) {



......@@ -702,9 +733,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 private class PathEdgeProcessingTask implements Runnable {










 private final PathEdge<N, D, M> edge;










 private final PathEdge<N,D> edge;





















 public PathEdgeProcessingTask(PathEdge<N, D, M> edge) {










 public PathEdgeProcessingTask(PathEdge<N,D> edge) {










 this.edge = edge;










 }














......@@ -734,7 +765,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.contains(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 initialSeeds.containsKey(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......














src/heros/solver/IFDSSolver.java








View file @ 16ed129f






......@@ -12,7 +12,6 @@ package heros.solver;




















import static heros.solver.IFDSSolver.BinaryDomain.BOTTOM;










import static heros.solver.IFDSSolver.BinaryDomain.TOP;





















import heros.EdgeFunction;










import heros.EdgeFunctions;










import heros.FlowFunctions;



......@@ -24,6 +23,7 @@ import heros.edgefunc.AllBottom;









import heros.edgefunc.AllTop;










import heros.edgefunc.EdgeIdentity;





















import java.util.Map;










import java.util.Set;





















/**



......@@ -59,7 +59,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 return ifdsProblem.interproceduralCFG();










 }





















 public Set<N> initialSeeds() {










 public Map<N,Set<D>> initialSeeds() {










 return ifdsProblem.initialSeeds();










 }














......














src/heros/solver/PathEdge.java








View file @ 16ed129f






......@@ -19,9 +19,8 @@ import heros.InterproceduralCFG;









 *










 * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}.










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.










 */










public class PathEdge<N,D,M> {










public class PathEdge<N,D> {





















 protected final N target;










 protected final D dSource, dTarget;



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
16ed129f


authored
Jul 10, 2013
by


Eric Bodden



Browse files



Commit
16ed129f


authored
Jul 10, 2013
by


Eric Bodden

16ed129fauthoredbyEric Bodden

Merge branch 'develop' into feature/exception-handling


Conflicts:
	src/heros/solver/IDESolver.java





parents
cd7c8575
83d31a14
















parents
cd7c8575
83d31a14





parents












Changes
6
6


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/DefaultSeeds.java



0 → 100644







View file @ 16ed129f













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.Collections;










import java.util.HashMap;










import java.util.Map;










import java.util.Set;





















/**










 * A utility class for creating default seeds that cause an analysis to simply start at a given statement.










 * This is useful if seeding is performed entirely through flow functions as used to be the case in 










 * earlier versions of Heros.










 */










public class DefaultSeeds {










 










 public static <N,D> Map<N,Set<D>> make(Set<N> units, D zeroNode) {










 Map<N,Set<D>> res = new HashMap<N, Set<D>>();










 for (N n : units) {










 res.put(n, Collections.singleton(zeroNode));










 }










 return res;










 }





















}














src/heros/IFDSTabulationProblem.java








View file @ 16ed129f






......@@ -12,6 +12,7 @@ package heros;




















import heros.solver.IFDSSolver;





















import java.util.Map;










import java.util.Set;

























......@@ -45,9 +46,9 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>









 I interproceduralCFG();










 










 /**










	 * Returns initial seeds to be used for the analysis. (a set of statements)










	 * Returns initial seeds to be used for the analysis. This is a mapping of statements to initial analysis facts.










	 */










 Set<N> initialSeeds();










 Map<N,Set<D>> initialSeeds();










 










 /**










	 * This must be a data-flow fact of type {@link D}, but must <i>not</i>



......














src/heros/solver/BiDiIFDSSolver.java



0 → 100644







View file @ 16ed129f













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> see {@link IFDSSolver}










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, forwardProblem.numThreads(), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() { 










 fwSolver = new SingleDirectionSolver(forwardProblem, "FW");










 bwSolver = new SingleDirectionSolver(backwardProblem,"BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 //start the bw solver










 bwSolver.submitInitialSeeds();










 










 //start the fw solver and block until both solvers have completed










 //(note that they both share the same executor, see below)










 //note to self: the order of the two should not matter










 fwSolver.solve();










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 private class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();





















 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();










 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);










 if(DEBUG)










 System.err.println("++ PAUSE "+debugName+": "+edge);










 }










 } else {










 //the default case










 super.processExit(edge);










 }










 }










 










 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(N sourceStmt) {










 return leakedSources.contains(sourceStmt);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 if(DEBUG)










 System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge);










 super.processExit(pausedEdge);










 }










 pausedPathEdges.remove(sourceStmt);










 }










 }










 










 /* we share the same executor; this will cause the call to solve() above to block










		 * until both solvers have finished










		 */ 










 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 private D getAbstraction() {










 return abstraction;










 }










 










 private N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }










 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>>










 implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt<N, D>(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallFlowFunction(callStmt, destinationMethod));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);





















 //optimization










 if(origTargets.equals(Collections.singleton(originalAbstraction))) return Collections.singleton(source); 










 










 Set<AbstractionWithSourceStmt<N, D>> res = new HashSet<AbstractionWithSourceStmt<N,D>>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt<N,D>(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt<N, D>>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt<N, D>>> res = new HashMap<N, Set<AbstractionWithSourceStmt<N,D>>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt<N, D>> resSet = new HashSet<AbstractionWithSourceStmt<N,D>>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt<N,D>(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt<N, D> zeroValue() {










 return ZERO;










 }





















 }










 










 public Set<D> fwIFDSResultAt(N stmt) {










 return extractResults(fwSolver.ifdsResultsAt(stmt));










 }





















 










 public Set<D> bwIFDSResultAt(N stmt) {










 return extractResults(bwSolver.ifdsResultsAt(stmt));










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt<N, D>> annotatedResults) {










 Set<D> res = new HashSet<D>(); 










 for (AbstractionWithSourceStmt<N, D> abstractionWithSourceStmt : annotatedResults) {










 res.add(abstractionWithSourceStmt.getAbstraction());










 }










 return res;










 }










 










}














src/heros/solver/IDESolver.java








View file @ 16ed129f






......@@ -30,7 +30,6 @@ import heros.edgefunc.EdgeIdentity;









import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;



......@@ -98,7 +97,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 protected final EdgeFunctions<N,D,M,V> edgeFunctions;





















 @DontSynchronize("only used by single thread")










 protected final Set<N> initialSeeds;










 protected final Map<N,Set<D>> initialSeeds;





















 @DontSynchronize("stateless")










 protected final JoinLattice<V> valueLattice;



......@@ -191,20 +190,24 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * Runs the solver on the configured problem. This can take some time.










	 */










 public void solve() { 










 /*










		   * Forward-tabulates the same-level realizable paths and associated functions.










		   * Note that this is a little different from the original IFDS formulations because










		   * we can have statements that are, for instance, both "normal" and "exit" statements.










		   * This is for instance the case on a "throw" statement that may on the one hand










		   * lead to a catch block but on the other hand exit the method depending










		   * on the exception being thrown.










		   */










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 submitInitialSeeds();










 awaitCompletionComputeValuesAndShutdown();










 }





















 /**










	 * Schedules the processing of initial seeds, initiating the analysis.










	 * Clients should only call this methods if performing synchronization on










	 * their own. Normally, {@link #solve()} should be called instead.










	 */










 protected void submitInitialSeeds() {










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v(), null, false);










 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));










 }










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }










 awaitCompletionComputeValuesAndShutdown();










 }





















 /**



......@@ -255,7 +258,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * Dispatch the processing of a given edge. It may be executed in a different thread.










     * @param edge the edge to process










     */










 protected void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -284,7 +287,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method call










	 */










 private void processCall(PathEdge<N,D,M> edge) {










 private void processCall(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); // a call node; line 14...










 final D d2 = edge.factAtTarget();



......@@ -302,11 +305,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //for each callee's start point(s)










 Set<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 for(N sP: startPointsOf) { 










 for(N sP: startPointsOf) {










 //for each result node of the call-flow function










 for(D d3: res) {










 //create initial self-loop










 propagate(d3, sP, d3, EdgeIdentity.<V>v()); //line 15










 propagate(d3, sP, d3, EdgeIdentity.<V>v(), n, false); //line 15










 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>










 Set<Cell<N, D, EdgeFunction<V>>> endSumm;



......@@ -314,7 +317,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //line 15.1 of Naeem/Lhotak/Rodriguez










 addIncoming(sP,d3,n,d2);










 //line 15.2, copy to avoid concurrent modification exceptions by other threads










 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3)); 










 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));










 










 assert !jumpFn.reverseLookup(n, d2).isEmpty();










 }










 










 //still line 15.2 of Naeem/Lhotak/Rodriguez



......@@ -336,7 +341,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);










 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 










 propagate(d1, retSiteN, d5, f.composeWith(fPrime));










 propagate(d1, retSiteN, d5, f.composeWith(fPrime), n, false);










 }










 }










 }



......@@ -350,7 +355,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 flowFunctionConstructionCount++;










 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {










 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);










 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));










 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);










 }










 }










 }



......@@ -364,7 +369,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method exits










	 */










 private void processExit(PathEdge<N,D,M> edge) {










 protected void processExit(PathEdge<N,D> edge) {










 final N n = edge.getTarget(); // an exit node; line 21...










 EdgeFunction<V> f = jumpFunction(edge);










 M methodThatNeedsSummary = icfg.getMethodOf(n);



......@@ -411,7 +416,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)) {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime), c, false);










 }










 }










 }



......@@ -419,17 +424,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 // Make sure that the whole method was never called, regardless of the










 // calling jump function.










 boolean wasCalled = false;










 for(N sP: startPointsOf)










 if (incoming.containsRow(sP)) {










 wasCalled = true;










 break;










 }










 if(!wasCalled && followReturnsPastSeeds) {










 //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow










 //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only










 //be propagated into callers that have an incoming edge for this condition










 if(followReturnsPastSeeds && inc.isEmpty() && d1.equals(zeroValue)) {










 // only propagate up if we 










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {



......@@ -438,7 +437,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> targets = retFunction.computeTargets(d2);










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(zeroValue, retSiteC, d5, f.composeWith(f5));










 propagate(zeroValue, retSiteC, d5, f.composeWith(f5), c, true);










 }










 }










 }



......@@ -452,14 +451,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 }










 










 /**










	 * Lines 33-37 of the algorithm.










	 * Simply propagate normal, intra-procedural flows.










	 * @param edge










	 */










 private void processNormalFlow(PathEdge<N,D,M> edge) {










 private void processNormalFlow(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); 










 final D d2 = edge.factAtTarget();



......@@ -470,12 +468,26 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> res = flowFunction.computeTargets(d2);










 for (D d3 : res) {










 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));










 propagate(d1, m, d3, fprime); 










 propagate(d1, m, d3, fprime, null, false); 










 }










 }










 }










 










 private void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f) {










 /**










	 * Propagates the flow further down the exploded super graph, merging any edge function that might










	 * already have been computed for targetVal at target. 










	 * @param sourceVal the source value of the propagated summary edge










	 * @param target the target statement










	 * @param targetVal the target value at the target statement










	 * @param f the new edge function computed from (s0,sourceVal) to (target,targetVal) 










	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 










	 * @param isUnbalancedReturn <code>true</code> if this edge is propagating an unbalanced return










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 










	 */










 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f,










 /* deliberately exposed to clients */ N relatedCallSite,










 /* deliberately exposed to clients */ boolean isUnbalancedReturn) {










 EdgeFunction<V> jumpFnE;










 EdgeFunction<V> fPrime;










 boolean newFunction;



......@@ -490,12 +502,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 if(newFunction) {










 PathEdge<N,D,M> edge = new PathEdge<N,D,M>(sourceVal, target, targetVal);










 PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {










 if(targetVal!=zeroValue) { 










 StringBuilder result = new StringBuilder();










 result.append(getDebugName());










 result.append(": ");










 result.append("EDGE:  <");










 result.append(icfg.getMethodOf(target));










 result.append(",");



......@@ -517,10 +531,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 setVal(startPoint, val, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, val); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 }










 










 //await termination of tasks



......@@ -606,15 +623,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 else return l;










 }










 










 private void setVal(N nHashN, D nHashD,V l){ 










 private void setVal(N nHashN, D nHashD,V l){










 // TOP is the implicit default value which we do not need to store.










 synchronized (val) {










 val.put(nHashN, nHashD,l);










 if (l == valueLattice.topElement()) // do not store top values










 val.remove(nHashN, nHashD);










 else










 val.put(nHashN, nHashD,l);










 }










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 private EdgeFunction<V> jumpFunction(PathEdge<N,D> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper



......@@ -661,7 +682,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 } 










 










 /**










	 * Returns the V-type result for the given value at the given statement. 










	 * Returns the V-type result for the given value at the given statement.










	 * TOP values are never returned.










	 */










 public V resultAt(N stmt, D value) {










 //no need to synchronize here as all threads are known to have terminated



......@@ -670,7 +692,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 /**










	 * Returns the resulting environment for the given statement.










	 * The artificial zero value is automatically stripped.










	 * The artificial zero value is automatically stripped. TOP values are










	 * never returned.










	 */










 public Map<D,V> resultsAt(N stmt) {










 //filter out the artificial zero-value



......@@ -689,6 +712,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 protected CountingThreadPoolExecutor getExecutor() {










 return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 /**










	 * Returns a String used to identify the output of this solver in debug mode.










	 * Subclasses can overwrite this string to distinguish the output from different solvers.










	 */










 protected String getDebugName() {










 return "";










 }





















 public void printStats() {










 if(DEBUG) {



......@@ -702,9 +733,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 private class PathEdgeProcessingTask implements Runnable {










 private final PathEdge<N, D, M> edge;










 private final PathEdge<N,D> edge;





















 public PathEdgeProcessingTask(PathEdge<N, D, M> edge) {










 public PathEdgeProcessingTask(PathEdge<N,D> edge) {










 this.edge = edge;










 }














......@@ -734,7 +765,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.contains(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 initialSeeds.containsKey(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......














src/heros/solver/IFDSSolver.java








View file @ 16ed129f






......@@ -12,7 +12,6 @@ package heros.solver;




















import static heros.solver.IFDSSolver.BinaryDomain.BOTTOM;










import static heros.solver.IFDSSolver.BinaryDomain.TOP;





















import heros.EdgeFunction;










import heros.EdgeFunctions;










import heros.FlowFunctions;



......@@ -24,6 +23,7 @@ import heros.edgefunc.AllBottom;









import heros.edgefunc.AllTop;










import heros.edgefunc.EdgeIdentity;





















import java.util.Map;










import java.util.Set;





















/**



......@@ -59,7 +59,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 return ifdsProblem.interproceduralCFG();










 }





















 public Set<N> initialSeeds() {










 public Map<N,Set<D>> initialSeeds() {










 return ifdsProblem.initialSeeds();










 }














......














src/heros/solver/PathEdge.java








View file @ 16ed129f






......@@ -19,9 +19,8 @@ import heros.InterproceduralCFG;









 *










 * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}.










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.










 */










public class PathEdge<N,D,M> {










public class PathEdge<N,D> {





















 protected final N target;










 protected final D dSource, dTarget;



......














src/heros/DefaultSeeds.java



0 → 100644







View file @ 16ed129f













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.Collections;










import java.util.HashMap;










import java.util.Map;










import java.util.Set;





















/**










 * A utility class for creating default seeds that cause an analysis to simply start at a given statement.










 * This is useful if seeding is performed entirely through flow functions as used to be the case in 










 * earlier versions of Heros.










 */










public class DefaultSeeds {










 










 public static <N,D> Map<N,Set<D>> make(Set<N> units, D zeroNode) {










 Map<N,Set<D>> res = new HashMap<N, Set<D>>();










 for (N n : units) {










 res.put(n, Collections.singleton(zeroNode));










 }










 return res;










 }





















}












src/heros/DefaultSeeds.java



0 → 100644







View file @ 16ed129f








src/heros/DefaultSeeds.java



0 → 100644









View file @ 16ed129f


16ed129f










/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.Collections;










import java.util.HashMap;










import java.util.Map;










import java.util.Set;





















/**










 * A utility class for creating default seeds that cause an analysis to simply start at a given statement.










 * This is useful if seeding is performed entirely through flow functions as used to be the case in 










 * earlier versions of Heros.










 */










public class DefaultSeeds {










 










 public static <N,D> Map<N,Set<D>> make(Set<N> units, D zeroNode) {










 Map<N,Set<D>> res = new HashMap<N, Set<D>>();










 for (N n : units) {










 res.put(n, Collections.singleton(zeroNode));










 }










 return res;










 }





















}













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros;





















import java.util.Collections;










import java.util.HashMap;










import java.util.Map;










import java.util.Set;





















/**










 * A utility class for creating default seeds that cause an analysis to simply start at a given statement.










 * This is useful if seeding is performed entirely through flow functions as used to be the case in 










 * earlier versions of Heros.










 */










public class DefaultSeeds {










 










 public static <N,D> Map<N,Set<D>> make(Set<N> units, D zeroNode) {










 Map<N,Set<D>> res = new HashMap<N, Set<D>>();










 for (N n : units) {










 res.put(n, Collections.singleton(zeroNode));










 }










 return res;










 }





















}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2012 Eric Bodden. * Copyright (c) 2012 Eric Bodden. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Eric Bodden - initial API and implementation *     Eric Bodden - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros;packageheros;import java.util.Collections;importjava.util.Collections;import java.util.HashMap;importjava.util.HashMap;import java.util.Map;importjava.util.Map;import java.util.Set;importjava.util.Set;/**/** * A utility class for creating default seeds that cause an analysis to simply start at a given statement. * A utility class for creating default seeds that cause an analysis to simply start at a given statement. * This is useful if seeding is performed entirely through flow functions as used to be the case in  * This is useful if seeding is performed entirely through flow functions as used to be the case in  * earlier versions of Heros. * earlier versions of Heros. */ */public class DefaultSeeds {publicclassDefaultSeeds{  public static <N,D> Map<N,Set<D>> make(Set<N> units, D zeroNode) {publicstatic<N,D>Map<N,Set<D>>make(Set<N>units,DzeroNode){ Map<N,Set<D>> res = new HashMap<N, Set<D>>();Map<N,Set<D>>res=newHashMap<N,Set<D>>(); for (N n : units) {for(Nn:units){ res.put(n, Collections.singleton(zeroNode));res.put(n,Collections.singleton(zeroNode)); }} return res;returnres; }}}}








src/heros/IFDSTabulationProblem.java








View file @ 16ed129f






......@@ -12,6 +12,7 @@ package heros;




















import heros.solver.IFDSSolver;





















import java.util.Map;










import java.util.Set;

























......@@ -45,9 +46,9 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>









 I interproceduralCFG();










 










 /**










	 * Returns initial seeds to be used for the analysis. (a set of statements)










	 * Returns initial seeds to be used for the analysis. This is a mapping of statements to initial analysis facts.










	 */










 Set<N> initialSeeds();










 Map<N,Set<D>> initialSeeds();










 










 /**










	 * This must be a data-flow fact of type {@link D}, but must <i>not</i>



......












src/heros/IFDSTabulationProblem.java








View file @ 16ed129f








src/heros/IFDSTabulationProblem.java










View file @ 16ed129f


16ed129f



......@@ -12,6 +12,7 @@ package heros;




















import heros.solver.IFDSSolver;





















import java.util.Map;










import java.util.Set;

























......@@ -45,9 +46,9 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>









 I interproceduralCFG();










 










 /**










	 * Returns initial seeds to be used for the analysis. (a set of statements)










	 * Returns initial seeds to be used for the analysis. This is a mapping of statements to initial analysis facts.










	 */










 Set<N> initialSeeds();










 Map<N,Set<D>> initialSeeds();










 










 /**










	 * This must be a data-flow fact of type {@link D}, but must <i>not</i>



......






......@@ -12,6 +12,7 @@ package heros;




















import heros.solver.IFDSSolver;





















import java.util.Map;










import java.util.Set;

























......@@ -45,9 +46,9 @@ public interface IFDSTabulationProblem<N,D,M, I extends InterproceduralCFG<N,M>>









 I interproceduralCFG();










 










 /**










	 * Returns initial seeds to be used for the analysis. (a set of statements)










	 * Returns initial seeds to be used for the analysis. This is a mapping of statements to initial analysis facts.










	 */










 Set<N> initialSeeds();










 Map<N,Set<D>> initialSeeds();










 










 /**










	 * This must be a data-flow fact of type {@link D}, but must <i>not</i>



......


import heros.solver.IFDSSolver;importheros.solver.IFDSSolver;import java.util.Map;importjava.util.Map;import java.util.Set;importjava.util.Set; I interproceduralCFG();IinterproceduralCFG();  /**/**	 * Returns initial seeds to be used for the analysis. (a set of statements)	 * Returns initial seeds to be used for the analysis. (a set of statements)(a set of statements)	 * Returns initial seeds to be used for the analysis. This is a mapping of statements to initial analysis facts.	 * Returns initial seeds to be used for the analysis. This is a mapping of statements to initial analysis facts.This is a mapping of statements to initial analysis facts.	 */	 */ Set<N> initialSeeds();Set<NN>initialSeeds(); Map<N,Set<D>> initialSeeds();MapMap<<NN,,Set<DD>>>initialSeeds();  /**/**	 * This must be a data-flow fact of type {@link D}, but must <i>not</i>	 * This must be a data-flow fact of type {@link D}, but must <i>not</i>








src/heros/solver/BiDiIFDSSolver.java



0 → 100644







View file @ 16ed129f













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> see {@link IFDSSolver}










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, forwardProblem.numThreads(), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() { 










 fwSolver = new SingleDirectionSolver(forwardProblem, "FW");










 bwSolver = new SingleDirectionSolver(backwardProblem,"BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 //start the bw solver










 bwSolver.submitInitialSeeds();










 










 //start the fw solver and block until both solvers have completed










 //(note that they both share the same executor, see below)










 //note to self: the order of the two should not matter










 fwSolver.solve();










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 private class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();





















 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();










 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);










 if(DEBUG)










 System.err.println("++ PAUSE "+debugName+": "+edge);










 }










 } else {










 //the default case










 super.processExit(edge);










 }










 }










 










 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(N sourceStmt) {










 return leakedSources.contains(sourceStmt);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 if(DEBUG)










 System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge);










 super.processExit(pausedEdge);










 }










 pausedPathEdges.remove(sourceStmt);










 }










 }










 










 /* we share the same executor; this will cause the call to solve() above to block










		 * until both solvers have finished










		 */ 










 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 private D getAbstraction() {










 return abstraction;










 }










 










 private N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }










 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>>










 implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt<N, D>(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallFlowFunction(callStmt, destinationMethod));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);





















 //optimization










 if(origTargets.equals(Collections.singleton(originalAbstraction))) return Collections.singleton(source); 










 










 Set<AbstractionWithSourceStmt<N, D>> res = new HashSet<AbstractionWithSourceStmt<N,D>>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt<N,D>(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt<N, D>>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt<N, D>>> res = new HashMap<N, Set<AbstractionWithSourceStmt<N,D>>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt<N, D>> resSet = new HashSet<AbstractionWithSourceStmt<N,D>>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt<N,D>(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt<N, D> zeroValue() {










 return ZERO;










 }





















 }










 










 public Set<D> fwIFDSResultAt(N stmt) {










 return extractResults(fwSolver.ifdsResultsAt(stmt));










 }





















 










 public Set<D> bwIFDSResultAt(N stmt) {










 return extractResults(bwSolver.ifdsResultsAt(stmt));










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt<N, D>> annotatedResults) {










 Set<D> res = new HashSet<D>(); 










 for (AbstractionWithSourceStmt<N, D> abstractionWithSourceStmt : annotatedResults) {










 res.add(abstractionWithSourceStmt.getAbstraction());










 }










 return res;










 }










 










}












src/heros/solver/BiDiIFDSSolver.java



0 → 100644







View file @ 16ed129f








src/heros/solver/BiDiIFDSSolver.java



0 → 100644









View file @ 16ed129f


16ed129f










/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> see {@link IFDSSolver}










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, forwardProblem.numThreads(), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() { 










 fwSolver = new SingleDirectionSolver(forwardProblem, "FW");










 bwSolver = new SingleDirectionSolver(backwardProblem,"BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 //start the bw solver










 bwSolver.submitInitialSeeds();










 










 //start the fw solver and block until both solvers have completed










 //(note that they both share the same executor, see below)










 //note to self: the order of the two should not matter










 fwSolver.solve();










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 private class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();





















 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();










 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);










 if(DEBUG)










 System.err.println("++ PAUSE "+debugName+": "+edge);










 }










 } else {










 //the default case










 super.processExit(edge);










 }










 }










 










 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(N sourceStmt) {










 return leakedSources.contains(sourceStmt);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 if(DEBUG)










 System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge);










 super.processExit(pausedEdge);










 }










 pausedPathEdges.remove(sourceStmt);










 }










 }










 










 /* we share the same executor; this will cause the call to solve() above to block










		 * until both solvers have finished










		 */ 










 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 private D getAbstraction() {










 return abstraction;










 }










 










 private N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }










 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>>










 implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt<N, D>(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallFlowFunction(callStmt, destinationMethod));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);





















 //optimization










 if(origTargets.equals(Collections.singleton(originalAbstraction))) return Collections.singleton(source); 










 










 Set<AbstractionWithSourceStmt<N, D>> res = new HashSet<AbstractionWithSourceStmt<N,D>>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt<N,D>(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt<N, D>>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt<N, D>>> res = new HashMap<N, Set<AbstractionWithSourceStmt<N,D>>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt<N, D>> resSet = new HashSet<AbstractionWithSourceStmt<N,D>>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt<N,D>(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt<N, D> zeroValue() {










 return ZERO;










 }





















 }










 










 public Set<D> fwIFDSResultAt(N stmt) {










 return extractResults(fwSolver.ifdsResultsAt(stmt));










 }





















 










 public Set<D> bwIFDSResultAt(N stmt) {










 return extractResults(bwSolver.ifdsResultsAt(stmt));










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt<N, D>> annotatedResults) {










 Set<D> res = new HashSet<D>(); 










 for (AbstractionWithSourceStmt<N, D> abstractionWithSourceStmt : annotatedResults) {










 res.add(abstractionWithSourceStmt.getAbstraction());










 }










 return res;










 }










 










}













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.solver;





















import heros.EdgeFunction;










import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;





















import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.Map;










import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> see {@link IFDSSolver}










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, forwardProblem.numThreads(), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() { 










 fwSolver = new SingleDirectionSolver(forwardProblem, "FW");










 bwSolver = new SingleDirectionSolver(backwardProblem,"BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 










 //start the bw solver










 bwSolver.submitInitialSeeds();










 










 //start the fw solver and block until both solvers have completed










 //(note that they both share the same executor, see below)










 //note to self: the order of the two should not matter










 fwSolver.solve();










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 private class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();





















 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);










 this.debugName = debugName;










 }










 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();










 pausedPathEdges.put(sourceStmt,pausedEdges);










 } 










 pausedEdges.add(edge);










 if(DEBUG)










 System.err.println("++ PAUSE "+debugName+": "+edge);










 }










 } else {










 //the default case










 super.processExit(edge);










 }










 }










 










 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 }










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(N sourceStmt) {










 return leakedSources.contains(sourceStmt);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 if(DEBUG)










 System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge);










 super.processExit(pausedEdge);










 }










 pausedPathEdges.remove(sourceStmt);










 }










 }










 










 /* we share the same executor; this will cause the call to solve() above to block










		 * until both solvers have finished










		 */ 










 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 










 protected String getDebugName() {










 return debugName;










 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;










 protected final N source;










 










 private AbstractionWithSourceStmt(D abstraction, N source) {










 this.abstraction = abstraction;










 this.source = source;










 }





















 private D getAbstraction() {










 return abstraction;










 }










 










 private N getSourceStmt() {










 return source;










 } 










 










 @Override










 public String toString() {










 if(source!=null)










 return ""+abstraction+"-@-"+source+"";










 else










 return abstraction.toString();










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());










 result = prime * result + ((source == null) ? 0 : source.hashCode());










 return result;










 }





















 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (getClass() != obj.getClass())










 return false;










 AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;










 if (abstraction == null) {










 if (other.abstraction != null)










 return false;










 } else if (!abstraction.equals(other.abstraction))










 return false;










 if (source == null) {










 if (other.source != null)










 return false;










 } else if (!source.equals(other.source))










 return false;










 return true;










 }










 }










 










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>>










 implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;










 private final FlowFunctions<N, D, M> originalFunctions;










 










 public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {










 this.delegate = delegate;










 originalFunctions = this.delegate.flowFunctions();










 ZERO = new AbstractionWithSourceStmt<N, D>(delegate.zeroValue(), null);










 }





















 @Override










 public FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M> flowFunctions() {










 return new FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M>() {





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getNormalFlowFunction(final N curr, final N succ) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallFlowFunction(final N callStmt, final M destinationMethod) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallFlowFunction(callStmt, destinationMethod));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));










 }










 };










 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {










 D originalAbstraction = source.getAbstraction();










 Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);





















 //optimization










 if(origTargets.equals(Collections.singleton(originalAbstraction))) return Collections.singleton(source); 










 










 Set<AbstractionWithSourceStmt<N, D>> res = new HashSet<AbstractionWithSourceStmt<N,D>>();










 for(D d: origTargets) {










 res.add(new AbstractionWithSourceStmt<N,D>(d,source.getSourceStmt()));










 }










 return res;










 }










 };










 }










 










 //delegate methods follow





















 public boolean followReturnsPastSeeds() {










 return delegate.followReturnsPastSeeds();










 }





















 public boolean autoAddZero() {










 return delegate.autoAddZero();










 }





















 public int numThreads() {










 return delegate.numThreads();










 }





















 public boolean computeValues() {










 return delegate.computeValues();










 }





















 public I interproceduralCFG() {










 return delegate.interproceduralCFG();










 }





















 /* attaches the original seed statement to the abstraction










		 */










 public Map<N,Set<AbstractionWithSourceStmt<N, D>>> initialSeeds() {










 Map<N, Set<D>> originalSeeds = delegate.initialSeeds();










 Map<N,Set<AbstractionWithSourceStmt<N, D>>> res = new HashMap<N, Set<AbstractionWithSourceStmt<N,D>>>();










 for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {










 N stmt = entry.getKey();










 Set<D> seeds = entry.getValue();










 Set<AbstractionWithSourceStmt<N, D>> resSet = new HashSet<AbstractionWithSourceStmt<N,D>>();










 for (D d : seeds) {










 //attach source stmt to abstraction










 resSet.add(new AbstractionWithSourceStmt<N,D>(d, stmt));










 }










 res.put(stmt, resSet);










 } 










 return res;










 }





















 public AbstractionWithSourceStmt<N, D> zeroValue() {










 return ZERO;










 }





















 }










 










 public Set<D> fwIFDSResultAt(N stmt) {










 return extractResults(fwSolver.ifdsResultsAt(stmt));










 }





















 










 public Set<D> bwIFDSResultAt(N stmt) {










 return extractResults(bwSolver.ifdsResultsAt(stmt));










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt<N, D>> annotatedResults) {










 Set<D> res = new HashSet<D>(); 










 for (AbstractionWithSourceStmt<N, D> abstractionWithSourceStmt : annotatedResults) {










 res.add(abstractionWithSourceStmt.getAbstraction());










 }










 return res;










 }










 










}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2012 Eric Bodden. * Copyright (c) 2012 Eric Bodden. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Eric Bodden - initial API and implementation *     Eric Bodden - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.solver;packageheros.solver;import heros.EdgeFunction;importheros.EdgeFunction;import heros.FlowFunction;importheros.FlowFunction;import heros.FlowFunctions;importheros.FlowFunctions;import heros.IFDSTabulationProblem;importheros.IFDSTabulationProblem;import heros.InterproceduralCFG;importheros.InterproceduralCFG;import java.util.Collections;importjava.util.Collections;import java.util.HashMap;importjava.util.HashMap;import java.util.HashSet;importjava.util.HashSet;import java.util.Map;importjava.util.Map;import java.util.Map.Entry;importjava.util.Map.Entry;import java.util.Set;importjava.util.Set;import java.util.concurrent.LinkedBlockingQueue;importjava.util.concurrent.LinkedBlockingQueue;import java.util.concurrent.TimeUnit;importjava.util.concurrent.TimeUnit;/**/** * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions. * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions. *  *  * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}. * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}. * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever). * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever). * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their * computed paths are realizable at the same time. * computed paths are realizable at the same time. * * * @param <N> see {@link IFDSSolver} * @param <N> see {@link IFDSSolver} * @param <D> see {@link IFDSSolver} * @param <D> see {@link IFDSSolver} * @param <M> see {@link IFDSSolver} * @param <M> see {@link IFDSSolver} * @param <I> see {@link IFDSSolver} * @param <I> see {@link IFDSSolver} */ */public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {publicclassBiDiIFDSSolver<N,D,M,IextendsInterproceduralCFG<N,M>>{ private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;privatefinalIFDSTabulationProblem<N,AbstractionWithSourceStmt<N,D>,M,I>forwardProblem; private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;privatefinalIFDSTabulationProblem<N,AbstractionWithSourceStmt<N,D>,M,I>backwardProblem; private final CountingThreadPoolExecutor sharedExecutor;privatefinalCountingThreadPoolExecutorsharedExecutor; private SingleDirectionSolver fwSolver;privateSingleDirectionSolverfwSolver; private SingleDirectionSolver bwSolver;privateSingleDirectionSolverbwSolver; /**/**	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.	 */	 */ public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {publicBiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I>forwardProblem,IFDSTabulationProblem<N,D,M,I>backwardProblem){ if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {if(!forwardProblem.followReturnsPastSeeds()||!backwardProblem.followReturnsPastSeeds()){ throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); thrownewIllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); }} this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);this.forwardProblem=newAugmentedTabulationProblem<N,D,M,I>(forwardProblem); this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);this.backwardProblem=newAugmentedTabulationProblem<N,D,M,I>(backwardProblem); this.sharedExecutor = new CountingThreadPoolExecutor(1, forwardProblem.numThreads(), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());this.sharedExecutor=newCountingThreadPoolExecutor(1,forwardProblem.numThreads(),30,TimeUnit.SECONDS,newLinkedBlockingQueue<Runnable>()); }}  public void solve() { publicvoidsolve(){ fwSolver = new SingleDirectionSolver(forwardProblem, "FW");fwSolver=newSingleDirectionSolver(forwardProblem,"FW"); bwSolver = new SingleDirectionSolver(backwardProblem,"BW");bwSolver=newSingleDirectionSolver(backwardProblem,"BW"); fwSolver.otherSolver = bwSolver;fwSolver.otherSolver=bwSolver; bwSolver.otherSolver = fwSolver;bwSolver.otherSolver=fwSolver;  //start the bw solver//start the bw solver bwSolver.submitInitialSeeds();bwSolver.submitInitialSeeds();  //start the fw solver and block until both solvers have completed//start the fw solver and block until both solvers have completed //(note that they both share the same executor, see below)//(note that they both share the same executor, see below) //note to self: the order of the two should not matter//note to self: the order of the two should not matter fwSolver.solve();fwSolver.solve(); }}  /**/**	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.	 */	 */ private class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {privateclassSingleDirectionSolverextendsIFDSSolver<N,AbstractionWithSourceStmt<N,D>,M,I>{ private final String debugName;privatefinalStringdebugName; private SingleDirectionSolver otherSolver;privateSingleDirectionSolverotherSolver; private Set<N> leakedSources = new HashSet<N>();privateSet<N>leakedSources=newHashSet<N>(); private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =privateMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>pausedPathEdges= new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();newHashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>(); private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {privateSingleDirectionSolver(IFDSTabulationProblem<N,AbstractionWithSourceStmt<N,D>,M,I>ifdsProblem,StringdebugName){ super(ifdsProblem);super(ifdsProblem); this.debugName = debugName;this.debugName=debugName; }}  @Override@Override protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {protectedvoidprocessExit(PathEdge<N,AbstractionWithSourceStmt<N,D>>edge){ //if an edge is originating from ZERO then to us this signifies an unbalanced return edge//if an edge is originating from ZERO then to us this signifies an unbalanced return edge if(edge.factAtSource().equals(zeroValue)) {if(edge.factAtSource().equals(zeroValue)){ N sourceStmt = edge.factAtTarget().getSourceStmt();NsourceStmt=edge.factAtTarget().getSourceStmt(); //we mark the fact that this solver would like to "leak" this edge to the caller//we mark the fact that this solver would like to "leak" this edge to the caller leakedSources.add(sourceStmt);leakedSources.add(sourceStmt); if(otherSolver.hasLeaked(sourceStmt)) {if(otherSolver.hasLeaked(sourceStmt)){ //if the other solver has leaked already then unpause its edges and continue//if the other solver has leaked already then unpause its edges and continue otherSolver.unpausePathEdgesForSource(sourceStmt);otherSolver.unpausePathEdgesForSource(sourceStmt); super.processExit(edge);super.processExit(edge); } else {}else{ //otherwise we pause this solver's edge and don't continue//otherwise we pause this solver's edge and don't continue Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>pausedEdges=pausedPathEdges.get(sourceStmt); if(pausedEdges==null) {if(pausedEdges==null){ pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();pausedEdges=newHashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>(); pausedPathEdges.put(sourceStmt,pausedEdges);pausedPathEdges.put(sourceStmt,pausedEdges); } } pausedEdges.add(edge);pausedEdges.add(edge); if(DEBUG)if(DEBUG) System.err.println("++ PAUSE "+debugName+": "+edge);System.err.println("++ PAUSE "+debugName+": "+edge); }} } else {}else{ //the default case//the default case super.processExit(edge);super.processExit(edge); }} }}  protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {protectedvoidpropagate(AbstractionWithSourceStmt<N,D>sourceVal,Ntarget,AbstractionWithSourceStmt<N,D>targetVal,EdgeFunction<IFDSSolver.BinaryDomain>f,NrelatedCallSite,booleanisUnbalancedReturn){ //the follwing branch will be taken only on an unbalanced return//the follwing branch will be taken only on an unbalanced return if(isUnbalancedReturn) {if(isUnbalancedReturn){ assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";assertsourceVal.getSourceStmt()==null:"source value should have no statement attached";  //attach target statement as new "source" statement to track//attach target statement as new "source" statement to track targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(), relatedCallSite);targetVal=newAbstractionWithSourceStmt<N,D>(targetVal.getAbstraction(),relatedCallSite);  super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);super.propagate(sourceVal,target,targetVal,f,relatedCallSite,isUnbalancedReturn); } else { }else{ super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);super.propagate(sourceVal,target,targetVal,f,relatedCallSite,isUnbalancedReturn); }} }}  /**/**		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source		 * to its caller.		 * to its caller.		 */		 */ private boolean hasLeaked(N sourceStmt) {privatebooleanhasLeaked(NsourceStmt){ return leakedSources.contains(sourceStmt);returnleakedSources.contains(sourceStmt); }}  /**/**		 * Unpauses all edges associated with the given source statement.		 * Unpauses all edges associated with the given source statement.		 */		 */ private void unpausePathEdgesForSource(N sourceStmt) {privatevoidunpausePathEdgesForSource(NsourceStmt){ Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>pausedEdges=pausedPathEdges.get(sourceStmt); if(pausedEdges!=null) {if(pausedEdges!=null){ for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {for(PathEdge<N,AbstractionWithSourceStmt<N,D>>pausedEdge:pausedEdges){ if(DEBUG)if(DEBUG) System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge);System.err.println("-- UNPAUSE "+debugName+": "+pausedEdge); super.processExit(pausedEdge);super.processExit(pausedEdge); }} pausedPathEdges.remove(sourceStmt);pausedPathEdges.remove(sourceStmt); }} }}  /* we share the same executor; this will cause the call to solve() above to block/* we share the same executor; this will cause the call to solve() above to block		 * until both solvers have finished		 * until both solvers have finished		 */ 		 */ protected CountingThreadPoolExecutor getExecutor() {protectedCountingThreadPoolExecutorgetExecutor(){ return sharedExecutor;returnsharedExecutor; }}  protected String getDebugName() {protectedStringgetDebugName(){ return debugName;returndebugName; }} }} /**/**	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the	 * abstraction the source statement from which this fact originated. 	 * abstraction the source statement from which this fact originated. 	 */	 */ public static class AbstractionWithSourceStmt<N,D> {publicstaticclassAbstractionWithSourceStmt<N,D>{ protected final D abstraction;protectedfinalDabstraction; protected final N source;protectedfinalNsource;  private AbstractionWithSourceStmt(D abstraction, N source) {privateAbstractionWithSourceStmt(Dabstraction,Nsource){ this.abstraction = abstraction;this.abstraction=abstraction; this.source = source;this.source=source; }} private D getAbstraction() {privateDgetAbstraction(){ return abstraction;returnabstraction; }}  private N getSourceStmt() {privateNgetSourceStmt(){ return source;returnsource; } }  @Override@Override public String toString() {publicStringtoString(){ if(source!=null)if(source!=null) return ""+abstraction+"-@-"+source+"";return""+abstraction+"-@-"+source+""; elseelse return abstraction.toString();returnabstraction.toString(); }} @Override@Override public int hashCode() {publicinthashCode(){ final int prime = 31;finalintprime=31; int result = 1;intresult=1; result = prime * result + ((abstraction == null) ? 0 : abstraction.hashCode());result=prime*result+((abstraction==null)?0:abstraction.hashCode()); result = prime * result + ((source == null) ? 0 : source.hashCode());result=prime*result+((source==null)?0:source.hashCode()); return result;returnresult; }} @SuppressWarnings("rawtypes")@SuppressWarnings("rawtypes") @Override@Override public boolean equals(Object obj) {publicbooleanequals(Objectobj){ if (this == obj)if(this==obj) return true;returntrue; if (obj == null)if(obj==null) return false;returnfalse; if (getClass() != obj.getClass())if(getClass()!=obj.getClass()) return false;returnfalse; AbstractionWithSourceStmt other = (AbstractionWithSourceStmt) obj;AbstractionWithSourceStmtother=(AbstractionWithSourceStmt)obj; if (abstraction == null) {if(abstraction==null){ if (other.abstraction != null)if(other.abstraction!=null) return false;returnfalse; } else if (!abstraction.equals(other.abstraction))}elseif(!abstraction.equals(other.abstraction)) return false;returnfalse; if (source == null) {if(source==null){ if (other.source != null)if(other.source!=null) return false;returnfalse; } else if (!source.equals(other.source))}elseif(!source.equals(other.source)) return false;returnfalse; return true;returntrue; }} }}  /**/**	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.	 */	 */ private static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>>privatestaticclassAugmentedTabulationProblem<N,D,M,IextendsInterproceduralCFG<N,M>> implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {implementsIFDSTabulationProblem<N,BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I>{ private final IFDSTabulationProblem<N,D,M,I> delegate;privatefinalIFDSTabulationProblem<N,D,M,I>delegate; private final AbstractionWithSourceStmt<N, D> ZERO;privatefinalAbstractionWithSourceStmt<N,D>ZERO; private final FlowFunctions<N, D, M> originalFunctions;privatefinalFlowFunctions<N,D,M>originalFunctions;  public AugmentedTabulationProblem(IFDSTabulationProblem<N, D, M, I> delegate) {publicAugmentedTabulationProblem(IFDSTabulationProblem<N,D,M,I>delegate){ this.delegate = delegate;this.delegate=delegate; originalFunctions = this.delegate.flowFunctions();originalFunctions=this.delegate.flowFunctions(); ZERO = new AbstractionWithSourceStmt<N, D>(delegate.zeroValue(), null);ZERO=newAbstractionWithSourceStmt<N,D>(delegate.zeroValue(),null); }} @Override@Override public FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M> flowFunctions() {publicFlowFunctions<N,AbstractionWithSourceStmt<N,D>,M>flowFunctions(){ return new FlowFunctions<N, AbstractionWithSourceStmt<N, D>, M>() {returnnewFlowFunctions<N,AbstractionWithSourceStmt<N,D>,M>(){ @Override@Override public FlowFunction<AbstractionWithSourceStmt<N, D>> getNormalFlowFunction(final N curr, final N succ) {publicFlowFunction<AbstractionWithSourceStmt<N,D>>getNormalFlowFunction(finalNcurr,finalNsucc){ return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {returnnewFlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>(){ @Override@Override public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {publicSet<AbstractionWithSourceStmt<N,D>>computeTargets(AbstractionWithSourceStmt<N,D>source){ return copyOverSourceStmts(source, originalFunctions.getNormalFlowFunction(curr, succ));returncopyOverSourceStmts(source,originalFunctions.getNormalFlowFunction(curr,succ)); }} };}; }} @Override@Override public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallFlowFunction(final N callStmt, final M destinationMethod) {publicFlowFunction<AbstractionWithSourceStmt<N,D>>getCallFlowFunction(finalNcallStmt,finalMdestinationMethod){ return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {returnnewFlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>(){ @Override@Override public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {publicSet<AbstractionWithSourceStmt<N,D>>computeTargets(AbstractionWithSourceStmt<N,D>source){ return copyOverSourceStmts(source, originalFunctions.getCallFlowFunction(callStmt, destinationMethod));returncopyOverSourceStmts(source,originalFunctions.getCallFlowFunction(callStmt,destinationMethod)); }} };}; }} @Override@Override public FlowFunction<AbstractionWithSourceStmt<N, D>> getReturnFlowFunction(final N callSite, final M calleeMethod, final N exitStmt, final N returnSite) {publicFlowFunction<AbstractionWithSourceStmt<N,D>>getReturnFlowFunction(finalNcallSite,finalMcalleeMethod,finalNexitStmt,finalNreturnSite){ return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {returnnewFlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>(){ @Override@Override public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {publicSet<AbstractionWithSourceStmt<N,D>>computeTargets(AbstractionWithSourceStmt<N,D>source){ return copyOverSourceStmts(source, originalFunctions.getReturnFlowFunction(callSite, calleeMethod, exitStmt, returnSite));returncopyOverSourceStmts(source,originalFunctions.getReturnFlowFunction(callSite,calleeMethod,exitStmt,returnSite)); }} };}; }} @Override@Override public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(final N callSite, final N returnSite) {publicFlowFunction<AbstractionWithSourceStmt<N,D>>getCallToReturnFlowFunction(finalNcallSite,finalNreturnSite){ return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {returnnewFlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>(){ @Override@Override public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {publicSet<AbstractionWithSourceStmt<N,D>>computeTargets(AbstractionWithSourceStmt<N,D>source){ return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));returncopyOverSourceStmts(source,originalFunctions.getCallToReturnFlowFunction(callSite,returnSite)); }} };}; }}  private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {privateSet<AbstractionWithSourceStmt<N,D>>copyOverSourceStmts(AbstractionWithSourceStmt<N,D>source,FlowFunction<D>originalFunction){ D originalAbstraction = source.getAbstraction();DoriginalAbstraction=source.getAbstraction(); Set<D> origTargets = originalFunction.computeTargets(originalAbstraction);Set<D>origTargets=originalFunction.computeTargets(originalAbstraction); //optimization//optimization if(origTargets.equals(Collections.singleton(originalAbstraction))) return Collections.singleton(source); if(origTargets.equals(Collections.singleton(originalAbstraction)))returnCollections.singleton(source);  Set<AbstractionWithSourceStmt<N, D>> res = new HashSet<AbstractionWithSourceStmt<N,D>>();Set<AbstractionWithSourceStmt<N,D>>res=newHashSet<AbstractionWithSourceStmt<N,D>>(); for(D d: origTargets) {for(Dd:origTargets){ res.add(new AbstractionWithSourceStmt<N,D>(d,source.getSourceStmt()));res.add(newAbstractionWithSourceStmt<N,D>(d,source.getSourceStmt())); }} return res;returnres; }} };}; }}  //delegate methods follow//delegate methods follow public boolean followReturnsPastSeeds() {publicbooleanfollowReturnsPastSeeds(){ return delegate.followReturnsPastSeeds();returndelegate.followReturnsPastSeeds(); }} public boolean autoAddZero() {publicbooleanautoAddZero(){ return delegate.autoAddZero();returndelegate.autoAddZero(); }} public int numThreads() {publicintnumThreads(){ return delegate.numThreads();returndelegate.numThreads(); }} public boolean computeValues() {publicbooleancomputeValues(){ return delegate.computeValues();returndelegate.computeValues(); }} public I interproceduralCFG() {publicIinterproceduralCFG(){ return delegate.interproceduralCFG();returndelegate.interproceduralCFG(); }} /* attaches the original seed statement to the abstraction/* attaches the original seed statement to the abstraction		 */		 */ public Map<N,Set<AbstractionWithSourceStmt<N, D>>> initialSeeds() {publicMap<N,Set<AbstractionWithSourceStmt<N,D>>>initialSeeds(){ Map<N, Set<D>> originalSeeds = delegate.initialSeeds();Map<N,Set<D>>originalSeeds=delegate.initialSeeds(); Map<N,Set<AbstractionWithSourceStmt<N, D>>> res = new HashMap<N, Set<AbstractionWithSourceStmt<N,D>>>();Map<N,Set<AbstractionWithSourceStmt<N,D>>>res=newHashMap<N,Set<AbstractionWithSourceStmt<N,D>>>(); for(Entry<N, Set<D>> entry: originalSeeds.entrySet()) {for(Entry<N,Set<D>>entry:originalSeeds.entrySet()){ N stmt = entry.getKey();Nstmt=entry.getKey(); Set<D> seeds = entry.getValue();Set<D>seeds=entry.getValue(); Set<AbstractionWithSourceStmt<N, D>> resSet = new HashSet<AbstractionWithSourceStmt<N,D>>();Set<AbstractionWithSourceStmt<N,D>>resSet=newHashSet<AbstractionWithSourceStmt<N,D>>(); for (D d : seeds) {for(Dd:seeds){ //attach source stmt to abstraction//attach source stmt to abstraction resSet.add(new AbstractionWithSourceStmt<N,D>(d, stmt));resSet.add(newAbstractionWithSourceStmt<N,D>(d,stmt)); }} res.put(stmt, resSet);res.put(stmt,resSet); } } return res;returnres; }} public AbstractionWithSourceStmt<N, D> zeroValue() {publicAbstractionWithSourceStmt<N,D>zeroValue(){ return ZERO;returnZERO; }} }}  public Set<D> fwIFDSResultAt(N stmt) {publicSet<D>fwIFDSResultAt(Nstmt){ return extractResults(fwSolver.ifdsResultsAt(stmt));returnextractResults(fwSolver.ifdsResultsAt(stmt)); }}  public Set<D> bwIFDSResultAt(N stmt) {publicSet<D>bwIFDSResultAt(Nstmt){ return extractResults(bwSolver.ifdsResultsAt(stmt));returnextractResults(bwSolver.ifdsResultsAt(stmt)); }} private Set<D> extractResults(Set<AbstractionWithSourceStmt<N, D>> annotatedResults) {privateSet<D>extractResults(Set<AbstractionWithSourceStmt<N,D>>annotatedResults){ Set<D> res = new HashSet<D>(); Set<D>res=newHashSet<D>(); for (AbstractionWithSourceStmt<N, D> abstractionWithSourceStmt : annotatedResults) {for(AbstractionWithSourceStmt<N,D>abstractionWithSourceStmt:annotatedResults){ res.add(abstractionWithSourceStmt.getAbstraction());res.add(abstractionWithSourceStmt.getAbstraction()); }} return res;returnres; }} }}








src/heros/solver/IDESolver.java








View file @ 16ed129f






......@@ -30,7 +30,6 @@ import heros.edgefunc.EdgeIdentity;









import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;



......@@ -98,7 +97,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 protected final EdgeFunctions<N,D,M,V> edgeFunctions;





















 @DontSynchronize("only used by single thread")










 protected final Set<N> initialSeeds;










 protected final Map<N,Set<D>> initialSeeds;





















 @DontSynchronize("stateless")










 protected final JoinLattice<V> valueLattice;



......@@ -191,20 +190,24 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * Runs the solver on the configured problem. This can take some time.










	 */










 public void solve() { 










 /*










		   * Forward-tabulates the same-level realizable paths and associated functions.










		   * Note that this is a little different from the original IFDS formulations because










		   * we can have statements that are, for instance, both "normal" and "exit" statements.










		   * This is for instance the case on a "throw" statement that may on the one hand










		   * lead to a catch block but on the other hand exit the method depending










		   * on the exception being thrown.










		   */










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 submitInitialSeeds();










 awaitCompletionComputeValuesAndShutdown();










 }





















 /**










	 * Schedules the processing of initial seeds, initiating the analysis.










	 * Clients should only call this methods if performing synchronization on










	 * their own. Normally, {@link #solve()} should be called instead.










	 */










 protected void submitInitialSeeds() {










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v(), null, false);










 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));










 }










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }










 awaitCompletionComputeValuesAndShutdown();










 }





















 /**



......@@ -255,7 +258,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * Dispatch the processing of a given edge. It may be executed in a different thread.










     * @param edge the edge to process










     */










 protected void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -284,7 +287,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method call










	 */










 private void processCall(PathEdge<N,D,M> edge) {










 private void processCall(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); // a call node; line 14...










 final D d2 = edge.factAtTarget();



......@@ -302,11 +305,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //for each callee's start point(s)










 Set<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 for(N sP: startPointsOf) { 










 for(N sP: startPointsOf) {










 //for each result node of the call-flow function










 for(D d3: res) {










 //create initial self-loop










 propagate(d3, sP, d3, EdgeIdentity.<V>v()); //line 15










 propagate(d3, sP, d3, EdgeIdentity.<V>v(), n, false); //line 15










 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>










 Set<Cell<N, D, EdgeFunction<V>>> endSumm;



......@@ -314,7 +317,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //line 15.1 of Naeem/Lhotak/Rodriguez










 addIncoming(sP,d3,n,d2);










 //line 15.2, copy to avoid concurrent modification exceptions by other threads










 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3)); 










 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));










 










 assert !jumpFn.reverseLookup(n, d2).isEmpty();










 }










 










 //still line 15.2 of Naeem/Lhotak/Rodriguez



......@@ -336,7 +341,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);










 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 










 propagate(d1, retSiteN, d5, f.composeWith(fPrime));










 propagate(d1, retSiteN, d5, f.composeWith(fPrime), n, false);










 }










 }










 }



......@@ -350,7 +355,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 flowFunctionConstructionCount++;










 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {










 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);










 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));










 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);










 }










 }










 }



......@@ -364,7 +369,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method exits










	 */










 private void processExit(PathEdge<N,D,M> edge) {










 protected void processExit(PathEdge<N,D> edge) {










 final N n = edge.getTarget(); // an exit node; line 21...










 EdgeFunction<V> f = jumpFunction(edge);










 M methodThatNeedsSummary = icfg.getMethodOf(n);



......@@ -411,7 +416,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)) {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime), c, false);










 }










 }










 }



......@@ -419,17 +424,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 // Make sure that the whole method was never called, regardless of the










 // calling jump function.










 boolean wasCalled = false;










 for(N sP: startPointsOf)










 if (incoming.containsRow(sP)) {










 wasCalled = true;










 break;










 }










 if(!wasCalled && followReturnsPastSeeds) {










 //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow










 //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only










 //be propagated into callers that have an incoming edge for this condition










 if(followReturnsPastSeeds && inc.isEmpty() && d1.equals(zeroValue)) {










 // only propagate up if we 










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {



......@@ -438,7 +437,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> targets = retFunction.computeTargets(d2);










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(zeroValue, retSiteC, d5, f.composeWith(f5));










 propagate(zeroValue, retSiteC, d5, f.composeWith(f5), c, true);










 }










 }










 }



......@@ -452,14 +451,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 }










 










 /**










	 * Lines 33-37 of the algorithm.










	 * Simply propagate normal, intra-procedural flows.










	 * @param edge










	 */










 private void processNormalFlow(PathEdge<N,D,M> edge) {










 private void processNormalFlow(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); 










 final D d2 = edge.factAtTarget();



......@@ -470,12 +468,26 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> res = flowFunction.computeTargets(d2);










 for (D d3 : res) {










 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));










 propagate(d1, m, d3, fprime); 










 propagate(d1, m, d3, fprime, null, false); 










 }










 }










 }










 










 private void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f) {










 /**










	 * Propagates the flow further down the exploded super graph, merging any edge function that might










	 * already have been computed for targetVal at target. 










	 * @param sourceVal the source value of the propagated summary edge










	 * @param target the target statement










	 * @param targetVal the target value at the target statement










	 * @param f the new edge function computed from (s0,sourceVal) to (target,targetVal) 










	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 










	 * @param isUnbalancedReturn <code>true</code> if this edge is propagating an unbalanced return










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 










	 */










 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f,










 /* deliberately exposed to clients */ N relatedCallSite,










 /* deliberately exposed to clients */ boolean isUnbalancedReturn) {










 EdgeFunction<V> jumpFnE;










 EdgeFunction<V> fPrime;










 boolean newFunction;



......@@ -490,12 +502,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 if(newFunction) {










 PathEdge<N,D,M> edge = new PathEdge<N,D,M>(sourceVal, target, targetVal);










 PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {










 if(targetVal!=zeroValue) { 










 StringBuilder result = new StringBuilder();










 result.append(getDebugName());










 result.append(": ");










 result.append("EDGE:  <");










 result.append(icfg.getMethodOf(target));










 result.append(",");



......@@ -517,10 +531,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 setVal(startPoint, val, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, val); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 }










 










 //await termination of tasks



......@@ -606,15 +623,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 else return l;










 }










 










 private void setVal(N nHashN, D nHashD,V l){ 










 private void setVal(N nHashN, D nHashD,V l){










 // TOP is the implicit default value which we do not need to store.










 synchronized (val) {










 val.put(nHashN, nHashD,l);










 if (l == valueLattice.topElement()) // do not store top values










 val.remove(nHashN, nHashD);










 else










 val.put(nHashN, nHashD,l);










 }










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 private EdgeFunction<V> jumpFunction(PathEdge<N,D> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper



......@@ -661,7 +682,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 } 










 










 /**










	 * Returns the V-type result for the given value at the given statement. 










	 * Returns the V-type result for the given value at the given statement.










	 * TOP values are never returned.










	 */










 public V resultAt(N stmt, D value) {










 //no need to synchronize here as all threads are known to have terminated



......@@ -670,7 +692,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 /**










	 * Returns the resulting environment for the given statement.










	 * The artificial zero value is automatically stripped.










	 * The artificial zero value is automatically stripped. TOP values are










	 * never returned.










	 */










 public Map<D,V> resultsAt(N stmt) {










 //filter out the artificial zero-value



......@@ -689,6 +712,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 protected CountingThreadPoolExecutor getExecutor() {










 return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 /**










	 * Returns a String used to identify the output of this solver in debug mode.










	 * Subclasses can overwrite this string to distinguish the output from different solvers.










	 */










 protected String getDebugName() {










 return "";










 }





















 public void printStats() {










 if(DEBUG) {



......@@ -702,9 +733,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 private class PathEdgeProcessingTask implements Runnable {










 private final PathEdge<N, D, M> edge;










 private final PathEdge<N,D> edge;





















 public PathEdgeProcessingTask(PathEdge<N, D, M> edge) {










 public PathEdgeProcessingTask(PathEdge<N,D> edge) {










 this.edge = edge;










 }














......@@ -734,7 +765,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.contains(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 initialSeeds.containsKey(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......












src/heros/solver/IDESolver.java








View file @ 16ed129f








src/heros/solver/IDESolver.java










View file @ 16ed129f


16ed129f



......@@ -30,7 +30,6 @@ import heros.edgefunc.EdgeIdentity;









import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;



......@@ -98,7 +97,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 protected final EdgeFunctions<N,D,M,V> edgeFunctions;





















 @DontSynchronize("only used by single thread")










 protected final Set<N> initialSeeds;










 protected final Map<N,Set<D>> initialSeeds;





















 @DontSynchronize("stateless")










 protected final JoinLattice<V> valueLattice;



......@@ -191,20 +190,24 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * Runs the solver on the configured problem. This can take some time.










	 */










 public void solve() { 










 /*










		   * Forward-tabulates the same-level realizable paths and associated functions.










		   * Note that this is a little different from the original IFDS formulations because










		   * we can have statements that are, for instance, both "normal" and "exit" statements.










		   * This is for instance the case on a "throw" statement that may on the one hand










		   * lead to a catch block but on the other hand exit the method depending










		   * on the exception being thrown.










		   */










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 submitInitialSeeds();










 awaitCompletionComputeValuesAndShutdown();










 }





















 /**










	 * Schedules the processing of initial seeds, initiating the analysis.










	 * Clients should only call this methods if performing synchronization on










	 * their own. Normally, {@link #solve()} should be called instead.










	 */










 protected void submitInitialSeeds() {










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v(), null, false);










 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));










 }










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }










 awaitCompletionComputeValuesAndShutdown();










 }





















 /**



......@@ -255,7 +258,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * Dispatch the processing of a given edge. It may be executed in a different thread.










     * @param edge the edge to process










     */










 protected void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -284,7 +287,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method call










	 */










 private void processCall(PathEdge<N,D,M> edge) {










 private void processCall(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); // a call node; line 14...










 final D d2 = edge.factAtTarget();



......@@ -302,11 +305,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //for each callee's start point(s)










 Set<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 for(N sP: startPointsOf) { 










 for(N sP: startPointsOf) {










 //for each result node of the call-flow function










 for(D d3: res) {










 //create initial self-loop










 propagate(d3, sP, d3, EdgeIdentity.<V>v()); //line 15










 propagate(d3, sP, d3, EdgeIdentity.<V>v(), n, false); //line 15










 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>










 Set<Cell<N, D, EdgeFunction<V>>> endSumm;



......@@ -314,7 +317,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //line 15.1 of Naeem/Lhotak/Rodriguez










 addIncoming(sP,d3,n,d2);










 //line 15.2, copy to avoid concurrent modification exceptions by other threads










 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3)); 










 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));










 










 assert !jumpFn.reverseLookup(n, d2).isEmpty();










 }










 










 //still line 15.2 of Naeem/Lhotak/Rodriguez



......@@ -336,7 +341,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);










 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 










 propagate(d1, retSiteN, d5, f.composeWith(fPrime));










 propagate(d1, retSiteN, d5, f.composeWith(fPrime), n, false);










 }










 }










 }



......@@ -350,7 +355,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 flowFunctionConstructionCount++;










 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {










 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);










 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));










 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);










 }










 }










 }



......@@ -364,7 +369,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method exits










	 */










 private void processExit(PathEdge<N,D,M> edge) {










 protected void processExit(PathEdge<N,D> edge) {










 final N n = edge.getTarget(); // an exit node; line 21...










 EdgeFunction<V> f = jumpFunction(edge);










 M methodThatNeedsSummary = icfg.getMethodOf(n);



......@@ -411,7 +416,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)) {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime), c, false);










 }










 }










 }



......@@ -419,17 +424,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 // Make sure that the whole method was never called, regardless of the










 // calling jump function.










 boolean wasCalled = false;










 for(N sP: startPointsOf)










 if (incoming.containsRow(sP)) {










 wasCalled = true;










 break;










 }










 if(!wasCalled && followReturnsPastSeeds) {










 //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow










 //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only










 //be propagated into callers that have an incoming edge for this condition










 if(followReturnsPastSeeds && inc.isEmpty() && d1.equals(zeroValue)) {










 // only propagate up if we 










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {



......@@ -438,7 +437,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> targets = retFunction.computeTargets(d2);










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(zeroValue, retSiteC, d5, f.composeWith(f5));










 propagate(zeroValue, retSiteC, d5, f.composeWith(f5), c, true);










 }










 }










 }



......@@ -452,14 +451,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 }










 










 /**










	 * Lines 33-37 of the algorithm.










	 * Simply propagate normal, intra-procedural flows.










	 * @param edge










	 */










 private void processNormalFlow(PathEdge<N,D,M> edge) {










 private void processNormalFlow(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); 










 final D d2 = edge.factAtTarget();



......@@ -470,12 +468,26 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> res = flowFunction.computeTargets(d2);










 for (D d3 : res) {










 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));










 propagate(d1, m, d3, fprime); 










 propagate(d1, m, d3, fprime, null, false); 










 }










 }










 }










 










 private void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f) {










 /**










	 * Propagates the flow further down the exploded super graph, merging any edge function that might










	 * already have been computed for targetVal at target. 










	 * @param sourceVal the source value of the propagated summary edge










	 * @param target the target statement










	 * @param targetVal the target value at the target statement










	 * @param f the new edge function computed from (s0,sourceVal) to (target,targetVal) 










	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 










	 * @param isUnbalancedReturn <code>true</code> if this edge is propagating an unbalanced return










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 










	 */










 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f,










 /* deliberately exposed to clients */ N relatedCallSite,










 /* deliberately exposed to clients */ boolean isUnbalancedReturn) {










 EdgeFunction<V> jumpFnE;










 EdgeFunction<V> fPrime;










 boolean newFunction;



......@@ -490,12 +502,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 if(newFunction) {










 PathEdge<N,D,M> edge = new PathEdge<N,D,M>(sourceVal, target, targetVal);










 PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {










 if(targetVal!=zeroValue) { 










 StringBuilder result = new StringBuilder();










 result.append(getDebugName());










 result.append(": ");










 result.append("EDGE:  <");










 result.append(icfg.getMethodOf(target));










 result.append(",");



......@@ -517,10 +531,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 setVal(startPoint, val, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, val); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 }










 










 //await termination of tasks



......@@ -606,15 +623,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 else return l;










 }










 










 private void setVal(N nHashN, D nHashD,V l){ 










 private void setVal(N nHashN, D nHashD,V l){










 // TOP is the implicit default value which we do not need to store.










 synchronized (val) {










 val.put(nHashN, nHashD,l);










 if (l == valueLattice.topElement()) // do not store top values










 val.remove(nHashN, nHashD);










 else










 val.put(nHashN, nHashD,l);










 }










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 private EdgeFunction<V> jumpFunction(PathEdge<N,D> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper



......@@ -661,7 +682,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 } 










 










 /**










	 * Returns the V-type result for the given value at the given statement. 










	 * Returns the V-type result for the given value at the given statement.










	 * TOP values are never returned.










	 */










 public V resultAt(N stmt, D value) {










 //no need to synchronize here as all threads are known to have terminated



......@@ -670,7 +692,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 /**










	 * Returns the resulting environment for the given statement.










	 * The artificial zero value is automatically stripped.










	 * The artificial zero value is automatically stripped. TOP values are










	 * never returned.










	 */










 public Map<D,V> resultsAt(N stmt) {










 //filter out the artificial zero-value



......@@ -689,6 +712,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 protected CountingThreadPoolExecutor getExecutor() {










 return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 /**










	 * Returns a String used to identify the output of this solver in debug mode.










	 * Subclasses can overwrite this string to distinguish the output from different solvers.










	 */










 protected String getDebugName() {










 return "";










 }





















 public void printStats() {










 if(DEBUG) {



......@@ -702,9 +733,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 private class PathEdgeProcessingTask implements Runnable {










 private final PathEdge<N, D, M> edge;










 private final PathEdge<N,D> edge;





















 public PathEdgeProcessingTask(PathEdge<N, D, M> edge) {










 public PathEdgeProcessingTask(PathEdge<N,D> edge) {










 this.edge = edge;










 }














......@@ -734,7 +765,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.contains(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 initialSeeds.containsKey(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......






......@@ -30,7 +30,6 @@ import heros.edgefunc.EdgeIdentity;









import java.util.Collections;










import java.util.HashMap;










import java.util.HashSet;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Map;










import java.util.Map.Entry;



......@@ -98,7 +97,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 protected final EdgeFunctions<N,D,M,V> edgeFunctions;





















 @DontSynchronize("only used by single thread")










 protected final Set<N> initialSeeds;










 protected final Map<N,Set<D>> initialSeeds;





















 @DontSynchronize("stateless")










 protected final JoinLattice<V> valueLattice;



......@@ -191,20 +190,24 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * Runs the solver on the configured problem. This can take some time.










	 */










 public void solve() { 










 /*










		   * Forward-tabulates the same-level realizable paths and associated functions.










		   * Note that this is a little different from the original IFDS formulations because










		   * we can have statements that are, for instance, both "normal" and "exit" statements.










		   * This is for instance the case on a "throw" statement that may on the one hand










		   * lead to a catch block but on the other hand exit the method depending










		   * on the exception being thrown.










		   */










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));










 submitInitialSeeds();










 awaitCompletionComputeValuesAndShutdown();










 }





















 /**










	 * Schedules the processing of initial seeds, initiating the analysis.










	 * Clients should only call this methods if performing synchronization on










	 * their own. Normally, {@link #solve()} should be called instead.










	 */










 protected void submitInitialSeeds() {










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v(), null, false);










 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));










 }










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }










 awaitCompletionComputeValuesAndShutdown();










 }





















 /**



......@@ -255,7 +258,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * Dispatch the processing of a given edge. It may be executed in a different thread.










     * @param edge the edge to process










     */










 protected void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -284,7 +287,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method call










	 */










 private void processCall(PathEdge<N,D,M> edge) {










 private void processCall(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); // a call node; line 14...










 final D d2 = edge.factAtTarget();



......@@ -302,11 +305,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //for each callee's start point(s)










 Set<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);










 for(N sP: startPointsOf) { 










 for(N sP: startPointsOf) {










 //for each result node of the call-flow function










 for(D d3: res) {










 //create initial self-loop










 propagate(d3, sP, d3, EdgeIdentity.<V>v()); //line 15










 propagate(d3, sP, d3, EdgeIdentity.<V>v(), n, false); //line 15










 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>










 Set<Cell<N, D, EdgeFunction<V>>> endSumm;



......@@ -314,7 +317,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 //line 15.1 of Naeem/Lhotak/Rodriguez










 addIncoming(sP,d3,n,d2);










 //line 15.2, copy to avoid concurrent modification exceptions by other threads










 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3)); 










 endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));










 










 assert !jumpFn.reverseLookup(n, d2).isEmpty();










 }










 










 //still line 15.2 of Naeem/Lhotak/Rodriguez



......@@ -336,7 +341,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);










 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 










 propagate(d1, retSiteN, d5, f.composeWith(fPrime));










 propagate(d1, retSiteN, d5, f.composeWith(fPrime), n, false);










 }










 }










 }



......@@ -350,7 +355,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 flowFunctionConstructionCount++;










 for(D d3: callToReturnFlowFunction.computeTargets(d2)) {










 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);










 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));










 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);










 }










 }










 }



......@@ -364,7 +369,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method exits










	 */










 private void processExit(PathEdge<N,D,M> edge) {










 protected void processExit(PathEdge<N,D> edge) {










 final N n = edge.getTarget(); // an exit node; line 21...










 EdgeFunction<V> f = jumpFunction(edge);










 M methodThatNeedsSummary = icfg.getMethodOf(n);



......@@ -411,7 +416,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)) {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime), c, false);










 }










 }










 }



......@@ -419,17 +424,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 










 //handling for unbalanced problems where we return out of a method whose call was never processed










 if(inc.isEmpty() && followReturnsPastSeeds) {










 // Make sure that the whole method was never called, regardless of the










 // calling jump function.










 boolean wasCalled = false;










 for(N sP: startPointsOf)










 if (incoming.containsRow(sP)) {










 wasCalled = true;










 break;










 }










 if(!wasCalled && followReturnsPastSeeds) {










 //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow










 //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only










 //be propagated into callers that have an incoming edge for this condition










 if(followReturnsPastSeeds && inc.isEmpty() && d1.equals(zeroValue)) {










 // only propagate up if we 










 Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);










 for(N c: callers) {










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {



......@@ -438,7 +437,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> targets = retFunction.computeTargets(d2);










 for(D d5: targets) {










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 propagate(zeroValue, retSiteC, d5, f.composeWith(f5));










 propagate(zeroValue, retSiteC, d5, f.composeWith(f5), c, true);










 }










 }










 }



......@@ -452,14 +451,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 }










 










 /**










	 * Lines 33-37 of the algorithm.










	 * Simply propagate normal, intra-procedural flows.










	 * @param edge










	 */










 private void processNormalFlow(PathEdge<N,D,M> edge) {










 private void processNormalFlow(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); 










 final D d2 = edge.factAtTarget();



......@@ -470,12 +468,26 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 Set<D> res = flowFunction.computeTargets(d2);










 for (D d3 : res) {










 EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));










 propagate(d1, m, d3, fprime); 










 propagate(d1, m, d3, fprime, null, false); 










 }










 }










 }










 










 private void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f) {










 /**










	 * Propagates the flow further down the exploded super graph, merging any edge function that might










	 * already have been computed for targetVal at target. 










	 * @param sourceVal the source value of the propagated summary edge










	 * @param target the target statement










	 * @param targetVal the target value at the target statement










	 * @param f the new edge function computed from (s0,sourceVal) to (target,targetVal) 










	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 










	 * @param isUnbalancedReturn <code>true</code> if this edge is propagating an unbalanced return










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 










	 */










 protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f,










 /* deliberately exposed to clients */ N relatedCallSite,










 /* deliberately exposed to clients */ boolean isUnbalancedReturn) {










 EdgeFunction<V> jumpFnE;










 EdgeFunction<V> fPrime;










 boolean newFunction;



......@@ -490,12 +502,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 if(newFunction) {










 PathEdge<N,D,M> edge = new PathEdge<N,D,M>(sourceVal, target, targetVal);










 PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {










 if(targetVal!=zeroValue) { 










 StringBuilder result = new StringBuilder();










 result.append(getDebugName());










 result.append(": ");










 result.append("EDGE:  <");










 result.append(icfg.getMethodOf(target));










 result.append(",");



......@@ -517,10 +531,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 private void computeValues() { 










 //Phase II(i)










 for(N startPoint: initialSeeds) {










 setVal(startPoint, zeroValue, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 setVal(startPoint, val, valueLattice.bottomElement());










 Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, val); 










 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 }










 










 //await termination of tasks



......@@ -606,15 +623,19 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 else return l;










 }










 










 private void setVal(N nHashN, D nHashD,V l){ 










 private void setVal(N nHashN, D nHashD,V l){










 // TOP is the implicit default value which we do not need to store.










 synchronized (val) {










 val.put(nHashN, nHashD,l);










 if (l == valueLattice.topElement()) // do not store top values










 val.remove(nHashN, nHashD);










 else










 val.put(nHashN, nHashD,l);










 }










 if(DEBUG)










 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 private EdgeFunction<V> jumpFunction(PathEdge<N,D> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper



......@@ -661,7 +682,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 } 










 










 /**










	 * Returns the V-type result for the given value at the given statement. 










	 * Returns the V-type result for the given value at the given statement.










	 * TOP values are never returned.










	 */










 public V resultAt(N stmt, D value) {










 //no need to synchronize here as all threads are known to have terminated



......@@ -670,7 +692,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 /**










	 * Returns the resulting environment for the given statement.










	 * The artificial zero value is automatically stripped.










	 * The artificial zero value is automatically stripped. TOP values are










	 * never returned.










	 */










 public Map<D,V> resultsAt(N stmt) {










 //filter out the artificial zero-value



......@@ -689,6 +712,14 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 protected CountingThreadPoolExecutor getExecutor() {










 return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 /**










	 * Returns a String used to identify the output of this solver in debug mode.










	 * Subclasses can overwrite this string to distinguish the output from different solvers.










	 */










 protected String getDebugName() {










 return "";










 }





















 public void printStats() {










 if(DEBUG) {



......@@ -702,9 +733,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 private class PathEdgeProcessingTask implements Runnable {










 private final PathEdge<N, D, M> edge;










 private final PathEdge<N,D> edge;





















 public PathEdgeProcessingTask(PathEdge<N, D, M> edge) {










 public PathEdgeProcessingTask(PathEdge<N,D> edge) {










 this.edge = edge;










 }














......@@ -734,7 +765,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 public void run() {










 N n = nAndD.getO1();










 if(icfg.isStartPoint(n) ||










 initialSeeds.contains(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 initialSeeds.containsKey(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as such










 propagateValueAtStart(nAndD, n);










 }










 if(icfg.isCallStmt(n)) {



......


import java.util.Collections;importjava.util.Collections;import java.util.HashMap;importjava.util.HashMap;import java.util.HashSet;importjava.util.HashSet;import java.util.LinkedHashSet;importjava.util.LinkedHashSet;import java.util.List;importjava.util.List;import java.util.Map;importjava.util.Map;import java.util.Map.Entry;importjava.util.Map.Entry; protected final EdgeFunctions<N,D,M,V> edgeFunctions;protectedfinalEdgeFunctions<N,D,M,V>edgeFunctions; @DontSynchronize("only used by single thread")@DontSynchronize("only used by single thread") protected final Set<N> initialSeeds;protectedfinalSet<NN>initialSeeds; protected final Map<N,Set<D>> initialSeeds;protectedfinalMapMap<<NN,,Set<DD>>>initialSeeds; @DontSynchronize("stateless")@DontSynchronize("stateless") protected final JoinLattice<V> valueLattice;protectedfinalJoinLattice<V>valueLattice;	 * Runs the solver on the configured problem. This can take some time.	 * Runs the solver on the configured problem. This can take some time.	 */	 */ public void solve() { publicvoidsolve(){ /*/*		   * Forward-tabulates the same-level realizable paths and associated functions.		   * Forward-tabulates the same-level realizable paths and associated functions.		   * Note that this is a little different from the original IFDS formulations because		   * Note that this is a little different from the original IFDS formulations because		   * we can have statements that are, for instance, both "normal" and "exit" statements.		   * we can have statements that are, for instance, both "normal" and "exit" statements.		   * This is for instance the case on a "throw" statement that may on the one hand		   * This is for instance the case on a "throw" statement that may on the one hand		   * lead to a catch block but on the other hand exit the method depending		   * lead to a catch block but on the other hand exit the method depending		   * on the exception being thrown.		   * on the exception being thrown.		   */		   */ for(N startPoint: initialSeeds) {for(NstartPoint:initialSeeds){ propagate(zeroValue, startPoint, zeroValue, allTop);propagate(zeroValue,startPoint,zeroValue,allTop); scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, zeroValue));scheduleEdgeProcessing(newPathEdge<N,D,M>(zeroValue,startPoint,zeroValue)); submitInitialSeeds();submitInitialSeeds(); awaitCompletionComputeValuesAndShutdown();awaitCompletionComputeValuesAndShutdown(); }} /**/**	 * Schedules the processing of initial seeds, initiating the analysis.	 * Schedules the processing of initial seeds, initiating the analysis.	 * Clients should only call this methods if performing synchronization on	 * Clients should only call this methods if performing synchronization on	 * their own. Normally, {@link #solve()} should be called instead.	 * their own. Normally, {@link #solve()} should be called instead.	 */	 */ protected void submitInitialSeeds() {protectedvoidsubmitInitialSeeds(){ for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {for(Entry<N,Set<D>>seed:initialSeeds.entrySet()){ N startPoint = seed.getKey();NstartPoint=seed.getKey(); for(D val: seed.getValue()) {for(Dval:seed.getValue()){ propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v(), null, false);propagate(zeroValue,startPoint,val,EdgeIdentity.<V>v(),null,false); scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));scheduleEdgeProcessing(newPathEdge<N,D>(zeroValue,startPoint,val)); }} jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());jumpFn.addFunction(zeroValue,startPoint,zeroValue,EdgeIdentity.<V>v()); }} awaitCompletionComputeValuesAndShutdown();awaitCompletionComputeValuesAndShutdown(); }} /**/**     * Dispatch the processing of a given edge. It may be executed in a different thread.     * Dispatch the processing of a given edge. It may be executed in a different thread.     * @param edge the edge to process     * @param edge the edge to process     */     */ protected void scheduleEdgeProcessing(PathEdge<N,D,M> edge){protectedvoidscheduleEdgeProcessing(PathEdge<N,D,,MM>edge){ protected void scheduleEdgeProcessing(PathEdge<N,D> edge){protectedvoidscheduleEdgeProcessing(PathEdge<N,D>edge){ executor.execute(new PathEdgeProcessingTask(edge));executor.execute(newPathEdgeProcessingTask(edge)); propagationCount++;propagationCount++; }}	 * 	 * 	 * @param edge an edge whose target node resembles a method call	 * @param edge an edge whose target node resembles a method call	 */	 */ private void processCall(PathEdge<N,D,M> edge) {privatevoidprocessCall(PathEdge<N,D,,MM>edge){ private void processCall(PathEdge<N,D> edge) {privatevoidprocessCall(PathEdge<N,D>edge){ final D d1 = edge.factAtSource();finalDd1=edge.factAtSource(); final N n = edge.getTarget(); // a call node; line 14...finalNn=edge.getTarget();// a call node; line 14... final D d2 = edge.factAtTarget();finalDd2=edge.factAtTarget();  //for each callee's start point(s)//for each callee's start point(s) Set<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);Set<N>startPointsOf=icfg.getStartPointsOf(sCalledProcN); for(N sP: startPointsOf) { for(NsP:startPointsOf){  for(N sP: startPointsOf) {for(NsP:startPointsOf){ //for each result node of the call-flow function//for each result node of the call-flow function for(D d3: res) {for(Dd3:res){ //create initial self-loop//create initial self-loop propagate(d3, sP, d3, EdgeIdentity.<V>v()); //line 15propagate(d3,sP,d3,EdgeIdentity.<V>v());//line 15 propagate(d3, sP, d3, EdgeIdentity.<V>v(), n, false); //line 15propagate(d3,sP,d3,EdgeIdentity.<V>v(),, nn,, falsefalse);//line 15  //register the fact that <sp,d3> has an incoming edge from <n,d2>//register the fact that <sp,d3> has an incoming edge from <n,d2> Set<Cell<N, D, EdgeFunction<V>>> endSumm;Set<Cell<N,D,EdgeFunction<V>>>endSumm; //line 15.1 of Naeem/Lhotak/Rodriguez//line 15.1 of Naeem/Lhotak/Rodriguez addIncoming(sP,d3,n,d2);addIncoming(sP,d3,n,d2); //line 15.2, copy to avoid concurrent modification exceptions by other threads//line 15.2, copy to avoid concurrent modification exceptions by other threads endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3)); endSumm=newHashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP,d3)); endSumm = new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP, d3));endSumm=newHashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP,d3));  assert !jumpFn.reverseLookup(n, d2).isEmpty();assert!jumpFn.reverseLookup(n,d2).isEmpty(); }}  //still line 15.2 of Naeem/Lhotak/Rodriguez//still line 15.2 of Naeem/Lhotak/Rodriguez EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);EdgeFunction<V>f4=edgeFunctions.getCallEdgeFunction(n,d2,sCalledProcN,d3); EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);EdgeFunction<V>f5=edgeFunctions.getReturnEdgeFunction(n,sCalledProcN,eP,d4,retSiteN,d5); EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); EdgeFunction<V>fPrime=f4.composeWith(fCalleeSummary).composeWith(f5); propagate(d1, retSiteN, d5, f.composeWith(fPrime));propagate(d1,retSiteN,d5,f.composeWith(fPrime)); propagate(d1, retSiteN, d5, f.composeWith(fPrime), n, false);propagate(d1,retSiteN,d5,f.composeWith(fPrime),, nn,, falsefalse); }} }} }} flowFunctionConstructionCount++;flowFunctionConstructionCount++; for(D d3: callToReturnFlowFunction.computeTargets(d2)) {for(Dd3:callToReturnFlowFunction.computeTargets(d2)){ EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);EdgeFunction<V>edgeFnE=edgeFunctions.getCallToReturnEdgeFunction(n,d2,returnSiteN,d3); propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));propagate(d1,returnSiteN,d3,f.composeWith(edgeFnE)); propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE), n, false);propagate(d1,returnSiteN,d3,f.composeWith(edgeFnE),, nn,, falsefalse); }} }} }}	 * 	 * 	 * @param edge an edge whose target node resembles a method exits	 * @param edge an edge whose target node resembles a method exits	 */	 */ private void processExit(PathEdge<N,D,M> edge) {privateivatevoidprocessExit(PathEdge<N,D,,MM>edge){ protected void processExit(PathEdge<N,D> edge) {protectedotectedvoidprocessExit(PathEdge<N,D>edge){ final N n = edge.getTarget(); // an exit node; line 21...finalNn=edge.getTarget();// an exit node; line 21... EdgeFunction<V> f = jumpFunction(edge);EdgeFunction<V>f=jumpFunction(edge); M methodThatNeedsSummary = icfg.getMethodOf(n);MmethodThatNeedsSummary=icfg.getMethodOf(n); EdgeFunction<V> f3 = valAndFunc.getValue();EdgeFunction<V>f3=valAndFunc.getValue(); if(!f3.equalTo(allTop)) {if(!f3.equalTo(allTop)){ D d3 = valAndFunc.getKey();Dd3=valAndFunc.getKey(); propagate(d3, retSiteC, d5, f3.composeWith(fPrime));propagate(d3,retSiteC,d5,f3.composeWith(fPrime)); propagate(d3, retSiteC, d5, f3.composeWith(fPrime), c, false);propagate(d3,retSiteC,d5,f3.composeWith(fPrime),, cc,, falsefalse); }} }} }} }} }}  //handling for unbalanced problems where we return out of a method whose call was never processed//handling for unbalanced problems where we return out of a method whose call was never processed if(inc.isEmpty() && followReturnsPastSeeds) {if(inc.isEmpty()&&followReturnsPastSeeds){ // Make sure that the whole method was never called, regardless of the// Make sure that the whole method was never called, regardless of the // calling jump function.// calling jump function. boolean wasCalled = false;booleanwasCalled=false; for(N sP: startPointsOf)for(NsP:startPointsOf) if (incoming.containsRow(sP)) {if(incoming.containsRow(sP)){ wasCalled = true;wasCalled=true; break;break; }} if(!wasCalled && followReturnsPastSeeds) {if(!wasCalled&&followReturnsPastSeeds){ //handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow//handling for unbalanced problems where we return out of a method with a fact for which we have no incoming flow //note: we propagate that way only values that originate from ZERO, as conditionally generated values should only//note: we propagate that way only values that originate from ZERO, as conditionally generated values should only //be propagated into callers that have an incoming edge for this condition//be propagated into callers that have an incoming edge for this condition if(followReturnsPastSeeds && inc.isEmpty() && d1.equals(zeroValue)) {if(followReturnsPastSeeds&&inc.isEmpty()&&d1.equals(zeroValue)){ // only propagate up if we // only propagate up if we  Set<N> callers = icfg.getCallersOf(methodThatNeedsSummary);Set<N>callers=icfg.getCallersOf(methodThatNeedsSummary); for(N c: callers) {for(Nc:callers){ for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {for(NretSiteC:icfg.getReturnSitesOfCallAt(c)){ Set<D> targets = retFunction.computeTargets(d2);Set<D>targets=retFunction.computeTargets(d2); for(D d5: targets) {for(Dd5:targets){ EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);EdgeFunction<V>f5=edgeFunctions.getReturnEdgeFunction(c,icfg.getMethodOf(n),n,d2,retSiteC,d5); propagate(zeroValue, retSiteC, d5, f.composeWith(f5));propagate(zeroValue,retSiteC,d5,f.composeWith(f5)); propagate(zeroValue, retSiteC, d5, f.composeWith(f5), c, true);propagate(zeroValue,retSiteC,d5,f.composeWith(f5),, cc,, truetrue); }} }} }} }} }} }} }}  /**/**	 * Lines 33-37 of the algorithm.	 * Lines 33-37 of the algorithm.	 * Simply propagate normal, intra-procedural flows.	 * Simply propagate normal, intra-procedural flows.	 * @param edge	 * @param edge	 */	 */ private void processNormalFlow(PathEdge<N,D,M> edge) {privatevoidprocessNormalFlow(PathEdge<N,D,,MM>edge){ private void processNormalFlow(PathEdge<N,D> edge) {privatevoidprocessNormalFlow(PathEdge<N,D>edge){ final D d1 = edge.factAtSource();finalDd1=edge.factAtSource(); final N n = edge.getTarget(); finalNn=edge.getTarget(); final D d2 = edge.factAtTarget();finalDd2=edge.factAtTarget(); Set<D> res = flowFunction.computeTargets(d2);Set<D>res=flowFunction.computeTargets(d2); for (D d3 : res) {for(Dd3:res){ EdgeFunction<V> fprime = f.composeWith(edgeFunctions.getNormalEdgeFunction(n, d2, m, d3));EdgeFunction<V>fprime=f.composeWith(edgeFunctions.getNormalEdgeFunction(n,d2,m,d3)); propagate(d1, m, d3, fprime); propagate(d1,m,d3,fprime); propagate(d1, m, d3, fprime, null, false); propagate(d1,m,d3,fprime,, nullnull,, falsefalse); }} }} }}  private void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f) {privatevoidpropagate(DsourceVal,Ntarget,DtargetVal,EdgeFunction<V>f){ /**/**	 * Propagates the flow further down the exploded super graph, merging any edge function that might	 * Propagates the flow further down the exploded super graph, merging any edge function that might	 * already have been computed for targetVal at target. 	 * already have been computed for targetVal at target. 	 * @param sourceVal the source value of the propagated summary edge	 * @param sourceVal the source value of the propagated summary edge	 * @param target the target statement	 * @param target the target statement	 * @param targetVal the target value at the target statement	 * @param targetVal the target value at the target statement	 * @param f the new edge function computed from (s0,sourceVal) to (target,targetVal) 	 * @param f the new edge function computed from (s0,sourceVal) to (target,targetVal) 	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 	 * @param isUnbalancedReturn <code>true</code> if this edge is propagating an unbalanced return	 * @param isUnbalancedReturn <code>true</code> if this edge is propagating an unbalanced return	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IDESolver}) 	 */	 */ protected void propagate(D sourceVal, N target, D targetVal, EdgeFunction<V> f,protectedvoidpropagate(DsourceVal,Ntarget,DtargetVal,EdgeFunction<V>f, /* deliberately exposed to clients */ N relatedCallSite,/* deliberately exposed to clients */NrelatedCallSite, /* deliberately exposed to clients */ boolean isUnbalancedReturn) {/* deliberately exposed to clients */booleanisUnbalancedReturn){ EdgeFunction<V> jumpFnE;EdgeFunction<V>jumpFnE; EdgeFunction<V> fPrime;EdgeFunction<V>fPrime; boolean newFunction;booleannewFunction; }} if(newFunction) {if(newFunction){ PathEdge<N,D,M> edge = new PathEdge<N,D,M>(sourceVal, target, targetVal);PathEdge<N,D,,MM>edge=newPathEdge<N,D,,MM>(sourceVal,target,targetVal); PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);PathEdge<N,D>edge=newPathEdge<N,D>(sourceVal,target,targetVal); scheduleEdgeProcessing(edge);scheduleEdgeProcessing(edge); if(DEBUG) {if(DEBUG){ if(targetVal!=zeroValue) { if(targetVal!=zeroValue){ StringBuilder result = new StringBuilder();StringBuilderresult=newStringBuilder(); result.append(getDebugName());result.append(getDebugName()); result.append(": ");result.append(": "); result.append("EDGE:  <");result.append("EDGE:  <"); result.append(icfg.getMethodOf(target));result.append(icfg.getMethodOf(target)); result.append(",");result.append(",");	 */	 */ private void computeValues() { privatevoidcomputeValues(){ //Phase II(i)//Phase II(i) for(N startPoint: initialSeeds) {for(NstartPoint:initialSeeds){ setVal(startPoint, zeroValue, valueLattice.bottomElement());setVal(startPoint,zeroValue,valueLattice.bottomElement()); Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, zeroValue); Pair<N,D>superGraphNode=newPair<N,D>(startPoint,zeroValue); scheduleValueProcessing(new ValuePropagationTask(superGraphNode));scheduleValueProcessing(newValuePropagationTask(superGraphNode)); for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {for(Entry<N,Set<D>>seed:initialSeeds.entrySet()){ N startPoint = seed.getKey();NstartPoint=seed.getKey(); for(D val: seed.getValue()) {for(Dval:seed.getValue()){ setVal(startPoint, val, valueLattice.bottomElement());setVal(startPoint,val,valueLattice.bottomElement()); Pair<N, D> superGraphNode = new Pair<N,D>(startPoint, val); Pair<N,D>superGraphNode=newPair<N,D>(startPoint,val); scheduleValueProcessing(new ValuePropagationTask(superGraphNode));scheduleValueProcessing(newValuePropagationTask(superGraphNode)); }} }}  //await termination of tasks//await termination of tasks else return l;elsereturnl; }}  private void setVal(N nHashN, D nHashD,V l){ privatevoidsetVal(NnHashN,DnHashD,Vl){ private void setVal(N nHashN, D nHashD,V l){privatevoidsetVal(NnHashN,DnHashD,Vl){ // TOP is the implicit default value which we do not need to store.// TOP is the implicit default value which we do not need to store. synchronized (val) {synchronized(val){ val.put(nHashN, nHashD,l);val.put(nHashN,nHashD,l); if (l == valueLattice.topElement()) // do not store top valuesif(l==valueLattice.topElement())// do not store top values val.remove(nHashN, nHashD);val.remove(nHashN,nHashD); elseelse val.put(nHashN, nHashD,l);val.put(nHashN,nHashD,l); }} if(DEBUG)if(DEBUG) System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+" "+l); }} private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {privateEdgeFunction<V>jumpFunction(PathEdge<N, DD,, MM>edge){ private EdgeFunction<V> jumpFunction(PathEdge<N,D> edge) {privateEdgeFunction<V>jumpFunction(PathEdge<N,DD>edge){ synchronized (jumpFn) {synchronized(jumpFn){ EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());EdgeFunction<V>function=jumpFn.forwardLookup(edge.factAtSource(),edge.getTarget()).get(edge.factAtTarget()); if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paperif(function==null)returnallTop;//JumpFn initialized to all-top, see line [2] in SRH96 paper } }  /**/**	 * Returns the V-type result for the given value at the given statement. 	 * Returns the V-type result for the given value at the given statement. 	 * Returns the V-type result for the given value at the given statement.	 * Returns the V-type result for the given value at the given statement.	 * TOP values are never returned.	 * TOP values are never returned.	 */	 */ public V resultAt(N stmt, D value) {publicVresultAt(Nstmt,Dvalue){ //no need to synchronize here as all threads are known to have terminated//no need to synchronize here as all threads are known to have terminated  /**/**	 * Returns the resulting environment for the given statement.	 * Returns the resulting environment for the given statement.	 * The artificial zero value is automatically stripped.	 * The artificial zero value is automatically stripped.	 * The artificial zero value is automatically stripped. TOP values are	 * The artificial zero value is automatically stripped. TOP values are	 * never returned.	 * never returned.	 */	 */ public Map<D,V> resultsAt(N stmt) {publicMap<D,V>resultsAt(Nstmt){ //filter out the artificial zero-value//filter out the artificial zero-value protected CountingThreadPoolExecutor getExecutor() {protectedCountingThreadPoolExecutorgetExecutor(){ return new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());returnnewCountingThreadPoolExecutor(1,this.numThreads,30,TimeUnit.SECONDS,newLinkedBlockingQueue<Runnable>()); }}  /**/**	 * Returns a String used to identify the output of this solver in debug mode.	 * Returns a String used to identify the output of this solver in debug mode.	 * Subclasses can overwrite this string to distinguish the output from different solvers.	 * Subclasses can overwrite this string to distinguish the output from different solvers.	 */	 */ protected String getDebugName() {protectedStringgetDebugName(){ return "";return""; }} public void printStats() {publicvoidprintStats(){ if(DEBUG) {if(DEBUG){ }}  private class PathEdgeProcessingTask implements Runnable {privateclassPathEdgeProcessingTaskimplementsRunnable{ private final PathEdge<N, D, M> edge;privatefinalPathEdge<N, DD,, MM>edge; private final PathEdge<N,D> edge;privatefinalPathEdge<N,DD>edge; public PathEdgeProcessingTask(PathEdge<N, D, M> edge) {publicPathEdgeProcessingTask(PathEdge<N, DD,, MM>edge){ public PathEdgeProcessingTask(PathEdge<N,D> edge) {publicPathEdgeProcessingTask(PathEdge<N,DD>edge){ this.edge = edge;this.edge=edge; }} public void run() {publicvoidrun(){ N n = nAndD.getO1();Nn=nAndD.getO1(); if(icfg.isStartPoint(n) ||if(icfg.isStartPoint(n)|| initialSeeds.contains(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as suchinitialSeeds.contains(n)){//our initial seeds are not necessarily method-start points but here they should be treated as such initialSeeds.containsKey(n)) { //our initial seeds are not necessarily method-start points but here they should be treated as suchinitialSeeds.containsKeyKey(n)){//our initial seeds are not necessarily method-start points but here they should be treated as such propagateValueAtStart(nAndD, n);propagateValueAtStart(nAndD,n); }} if(icfg.isCallStmt(n)) {if(icfg.isCallStmt(n)){








src/heros/solver/IFDSSolver.java








View file @ 16ed129f






......@@ -12,7 +12,6 @@ package heros.solver;




















import static heros.solver.IFDSSolver.BinaryDomain.BOTTOM;










import static heros.solver.IFDSSolver.BinaryDomain.TOP;





















import heros.EdgeFunction;










import heros.EdgeFunctions;










import heros.FlowFunctions;



......@@ -24,6 +23,7 @@ import heros.edgefunc.AllBottom;









import heros.edgefunc.AllTop;










import heros.edgefunc.EdgeIdentity;





















import java.util.Map;










import java.util.Set;





















/**



......@@ -59,7 +59,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 return ifdsProblem.interproceduralCFG();










 }





















 public Set<N> initialSeeds() {










 public Map<N,Set<D>> initialSeeds() {










 return ifdsProblem.initialSeeds();










 }














......












src/heros/solver/IFDSSolver.java








View file @ 16ed129f








src/heros/solver/IFDSSolver.java










View file @ 16ed129f


16ed129f



......@@ -12,7 +12,6 @@ package heros.solver;




















import static heros.solver.IFDSSolver.BinaryDomain.BOTTOM;










import static heros.solver.IFDSSolver.BinaryDomain.TOP;





















import heros.EdgeFunction;










import heros.EdgeFunctions;










import heros.FlowFunctions;



......@@ -24,6 +23,7 @@ import heros.edgefunc.AllBottom;









import heros.edgefunc.AllTop;










import heros.edgefunc.EdgeIdentity;





















import java.util.Map;










import java.util.Set;





















/**



......@@ -59,7 +59,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 return ifdsProblem.interproceduralCFG();










 }





















 public Set<N> initialSeeds() {










 public Map<N,Set<D>> initialSeeds() {










 return ifdsProblem.initialSeeds();










 }














......






......@@ -12,7 +12,6 @@ package heros.solver;




















import static heros.solver.IFDSSolver.BinaryDomain.BOTTOM;










import static heros.solver.IFDSSolver.BinaryDomain.TOP;





















import heros.EdgeFunction;










import heros.EdgeFunctions;










import heros.FlowFunctions;



......@@ -24,6 +23,7 @@ import heros.edgefunc.AllBottom;









import heros.edgefunc.AllTop;










import heros.edgefunc.EdgeIdentity;





















import java.util.Map;










import java.util.Set;





















/**



......@@ -59,7 +59,7 @@ public class IFDSSolver<N,D,M,I extends InterproceduralCFG<N, M>> extends IDESol









 return ifdsProblem.interproceduralCFG();










 }





















 public Set<N> initialSeeds() {










 public Map<N,Set<D>> initialSeeds() {










 return ifdsProblem.initialSeeds();










 }














......


import static heros.solver.IFDSSolver.BinaryDomain.BOTTOM;importstaticheros.solver.IFDSSolver.BinaryDomain.BOTTOM;import static heros.solver.IFDSSolver.BinaryDomain.TOP;importstaticheros.solver.IFDSSolver.BinaryDomain.TOP;import heros.EdgeFunction;importheros.EdgeFunction;import heros.EdgeFunctions;importheros.EdgeFunctions;import heros.FlowFunctions;importheros.FlowFunctions;import heros.edgefunc.AllTop;importheros.edgefunc.AllTop;import heros.edgefunc.EdgeIdentity;importheros.edgefunc.EdgeIdentity;import java.util.Map;importjava.util.Map;import java.util.Set;importjava.util.Set;/**/** return ifdsProblem.interproceduralCFG();returnifdsProblem.interproceduralCFG(); }} public Set<N> initialSeeds() {publicSet<NN>initialSeeds(){ public Map<N,Set<D>> initialSeeds() {publicMapMap<<NN,,Set<DD>>>initialSeeds(){ return ifdsProblem.initialSeeds();returnifdsProblem.initialSeeds(); }}








src/heros/solver/PathEdge.java








View file @ 16ed129f






......@@ -19,9 +19,8 @@ import heros.InterproceduralCFG;









 *










 * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}.










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.










 */










public class PathEdge<N,D,M> {










public class PathEdge<N,D> {





















 protected final N target;










 protected final D dSource, dTarget;



......












src/heros/solver/PathEdge.java








View file @ 16ed129f








src/heros/solver/PathEdge.java










View file @ 16ed129f


16ed129f



......@@ -19,9 +19,8 @@ import heros.InterproceduralCFG;









 *










 * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}.










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.










 */










public class PathEdge<N,D,M> {










public class PathEdge<N,D> {





















 protected final N target;










 protected final D dSource, dTarget;



......






......@@ -19,9 +19,8 @@ import heros.InterproceduralCFG;









 *










 * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}.










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.










 */










public class PathEdge<N,D,M> {










public class PathEdge<N,D> {





















 protected final N target;










 protected final D dSource, dTarget;



......


 * * * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}. * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}. * @param <D> The type of data-flow facts to be computed by the tabulation problem. * @param <D> The type of data-flow facts to be computed by the tabulation problem. * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}. * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}. */ */public class PathEdge<N,D,M> {publicclassPathEdge<N,D,,MM>{public class PathEdge<N,D> {publicclassPathEdge<N,D>{ protected final N target;protectedfinalNtarget; protected final D dSource, dTarget;protectedfinalDdSource,dTarget;









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






