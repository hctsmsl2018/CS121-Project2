



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

e4ca369d















Commit
e4ca369d


authored
Jun 10, 2015
by


Johannes Lerch



Browse files




merging incoming facts







parent
2dbea9ba













Changes
5




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ e4ca369d






......@@ -20,15 +20,21 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(analyzer, joinStmt, new AccessPath<Field>(), null);










 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated=false;










 }










 










 private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }



......@@ -39,8 +45,12 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 }





















 protected void processIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, fact.getFact());










 }










 else {










 propagated=true;










 sourceFact = fact.getFact();










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(joinStmt, new WrappedFact<Field, Fact, Stmt, Method>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }



......@@ -67,7 +77,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(analyzer, joinStmt, newAccPath, this);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, this);










 }





















 @Override



......














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ e4ca369d






......@@ -44,13 +44,13 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 }










 };










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 }










 };










 private CallEdgeResolver<Field, Fact, Stmt, Method> callEdgeResolver;



......@@ -245,9 +245,10 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }










 










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 if(!isBootStrapped())










 if(isBootStrapped()) {










 context.factHandler.merge(sourceFact, incEdge.getCalleeSourceFact().getFact());










 } else 










 bootstrapAtMethodStartPoints();










 










 callEdgeResolver.addIncoming(incEdge);










 }














......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ e4ca369d






......@@ -22,16 +22,21 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(analyzer, returnSite, new AccessPath<Field>(), null);










 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(factMergeHandler, analyzer, returnSite, null, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated = false;










 }





















 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }



......@@ -58,8 +63,12 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }










 










 protected void processIncomingGuaranteedPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, retEdge.incFact);










 } 










 else {










 propagated=true;










 sourceFact = retEdge.incFact;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<Field, Fact, Stmt, Method>(retEdge.incFact, new AccessPath<Field>(), this)));










 }



......@@ -76,7 +85,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(analyzer, returnSite, newAccPath, this);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, newAccPath, this);










 }










 










 public Stmt getReturnSite() {



......














test/heros/fieldsens/ControlFlowJoinResolverTest.java








View file @ e4ca369d






......@@ -64,7 +64,7 @@ public class ControlFlowJoinResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 joinStmt = new Statement("joinStmt");










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(analyzer, joinStmt);










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt);










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......














test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ e4ca369d






......@@ -68,7 +68,7 @@ public class ReturnSiteResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 returnSite = new Statement("returnSite");










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(analyzer, returnSite);










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite);










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

e4ca369d















Commit
e4ca369d


authored
Jun 10, 2015
by


Johannes Lerch



Browse files




merging incoming facts







parent
2dbea9ba













Changes
5




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ e4ca369d






......@@ -20,15 +20,21 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(analyzer, joinStmt, new AccessPath<Field>(), null);










 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated=false;










 }










 










 private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }



......@@ -39,8 +45,12 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 }





















 protected void processIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, fact.getFact());










 }










 else {










 propagated=true;










 sourceFact = fact.getFact();










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(joinStmt, new WrappedFact<Field, Fact, Stmt, Method>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }



......@@ -67,7 +77,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(analyzer, joinStmt, newAccPath, this);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, this);










 }





















 @Override



......














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ e4ca369d






......@@ -44,13 +44,13 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 }










 };










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 }










 };










 private CallEdgeResolver<Field, Fact, Stmt, Method> callEdgeResolver;



......@@ -245,9 +245,10 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }










 










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 if(!isBootStrapped())










 if(isBootStrapped()) {










 context.factHandler.merge(sourceFact, incEdge.getCalleeSourceFact().getFact());










 } else 










 bootstrapAtMethodStartPoints();










 










 callEdgeResolver.addIncoming(incEdge);










 }














......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ e4ca369d






......@@ -22,16 +22,21 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(analyzer, returnSite, new AccessPath<Field>(), null);










 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(factMergeHandler, analyzer, returnSite, null, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated = false;










 }





















 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }



......@@ -58,8 +63,12 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }










 










 protected void processIncomingGuaranteedPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, retEdge.incFact);










 } 










 else {










 propagated=true;










 sourceFact = retEdge.incFact;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<Field, Fact, Stmt, Method>(retEdge.incFact, new AccessPath<Field>(), this)));










 }



......@@ -76,7 +85,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(analyzer, returnSite, newAccPath, this);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, newAccPath, this);










 }










 










 public Stmt getReturnSite() {



......














test/heros/fieldsens/ControlFlowJoinResolverTest.java








View file @ e4ca369d






......@@ -64,7 +64,7 @@ public class ControlFlowJoinResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 joinStmt = new Statement("joinStmt");










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(analyzer, joinStmt);










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt);










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......














test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ e4ca369d






......@@ -68,7 +68,7 @@ public class ReturnSiteResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 returnSite = new Statement("returnSite");










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(analyzer, returnSite);










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite);










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

e4ca369d







Open sidebar



Joshua Garcia heros
Commits

e4ca369d




Open sidebar

Joshua Garcia heros
Commits

e4ca369d


Joshua GarciaherosherosCommits
e4ca369d








Commit
e4ca369d


authored
Jun 10, 2015
by


Johannes Lerch



Browse files




merging incoming facts







parent
2dbea9ba













Changes
5




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ e4ca369d






......@@ -20,15 +20,21 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(analyzer, joinStmt, new AccessPath<Field>(), null);










 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated=false;










 }










 










 private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }



......@@ -39,8 +45,12 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 }





















 protected void processIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, fact.getFact());










 }










 else {










 propagated=true;










 sourceFact = fact.getFact();










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(joinStmt, new WrappedFact<Field, Fact, Stmt, Method>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }



......@@ -67,7 +77,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(analyzer, joinStmt, newAccPath, this);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, this);










 }





















 @Override



......














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ e4ca369d






......@@ -44,13 +44,13 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 }










 };










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 }










 };










 private CallEdgeResolver<Field, Fact, Stmt, Method> callEdgeResolver;



......@@ -245,9 +245,10 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }










 










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 if(!isBootStrapped())










 if(isBootStrapped()) {










 context.factHandler.merge(sourceFact, incEdge.getCalleeSourceFact().getFact());










 } else 










 bootstrapAtMethodStartPoints();










 










 callEdgeResolver.addIncoming(incEdge);










 }














......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ e4ca369d






......@@ -22,16 +22,21 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(analyzer, returnSite, new AccessPath<Field>(), null);










 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(factMergeHandler, analyzer, returnSite, null, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated = false;










 }





















 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }



......@@ -58,8 +63,12 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }










 










 protected void processIncomingGuaranteedPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, retEdge.incFact);










 } 










 else {










 propagated=true;










 sourceFact = retEdge.incFact;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<Field, Fact, Stmt, Method>(retEdge.incFact, new AccessPath<Field>(), this)));










 }



......@@ -76,7 +85,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(analyzer, returnSite, newAccPath, this);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, newAccPath, this);










 }










 










 public Stmt getReturnSite() {



......














test/heros/fieldsens/ControlFlowJoinResolverTest.java








View file @ e4ca369d






......@@ -64,7 +64,7 @@ public class ControlFlowJoinResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 joinStmt = new Statement("joinStmt");










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(analyzer, joinStmt);










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt);










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......














test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ e4ca369d






......@@ -68,7 +68,7 @@ public class ReturnSiteResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 returnSite = new Statement("returnSite");










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(analyzer, returnSite);










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite);










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
e4ca369d


authored
Jun 10, 2015
by


Johannes Lerch



Browse files




merging incoming facts







parent
2dbea9ba













Changes
5




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ e4ca369d






......@@ -20,15 +20,21 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(analyzer, joinStmt, new AccessPath<Field>(), null);










 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated=false;










 }










 










 private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }



......@@ -39,8 +45,12 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 }





















 protected void processIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, fact.getFact());










 }










 else {










 propagated=true;










 sourceFact = fact.getFact();










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(joinStmt, new WrappedFact<Field, Fact, Stmt, Method>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }



......@@ -67,7 +77,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(analyzer, joinStmt, newAccPath, this);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, this);










 }





















 @Override



......














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ e4ca369d






......@@ -44,13 +44,13 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 }










 };










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 }










 };










 private CallEdgeResolver<Field, Fact, Stmt, Method> callEdgeResolver;



......@@ -245,9 +245,10 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }










 










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 if(!isBootStrapped())










 if(isBootStrapped()) {










 context.factHandler.merge(sourceFact, incEdge.getCalleeSourceFact().getFact());










 } else 










 bootstrapAtMethodStartPoints();










 










 callEdgeResolver.addIncoming(incEdge);










 }














......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ e4ca369d






......@@ -22,16 +22,21 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(analyzer, returnSite, new AccessPath<Field>(), null);










 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(factMergeHandler, analyzer, returnSite, null, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated = false;










 }





















 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }



......@@ -58,8 +63,12 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }










 










 protected void processIncomingGuaranteedPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, retEdge.incFact);










 } 










 else {










 propagated=true;










 sourceFact = retEdge.incFact;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<Field, Fact, Stmt, Method>(retEdge.incFact, new AccessPath<Field>(), this)));










 }



......@@ -76,7 +85,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(analyzer, returnSite, newAccPath, this);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, newAccPath, this);










 }










 










 public Stmt getReturnSite() {



......














test/heros/fieldsens/ControlFlowJoinResolverTest.java








View file @ e4ca369d






......@@ -64,7 +64,7 @@ public class ControlFlowJoinResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 joinStmt = new Statement("joinStmt");










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(analyzer, joinStmt);










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt);










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......














test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ e4ca369d






......@@ -68,7 +68,7 @@ public class ReturnSiteResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 returnSite = new Statement("returnSite");










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(analyzer, returnSite);










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite);










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
e4ca369d


authored
Jun 10, 2015
by


Johannes Lerch



Browse files



Commit
e4ca369d


authored
Jun 10, 2015
by


Johannes Lerch

e4ca369dauthoredbyJohannes Lerch

merging incoming facts






parent
2dbea9ba
















parent
2dbea9ba





parent












Changes
5
5


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ e4ca369d






......@@ -20,15 +20,21 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(analyzer, joinStmt, new AccessPath<Field>(), null);










 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated=false;










 }










 










 private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }



......@@ -39,8 +45,12 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 }





















 protected void processIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, fact.getFact());










 }










 else {










 propagated=true;










 sourceFact = fact.getFact();










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(joinStmt, new WrappedFact<Field, Fact, Stmt, Method>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }



......@@ -67,7 +77,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(analyzer, joinStmt, newAccPath, this);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, this);










 }





















 @Override



......














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ e4ca369d






......@@ -44,13 +44,13 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 }










 };










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 }










 };










 private CallEdgeResolver<Field, Fact, Stmt, Method> callEdgeResolver;



......@@ -245,9 +245,10 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }










 










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 if(!isBootStrapped())










 if(isBootStrapped()) {










 context.factHandler.merge(sourceFact, incEdge.getCalleeSourceFact().getFact());










 } else 










 bootstrapAtMethodStartPoints();










 










 callEdgeResolver.addIncoming(incEdge);










 }














......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ e4ca369d






......@@ -22,16 +22,21 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(analyzer, returnSite, new AccessPath<Field>(), null);










 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(factMergeHandler, analyzer, returnSite, null, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated = false;










 }





















 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }



......@@ -58,8 +63,12 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }










 










 protected void processIncomingGuaranteedPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, retEdge.incFact);










 } 










 else {










 propagated=true;










 sourceFact = retEdge.incFact;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<Field, Fact, Stmt, Method>(retEdge.incFact, new AccessPath<Field>(), this)));










 }



......@@ -76,7 +85,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(analyzer, returnSite, newAccPath, this);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, newAccPath, this);










 }










 










 public Stmt getReturnSite() {



......














test/heros/fieldsens/ControlFlowJoinResolverTest.java








View file @ e4ca369d






......@@ -64,7 +64,7 @@ public class ControlFlowJoinResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 joinStmt = new Statement("joinStmt");










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(analyzer, joinStmt);










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt);










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......














test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ e4ca369d






......@@ -68,7 +68,7 @@ public class ReturnSiteResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 returnSite = new Statement("returnSite");










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(analyzer, returnSite);










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite);










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......














src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ e4ca369d






......@@ -20,15 +20,21 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(analyzer, joinStmt, new AccessPath<Field>(), null);










 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated=false;










 }










 










 private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }



......@@ -39,8 +45,12 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 }





















 protected void processIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, fact.getFact());










 }










 else {










 propagated=true;










 sourceFact = fact.getFact();










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(joinStmt, new WrappedFact<Field, Fact, Stmt, Method>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }



......@@ -67,7 +77,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(analyzer, joinStmt, newAccPath, this);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, this);










 }





















 @Override



......












src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ e4ca369d








src/heros/fieldsens/ControlFlowJoinResolver.java










View file @ e4ca369d


e4ca369d



......@@ -20,15 +20,21 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(analyzer, joinStmt, new AccessPath<Field>(), null);










 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated=false;










 }










 










 private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }



......@@ -39,8 +45,12 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 }





















 protected void processIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, fact.getFact());










 }










 else {










 propagated=true;










 sourceFact = fact.getFact();










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(joinStmt, new WrappedFact<Field, Fact, Stmt, Method>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }



......@@ -67,7 +77,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(analyzer, joinStmt, newAccPath, this);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, this);










 }





















 @Override



......






......@@ -20,15 +20,21 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 private Stmt joinStmt;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(analyzer, joinStmt, new AccessPath<Field>(), null);










 public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {










 this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated=false;










 }










 










 private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 this.factMergeHandler = factMergeHandler;










 this.joinStmt = joinStmt;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }



......@@ -39,8 +45,12 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 }





















 protected void processIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, fact.getFact());










 }










 else {










 propagated=true;










 sourceFact = fact.getFact();










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(joinStmt, new WrappedFact<Field, Fact, Stmt, Method>(










 fact.getFact(), new AccessPath<Field>(), this)));










 }



......@@ -67,7 +77,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 










 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(analyzer, joinStmt, newAccPath, this);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, this);










 }





















 @Override



......


 private Stmt joinStmt;privateStmtjoinStmt; private AccessPath<Field> resolvedAccPath;privateAccessPath<Field>resolvedAccPath; private boolean propagated = false;privatebooleanpropagated=false; private Fact sourceFact;privateFactsourceFact; private FactMergeHandler<Fact> factMergeHandler;privateFactMergeHandler<Fact>factMergeHandler; public ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {publicControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtjoinStmt){ this(analyzer, joinStmt, new AccessPath<Field>(), null);this(analyzer,joinStmt,newAccessPath<Field>(),null); public ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt) {publicControlFlowJoinResolver(FactMergeHandler<Fact>factMergeHandler,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtjoinStmt){ this(factMergeHandler, analyzer, joinStmt, null, new AccessPath<Field>(), null);this(factMergeHandler,analyzer,joinStmt,null,newAccessPath<Field>(),null); this.factMergeHandler = factMergeHandler;this.factMergeHandler=factMergeHandler; propagated=false;propagated=false; }}  private ControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt joinStmt, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {privateControlFlowJoinResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtjoinStmt,AccessPath<Field>resolvedAccPath,ControlFlowJoinResolver<Field,Fact,Stmt,Method>parent){ private ControlFlowJoinResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, privateControlFlowJoinResolver(FactMergeHandler<Fact>factMergeHandler,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer, Stmt joinStmt, Fact sourceFact, AccessPath<Field> resolvedAccPath, ControlFlowJoinResolver<Field, Fact, Stmt, Method> parent) {StmtjoinStmt,FactsourceFact,AccessPath<Field>resolvedAccPath,ControlFlowJoinResolver<Field,Fact,Stmt,Method>parent){ super(analyzer, parent);super(analyzer,parent); this.factMergeHandler = factMergeHandler;this.factMergeHandler=factMergeHandler; this.joinStmt = joinStmt;this.joinStmt=joinStmt; this.sourceFact = sourceFact;this.sourceFact=sourceFact; this.resolvedAccPath = resolvedAccPath;this.resolvedAccPath=resolvedAccPath; propagated=true;propagated=true; }} }} protected void processIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method> fact) {protectedvoidprocessIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method>fact){ if(!propagated) {if(!propagated){ if(propagated) {if(propagated){ factMergeHandler.merge(sourceFact, fact.getFact());factMergeHandler.merge(sourceFact,fact.getFact()); }} else {else{ propagated=true;propagated=true; sourceFact = fact.getFact();sourceFact=fact.getFact(); analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(joinStmt, new WrappedFact<Field, Fact, Stmt, Method>(analyzer.processFlowFromJoinStmt(newWrappedFactAtStatement<Field,Fact,Stmt,Method>(joinStmt,newWrappedFact<Field,Fact,Stmt,Method>( fact.getFact(), new AccessPath<Field>(), this)));fact.getFact(),newAccessPath<Field>(),this))); }}  @Override@Override protected ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {protectedResolverTemplate<Field,Fact,Stmt,Method,WrappedFact<Field,Fact,Stmt,Method>>createNestedResolver(AccessPath<Field>newAccPath){ return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(analyzer, joinStmt, newAccPath, this);returnnewControlFlowJoinResolver<Field,Fact,Stmt,Method>(analyzer,joinStmt,newAccPath,this); return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, joinStmt, sourceFact, newAccPath, this);returnnewControlFlowJoinResolver<Field,Fact,Stmt,Method>(factMergeHandlerfactMergeHandler,, analyzer,joinStmt,sourceFactsourceFact,, newAccPath,this); }} @Override@Override








src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ e4ca369d






......@@ -44,13 +44,13 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 }










 };










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 }










 };










 private CallEdgeResolver<Field, Fact, Stmt, Method> callEdgeResolver;



......@@ -245,9 +245,10 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }










 










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 if(!isBootStrapped())










 if(isBootStrapped()) {










 context.factHandler.merge(sourceFact, incEdge.getCalleeSourceFact().getFact());










 } else 










 bootstrapAtMethodStartPoints();










 










 callEdgeResolver.addIncoming(incEdge);










 }














......












src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ e4ca369d








src/heros/fieldsens/PerAccessPathMethodAnalyzer.java










View file @ e4ca369d


e4ca369d



......@@ -44,13 +44,13 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 }










 };










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 }










 };










 private CallEdgeResolver<Field, Fact, Stmt, Method> callEdgeResolver;



......@@ -245,9 +245,10 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }










 










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 if(!isBootStrapped())










 if(isBootStrapped()) {










 context.factHandler.merge(sourceFact, incEdge.getCalleeSourceFact().getFact());










 } else 










 bootstrapAtMethodStartPoints();










 










 callEdgeResolver.addIncoming(incEdge);










 }














......






......@@ -44,13 +44,13 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 }










 };










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);










 return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);










 }










 };










 private CallEdgeResolver<Field, Fact, Stmt, Method> callEdgeResolver;



......@@ -245,9 +245,10 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }










 










 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {










 if(!isBootStrapped())










 if(isBootStrapped()) {










 context.factHandler.merge(sourceFact, incEdge.getCalleeSourceFact().getFact());










 } else 










 bootstrapAtMethodStartPoints();










 










 callEdgeResolver.addIncoming(incEdge);










 }














......


 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {privateDefaultValueMap<FactAtStatement<Fact,Stmt>,ReturnSiteResolver<Field,Fact,Stmt,Method>>returnSiteResolvers=newDefaultValueMap<FactAtStatement<Fact,Stmt>,ReturnSiteResolver<Field,Fact,Stmt,Method>>(){ @Override@Override protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {protectedReturnSiteResolver<Field,Fact,Stmt,Method>createItem(FactAtStatement<Fact,Stmt>key){ return new ReturnSiteResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);returnnewReturnSiteResolver<Field,Fact,Stmt,Method>(PerAccessPathMethodAnalyzer.this,key.stmt); return new ReturnSiteResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);returnnewReturnSiteResolver<Field,Fact,Stmt,Method>(contextcontext..factHandlerfactHandler,, PerAccessPathMethodAnalyzer.this,key.stmt); }} };}; private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {privateDefaultValueMap<FactAtStatement<Fact,Stmt>,ControlFlowJoinResolver<Field,Fact,Stmt,Method>>ctrFlowJoinResolvers=newDefaultValueMap<FactAtStatement<Fact,Stmt>,ControlFlowJoinResolver<Field,Fact,Stmt,Method>>(){ @Override@Override protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {protectedControlFlowJoinResolver<Field,Fact,Stmt,Method>createItem(FactAtStatement<Fact,Stmt>key){ return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(PerAccessPathMethodAnalyzer.this, key.stmt);returnnewControlFlowJoinResolver<Field,Fact,Stmt,Method>(PerAccessPathMethodAnalyzer.this,key.stmt); return new ControlFlowJoinResolver<Field, Fact, Stmt, Method>(context.factHandler, PerAccessPathMethodAnalyzer.this, key.stmt);returnnewControlFlowJoinResolver<Field,Fact,Stmt,Method>(contextcontext..factHandlerfactHandler,, PerAccessPathMethodAnalyzer.this,key.stmt); }} };}; private CallEdgeResolver<Field, Fact, Stmt, Method> callEdgeResolver;privateCallEdgeResolver<Field,Fact,Stmt,Method>callEdgeResolver; }}  public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge) {publicvoidaddIncomingEdge(CallEdge<Field,Fact,Stmt,Method>incEdge){ if(!isBootStrapped())if(!isBootStrapped()) if(isBootStrapped()) {if(isBootStrapped()){ context.factHandler.merge(sourceFact, incEdge.getCalleeSourceFact().getFact());context.factHandler.merge(sourceFact,incEdge.getCalleeSourceFact().getFact()); } else }else bootstrapAtMethodStartPoints();bootstrapAtMethodStartPoints();  callEdgeResolver.addIncoming(incEdge);callEdgeResolver.addIncoming(incEdge); }}








src/heros/fieldsens/ReturnSiteResolver.java








View file @ e4ca369d






......@@ -22,16 +22,21 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(analyzer, returnSite, new AccessPath<Field>(), null);










 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(factMergeHandler, analyzer, returnSite, null, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated = false;










 }





















 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }



......@@ -58,8 +63,12 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }










 










 protected void processIncomingGuaranteedPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, retEdge.incFact);










 } 










 else {










 propagated=true;










 sourceFact = retEdge.incFact;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<Field, Fact, Stmt, Method>(retEdge.incFact, new AccessPath<Field>(), this)));










 }



......@@ -76,7 +85,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(analyzer, returnSite, newAccPath, this);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, newAccPath, this);










 }










 










 public Stmt getReturnSite() {



......












src/heros/fieldsens/ReturnSiteResolver.java








View file @ e4ca369d








src/heros/fieldsens/ReturnSiteResolver.java










View file @ e4ca369d


e4ca369d



......@@ -22,16 +22,21 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(analyzer, returnSite, new AccessPath<Field>(), null);










 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(factMergeHandler, analyzer, returnSite, null, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated = false;










 }





















 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }



......@@ -58,8 +63,12 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }










 










 protected void processIncomingGuaranteedPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, retEdge.incFact);










 } 










 else {










 propagated=true;










 sourceFact = retEdge.incFact;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<Field, Fact, Stmt, Method>(retEdge.incFact, new AccessPath<Field>(), this)));










 }



......@@ -76,7 +85,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(analyzer, returnSite, newAccPath, this);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, newAccPath, this);










 }










 










 public Stmt getReturnSite() {



......






......@@ -22,16 +22,21 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 private Stmt returnSite;










 private AccessPath<Field> resolvedAccPath;










 private boolean propagated = false;










 private Fact sourceFact;










 private FactMergeHandler<Fact> factMergeHandler;





















 public ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(analyzer, returnSite, new AccessPath<Field>(), null);










 public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {










 this(factMergeHandler, analyzer, returnSite, null, new AccessPath<Field>(), null);










 this.factMergeHandler = factMergeHandler;










 propagated = false;










 }





















 private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, 










 Fact sourceFact, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {










 super(analyzer, parent);










 this.factMergeHandler = factMergeHandler;










 this.returnSite = returnSite;










 this.sourceFact = sourceFact;










 this.resolvedAccPath = resolvedAccPath;










 propagated=true;










 }



......@@ -58,8 +63,12 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 }










 










 protected void processIncomingGuaranteedPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {










 if(!propagated) {










 if(propagated) {










 factMergeHandler.merge(sourceFact, retEdge.incFact);










 } 










 else {










 propagated=true;










 sourceFact = retEdge.incFact;










 analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, 










 new WrappedFact<Field, Fact, Stmt, Method>(retEdge.incFact, new AccessPath<Field>(), this)));










 }



......@@ -76,7 +85,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl




















 @Override










 protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(analyzer, returnSite, newAccPath, this);










 return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, newAccPath, this);










 }










 










 public Stmt getReturnSite() {



......


 private Stmt returnSite;privateStmtreturnSite; private AccessPath<Field> resolvedAccPath;privateAccessPath<Field>resolvedAccPath; private boolean propagated = false;privatebooleanpropagated=false; private Fact sourceFact;privateFactsourceFact; private FactMergeHandler<Fact> factMergeHandler;privateFactMergeHandler<Fact>factMergeHandler; public ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {publicReturnSiteResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtreturnSite){ this(analyzer, returnSite, new AccessPath<Field>(), null);this(analyzer,returnSite,newAccessPath<Field>(),null); public ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite) {publicReturnSiteResolver(FactMergeHandler<Fact>factMergeHandler,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtreturnSite){ this(factMergeHandler, analyzer, returnSite, null, new AccessPath<Field>(), null);this(factMergeHandler,analyzer,returnSite,null,newAccessPath<Field>(),null); this.factMergeHandler = factMergeHandler;this.factMergeHandler=factMergeHandler; propagated = false;propagated=false; }} private ReturnSiteResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, privateReturnSiteResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtreturnSite, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {AccessPath<Field>resolvedAccPath,ReturnSiteResolver<Field,Fact,Stmt,Method>parent){ private ReturnSiteResolver(FactMergeHandler<Fact> factMergeHandler, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Stmt returnSite, privateReturnSiteResolver(FactMergeHandlerFactMergeHandler<<FactFact>> factMergeHandlerfactMergeHandler,, PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,StmtreturnSite, Fact sourceFact, AccessPath<Field> resolvedAccPath, ReturnSiteResolver<Field, Fact, Stmt, Method> parent) {FactFact sourceFactsourceFact,, AccessPath<Field>resolvedAccPath,ReturnSiteResolver<Field,Fact,Stmt,Method>parent){ super(analyzer, parent);super(analyzer,parent); this.factMergeHandler = factMergeHandler;this.factMergeHandler=factMergeHandler; this.returnSite = returnSite;this.returnSite=returnSite; this.sourceFact = sourceFact;this.sourceFact=sourceFact; this.resolvedAccPath = resolvedAccPath;this.resolvedAccPath=resolvedAccPath; propagated=true;propagated=true; }} }}  protected void processIncomingGuaranteedPrefix(ReturnEdge<Field, Fact, Stmt, Method> retEdge) {protectedvoidprocessIncomingGuaranteedPrefix(ReturnEdge<Field,Fact,Stmt,Method>retEdge){ if(!propagated) {if(!propagated){ if(propagated) {if(propagated){ factMergeHandler.merge(sourceFact, retEdge.incFact);factMergeHandler.merge(sourceFact,retEdge.incFact); } } else {else{ propagated=true;propagated=true; sourceFact = retEdge.incFact;sourceFact=retEdge.incFact; analyzer.scheduleEdgeTo(new WrappedFactAtStatement<Field, Fact, Stmt, Method>(returnSite, analyzer.scheduleEdgeTo(newWrappedFactAtStatement<Field,Fact,Stmt,Method>(returnSite, new WrappedFact<Field, Fact, Stmt, Method>(retEdge.incFact, new AccessPath<Field>(), this)));newWrappedFact<Field,Fact,Stmt,Method>(retEdge.incFact,newAccessPath<Field>(),this))); }} @Override@Override protected ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> createNestedResolver(AccessPath<Field> newAccPath) {protectedResolverTemplate<Field,Fact,Stmt,Method,ReturnEdge<Field,Fact,Stmt,Method>>createNestedResolver(AccessPath<Field>newAccPath){ return new ReturnSiteResolver<Field, Fact, Stmt, Method>(analyzer, returnSite, newAccPath, this);returnnewReturnSiteResolver<Field,Fact,Stmt,Method>(analyzer,returnSite,newAccPath,this); return new ReturnSiteResolver<Field, Fact, Stmt, Method>(factMergeHandler, analyzer, returnSite, sourceFact, newAccPath, this);returnnewReturnSiteResolver<Field,Fact,Stmt,Method>(factMergeHandlerfactMergeHandler,, analyzer,returnSite,sourceFactsourceFact,, newAccPath,this); }}  public Stmt getReturnSite() {publicStmtgetReturnSite(){








test/heros/fieldsens/ControlFlowJoinResolverTest.java








View file @ e4ca369d






......@@ -64,7 +64,7 @@ public class ControlFlowJoinResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 joinStmt = new Statement("joinStmt");










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(analyzer, joinStmt);










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt);










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......












test/heros/fieldsens/ControlFlowJoinResolverTest.java








View file @ e4ca369d








test/heros/fieldsens/ControlFlowJoinResolverTest.java










View file @ e4ca369d


e4ca369d



......@@ -64,7 +64,7 @@ public class ControlFlowJoinResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 joinStmt = new Statement("joinStmt");










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(analyzer, joinStmt);










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt);










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......






......@@ -64,7 +64,7 @@ public class ControlFlowJoinResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 joinStmt = new Statement("joinStmt");










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(analyzer, joinStmt);










 sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt);










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......


 public void before() {publicvoidbefore(){ analyzer = mock(PerAccessPathMethodAnalyzer.class);analyzer=mock(PerAccessPathMethodAnalyzer.class); joinStmt = new Statement("joinStmt");joinStmt=newStatement("joinStmt"); sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(analyzer, joinStmt);sut=newControlFlowJoinResolver<String,TestFact,Statement,TestMethod>(analyzer,joinStmt); sut = new ControlFlowJoinResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, joinStmt);sut=newControlFlowJoinResolver<String,TestFact,Statement,TestMethod>(mockmock((FactMergeHandlerFactMergeHandler..classclass),), analyzer,joinStmt); fact = new TestFact("value");fact=newTestFact("value"); callback = mock(InterestCallback.class);callback=mock(InterestCallback.class); callEdgeResolver = mock(CallEdgeResolver.class);callEdgeResolver=mock(CallEdgeResolver.class);








test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ e4ca369d






......@@ -68,7 +68,7 @@ public class ReturnSiteResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 returnSite = new Statement("returnSite");










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(analyzer, returnSite);










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite);










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......












test/heros/fieldsens/ReturnSiteResolverTest.java








View file @ e4ca369d








test/heros/fieldsens/ReturnSiteResolverTest.java










View file @ e4ca369d


e4ca369d



......@@ -68,7 +68,7 @@ public class ReturnSiteResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 returnSite = new Statement("returnSite");










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(analyzer, returnSite);










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite);










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......






......@@ -68,7 +68,7 @@ public class ReturnSiteResolverTest {









 public void before() {










 analyzer = mock(PerAccessPathMethodAnalyzer.class);










 returnSite = new Statement("returnSite");










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(analyzer, returnSite);










 sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite);










 fact = new TestFact("value");










 callback = mock(InterestCallback.class);










 callEdgeResolver = mock(CallEdgeResolver.class);



......


 public void before() {publicvoidbefore(){ analyzer = mock(PerAccessPathMethodAnalyzer.class);analyzer=mock(PerAccessPathMethodAnalyzer.class); returnSite = new Statement("returnSite");returnSite=newStatement("returnSite"); sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(analyzer, returnSite);sut=newReturnSiteResolver<String,TestFact,Statement,TestMethod>(analyzer,returnSite); sut = new ReturnSiteResolver<String, TestFact, Statement, TestMethod>(mock(FactMergeHandler.class), analyzer, returnSite);sut=newReturnSiteResolver<String,TestFact,Statement,TestMethod>(mockmock((FactMergeHandlerFactMergeHandler..classclass),), analyzer,returnSite); fact = new TestFact("value");fact=newTestFact("value"); callback = mock(InterestCallback.class);callback=mock(InterestCallback.class); callEdgeResolver = mock(CallEdgeResolver.class);callEdgeResolver=mock(CallEdgeResolver.class);









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






