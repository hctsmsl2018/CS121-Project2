



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

edf48ee6















Commit
edf48ee6


authored
Jan 22, 2015
by


Johannes Lerch



Browse files




Split prefix check into potential and guaranteed prefix







parent
e464b807













Changes
5




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPath.java








View file @ edf48ee6






......@@ -16,6 +16,7 @@ import java.util.Set;




















import com.google.common.base.Function;










import com.google.common.base.Joiner;










import com.google.common.collect.Collections2;










import com.google.common.collect.Sets;





















@SuppressWarnings("unchecked")



......@@ -30,7 +31,7 @@ public class AccessPath<FieldRef> {









 }










 










 AccessPath(FieldRef[] accesses, Set<FieldRef>[] exclusions) {










 int k = 3;










 int k = 2;










 if(accesses.length > k) {










 this.accesses = Arrays.copyOf(accesses, k);










 this.exclusions = new Set[0];



......@@ -100,35 +101,54 @@ public class AccessPath<FieldRef> {









 newExclusionsArray[exclusions.length] = Sets.newHashSet(fieldReferences);










 return new AccessPath<>(accesses, newExclusionsArray);










 }





















 public static enum PrefixTestResult {










 GUARANTEED_PREFIX(2), POTENTIAL_PREFIX(1), NO_PREFIX(0);










 










 private int value;





















 private PrefixTestResult(int value) {










 this.value = value;










 }










 










 public boolean atLeast(PrefixTestResult minimum) {










 return value >= minimum.value;










 }










 }










 










 public boolean isPrefixOf(AccessPath<FieldRef> accessPath) {










 public PrefixTestResult isPrefixOf(AccessPath<FieldRef> accessPath) {










 if(accesses.length > accessPath.accesses.length)










 return false;










 return PrefixTestResult.NO_PREFIX;










 










 if(accesses.length + exclusions.length > accessPath.accesses.length + accessPath.exclusions.length)










 return false;










 return PrefixTestResult.NO_PREFIX;










 










 for(int i=0; i<accesses.length; i++) {










 if(!accesses[i].equals(accessPath.accesses[i]))










 return false;










 return PrefixTestResult.NO_PREFIX;










 }










 










 PrefixTestResult result = PrefixTestResult.GUARANTEED_PREFIX;










 for(int i=0; i<exclusions.length; i++) {










 if(i+accesses.length < accessPath.accesses.length) {










 if(exclusions[i].contains(accessPath.accesses[i+accesses.length]))










 return false;










 return PrefixTestResult.NO_PREFIX;










 }










 else {










 if(!exclusions[i].containsAll(accessPath.exclusions[i+accesses.length - accessPath.accesses.length]))










 return false;










 if(!accessPath.exclusions[i+accesses.length - accessPath.accesses.length].containsAll(exclusions[i])) {










 if(Sets.intersection(exclusions[i], accessPath.exclusions[i+accesses.length - accessPath.accesses.length]).isEmpty())










 result = PrefixTestResult.POTENTIAL_PREFIX;










 else










 return PrefixTestResult.NO_PREFIX;










 }










 }










 }










 










 return true;










 return result;










 }










 










 public FieldRef[] getDeltaTo(AccessPath<FieldRef> accPath) {










 if(isPrefixOf(accPath))










 if(isPrefixOf(accPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX))










 return Arrays.copyOfRange(accPath.accesses, accesses.length, accPath.accesses.length);










 else










 throw new IllegalArgumentException("Given AccessPath must be a prefix of the current AccessPath");



......@@ -215,4 +235,11 @@ public class AccessPath<FieldRef> {









 return new AccessPath<FieldRef>(accesses, newExclusionsArray);










 }










 }





















 public FieldRef getFirstAccess() {










 if(accesses.length > 0)










 return accesses[0];










 else 










 return null;










 }










}














src/heros/alias/AccessPathUtil.java








View file @ edf48ee6






......@@ -10,23 +10,26 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.AccessPath.PrefixTestResult;





















import com.google.common.base.Optional;
































public class AccessPathUtil {





















 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> boolean isPrefixOf(D prefixCandidate, D fact) {










 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> PrefixTestResult isPrefixOf(D prefixCandidate, D fact) {










 if(prefixCandidate.getBaseValue() == null) {










 if(fact.getBaseValue() != null)










 return false;










 return PrefixTestResult.NO_PREFIX;










 } else if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))










 return false;










 return PrefixTestResult.NO_PREFIX;










 










 return prefixCandidate.getAccessPath().isPrefixOf(fact.getAccessPath());










 }










 










 










 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> Optional<D> applyAbstractedSummary(D sourceFact, SummaryEdge<D, ?> summary) {










 if(!isPrefixOf(summary.getSourceFact(), sourceFact))










 if(!isPrefixOf(summary.getSourceFact(), sourceFact).atLeast(PrefixTestResult.GUARANTEED_PREFIX))










 throw new IllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'", summary, sourceFact));










 










 AccessPath<FieldRef> concreteAccessPath = sourceFact.getAccessPath();



......














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ edf48ee6






......@@ -14,6 +14,7 @@ import heros.DontSynchronize;









import heros.FlowFunctionCache;










import heros.InterproceduralCFG;










import heros.SynchronizedBy;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.solver.CountingThreadPoolExecutor;



......@@ -262,21 +263,19 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //because we have observed a potentially new incoming edge into <sP,d3>










 if (endSumm != null)










 for(SummaryEdge<D, N> summary: endSumm) {










 if(AccessPathUtil.isPrefixOf(summary.getSourceFact(), d3.getFact())) {










 Optional<D> d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 if(d4.isPresent()) {










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(ConstrainedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }










 Optional<D> d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 if(d4.isPresent()) {










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(ConstrainedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }










 }










 } 










 }










 }










 }










 }



......@@ -294,7 +293,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 ConcurrentHashSet<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 for(PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint)) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(edges.remove(edge)) {










 logger.trace("RESUME-EDGE: {}", edge);










 propagate(edge, edge instanceof ConcretizationPathEdge ? edge.getTarget() : null, false);



......@@ -308,7 +307,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 Set<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 for(final PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource())) {










 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}", edge, incomingEdge);










 










 Constraint<FieldRef> constraint = new DeltaConstraint<FieldRef>(incomingEdge.getCalleeSourceFact().getAccessPath(), edge.factAtSource().getAccessPath());



......@@ -383,7 +382,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 // compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);










 










 if(AccessPathUtil.isPrefixOf(d1, incomingEdge.getCalleeSourceFact())) {










 if(AccessPathUtil.isPrefixOf(d1, incomingEdge.getCalleeSourceFact()) == PrefixTestResult.GUARANTEED_PREFIX) {










 Optional<D> concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);










 if(concreteCalleeExitFact.isPresent()) {










 Set<ConstrainedFact<FieldRef, D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact.get(), callSite);



......@@ -480,12 +479,12 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagate = false;










 else {










 Set<N> callSitesWithInterest = Sets.newHashSet();










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixedWith(calleeMethod, pathEdge.factAtSource())) {










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixedWith(calleeMethod, pathEdge.factAtSource())) { //guaranteed










 callSitesWithInterest.add(incEdge.getCallSite());










 }










 propagate = !callSitesWithInterest.isEmpty();










 










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixesOf(calleeMethod, pathEdge.factAtSource())) {










 for(IncomingEdge<D, N> incEdge : incomingEdgesPotentialPrefixesOf(calleeMethod, pathEdge.factAtSource())) { //potential










 if(visited.containsKey(incEdge.getCallSite())) {










 if(visited.get(incEdge.getCallSite()) != null)










 propagate |= visited.get(incEdge.getCallSite());



......@@ -522,7 +521,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 ConcurrentHashSet<PathEdge<N, D>> pe = pausedEdges.get(calleeMethod);










 if(pe != null) {










 for(PathEdge<N, D> edge : pe) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), pathEdge.factAtSource()))










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), pathEdge.factAtSource()) == PrefixTestResult.GUARANTEED_PREFIX)










 return true;










 }










 }



......@@ -613,7 +612,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return Sets.filter(map, new Predicate<SummaryEdge<D,N>>() {










 @Override










 public boolean apply(SummaryEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3) || AccessPathUtil.isPrefixOf(d3, edge.getSourceFact());










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3) == PrefixTestResult.GUARANTEED_PREFIX;










 }










 });










 }



......@@ -637,17 +636,17 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return Sets.filter(result, new Predicate<IncomingEdge<D,N>>() {










 @Override










 public boolean apply(IncomingEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(fact, edge.getCalleeSourceFact());










 return AccessPathUtil.isPrefixOf(fact, edge.getCalleeSourceFact()) == PrefixTestResult.GUARANTEED_PREFIX;










 }










 });










 }










 










 protected Set<IncomingEdge<D, N>> incomingEdgesPrefixesOf(M m, final D fact) {










 protected Set<IncomingEdge<D, N>> incomingEdgesPotentialPrefixesOf(M m, final D fact) {










 Set<IncomingEdge<D, N>> result = incoming(m);










 return Sets.filter(result, new Predicate<IncomingEdge<D,N>>() {










 @Override










 public boolean apply(IncomingEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(edge.getCalleeSourceFact(), fact);










 return AccessPathUtil.isPrefixOf(edge.getCalleeSourceFact(), fact).atLeast(PrefixTestResult.POTENTIAL_PREFIX);










 }










 });










 }



......














test/heros/alias/AccessPathUtilTest.java








View file @ edf48ee6






......@@ -10,81 +10,83 @@









 ******************************************************************************/










package heros.alias;





















import static heros.alias.AccessPath.PrefixTestResult.*;










import static heros.alias.AccessPathUtil.applyAbstractedSummary;










import static heros.alias.AccessPathUtil.isPrefixOf;










import static org.junit.Assert.assertEquals;










import static org.junit.Assert.assertFalse;










import static org.junit.Assert.assertNull;










import static org.junit.Assert.assertTrue;










import heros.alias.AccessPath.PrefixTestResult;





















import org.junit.Assert;










import org.junit.Test;





















public class AccessPathUtilTest {





















 @Test










 public void testBaseValuePrefixOfFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a"), new Fact("a.f")));










 assertFalse(isPrefixOf(new Fact("a.f"), new Fact("a")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a"), new Fact("a.f")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a")));










 }










 










 @Test










 public void testBaseValueIdentity() {










 assertTrue(isPrefixOf(new Fact("a"), new Fact("a")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a"), new Fact("a")));










 }










 










 @Test










 public void testFieldAccessPrefixOfFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a.b"), new Fact("a.b.c")));










 assertFalse(isPrefixOf(new Fact("a.b.c"), new Fact("a.b")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.b"), new Fact("a.b.c")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.b.c"), new Fact("a.b")));










 }










 










 @Test










 public void testPrefixOfFieldAccessWithExclusion() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a.g")));










 assertFalse(isPrefixOf(new Fact("a.g"), new Fact("a^f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.g"), new Fact("a^f")));










 }










 










 @Test










 public void testIdentityWithExclusion() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a^f")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f,g")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a^f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f,g"), new Fact("a^f,g")));










 }










 










 @Test










 public void testDifferentExclusions() {










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^g")));










 assertEquals(POTENTIAL_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a^g")));










 assertEquals(POTENTIAL_PREFIX, isPrefixOf(new Fact("a^f^f,g"), new Fact("a^g^f,g")));










 assertEquals(POTENTIAL_PREFIX, isPrefixOf(new Fact("a^f^f"), new Fact("a^f^g")));










 }










 










 @Test










 public void testMixedFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a.g.g")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a.f.h")));










 assertTrue(isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.g.g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.f.h")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 }










 










 @Test










 public void testMultipleExclusions() {










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^g")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f,g"), new Fact("a^g")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 }





















 @Test










 public void testDifferentAccessPathLength() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a.g.h")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.g.h")));










 }










 










 @Test










 public void testExclusionRequiresFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a"), new Fact("a^f")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a"), new Fact("a^f")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a")));










 










 assertTrue(isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 assertFalse(isPrefixOf(new Fact("a.f^g"), new Fact("a.f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.f^g"), new Fact("a.f")));










 










 assertTrue(isPrefixOf(new Fact("a.f"), new Fact("a.f^g^h")));










 assertFalse(isPrefixOf(new Fact("a.f^g^h"), new Fact("a.f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a.f^g^h")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.f^g^h"), new Fact("a.f")));










 }










 










 @Test



......














test/heros/alias/FieldSensitiveIFDSSolverTest.java








View file @ edf48ee6






......@@ -601,4 +601,24 @@ public class FieldSensitiveIFDSSolverTest {









 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void multipleExclusions() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1^h")),










 callSite("b").calls("bar", flow("1^h", "2^h")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("2", writeField("f"), "3^f")),










 callSite("d").calls("xyz", flow("3^f", "4^f")));










 










 helper.method("xyz", 










 startPoints("e"),










 normalStmt("e").succ("f", flow("4", writeField("g"), "5^g")),










 normalStmt("f").succ("g", kill("5^g")));










 










 helper.runSolver(false, "a");










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

edf48ee6















Commit
edf48ee6


authored
Jan 22, 2015
by


Johannes Lerch



Browse files




Split prefix check into potential and guaranteed prefix







parent
e464b807













Changes
5




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPath.java








View file @ edf48ee6






......@@ -16,6 +16,7 @@ import java.util.Set;




















import com.google.common.base.Function;










import com.google.common.base.Joiner;










import com.google.common.collect.Collections2;










import com.google.common.collect.Sets;





















@SuppressWarnings("unchecked")



......@@ -30,7 +31,7 @@ public class AccessPath<FieldRef> {









 }










 










 AccessPath(FieldRef[] accesses, Set<FieldRef>[] exclusions) {










 int k = 3;










 int k = 2;










 if(accesses.length > k) {










 this.accesses = Arrays.copyOf(accesses, k);










 this.exclusions = new Set[0];



......@@ -100,35 +101,54 @@ public class AccessPath<FieldRef> {









 newExclusionsArray[exclusions.length] = Sets.newHashSet(fieldReferences);










 return new AccessPath<>(accesses, newExclusionsArray);










 }





















 public static enum PrefixTestResult {










 GUARANTEED_PREFIX(2), POTENTIAL_PREFIX(1), NO_PREFIX(0);










 










 private int value;





















 private PrefixTestResult(int value) {










 this.value = value;










 }










 










 public boolean atLeast(PrefixTestResult minimum) {










 return value >= minimum.value;










 }










 }










 










 public boolean isPrefixOf(AccessPath<FieldRef> accessPath) {










 public PrefixTestResult isPrefixOf(AccessPath<FieldRef> accessPath) {










 if(accesses.length > accessPath.accesses.length)










 return false;










 return PrefixTestResult.NO_PREFIX;










 










 if(accesses.length + exclusions.length > accessPath.accesses.length + accessPath.exclusions.length)










 return false;










 return PrefixTestResult.NO_PREFIX;










 










 for(int i=0; i<accesses.length; i++) {










 if(!accesses[i].equals(accessPath.accesses[i]))










 return false;










 return PrefixTestResult.NO_PREFIX;










 }










 










 PrefixTestResult result = PrefixTestResult.GUARANTEED_PREFIX;










 for(int i=0; i<exclusions.length; i++) {










 if(i+accesses.length < accessPath.accesses.length) {










 if(exclusions[i].contains(accessPath.accesses[i+accesses.length]))










 return false;










 return PrefixTestResult.NO_PREFIX;










 }










 else {










 if(!exclusions[i].containsAll(accessPath.exclusions[i+accesses.length - accessPath.accesses.length]))










 return false;










 if(!accessPath.exclusions[i+accesses.length - accessPath.accesses.length].containsAll(exclusions[i])) {










 if(Sets.intersection(exclusions[i], accessPath.exclusions[i+accesses.length - accessPath.accesses.length]).isEmpty())










 result = PrefixTestResult.POTENTIAL_PREFIX;










 else










 return PrefixTestResult.NO_PREFIX;










 }










 }










 }










 










 return true;










 return result;










 }










 










 public FieldRef[] getDeltaTo(AccessPath<FieldRef> accPath) {










 if(isPrefixOf(accPath))










 if(isPrefixOf(accPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX))










 return Arrays.copyOfRange(accPath.accesses, accesses.length, accPath.accesses.length);










 else










 throw new IllegalArgumentException("Given AccessPath must be a prefix of the current AccessPath");



......@@ -215,4 +235,11 @@ public class AccessPath<FieldRef> {









 return new AccessPath<FieldRef>(accesses, newExclusionsArray);










 }










 }





















 public FieldRef getFirstAccess() {










 if(accesses.length > 0)










 return accesses[0];










 else 










 return null;










 }










}














src/heros/alias/AccessPathUtil.java








View file @ edf48ee6






......@@ -10,23 +10,26 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.AccessPath.PrefixTestResult;





















import com.google.common.base.Optional;
































public class AccessPathUtil {





















 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> boolean isPrefixOf(D prefixCandidate, D fact) {










 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> PrefixTestResult isPrefixOf(D prefixCandidate, D fact) {










 if(prefixCandidate.getBaseValue() == null) {










 if(fact.getBaseValue() != null)










 return false;










 return PrefixTestResult.NO_PREFIX;










 } else if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))










 return false;










 return PrefixTestResult.NO_PREFIX;










 










 return prefixCandidate.getAccessPath().isPrefixOf(fact.getAccessPath());










 }










 










 










 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> Optional<D> applyAbstractedSummary(D sourceFact, SummaryEdge<D, ?> summary) {










 if(!isPrefixOf(summary.getSourceFact(), sourceFact))










 if(!isPrefixOf(summary.getSourceFact(), sourceFact).atLeast(PrefixTestResult.GUARANTEED_PREFIX))










 throw new IllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'", summary, sourceFact));










 










 AccessPath<FieldRef> concreteAccessPath = sourceFact.getAccessPath();



......














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ edf48ee6






......@@ -14,6 +14,7 @@ import heros.DontSynchronize;









import heros.FlowFunctionCache;










import heros.InterproceduralCFG;










import heros.SynchronizedBy;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.solver.CountingThreadPoolExecutor;



......@@ -262,21 +263,19 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //because we have observed a potentially new incoming edge into <sP,d3>










 if (endSumm != null)










 for(SummaryEdge<D, N> summary: endSumm) {










 if(AccessPathUtil.isPrefixOf(summary.getSourceFact(), d3.getFact())) {










 Optional<D> d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 if(d4.isPresent()) {










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(ConstrainedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }










 Optional<D> d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 if(d4.isPresent()) {










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(ConstrainedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }










 }










 } 










 }










 }










 }










 }



......@@ -294,7 +293,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 ConcurrentHashSet<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 for(PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint)) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(edges.remove(edge)) {










 logger.trace("RESUME-EDGE: {}", edge);










 propagate(edge, edge instanceof ConcretizationPathEdge ? edge.getTarget() : null, false);



......@@ -308,7 +307,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 Set<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 for(final PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource())) {










 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}", edge, incomingEdge);










 










 Constraint<FieldRef> constraint = new DeltaConstraint<FieldRef>(incomingEdge.getCalleeSourceFact().getAccessPath(), edge.factAtSource().getAccessPath());



......@@ -383,7 +382,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 // compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);










 










 if(AccessPathUtil.isPrefixOf(d1, incomingEdge.getCalleeSourceFact())) {










 if(AccessPathUtil.isPrefixOf(d1, incomingEdge.getCalleeSourceFact()) == PrefixTestResult.GUARANTEED_PREFIX) {










 Optional<D> concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);










 if(concreteCalleeExitFact.isPresent()) {










 Set<ConstrainedFact<FieldRef, D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact.get(), callSite);



......@@ -480,12 +479,12 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagate = false;










 else {










 Set<N> callSitesWithInterest = Sets.newHashSet();










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixedWith(calleeMethod, pathEdge.factAtSource())) {










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixedWith(calleeMethod, pathEdge.factAtSource())) { //guaranteed










 callSitesWithInterest.add(incEdge.getCallSite());










 }










 propagate = !callSitesWithInterest.isEmpty();










 










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixesOf(calleeMethod, pathEdge.factAtSource())) {










 for(IncomingEdge<D, N> incEdge : incomingEdgesPotentialPrefixesOf(calleeMethod, pathEdge.factAtSource())) { //potential










 if(visited.containsKey(incEdge.getCallSite())) {










 if(visited.get(incEdge.getCallSite()) != null)










 propagate |= visited.get(incEdge.getCallSite());



......@@ -522,7 +521,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 ConcurrentHashSet<PathEdge<N, D>> pe = pausedEdges.get(calleeMethod);










 if(pe != null) {










 for(PathEdge<N, D> edge : pe) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), pathEdge.factAtSource()))










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), pathEdge.factAtSource()) == PrefixTestResult.GUARANTEED_PREFIX)










 return true;










 }










 }



......@@ -613,7 +612,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return Sets.filter(map, new Predicate<SummaryEdge<D,N>>() {










 @Override










 public boolean apply(SummaryEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3) || AccessPathUtil.isPrefixOf(d3, edge.getSourceFact());










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3) == PrefixTestResult.GUARANTEED_PREFIX;










 }










 });










 }



......@@ -637,17 +636,17 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return Sets.filter(result, new Predicate<IncomingEdge<D,N>>() {










 @Override










 public boolean apply(IncomingEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(fact, edge.getCalleeSourceFact());










 return AccessPathUtil.isPrefixOf(fact, edge.getCalleeSourceFact()) == PrefixTestResult.GUARANTEED_PREFIX;










 }










 });










 }










 










 protected Set<IncomingEdge<D, N>> incomingEdgesPrefixesOf(M m, final D fact) {










 protected Set<IncomingEdge<D, N>> incomingEdgesPotentialPrefixesOf(M m, final D fact) {










 Set<IncomingEdge<D, N>> result = incoming(m);










 return Sets.filter(result, new Predicate<IncomingEdge<D,N>>() {










 @Override










 public boolean apply(IncomingEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(edge.getCalleeSourceFact(), fact);










 return AccessPathUtil.isPrefixOf(edge.getCalleeSourceFact(), fact).atLeast(PrefixTestResult.POTENTIAL_PREFIX);










 }










 });










 }



......














test/heros/alias/AccessPathUtilTest.java








View file @ edf48ee6






......@@ -10,81 +10,83 @@









 ******************************************************************************/










package heros.alias;





















import static heros.alias.AccessPath.PrefixTestResult.*;










import static heros.alias.AccessPathUtil.applyAbstractedSummary;










import static heros.alias.AccessPathUtil.isPrefixOf;










import static org.junit.Assert.assertEquals;










import static org.junit.Assert.assertFalse;










import static org.junit.Assert.assertNull;










import static org.junit.Assert.assertTrue;










import heros.alias.AccessPath.PrefixTestResult;





















import org.junit.Assert;










import org.junit.Test;





















public class AccessPathUtilTest {





















 @Test










 public void testBaseValuePrefixOfFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a"), new Fact("a.f")));










 assertFalse(isPrefixOf(new Fact("a.f"), new Fact("a")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a"), new Fact("a.f")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a")));










 }










 










 @Test










 public void testBaseValueIdentity() {










 assertTrue(isPrefixOf(new Fact("a"), new Fact("a")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a"), new Fact("a")));










 }










 










 @Test










 public void testFieldAccessPrefixOfFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a.b"), new Fact("a.b.c")));










 assertFalse(isPrefixOf(new Fact("a.b.c"), new Fact("a.b")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.b"), new Fact("a.b.c")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.b.c"), new Fact("a.b")));










 }










 










 @Test










 public void testPrefixOfFieldAccessWithExclusion() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a.g")));










 assertFalse(isPrefixOf(new Fact("a.g"), new Fact("a^f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.g"), new Fact("a^f")));










 }










 










 @Test










 public void testIdentityWithExclusion() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a^f")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f,g")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a^f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f,g"), new Fact("a^f,g")));










 }










 










 @Test










 public void testDifferentExclusions() {










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^g")));










 assertEquals(POTENTIAL_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a^g")));










 assertEquals(POTENTIAL_PREFIX, isPrefixOf(new Fact("a^f^f,g"), new Fact("a^g^f,g")));










 assertEquals(POTENTIAL_PREFIX, isPrefixOf(new Fact("a^f^f"), new Fact("a^f^g")));










 }










 










 @Test










 public void testMixedFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a.g.g")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a.f.h")));










 assertTrue(isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.g.g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.f.h")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 }










 










 @Test










 public void testMultipleExclusions() {










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^g")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f,g"), new Fact("a^g")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 }





















 @Test










 public void testDifferentAccessPathLength() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a.g.h")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.g.h")));










 }










 










 @Test










 public void testExclusionRequiresFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a"), new Fact("a^f")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a"), new Fact("a^f")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a")));










 










 assertTrue(isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 assertFalse(isPrefixOf(new Fact("a.f^g"), new Fact("a.f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.f^g"), new Fact("a.f")));










 










 assertTrue(isPrefixOf(new Fact("a.f"), new Fact("a.f^g^h")));










 assertFalse(isPrefixOf(new Fact("a.f^g^h"), new Fact("a.f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a.f^g^h")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.f^g^h"), new Fact("a.f")));










 }










 










 @Test



......














test/heros/alias/FieldSensitiveIFDSSolverTest.java








View file @ edf48ee6






......@@ -601,4 +601,24 @@ public class FieldSensitiveIFDSSolverTest {









 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void multipleExclusions() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1^h")),










 callSite("b").calls("bar", flow("1^h", "2^h")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("2", writeField("f"), "3^f")),










 callSite("d").calls("xyz", flow("3^f", "4^f")));










 










 helper.method("xyz", 










 startPoints("e"),










 normalStmt("e").succ("f", flow("4", writeField("g"), "5^g")),










 normalStmt("f").succ("g", kill("5^g")));










 










 helper.runSolver(false, "a");










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

edf48ee6







Open sidebar



Joshua Garcia heros
Commits

edf48ee6




Open sidebar

Joshua Garcia heros
Commits

edf48ee6


Joshua GarciaherosherosCommits
edf48ee6








Commit
edf48ee6


authored
Jan 22, 2015
by


Johannes Lerch



Browse files




Split prefix check into potential and guaranteed prefix







parent
e464b807













Changes
5




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPath.java








View file @ edf48ee6






......@@ -16,6 +16,7 @@ import java.util.Set;




















import com.google.common.base.Function;










import com.google.common.base.Joiner;










import com.google.common.collect.Collections2;










import com.google.common.collect.Sets;





















@SuppressWarnings("unchecked")



......@@ -30,7 +31,7 @@ public class AccessPath<FieldRef> {









 }










 










 AccessPath(FieldRef[] accesses, Set<FieldRef>[] exclusions) {










 int k = 3;










 int k = 2;










 if(accesses.length > k) {










 this.accesses = Arrays.copyOf(accesses, k);










 this.exclusions = new Set[0];



......@@ -100,35 +101,54 @@ public class AccessPath<FieldRef> {









 newExclusionsArray[exclusions.length] = Sets.newHashSet(fieldReferences);










 return new AccessPath<>(accesses, newExclusionsArray);










 }





















 public static enum PrefixTestResult {










 GUARANTEED_PREFIX(2), POTENTIAL_PREFIX(1), NO_PREFIX(0);










 










 private int value;





















 private PrefixTestResult(int value) {










 this.value = value;










 }










 










 public boolean atLeast(PrefixTestResult minimum) {










 return value >= minimum.value;










 }










 }










 










 public boolean isPrefixOf(AccessPath<FieldRef> accessPath) {










 public PrefixTestResult isPrefixOf(AccessPath<FieldRef> accessPath) {










 if(accesses.length > accessPath.accesses.length)










 return false;










 return PrefixTestResult.NO_PREFIX;










 










 if(accesses.length + exclusions.length > accessPath.accesses.length + accessPath.exclusions.length)










 return false;










 return PrefixTestResult.NO_PREFIX;










 










 for(int i=0; i<accesses.length; i++) {










 if(!accesses[i].equals(accessPath.accesses[i]))










 return false;










 return PrefixTestResult.NO_PREFIX;










 }










 










 PrefixTestResult result = PrefixTestResult.GUARANTEED_PREFIX;










 for(int i=0; i<exclusions.length; i++) {










 if(i+accesses.length < accessPath.accesses.length) {










 if(exclusions[i].contains(accessPath.accesses[i+accesses.length]))










 return false;










 return PrefixTestResult.NO_PREFIX;










 }










 else {










 if(!exclusions[i].containsAll(accessPath.exclusions[i+accesses.length - accessPath.accesses.length]))










 return false;










 if(!accessPath.exclusions[i+accesses.length - accessPath.accesses.length].containsAll(exclusions[i])) {










 if(Sets.intersection(exclusions[i], accessPath.exclusions[i+accesses.length - accessPath.accesses.length]).isEmpty())










 result = PrefixTestResult.POTENTIAL_PREFIX;










 else










 return PrefixTestResult.NO_PREFIX;










 }










 }










 }










 










 return true;










 return result;










 }










 










 public FieldRef[] getDeltaTo(AccessPath<FieldRef> accPath) {










 if(isPrefixOf(accPath))










 if(isPrefixOf(accPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX))










 return Arrays.copyOfRange(accPath.accesses, accesses.length, accPath.accesses.length);










 else










 throw new IllegalArgumentException("Given AccessPath must be a prefix of the current AccessPath");



......@@ -215,4 +235,11 @@ public class AccessPath<FieldRef> {









 return new AccessPath<FieldRef>(accesses, newExclusionsArray);










 }










 }





















 public FieldRef getFirstAccess() {










 if(accesses.length > 0)










 return accesses[0];










 else 










 return null;










 }










}














src/heros/alias/AccessPathUtil.java








View file @ edf48ee6






......@@ -10,23 +10,26 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.AccessPath.PrefixTestResult;





















import com.google.common.base.Optional;
































public class AccessPathUtil {





















 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> boolean isPrefixOf(D prefixCandidate, D fact) {










 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> PrefixTestResult isPrefixOf(D prefixCandidate, D fact) {










 if(prefixCandidate.getBaseValue() == null) {










 if(fact.getBaseValue() != null)










 return false;










 return PrefixTestResult.NO_PREFIX;










 } else if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))










 return false;










 return PrefixTestResult.NO_PREFIX;










 










 return prefixCandidate.getAccessPath().isPrefixOf(fact.getAccessPath());










 }










 










 










 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> Optional<D> applyAbstractedSummary(D sourceFact, SummaryEdge<D, ?> summary) {










 if(!isPrefixOf(summary.getSourceFact(), sourceFact))










 if(!isPrefixOf(summary.getSourceFact(), sourceFact).atLeast(PrefixTestResult.GUARANTEED_PREFIX))










 throw new IllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'", summary, sourceFact));










 










 AccessPath<FieldRef> concreteAccessPath = sourceFact.getAccessPath();



......














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ edf48ee6






......@@ -14,6 +14,7 @@ import heros.DontSynchronize;









import heros.FlowFunctionCache;










import heros.InterproceduralCFG;










import heros.SynchronizedBy;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.solver.CountingThreadPoolExecutor;



......@@ -262,21 +263,19 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //because we have observed a potentially new incoming edge into <sP,d3>










 if (endSumm != null)










 for(SummaryEdge<D, N> summary: endSumm) {










 if(AccessPathUtil.isPrefixOf(summary.getSourceFact(), d3.getFact())) {










 Optional<D> d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 if(d4.isPresent()) {










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(ConstrainedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }










 Optional<D> d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 if(d4.isPresent()) {










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(ConstrainedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }










 }










 } 










 }










 }










 }










 }



......@@ -294,7 +293,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 ConcurrentHashSet<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 for(PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint)) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(edges.remove(edge)) {










 logger.trace("RESUME-EDGE: {}", edge);










 propagate(edge, edge instanceof ConcretizationPathEdge ? edge.getTarget() : null, false);



......@@ -308,7 +307,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 Set<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 for(final PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource())) {










 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}", edge, incomingEdge);










 










 Constraint<FieldRef> constraint = new DeltaConstraint<FieldRef>(incomingEdge.getCalleeSourceFact().getAccessPath(), edge.factAtSource().getAccessPath());



......@@ -383,7 +382,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 // compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);










 










 if(AccessPathUtil.isPrefixOf(d1, incomingEdge.getCalleeSourceFact())) {










 if(AccessPathUtil.isPrefixOf(d1, incomingEdge.getCalleeSourceFact()) == PrefixTestResult.GUARANTEED_PREFIX) {










 Optional<D> concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);










 if(concreteCalleeExitFact.isPresent()) {










 Set<ConstrainedFact<FieldRef, D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact.get(), callSite);



......@@ -480,12 +479,12 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagate = false;










 else {










 Set<N> callSitesWithInterest = Sets.newHashSet();










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixedWith(calleeMethod, pathEdge.factAtSource())) {










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixedWith(calleeMethod, pathEdge.factAtSource())) { //guaranteed










 callSitesWithInterest.add(incEdge.getCallSite());










 }










 propagate = !callSitesWithInterest.isEmpty();










 










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixesOf(calleeMethod, pathEdge.factAtSource())) {










 for(IncomingEdge<D, N> incEdge : incomingEdgesPotentialPrefixesOf(calleeMethod, pathEdge.factAtSource())) { //potential










 if(visited.containsKey(incEdge.getCallSite())) {










 if(visited.get(incEdge.getCallSite()) != null)










 propagate |= visited.get(incEdge.getCallSite());



......@@ -522,7 +521,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 ConcurrentHashSet<PathEdge<N, D>> pe = pausedEdges.get(calleeMethod);










 if(pe != null) {










 for(PathEdge<N, D> edge : pe) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), pathEdge.factAtSource()))










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), pathEdge.factAtSource()) == PrefixTestResult.GUARANTEED_PREFIX)










 return true;










 }










 }



......@@ -613,7 +612,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return Sets.filter(map, new Predicate<SummaryEdge<D,N>>() {










 @Override










 public boolean apply(SummaryEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3) || AccessPathUtil.isPrefixOf(d3, edge.getSourceFact());










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3) == PrefixTestResult.GUARANTEED_PREFIX;










 }










 });










 }



......@@ -637,17 +636,17 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return Sets.filter(result, new Predicate<IncomingEdge<D,N>>() {










 @Override










 public boolean apply(IncomingEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(fact, edge.getCalleeSourceFact());










 return AccessPathUtil.isPrefixOf(fact, edge.getCalleeSourceFact()) == PrefixTestResult.GUARANTEED_PREFIX;










 }










 });










 }










 










 protected Set<IncomingEdge<D, N>> incomingEdgesPrefixesOf(M m, final D fact) {










 protected Set<IncomingEdge<D, N>> incomingEdgesPotentialPrefixesOf(M m, final D fact) {










 Set<IncomingEdge<D, N>> result = incoming(m);










 return Sets.filter(result, new Predicate<IncomingEdge<D,N>>() {










 @Override










 public boolean apply(IncomingEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(edge.getCalleeSourceFact(), fact);










 return AccessPathUtil.isPrefixOf(edge.getCalleeSourceFact(), fact).atLeast(PrefixTestResult.POTENTIAL_PREFIX);










 }










 });










 }



......














test/heros/alias/AccessPathUtilTest.java








View file @ edf48ee6






......@@ -10,81 +10,83 @@









 ******************************************************************************/










package heros.alias;





















import static heros.alias.AccessPath.PrefixTestResult.*;










import static heros.alias.AccessPathUtil.applyAbstractedSummary;










import static heros.alias.AccessPathUtil.isPrefixOf;










import static org.junit.Assert.assertEquals;










import static org.junit.Assert.assertFalse;










import static org.junit.Assert.assertNull;










import static org.junit.Assert.assertTrue;










import heros.alias.AccessPath.PrefixTestResult;





















import org.junit.Assert;










import org.junit.Test;





















public class AccessPathUtilTest {





















 @Test










 public void testBaseValuePrefixOfFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a"), new Fact("a.f")));










 assertFalse(isPrefixOf(new Fact("a.f"), new Fact("a")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a"), new Fact("a.f")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a")));










 }










 










 @Test










 public void testBaseValueIdentity() {










 assertTrue(isPrefixOf(new Fact("a"), new Fact("a")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a"), new Fact("a")));










 }










 










 @Test










 public void testFieldAccessPrefixOfFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a.b"), new Fact("a.b.c")));










 assertFalse(isPrefixOf(new Fact("a.b.c"), new Fact("a.b")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.b"), new Fact("a.b.c")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.b.c"), new Fact("a.b")));










 }










 










 @Test










 public void testPrefixOfFieldAccessWithExclusion() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a.g")));










 assertFalse(isPrefixOf(new Fact("a.g"), new Fact("a^f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.g"), new Fact("a^f")));










 }










 










 @Test










 public void testIdentityWithExclusion() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a^f")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f,g")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a^f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f,g"), new Fact("a^f,g")));










 }










 










 @Test










 public void testDifferentExclusions() {










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^g")));










 assertEquals(POTENTIAL_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a^g")));










 assertEquals(POTENTIAL_PREFIX, isPrefixOf(new Fact("a^f^f,g"), new Fact("a^g^f,g")));










 assertEquals(POTENTIAL_PREFIX, isPrefixOf(new Fact("a^f^f"), new Fact("a^f^g")));










 }










 










 @Test










 public void testMixedFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a.g.g")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a.f.h")));










 assertTrue(isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.g.g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.f.h")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 }










 










 @Test










 public void testMultipleExclusions() {










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^g")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f,g"), new Fact("a^g")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 }





















 @Test










 public void testDifferentAccessPathLength() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a.g.h")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.g.h")));










 }










 










 @Test










 public void testExclusionRequiresFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a"), new Fact("a^f")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a"), new Fact("a^f")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a")));










 










 assertTrue(isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 assertFalse(isPrefixOf(new Fact("a.f^g"), new Fact("a.f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.f^g"), new Fact("a.f")));










 










 assertTrue(isPrefixOf(new Fact("a.f"), new Fact("a.f^g^h")));










 assertFalse(isPrefixOf(new Fact("a.f^g^h"), new Fact("a.f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a.f^g^h")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.f^g^h"), new Fact("a.f")));










 }










 










 @Test



......














test/heros/alias/FieldSensitiveIFDSSolverTest.java








View file @ edf48ee6






......@@ -601,4 +601,24 @@ public class FieldSensitiveIFDSSolverTest {









 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void multipleExclusions() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1^h")),










 callSite("b").calls("bar", flow("1^h", "2^h")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("2", writeField("f"), "3^f")),










 callSite("d").calls("xyz", flow("3^f", "4^f")));










 










 helper.method("xyz", 










 startPoints("e"),










 normalStmt("e").succ("f", flow("4", writeField("g"), "5^g")),










 normalStmt("f").succ("g", kill("5^g")));










 










 helper.runSolver(false, "a");










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
edf48ee6


authored
Jan 22, 2015
by


Johannes Lerch



Browse files




Split prefix check into potential and guaranteed prefix







parent
e464b807













Changes
5




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPath.java








View file @ edf48ee6






......@@ -16,6 +16,7 @@ import java.util.Set;




















import com.google.common.base.Function;










import com.google.common.base.Joiner;










import com.google.common.collect.Collections2;










import com.google.common.collect.Sets;





















@SuppressWarnings("unchecked")



......@@ -30,7 +31,7 @@ public class AccessPath<FieldRef> {









 }










 










 AccessPath(FieldRef[] accesses, Set<FieldRef>[] exclusions) {










 int k = 3;










 int k = 2;










 if(accesses.length > k) {










 this.accesses = Arrays.copyOf(accesses, k);










 this.exclusions = new Set[0];



......@@ -100,35 +101,54 @@ public class AccessPath<FieldRef> {









 newExclusionsArray[exclusions.length] = Sets.newHashSet(fieldReferences);










 return new AccessPath<>(accesses, newExclusionsArray);










 }





















 public static enum PrefixTestResult {










 GUARANTEED_PREFIX(2), POTENTIAL_PREFIX(1), NO_PREFIX(0);










 










 private int value;





















 private PrefixTestResult(int value) {










 this.value = value;










 }










 










 public boolean atLeast(PrefixTestResult minimum) {










 return value >= minimum.value;










 }










 }










 










 public boolean isPrefixOf(AccessPath<FieldRef> accessPath) {










 public PrefixTestResult isPrefixOf(AccessPath<FieldRef> accessPath) {










 if(accesses.length > accessPath.accesses.length)










 return false;










 return PrefixTestResult.NO_PREFIX;










 










 if(accesses.length + exclusions.length > accessPath.accesses.length + accessPath.exclusions.length)










 return false;










 return PrefixTestResult.NO_PREFIX;










 










 for(int i=0; i<accesses.length; i++) {










 if(!accesses[i].equals(accessPath.accesses[i]))










 return false;










 return PrefixTestResult.NO_PREFIX;










 }










 










 PrefixTestResult result = PrefixTestResult.GUARANTEED_PREFIX;










 for(int i=0; i<exclusions.length; i++) {










 if(i+accesses.length < accessPath.accesses.length) {










 if(exclusions[i].contains(accessPath.accesses[i+accesses.length]))










 return false;










 return PrefixTestResult.NO_PREFIX;










 }










 else {










 if(!exclusions[i].containsAll(accessPath.exclusions[i+accesses.length - accessPath.accesses.length]))










 return false;










 if(!accessPath.exclusions[i+accesses.length - accessPath.accesses.length].containsAll(exclusions[i])) {










 if(Sets.intersection(exclusions[i], accessPath.exclusions[i+accesses.length - accessPath.accesses.length]).isEmpty())










 result = PrefixTestResult.POTENTIAL_PREFIX;










 else










 return PrefixTestResult.NO_PREFIX;










 }










 }










 }










 










 return true;










 return result;










 }










 










 public FieldRef[] getDeltaTo(AccessPath<FieldRef> accPath) {










 if(isPrefixOf(accPath))










 if(isPrefixOf(accPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX))










 return Arrays.copyOfRange(accPath.accesses, accesses.length, accPath.accesses.length);










 else










 throw new IllegalArgumentException("Given AccessPath must be a prefix of the current AccessPath");



......@@ -215,4 +235,11 @@ public class AccessPath<FieldRef> {









 return new AccessPath<FieldRef>(accesses, newExclusionsArray);










 }










 }





















 public FieldRef getFirstAccess() {










 if(accesses.length > 0)










 return accesses[0];










 else 










 return null;










 }










}














src/heros/alias/AccessPathUtil.java








View file @ edf48ee6






......@@ -10,23 +10,26 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.AccessPath.PrefixTestResult;





















import com.google.common.base.Optional;
































public class AccessPathUtil {





















 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> boolean isPrefixOf(D prefixCandidate, D fact) {










 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> PrefixTestResult isPrefixOf(D prefixCandidate, D fact) {










 if(prefixCandidate.getBaseValue() == null) {










 if(fact.getBaseValue() != null)










 return false;










 return PrefixTestResult.NO_PREFIX;










 } else if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))










 return false;










 return PrefixTestResult.NO_PREFIX;










 










 return prefixCandidate.getAccessPath().isPrefixOf(fact.getAccessPath());










 }










 










 










 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> Optional<D> applyAbstractedSummary(D sourceFact, SummaryEdge<D, ?> summary) {










 if(!isPrefixOf(summary.getSourceFact(), sourceFact))










 if(!isPrefixOf(summary.getSourceFact(), sourceFact).atLeast(PrefixTestResult.GUARANTEED_PREFIX))










 throw new IllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'", summary, sourceFact));










 










 AccessPath<FieldRef> concreteAccessPath = sourceFact.getAccessPath();



......














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ edf48ee6






......@@ -14,6 +14,7 @@ import heros.DontSynchronize;









import heros.FlowFunctionCache;










import heros.InterproceduralCFG;










import heros.SynchronizedBy;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.solver.CountingThreadPoolExecutor;



......@@ -262,21 +263,19 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //because we have observed a potentially new incoming edge into <sP,d3>










 if (endSumm != null)










 for(SummaryEdge<D, N> summary: endSumm) {










 if(AccessPathUtil.isPrefixOf(summary.getSourceFact(), d3.getFact())) {










 Optional<D> d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 if(d4.isPresent()) {










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(ConstrainedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }










 Optional<D> d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 if(d4.isPresent()) {










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(ConstrainedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }










 }










 } 










 }










 }










 }










 }



......@@ -294,7 +293,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 ConcurrentHashSet<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 for(PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint)) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(edges.remove(edge)) {










 logger.trace("RESUME-EDGE: {}", edge);










 propagate(edge, edge instanceof ConcretizationPathEdge ? edge.getTarget() : null, false);



......@@ -308,7 +307,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 Set<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 for(final PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource())) {










 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}", edge, incomingEdge);










 










 Constraint<FieldRef> constraint = new DeltaConstraint<FieldRef>(incomingEdge.getCalleeSourceFact().getAccessPath(), edge.factAtSource().getAccessPath());



......@@ -383,7 +382,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 // compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);










 










 if(AccessPathUtil.isPrefixOf(d1, incomingEdge.getCalleeSourceFact())) {










 if(AccessPathUtil.isPrefixOf(d1, incomingEdge.getCalleeSourceFact()) == PrefixTestResult.GUARANTEED_PREFIX) {










 Optional<D> concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);










 if(concreteCalleeExitFact.isPresent()) {










 Set<ConstrainedFact<FieldRef, D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact.get(), callSite);



......@@ -480,12 +479,12 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagate = false;










 else {










 Set<N> callSitesWithInterest = Sets.newHashSet();










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixedWith(calleeMethod, pathEdge.factAtSource())) {










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixedWith(calleeMethod, pathEdge.factAtSource())) { //guaranteed










 callSitesWithInterest.add(incEdge.getCallSite());










 }










 propagate = !callSitesWithInterest.isEmpty();










 










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixesOf(calleeMethod, pathEdge.factAtSource())) {










 for(IncomingEdge<D, N> incEdge : incomingEdgesPotentialPrefixesOf(calleeMethod, pathEdge.factAtSource())) { //potential










 if(visited.containsKey(incEdge.getCallSite())) {










 if(visited.get(incEdge.getCallSite()) != null)










 propagate |= visited.get(incEdge.getCallSite());



......@@ -522,7 +521,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 ConcurrentHashSet<PathEdge<N, D>> pe = pausedEdges.get(calleeMethod);










 if(pe != null) {










 for(PathEdge<N, D> edge : pe) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), pathEdge.factAtSource()))










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), pathEdge.factAtSource()) == PrefixTestResult.GUARANTEED_PREFIX)










 return true;










 }










 }



......@@ -613,7 +612,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return Sets.filter(map, new Predicate<SummaryEdge<D,N>>() {










 @Override










 public boolean apply(SummaryEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3) || AccessPathUtil.isPrefixOf(d3, edge.getSourceFact());










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3) == PrefixTestResult.GUARANTEED_PREFIX;










 }










 });










 }



......@@ -637,17 +636,17 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return Sets.filter(result, new Predicate<IncomingEdge<D,N>>() {










 @Override










 public boolean apply(IncomingEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(fact, edge.getCalleeSourceFact());










 return AccessPathUtil.isPrefixOf(fact, edge.getCalleeSourceFact()) == PrefixTestResult.GUARANTEED_PREFIX;










 }










 });










 }










 










 protected Set<IncomingEdge<D, N>> incomingEdgesPrefixesOf(M m, final D fact) {










 protected Set<IncomingEdge<D, N>> incomingEdgesPotentialPrefixesOf(M m, final D fact) {










 Set<IncomingEdge<D, N>> result = incoming(m);










 return Sets.filter(result, new Predicate<IncomingEdge<D,N>>() {










 @Override










 public boolean apply(IncomingEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(edge.getCalleeSourceFact(), fact);










 return AccessPathUtil.isPrefixOf(edge.getCalleeSourceFact(), fact).atLeast(PrefixTestResult.POTENTIAL_PREFIX);










 }










 });










 }



......














test/heros/alias/AccessPathUtilTest.java








View file @ edf48ee6






......@@ -10,81 +10,83 @@









 ******************************************************************************/










package heros.alias;





















import static heros.alias.AccessPath.PrefixTestResult.*;










import static heros.alias.AccessPathUtil.applyAbstractedSummary;










import static heros.alias.AccessPathUtil.isPrefixOf;










import static org.junit.Assert.assertEquals;










import static org.junit.Assert.assertFalse;










import static org.junit.Assert.assertNull;










import static org.junit.Assert.assertTrue;










import heros.alias.AccessPath.PrefixTestResult;





















import org.junit.Assert;










import org.junit.Test;





















public class AccessPathUtilTest {





















 @Test










 public void testBaseValuePrefixOfFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a"), new Fact("a.f")));










 assertFalse(isPrefixOf(new Fact("a.f"), new Fact("a")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a"), new Fact("a.f")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a")));










 }










 










 @Test










 public void testBaseValueIdentity() {










 assertTrue(isPrefixOf(new Fact("a"), new Fact("a")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a"), new Fact("a")));










 }










 










 @Test










 public void testFieldAccessPrefixOfFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a.b"), new Fact("a.b.c")));










 assertFalse(isPrefixOf(new Fact("a.b.c"), new Fact("a.b")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.b"), new Fact("a.b.c")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.b.c"), new Fact("a.b")));










 }










 










 @Test










 public void testPrefixOfFieldAccessWithExclusion() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a.g")));










 assertFalse(isPrefixOf(new Fact("a.g"), new Fact("a^f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.g"), new Fact("a^f")));










 }










 










 @Test










 public void testIdentityWithExclusion() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a^f")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f,g")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a^f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f,g"), new Fact("a^f,g")));










 }










 










 @Test










 public void testDifferentExclusions() {










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^g")));










 assertEquals(POTENTIAL_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a^g")));










 assertEquals(POTENTIAL_PREFIX, isPrefixOf(new Fact("a^f^f,g"), new Fact("a^g^f,g")));










 assertEquals(POTENTIAL_PREFIX, isPrefixOf(new Fact("a^f^f"), new Fact("a^f^g")));










 }










 










 @Test










 public void testMixedFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a.g.g")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a.f.h")));










 assertTrue(isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.g.g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.f.h")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 }










 










 @Test










 public void testMultipleExclusions() {










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^g")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f,g"), new Fact("a^g")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 }





















 @Test










 public void testDifferentAccessPathLength() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a.g.h")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.g.h")));










 }










 










 @Test










 public void testExclusionRequiresFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a"), new Fact("a^f")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a"), new Fact("a^f")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a")));










 










 assertTrue(isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 assertFalse(isPrefixOf(new Fact("a.f^g"), new Fact("a.f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.f^g"), new Fact("a.f")));










 










 assertTrue(isPrefixOf(new Fact("a.f"), new Fact("a.f^g^h")));










 assertFalse(isPrefixOf(new Fact("a.f^g^h"), new Fact("a.f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a.f^g^h")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.f^g^h"), new Fact("a.f")));










 }










 










 @Test



......














test/heros/alias/FieldSensitiveIFDSSolverTest.java








View file @ edf48ee6






......@@ -601,4 +601,24 @@ public class FieldSensitiveIFDSSolverTest {









 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void multipleExclusions() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1^h")),










 callSite("b").calls("bar", flow("1^h", "2^h")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("2", writeField("f"), "3^f")),










 callSite("d").calls("xyz", flow("3^f", "4^f")));










 










 helper.method("xyz", 










 startPoints("e"),










 normalStmt("e").succ("f", flow("4", writeField("g"), "5^g")),










 normalStmt("f").succ("g", kill("5^g")));










 










 helper.runSolver(false, "a");










 }










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
edf48ee6


authored
Jan 22, 2015
by


Johannes Lerch



Browse files



Commit
edf48ee6


authored
Jan 22, 2015
by


Johannes Lerch

edf48ee6authoredbyJohannes Lerch

Split prefix check into potential and guaranteed prefix






parent
e464b807
















parent
e464b807





parent












Changes
5
5


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/alias/AccessPath.java








View file @ edf48ee6






......@@ -16,6 +16,7 @@ import java.util.Set;




















import com.google.common.base.Function;










import com.google.common.base.Joiner;










import com.google.common.collect.Collections2;










import com.google.common.collect.Sets;





















@SuppressWarnings("unchecked")



......@@ -30,7 +31,7 @@ public class AccessPath<FieldRef> {









 }










 










 AccessPath(FieldRef[] accesses, Set<FieldRef>[] exclusions) {










 int k = 3;










 int k = 2;










 if(accesses.length > k) {










 this.accesses = Arrays.copyOf(accesses, k);










 this.exclusions = new Set[0];



......@@ -100,35 +101,54 @@ public class AccessPath<FieldRef> {









 newExclusionsArray[exclusions.length] = Sets.newHashSet(fieldReferences);










 return new AccessPath<>(accesses, newExclusionsArray);










 }





















 public static enum PrefixTestResult {










 GUARANTEED_PREFIX(2), POTENTIAL_PREFIX(1), NO_PREFIX(0);










 










 private int value;





















 private PrefixTestResult(int value) {










 this.value = value;










 }










 










 public boolean atLeast(PrefixTestResult minimum) {










 return value >= minimum.value;










 }










 }










 










 public boolean isPrefixOf(AccessPath<FieldRef> accessPath) {










 public PrefixTestResult isPrefixOf(AccessPath<FieldRef> accessPath) {










 if(accesses.length > accessPath.accesses.length)










 return false;










 return PrefixTestResult.NO_PREFIX;










 










 if(accesses.length + exclusions.length > accessPath.accesses.length + accessPath.exclusions.length)










 return false;










 return PrefixTestResult.NO_PREFIX;










 










 for(int i=0; i<accesses.length; i++) {










 if(!accesses[i].equals(accessPath.accesses[i]))










 return false;










 return PrefixTestResult.NO_PREFIX;










 }










 










 PrefixTestResult result = PrefixTestResult.GUARANTEED_PREFIX;










 for(int i=0; i<exclusions.length; i++) {










 if(i+accesses.length < accessPath.accesses.length) {










 if(exclusions[i].contains(accessPath.accesses[i+accesses.length]))










 return false;










 return PrefixTestResult.NO_PREFIX;










 }










 else {










 if(!exclusions[i].containsAll(accessPath.exclusions[i+accesses.length - accessPath.accesses.length]))










 return false;










 if(!accessPath.exclusions[i+accesses.length - accessPath.accesses.length].containsAll(exclusions[i])) {










 if(Sets.intersection(exclusions[i], accessPath.exclusions[i+accesses.length - accessPath.accesses.length]).isEmpty())










 result = PrefixTestResult.POTENTIAL_PREFIX;










 else










 return PrefixTestResult.NO_PREFIX;










 }










 }










 }










 










 return true;










 return result;










 }










 










 public FieldRef[] getDeltaTo(AccessPath<FieldRef> accPath) {










 if(isPrefixOf(accPath))










 if(isPrefixOf(accPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX))










 return Arrays.copyOfRange(accPath.accesses, accesses.length, accPath.accesses.length);










 else










 throw new IllegalArgumentException("Given AccessPath must be a prefix of the current AccessPath");



......@@ -215,4 +235,11 @@ public class AccessPath<FieldRef> {









 return new AccessPath<FieldRef>(accesses, newExclusionsArray);










 }










 }





















 public FieldRef getFirstAccess() {










 if(accesses.length > 0)










 return accesses[0];










 else 










 return null;










 }










}














src/heros/alias/AccessPathUtil.java








View file @ edf48ee6






......@@ -10,23 +10,26 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.AccessPath.PrefixTestResult;





















import com.google.common.base.Optional;
































public class AccessPathUtil {





















 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> boolean isPrefixOf(D prefixCandidate, D fact) {










 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> PrefixTestResult isPrefixOf(D prefixCandidate, D fact) {










 if(prefixCandidate.getBaseValue() == null) {










 if(fact.getBaseValue() != null)










 return false;










 return PrefixTestResult.NO_PREFIX;










 } else if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))










 return false;










 return PrefixTestResult.NO_PREFIX;










 










 return prefixCandidate.getAccessPath().isPrefixOf(fact.getAccessPath());










 }










 










 










 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> Optional<D> applyAbstractedSummary(D sourceFact, SummaryEdge<D, ?> summary) {










 if(!isPrefixOf(summary.getSourceFact(), sourceFact))










 if(!isPrefixOf(summary.getSourceFact(), sourceFact).atLeast(PrefixTestResult.GUARANTEED_PREFIX))










 throw new IllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'", summary, sourceFact));










 










 AccessPath<FieldRef> concreteAccessPath = sourceFact.getAccessPath();



......














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ edf48ee6






......@@ -14,6 +14,7 @@ import heros.DontSynchronize;









import heros.FlowFunctionCache;










import heros.InterproceduralCFG;










import heros.SynchronizedBy;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.solver.CountingThreadPoolExecutor;



......@@ -262,21 +263,19 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //because we have observed a potentially new incoming edge into <sP,d3>










 if (endSumm != null)










 for(SummaryEdge<D, N> summary: endSumm) {










 if(AccessPathUtil.isPrefixOf(summary.getSourceFact(), d3.getFact())) {










 Optional<D> d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 if(d4.isPresent()) {










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(ConstrainedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }










 Optional<D> d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 if(d4.isPresent()) {










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(ConstrainedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }










 }










 } 










 }










 }










 }










 }



......@@ -294,7 +293,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 ConcurrentHashSet<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 for(PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint)) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(edges.remove(edge)) {










 logger.trace("RESUME-EDGE: {}", edge);










 propagate(edge, edge instanceof ConcretizationPathEdge ? edge.getTarget() : null, false);



......@@ -308,7 +307,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 Set<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 for(final PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource())) {










 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}", edge, incomingEdge);










 










 Constraint<FieldRef> constraint = new DeltaConstraint<FieldRef>(incomingEdge.getCalleeSourceFact().getAccessPath(), edge.factAtSource().getAccessPath());



......@@ -383,7 +382,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 // compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);










 










 if(AccessPathUtil.isPrefixOf(d1, incomingEdge.getCalleeSourceFact())) {










 if(AccessPathUtil.isPrefixOf(d1, incomingEdge.getCalleeSourceFact()) == PrefixTestResult.GUARANTEED_PREFIX) {










 Optional<D> concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);










 if(concreteCalleeExitFact.isPresent()) {










 Set<ConstrainedFact<FieldRef, D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact.get(), callSite);



......@@ -480,12 +479,12 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagate = false;










 else {










 Set<N> callSitesWithInterest = Sets.newHashSet();










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixedWith(calleeMethod, pathEdge.factAtSource())) {










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixedWith(calleeMethod, pathEdge.factAtSource())) { //guaranteed










 callSitesWithInterest.add(incEdge.getCallSite());










 }










 propagate = !callSitesWithInterest.isEmpty();










 










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixesOf(calleeMethod, pathEdge.factAtSource())) {










 for(IncomingEdge<D, N> incEdge : incomingEdgesPotentialPrefixesOf(calleeMethod, pathEdge.factAtSource())) { //potential










 if(visited.containsKey(incEdge.getCallSite())) {










 if(visited.get(incEdge.getCallSite()) != null)










 propagate |= visited.get(incEdge.getCallSite());



......@@ -522,7 +521,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 ConcurrentHashSet<PathEdge<N, D>> pe = pausedEdges.get(calleeMethod);










 if(pe != null) {










 for(PathEdge<N, D> edge : pe) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), pathEdge.factAtSource()))










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), pathEdge.factAtSource()) == PrefixTestResult.GUARANTEED_PREFIX)










 return true;










 }










 }



......@@ -613,7 +612,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return Sets.filter(map, new Predicate<SummaryEdge<D,N>>() {










 @Override










 public boolean apply(SummaryEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3) || AccessPathUtil.isPrefixOf(d3, edge.getSourceFact());










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3) == PrefixTestResult.GUARANTEED_PREFIX;










 }










 });










 }



......@@ -637,17 +636,17 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return Sets.filter(result, new Predicate<IncomingEdge<D,N>>() {










 @Override










 public boolean apply(IncomingEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(fact, edge.getCalleeSourceFact());










 return AccessPathUtil.isPrefixOf(fact, edge.getCalleeSourceFact()) == PrefixTestResult.GUARANTEED_PREFIX;










 }










 });










 }










 










 protected Set<IncomingEdge<D, N>> incomingEdgesPrefixesOf(M m, final D fact) {










 protected Set<IncomingEdge<D, N>> incomingEdgesPotentialPrefixesOf(M m, final D fact) {










 Set<IncomingEdge<D, N>> result = incoming(m);










 return Sets.filter(result, new Predicate<IncomingEdge<D,N>>() {










 @Override










 public boolean apply(IncomingEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(edge.getCalleeSourceFact(), fact);










 return AccessPathUtil.isPrefixOf(edge.getCalleeSourceFact(), fact).atLeast(PrefixTestResult.POTENTIAL_PREFIX);










 }










 });










 }



......














test/heros/alias/AccessPathUtilTest.java








View file @ edf48ee6






......@@ -10,81 +10,83 @@









 ******************************************************************************/










package heros.alias;





















import static heros.alias.AccessPath.PrefixTestResult.*;










import static heros.alias.AccessPathUtil.applyAbstractedSummary;










import static heros.alias.AccessPathUtil.isPrefixOf;










import static org.junit.Assert.assertEquals;










import static org.junit.Assert.assertFalse;










import static org.junit.Assert.assertNull;










import static org.junit.Assert.assertTrue;










import heros.alias.AccessPath.PrefixTestResult;





















import org.junit.Assert;










import org.junit.Test;





















public class AccessPathUtilTest {





















 @Test










 public void testBaseValuePrefixOfFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a"), new Fact("a.f")));










 assertFalse(isPrefixOf(new Fact("a.f"), new Fact("a")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a"), new Fact("a.f")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a")));










 }










 










 @Test










 public void testBaseValueIdentity() {










 assertTrue(isPrefixOf(new Fact("a"), new Fact("a")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a"), new Fact("a")));










 }










 










 @Test










 public void testFieldAccessPrefixOfFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a.b"), new Fact("a.b.c")));










 assertFalse(isPrefixOf(new Fact("a.b.c"), new Fact("a.b")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.b"), new Fact("a.b.c")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.b.c"), new Fact("a.b")));










 }










 










 @Test










 public void testPrefixOfFieldAccessWithExclusion() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a.g")));










 assertFalse(isPrefixOf(new Fact("a.g"), new Fact("a^f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.g"), new Fact("a^f")));










 }










 










 @Test










 public void testIdentityWithExclusion() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a^f")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f,g")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a^f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f,g"), new Fact("a^f,g")));










 }










 










 @Test










 public void testDifferentExclusions() {










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^g")));










 assertEquals(POTENTIAL_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a^g")));










 assertEquals(POTENTIAL_PREFIX, isPrefixOf(new Fact("a^f^f,g"), new Fact("a^g^f,g")));










 assertEquals(POTENTIAL_PREFIX, isPrefixOf(new Fact("a^f^f"), new Fact("a^f^g")));










 }










 










 @Test










 public void testMixedFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a.g.g")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a.f.h")));










 assertTrue(isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.g.g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.f.h")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 }










 










 @Test










 public void testMultipleExclusions() {










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^g")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f,g"), new Fact("a^g")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 }





















 @Test










 public void testDifferentAccessPathLength() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a.g.h")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.g.h")));










 }










 










 @Test










 public void testExclusionRequiresFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a"), new Fact("a^f")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a"), new Fact("a^f")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a")));










 










 assertTrue(isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 assertFalse(isPrefixOf(new Fact("a.f^g"), new Fact("a.f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.f^g"), new Fact("a.f")));










 










 assertTrue(isPrefixOf(new Fact("a.f"), new Fact("a.f^g^h")));










 assertFalse(isPrefixOf(new Fact("a.f^g^h"), new Fact("a.f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a.f^g^h")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.f^g^h"), new Fact("a.f")));










 }










 










 @Test



......














test/heros/alias/FieldSensitiveIFDSSolverTest.java








View file @ edf48ee6






......@@ -601,4 +601,24 @@ public class FieldSensitiveIFDSSolverTest {









 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void multipleExclusions() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1^h")),










 callSite("b").calls("bar", flow("1^h", "2^h")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("2", writeField("f"), "3^f")),










 callSite("d").calls("xyz", flow("3^f", "4^f")));










 










 helper.method("xyz", 










 startPoints("e"),










 normalStmt("e").succ("f", flow("4", writeField("g"), "5^g")),










 normalStmt("f").succ("g", kill("5^g")));










 










 helper.runSolver(false, "a");










 }










}














src/heros/alias/AccessPath.java








View file @ edf48ee6






......@@ -16,6 +16,7 @@ import java.util.Set;




















import com.google.common.base.Function;










import com.google.common.base.Joiner;










import com.google.common.collect.Collections2;










import com.google.common.collect.Sets;





















@SuppressWarnings("unchecked")



......@@ -30,7 +31,7 @@ public class AccessPath<FieldRef> {









 }










 










 AccessPath(FieldRef[] accesses, Set<FieldRef>[] exclusions) {










 int k = 3;










 int k = 2;










 if(accesses.length > k) {










 this.accesses = Arrays.copyOf(accesses, k);










 this.exclusions = new Set[0];



......@@ -100,35 +101,54 @@ public class AccessPath<FieldRef> {









 newExclusionsArray[exclusions.length] = Sets.newHashSet(fieldReferences);










 return new AccessPath<>(accesses, newExclusionsArray);










 }





















 public static enum PrefixTestResult {










 GUARANTEED_PREFIX(2), POTENTIAL_PREFIX(1), NO_PREFIX(0);










 










 private int value;





















 private PrefixTestResult(int value) {










 this.value = value;










 }










 










 public boolean atLeast(PrefixTestResult minimum) {










 return value >= minimum.value;










 }










 }










 










 public boolean isPrefixOf(AccessPath<FieldRef> accessPath) {










 public PrefixTestResult isPrefixOf(AccessPath<FieldRef> accessPath) {










 if(accesses.length > accessPath.accesses.length)










 return false;










 return PrefixTestResult.NO_PREFIX;










 










 if(accesses.length + exclusions.length > accessPath.accesses.length + accessPath.exclusions.length)










 return false;










 return PrefixTestResult.NO_PREFIX;










 










 for(int i=0; i<accesses.length; i++) {










 if(!accesses[i].equals(accessPath.accesses[i]))










 return false;










 return PrefixTestResult.NO_PREFIX;










 }










 










 PrefixTestResult result = PrefixTestResult.GUARANTEED_PREFIX;










 for(int i=0; i<exclusions.length; i++) {










 if(i+accesses.length < accessPath.accesses.length) {










 if(exclusions[i].contains(accessPath.accesses[i+accesses.length]))










 return false;










 return PrefixTestResult.NO_PREFIX;










 }










 else {










 if(!exclusions[i].containsAll(accessPath.exclusions[i+accesses.length - accessPath.accesses.length]))










 return false;










 if(!accessPath.exclusions[i+accesses.length - accessPath.accesses.length].containsAll(exclusions[i])) {










 if(Sets.intersection(exclusions[i], accessPath.exclusions[i+accesses.length - accessPath.accesses.length]).isEmpty())










 result = PrefixTestResult.POTENTIAL_PREFIX;










 else










 return PrefixTestResult.NO_PREFIX;










 }










 }










 }










 










 return true;










 return result;










 }










 










 public FieldRef[] getDeltaTo(AccessPath<FieldRef> accPath) {










 if(isPrefixOf(accPath))










 if(isPrefixOf(accPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX))










 return Arrays.copyOfRange(accPath.accesses, accesses.length, accPath.accesses.length);










 else










 throw new IllegalArgumentException("Given AccessPath must be a prefix of the current AccessPath");



......@@ -215,4 +235,11 @@ public class AccessPath<FieldRef> {









 return new AccessPath<FieldRef>(accesses, newExclusionsArray);










 }










 }





















 public FieldRef getFirstAccess() {










 if(accesses.length > 0)










 return accesses[0];










 else 










 return null;










 }










}












src/heros/alias/AccessPath.java








View file @ edf48ee6








src/heros/alias/AccessPath.java










View file @ edf48ee6


edf48ee6



......@@ -16,6 +16,7 @@ import java.util.Set;




















import com.google.common.base.Function;










import com.google.common.base.Joiner;










import com.google.common.collect.Collections2;










import com.google.common.collect.Sets;





















@SuppressWarnings("unchecked")



......@@ -30,7 +31,7 @@ public class AccessPath<FieldRef> {









 }










 










 AccessPath(FieldRef[] accesses, Set<FieldRef>[] exclusions) {










 int k = 3;










 int k = 2;










 if(accesses.length > k) {










 this.accesses = Arrays.copyOf(accesses, k);










 this.exclusions = new Set[0];



......@@ -100,35 +101,54 @@ public class AccessPath<FieldRef> {









 newExclusionsArray[exclusions.length] = Sets.newHashSet(fieldReferences);










 return new AccessPath<>(accesses, newExclusionsArray);










 }





















 public static enum PrefixTestResult {










 GUARANTEED_PREFIX(2), POTENTIAL_PREFIX(1), NO_PREFIX(0);










 










 private int value;





















 private PrefixTestResult(int value) {










 this.value = value;










 }










 










 public boolean atLeast(PrefixTestResult minimum) {










 return value >= minimum.value;










 }










 }










 










 public boolean isPrefixOf(AccessPath<FieldRef> accessPath) {










 public PrefixTestResult isPrefixOf(AccessPath<FieldRef> accessPath) {










 if(accesses.length > accessPath.accesses.length)










 return false;










 return PrefixTestResult.NO_PREFIX;










 










 if(accesses.length + exclusions.length > accessPath.accesses.length + accessPath.exclusions.length)










 return false;










 return PrefixTestResult.NO_PREFIX;










 










 for(int i=0; i<accesses.length; i++) {










 if(!accesses[i].equals(accessPath.accesses[i]))










 return false;










 return PrefixTestResult.NO_PREFIX;










 }










 










 PrefixTestResult result = PrefixTestResult.GUARANTEED_PREFIX;










 for(int i=0; i<exclusions.length; i++) {










 if(i+accesses.length < accessPath.accesses.length) {










 if(exclusions[i].contains(accessPath.accesses[i+accesses.length]))










 return false;










 return PrefixTestResult.NO_PREFIX;










 }










 else {










 if(!exclusions[i].containsAll(accessPath.exclusions[i+accesses.length - accessPath.accesses.length]))










 return false;










 if(!accessPath.exclusions[i+accesses.length - accessPath.accesses.length].containsAll(exclusions[i])) {










 if(Sets.intersection(exclusions[i], accessPath.exclusions[i+accesses.length - accessPath.accesses.length]).isEmpty())










 result = PrefixTestResult.POTENTIAL_PREFIX;










 else










 return PrefixTestResult.NO_PREFIX;










 }










 }










 }










 










 return true;










 return result;










 }










 










 public FieldRef[] getDeltaTo(AccessPath<FieldRef> accPath) {










 if(isPrefixOf(accPath))










 if(isPrefixOf(accPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX))










 return Arrays.copyOfRange(accPath.accesses, accesses.length, accPath.accesses.length);










 else










 throw new IllegalArgumentException("Given AccessPath must be a prefix of the current AccessPath");



......@@ -215,4 +235,11 @@ public class AccessPath<FieldRef> {









 return new AccessPath<FieldRef>(accesses, newExclusionsArray);










 }










 }





















 public FieldRef getFirstAccess() {










 if(accesses.length > 0)










 return accesses[0];










 else 










 return null;










 }










}






......@@ -16,6 +16,7 @@ import java.util.Set;




















import com.google.common.base.Function;










import com.google.common.base.Joiner;










import com.google.common.collect.Collections2;










import com.google.common.collect.Sets;





















@SuppressWarnings("unchecked")



......@@ -30,7 +31,7 @@ public class AccessPath<FieldRef> {









 }










 










 AccessPath(FieldRef[] accesses, Set<FieldRef>[] exclusions) {










 int k = 3;










 int k = 2;










 if(accesses.length > k) {










 this.accesses = Arrays.copyOf(accesses, k);










 this.exclusions = new Set[0];



......@@ -100,35 +101,54 @@ public class AccessPath<FieldRef> {









 newExclusionsArray[exclusions.length] = Sets.newHashSet(fieldReferences);










 return new AccessPath<>(accesses, newExclusionsArray);










 }





















 public static enum PrefixTestResult {










 GUARANTEED_PREFIX(2), POTENTIAL_PREFIX(1), NO_PREFIX(0);










 










 private int value;





















 private PrefixTestResult(int value) {










 this.value = value;










 }










 










 public boolean atLeast(PrefixTestResult minimum) {










 return value >= minimum.value;










 }










 }










 










 public boolean isPrefixOf(AccessPath<FieldRef> accessPath) {










 public PrefixTestResult isPrefixOf(AccessPath<FieldRef> accessPath) {










 if(accesses.length > accessPath.accesses.length)










 return false;










 return PrefixTestResult.NO_PREFIX;










 










 if(accesses.length + exclusions.length > accessPath.accesses.length + accessPath.exclusions.length)










 return false;










 return PrefixTestResult.NO_PREFIX;










 










 for(int i=0; i<accesses.length; i++) {










 if(!accesses[i].equals(accessPath.accesses[i]))










 return false;










 return PrefixTestResult.NO_PREFIX;










 }










 










 PrefixTestResult result = PrefixTestResult.GUARANTEED_PREFIX;










 for(int i=0; i<exclusions.length; i++) {










 if(i+accesses.length < accessPath.accesses.length) {










 if(exclusions[i].contains(accessPath.accesses[i+accesses.length]))










 return false;










 return PrefixTestResult.NO_PREFIX;










 }










 else {










 if(!exclusions[i].containsAll(accessPath.exclusions[i+accesses.length - accessPath.accesses.length]))










 return false;










 if(!accessPath.exclusions[i+accesses.length - accessPath.accesses.length].containsAll(exclusions[i])) {










 if(Sets.intersection(exclusions[i], accessPath.exclusions[i+accesses.length - accessPath.accesses.length]).isEmpty())










 result = PrefixTestResult.POTENTIAL_PREFIX;










 else










 return PrefixTestResult.NO_PREFIX;










 }










 }










 }










 










 return true;










 return result;










 }










 










 public FieldRef[] getDeltaTo(AccessPath<FieldRef> accPath) {










 if(isPrefixOf(accPath))










 if(isPrefixOf(accPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX))










 return Arrays.copyOfRange(accPath.accesses, accesses.length, accPath.accesses.length);










 else










 throw new IllegalArgumentException("Given AccessPath must be a prefix of the current AccessPath");



......@@ -215,4 +235,11 @@ public class AccessPath<FieldRef> {









 return new AccessPath<FieldRef>(accesses, newExclusionsArray);










 }










 }





















 public FieldRef getFirstAccess() {










 if(accesses.length > 0)










 return accesses[0];










 else 










 return null;










 }










}


import com.google.common.base.Function;importcom.google.common.base.Function;import com.google.common.base.Joiner;importcom.google.common.base.Joiner;import com.google.common.collect.Collections2;importcom.google.common.collect.Collections2;import com.google.common.collect.Sets;importcom.google.common.collect.Sets;@SuppressWarnings("unchecked")@SuppressWarnings("unchecked") }}  AccessPath(FieldRef[] accesses, Set<FieldRef>[] exclusions) {AccessPath(FieldRef[]accesses,Set<FieldRef>[]exclusions){ int k = 3;intk=33; int k = 2;intk=22; if(accesses.length > k) {if(accesses.length>k){ this.accesses = Arrays.copyOf(accesses, k);this.accesses=Arrays.copyOf(accesses,k); this.exclusions = new Set[0];this.exclusions=newSet[0]; newExclusionsArray[exclusions.length] = Sets.newHashSet(fieldReferences);newExclusionsArray[exclusions.length]=Sets.newHashSet(fieldReferences); return new AccessPath<>(accesses, newExclusionsArray);returnnewAccessPath<>(accesses,newExclusionsArray); }} public static enum PrefixTestResult {publicstaticenumPrefixTestResult{ GUARANTEED_PREFIX(2), POTENTIAL_PREFIX(1), NO_PREFIX(0);GUARANTEED_PREFIX(2),POTENTIAL_PREFIX(1),NO_PREFIX(0);  private int value;privateintvalue; private PrefixTestResult(int value) {privatePrefixTestResult(intvalue){ this.value = value;this.value=value; }}  public boolean atLeast(PrefixTestResult minimum) {publicbooleanatLeast(PrefixTestResultminimum){ return value >= minimum.value;returnvalue>=minimum.value; }} }}  public boolean isPrefixOf(AccessPath<FieldRef> accessPath) {publicbooleanbooleanisPrefixOf(AccessPath<FieldRef>accessPath){ public PrefixTestResult isPrefixOf(AccessPath<FieldRef> accessPath) {publicPrefixTestResultPrefixTestResultisPrefixOf(AccessPath<FieldRef>accessPath){ if(accesses.length > accessPath.accesses.length)if(accesses.length>accessPath.accesses.length) return false;returnfalsefalse; return PrefixTestResult.NO_PREFIX;returnPrefixTestResultPrefixTestResult..NO_PREFIXNO_PREFIX;  if(accesses.length + exclusions.length > accessPath.accesses.length + accessPath.exclusions.length)if(accesses.length+exclusions.length>accessPath.accesses.length+accessPath.exclusions.length) return false;returnfalsefalse; return PrefixTestResult.NO_PREFIX;returnPrefixTestResultPrefixTestResult..NO_PREFIXNO_PREFIX;  for(int i=0; i<accesses.length; i++) {for(inti=0;i<accesses.length;i++){ if(!accesses[i].equals(accessPath.accesses[i]))if(!accesses[i].equals(accessPath.accesses[i])) return false;returnfalsefalse; return PrefixTestResult.NO_PREFIX;returnPrefixTestResultPrefixTestResult..NO_PREFIXNO_PREFIX; }}  PrefixTestResult result = PrefixTestResult.GUARANTEED_PREFIX;PrefixTestResultresult=PrefixTestResult.GUARANTEED_PREFIX; for(int i=0; i<exclusions.length; i++) {for(inti=0;i<exclusions.length;i++){ if(i+accesses.length < accessPath.accesses.length) {if(i+accesses.length<accessPath.accesses.length){ if(exclusions[i].contains(accessPath.accesses[i+accesses.length]))if(exclusions[i].contains(accessPath.accesses[i+accesses.length])) return false;returnfalsefalse; return PrefixTestResult.NO_PREFIX;returnPrefixTestResultPrefixTestResult..NO_PREFIXNO_PREFIX; }} else {else{ if(!exclusions[i].containsAll(accessPath.exclusions[i+accesses.length - accessPath.accesses.length]))if(!exclusions[i].containsAll(accessPath.exclusions[i+accesses.length-accessPath.accesses.length])) return false;returnfalse; if(!accessPath.exclusions[i+accesses.length - accessPath.accesses.length].containsAll(exclusions[i])) {if(!accessPath.exclusions[i+accesses.length-accessPath.accesses.length].containsAll(exclusions[i])){ if(Sets.intersection(exclusions[i], accessPath.exclusions[i+accesses.length - accessPath.accesses.length]).isEmpty())if(Sets.intersection(exclusions[i],accessPath.exclusions[i+accesses.length-accessPath.accesses.length]).isEmpty()) result = PrefixTestResult.POTENTIAL_PREFIX;result=PrefixTestResult.POTENTIAL_PREFIX; elseelse return PrefixTestResult.NO_PREFIX;returnPrefixTestResult.NO_PREFIX; }} }} }}  return true;returntruetrue; return result;returnresultresult; }}  public FieldRef[] getDeltaTo(AccessPath<FieldRef> accPath) {publicFieldRef[]getDeltaTo(AccessPath<FieldRef>accPath){ if(isPrefixOf(accPath))if(isPrefixOf(accPath)) if(isPrefixOf(accPath).atLeast(PrefixTestResult.POTENTIAL_PREFIX))if(isPrefixOf(accPath)..atLeastatLeast((PrefixTestResultPrefixTestResult..POTENTIAL_PREFIXPOTENTIAL_PREFIX))) return Arrays.copyOfRange(accPath.accesses, accesses.length, accPath.accesses.length);returnArrays.copyOfRange(accPath.accesses,accesses.length,accPath.accesses.length); elseelse throw new IllegalArgumentException("Given AccessPath must be a prefix of the current AccessPath");thrownewIllegalArgumentException("Given AccessPath must be a prefix of the current AccessPath"); return new AccessPath<FieldRef>(accesses, newExclusionsArray);returnnewAccessPath<FieldRef>(accesses,newExclusionsArray); }} }} public FieldRef getFirstAccess() {publicFieldRefgetFirstAccess(){ if(accesses.length > 0)if(accesses.length>0) return accesses[0];returnaccesses[0]; else else return null;returnnull; }}}}








src/heros/alias/AccessPathUtil.java








View file @ edf48ee6






......@@ -10,23 +10,26 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.AccessPath.PrefixTestResult;





















import com.google.common.base.Optional;
































public class AccessPathUtil {





















 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> boolean isPrefixOf(D prefixCandidate, D fact) {










 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> PrefixTestResult isPrefixOf(D prefixCandidate, D fact) {










 if(prefixCandidate.getBaseValue() == null) {










 if(fact.getBaseValue() != null)










 return false;










 return PrefixTestResult.NO_PREFIX;










 } else if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))










 return false;










 return PrefixTestResult.NO_PREFIX;










 










 return prefixCandidate.getAccessPath().isPrefixOf(fact.getAccessPath());










 }










 










 










 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> Optional<D> applyAbstractedSummary(D sourceFact, SummaryEdge<D, ?> summary) {










 if(!isPrefixOf(summary.getSourceFact(), sourceFact))










 if(!isPrefixOf(summary.getSourceFact(), sourceFact).atLeast(PrefixTestResult.GUARANTEED_PREFIX))










 throw new IllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'", summary, sourceFact));










 










 AccessPath<FieldRef> concreteAccessPath = sourceFact.getAccessPath();



......












src/heros/alias/AccessPathUtil.java








View file @ edf48ee6








src/heros/alias/AccessPathUtil.java










View file @ edf48ee6


edf48ee6



......@@ -10,23 +10,26 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.AccessPath.PrefixTestResult;





















import com.google.common.base.Optional;
































public class AccessPathUtil {





















 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> boolean isPrefixOf(D prefixCandidate, D fact) {










 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> PrefixTestResult isPrefixOf(D prefixCandidate, D fact) {










 if(prefixCandidate.getBaseValue() == null) {










 if(fact.getBaseValue() != null)










 return false;










 return PrefixTestResult.NO_PREFIX;










 } else if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))










 return false;










 return PrefixTestResult.NO_PREFIX;










 










 return prefixCandidate.getAccessPath().isPrefixOf(fact.getAccessPath());










 }










 










 










 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> Optional<D> applyAbstractedSummary(D sourceFact, SummaryEdge<D, ?> summary) {










 if(!isPrefixOf(summary.getSourceFact(), sourceFact))










 if(!isPrefixOf(summary.getSourceFact(), sourceFact).atLeast(PrefixTestResult.GUARANTEED_PREFIX))










 throw new IllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'", summary, sourceFact));










 










 AccessPath<FieldRef> concreteAccessPath = sourceFact.getAccessPath();



......






......@@ -10,23 +10,26 @@









 ******************************************************************************/










package heros.alias;





















import heros.alias.AccessPath.PrefixTestResult;





















import com.google.common.base.Optional;
































public class AccessPathUtil {





















 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> boolean isPrefixOf(D prefixCandidate, D fact) {










 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> PrefixTestResult isPrefixOf(D prefixCandidate, D fact) {










 if(prefixCandidate.getBaseValue() == null) {










 if(fact.getBaseValue() != null)










 return false;










 return PrefixTestResult.NO_PREFIX;










 } else if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))










 return false;










 return PrefixTestResult.NO_PREFIX;










 










 return prefixCandidate.getAccessPath().isPrefixOf(fact.getAccessPath());










 }










 










 










 public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> Optional<D> applyAbstractedSummary(D sourceFact, SummaryEdge<D, ?> summary) {










 if(!isPrefixOf(summary.getSourceFact(), sourceFact))










 if(!isPrefixOf(summary.getSourceFact(), sourceFact).atLeast(PrefixTestResult.GUARANTEED_PREFIX))










 throw new IllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'", summary, sourceFact));










 










 AccessPath<FieldRef> concreteAccessPath = sourceFact.getAccessPath();



......


 ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;import heros.alias.AccessPath.PrefixTestResult;importheros.alias.AccessPath.PrefixTestResult;import com.google.common.base.Optional;importcom.google.common.base.Optional;public class AccessPathUtil {publicclassAccessPathUtil{ public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> boolean isPrefixOf(D prefixCandidate, D fact) {publicstatic<FieldRef,DextendsFieldSensitiveFact<?,FieldRef,D>>booleanbooleanisPrefixOf(DprefixCandidate,Dfact){ public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> PrefixTestResult isPrefixOf(D prefixCandidate, D fact) {publicstatic<FieldRef,DextendsFieldSensitiveFact<?,FieldRef,D>>PrefixTestResultPrefixTestResultisPrefixOf(DprefixCandidate,Dfact){ if(prefixCandidate.getBaseValue() == null) {if(prefixCandidate.getBaseValue()==null){ if(fact.getBaseValue() != null)if(fact.getBaseValue()!=null) return false;returnfalsefalse; return PrefixTestResult.NO_PREFIX;returnPrefixTestResultPrefixTestResult..NO_PREFIXNO_PREFIX; } else if(!prefixCandidate.getBaseValue().equals(fact.getBaseValue()))}elseif(!prefixCandidate.getBaseValue().equals(fact.getBaseValue())) return false;returnfalsefalse; return PrefixTestResult.NO_PREFIX;returnPrefixTestResultPrefixTestResult..NO_PREFIXNO_PREFIX;  return prefixCandidate.getAccessPath().isPrefixOf(fact.getAccessPath());returnprefixCandidate.getAccessPath().isPrefixOf(fact.getAccessPath()); }}   public static <FieldRef, D extends FieldSensitiveFact<?, FieldRef, D>> Optional<D> applyAbstractedSummary(D sourceFact, SummaryEdge<D, ?> summary) {publicstatic<FieldRef,DextendsFieldSensitiveFact<?,FieldRef,D>>Optional<D>applyAbstractedSummary(DsourceFact,SummaryEdge<D,?>summary){ if(!isPrefixOf(summary.getSourceFact(), sourceFact))if(!isPrefixOf(summary.getSourceFact(),sourceFact)) if(!isPrefixOf(summary.getSourceFact(), sourceFact).atLeast(PrefixTestResult.GUARANTEED_PREFIX))if(!isPrefixOf(summary.getSourceFact(),sourceFact)..atLeastatLeast((PrefixTestResultPrefixTestResult..GUARANTEED_PREFIXGUARANTEED_PREFIX))) throw new IllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'", summary, sourceFact));thrownewIllegalArgumentException(String.format("Source fact in given summary edge '%s' is not a prefix of the given source fact '%s'",summary,sourceFact));  AccessPath<FieldRef> concreteAccessPath = sourceFact.getAccessPath();AccessPath<FieldRef>concreteAccessPath=sourceFact.getAccessPath();








src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ edf48ee6






......@@ -14,6 +14,7 @@ import heros.DontSynchronize;









import heros.FlowFunctionCache;










import heros.InterproceduralCFG;










import heros.SynchronizedBy;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.solver.CountingThreadPoolExecutor;



......@@ -262,21 +263,19 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //because we have observed a potentially new incoming edge into <sP,d3>










 if (endSumm != null)










 for(SummaryEdge<D, N> summary: endSumm) {










 if(AccessPathUtil.isPrefixOf(summary.getSourceFact(), d3.getFact())) {










 Optional<D> d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 if(d4.isPresent()) {










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(ConstrainedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }










 Optional<D> d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 if(d4.isPresent()) {










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(ConstrainedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }










 }










 } 










 }










 }










 }










 }



......@@ -294,7 +293,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 ConcurrentHashSet<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 for(PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint)) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(edges.remove(edge)) {










 logger.trace("RESUME-EDGE: {}", edge);










 propagate(edge, edge instanceof ConcretizationPathEdge ? edge.getTarget() : null, false);



......@@ -308,7 +307,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 Set<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 for(final PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource())) {










 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}", edge, incomingEdge);










 










 Constraint<FieldRef> constraint = new DeltaConstraint<FieldRef>(incomingEdge.getCalleeSourceFact().getAccessPath(), edge.factAtSource().getAccessPath());



......@@ -383,7 +382,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 // compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);










 










 if(AccessPathUtil.isPrefixOf(d1, incomingEdge.getCalleeSourceFact())) {










 if(AccessPathUtil.isPrefixOf(d1, incomingEdge.getCalleeSourceFact()) == PrefixTestResult.GUARANTEED_PREFIX) {










 Optional<D> concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);










 if(concreteCalleeExitFact.isPresent()) {










 Set<ConstrainedFact<FieldRef, D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact.get(), callSite);



......@@ -480,12 +479,12 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagate = false;










 else {










 Set<N> callSitesWithInterest = Sets.newHashSet();










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixedWith(calleeMethod, pathEdge.factAtSource())) {










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixedWith(calleeMethod, pathEdge.factAtSource())) { //guaranteed










 callSitesWithInterest.add(incEdge.getCallSite());










 }










 propagate = !callSitesWithInterest.isEmpty();










 










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixesOf(calleeMethod, pathEdge.factAtSource())) {










 for(IncomingEdge<D, N> incEdge : incomingEdgesPotentialPrefixesOf(calleeMethod, pathEdge.factAtSource())) { //potential










 if(visited.containsKey(incEdge.getCallSite())) {










 if(visited.get(incEdge.getCallSite()) != null)










 propagate |= visited.get(incEdge.getCallSite());



......@@ -522,7 +521,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 ConcurrentHashSet<PathEdge<N, D>> pe = pausedEdges.get(calleeMethod);










 if(pe != null) {










 for(PathEdge<N, D> edge : pe) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), pathEdge.factAtSource()))










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), pathEdge.factAtSource()) == PrefixTestResult.GUARANTEED_PREFIX)










 return true;










 }










 }



......@@ -613,7 +612,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return Sets.filter(map, new Predicate<SummaryEdge<D,N>>() {










 @Override










 public boolean apply(SummaryEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3) || AccessPathUtil.isPrefixOf(d3, edge.getSourceFact());










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3) == PrefixTestResult.GUARANTEED_PREFIX;










 }










 });










 }



......@@ -637,17 +636,17 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return Sets.filter(result, new Predicate<IncomingEdge<D,N>>() {










 @Override










 public boolean apply(IncomingEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(fact, edge.getCalleeSourceFact());










 return AccessPathUtil.isPrefixOf(fact, edge.getCalleeSourceFact()) == PrefixTestResult.GUARANTEED_PREFIX;










 }










 });










 }










 










 protected Set<IncomingEdge<D, N>> incomingEdgesPrefixesOf(M m, final D fact) {










 protected Set<IncomingEdge<D, N>> incomingEdgesPotentialPrefixesOf(M m, final D fact) {










 Set<IncomingEdge<D, N>> result = incoming(m);










 return Sets.filter(result, new Predicate<IncomingEdge<D,N>>() {










 @Override










 public boolean apply(IncomingEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(edge.getCalleeSourceFact(), fact);










 return AccessPathUtil.isPrefixOf(edge.getCalleeSourceFact(), fact).atLeast(PrefixTestResult.POTENTIAL_PREFIX);










 }










 });










 }



......












src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ edf48ee6








src/heros/alias/FieldSensitiveIFDSSolver.java










View file @ edf48ee6


edf48ee6



......@@ -14,6 +14,7 @@ import heros.DontSynchronize;









import heros.FlowFunctionCache;










import heros.InterproceduralCFG;










import heros.SynchronizedBy;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.solver.CountingThreadPoolExecutor;



......@@ -262,21 +263,19 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //because we have observed a potentially new incoming edge into <sP,d3>










 if (endSumm != null)










 for(SummaryEdge<D, N> summary: endSumm) {










 if(AccessPathUtil.isPrefixOf(summary.getSourceFact(), d3.getFact())) {










 Optional<D> d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 if(d4.isPresent()) {










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(ConstrainedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }










 Optional<D> d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 if(d4.isPresent()) {










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(ConstrainedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }










 }










 } 










 }










 }










 }










 }



......@@ -294,7 +293,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 ConcurrentHashSet<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 for(PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint)) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(edges.remove(edge)) {










 logger.trace("RESUME-EDGE: {}", edge);










 propagate(edge, edge instanceof ConcretizationPathEdge ? edge.getTarget() : null, false);



......@@ -308,7 +307,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 Set<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 for(final PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource())) {










 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}", edge, incomingEdge);










 










 Constraint<FieldRef> constraint = new DeltaConstraint<FieldRef>(incomingEdge.getCalleeSourceFact().getAccessPath(), edge.factAtSource().getAccessPath());



......@@ -383,7 +382,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 // compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);










 










 if(AccessPathUtil.isPrefixOf(d1, incomingEdge.getCalleeSourceFact())) {










 if(AccessPathUtil.isPrefixOf(d1, incomingEdge.getCalleeSourceFact()) == PrefixTestResult.GUARANTEED_PREFIX) {










 Optional<D> concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);










 if(concreteCalleeExitFact.isPresent()) {










 Set<ConstrainedFact<FieldRef, D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact.get(), callSite);



......@@ -480,12 +479,12 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagate = false;










 else {










 Set<N> callSitesWithInterest = Sets.newHashSet();










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixedWith(calleeMethod, pathEdge.factAtSource())) {










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixedWith(calleeMethod, pathEdge.factAtSource())) { //guaranteed










 callSitesWithInterest.add(incEdge.getCallSite());










 }










 propagate = !callSitesWithInterest.isEmpty();










 










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixesOf(calleeMethod, pathEdge.factAtSource())) {










 for(IncomingEdge<D, N> incEdge : incomingEdgesPotentialPrefixesOf(calleeMethod, pathEdge.factAtSource())) { //potential










 if(visited.containsKey(incEdge.getCallSite())) {










 if(visited.get(incEdge.getCallSite()) != null)










 propagate |= visited.get(incEdge.getCallSite());



......@@ -522,7 +521,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 ConcurrentHashSet<PathEdge<N, D>> pe = pausedEdges.get(calleeMethod);










 if(pe != null) {










 for(PathEdge<N, D> edge : pe) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), pathEdge.factAtSource()))










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), pathEdge.factAtSource()) == PrefixTestResult.GUARANTEED_PREFIX)










 return true;










 }










 }



......@@ -613,7 +612,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return Sets.filter(map, new Predicate<SummaryEdge<D,N>>() {










 @Override










 public boolean apply(SummaryEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3) || AccessPathUtil.isPrefixOf(d3, edge.getSourceFact());










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3) == PrefixTestResult.GUARANTEED_PREFIX;










 }










 });










 }



......@@ -637,17 +636,17 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return Sets.filter(result, new Predicate<IncomingEdge<D,N>>() {










 @Override










 public boolean apply(IncomingEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(fact, edge.getCalleeSourceFact());










 return AccessPathUtil.isPrefixOf(fact, edge.getCalleeSourceFact()) == PrefixTestResult.GUARANTEED_PREFIX;










 }










 });










 }










 










 protected Set<IncomingEdge<D, N>> incomingEdgesPrefixesOf(M m, final D fact) {










 protected Set<IncomingEdge<D, N>> incomingEdgesPotentialPrefixesOf(M m, final D fact) {










 Set<IncomingEdge<D, N>> result = incoming(m);










 return Sets.filter(result, new Predicate<IncomingEdge<D,N>>() {










 @Override










 public boolean apply(IncomingEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(edge.getCalleeSourceFact(), fact);










 return AccessPathUtil.isPrefixOf(edge.getCalleeSourceFact(), fact).atLeast(PrefixTestResult.POTENTIAL_PREFIX);










 }










 });










 }



......






......@@ -14,6 +14,7 @@ import heros.DontSynchronize;









import heros.FlowFunctionCache;










import heros.InterproceduralCFG;










import heros.SynchronizedBy;










import heros.alias.AccessPath.PrefixTestResult;










import heros.alias.FlowFunction.ConstrainedFact;










import heros.alias.FlowFunction.Constraint;










import heros.solver.CountingThreadPoolExecutor;



......@@ -262,21 +263,19 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //because we have observed a potentially new incoming edge into <sP,d3>










 if (endSumm != null)










 for(SummaryEdge<D, N> summary: endSumm) {










 if(AccessPathUtil.isPrefixOf(summary.getSourceFact(), d3.getFact())) {










 Optional<D> d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 if(d4.isPresent()) {










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(ConstrainedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }










 Optional<D> d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);










 if(d4.isPresent()) {










 //for each return site










 for(N retSiteN: returnSiteNs) {










 //compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);










 //for each target value of the function










 for(ConstrainedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }










 }










 } 










 }










 }










 }










 }



......@@ -294,7 +293,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 ConcurrentHashSet<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 for(PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint)) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint) == PrefixTestResult.GUARANTEED_PREFIX) {










 if(edges.remove(edge)) {










 logger.trace("RESUME-EDGE: {}", edge);










 propagate(edge, edge instanceof ConcretizationPathEdge ? edge.getTarget() : null, false);



......@@ -308,7 +307,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 Set<PathEdge<N, D>> edges = pausedEdges.get(method);










 if(edges != null) {










 for(final PathEdge<N, D> edge : edges) {










 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource())) {










 if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}", edge, incomingEdge);










 










 Constraint<FieldRef> constraint = new DeltaConstraint<FieldRef>(incomingEdge.getCalleeSourceFact().getAccessPath(), edge.factAtSource().getAccessPath());



......@@ -383,7 +382,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 // compute return-flow function










 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);










 










 if(AccessPathUtil.isPrefixOf(d1, incomingEdge.getCalleeSourceFact())) {










 if(AccessPathUtil.isPrefixOf(d1, incomingEdge.getCalleeSourceFact()) == PrefixTestResult.GUARANTEED_PREFIX) {










 Optional<D> concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);










 if(concreteCalleeExitFact.isPresent()) {










 Set<ConstrainedFact<FieldRef, D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact.get(), callSite);



......@@ -480,12 +479,12 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagate = false;










 else {










 Set<N> callSitesWithInterest = Sets.newHashSet();










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixedWith(calleeMethod, pathEdge.factAtSource())) {










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixedWith(calleeMethod, pathEdge.factAtSource())) { //guaranteed










 callSitesWithInterest.add(incEdge.getCallSite());










 }










 propagate = !callSitesWithInterest.isEmpty();










 










 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixesOf(calleeMethod, pathEdge.factAtSource())) {










 for(IncomingEdge<D, N> incEdge : incomingEdgesPotentialPrefixesOf(calleeMethod, pathEdge.factAtSource())) { //potential










 if(visited.containsKey(incEdge.getCallSite())) {










 if(visited.get(incEdge.getCallSite()) != null)










 propagate |= visited.get(incEdge.getCallSite());



......@@ -522,7 +521,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 ConcurrentHashSet<PathEdge<N, D>> pe = pausedEdges.get(calleeMethod);










 if(pe != null) {










 for(PathEdge<N, D> edge : pe) {










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), pathEdge.factAtSource()))










 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), pathEdge.factAtSource()) == PrefixTestResult.GUARANTEED_PREFIX)










 return true;










 }










 }



......@@ -613,7 +612,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return Sets.filter(map, new Predicate<SummaryEdge<D,N>>() {










 @Override










 public boolean apply(SummaryEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3) || AccessPathUtil.isPrefixOf(d3, edge.getSourceFact());










 return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3) == PrefixTestResult.GUARANTEED_PREFIX;










 }










 });










 }



......@@ -637,17 +636,17 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 return Sets.filter(result, new Predicate<IncomingEdge<D,N>>() {










 @Override










 public boolean apply(IncomingEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(fact, edge.getCalleeSourceFact());










 return AccessPathUtil.isPrefixOf(fact, edge.getCalleeSourceFact()) == PrefixTestResult.GUARANTEED_PREFIX;










 }










 });










 }










 










 protected Set<IncomingEdge<D, N>> incomingEdgesPrefixesOf(M m, final D fact) {










 protected Set<IncomingEdge<D, N>> incomingEdgesPotentialPrefixesOf(M m, final D fact) {










 Set<IncomingEdge<D, N>> result = incoming(m);










 return Sets.filter(result, new Predicate<IncomingEdge<D,N>>() {










 @Override










 public boolean apply(IncomingEdge<D, N> edge) {










 return AccessPathUtil.isPrefixOf(edge.getCalleeSourceFact(), fact);










 return AccessPathUtil.isPrefixOf(edge.getCalleeSourceFact(), fact).atLeast(PrefixTestResult.POTENTIAL_PREFIX);










 }










 });










 }



......


import heros.FlowFunctionCache;importheros.FlowFunctionCache;import heros.InterproceduralCFG;importheros.InterproceduralCFG;import heros.SynchronizedBy;importheros.SynchronizedBy;import heros.alias.AccessPath.PrefixTestResult;importheros.alias.AccessPath.PrefixTestResult;import heros.alias.FlowFunction.ConstrainedFact;importheros.alias.FlowFunction.ConstrainedFact;import heros.alias.FlowFunction.Constraint;importheros.alias.FlowFunction.Constraint;import heros.solver.CountingThreadPoolExecutor;importheros.solver.CountingThreadPoolExecutor; //because we have observed a potentially new incoming edge into <sP,d3>//because we have observed a potentially new incoming edge into <sP,d3> if (endSumm != null)if(endSumm!=null) for(SummaryEdge<D, N> summary: endSumm) {for(SummaryEdge<D,N>summary:endSumm){ if(AccessPathUtil.isPrefixOf(summary.getSourceFact(), d3.getFact())) {if(AccessPathUtil.isPrefixOf(summary.getSourceFact(),d3.getFact())){ Optional<D> d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);Optional<D>d4=AccessPathUtil.applyAbstractedSummary(d3.getFact(),summary); if(d4.isPresent()) {if(d4.isPresent()){ //for each return site//for each return site for(N retSiteN: returnSiteNs) {for(NretSiteN:returnSiteNs){ //compute return-flow function//compute return-flow function FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);FlowFunction<FieldRef,D>retFunction=flowFunctions.getReturnFlowFunction(n,sCalledProcN,summary.getTargetStmt(),retSiteN); //for each target value of the function//for each target value of the function for(ConstrainedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {for(ConstrainedFact<FieldRef,D>d5:computeReturnFlowFunction(retFunction,d4.get(),n)){ D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());Dd5p_restoredCtx=restoreContextOnReturnedFact(d2,d5.getFact()); propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);propagate(newPathEdge<>(d1,retSiteN,d5p_restoredCtx),n,false); }} Optional<D> d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);Optional<D>d4=AccessPathUtil.applyAbstractedSummary(d3.getFact(),summary); if(d4.isPresent()) {if(d4.isPresent()){ //for each return site//for each return site for(N retSiteN: returnSiteNs) {for(NretSiteN:returnSiteNs){ //compute return-flow function//compute return-flow function FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);FlowFunction<FieldRef,D>retFunction=flowFunctions.getReturnFlowFunction(n,sCalledProcN,summary.getTargetStmt(),retSiteN); //for each target value of the function//for each target value of the function for(ConstrainedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {for(ConstrainedFact<FieldRef,D>d5:computeReturnFlowFunction(retFunction,d4.get(),n)){ D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());Dd5p_restoredCtx=restoreContextOnReturnedFact(d2,d5.getFact()); propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);propagate(newPathEdge<>(d1,retSiteN,d5p_restoredCtx),n,false); }} }} } }  }} }} }} }} ConcurrentHashSet<PathEdge<N, D>> edges = pausedEdges.get(method);ConcurrentHashSet<PathEdge<N,D>>edges=pausedEdges.get(method); if(edges != null) {if(edges!=null){ for(PathEdge<N, D> edge : edges) {for(PathEdge<N,D>edge:edges){ if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint)) {if(AccessPathUtil.isPrefixOf(edge.factAtSource(),factAtMethodStartPoint)){ if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint) == PrefixTestResult.GUARANTEED_PREFIX) {if(AccessPathUtil.isPrefixOf(edge.factAtSource(),factAtMethodStartPoint) ==== PrefixTestResultPrefixTestResult..GUARANTEED_PREFIXGUARANTEED_PREFIX){ if(edges.remove(edge)) {if(edges.remove(edge)){ logger.trace("RESUME-EDGE: {}", edge);logger.trace("RESUME-EDGE: {}",edge); propagate(edge, edge instanceof ConcretizationPathEdge ? edge.getTarget() : null, false);propagate(edge,edgeinstanceofConcretizationPathEdge?edge.getTarget():null,false); Set<PathEdge<N, D>> edges = pausedEdges.get(method);Set<PathEdge<N,D>>edges=pausedEdges.get(method); if(edges != null) {if(edges!=null){ for(final PathEdge<N, D> edge : edges) {for(finalPathEdge<N,D>edge:edges){ if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource())) {if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(),edge.factAtSource())){ if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(), edge.factAtSource()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {if(AccessPathUtil.isPrefixOf(incomingEdge.getCalleeSourceFact(),edge.factAtSource())..atLeastatLeast((PrefixTestResultPrefixTestResult..POTENTIAL_PREFIXPOTENTIAL_PREFIX))){ logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}", edge, incomingEdge);logger.trace("RECHECKING-PAUSED-EDGE: {} for new incoming edge {}",edge,incomingEdge);  Constraint<FieldRef> constraint = new DeltaConstraint<FieldRef>(incomingEdge.getCalleeSourceFact().getAccessPath(), edge.factAtSource().getAccessPath());Constraint<FieldRef>constraint=newDeltaConstraint<FieldRef>(incomingEdge.getCalleeSourceFact().getAccessPath(),edge.factAtSource().getAccessPath()); // compute return-flow function// compute return-flow function FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);FlowFunction<FieldRef,D>retFunction=flowFunctions.getReturnFlowFunction(callSite,methodThatNeedsSummary,n,retSiteC);  if(AccessPathUtil.isPrefixOf(d1, incomingEdge.getCalleeSourceFact())) {if(AccessPathUtil.isPrefixOf(d1,incomingEdge.getCalleeSourceFact())){ if(AccessPathUtil.isPrefixOf(d1, incomingEdge.getCalleeSourceFact()) == PrefixTestResult.GUARANTEED_PREFIX) {if(AccessPathUtil.isPrefixOf(d1,incomingEdge.getCalleeSourceFact()) ==== PrefixTestResultPrefixTestResult..GUARANTEED_PREFIXGUARANTEED_PREFIX){ Optional<D> concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);Optional<D>concreteCalleeExitFact=AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(),summaryEdge); if(concreteCalleeExitFact.isPresent()) {if(concreteCalleeExitFact.isPresent()){ Set<ConstrainedFact<FieldRef, D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact.get(), callSite);Set<ConstrainedFact<FieldRef,D>>callerTargetFacts=computeReturnFlowFunction(retFunction,concreteCalleeExitFact.get(),callSite); propagate = false;propagate=false; else {else{ Set<N> callSitesWithInterest = Sets.newHashSet();Set<N>callSitesWithInterest=Sets.newHashSet(); for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixedWith(calleeMethod, pathEdge.factAtSource())) {for(IncomingEdge<D,N>incEdge:incomingEdgesPrefixedWith(calleeMethod,pathEdge.factAtSource())){ for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixedWith(calleeMethod, pathEdge.factAtSource())) { //guaranteedfor(IncomingEdge<D,N>incEdge:incomingEdgesPrefixedWith(calleeMethod,pathEdge.factAtSource())){ //guaranteed//guaranteed callSitesWithInterest.add(incEdge.getCallSite());callSitesWithInterest.add(incEdge.getCallSite()); }} propagate = !callSitesWithInterest.isEmpty();propagate=!callSitesWithInterest.isEmpty();  for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixesOf(calleeMethod, pathEdge.factAtSource())) {for(IncomingEdge<D,N>incEdge:incomingEdgesPrefixesOf(calleeMethod,pathEdge.factAtSource())){ for(IncomingEdge<D, N> incEdge : incomingEdgesPotentialPrefixesOf(calleeMethod, pathEdge.factAtSource())) { //potentialfor(IncomingEdge<D,N>incEdge:incomingEdgesPotentialPrefixesOfotentialP(calleeMethod,pathEdge.factAtSource())){ //potential//potential if(visited.containsKey(incEdge.getCallSite())) {if(visited.containsKey(incEdge.getCallSite())){ if(visited.get(incEdge.getCallSite()) != null)if(visited.get(incEdge.getCallSite())!=null) propagate |= visited.get(incEdge.getCallSite());propagate|=visited.get(incEdge.getCallSite()); ConcurrentHashSet<PathEdge<N, D>> pe = pausedEdges.get(calleeMethod);ConcurrentHashSet<PathEdge<N,D>>pe=pausedEdges.get(calleeMethod); if(pe != null) {if(pe!=null){ for(PathEdge<N, D> edge : pe) {for(PathEdge<N,D>edge:pe){ if(AccessPathUtil.isPrefixOf(edge.factAtSource(), pathEdge.factAtSource()))if(AccessPathUtil.isPrefixOf(edge.factAtSource(),pathEdge.factAtSource())) if(AccessPathUtil.isPrefixOf(edge.factAtSource(), pathEdge.factAtSource()) == PrefixTestResult.GUARANTEED_PREFIX)if(AccessPathUtil.isPrefixOf(edge.factAtSource(),pathEdge.factAtSource()) ==== PrefixTestResultPrefixTestResult..GUARANTEED_PREFIXGUARANTEED_PREFIX) return true;returntrue; }} }} return Sets.filter(map, new Predicate<SummaryEdge<D,N>>() {returnSets.filter(map,newPredicate<SummaryEdge<D,N>>(){ @Override@Override public boolean apply(SummaryEdge<D, N> edge) {publicbooleanapply(SummaryEdge<D,N>edge){ return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3) || AccessPathUtil.isPrefixOf(d3, edge.getSourceFact());returnAccessPathUtil.isPrefixOf(edge.getSourceFact(),d3)|||| AccessPathUtilAccessPathUtil..isPrefixOfisPrefixOf((d3d3,, edgeedge..getSourceFactgetSourceFact());()) return AccessPathUtil.isPrefixOf(edge.getSourceFact(), d3) == PrefixTestResult.GUARANTEED_PREFIX;returnAccessPathUtil.isPrefixOf(edge.getSourceFact(),d3)==== PrefixTestResultPrefixTestResult..GUARANTEED_PREFIXGUARANTEED_PREFIX; }} });}); }} return Sets.filter(result, new Predicate<IncomingEdge<D,N>>() {returnSets.filter(result,newPredicate<IncomingEdge<D,N>>(){ @Override@Override public boolean apply(IncomingEdge<D, N> edge) {publicbooleanapply(IncomingEdge<D,N>edge){ return AccessPathUtil.isPrefixOf(fact, edge.getCalleeSourceFact());returnAccessPathUtil.isPrefixOf(fact,edge.getCalleeSourceFact()); return AccessPathUtil.isPrefixOf(fact, edge.getCalleeSourceFact()) == PrefixTestResult.GUARANTEED_PREFIX;returnAccessPathUtil.isPrefixOf(fact,edge.getCalleeSourceFact()) ==== PrefixTestResultPrefixTestResult..GUARANTEED_PREFIXGUARANTEED_PREFIX; }} });}); }}  protected Set<IncomingEdge<D, N>> incomingEdgesPrefixesOf(M m, final D fact) {protectedSet<IncomingEdge<D,N>>incomingEdgesPrefixesOf(Mm,finalDfact){ protected Set<IncomingEdge<D, N>> incomingEdgesPotentialPrefixesOf(M m, final D fact) {protectedSet<IncomingEdge<D,N>>incomingEdgesPotentialPrefixesOfotentialP(Mm,finalDfact){ Set<IncomingEdge<D, N>> result = incoming(m);Set<IncomingEdge<D,N>>result=incoming(m); return Sets.filter(result, new Predicate<IncomingEdge<D,N>>() {returnSets.filter(result,newPredicate<IncomingEdge<D,N>>(){ @Override@Override public boolean apply(IncomingEdge<D, N> edge) {publicbooleanapply(IncomingEdge<D,N>edge){ return AccessPathUtil.isPrefixOf(edge.getCalleeSourceFact(), fact);returnAccessPathUtil.isPrefixOf(edge.getCalleeSourceFact(),fact); return AccessPathUtil.isPrefixOf(edge.getCalleeSourceFact(), fact).atLeast(PrefixTestResult.POTENTIAL_PREFIX);returnAccessPathUtil.isPrefixOf(edge.getCalleeSourceFact(),fact)..atLeastatLeast((PrefixTestResultPrefixTestResult..POTENTIAL_PREFIXPOTENTIAL_PREFIX);) }} });}); }}








test/heros/alias/AccessPathUtilTest.java








View file @ edf48ee6






......@@ -10,81 +10,83 @@









 ******************************************************************************/










package heros.alias;





















import static heros.alias.AccessPath.PrefixTestResult.*;










import static heros.alias.AccessPathUtil.applyAbstractedSummary;










import static heros.alias.AccessPathUtil.isPrefixOf;










import static org.junit.Assert.assertEquals;










import static org.junit.Assert.assertFalse;










import static org.junit.Assert.assertNull;










import static org.junit.Assert.assertTrue;










import heros.alias.AccessPath.PrefixTestResult;





















import org.junit.Assert;










import org.junit.Test;





















public class AccessPathUtilTest {





















 @Test










 public void testBaseValuePrefixOfFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a"), new Fact("a.f")));










 assertFalse(isPrefixOf(new Fact("a.f"), new Fact("a")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a"), new Fact("a.f")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a")));










 }










 










 @Test










 public void testBaseValueIdentity() {










 assertTrue(isPrefixOf(new Fact("a"), new Fact("a")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a"), new Fact("a")));










 }










 










 @Test










 public void testFieldAccessPrefixOfFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a.b"), new Fact("a.b.c")));










 assertFalse(isPrefixOf(new Fact("a.b.c"), new Fact("a.b")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.b"), new Fact("a.b.c")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.b.c"), new Fact("a.b")));










 }










 










 @Test










 public void testPrefixOfFieldAccessWithExclusion() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a.g")));










 assertFalse(isPrefixOf(new Fact("a.g"), new Fact("a^f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.g"), new Fact("a^f")));










 }










 










 @Test










 public void testIdentityWithExclusion() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a^f")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f,g")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a^f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f,g"), new Fact("a^f,g")));










 }










 










 @Test










 public void testDifferentExclusions() {










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^g")));










 assertEquals(POTENTIAL_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a^g")));










 assertEquals(POTENTIAL_PREFIX, isPrefixOf(new Fact("a^f^f,g"), new Fact("a^g^f,g")));










 assertEquals(POTENTIAL_PREFIX, isPrefixOf(new Fact("a^f^f"), new Fact("a^f^g")));










 }










 










 @Test










 public void testMixedFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a.g.g")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a.f.h")));










 assertTrue(isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.g.g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.f.h")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 }










 










 @Test










 public void testMultipleExclusions() {










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^g")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f,g"), new Fact("a^g")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 }





















 @Test










 public void testDifferentAccessPathLength() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a.g.h")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.g.h")));










 }










 










 @Test










 public void testExclusionRequiresFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a"), new Fact("a^f")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a"), new Fact("a^f")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a")));










 










 assertTrue(isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 assertFalse(isPrefixOf(new Fact("a.f^g"), new Fact("a.f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.f^g"), new Fact("a.f")));










 










 assertTrue(isPrefixOf(new Fact("a.f"), new Fact("a.f^g^h")));










 assertFalse(isPrefixOf(new Fact("a.f^g^h"), new Fact("a.f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a.f^g^h")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.f^g^h"), new Fact("a.f")));










 }










 










 @Test



......












test/heros/alias/AccessPathUtilTest.java








View file @ edf48ee6








test/heros/alias/AccessPathUtilTest.java










View file @ edf48ee6


edf48ee6



......@@ -10,81 +10,83 @@









 ******************************************************************************/










package heros.alias;





















import static heros.alias.AccessPath.PrefixTestResult.*;










import static heros.alias.AccessPathUtil.applyAbstractedSummary;










import static heros.alias.AccessPathUtil.isPrefixOf;










import static org.junit.Assert.assertEquals;










import static org.junit.Assert.assertFalse;










import static org.junit.Assert.assertNull;










import static org.junit.Assert.assertTrue;










import heros.alias.AccessPath.PrefixTestResult;





















import org.junit.Assert;










import org.junit.Test;





















public class AccessPathUtilTest {





















 @Test










 public void testBaseValuePrefixOfFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a"), new Fact("a.f")));










 assertFalse(isPrefixOf(new Fact("a.f"), new Fact("a")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a"), new Fact("a.f")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a")));










 }










 










 @Test










 public void testBaseValueIdentity() {










 assertTrue(isPrefixOf(new Fact("a"), new Fact("a")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a"), new Fact("a")));










 }










 










 @Test










 public void testFieldAccessPrefixOfFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a.b"), new Fact("a.b.c")));










 assertFalse(isPrefixOf(new Fact("a.b.c"), new Fact("a.b")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.b"), new Fact("a.b.c")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.b.c"), new Fact("a.b")));










 }










 










 @Test










 public void testPrefixOfFieldAccessWithExclusion() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a.g")));










 assertFalse(isPrefixOf(new Fact("a.g"), new Fact("a^f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.g"), new Fact("a^f")));










 }










 










 @Test










 public void testIdentityWithExclusion() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a^f")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f,g")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a^f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f,g"), new Fact("a^f,g")));










 }










 










 @Test










 public void testDifferentExclusions() {










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^g")));










 assertEquals(POTENTIAL_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a^g")));










 assertEquals(POTENTIAL_PREFIX, isPrefixOf(new Fact("a^f^f,g"), new Fact("a^g^f,g")));










 assertEquals(POTENTIAL_PREFIX, isPrefixOf(new Fact("a^f^f"), new Fact("a^f^g")));










 }










 










 @Test










 public void testMixedFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a.g.g")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a.f.h")));










 assertTrue(isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.g.g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.f.h")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 }










 










 @Test










 public void testMultipleExclusions() {










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^g")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f,g"), new Fact("a^g")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 }





















 @Test










 public void testDifferentAccessPathLength() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a.g.h")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.g.h")));










 }










 










 @Test










 public void testExclusionRequiresFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a"), new Fact("a^f")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a"), new Fact("a^f")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a")));










 










 assertTrue(isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 assertFalse(isPrefixOf(new Fact("a.f^g"), new Fact("a.f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.f^g"), new Fact("a.f")));










 










 assertTrue(isPrefixOf(new Fact("a.f"), new Fact("a.f^g^h")));










 assertFalse(isPrefixOf(new Fact("a.f^g^h"), new Fact("a.f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a.f^g^h")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.f^g^h"), new Fact("a.f")));










 }










 










 @Test



......






......@@ -10,81 +10,83 @@









 ******************************************************************************/










package heros.alias;





















import static heros.alias.AccessPath.PrefixTestResult.*;










import static heros.alias.AccessPathUtil.applyAbstractedSummary;










import static heros.alias.AccessPathUtil.isPrefixOf;










import static org.junit.Assert.assertEquals;










import static org.junit.Assert.assertFalse;










import static org.junit.Assert.assertNull;










import static org.junit.Assert.assertTrue;










import heros.alias.AccessPath.PrefixTestResult;





















import org.junit.Assert;










import org.junit.Test;





















public class AccessPathUtilTest {





















 @Test










 public void testBaseValuePrefixOfFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a"), new Fact("a.f")));










 assertFalse(isPrefixOf(new Fact("a.f"), new Fact("a")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a"), new Fact("a.f")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a")));










 }










 










 @Test










 public void testBaseValueIdentity() {










 assertTrue(isPrefixOf(new Fact("a"), new Fact("a")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a"), new Fact("a")));










 }










 










 @Test










 public void testFieldAccessPrefixOfFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a.b"), new Fact("a.b.c")));










 assertFalse(isPrefixOf(new Fact("a.b.c"), new Fact("a.b")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.b"), new Fact("a.b.c")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.b.c"), new Fact("a.b")));










 }










 










 @Test










 public void testPrefixOfFieldAccessWithExclusion() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a.g")));










 assertFalse(isPrefixOf(new Fact("a.g"), new Fact("a^f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.g"), new Fact("a^f")));










 }










 










 @Test










 public void testIdentityWithExclusion() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a^f")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f,g")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a^f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f,g"), new Fact("a^f,g")));










 }










 










 @Test










 public void testDifferentExclusions() {










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^g")));










 assertEquals(POTENTIAL_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a^g")));










 assertEquals(POTENTIAL_PREFIX, isPrefixOf(new Fact("a^f^f,g"), new Fact("a^g^f,g")));










 assertEquals(POTENTIAL_PREFIX, isPrefixOf(new Fact("a^f^f"), new Fact("a^f^g")));










 }










 










 @Test










 public void testMixedFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a.g.g")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a.f.h")));










 assertTrue(isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.g.g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.f.h")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 }










 










 @Test










 public void testMultipleExclusions() {










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^g")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f,g"), new Fact("a^g")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));










 }





















 @Test










 public void testDifferentAccessPathLength() {










 assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a.g.h")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.g.h")));










 }










 










 @Test










 public void testExclusionRequiresFieldAccess() {










 assertTrue(isPrefixOf(new Fact("a"), new Fact("a^f")));










 assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a"), new Fact("a^f")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a")));










 










 assertTrue(isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 assertFalse(isPrefixOf(new Fact("a.f^g"), new Fact("a.f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.f^g"), new Fact("a.f")));










 










 assertTrue(isPrefixOf(new Fact("a.f"), new Fact("a.f^g^h")));










 assertFalse(isPrefixOf(new Fact("a.f^g^h"), new Fact("a.f")));










 assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a.f^g^h")));










 assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.f^g^h"), new Fact("a.f")));










 }










 










 @Test



......


 ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;import static heros.alias.AccessPath.PrefixTestResult.*;importstaticheros.alias.AccessPath.PrefixTestResult.*;import static heros.alias.AccessPathUtil.applyAbstractedSummary;importstaticheros.alias.AccessPathUtil.applyAbstractedSummary;import static heros.alias.AccessPathUtil.isPrefixOf;importstaticheros.alias.AccessPathUtil.isPrefixOf;import static org.junit.Assert.assertEquals;importstaticorg.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;importstaticorg.junit.Assert.assertFalse;import static org.junit.Assert.assertNull;importstaticorg.junit.Assert.assertNull;import static org.junit.Assert.assertTrue;importstaticorg.junit.Assert.assertTrue;import heros.alias.AccessPath.PrefixTestResult;importheros.alias.AccessPath.PrefixTestResult;import org.junit.Assert;importorg.junit.Assert;import org.junit.Test;importorg.junit.Test;public class AccessPathUtilTest {publicclassAccessPathUtilTest{ @Test@Test public void testBaseValuePrefixOfFieldAccess() {publicvoidtestBaseValuePrefixOfFieldAccess(){ assertTrue(isPrefixOf(new Fact("a"), new Fact("a.f")));assertTrueTrue((isPrefixOf(newFact("a"),newFact("a.f"))); assertFalse(isPrefixOf(new Fact("a.f"), new Fact("a")));assertFalseFalse((isPrefixOf(newFact("a.f"),newFact("a"))); assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a"), new Fact("a.f")));assertEqualsEquals((GUARANTEED_PREFIXGUARANTEED_PREFIX,, isPrefixOf(newFact("a"),newFact("a.f"))); assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a")));assertEqualsEquals((NO_PREFIXNO_PREFIX,, isPrefixOf(newFact("a.f"),newFact("a"))); }}  @Test@Test public void testBaseValueIdentity() {publicvoidtestBaseValueIdentity(){ assertTrue(isPrefixOf(new Fact("a"), new Fact("a")));assertTrueTrue((isPrefixOf(newFact("a"),newFact("a"))); assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a"), new Fact("a")));assertEqualsEquals((GUARANTEED_PREFIXGUARANTEED_PREFIX,, isPrefixOf(newFact("a"),newFact("a"))); }}  @Test@Test public void testFieldAccessPrefixOfFieldAccess() {publicvoidtestFieldAccessPrefixOfFieldAccess(){ assertTrue(isPrefixOf(new Fact("a.b"), new Fact("a.b.c")));assertTrueTrue((isPrefixOf(newFact("a.b"),newFact("a.b.c"))); assertFalse(isPrefixOf(new Fact("a.b.c"), new Fact("a.b")));assertFalseFalse((isPrefixOf(newFact("a.b.c"),newFact("a.b"))); assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.b"), new Fact("a.b.c")));assertEqualsEquals((GUARANTEED_PREFIXGUARANTEED_PREFIX,, isPrefixOf(newFact("a.b"),newFact("a.b.c"))); assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.b.c"), new Fact("a.b")));assertEqualsEquals((NO_PREFIXNO_PREFIX,, isPrefixOf(newFact("a.b.c"),newFact("a.b"))); }}  @Test@Test public void testPrefixOfFieldAccessWithExclusion() {publicvoidtestPrefixOfFieldAccessWithExclusion(){ assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a.g")));assertTrueTrue((isPrefixOf(newFact("a^f"),newFact("a.g"))); assertFalse(isPrefixOf(new Fact("a.g"), new Fact("a^f")));assertFalseFalse((isPrefixOf(newFact("a.g"),newFact("a^f"))); assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.g")));assertEqualsEquals((GUARANTEED_PREFIXGUARANTEED_PREFIX,, isPrefixOf(newFact("a^f"),newFact("a.g"))); assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.g"), new Fact("a^f")));assertEqualsEquals((NO_PREFIXNO_PREFIX,, isPrefixOf(newFact("a.g"),newFact("a^f"))); }}  @Test@Test public void testIdentityWithExclusion() {publicvoidtestIdentityWithExclusion(){ assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a^f")));assertTrueTrue((isPrefixOf(newFact("a^f"),newFact("a^f"))); assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f,g")));assertTrueTrue((isPrefixOf(newFact("a^f,g"),newFact("a^f,g"))); assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a^f")));assertEqualsEquals((GUARANTEED_PREFIXGUARANTEED_PREFIX,, isPrefixOf(newFact("a^f"),newFact("a^f"))); assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f,g"), new Fact("a^f,g")));assertEqualsEquals((GUARANTEED_PREFIXGUARANTEED_PREFIX,, isPrefixOf(newFact("a^f,g"),newFact("a^f,g"))); }}  @Test@Test public void testDifferentExclusions() {publicvoidtestDifferentExclusions(){ assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^g")));assertFalse(isPrefixOf(newFact("a^f"),newFact("a^g"))); assertEquals(POTENTIAL_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a^g")));assertEquals(POTENTIAL_PREFIX,isPrefixOf(newFact("a^f"),newFact("a^g"))); assertEquals(POTENTIAL_PREFIX, isPrefixOf(new Fact("a^f^f,g"), new Fact("a^g^f,g")));assertEquals(POTENTIAL_PREFIX,isPrefixOf(newFact("a^f^f,g"),newFact("a^g^f,g"))); assertEquals(POTENTIAL_PREFIX, isPrefixOf(new Fact("a^f^f"), new Fact("a^f^g")));assertEquals(POTENTIAL_PREFIX,isPrefixOf(newFact("a^f^f"),newFact("a^f^g"))); }}  @Test@Test public void testMixedFieldAccess() {publicvoidtestMixedFieldAccess(){ assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a.g.g")));assertTrueTrue((isPrefixOf(newFact("a^f"),newFact("a.g.g"))); assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a.f.h")));assertFalseFalse((isPrefixOf(newFact("a^f"),newFact("a.f.h"))); assertTrue(isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));assertTrueTrue((isPrefixOf(newFact("a.f"),newFact("a.f^g"))); assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.g.g")));assertEqualsEquals((GUARANTEED_PREFIXGUARANTEED_PREFIX,, isPrefixOf(newFact("a^f"),newFact("a.g.g"))); assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.f.h")));assertEqualsEquals((NO_PREFIXNO_PREFIX,, isPrefixOf(newFact("a^f"),newFact("a.f.h"))); assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));assertEqualsEquals((GUARANTEED_PREFIXGUARANTEED_PREFIX,, isPrefixOf(newFact("a.f"),newFact("a.f^g"))); }}  @Test@Test public void testMultipleExclusions() {publicvoidtestMultipleExclusions(){ assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));assertTrueTrue((isPrefixOf(newFact("a^f,g"),newFact("a^f"))); assertTrue(isPrefixOf(new Fact("a^f,g"), new Fact("a^g")));assertTrueTrue((isPrefixOf(newFact("a^f,g"),newFact("a^g"))); assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));assertFalseFalse((isPrefixOf(newFact("a^f"),newFact("a^f,g"))); assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f,g"), new Fact("a^f")));assertEqualsEquals((NO_PREFIXNO_PREFIX,, isPrefixOf(newFact("a^f,g"),newFact("a^f"))); assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f,g"), new Fact("a^g")));assertEqualsEquals((NO_PREFIXNO_PREFIX,, isPrefixOf(newFact("a^f,g"),newFact("a^g"))); assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a^f,g")));assertEqualsEquals((GUARANTEED_PREFIXGUARANTEED_PREFIX,, isPrefixOf(newFact("a^f"),newFact("a^f,g"))); }} @Test@Test public void testDifferentAccessPathLength() {publicvoidtestDifferentAccessPathLength(){ assertTrue(isPrefixOf(new Fact("a^f"), new Fact("a.g.h")));assertTrueTrue((isPrefixOf(newFact("a^f"),newFact("a.g.h"))); assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a.g.h")));assertEqualsEquals((GUARANTEED_PREFIXGUARANTEED_PREFIX,, isPrefixOf(newFact("a^f"),newFact("a.g.h"))); }}  @Test@Test public void testExclusionRequiresFieldAccess() {publicvoidtestExclusionRequiresFieldAccess(){ assertTrue(isPrefixOf(new Fact("a"), new Fact("a^f")));assertTrueTrue((isPrefixOf(newFact("a"),newFact("a^f"))); assertFalse(isPrefixOf(new Fact("a^f"), new Fact("a")));assertFalseFalse((isPrefixOf(newFact("a^f"),newFact("a"))); assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a"), new Fact("a^f")));assertEqualsEquals((GUARANTEED_PREFIXGUARANTEED_PREFIX,, isPrefixOf(newFact("a"),newFact("a^f"))); assertEquals(NO_PREFIX, isPrefixOf(new Fact("a^f"), new Fact("a")));assertEqualsEquals((NO_PREFIXNO_PREFIX,, isPrefixOf(newFact("a^f"),newFact("a")));  assertTrue(isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));assertTrueTrue((isPrefixOf(newFact("a.f"),newFact("a.f^g"))); assertFalse(isPrefixOf(new Fact("a.f^g"), new Fact("a.f")));assertFalseFalse((isPrefixOf(newFact("a.f^g"),newFact("a.f"))); assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a.f^g")));assertEqualsEquals((GUARANTEED_PREFIXGUARANTEED_PREFIX,, isPrefixOf(newFact("a.f"),newFact("a.f^g"))); assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.f^g"), new Fact("a.f")));assertEqualsEquals((NO_PREFIXNO_PREFIX,, isPrefixOf(newFact("a.f^g"),newFact("a.f")));  assertTrue(isPrefixOf(new Fact("a.f"), new Fact("a.f^g^h")));assertTrueTrue((isPrefixOf(newFact("a.f"),newFact("a.f^g^h"))); assertFalse(isPrefixOf(new Fact("a.f^g^h"), new Fact("a.f")));assertFalseFalse((isPrefixOf(newFact("a.f^g^h"),newFact("a.f"))); assertEquals(GUARANTEED_PREFIX, isPrefixOf(new Fact("a.f"), new Fact("a.f^g^h")));assertEqualsEquals((GUARANTEED_PREFIXGUARANTEED_PREFIX,, isPrefixOf(newFact("a.f"),newFact("a.f^g^h"))); assertEquals(NO_PREFIX, isPrefixOf(new Fact("a.f^g^h"), new Fact("a.f")));assertEqualsEquals((NO_PREFIXNO_PREFIX,, isPrefixOf(newFact("a.f^g^h"),newFact("a.f"))); }}  @Test@Test








test/heros/alias/FieldSensitiveIFDSSolverTest.java








View file @ edf48ee6






......@@ -601,4 +601,24 @@ public class FieldSensitiveIFDSSolverTest {









 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void multipleExclusions() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1^h")),










 callSite("b").calls("bar", flow("1^h", "2^h")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("2", writeField("f"), "3^f")),










 callSite("d").calls("xyz", flow("3^f", "4^f")));










 










 helper.method("xyz", 










 startPoints("e"),










 normalStmt("e").succ("f", flow("4", writeField("g"), "5^g")),










 normalStmt("f").succ("g", kill("5^g")));










 










 helper.runSolver(false, "a");










 }










}












test/heros/alias/FieldSensitiveIFDSSolverTest.java








View file @ edf48ee6








test/heros/alias/FieldSensitiveIFDSSolverTest.java










View file @ edf48ee6


edf48ee6



......@@ -601,4 +601,24 @@ public class FieldSensitiveIFDSSolverTest {









 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void multipleExclusions() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1^h")),










 callSite("b").calls("bar", flow("1^h", "2^h")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("2", writeField("f"), "3^f")),










 callSite("d").calls("xyz", flow("3^f", "4^f")));










 










 helper.method("xyz", 










 startPoints("e"),










 normalStmt("e").succ("f", flow("4", writeField("g"), "5^g")),










 normalStmt("f").succ("g", kill("5^g")));










 










 helper.runSolver(false, "a");










 }










}






......@@ -601,4 +601,24 @@ public class FieldSensitiveIFDSSolverTest {









 










 helper.runSolver(false, "a");










 }










 










 @Test










 public void multipleExclusions() {










 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1^h")),










 callSite("b").calls("bar", flow("1^h", "2^h")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("2", writeField("f"), "3^f")),










 callSite("d").calls("xyz", flow("3^f", "4^f")));










 










 helper.method("xyz", 










 startPoints("e"),










 normalStmt("e").succ("f", flow("4", writeField("g"), "5^g")),










 normalStmt("f").succ("g", kill("5^g")));










 










 helper.runSolver(false, "a");










 }










}


  helper.runSolver(false, "a");helper.runSolver(false,"a"); }}  @Test@Test public void multipleExclusions() {publicvoidmultipleExclusions(){ helper.method("foo",helper.method("foo", startPoints("a"),startPoints("a"), normalStmt("a").succ("b", flow("0", "1^h")),normalStmt("a").succ("b",flow("0","1^h")), callSite("b").calls("bar", flow("1^h", "2^h")));callSite("b").calls("bar",flow("1^h","2^h")));  helper.method("bar",helper.method("bar", startPoints("c"),startPoints("c"), normalStmt("c").succ("d", flow("2", writeField("f"), "3^f")),normalStmt("c").succ("d",flow("2",writeField("f"),"3^f")), callSite("d").calls("xyz", flow("3^f", "4^f")));callSite("d").calls("xyz",flow("3^f","4^f")));  helper.method("xyz", helper.method("xyz", startPoints("e"),startPoints("e"), normalStmt("e").succ("f", flow("4", writeField("g"), "5^g")),normalStmt("e").succ("f",flow("4",writeField("g"),"5^g")), normalStmt("f").succ("g", kill("5^g")));normalStmt("f").succ("g",kill("5^g")));  helper.runSolver(false, "a");helper.runSolver(false,"a"); }}}}









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






