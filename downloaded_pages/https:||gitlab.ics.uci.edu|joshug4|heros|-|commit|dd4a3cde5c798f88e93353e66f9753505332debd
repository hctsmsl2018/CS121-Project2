



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

dd4a3cde















Commit
dd4a3cde


authored
Jun 25, 2014
by


Johannes Lerch



Browse files




Using LeakKey to identify leaks not only on the basis of equal source

statements, but also equal call sites to which the flow leaks.






parent
6fd38817













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ dd4a3cde






......@@ -104,6 +104,56 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.



......@@ -111,8 +161,8 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = Collections.newSetFromMap(Maps.<N, Boolean>newConcurrentMap());










 private ConcurrentMap<N,Set<PausedEdge>> pausedPathEdges =










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {



......@@ -126,16 +176,17 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 



......@@ -143,7 +194,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 



......@@ -175,15 +226,15 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(N sourceStmt) {










 return leakedSources.contains(sourceStmt);










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(sourceStmt);










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

dd4a3cde















Commit
dd4a3cde


authored
Jun 25, 2014
by


Johannes Lerch



Browse files




Using LeakKey to identify leaks not only on the basis of equal source

statements, but also equal call sites to which the flow leaks.






parent
6fd38817













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ dd4a3cde






......@@ -104,6 +104,56 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.



......@@ -111,8 +161,8 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = Collections.newSetFromMap(Maps.<N, Boolean>newConcurrentMap());










 private ConcurrentMap<N,Set<PausedEdge>> pausedPathEdges =










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {



......@@ -126,16 +176,17 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 



......@@ -143,7 +194,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 



......@@ -175,15 +226,15 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(N sourceStmt) {










 return leakedSources.contains(sourceStmt);










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(sourceStmt);










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

dd4a3cde







Open sidebar



Joshua Garcia heros
Commits

dd4a3cde




Open sidebar

Joshua Garcia heros
Commits

dd4a3cde


Joshua GarciaherosherosCommits
dd4a3cde








Commit
dd4a3cde


authored
Jun 25, 2014
by


Johannes Lerch



Browse files




Using LeakKey to identify leaks not only on the basis of equal source

statements, but also equal call sites to which the flow leaks.






parent
6fd38817













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ dd4a3cde






......@@ -104,6 +104,56 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.



......@@ -111,8 +161,8 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = Collections.newSetFromMap(Maps.<N, Boolean>newConcurrentMap());










 private ConcurrentMap<N,Set<PausedEdge>> pausedPathEdges =










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {



......@@ -126,16 +176,17 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 



......@@ -143,7 +194,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 



......@@ -175,15 +226,15 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(N sourceStmt) {










 return leakedSources.contains(sourceStmt);










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(sourceStmt);










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
dd4a3cde


authored
Jun 25, 2014
by


Johannes Lerch



Browse files




Using LeakKey to identify leaks not only on the basis of equal source

statements, but also equal call sites to which the flow leaks.






parent
6fd38817













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ dd4a3cde






......@@ -104,6 +104,56 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.



......@@ -111,8 +161,8 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = Collections.newSetFromMap(Maps.<N, Boolean>newConcurrentMap());










 private ConcurrentMap<N,Set<PausedEdge>> pausedPathEdges =










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {



......@@ -126,16 +176,17 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 



......@@ -143,7 +194,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 



......@@ -175,15 +226,15 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(N sourceStmt) {










 return leakedSources.contains(sourceStmt);










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(sourceStmt);










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
dd4a3cde


authored
Jun 25, 2014
by


Johannes Lerch



Browse files



Commit
dd4a3cde


authored
Jun 25, 2014
by


Johannes Lerch

dd4a3cdeauthoredbyJohannes Lerch

Using LeakKey to identify leaks not only on the basis of equal source

statements, but also equal call sites to which the flow leaks.





parent
6fd38817
















parent
6fd38817





parent












Changes
1
1


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/solver/BiDiIFDSSolver.java








View file @ dd4a3cde






......@@ -104,6 +104,56 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.



......@@ -111,8 +161,8 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = Collections.newSetFromMap(Maps.<N, Boolean>newConcurrentMap());










 private ConcurrentMap<N,Set<PausedEdge>> pausedPathEdges =










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {



......@@ -126,16 +176,17 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 



......@@ -143,7 +194,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 



......@@ -175,15 +226,15 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(N sourceStmt) {










 return leakedSources.contains(sourceStmt);










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(sourceStmt);










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {



......














src/heros/solver/BiDiIFDSSolver.java








View file @ dd4a3cde






......@@ -104,6 +104,56 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.



......@@ -111,8 +161,8 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = Collections.newSetFromMap(Maps.<N, Boolean>newConcurrentMap());










 private ConcurrentMap<N,Set<PausedEdge>> pausedPathEdges =










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {



......@@ -126,16 +176,17 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 



......@@ -143,7 +194,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 



......@@ -175,15 +226,15 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(N sourceStmt) {










 return leakedSources.contains(sourceStmt);










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(sourceStmt);










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {



......












src/heros/solver/BiDiIFDSSolver.java








View file @ dd4a3cde








src/heros/solver/BiDiIFDSSolver.java










View file @ dd4a3cde


dd4a3cde



......@@ -104,6 +104,56 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.



......@@ -111,8 +161,8 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = Collections.newSetFromMap(Maps.<N, Boolean>newConcurrentMap());










 private ConcurrentMap<N,Set<PausedEdge>> pausedPathEdges =










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {



......@@ -126,16 +176,17 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 



......@@ -143,7 +194,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 



......@@ -175,15 +226,15 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(N sourceStmt) {










 return leakedSources.contains(sourceStmt);










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(sourceStmt);










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {



......






......@@ -104,6 +104,56 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 this.relatedCallSite = relatedCallSite;










 }










 }





















 /**










	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 










	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed










	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,










	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 










	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.










	 *










	 */










 private static class LeakKey<N> {










 private N sourceStmt;










 private N relatedCallSite;










 










 public LeakKey(N sourceStmt, N relatedCallSite) {










 this.sourceStmt = sourceStmt;










 this.relatedCallSite = relatedCallSite;










 }










 










 @Override










 public int hashCode() {










 final int prime = 31;










 int result = 1;










 result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());










 result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());










 return result;










 }










 










 @SuppressWarnings("rawtypes")










 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (obj == null)










 return false;










 if (!(obj instanceof LeakKey))










 return false;










 LeakKey other = (LeakKey) obj;










 if (relatedCallSite == null) {










 if (other.relatedCallSite != null)










 return false;










 } else if (!relatedCallSite.equals(other.relatedCallSite))










 return false;










 if (sourceStmt == null) {










 if (other.sourceStmt != null)










 return false;










 } else if (!sourceStmt.equals(other.sourceStmt))










 return false;










 return true;










 }










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.



......@@ -111,8 +161,8 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = Collections.newSetFromMap(Maps.<N, Boolean>newConcurrentMap());










 private ConcurrentMap<N,Set<PausedEdge>> pausedPathEdges =










 private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());










 private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =










 Maps.newConcurrentMap();





















 public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {



......@@ -126,16 +176,17 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 N sourceStmt = targetVal.getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);










 leakedSources.add(leakKey);










 if(otherSolver.hasLeaked(leakKey)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 otherSolver.unpausePathEdgesForSource(leakKey);










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PausedEdge> newPausedEdges = 










 Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); 










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);










 Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);










 if(existingPausedEdges==null)










 existingPausedEdges=newPausedEdges;










 



......@@ -143,7 +194,7 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









 existingPausedEdges.add(edge);










 










 //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused










 if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {










 if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(edge)) {










 super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);










 }










 



......@@ -175,15 +226,15 @@ public class BiDiIFDSSolver<N, D extends LinkedNode<D>, M, I extends Interproced









		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(N sourceStmt) {










 return leakedSources.contains(sourceStmt);










 private boolean hasLeaked(LeakKey<N> leakKey) {










 return leakedSources.contains(leakKey);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(sourceStmt);










 private void unpausePathEdgesForSource(LeakKey<N> leakKey) {










 Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);










 if(pausedEdges!=null) {










 for(PausedEdge edge: pausedEdges) {










 if(pausedEdges.remove(edge)) {



......


 this.relatedCallSite = relatedCallSite;this.relatedCallSite=relatedCallSite; }} }} /**/**	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 	 *  Data structure used to identify which edges can be unpaused by a {@link SingleDirectionSolver}. Each {@link SingleDirectionSolver} stores 	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed	 *  its leaks using this structure. A leak always requires a flow from some {@link #sourceStmt} (this is either the statement used as initial seed	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,	 *  or a call site of an unbalanced return) to a return site. This return site is always different for the forward and backward solvers,	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 	 *  but, the related call site of these return sites must be the same, if two entangled flows exist. 	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.	 *  Moreover, this structure represents the pair of such a {@link #sourceStmt} and the {@link #relatedCallSite}.	 *	 *	 */	 */ private static class LeakKey<N> {privatestaticclassLeakKey<N>{ private N sourceStmt;privateNsourceStmt; private N relatedCallSite;privateNrelatedCallSite;  public LeakKey(N sourceStmt, N relatedCallSite) {publicLeakKey(NsourceStmt,NrelatedCallSite){ this.sourceStmt = sourceStmt;this.sourceStmt=sourceStmt; this.relatedCallSite = relatedCallSite;this.relatedCallSite=relatedCallSite; }}  @Override@Override public int hashCode() {publicinthashCode(){ final int prime = 31;finalintprime=31; int result = 1;intresult=1; result = prime * result + ((relatedCallSite == null) ? 0 : relatedCallSite.hashCode());result=prime*result+((relatedCallSite==null)?0:relatedCallSite.hashCode()); result = prime * result + ((sourceStmt == null) ? 0 : sourceStmt.hashCode());result=prime*result+((sourceStmt==null)?0:sourceStmt.hashCode()); return result;returnresult; }}  @SuppressWarnings("rawtypes")@SuppressWarnings("rawtypes") @Override@Override public boolean equals(Object obj) {publicbooleanequals(Objectobj){ if (this == obj)if(this==obj) return true;returntrue; if (obj == null)if(obj==null) return false;returnfalse; if (!(obj instanceof LeakKey))if(!(objinstanceofLeakKey)) return false;returnfalse; LeakKey other = (LeakKey) obj;LeakKeyother=(LeakKey)obj; if (relatedCallSite == null) {if(relatedCallSite==null){ if (other.relatedCallSite != null)if(other.relatedCallSite!=null) return false;returnfalse; } else if (!relatedCallSite.equals(other.relatedCallSite))}elseif(!relatedCallSite.equals(other.relatedCallSite)) return false;returnfalse; if (sourceStmt == null) {if(sourceStmt==null){ if (other.sourceStmt != null)if(other.sourceStmt!=null) return false;returnfalse; } else if (!sourceStmt.equals(other.sourceStmt))}elseif(!sourceStmt.equals(other.sourceStmt)) return false;returnfalse; return true;returntrue; }} }}  /**/**	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges. protected class SingleDirectionSolver extends PathTrackingIFDSSolver<N, AbstractionWithSourceStmt, M, I> {protectedclassSingleDirectionSolverextendsPathTrackingIFDSSolver<N,AbstractionWithSourceStmt,M,I>{ private final String debugName;privatefinalStringdebugName; private SingleDirectionSolver otherSolver;privateSingleDirectionSolverotherSolver; private Set<N> leakedSources = Collections.newSetFromMap(Maps.<N, Boolean>newConcurrentMap());privateSet<NN>leakedSources=Collections.newSetFromMap(Maps.<NN,Boolean>newConcurrentMap()); private ConcurrentMap<N,Set<PausedEdge>> pausedPathEdges =privateConcurrentMap<NN,Set<PausedEdge>>pausedPathEdges= private Set<LeakKey<N>> leakedSources = Collections.newSetFromMap(Maps.<LeakKey<N>, Boolean>newConcurrentMap());privateSet<LeakKeyLeakKey<<NN>>>leakedSources=Collections.newSetFromMap(Maps.<LeakKeyLeakKey<<NN>,>Boolean>newConcurrentMap()); private ConcurrentMap<LeakKey<N>,Set<PausedEdge>> pausedPathEdges =privateConcurrentMap<LeakKeyLeakKey<<NN>,>Set<PausedEdge>>pausedPathEdges= Maps.newConcurrentMap();Maps.newConcurrentMap(); public SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt, M, I> ifdsProblem, String debugName) {publicSingleDirectionSolver(IFDSTabulationProblem<N,AbstractionWithSourceStmt,M,I>ifdsProblem,StringdebugName){ //if an edge is originating from ZERO then to us this signifies an unbalanced return edge//if an edge is originating from ZERO then to us this signifies an unbalanced return edge N sourceStmt = targetVal.getSourceStmt();NsourceStmt=targetVal.getSourceStmt(); //we mark the fact that this solver would like to "leak" this edge to the caller//we mark the fact that this solver would like to "leak" this edge to the caller leakedSources.add(sourceStmt);leakedSources.add(sourceStmt); if(otherSolver.hasLeaked(sourceStmt)) {if(otherSolver.hasLeaked(sourceStmt)){ LeakKey<N> leakKey = new LeakKey<N>(sourceStmt, relatedCallSite);LeakKey<N>leakKey=newLeakKey<N>(sourceStmt,relatedCallSite); leakedSources.add(leakKey);leakedSources.add(leakKey); if(otherSolver.hasLeaked(leakKey)) {if(otherSolver.hasLeaked(leakKey)){ //if the other solver has leaked already then unpause its edges and continue//if the other solver has leaked already then unpause its edges and continue otherSolver.unpausePathEdgesForSource(sourceStmt);otherSolver.unpausePathEdgesForSource(sourceStmtsourceStmt); otherSolver.unpausePathEdgesForSource(leakKey);otherSolver.unpausePathEdgesForSource(leakKeyleakKey); super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);super.propagateUnbalancedReturnFlow(retSiteC,targetVal,edgeFunction,relatedCallSite); } else {}else{ //otherwise we pause this solver's edge and don't continue//otherwise we pause this solver's edge and don't continue Set<PausedEdge> newPausedEdges = Set<PausedEdge>newPausedEdges= Collections.newSetFromMap(Maps.<PausedEdge, Boolean>newConcurrentMap()); Collections.newSetFromMap(Maps.<PausedEdge,Boolean>newConcurrentMap()); Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(sourceStmt, newPausedEdges);Set<PausedEdge>existingPausedEdges=pausedPathEdges.putIfAbsent(sourceStmtsourceStmt,newPausedEdges); Set<PausedEdge> existingPausedEdges = pausedPathEdges.putIfAbsent(leakKey, newPausedEdges);Set<PausedEdge>existingPausedEdges=pausedPathEdges.putIfAbsent(leakKeyleakKey,newPausedEdges); if(existingPausedEdges==null)if(existingPausedEdges==null) existingPausedEdges=newPausedEdges;existingPausedEdges=newPausedEdges;  existingPausedEdges.add(edge);existingPausedEdges.add(edge);  //if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused//if the other solver has leaked in the meantime, we have to make sure that the paused edge is unpaused if(otherSolver.hasLeaked(sourceStmt) && existingPausedEdges.remove(edge)) {if(otherSolver.hasLeaked(sourceStmtsourceStmt)&&existingPausedEdges.remove(edge)){ if(otherSolver.hasLeaked(leakKey) && existingPausedEdges.remove(edge)) {if(otherSolver.hasLeaked(leakKeyleakKey)&&existingPausedEdges.remove(edge)){ super.propagateUnbalancedReturnFlow(retSiteC, targetVal, edgeFunction, relatedCallSite);super.propagateUnbalancedReturnFlow(retSiteC,targetVal,edgeFunction,relatedCallSite); }} 		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source		 * to its caller.		 * to its caller.		 */		 */ private boolean hasLeaked(N sourceStmt) {privatebooleanhasLeaked(NN sourceStmtsourceStmt){ return leakedSources.contains(sourceStmt);returnleakedSources.contains(sourceStmtsourceStmt); private boolean hasLeaked(LeakKey<N> leakKey) {privatebooleanhasLeaked(LeakKeyLeakKey<<NN>> leakKeyleakKey){ return leakedSources.contains(leakKey);returnleakedSources.contains(leakKeyleakKey); }}  /**/**		 * Unpauses all edges associated with the given source statement.		 * Unpauses all edges associated with the given source statement.		 */		 */ private void unpausePathEdgesForSource(N sourceStmt) {privatevoidunpausePathEdgesForSource(NN sourceStmtsourceStmt){ Set<PausedEdge> pausedEdges = pausedPathEdges.get(sourceStmt);Set<PausedEdge>pausedEdges=pausedPathEdges.get(sourceStmtsourceStmt); private void unpausePathEdgesForSource(LeakKey<N> leakKey) {privatevoidunpausePathEdgesForSource(LeakKeyLeakKey<<NN>> leakKeyleakKey){ Set<PausedEdge> pausedEdges = pausedPathEdges.get(leakKey);Set<PausedEdge>pausedEdges=pausedPathEdges.get(leakKeyleakKey); if(pausedEdges!=null) {if(pausedEdges!=null){ for(PausedEdge edge: pausedEdges) {for(PausedEdgeedge:pausedEdges){ if(pausedEdges.remove(edge)) {if(pausedEdges.remove(edge)){









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






