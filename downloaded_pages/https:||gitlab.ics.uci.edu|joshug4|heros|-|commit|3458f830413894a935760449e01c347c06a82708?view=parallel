



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

3458f830















Commit
3458f830


authored
Dec 12, 2012
by


Eric Bodden



Browse files




removed caller-side summary functions; instead now just use callee-side "endSummaries"







parent
67675fc9













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 3458f830








...@@ -89,9 +89,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -89,9 +89,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 @SynchronizedBy("thread safe data structure, consistent locking when used")





 @SynchronizedBy("thread safe data structure, consistent locking when used")







 protected final JumpFunctions<N,D,V> jumpFn;





 protected final JumpFunctions<N,D,V> jumpFn;







 





 







 @SynchronizedBy("thread safe data structure, consistent locking when used")









 protected final SummaryFunctions<N,D,V> summaryFunctions = new SummaryFunctions<N,D,V>();



















 @SynchronizedBy("thread safe data structure, only modified internally")





 @SynchronizedBy("thread safe data structure, only modified internally")







 protected final I icfg;





 protected final I icfg;







 





 



...@@ -315,7 +312,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -315,7 +312,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez







 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,





 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,







 //re-process that value, updating sCalledProcN's summary function,





 //create new caller-side jump functions to the return sites







 //because we have observed a potentially new incoming edge into <sP,d3>





 //because we have observed a potentially new incoming edge into <sP,d3>







 for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {





 for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {







 N eP = entry.getRowKey();





 N eP = entry.getRowKey();



...@@ -331,13 +328,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -331,13 +328,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //update the caller-side summary function





 //update the caller-side summary function







 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);







 synchronized (summaryFunctions) {





 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 







 EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(n, d2, retSiteN).get(d5); 





 EdgeFunction<V> f = jumpFunction(edge);







 if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper





 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);







 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5).joinWith(summaryFunction);





 for (N returnSiteN : returnSiteNs) {







 if(!fPrime.equalTo(summaryFunction)) {





 propagate(d1, returnSiteN, d3, f.composeWith(fPrime));







 summaryFunctions.insertFunction(n,d2,retSiteN,d5,fPrime);









 } 









 }





 }







 }





 }







 }





 }



...@@ -347,7 +342,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -347,7 +342,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 //line 17-19 of Naeem/Lhotak/Rodriguez		





 //line 17-19 of Naeem/Lhotak/Rodriguez		







 //process intra-procedural flows along call-to-return flow functions





 //process intra-procedural flows along call-to-return flow functions







 //and along summary functions









 EdgeFunction<V> f = jumpFunction(edge);





 EdgeFunction<V> f = jumpFunction(edge);







 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);





 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);







 for (N returnSiteN : returnSiteNs) {





 for (N returnSiteN : returnSiteNs) {



...@@ -357,14 +351,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -357,14 +351,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);





 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);







 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));





 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));







 }





 }

















 Map<D,EdgeFunction<V>> d3sAndF3s = summaryFunctions.summariesFor(n, d2, returnSiteN);









 for (Map.Entry<D,EdgeFunction<V>> d3AndF3 : d3sAndF3s.entrySet()) {









 D d3 = d3AndF3.getKey();









 EdgeFunction<V> f3 = d3AndF3.getValue();









 if(f3==null) f3 = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper









 propagate(d1, returnSiteN, d3, f.composeWith(f3));









 }









 }





 }







 }





 }

















...@@ -407,28 +393,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -407,28 +393,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //for each target value at the return site





 //for each target value at the return site







 //line 23





 //line 23







 for(D d5: targets) {





 for(D d5: targets) {







 //update callee-side summary functions





 //compute composed function







 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 EdgeFunction<V> fPrime;





 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);







 boolean updatedSummary = false;





 //for each jump function coming into the call, propagate to return site using the composed function







 synchronized (summaryFunctions) {





 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {







 EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(c,d4,retSiteC).get(d5); 





 EdgeFunction<V> f3 = valAndFunc.getValue();







 if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper





 if(!f3.equalTo(allTop)); {







 fPrime = f4.composeWith(f).composeWith(f5).joinWith(summaryFunction);





 D d3 = valAndFunc.getKey();







 if(!fPrime.equalTo(summaryFunction)) {





 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));







 summaryFunctions.insertFunction(c,d4,retSiteC,d5,fPrime);









 updatedSummary = true;









 }









 }









 //propagate caller-side intra-procedural flows according to updated summary functions









 if(updatedSummary) {









 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {









 EdgeFunction<V> f3 = valAndFunc.getValue();









 if(!f3.equalTo(allTop)); {









 D d3 = valAndFunc.getKey();









 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));









 }









 }





 }







 }





 }







 }





 }



......















src/heros/solver/SummaryFunctions.java

deleted


100644 â†’ 0







View file @ 67675fc9












/*******************************************************************************









 * Copyright (c) 2012 Eric Bodden.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Eric Bodden - initial API and implementation









 ******************************************************************************/









package heros.solver;



















import heros.EdgeFunction;









import heros.SynchronizedBy;









import heros.ThreadSafe;



















import java.util.Collections;









import java.util.Map;





























import com.google.common.collect.HashBasedTable;









import com.google.common.collect.Table;





























/**









 * A data structure to record summary functions in an indexed fashion, for fast retrieval.









 */









@ThreadSafe









public class SummaryFunctions<N,D,V> {









 









 @SynchronizedBy("consistent lock on this")









 protected Table<N,D,Table<N,D,EdgeFunction<V>>> table = HashBasedTable.create();









 









 /**









	 * Inserts a summary function.









	 * @param callSite The call site with which this function is associated.









	 * @param sourceVal The source value at the call site. 









	 * @param retSite The return site (in the caller) with which this function is associated.









	 * @param targetVal The target value at the return site.









	 * @param function The edge function used to compute V-type values from the source node to the target node.  









	 */









 public synchronized void insertFunction(N callSite,D sourceVal, N retSite, D targetVal, EdgeFunction<V> function) {









 assert callSite!=null;









 assert sourceVal!=null;









 assert retSite!=null;









 assert targetVal!=null;









 assert function!=null;









 









 Table<N, D, EdgeFunction<V>> targetAndTargetValToFunction = table.get(callSite,sourceVal);









 if(targetAndTargetValToFunction==null) {









 targetAndTargetValToFunction = HashBasedTable.create();









 table.put(callSite,sourceVal,targetAndTargetValToFunction);









 }









 targetAndTargetValToFunction.put(retSite, targetVal, function);









 }



















 /**









	 * Retrieves all summary functions for a given call site, source value and









	 * return site (in the caller).









	 * The result contains a mapping from target value to associated edge function.









	 */









 public synchronized Map<D,EdgeFunction<V>> summariesFor(N callSite, D sourceVal, N returnSite) {









 assert callSite!=null;









 assert sourceVal!=null;









 assert returnSite!=null;



















 Table<N, D, EdgeFunction<V>> res = table.get(callSite,sourceVal);









 if(res==null) return Collections.emptyMap();









 else {









 return res.row(returnSite);









 }









 }









}



















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

3458f830















Commit
3458f830


authored
Dec 12, 2012
by


Eric Bodden



Browse files




removed caller-side summary functions; instead now just use callee-side "endSummaries"







parent
67675fc9













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 3458f830








...@@ -89,9 +89,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -89,9 +89,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 @SynchronizedBy("thread safe data structure, consistent locking when used")





 @SynchronizedBy("thread safe data structure, consistent locking when used")







 protected final JumpFunctions<N,D,V> jumpFn;





 protected final JumpFunctions<N,D,V> jumpFn;







 





 







 @SynchronizedBy("thread safe data structure, consistent locking when used")









 protected final SummaryFunctions<N,D,V> summaryFunctions = new SummaryFunctions<N,D,V>();



















 @SynchronizedBy("thread safe data structure, only modified internally")





 @SynchronizedBy("thread safe data structure, only modified internally")







 protected final I icfg;





 protected final I icfg;







 





 



...@@ -315,7 +312,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -315,7 +312,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez







 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,





 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,







 //re-process that value, updating sCalledProcN's summary function,





 //create new caller-side jump functions to the return sites







 //because we have observed a potentially new incoming edge into <sP,d3>





 //because we have observed a potentially new incoming edge into <sP,d3>







 for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {





 for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {







 N eP = entry.getRowKey();





 N eP = entry.getRowKey();



...@@ -331,13 +328,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -331,13 +328,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //update the caller-side summary function





 //update the caller-side summary function







 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);







 synchronized (summaryFunctions) {





 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 







 EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(n, d2, retSiteN).get(d5); 





 EdgeFunction<V> f = jumpFunction(edge);







 if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper





 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);







 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5).joinWith(summaryFunction);





 for (N returnSiteN : returnSiteNs) {







 if(!fPrime.equalTo(summaryFunction)) {





 propagate(d1, returnSiteN, d3, f.composeWith(fPrime));







 summaryFunctions.insertFunction(n,d2,retSiteN,d5,fPrime);









 } 









 }





 }







 }





 }







 }





 }



...@@ -347,7 +342,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -347,7 +342,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 //line 17-19 of Naeem/Lhotak/Rodriguez		





 //line 17-19 of Naeem/Lhotak/Rodriguez		







 //process intra-procedural flows along call-to-return flow functions





 //process intra-procedural flows along call-to-return flow functions







 //and along summary functions









 EdgeFunction<V> f = jumpFunction(edge);





 EdgeFunction<V> f = jumpFunction(edge);







 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);





 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);







 for (N returnSiteN : returnSiteNs) {





 for (N returnSiteN : returnSiteNs) {



...@@ -357,14 +351,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -357,14 +351,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);





 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);







 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));





 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));







 }





 }

















 Map<D,EdgeFunction<V>> d3sAndF3s = summaryFunctions.summariesFor(n, d2, returnSiteN);









 for (Map.Entry<D,EdgeFunction<V>> d3AndF3 : d3sAndF3s.entrySet()) {









 D d3 = d3AndF3.getKey();









 EdgeFunction<V> f3 = d3AndF3.getValue();









 if(f3==null) f3 = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper









 propagate(d1, returnSiteN, d3, f.composeWith(f3));









 }









 }





 }







 }





 }

















...@@ -407,28 +393,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -407,28 +393,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //for each target value at the return site





 //for each target value at the return site







 //line 23





 //line 23







 for(D d5: targets) {





 for(D d5: targets) {







 //update callee-side summary functions





 //compute composed function







 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 EdgeFunction<V> fPrime;





 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);







 boolean updatedSummary = false;





 //for each jump function coming into the call, propagate to return site using the composed function







 synchronized (summaryFunctions) {





 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {







 EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(c,d4,retSiteC).get(d5); 





 EdgeFunction<V> f3 = valAndFunc.getValue();







 if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper





 if(!f3.equalTo(allTop)); {







 fPrime = f4.composeWith(f).composeWith(f5).joinWith(summaryFunction);





 D d3 = valAndFunc.getKey();







 if(!fPrime.equalTo(summaryFunction)) {





 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));







 summaryFunctions.insertFunction(c,d4,retSiteC,d5,fPrime);









 updatedSummary = true;









 }









 }









 //propagate caller-side intra-procedural flows according to updated summary functions









 if(updatedSummary) {









 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {









 EdgeFunction<V> f3 = valAndFunc.getValue();









 if(!f3.equalTo(allTop)); {









 D d3 = valAndFunc.getKey();









 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));









 }









 }





 }







 }





 }







 }





 }



......















src/heros/solver/SummaryFunctions.java

deleted


100644 â†’ 0







View file @ 67675fc9












/*******************************************************************************









 * Copyright (c) 2012 Eric Bodden.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Eric Bodden - initial API and implementation









 ******************************************************************************/









package heros.solver;



















import heros.EdgeFunction;









import heros.SynchronizedBy;









import heros.ThreadSafe;



















import java.util.Collections;









import java.util.Map;





























import com.google.common.collect.HashBasedTable;









import com.google.common.collect.Table;





























/**









 * A data structure to record summary functions in an indexed fashion, for fast retrieval.









 */









@ThreadSafe









public class SummaryFunctions<N,D,V> {









 









 @SynchronizedBy("consistent lock on this")









 protected Table<N,D,Table<N,D,EdgeFunction<V>>> table = HashBasedTable.create();









 









 /**









	 * Inserts a summary function.









	 * @param callSite The call site with which this function is associated.









	 * @param sourceVal The source value at the call site. 









	 * @param retSite The return site (in the caller) with which this function is associated.









	 * @param targetVal The target value at the return site.









	 * @param function The edge function used to compute V-type values from the source node to the target node.  









	 */









 public synchronized void insertFunction(N callSite,D sourceVal, N retSite, D targetVal, EdgeFunction<V> function) {









 assert callSite!=null;









 assert sourceVal!=null;









 assert retSite!=null;









 assert targetVal!=null;









 assert function!=null;









 









 Table<N, D, EdgeFunction<V>> targetAndTargetValToFunction = table.get(callSite,sourceVal);









 if(targetAndTargetValToFunction==null) {









 targetAndTargetValToFunction = HashBasedTable.create();









 table.put(callSite,sourceVal,targetAndTargetValToFunction);









 }









 targetAndTargetValToFunction.put(retSite, targetVal, function);









 }



















 /**









	 * Retrieves all summary functions for a given call site, source value and









	 * return site (in the caller).









	 * The result contains a mapping from target value to associated edge function.









	 */









 public synchronized Map<D,EdgeFunction<V>> summariesFor(N callSite, D sourceVal, N returnSite) {









 assert callSite!=null;









 assert sourceVal!=null;









 assert returnSite!=null;



















 Table<N, D, EdgeFunction<V>> res = table.get(callSite,sourceVal);









 if(res==null) return Collections.emptyMap();









 else {









 return res.row(returnSite);









 }









 }









}



















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

3458f830







Open sidebar



Joshua Garcia heros
Commits

3458f830




Open sidebar

Joshua Garcia heros
Commits

3458f830


Joshua GarciaherosherosCommits
3458f830








Commit
3458f830


authored
Dec 12, 2012
by


Eric Bodden



Browse files




removed caller-side summary functions; instead now just use callee-side "endSummaries"







parent
67675fc9













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 3458f830








...@@ -89,9 +89,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -89,9 +89,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 @SynchronizedBy("thread safe data structure, consistent locking when used")





 @SynchronizedBy("thread safe data structure, consistent locking when used")







 protected final JumpFunctions<N,D,V> jumpFn;





 protected final JumpFunctions<N,D,V> jumpFn;







 





 







 @SynchronizedBy("thread safe data structure, consistent locking when used")









 protected final SummaryFunctions<N,D,V> summaryFunctions = new SummaryFunctions<N,D,V>();



















 @SynchronizedBy("thread safe data structure, only modified internally")





 @SynchronizedBy("thread safe data structure, only modified internally")







 protected final I icfg;





 protected final I icfg;







 





 



...@@ -315,7 +312,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -315,7 +312,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez







 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,





 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,







 //re-process that value, updating sCalledProcN's summary function,





 //create new caller-side jump functions to the return sites







 //because we have observed a potentially new incoming edge into <sP,d3>





 //because we have observed a potentially new incoming edge into <sP,d3>







 for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {





 for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {







 N eP = entry.getRowKey();





 N eP = entry.getRowKey();



...@@ -331,13 +328,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -331,13 +328,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //update the caller-side summary function





 //update the caller-side summary function







 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);







 synchronized (summaryFunctions) {





 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 







 EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(n, d2, retSiteN).get(d5); 





 EdgeFunction<V> f = jumpFunction(edge);







 if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper





 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);







 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5).joinWith(summaryFunction);





 for (N returnSiteN : returnSiteNs) {







 if(!fPrime.equalTo(summaryFunction)) {





 propagate(d1, returnSiteN, d3, f.composeWith(fPrime));







 summaryFunctions.insertFunction(n,d2,retSiteN,d5,fPrime);









 } 









 }





 }







 }





 }







 }





 }



...@@ -347,7 +342,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -347,7 +342,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 //line 17-19 of Naeem/Lhotak/Rodriguez		





 //line 17-19 of Naeem/Lhotak/Rodriguez		







 //process intra-procedural flows along call-to-return flow functions





 //process intra-procedural flows along call-to-return flow functions







 //and along summary functions









 EdgeFunction<V> f = jumpFunction(edge);





 EdgeFunction<V> f = jumpFunction(edge);







 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);





 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);







 for (N returnSiteN : returnSiteNs) {





 for (N returnSiteN : returnSiteNs) {



...@@ -357,14 +351,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -357,14 +351,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);





 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);







 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));





 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));







 }





 }

















 Map<D,EdgeFunction<V>> d3sAndF3s = summaryFunctions.summariesFor(n, d2, returnSiteN);









 for (Map.Entry<D,EdgeFunction<V>> d3AndF3 : d3sAndF3s.entrySet()) {









 D d3 = d3AndF3.getKey();









 EdgeFunction<V> f3 = d3AndF3.getValue();









 if(f3==null) f3 = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper









 propagate(d1, returnSiteN, d3, f.composeWith(f3));









 }









 }





 }







 }





 }

















...@@ -407,28 +393,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -407,28 +393,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //for each target value at the return site





 //for each target value at the return site







 //line 23





 //line 23







 for(D d5: targets) {





 for(D d5: targets) {







 //update callee-side summary functions





 //compute composed function







 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 EdgeFunction<V> fPrime;





 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);







 boolean updatedSummary = false;





 //for each jump function coming into the call, propagate to return site using the composed function







 synchronized (summaryFunctions) {





 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {







 EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(c,d4,retSiteC).get(d5); 





 EdgeFunction<V> f3 = valAndFunc.getValue();







 if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper





 if(!f3.equalTo(allTop)); {







 fPrime = f4.composeWith(f).composeWith(f5).joinWith(summaryFunction);





 D d3 = valAndFunc.getKey();







 if(!fPrime.equalTo(summaryFunction)) {





 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));







 summaryFunctions.insertFunction(c,d4,retSiteC,d5,fPrime);









 updatedSummary = true;









 }









 }









 //propagate caller-side intra-procedural flows according to updated summary functions









 if(updatedSummary) {









 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {









 EdgeFunction<V> f3 = valAndFunc.getValue();









 if(!f3.equalTo(allTop)); {









 D d3 = valAndFunc.getKey();









 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));









 }









 }





 }







 }





 }







 }





 }



......















src/heros/solver/SummaryFunctions.java

deleted


100644 â†’ 0







View file @ 67675fc9












/*******************************************************************************









 * Copyright (c) 2012 Eric Bodden.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Eric Bodden - initial API and implementation









 ******************************************************************************/









package heros.solver;



















import heros.EdgeFunction;









import heros.SynchronizedBy;









import heros.ThreadSafe;



















import java.util.Collections;









import java.util.Map;





























import com.google.common.collect.HashBasedTable;









import com.google.common.collect.Table;





























/**









 * A data structure to record summary functions in an indexed fashion, for fast retrieval.









 */









@ThreadSafe









public class SummaryFunctions<N,D,V> {









 









 @SynchronizedBy("consistent lock on this")









 protected Table<N,D,Table<N,D,EdgeFunction<V>>> table = HashBasedTable.create();









 









 /**









	 * Inserts a summary function.









	 * @param callSite The call site with which this function is associated.









	 * @param sourceVal The source value at the call site. 









	 * @param retSite The return site (in the caller) with which this function is associated.









	 * @param targetVal The target value at the return site.









	 * @param function The edge function used to compute V-type values from the source node to the target node.  









	 */









 public synchronized void insertFunction(N callSite,D sourceVal, N retSite, D targetVal, EdgeFunction<V> function) {









 assert callSite!=null;









 assert sourceVal!=null;









 assert retSite!=null;









 assert targetVal!=null;









 assert function!=null;









 









 Table<N, D, EdgeFunction<V>> targetAndTargetValToFunction = table.get(callSite,sourceVal);









 if(targetAndTargetValToFunction==null) {









 targetAndTargetValToFunction = HashBasedTable.create();









 table.put(callSite,sourceVal,targetAndTargetValToFunction);









 }









 targetAndTargetValToFunction.put(retSite, targetVal, function);









 }



















 /**









	 * Retrieves all summary functions for a given call site, source value and









	 * return site (in the caller).









	 * The result contains a mapping from target value to associated edge function.









	 */









 public synchronized Map<D,EdgeFunction<V>> summariesFor(N callSite, D sourceVal, N returnSite) {









 assert callSite!=null;









 assert sourceVal!=null;









 assert returnSite!=null;



















 Table<N, D, EdgeFunction<V>> res = table.get(callSite,sourceVal);









 if(res==null) return Collections.emptyMap();









 else {









 return res.row(returnSite);









 }









 }









}



















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
3458f830


authored
Dec 12, 2012
by


Eric Bodden



Browse files




removed caller-side summary functions; instead now just use callee-side "endSummaries"







parent
67675fc9













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 3458f830








...@@ -89,9 +89,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -89,9 +89,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 @SynchronizedBy("thread safe data structure, consistent locking when used")





 @SynchronizedBy("thread safe data structure, consistent locking when used")







 protected final JumpFunctions<N,D,V> jumpFn;





 protected final JumpFunctions<N,D,V> jumpFn;







 





 







 @SynchronizedBy("thread safe data structure, consistent locking when used")









 protected final SummaryFunctions<N,D,V> summaryFunctions = new SummaryFunctions<N,D,V>();



















 @SynchronizedBy("thread safe data structure, only modified internally")





 @SynchronizedBy("thread safe data structure, only modified internally")







 protected final I icfg;





 protected final I icfg;







 





 



...@@ -315,7 +312,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -315,7 +312,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez







 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,





 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,







 //re-process that value, updating sCalledProcN's summary function,





 //create new caller-side jump functions to the return sites







 //because we have observed a potentially new incoming edge into <sP,d3>





 //because we have observed a potentially new incoming edge into <sP,d3>







 for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {





 for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {







 N eP = entry.getRowKey();





 N eP = entry.getRowKey();



...@@ -331,13 +328,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -331,13 +328,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //update the caller-side summary function





 //update the caller-side summary function







 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);







 synchronized (summaryFunctions) {





 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 







 EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(n, d2, retSiteN).get(d5); 





 EdgeFunction<V> f = jumpFunction(edge);







 if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper





 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);







 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5).joinWith(summaryFunction);





 for (N returnSiteN : returnSiteNs) {







 if(!fPrime.equalTo(summaryFunction)) {





 propagate(d1, returnSiteN, d3, f.composeWith(fPrime));







 summaryFunctions.insertFunction(n,d2,retSiteN,d5,fPrime);









 } 









 }





 }







 }





 }







 }





 }



...@@ -347,7 +342,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -347,7 +342,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 //line 17-19 of Naeem/Lhotak/Rodriguez		





 //line 17-19 of Naeem/Lhotak/Rodriguez		







 //process intra-procedural flows along call-to-return flow functions





 //process intra-procedural flows along call-to-return flow functions







 //and along summary functions









 EdgeFunction<V> f = jumpFunction(edge);





 EdgeFunction<V> f = jumpFunction(edge);







 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);





 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);







 for (N returnSiteN : returnSiteNs) {





 for (N returnSiteN : returnSiteNs) {



...@@ -357,14 +351,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -357,14 +351,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);





 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);







 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));





 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));







 }





 }

















 Map<D,EdgeFunction<V>> d3sAndF3s = summaryFunctions.summariesFor(n, d2, returnSiteN);









 for (Map.Entry<D,EdgeFunction<V>> d3AndF3 : d3sAndF3s.entrySet()) {









 D d3 = d3AndF3.getKey();









 EdgeFunction<V> f3 = d3AndF3.getValue();









 if(f3==null) f3 = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper









 propagate(d1, returnSiteN, d3, f.composeWith(f3));









 }









 }





 }







 }





 }

















...@@ -407,28 +393,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -407,28 +393,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //for each target value at the return site





 //for each target value at the return site







 //line 23





 //line 23







 for(D d5: targets) {





 for(D d5: targets) {







 //update callee-side summary functions





 //compute composed function







 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 EdgeFunction<V> fPrime;





 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);







 boolean updatedSummary = false;





 //for each jump function coming into the call, propagate to return site using the composed function







 synchronized (summaryFunctions) {





 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {







 EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(c,d4,retSiteC).get(d5); 





 EdgeFunction<V> f3 = valAndFunc.getValue();







 if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper





 if(!f3.equalTo(allTop)); {







 fPrime = f4.composeWith(f).composeWith(f5).joinWith(summaryFunction);





 D d3 = valAndFunc.getKey();







 if(!fPrime.equalTo(summaryFunction)) {





 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));







 summaryFunctions.insertFunction(c,d4,retSiteC,d5,fPrime);









 updatedSummary = true;









 }









 }









 //propagate caller-side intra-procedural flows according to updated summary functions









 if(updatedSummary) {









 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {









 EdgeFunction<V> f3 = valAndFunc.getValue();









 if(!f3.equalTo(allTop)); {









 D d3 = valAndFunc.getKey();









 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));









 }









 }





 }







 }





 }







 }





 }



......















src/heros/solver/SummaryFunctions.java

deleted


100644 â†’ 0







View file @ 67675fc9












/*******************************************************************************









 * Copyright (c) 2012 Eric Bodden.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Eric Bodden - initial API and implementation









 ******************************************************************************/









package heros.solver;



















import heros.EdgeFunction;









import heros.SynchronizedBy;









import heros.ThreadSafe;



















import java.util.Collections;









import java.util.Map;





























import com.google.common.collect.HashBasedTable;









import com.google.common.collect.Table;





























/**









 * A data structure to record summary functions in an indexed fashion, for fast retrieval.









 */









@ThreadSafe









public class SummaryFunctions<N,D,V> {









 









 @SynchronizedBy("consistent lock on this")









 protected Table<N,D,Table<N,D,EdgeFunction<V>>> table = HashBasedTable.create();









 









 /**









	 * Inserts a summary function.









	 * @param callSite The call site with which this function is associated.









	 * @param sourceVal The source value at the call site. 









	 * @param retSite The return site (in the caller) with which this function is associated.









	 * @param targetVal The target value at the return site.









	 * @param function The edge function used to compute V-type values from the source node to the target node.  









	 */









 public synchronized void insertFunction(N callSite,D sourceVal, N retSite, D targetVal, EdgeFunction<V> function) {









 assert callSite!=null;









 assert sourceVal!=null;









 assert retSite!=null;









 assert targetVal!=null;









 assert function!=null;









 









 Table<N, D, EdgeFunction<V>> targetAndTargetValToFunction = table.get(callSite,sourceVal);









 if(targetAndTargetValToFunction==null) {









 targetAndTargetValToFunction = HashBasedTable.create();









 table.put(callSite,sourceVal,targetAndTargetValToFunction);









 }









 targetAndTargetValToFunction.put(retSite, targetVal, function);









 }



















 /**









	 * Retrieves all summary functions for a given call site, source value and









	 * return site (in the caller).









	 * The result contains a mapping from target value to associated edge function.









	 */









 public synchronized Map<D,EdgeFunction<V>> summariesFor(N callSite, D sourceVal, N returnSite) {









 assert callSite!=null;









 assert sourceVal!=null;









 assert returnSite!=null;



















 Table<N, D, EdgeFunction<V>> res = table.get(callSite,sourceVal);









 if(res==null) return Collections.emptyMap();









 else {









 return res.row(returnSite);









 }









 }









}



















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
3458f830


authored
Dec 12, 2012
by


Eric Bodden



Browse files



Commit
3458f830


authored
Dec 12, 2012
by


Eric Bodden

3458f830authoredbyEric Bodden

removed caller-side summary functions; instead now just use callee-side "endSummaries"






parent
67675fc9
















parent
67675fc9





parent












Changes
2
2


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/solver/IDESolver.java








View file @ 3458f830








...@@ -89,9 +89,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -89,9 +89,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 @SynchronizedBy("thread safe data structure, consistent locking when used")





 @SynchronizedBy("thread safe data structure, consistent locking when used")







 protected final JumpFunctions<N,D,V> jumpFn;





 protected final JumpFunctions<N,D,V> jumpFn;







 





 







 @SynchronizedBy("thread safe data structure, consistent locking when used")









 protected final SummaryFunctions<N,D,V> summaryFunctions = new SummaryFunctions<N,D,V>();



















 @SynchronizedBy("thread safe data structure, only modified internally")





 @SynchronizedBy("thread safe data structure, only modified internally")







 protected final I icfg;





 protected final I icfg;







 





 



...@@ -315,7 +312,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -315,7 +312,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez







 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,





 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,







 //re-process that value, updating sCalledProcN's summary function,





 //create new caller-side jump functions to the return sites







 //because we have observed a potentially new incoming edge into <sP,d3>





 //because we have observed a potentially new incoming edge into <sP,d3>







 for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {





 for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {







 N eP = entry.getRowKey();





 N eP = entry.getRowKey();



...@@ -331,13 +328,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -331,13 +328,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //update the caller-side summary function





 //update the caller-side summary function







 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);







 synchronized (summaryFunctions) {





 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 







 EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(n, d2, retSiteN).get(d5); 





 EdgeFunction<V> f = jumpFunction(edge);







 if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper





 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);







 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5).joinWith(summaryFunction);





 for (N returnSiteN : returnSiteNs) {







 if(!fPrime.equalTo(summaryFunction)) {





 propagate(d1, returnSiteN, d3, f.composeWith(fPrime));







 summaryFunctions.insertFunction(n,d2,retSiteN,d5,fPrime);









 } 









 }





 }







 }





 }







 }





 }



...@@ -347,7 +342,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -347,7 +342,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 //line 17-19 of Naeem/Lhotak/Rodriguez		





 //line 17-19 of Naeem/Lhotak/Rodriguez		







 //process intra-procedural flows along call-to-return flow functions





 //process intra-procedural flows along call-to-return flow functions







 //and along summary functions









 EdgeFunction<V> f = jumpFunction(edge);





 EdgeFunction<V> f = jumpFunction(edge);







 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);





 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);







 for (N returnSiteN : returnSiteNs) {





 for (N returnSiteN : returnSiteNs) {



...@@ -357,14 +351,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -357,14 +351,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);





 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);







 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));





 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));







 }





 }

















 Map<D,EdgeFunction<V>> d3sAndF3s = summaryFunctions.summariesFor(n, d2, returnSiteN);









 for (Map.Entry<D,EdgeFunction<V>> d3AndF3 : d3sAndF3s.entrySet()) {









 D d3 = d3AndF3.getKey();









 EdgeFunction<V> f3 = d3AndF3.getValue();









 if(f3==null) f3 = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper









 propagate(d1, returnSiteN, d3, f.composeWith(f3));









 }









 }





 }







 }





 }

















...@@ -407,28 +393,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -407,28 +393,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //for each target value at the return site





 //for each target value at the return site







 //line 23





 //line 23







 for(D d5: targets) {





 for(D d5: targets) {







 //update callee-side summary functions





 //compute composed function







 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 EdgeFunction<V> fPrime;





 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);







 boolean updatedSummary = false;





 //for each jump function coming into the call, propagate to return site using the composed function







 synchronized (summaryFunctions) {





 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {







 EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(c,d4,retSiteC).get(d5); 





 EdgeFunction<V> f3 = valAndFunc.getValue();







 if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper





 if(!f3.equalTo(allTop)); {







 fPrime = f4.composeWith(f).composeWith(f5).joinWith(summaryFunction);





 D d3 = valAndFunc.getKey();







 if(!fPrime.equalTo(summaryFunction)) {





 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));







 summaryFunctions.insertFunction(c,d4,retSiteC,d5,fPrime);









 updatedSummary = true;









 }









 }









 //propagate caller-side intra-procedural flows according to updated summary functions









 if(updatedSummary) {









 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {









 EdgeFunction<V> f3 = valAndFunc.getValue();









 if(!f3.equalTo(allTop)); {









 D d3 = valAndFunc.getKey();









 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));









 }









 }





 }







 }





 }







 }





 }



......















src/heros/solver/SummaryFunctions.java

deleted


100644 â†’ 0







View file @ 67675fc9












/*******************************************************************************









 * Copyright (c) 2012 Eric Bodden.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Eric Bodden - initial API and implementation









 ******************************************************************************/









package heros.solver;



















import heros.EdgeFunction;









import heros.SynchronizedBy;









import heros.ThreadSafe;



















import java.util.Collections;









import java.util.Map;





























import com.google.common.collect.HashBasedTable;









import com.google.common.collect.Table;





























/**









 * A data structure to record summary functions in an indexed fashion, for fast retrieval.









 */









@ThreadSafe









public class SummaryFunctions<N,D,V> {









 









 @SynchronizedBy("consistent lock on this")









 protected Table<N,D,Table<N,D,EdgeFunction<V>>> table = HashBasedTable.create();









 









 /**









	 * Inserts a summary function.









	 * @param callSite The call site with which this function is associated.









	 * @param sourceVal The source value at the call site. 









	 * @param retSite The return site (in the caller) with which this function is associated.









	 * @param targetVal The target value at the return site.









	 * @param function The edge function used to compute V-type values from the source node to the target node.  









	 */









 public synchronized void insertFunction(N callSite,D sourceVal, N retSite, D targetVal, EdgeFunction<V> function) {









 assert callSite!=null;









 assert sourceVal!=null;









 assert retSite!=null;









 assert targetVal!=null;









 assert function!=null;









 









 Table<N, D, EdgeFunction<V>> targetAndTargetValToFunction = table.get(callSite,sourceVal);









 if(targetAndTargetValToFunction==null) {









 targetAndTargetValToFunction = HashBasedTable.create();









 table.put(callSite,sourceVal,targetAndTargetValToFunction);









 }









 targetAndTargetValToFunction.put(retSite, targetVal, function);









 }



















 /**









	 * Retrieves all summary functions for a given call site, source value and









	 * return site (in the caller).









	 * The result contains a mapping from target value to associated edge function.









	 */









 public synchronized Map<D,EdgeFunction<V>> summariesFor(N callSite, D sourceVal, N returnSite) {









 assert callSite!=null;









 assert sourceVal!=null;









 assert returnSite!=null;



















 Table<N, D, EdgeFunction<V>> res = table.get(callSite,sourceVal);









 if(res==null) return Collections.emptyMap();









 else {









 return res.row(returnSite);









 }









 }









}

















src/heros/solver/IDESolver.java








View file @ 3458f830








...@@ -89,9 +89,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -89,9 +89,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 @SynchronizedBy("thread safe data structure, consistent locking when used")





 @SynchronizedBy("thread safe data structure, consistent locking when used")







 protected final JumpFunctions<N,D,V> jumpFn;





 protected final JumpFunctions<N,D,V> jumpFn;







 





 







 @SynchronizedBy("thread safe data structure, consistent locking when used")









 protected final SummaryFunctions<N,D,V> summaryFunctions = new SummaryFunctions<N,D,V>();



















 @SynchronizedBy("thread safe data structure, only modified internally")





 @SynchronizedBy("thread safe data structure, only modified internally")







 protected final I icfg;





 protected final I icfg;







 





 



...@@ -315,7 +312,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -315,7 +312,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez







 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,





 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,







 //re-process that value, updating sCalledProcN's summary function,





 //create new caller-side jump functions to the return sites







 //because we have observed a potentially new incoming edge into <sP,d3>





 //because we have observed a potentially new incoming edge into <sP,d3>







 for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {





 for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {







 N eP = entry.getRowKey();





 N eP = entry.getRowKey();



...@@ -331,13 +328,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -331,13 +328,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //update the caller-side summary function





 //update the caller-side summary function







 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);







 synchronized (summaryFunctions) {





 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 







 EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(n, d2, retSiteN).get(d5); 





 EdgeFunction<V> f = jumpFunction(edge);







 if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper





 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);







 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5).joinWith(summaryFunction);





 for (N returnSiteN : returnSiteNs) {







 if(!fPrime.equalTo(summaryFunction)) {





 propagate(d1, returnSiteN, d3, f.composeWith(fPrime));







 summaryFunctions.insertFunction(n,d2,retSiteN,d5,fPrime);









 } 









 }





 }







 }





 }







 }





 }



...@@ -347,7 +342,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -347,7 +342,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 //line 17-19 of Naeem/Lhotak/Rodriguez		





 //line 17-19 of Naeem/Lhotak/Rodriguez		







 //process intra-procedural flows along call-to-return flow functions





 //process intra-procedural flows along call-to-return flow functions







 //and along summary functions









 EdgeFunction<V> f = jumpFunction(edge);





 EdgeFunction<V> f = jumpFunction(edge);







 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);





 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);







 for (N returnSiteN : returnSiteNs) {





 for (N returnSiteN : returnSiteNs) {



...@@ -357,14 +351,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -357,14 +351,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);





 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);







 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));





 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));







 }





 }

















 Map<D,EdgeFunction<V>> d3sAndF3s = summaryFunctions.summariesFor(n, d2, returnSiteN);









 for (Map.Entry<D,EdgeFunction<V>> d3AndF3 : d3sAndF3s.entrySet()) {









 D d3 = d3AndF3.getKey();









 EdgeFunction<V> f3 = d3AndF3.getValue();









 if(f3==null) f3 = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper









 propagate(d1, returnSiteN, d3, f.composeWith(f3));









 }









 }





 }







 }





 }

















...@@ -407,28 +393,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -407,28 +393,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //for each target value at the return site





 //for each target value at the return site







 //line 23





 //line 23







 for(D d5: targets) {





 for(D d5: targets) {







 //update callee-side summary functions





 //compute composed function







 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 EdgeFunction<V> fPrime;





 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);







 boolean updatedSummary = false;





 //for each jump function coming into the call, propagate to return site using the composed function







 synchronized (summaryFunctions) {





 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {







 EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(c,d4,retSiteC).get(d5); 





 EdgeFunction<V> f3 = valAndFunc.getValue();







 if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper





 if(!f3.equalTo(allTop)); {







 fPrime = f4.composeWith(f).composeWith(f5).joinWith(summaryFunction);





 D d3 = valAndFunc.getKey();







 if(!fPrime.equalTo(summaryFunction)) {





 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));







 summaryFunctions.insertFunction(c,d4,retSiteC,d5,fPrime);









 updatedSummary = true;









 }









 }









 //propagate caller-side intra-procedural flows according to updated summary functions









 if(updatedSummary) {









 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {









 EdgeFunction<V> f3 = valAndFunc.getValue();









 if(!f3.equalTo(allTop)); {









 D d3 = valAndFunc.getKey();









 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));









 }









 }





 }







 }





 }







 }





 }



......













src/heros/solver/IDESolver.java








View file @ 3458f830








src/heros/solver/IDESolver.java










View file @ 3458f830


3458f830





...@@ -89,9 +89,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -89,9 +89,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 @SynchronizedBy("thread safe data structure, consistent locking when used")





 @SynchronizedBy("thread safe data structure, consistent locking when used")







 protected final JumpFunctions<N,D,V> jumpFn;





 protected final JumpFunctions<N,D,V> jumpFn;







 





 







 @SynchronizedBy("thread safe data structure, consistent locking when used")









 protected final SummaryFunctions<N,D,V> summaryFunctions = new SummaryFunctions<N,D,V>();



















 @SynchronizedBy("thread safe data structure, only modified internally")





 @SynchronizedBy("thread safe data structure, only modified internally")







 protected final I icfg;





 protected final I icfg;







 





 



...@@ -315,7 +312,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -315,7 +312,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez







 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,





 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,







 //re-process that value, updating sCalledProcN's summary function,





 //create new caller-side jump functions to the return sites







 //because we have observed a potentially new incoming edge into <sP,d3>





 //because we have observed a potentially new incoming edge into <sP,d3>







 for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {





 for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {







 N eP = entry.getRowKey();





 N eP = entry.getRowKey();



...@@ -331,13 +328,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -331,13 +328,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //update the caller-side summary function





 //update the caller-side summary function







 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);







 synchronized (summaryFunctions) {





 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 







 EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(n, d2, retSiteN).get(d5); 





 EdgeFunction<V> f = jumpFunction(edge);







 if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper





 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);







 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5).joinWith(summaryFunction);





 for (N returnSiteN : returnSiteNs) {







 if(!fPrime.equalTo(summaryFunction)) {





 propagate(d1, returnSiteN, d3, f.composeWith(fPrime));







 summaryFunctions.insertFunction(n,d2,retSiteN,d5,fPrime);









 } 









 }





 }







 }





 }







 }





 }



...@@ -347,7 +342,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -347,7 +342,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 //line 17-19 of Naeem/Lhotak/Rodriguez		





 //line 17-19 of Naeem/Lhotak/Rodriguez		







 //process intra-procedural flows along call-to-return flow functions





 //process intra-procedural flows along call-to-return flow functions







 //and along summary functions









 EdgeFunction<V> f = jumpFunction(edge);





 EdgeFunction<V> f = jumpFunction(edge);







 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);





 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);







 for (N returnSiteN : returnSiteNs) {





 for (N returnSiteN : returnSiteNs) {



...@@ -357,14 +351,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -357,14 +351,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);





 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);







 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));





 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));







 }





 }

















 Map<D,EdgeFunction<V>> d3sAndF3s = summaryFunctions.summariesFor(n, d2, returnSiteN);









 for (Map.Entry<D,EdgeFunction<V>> d3AndF3 : d3sAndF3s.entrySet()) {









 D d3 = d3AndF3.getKey();









 EdgeFunction<V> f3 = d3AndF3.getValue();









 if(f3==null) f3 = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper









 propagate(d1, returnSiteN, d3, f.composeWith(f3));









 }









 }





 }







 }





 }

















...@@ -407,28 +393,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -407,28 +393,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //for each target value at the return site





 //for each target value at the return site







 //line 23





 //line 23







 for(D d5: targets) {





 for(D d5: targets) {







 //update callee-side summary functions





 //compute composed function







 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 EdgeFunction<V> fPrime;





 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);







 boolean updatedSummary = false;





 //for each jump function coming into the call, propagate to return site using the composed function







 synchronized (summaryFunctions) {





 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {







 EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(c,d4,retSiteC).get(d5); 





 EdgeFunction<V> f3 = valAndFunc.getValue();







 if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper





 if(!f3.equalTo(allTop)); {







 fPrime = f4.composeWith(f).composeWith(f5).joinWith(summaryFunction);





 D d3 = valAndFunc.getKey();







 if(!fPrime.equalTo(summaryFunction)) {





 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));







 summaryFunctions.insertFunction(c,d4,retSiteC,d5,fPrime);









 updatedSummary = true;









 }









 }









 //propagate caller-side intra-procedural flows according to updated summary functions









 if(updatedSummary) {









 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {









 EdgeFunction<V> f3 = valAndFunc.getValue();









 if(!f3.equalTo(allTop)); {









 D d3 = valAndFunc.getKey();









 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));









 }









 }





 }







 }





 }







 }





 }



......









...@@ -89,9 +89,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -89,9 +89,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 @SynchronizedBy("thread safe data structure, consistent locking when used")





 @SynchronizedBy("thread safe data structure, consistent locking when used")







 protected final JumpFunctions<N,D,V> jumpFn;





 protected final JumpFunctions<N,D,V> jumpFn;







 





 







 @SynchronizedBy("thread safe data structure, consistent locking when used")









 protected final SummaryFunctions<N,D,V> summaryFunctions = new SummaryFunctions<N,D,V>();



















 @SynchronizedBy("thread safe data structure, only modified internally")





 @SynchronizedBy("thread safe data structure, only modified internally")







 protected final I icfg;





 protected final I icfg;







 





 



...@@ -315,7 +312,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -315,7 +312,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez







 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,





 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,







 //re-process that value, updating sCalledProcN's summary function,





 //create new caller-side jump functions to the return sites







 //because we have observed a potentially new incoming edge into <sP,d3>





 //because we have observed a potentially new incoming edge into <sP,d3>







 for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {





 for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {







 N eP = entry.getRowKey();





 N eP = entry.getRowKey();



...@@ -331,13 +328,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -331,13 +328,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //update the caller-side summary function





 //update the caller-side summary function







 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);







 synchronized (summaryFunctions) {





 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 







 EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(n, d2, retSiteN).get(d5); 





 EdgeFunction<V> f = jumpFunction(edge);







 if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper





 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);







 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5).joinWith(summaryFunction);





 for (N returnSiteN : returnSiteNs) {







 if(!fPrime.equalTo(summaryFunction)) {





 propagate(d1, returnSiteN, d3, f.composeWith(fPrime));







 summaryFunctions.insertFunction(n,d2,retSiteN,d5,fPrime);









 } 









 }





 }







 }





 }







 }





 }



...@@ -347,7 +342,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -347,7 +342,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 //line 17-19 of Naeem/Lhotak/Rodriguez		





 //line 17-19 of Naeem/Lhotak/Rodriguez		







 //process intra-procedural flows along call-to-return flow functions





 //process intra-procedural flows along call-to-return flow functions







 //and along summary functions









 EdgeFunction<V> f = jumpFunction(edge);





 EdgeFunction<V> f = jumpFunction(edge);







 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);





 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);







 for (N returnSiteN : returnSiteNs) {





 for (N returnSiteN : returnSiteNs) {



...@@ -357,14 +351,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -357,14 +351,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);





 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);







 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));





 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));







 }





 }

















 Map<D,EdgeFunction<V>> d3sAndF3s = summaryFunctions.summariesFor(n, d2, returnSiteN);









 for (Map.Entry<D,EdgeFunction<V>> d3AndF3 : d3sAndF3s.entrySet()) {









 D d3 = d3AndF3.getKey();









 EdgeFunction<V> f3 = d3AndF3.getValue();









 if(f3==null) f3 = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper









 propagate(d1, returnSiteN, d3, f.composeWith(f3));









 }









 }





 }







 }





 }

















...@@ -407,28 +393,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -407,28 +393,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //for each target value at the return site





 //for each target value at the return site







 //line 23





 //line 23







 for(D d5: targets) {





 for(D d5: targets) {







 //update callee-side summary functions





 //compute composed function







 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 EdgeFunction<V> fPrime;





 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);







 boolean updatedSummary = false;





 //for each jump function coming into the call, propagate to return site using the composed function







 synchronized (summaryFunctions) {





 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {







 EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(c,d4,retSiteC).get(d5); 





 EdgeFunction<V> f3 = valAndFunc.getValue();







 if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper





 if(!f3.equalTo(allTop)); {







 fPrime = f4.composeWith(f).composeWith(f5).joinWith(summaryFunction);





 D d3 = valAndFunc.getKey();







 if(!fPrime.equalTo(summaryFunction)) {





 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));







 summaryFunctions.insertFunction(c,d4,retSiteC,d5,fPrime);









 updatedSummary = true;









 }









 }









 //propagate caller-side intra-procedural flows according to updated summary functions









 if(updatedSummary) {









 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {









 EdgeFunction<V> f3 = valAndFunc.getValue();









 if(!f3.equalTo(allTop)); {









 D d3 = valAndFunc.getKey();









 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));









 }









 }





 }







 }





 }







 }





 }



......






...@@ -89,9 +89,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -89,9 +89,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 @SynchronizedBy("thread safe data structure, consistent locking when used")





 @SynchronizedBy("thread safe data structure, consistent locking when used")







 protected final JumpFunctions<N,D,V> jumpFn;





 protected final JumpFunctions<N,D,V> jumpFn;







 





 







 @SynchronizedBy("thread safe data structure, consistent locking when used")









 protected final SummaryFunctions<N,D,V> summaryFunctions = new SummaryFunctions<N,D,V>();



















 @SynchronizedBy("thread safe data structure, only modified internally")





 @SynchronizedBy("thread safe data structure, only modified internally")







 protected final I icfg;





 protected final I icfg;







 





 



...@@ -315,7 +312,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -315,7 +312,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez







 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,





 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,







 //re-process that value, updating sCalledProcN's summary function,





 //create new caller-side jump functions to the return sites







 //because we have observed a potentially new incoming edge into <sP,d3>





 //because we have observed a potentially new incoming edge into <sP,d3>







 for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {





 for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {







 N eP = entry.getRowKey();





 N eP = entry.getRowKey();



...@@ -331,13 +328,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -331,13 +328,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //update the caller-side summary function





 //update the caller-side summary function







 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);







 synchronized (summaryFunctions) {





 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); 







 EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(n, d2, retSiteN).get(d5); 





 EdgeFunction<V> f = jumpFunction(edge);







 if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper





 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);







 EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5).joinWith(summaryFunction);





 for (N returnSiteN : returnSiteNs) {







 if(!fPrime.equalTo(summaryFunction)) {





 propagate(d1, returnSiteN, d3, f.composeWith(fPrime));







 summaryFunctions.insertFunction(n,d2,retSiteN,d5,fPrime);









 } 









 }





 }







 }





 }







 }





 }



...@@ -347,7 +342,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -347,7 +342,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 }





 }







 //line 17-19 of Naeem/Lhotak/Rodriguez		





 //line 17-19 of Naeem/Lhotak/Rodriguez		







 //process intra-procedural flows along call-to-return flow functions





 //process intra-procedural flows along call-to-return flow functions







 //and along summary functions









 EdgeFunction<V> f = jumpFunction(edge);





 EdgeFunction<V> f = jumpFunction(edge);







 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);





 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);







 for (N returnSiteN : returnSiteNs) {





 for (N returnSiteN : returnSiteNs) {



...@@ -357,14 +351,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -357,14 +351,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);





 EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);







 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));





 propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));







 }





 }

















 Map<D,EdgeFunction<V>> d3sAndF3s = summaryFunctions.summariesFor(n, d2, returnSiteN);









 for (Map.Entry<D,EdgeFunction<V>> d3AndF3 : d3sAndF3s.entrySet()) {









 D d3 = d3AndF3.getKey();









 EdgeFunction<V> f3 = d3AndF3.getValue();









 if(f3==null) f3 = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper









 propagate(d1, returnSiteN, d3, f.composeWith(f3));









 }









 }





 }







 }





 }

















...@@ -407,28 +393,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -407,28 +393,16 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 //for each target value at the return site





 //for each target value at the return site







 //line 23





 //line 23







 for(D d5: targets) {





 for(D d5: targets) {







 //update callee-side summary functions





 //compute composed function







 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);





 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);







 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);





 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);







 EdgeFunction<V> fPrime;





 EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);







 boolean updatedSummary = false;





 //for each jump function coming into the call, propagate to return site using the composed function







 synchronized (summaryFunctions) {





 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {







 EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(c,d4,retSiteC).get(d5); 





 EdgeFunction<V> f3 = valAndFunc.getValue();







 if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper





 if(!f3.equalTo(allTop)); {







 fPrime = f4.composeWith(f).composeWith(f5).joinWith(summaryFunction);





 D d3 = valAndFunc.getKey();







 if(!fPrime.equalTo(summaryFunction)) {





 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));







 summaryFunctions.insertFunction(c,d4,retSiteC,d5,fPrime);









 updatedSummary = true;









 }









 }









 //propagate caller-side intra-procedural flows according to updated summary functions









 if(updatedSummary) {









 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {









 EdgeFunction<V> f3 = valAndFunc.getValue();









 if(!f3.equalTo(allTop)); {









 D d3 = valAndFunc.getKey();









 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));









 }









 }





 }







 }





 }







 }





 }



......


 @SynchronizedBy("thread safe data structure, consistent locking when used")@SynchronizedBy("thread safe data structure, consistent locking when used") @SynchronizedBy("thread safe data structure, consistent locking when used")@SynchronizedBy("thread safe data structure, consistent locking when used") protected final JumpFunctions<N,D,V> jumpFn;protectedfinalJumpFunctions<N,D,V>jumpFn; protected final JumpFunctions<N,D,V> jumpFn;protectedfinalJumpFunctions<N,D,V>jumpFn;   @SynchronizedBy("thread safe data structure, consistent locking when used")@SynchronizedBy("thread safe data structure, consistent locking when used") protected final SummaryFunctions<N,D,V> summaryFunctions = new SummaryFunctions<N,D,V>();protectedfinalSummaryFunctions<N,D,V>summaryFunctions=newSummaryFunctions<N,D,V>(); @SynchronizedBy("thread safe data structure, only modified internally")@SynchronizedBy("thread safe data structure, only modified internally") @SynchronizedBy("thread safe data structure, only modified internally")@SynchronizedBy("thread safe data structure, only modified internally") protected final I icfg;protectedfinalIicfg; protected final I icfg;protectedfinalIicfg;     //still line 15.2 of Naeem/Lhotak/Rodriguez//still line 15.2 of Naeem/Lhotak/Rodriguez //still line 15.2 of Naeem/Lhotak/Rodriguez//still line 15.2 of Naeem/Lhotak/Rodriguez //for each already-queried exit value <eP,d4> reachable from <sP,d3>,//for each already-queried exit value <eP,d4> reachable from <sP,d3>, //for each already-queried exit value <eP,d4> reachable from <sP,d3>,//for each already-queried exit value <eP,d4> reachable from <sP,d3>, //re-process that value, updating sCalledProcN's summary function,//re-process that value, updating sCalledProcN's summary function,-process that value, updating sCalledProcN's summary function, //create new caller-side jump functions to the return sites//create new caller-side jump functions to the return sitescate new caller-side jump functions to the return sites //because we have observed a potentially new incoming edge into <sP,d3>//because we have observed a potentially new incoming edge into <sP,d3> //because we have observed a potentially new incoming edge into <sP,d3>//because we have observed a potentially new incoming edge into <sP,d3> for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {for(Cell<N,D,EdgeFunction<V>>entry:endSumm){ for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {for(Cell<N,D,EdgeFunction<V>>entry:endSumm){ N eP = entry.getRowKey();NeP=entry.getRowKey(); N eP = entry.getRowKey();NeP=entry.getRowKey(); //update the caller-side summary function//update the caller-side summary function //update the caller-side summary function//update the caller-side summary function EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);EdgeFunction<V>f4=edgeFunctions.getCallEdgeFunction(n,d2,sCalledProcN,d3); EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);EdgeFunction<V>f4=edgeFunctions.getCallEdgeFunction(n,d2,sCalledProcN,d3); EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);EdgeFunction<V>f5=edgeFunctions.getReturnEdgeFunction(n,sCalledProcN,eP,d4,retSiteN,d5); EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);EdgeFunction<V>f5=edgeFunctions.getReturnEdgeFunction(n,sCalledProcN,eP,d4,retSiteN,d5); synchronized (summaryFunctions) {synchronized(summaryFunctions){ EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5); EdgeFunction<V>fPrime=f4.composeWith(fCalleeSummary).composeWith(f5); EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(n, d2, retSiteN).get(d5); EdgeFunction<V>summaryFunction=summaryFunctions.summariesFor(n,d2,retSiteN).get(d5); EdgeFunction<V> f = jumpFunction(edge);EdgeFunction<V>f=jumpFunction(edge); if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paperif(summaryFunction==null)summaryFunction=allTop;//SummaryFn initialized to all-top, see line [4] in SRH96 paper List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);List<N>returnSiteNs=icfg.getReturnSitesOfCallAt(n); EdgeFunction<V> fPrime = f4.composeWith(fCalleeSummary).composeWith(f5).joinWith(summaryFunction);EdgeFunction<V>fPrime=f4.composeWith(fCalleeSummary).composeWith(f5).joinWith(summaryFunction); for (N returnSiteN : returnSiteNs) {for(NreturnSiteN:returnSiteNs){ if(!fPrime.equalTo(summaryFunction)) {if(!fPrime.equalTo(summaryFunction)){ propagate(d1, returnSiteN, d3, f.composeWith(fPrime));propagate(d1,returnSiteN,d3,f.composeWith(fPrime)); summaryFunctions.insertFunction(n,d2,retSiteN,d5,fPrime);summaryFunctions.insertFunction(n,d2,retSiteN,d5,fPrime); } } }} }} }} }} }} }} }} }} //line 17-19 of Naeem/Lhotak/Rodriguez		//line 17-19 of Naeem/Lhotak/Rodriguez		 //line 17-19 of Naeem/Lhotak/Rodriguez		//line 17-19 of Naeem/Lhotak/Rodriguez		 //process intra-procedural flows along call-to-return flow functions//process intra-procedural flows along call-to-return flow functions //process intra-procedural flows along call-to-return flow functions//process intra-procedural flows along call-to-return flow functions //and along summary functions//and along summary functions EdgeFunction<V> f = jumpFunction(edge);EdgeFunction<V>f=jumpFunction(edge); EdgeFunction<V> f = jumpFunction(edge);EdgeFunction<V>f=jumpFunction(edge); List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);List<N>returnSiteNs=icfg.getReturnSitesOfCallAt(n); List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);List<N>returnSiteNs=icfg.getReturnSitesOfCallAt(n); for (N returnSiteN : returnSiteNs) {for(NreturnSiteN:returnSiteNs){ for (N returnSiteN : returnSiteNs) {for(NreturnSiteN:returnSiteNs){ EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);EdgeFunction<V>edgeFnE=edgeFunctions.getCallToReturnEdgeFunction(n,d2,returnSiteN,d3); EdgeFunction<V> edgeFnE = edgeFunctions.getCallToReturnEdgeFunction(n, d2, returnSiteN, d3);EdgeFunction<V>edgeFnE=edgeFunctions.getCallToReturnEdgeFunction(n,d2,returnSiteN,d3); propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));propagate(d1,returnSiteN,d3,f.composeWith(edgeFnE)); propagate(d1, returnSiteN, d3, f.composeWith(edgeFnE));propagate(d1,returnSiteN,d3,f.composeWith(edgeFnE)); }} }} Map<D,EdgeFunction<V>> d3sAndF3s = summaryFunctions.summariesFor(n, d2, returnSiteN);Map<D,EdgeFunction<V>>d3sAndF3s=summaryFunctions.summariesFor(n,d2,returnSiteN); for (Map.Entry<D,EdgeFunction<V>> d3AndF3 : d3sAndF3s.entrySet()) {for(Map.Entry<D,EdgeFunction<V>>d3AndF3:d3sAndF3s.entrySet()){ D d3 = d3AndF3.getKey();Dd3=d3AndF3.getKey(); EdgeFunction<V> f3 = d3AndF3.getValue();EdgeFunction<V>f3=d3AndF3.getValue(); if(f3==null) f3 = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paperif(f3==null)f3=allTop;//SummaryFn initialized to all-top, see line [4] in SRH96 paper propagate(d1, returnSiteN, d3, f.composeWith(f3));propagate(d1,returnSiteN,d3,f.composeWith(f3)); }} }} }} }} }} //for each target value at the return site//for each target value at the return site //for each target value at the return site//for each target value at the return site //line 23//line 23 //line 23//line 23 for(D d5: targets) {for(Dd5:targets){ for(D d5: targets) {for(Dd5:targets){ //update callee-side summary functions//update callee-side summary functionsupdate callee-side summarys //compute composed function//compute composed functioncompute composed EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);EdgeFunction<V>f4=edgeFunctions.getCallEdgeFunction(c,d4,icfg.getMethodOf(n),d1); EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);EdgeFunction<V>f4=edgeFunctions.getCallEdgeFunction(c,d4,icfg.getMethodOf(n),d1); EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);EdgeFunction<V>f5=edgeFunctions.getReturnEdgeFunction(c,icfg.getMethodOf(n),n,d2,retSiteC,d5); EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);EdgeFunction<V>f5=edgeFunctions.getReturnEdgeFunction(c,icfg.getMethodOf(n),n,d2,retSiteC,d5); EdgeFunction<V> fPrime;EdgeFunction<V>fPrime; EdgeFunction<V> fPrime = f4.composeWith(f).composeWith(f5);EdgeFunction<V>fPrime=f4.composeWith(f).composeWith(f5); boolean updatedSummary = false;booleanupdatedSummary=false; //for each jump function coming into the call, propagate to return site using the composed function//for each jump function coming into the call, propagate to return site using the composed function synchronized (summaryFunctions) {synchronized(summaryFunctions){ for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {for(Map.Entry<D,EdgeFunction<V>>valAndFunc:jumpFn.reverseLookup(c,d4).entrySet()){ EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(c,d4,retSiteC).get(d5); EdgeFunction<V>summaryFunction=summaryFunctions.summariesFor(c,d4,retSiteC).get(d5); EdgeFunction<V> f3 = valAndFunc.getValue();EdgeFunction<V>f3=valAndFunc.getValue(); if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paperif(summaryFunction==null)summaryFunction=allTop;//SummaryFn initialized to all-top, see line [4] in SRH96 paper if(!f3.equalTo(allTop)); {if(!f3.equalTo(allTop));{ fPrime = f4.composeWith(f).composeWith(f5).joinWith(summaryFunction);fPrime=f4.composeWith(f).composeWith(f5).joinWith(summaryFunction); D d3 = valAndFunc.getKey();Dd3=valAndFunc.getKey(); if(!fPrime.equalTo(summaryFunction)) {if(!fPrime.equalTo(summaryFunction)){ propagate(d3, retSiteC, d5, f3.composeWith(fPrime));propagate(d3,retSiteC,d5,f3.composeWith(fPrime)); summaryFunctions.insertFunction(c,d4,retSiteC,d5,fPrime);summaryFunctions.insertFunction(c,d4,retSiteC,d5,fPrime); updatedSummary = true;updatedSummary=true; }} }} //propagate caller-side intra-procedural flows according to updated summary functions//propagate caller-side intra-procedural flows according to updated summary functions if(updatedSummary) {if(updatedSummary){ for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {for(Map.Entry<D,EdgeFunction<V>>valAndFunc:jumpFn.reverseLookup(c,d4).entrySet()){ EdgeFunction<V> f3 = valAndFunc.getValue();EdgeFunction<V>f3=valAndFunc.getValue(); if(!f3.equalTo(allTop)); {if(!f3.equalTo(allTop));{ D d3 = valAndFunc.getKey();Dd3=valAndFunc.getKey(); propagate(d3, retSiteC, d5, f3.composeWith(fPrime));propagate(d3,retSiteC,d5,f3.composeWith(fPrime)); }} }} }} }} }} }} }}








src/heros/solver/SummaryFunctions.java

deleted


100644 â†’ 0







View file @ 67675fc9












/*******************************************************************************









 * Copyright (c) 2012 Eric Bodden.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Eric Bodden - initial API and implementation









 ******************************************************************************/









package heros.solver;



















import heros.EdgeFunction;









import heros.SynchronizedBy;









import heros.ThreadSafe;



















import java.util.Collections;









import java.util.Map;





























import com.google.common.collect.HashBasedTable;









import com.google.common.collect.Table;





























/**









 * A data structure to record summary functions in an indexed fashion, for fast retrieval.









 */









@ThreadSafe









public class SummaryFunctions<N,D,V> {









 









 @SynchronizedBy("consistent lock on this")









 protected Table<N,D,Table<N,D,EdgeFunction<V>>> table = HashBasedTable.create();









 









 /**









	 * Inserts a summary function.









	 * @param callSite The call site with which this function is associated.









	 * @param sourceVal The source value at the call site. 









	 * @param retSite The return site (in the caller) with which this function is associated.









	 * @param targetVal The target value at the return site.









	 * @param function The edge function used to compute V-type values from the source node to the target node.  









	 */









 public synchronized void insertFunction(N callSite,D sourceVal, N retSite, D targetVal, EdgeFunction<V> function) {









 assert callSite!=null;









 assert sourceVal!=null;









 assert retSite!=null;









 assert targetVal!=null;









 assert function!=null;









 









 Table<N, D, EdgeFunction<V>> targetAndTargetValToFunction = table.get(callSite,sourceVal);









 if(targetAndTargetValToFunction==null) {









 targetAndTargetValToFunction = HashBasedTable.create();









 table.put(callSite,sourceVal,targetAndTargetValToFunction);









 }









 targetAndTargetValToFunction.put(retSite, targetVal, function);









 }



















 /**









	 * Retrieves all summary functions for a given call site, source value and









	 * return site (in the caller).









	 * The result contains a mapping from target value to associated edge function.









	 */









 public synchronized Map<D,EdgeFunction<V>> summariesFor(N callSite, D sourceVal, N returnSite) {









 assert callSite!=null;









 assert sourceVal!=null;









 assert returnSite!=null;



















 Table<N, D, EdgeFunction<V>> res = table.get(callSite,sourceVal);









 if(res==null) return Collections.emptyMap();









 else {









 return res.row(returnSite);









 }









 }









}















src/heros/solver/SummaryFunctions.java

deleted


100644 â†’ 0







View file @ 67675fc9








src/heros/solver/SummaryFunctions.java

deleted


100644 â†’ 0









View file @ 67675fc9


67675fc9









/*******************************************************************************









 * Copyright (c) 2012 Eric Bodden.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Eric Bodden - initial API and implementation









 ******************************************************************************/









package heros.solver;



















import heros.EdgeFunction;









import heros.SynchronizedBy;









import heros.ThreadSafe;



















import java.util.Collections;









import java.util.Map;





























import com.google.common.collect.HashBasedTable;









import com.google.common.collect.Table;





























/**









 * A data structure to record summary functions in an indexed fashion, for fast retrieval.









 */









@ThreadSafe









public class SummaryFunctions<N,D,V> {









 









 @SynchronizedBy("consistent lock on this")









 protected Table<N,D,Table<N,D,EdgeFunction<V>>> table = HashBasedTable.create();









 









 /**









	 * Inserts a summary function.









	 * @param callSite The call site with which this function is associated.









	 * @param sourceVal The source value at the call site. 









	 * @param retSite The return site (in the caller) with which this function is associated.









	 * @param targetVal The target value at the return site.









	 * @param function The edge function used to compute V-type values from the source node to the target node.  









	 */









 public synchronized void insertFunction(N callSite,D sourceVal, N retSite, D targetVal, EdgeFunction<V> function) {









 assert callSite!=null;









 assert sourceVal!=null;









 assert retSite!=null;









 assert targetVal!=null;









 assert function!=null;









 









 Table<N, D, EdgeFunction<V>> targetAndTargetValToFunction = table.get(callSite,sourceVal);









 if(targetAndTargetValToFunction==null) {









 targetAndTargetValToFunction = HashBasedTable.create();









 table.put(callSite,sourceVal,targetAndTargetValToFunction);









 }









 targetAndTargetValToFunction.put(retSite, targetVal, function);









 }



















 /**









	 * Retrieves all summary functions for a given call site, source value and









	 * return site (in the caller).









	 * The result contains a mapping from target value to associated edge function.









	 */









 public synchronized Map<D,EdgeFunction<V>> summariesFor(N callSite, D sourceVal, N returnSite) {









 assert callSite!=null;









 assert sourceVal!=null;









 assert returnSite!=null;



















 Table<N, D, EdgeFunction<V>> res = table.get(callSite,sourceVal);









 if(res==null) return Collections.emptyMap();









 else {









 return res.row(returnSite);









 }









 }









}















/*******************************************************************************









 * Copyright (c) 2012 Eric Bodden.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Eric Bodden - initial API and implementation









 ******************************************************************************/









package heros.solver;



















import heros.EdgeFunction;









import heros.SynchronizedBy;









import heros.ThreadSafe;



















import java.util.Collections;









import java.util.Map;





























import com.google.common.collect.HashBasedTable;









import com.google.common.collect.Table;





























/**









 * A data structure to record summary functions in an indexed fashion, for fast retrieval.









 */









@ThreadSafe









public class SummaryFunctions<N,D,V> {









 









 @SynchronizedBy("consistent lock on this")









 protected Table<N,D,Table<N,D,EdgeFunction<V>>> table = HashBasedTable.create();









 









 /**









	 * Inserts a summary function.









	 * @param callSite The call site with which this function is associated.









	 * @param sourceVal The source value at the call site. 









	 * @param retSite The return site (in the caller) with which this function is associated.









	 * @param targetVal The target value at the return site.









	 * @param function The edge function used to compute V-type values from the source node to the target node.  









	 */









 public synchronized void insertFunction(N callSite,D sourceVal, N retSite, D targetVal, EdgeFunction<V> function) {









 assert callSite!=null;









 assert sourceVal!=null;









 assert retSite!=null;









 assert targetVal!=null;









 assert function!=null;









 









 Table<N, D, EdgeFunction<V>> targetAndTargetValToFunction = table.get(callSite,sourceVal);









 if(targetAndTargetValToFunction==null) {









 targetAndTargetValToFunction = HashBasedTable.create();









 table.put(callSite,sourceVal,targetAndTargetValToFunction);









 }









 targetAndTargetValToFunction.put(retSite, targetVal, function);









 }



















 /**









	 * Retrieves all summary functions for a given call site, source value and









	 * return site (in the caller).









	 * The result contains a mapping from target value to associated edge function.









	 */









 public synchronized Map<D,EdgeFunction<V>> summariesFor(N callSite, D sourceVal, N returnSite) {









 assert callSite!=null;









 assert sourceVal!=null;









 assert returnSite!=null;



















 Table<N, D, EdgeFunction<V>> res = table.get(callSite,sourceVal);









 if(res==null) return Collections.emptyMap();









 else {









 return res.row(returnSite);









 }









 }









}












/*******************************************************************************









 * Copyright (c) 2012 Eric Bodden.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Eric Bodden - initial API and implementation









 ******************************************************************************/









package heros.solver;



















import heros.EdgeFunction;









import heros.SynchronizedBy;









import heros.ThreadSafe;



















import java.util.Collections;









import java.util.Map;





























import com.google.common.collect.HashBasedTable;









import com.google.common.collect.Table;





























/**









 * A data structure to record summary functions in an indexed fashion, for fast retrieval.









 */









@ThreadSafe









public class SummaryFunctions<N,D,V> {









 









 @SynchronizedBy("consistent lock on this")









 protected Table<N,D,Table<N,D,EdgeFunction<V>>> table = HashBasedTable.create();









 









 /**









	 * Inserts a summary function.









	 * @param callSite The call site with which this function is associated.









	 * @param sourceVal The source value at the call site. 









	 * @param retSite The return site (in the caller) with which this function is associated.









	 * @param targetVal The target value at the return site.









	 * @param function The edge function used to compute V-type values from the source node to the target node.  









	 */









 public synchronized void insertFunction(N callSite,D sourceVal, N retSite, D targetVal, EdgeFunction<V> function) {









 assert callSite!=null;









 assert sourceVal!=null;









 assert retSite!=null;









 assert targetVal!=null;









 assert function!=null;









 









 Table<N, D, EdgeFunction<V>> targetAndTargetValToFunction = table.get(callSite,sourceVal);









 if(targetAndTargetValToFunction==null) {









 targetAndTargetValToFunction = HashBasedTable.create();









 table.put(callSite,sourceVal,targetAndTargetValToFunction);









 }









 targetAndTargetValToFunction.put(retSite, targetVal, function);









 }



















 /**









	 * Retrieves all summary functions for a given call site, source value and









	 * return site (in the caller).









	 * The result contains a mapping from target value to associated edge function.









	 */









 public synchronized Map<D,EdgeFunction<V>> summariesFor(N callSite, D sourceVal, N returnSite) {









 assert callSite!=null;









 assert sourceVal!=null;









 assert returnSite!=null;



















 Table<N, D, EdgeFunction<V>> res = table.get(callSite,sourceVal);









 if(res==null) return Collections.emptyMap();









 else {









 return res.row(returnSite);









 }









 }









}




/*******************************************************************************/******************************************************************************* * Copyright (c) 2012 Eric Bodden. * Copyright (c) 2012 Eric Bodden. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Eric Bodden - initial API and implementation *     Eric Bodden - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.solver;packageheros.solver;import heros.EdgeFunction;importheros.EdgeFunction;import heros.SynchronizedBy;importheros.SynchronizedBy;import heros.ThreadSafe;importheros.ThreadSafe;import java.util.Collections;importjava.util.Collections;import java.util.Map;importjava.util.Map;import com.google.common.collect.HashBasedTable;importcom.google.common.collect.HashBasedTable;import com.google.common.collect.Table;importcom.google.common.collect.Table;/**/** * A data structure to record summary functions in an indexed fashion, for fast retrieval. * A data structure to record summary functions in an indexed fashion, for fast retrieval. */ */@ThreadSafe@ThreadSafepublic class SummaryFunctions<N,D,V> {publicclassSummaryFunctions<N,D,V>{  @SynchronizedBy("consistent lock on this")@SynchronizedBy("consistent lock on this") protected Table<N,D,Table<N,D,EdgeFunction<V>>> table = HashBasedTable.create();protectedTable<N,D,Table<N,D,EdgeFunction<V>>>table=HashBasedTable.create();  /**/**	 * Inserts a summary function.	 * Inserts a summary function.	 * @param callSite The call site with which this function is associated.	 * @param callSite The call site with which this function is associated.	 * @param sourceVal The source value at the call site. 	 * @param sourceVal The source value at the call site. 	 * @param retSite The return site (in the caller) with which this function is associated.	 * @param retSite The return site (in the caller) with which this function is associated.	 * @param targetVal The target value at the return site.	 * @param targetVal The target value at the return site.	 * @param function The edge function used to compute V-type values from the source node to the target node.  	 * @param function The edge function used to compute V-type values from the source node to the target node.  	 */	 */ public synchronized void insertFunction(N callSite,D sourceVal, N retSite, D targetVal, EdgeFunction<V> function) {publicsynchronizedvoidinsertFunction(NcallSite,DsourceVal,NretSite,DtargetVal,EdgeFunction<V>function){ assert callSite!=null;assertcallSite!=null; assert sourceVal!=null;assertsourceVal!=null; assert retSite!=null;assertretSite!=null; assert targetVal!=null;asserttargetVal!=null; assert function!=null;assertfunction!=null;  Table<N, D, EdgeFunction<V>> targetAndTargetValToFunction = table.get(callSite,sourceVal);Table<N,D,EdgeFunction<V>>targetAndTargetValToFunction=table.get(callSite,sourceVal); if(targetAndTargetValToFunction==null) {if(targetAndTargetValToFunction==null){ targetAndTargetValToFunction = HashBasedTable.create();targetAndTargetValToFunction=HashBasedTable.create(); table.put(callSite,sourceVal,targetAndTargetValToFunction);table.put(callSite,sourceVal,targetAndTargetValToFunction); }} targetAndTargetValToFunction.put(retSite, targetVal, function);targetAndTargetValToFunction.put(retSite,targetVal,function); }} /**/**	 * Retrieves all summary functions for a given call site, source value and	 * Retrieves all summary functions for a given call site, source value and	 * return site (in the caller).	 * return site (in the caller).	 * The result contains a mapping from target value to associated edge function.	 * The result contains a mapping from target value to associated edge function.	 */	 */ public synchronized Map<D,EdgeFunction<V>> summariesFor(N callSite, D sourceVal, N returnSite) {publicsynchronizedMap<D,EdgeFunction<V>>summariesFor(NcallSite,DsourceVal,NreturnSite){ assert callSite!=null;assertcallSite!=null; assert sourceVal!=null;assertsourceVal!=null; assert returnSite!=null;assertreturnSite!=null; Table<N, D, EdgeFunction<V>> res = table.get(callSite,sourceVal);Table<N,D,EdgeFunction<V>>res=table.get(callSite,sourceVal); if(res==null) return Collections.emptyMap();if(res==null)returnCollections.emptyMap(); else {else{ return res.row(returnSite);returnres.row(returnSite); }} }}}}









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






