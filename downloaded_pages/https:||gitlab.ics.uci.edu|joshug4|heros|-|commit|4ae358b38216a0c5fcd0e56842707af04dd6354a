



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

4ae358b3















Commit
4ae358b3


authored
Jun 05, 2013
by


Eric Bodden



Browse files




for unbalanced problems on return statements we now use the return flow...

for unbalanced problems on return statements we now use the return flow function, not the normal flow function
the caller is then simply "null"
added some comments about this






parent
525c45fb













Changes
3




Hide whitespace changes

Inline
Side-by-side















src/heros/EdgeFunctions.java








View file @ 4ae358b3






......@@ -71,6 +71,10 @@ public interface EdgeFunctions<N, D, M, V> {









	 *            method from which the exitStmt is actually returning. This










	 *            information can be exploited to compute a value that depend on










	 *            information from before the call.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @param calleeMethod










	 *            The method from which we are exiting.










	 * @param exitStmt



......@@ -80,6 +84,10 @@ public interface EdgeFunctions<N, D, M, V> {









	 * @param returnSite










	 *            One of the possible successor statements of a caller to the










	 *            method we are exiting from.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @param tgtNode










	 *            The D-type value with which the target value will be










	 *            associated at the returnSite.



......














src/heros/FlowFunctions.java








View file @ 4ae358b3






......@@ -58,8 +58,12 @@ public interface FlowFunctions<N, D, M> {









	 * @param callSite










	 *            One of all the call sites in the program that called the










	 *            method from which the exitStmt is actually returning. This










	 *            information can be exploited to compute a value that depend on










	 *            information can be exploited to compute a value that depends on










	 *            information from before the call.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @param calleeMethod










	 *            The method from which exitStmt returns.










	 * @param exitStmt



......@@ -69,6 +73,10 @@ public interface FlowFunctions<N, D, M> {









	 *            One of the successor statements of the callSite. There may be










	 *            multiple successors in case of possible exceptional flow. This










	 *            method will be called for each such successor.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @return










	 */










 public FlowFunction<D> getReturnFlowFunction(N callSite, M calleeMethod, N exitStmt, N returnSite);



......














src/heros/solver/IDESolver.java








View file @ 4ae358b3






......@@ -425,10 +425,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 //in cases where there are no callers, the return statement would normally not be processed at all;










 //this might be undesirable if the flow function has a side effect such as registering a taint;










 //instead we thus call the return flow function will a null caller










 if(callers.isEmpty()) {










 FlowFunction<D> normalFlowFunction = flowFunctions.getNormalFlowFunction(n,n);










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(null, methodThatNeedsSummary,n,null);










 flowFunctionConstructionCount++;










 normalFlowFunction.computeTargets(d2);










 retFunction.computeTargets(d2);










 }










 }










 }



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

4ae358b3















Commit
4ae358b3


authored
Jun 05, 2013
by


Eric Bodden



Browse files




for unbalanced problems on return statements we now use the return flow...

for unbalanced problems on return statements we now use the return flow function, not the normal flow function
the caller is then simply "null"
added some comments about this






parent
525c45fb













Changes
3




Hide whitespace changes

Inline
Side-by-side















src/heros/EdgeFunctions.java








View file @ 4ae358b3






......@@ -71,6 +71,10 @@ public interface EdgeFunctions<N, D, M, V> {









	 *            method from which the exitStmt is actually returning. This










	 *            information can be exploited to compute a value that depend on










	 *            information from before the call.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @param calleeMethod










	 *            The method from which we are exiting.










	 * @param exitStmt



......@@ -80,6 +84,10 @@ public interface EdgeFunctions<N, D, M, V> {









	 * @param returnSite










	 *            One of the possible successor statements of a caller to the










	 *            method we are exiting from.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @param tgtNode










	 *            The D-type value with which the target value will be










	 *            associated at the returnSite.



......














src/heros/FlowFunctions.java








View file @ 4ae358b3






......@@ -58,8 +58,12 @@ public interface FlowFunctions<N, D, M> {









	 * @param callSite










	 *            One of all the call sites in the program that called the










	 *            method from which the exitStmt is actually returning. This










	 *            information can be exploited to compute a value that depend on










	 *            information can be exploited to compute a value that depends on










	 *            information from before the call.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @param calleeMethod










	 *            The method from which exitStmt returns.










	 * @param exitStmt



......@@ -69,6 +73,10 @@ public interface FlowFunctions<N, D, M> {









	 *            One of the successor statements of the callSite. There may be










	 *            multiple successors in case of possible exceptional flow. This










	 *            method will be called for each such successor.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @return










	 */










 public FlowFunction<D> getReturnFlowFunction(N callSite, M calleeMethod, N exitStmt, N returnSite);



......














src/heros/solver/IDESolver.java








View file @ 4ae358b3






......@@ -425,10 +425,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 //in cases where there are no callers, the return statement would normally not be processed at all;










 //this might be undesirable if the flow function has a side effect such as registering a taint;










 //instead we thus call the return flow function will a null caller










 if(callers.isEmpty()) {










 FlowFunction<D> normalFlowFunction = flowFunctions.getNormalFlowFunction(n,n);










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(null, methodThatNeedsSummary,n,null);










 flowFunctionConstructionCount++;










 normalFlowFunction.computeTargets(d2);










 retFunction.computeTargets(d2);










 }










 }










 }



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

4ae358b3







Open sidebar



Joshua Garcia heros
Commits

4ae358b3




Open sidebar

Joshua Garcia heros
Commits

4ae358b3


Joshua GarciaherosherosCommits
4ae358b3








Commit
4ae358b3


authored
Jun 05, 2013
by


Eric Bodden



Browse files




for unbalanced problems on return statements we now use the return flow...

for unbalanced problems on return statements we now use the return flow function, not the normal flow function
the caller is then simply "null"
added some comments about this






parent
525c45fb













Changes
3




Hide whitespace changes

Inline
Side-by-side















src/heros/EdgeFunctions.java








View file @ 4ae358b3






......@@ -71,6 +71,10 @@ public interface EdgeFunctions<N, D, M, V> {









	 *            method from which the exitStmt is actually returning. This










	 *            information can be exploited to compute a value that depend on










	 *            information from before the call.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @param calleeMethod










	 *            The method from which we are exiting.










	 * @param exitStmt



......@@ -80,6 +84,10 @@ public interface EdgeFunctions<N, D, M, V> {









	 * @param returnSite










	 *            One of the possible successor statements of a caller to the










	 *            method we are exiting from.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @param tgtNode










	 *            The D-type value with which the target value will be










	 *            associated at the returnSite.



......














src/heros/FlowFunctions.java








View file @ 4ae358b3






......@@ -58,8 +58,12 @@ public interface FlowFunctions<N, D, M> {









	 * @param callSite










	 *            One of all the call sites in the program that called the










	 *            method from which the exitStmt is actually returning. This










	 *            information can be exploited to compute a value that depend on










	 *            information can be exploited to compute a value that depends on










	 *            information from before the call.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @param calleeMethod










	 *            The method from which exitStmt returns.










	 * @param exitStmt



......@@ -69,6 +73,10 @@ public interface FlowFunctions<N, D, M> {









	 *            One of the successor statements of the callSite. There may be










	 *            multiple successors in case of possible exceptional flow. This










	 *            method will be called for each such successor.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @return










	 */










 public FlowFunction<D> getReturnFlowFunction(N callSite, M calleeMethod, N exitStmt, N returnSite);



......














src/heros/solver/IDESolver.java








View file @ 4ae358b3






......@@ -425,10 +425,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 //in cases where there are no callers, the return statement would normally not be processed at all;










 //this might be undesirable if the flow function has a side effect such as registering a taint;










 //instead we thus call the return flow function will a null caller










 if(callers.isEmpty()) {










 FlowFunction<D> normalFlowFunction = flowFunctions.getNormalFlowFunction(n,n);










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(null, methodThatNeedsSummary,n,null);










 flowFunctionConstructionCount++;










 normalFlowFunction.computeTargets(d2);










 retFunction.computeTargets(d2);










 }










 }










 }



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
4ae358b3


authored
Jun 05, 2013
by


Eric Bodden



Browse files




for unbalanced problems on return statements we now use the return flow...

for unbalanced problems on return statements we now use the return flow function, not the normal flow function
the caller is then simply "null"
added some comments about this






parent
525c45fb













Changes
3




Hide whitespace changes

Inline
Side-by-side















src/heros/EdgeFunctions.java








View file @ 4ae358b3






......@@ -71,6 +71,10 @@ public interface EdgeFunctions<N, D, M, V> {









	 *            method from which the exitStmt is actually returning. This










	 *            information can be exploited to compute a value that depend on










	 *            information from before the call.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @param calleeMethod










	 *            The method from which we are exiting.










	 * @param exitStmt



......@@ -80,6 +84,10 @@ public interface EdgeFunctions<N, D, M, V> {









	 * @param returnSite










	 *            One of the possible successor statements of a caller to the










	 *            method we are exiting from.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @param tgtNode










	 *            The D-type value with which the target value will be










	 *            associated at the returnSite.



......














src/heros/FlowFunctions.java








View file @ 4ae358b3






......@@ -58,8 +58,12 @@ public interface FlowFunctions<N, D, M> {









	 * @param callSite










	 *            One of all the call sites in the program that called the










	 *            method from which the exitStmt is actually returning. This










	 *            information can be exploited to compute a value that depend on










	 *            information can be exploited to compute a value that depends on










	 *            information from before the call.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @param calleeMethod










	 *            The method from which exitStmt returns.










	 * @param exitStmt



......@@ -69,6 +73,10 @@ public interface FlowFunctions<N, D, M> {









	 *            One of the successor statements of the callSite. There may be










	 *            multiple successors in case of possible exceptional flow. This










	 *            method will be called for each such successor.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @return










	 */










 public FlowFunction<D> getReturnFlowFunction(N callSite, M calleeMethod, N exitStmt, N returnSite);



......














src/heros/solver/IDESolver.java








View file @ 4ae358b3






......@@ -425,10 +425,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 //in cases where there are no callers, the return statement would normally not be processed at all;










 //this might be undesirable if the flow function has a side effect such as registering a taint;










 //instead we thus call the return flow function will a null caller










 if(callers.isEmpty()) {










 FlowFunction<D> normalFlowFunction = flowFunctions.getNormalFlowFunction(n,n);










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(null, methodThatNeedsSummary,n,null);










 flowFunctionConstructionCount++;










 normalFlowFunction.computeTargets(d2);










 retFunction.computeTargets(d2);










 }










 }










 }



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
4ae358b3


authored
Jun 05, 2013
by


Eric Bodden



Browse files



Commit
4ae358b3


authored
Jun 05, 2013
by


Eric Bodden

4ae358b3authoredbyEric Bodden

for unbalanced problems on return statements we now use the return flow...

for unbalanced problems on return statements we now use the return flow function, not the normal flow function
the caller is then simply "null"
added some comments about this





parent
525c45fb
















parent
525c45fb





parent












Changes
3
3


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/EdgeFunctions.java








View file @ 4ae358b3






......@@ -71,6 +71,10 @@ public interface EdgeFunctions<N, D, M, V> {









	 *            method from which the exitStmt is actually returning. This










	 *            information can be exploited to compute a value that depend on










	 *            information from before the call.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @param calleeMethod










	 *            The method from which we are exiting.










	 * @param exitStmt



......@@ -80,6 +84,10 @@ public interface EdgeFunctions<N, D, M, V> {









	 * @param returnSite










	 *            One of the possible successor statements of a caller to the










	 *            method we are exiting from.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @param tgtNode










	 *            The D-type value with which the target value will be










	 *            associated at the returnSite.



......














src/heros/FlowFunctions.java








View file @ 4ae358b3






......@@ -58,8 +58,12 @@ public interface FlowFunctions<N, D, M> {









	 * @param callSite










	 *            One of all the call sites in the program that called the










	 *            method from which the exitStmt is actually returning. This










	 *            information can be exploited to compute a value that depend on










	 *            information can be exploited to compute a value that depends on










	 *            information from before the call.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @param calleeMethod










	 *            The method from which exitStmt returns.










	 * @param exitStmt



......@@ -69,6 +73,10 @@ public interface FlowFunctions<N, D, M> {









	 *            One of the successor statements of the callSite. There may be










	 *            multiple successors in case of possible exceptional flow. This










	 *            method will be called for each such successor.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @return










	 */










 public FlowFunction<D> getReturnFlowFunction(N callSite, M calleeMethod, N exitStmt, N returnSite);



......














src/heros/solver/IDESolver.java








View file @ 4ae358b3






......@@ -425,10 +425,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 //in cases where there are no callers, the return statement would normally not be processed at all;










 //this might be undesirable if the flow function has a side effect such as registering a taint;










 //instead we thus call the return flow function will a null caller










 if(callers.isEmpty()) {










 FlowFunction<D> normalFlowFunction = flowFunctions.getNormalFlowFunction(n,n);










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(null, methodThatNeedsSummary,n,null);










 flowFunctionConstructionCount++;










 normalFlowFunction.computeTargets(d2);










 retFunction.computeTargets(d2);










 }










 }










 }



......














src/heros/EdgeFunctions.java








View file @ 4ae358b3






......@@ -71,6 +71,10 @@ public interface EdgeFunctions<N, D, M, V> {









	 *            method from which the exitStmt is actually returning. This










	 *            information can be exploited to compute a value that depend on










	 *            information from before the call.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @param calleeMethod










	 *            The method from which we are exiting.










	 * @param exitStmt



......@@ -80,6 +84,10 @@ public interface EdgeFunctions<N, D, M, V> {









	 * @param returnSite










	 *            One of the possible successor statements of a caller to the










	 *            method we are exiting from.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @param tgtNode










	 *            The D-type value with which the target value will be










	 *            associated at the returnSite.



......












src/heros/EdgeFunctions.java








View file @ 4ae358b3








src/heros/EdgeFunctions.java










View file @ 4ae358b3


4ae358b3



......@@ -71,6 +71,10 @@ public interface EdgeFunctions<N, D, M, V> {









	 *            method from which the exitStmt is actually returning. This










	 *            information can be exploited to compute a value that depend on










	 *            information from before the call.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @param calleeMethod










	 *            The method from which we are exiting.










	 * @param exitStmt



......@@ -80,6 +84,10 @@ public interface EdgeFunctions<N, D, M, V> {









	 * @param returnSite










	 *            One of the possible successor statements of a caller to the










	 *            method we are exiting from.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @param tgtNode










	 *            The D-type value with which the target value will be










	 *            associated at the returnSite.



......






......@@ -71,6 +71,10 @@ public interface EdgeFunctions<N, D, M, V> {









	 *            method from which the exitStmt is actually returning. This










	 *            information can be exploited to compute a value that depend on










	 *            information from before the call.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @param calleeMethod










	 *            The method from which we are exiting.










	 * @param exitStmt



......@@ -80,6 +84,10 @@ public interface EdgeFunctions<N, D, M, V> {









	 * @param returnSite










	 *            One of the possible successor statements of a caller to the










	 *            method we are exiting from.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @param tgtNode










	 *            The D-type value with which the target value will be










	 *            associated at the returnSite.



......


	 *            method from which the exitStmt is actually returning. This	 *            method from which the exitStmt is actually returning. This	 *            information can be exploited to compute a value that depend on	 *            information can be exploited to compute a value that depend on	 *            information from before the call.	 *            information from before the call.	 *            <b>Note:</b> This value might be <code>null</code> if	 *            <b>Note:</b> This value might be <code>null</code> if	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}	 *            returning <code>true</code> in a situation where the call graph	 *            returning <code>true</code> in a situation where the call graph	 *            does not contain a caller for the method that is returned from.	 *            does not contain a caller for the method that is returned from.	 * @param calleeMethod	 * @param calleeMethod	 *            The method from which we are exiting.	 *            The method from which we are exiting.	 * @param exitStmt	 * @param exitStmt	 * @param returnSite	 * @param returnSite	 *            One of the possible successor statements of a caller to the	 *            One of the possible successor statements of a caller to the	 *            method we are exiting from.	 *            method we are exiting from.	 *            <b>Note:</b> This value might be <code>null</code> if	 *            <b>Note:</b> This value might be <code>null</code> if	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}	 *            returning <code>true</code> in a situation where the call graph	 *            returning <code>true</code> in a situation where the call graph	 *            does not contain a caller for the method that is returned from.	 *            does not contain a caller for the method that is returned from.	 * @param tgtNode	 * @param tgtNode	 *            The D-type value with which the target value will be	 *            The D-type value with which the target value will be	 *            associated at the returnSite.	 *            associated at the returnSite.








src/heros/FlowFunctions.java








View file @ 4ae358b3






......@@ -58,8 +58,12 @@ public interface FlowFunctions<N, D, M> {









	 * @param callSite










	 *            One of all the call sites in the program that called the










	 *            method from which the exitStmt is actually returning. This










	 *            information can be exploited to compute a value that depend on










	 *            information can be exploited to compute a value that depends on










	 *            information from before the call.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @param calleeMethod










	 *            The method from which exitStmt returns.










	 * @param exitStmt



......@@ -69,6 +73,10 @@ public interface FlowFunctions<N, D, M> {









	 *            One of the successor statements of the callSite. There may be










	 *            multiple successors in case of possible exceptional flow. This










	 *            method will be called for each such successor.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @return










	 */










 public FlowFunction<D> getReturnFlowFunction(N callSite, M calleeMethod, N exitStmt, N returnSite);



......












src/heros/FlowFunctions.java








View file @ 4ae358b3








src/heros/FlowFunctions.java










View file @ 4ae358b3


4ae358b3



......@@ -58,8 +58,12 @@ public interface FlowFunctions<N, D, M> {









	 * @param callSite










	 *            One of all the call sites in the program that called the










	 *            method from which the exitStmt is actually returning. This










	 *            information can be exploited to compute a value that depend on










	 *            information can be exploited to compute a value that depends on










	 *            information from before the call.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @param calleeMethod










	 *            The method from which exitStmt returns.










	 * @param exitStmt



......@@ -69,6 +73,10 @@ public interface FlowFunctions<N, D, M> {









	 *            One of the successor statements of the callSite. There may be










	 *            multiple successors in case of possible exceptional flow. This










	 *            method will be called for each such successor.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @return










	 */










 public FlowFunction<D> getReturnFlowFunction(N callSite, M calleeMethod, N exitStmt, N returnSite);



......






......@@ -58,8 +58,12 @@ public interface FlowFunctions<N, D, M> {









	 * @param callSite










	 *            One of all the call sites in the program that called the










	 *            method from which the exitStmt is actually returning. This










	 *            information can be exploited to compute a value that depend on










	 *            information can be exploited to compute a value that depends on










	 *            information from before the call.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @param calleeMethod










	 *            The method from which exitStmt returns.










	 * @param exitStmt



......@@ -69,6 +73,10 @@ public interface FlowFunctions<N, D, M> {









	 *            One of the successor statements of the callSite. There may be










	 *            multiple successors in case of possible exceptional flow. This










	 *            method will be called for each such successor.










	 *            <b>Note:</b> This value might be <code>null</code> if










	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}










	 *            returning <code>true</code> in a situation where the call graph










	 *            does not contain a caller for the method that is returned from.










	 * @return










	 */










 public FlowFunction<D> getReturnFlowFunction(N callSite, M calleeMethod, N exitStmt, N returnSite);



......


	 * @param callSite	 * @param callSite	 *            One of all the call sites in the program that called the	 *            One of all the call sites in the program that called the	 *            method from which the exitStmt is actually returning. This	 *            method from which the exitStmt is actually returning. This	 *            information can be exploited to compute a value that depend on	 *            information can be exploited to compute a value that depend on	 *            information can be exploited to compute a value that depends on	 *            information can be exploited to compute a value that depends ons	 *            information from before the call.	 *            information from before the call.	 *            <b>Note:</b> This value might be <code>null</code> if	 *            <b>Note:</b> This value might be <code>null</code> if	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}	 *            returning <code>true</code> in a situation where the call graph	 *            returning <code>true</code> in a situation where the call graph	 *            does not contain a caller for the method that is returned from.	 *            does not contain a caller for the method that is returned from.	 * @param calleeMethod	 * @param calleeMethod	 *            The method from which exitStmt returns.	 *            The method from which exitStmt returns.	 * @param exitStmt	 * @param exitStmt	 *            One of the successor statements of the callSite. There may be	 *            One of the successor statements of the callSite. There may be	 *            multiple successors in case of possible exceptional flow. This	 *            multiple successors in case of possible exceptional flow. This	 *            method will be called for each such successor.	 *            method will be called for each such successor.	 *            <b>Note:</b> This value might be <code>null</code> if	 *            <b>Note:</b> This value might be <code>null</code> if	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}	 *            using a tabulation problem with {@link IFDSTabulationProblem#followReturnsPastSeeds()}	 *            returning <code>true</code> in a situation where the call graph	 *            returning <code>true</code> in a situation where the call graph	 *            does not contain a caller for the method that is returned from.	 *            does not contain a caller for the method that is returned from.	 * @return	 * @return	 */	 */ public FlowFunction<D> getReturnFlowFunction(N callSite, M calleeMethod, N exitStmt, N returnSite);publicFlowFunction<D>getReturnFlowFunction(NcallSite,McalleeMethod,NexitStmt,NreturnSite);








src/heros/solver/IDESolver.java








View file @ 4ae358b3






......@@ -425,10 +425,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 //in cases where there are no callers, the return statement would normally not be processed at all;










 //this might be undesirable if the flow function has a side effect such as registering a taint;










 //instead we thus call the return flow function will a null caller










 if(callers.isEmpty()) {










 FlowFunction<D> normalFlowFunction = flowFunctions.getNormalFlowFunction(n,n);










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(null, methodThatNeedsSummary,n,null);










 flowFunctionConstructionCount++;










 normalFlowFunction.computeTargets(d2);










 retFunction.computeTargets(d2);










 }










 }










 }



......












src/heros/solver/IDESolver.java








View file @ 4ae358b3








src/heros/solver/IDESolver.java










View file @ 4ae358b3


4ae358b3



......@@ -425,10 +425,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 //in cases where there are no callers, the return statement would normally not be processed at all;










 //this might be undesirable if the flow function has a side effect such as registering a taint;










 //instead we thus call the return flow function will a null caller










 if(callers.isEmpty()) {










 FlowFunction<D> normalFlowFunction = flowFunctions.getNormalFlowFunction(n,n);










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(null, methodThatNeedsSummary,n,null);










 flowFunctionConstructionCount++;










 normalFlowFunction.computeTargets(d2);










 retFunction.computeTargets(d2);










 }










 }










 }



......






......@@ -425,10 +425,13 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 }










 }










 //in cases where there are no callers, the return statement would normally not be processed at all;










 //this might be undesirable if the flow function has a side effect such as registering a taint;










 //instead we thus call the return flow function will a null caller










 if(callers.isEmpty()) {










 FlowFunction<D> normalFlowFunction = flowFunctions.getNormalFlowFunction(n,n);










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(null, methodThatNeedsSummary,n,null);










 flowFunctionConstructionCount++;










 normalFlowFunction.computeTargets(d2);










 retFunction.computeTargets(d2);










 }










 }










 }



......


 }} }} }} //in cases where there are no callers, the return statement would normally not be processed at all;//in cases where there are no callers, the return statement would normally not be processed at all; //this might be undesirable if the flow function has a side effect such as registering a taint;//this might be undesirable if the flow function has a side effect such as registering a taint; //instead we thus call the return flow function will a null caller//instead we thus call the return flow function will a null caller if(callers.isEmpty()) {if(callers.isEmpty()){ FlowFunction<D> normalFlowFunction = flowFunctions.getNormalFlowFunction(n,n);FlowFunction<D>normalFlowFunctionnormalFlow=flowFunctions.getNormalFlowFunctionNormal(n,,nn); FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(null, methodThatNeedsSummary,n,null);FlowFunction<D>retFunctionret=flowFunctions.getReturnFlowFunctionReturn(nullull,, methodThatNeedsSummarymethodThatNeedsSummary,,nn,,nullnull); flowFunctionConstructionCount++;flowFunctionConstructionCount++; normalFlowFunction.computeTargets(d2);normalFlowFunctionnormalFlow.computeTargets(d2); retFunction.computeTargets(d2);retFunctionret.computeTargets(d2); }} }} }}









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






