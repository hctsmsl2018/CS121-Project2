



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

9176fc7c















Commit
9176fc7c


authored
Nov 13, 2014
by


Johannes Lerch



Browse files




annotated facts (WIP)







parent
3b064347













Changes
5




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPathUtil.java








View file @ 9176fc7c








...@@ -10,6 +10,8 @@
...@@ -10,6 +10,8 @@






 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;























import heros.alias.FieldReference.SpecificFieldReference;

















public class AccessPathUtil {





public class AccessPathUtil {





















 public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {





 public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {



...@@ -47,4 +49,11 @@ public class AccessPathUtil {
...@@ -47,4 +49,11 @@ public class AccessPathUtil {






 





 







 return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);





 return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);







 }





 }



















 public static <D extends FieldSensitiveFact<?, D>> D cloneWithConcatenatedAccessPath(D fact, FieldReference... fieldRefs) {









 FieldReference[] accessPath = new FieldReference[fact.getAccessPath().length+fieldRefs.length];









 System.arraycopy(fact.getAccessPath(), 0, accessPath, 0, fact.getAccessPath().length);









 System.arraycopy(fieldRefs, 0, accessPath, fact.getAccessPath().length, fieldRefs.length);









 return fact.cloneWithAccessPath(accessPath);









 }







}




}















src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 9176fc7c








...@@ -29,9 +29,9 @@ import com.google.common.cache.CacheBuilder;
...@@ -29,9 +29,9 @@ import com.google.common.cache.CacheBuilder;






import com.google.common.collect.Sets;





import com.google.common.collect.Sets;





















import heros.DontSynchronize;





import heros.DontSynchronize;







import heros.FlowFunction;









import heros.FlowFunctionCache;





import heros.FlowFunctionCache;







import heros.alias.FlowFunctions;





import heros.alias.FieldReference.SpecificFieldReference;









import heros.alias.FlowFunction.AnnotatedFact;







import heros.alias.IFDSTabulationProblem;





import heros.alias.IFDSTabulationProblem;







import heros.InterproceduralCFG;





import heros.InterproceduralCFG;







import heros.SynchronizedBy;





import heros.SynchronizedBy;



...@@ -223,27 +223,27 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -223,27 +223,27 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 for(M sCalledProcN: callees) { //still line 14





 for(M sCalledProcN: callees) { //still line 14







 //compute the call-flow function





 //compute the call-flow function







 FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);





 FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);







 Set<D> res = computeCallFlowFunction(function, d1, d2);





 Set<AnnotatedFact<D>> res = computeCallFlowFunction(function, d1, d2);







 





 







 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);





 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);







 //for each result node of the call-flow function





 //for each result node of the call-flow function







 for(D d3: res) {





 for(AnnotatedFact<D> d3: res) {







 //for each callee's start point(s)





 //for each callee's start point(s)







 for(N sP: startPointsOf) {





 for(N sP: startPointsOf) {







 //create initial self-loop





 //create initial self-loop







 D abstractStartPointFact = d3.cloneWithAccessPath();





 D abstractStartPointFact = d3.getFact().cloneWithAccessPath();







 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15





 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15







 }





 }







 





 







 //register the fact that <sp,d3> has an incoming edge from <n,d2>





 //register the fact that <sp,d3> has an incoming edge from <n,d2>







 //line 15.1 of Naeem/Lhotak/Rodriguez





 //line 15.1 of Naeem/Lhotak/Rodriguez







 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3,n,d1,d2)))





 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3.getFact(),n,d1,d2)))







 continue;





 continue;







 





 







 //TODO: Resume edges that are on hold and match this d3





 //TODO: Resume edges that are on hold and match this d3







 





 







 //line 15.2





 //line 15.2







 Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3);





 Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3.getFact());







 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez







 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,





 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,



...@@ -251,26 +251,15 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -251,26 +251,15 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //because we have observed a potentially new incoming edge into <sP,d3>





 //because we have observed a potentially new incoming edge into <sP,d3>







 if (endSumm != null)





 if (endSumm != null)







 for(SummaryEdge<D, N> summary: endSumm) {





 for(SummaryEdge<D, N> summary: endSumm) {







 D d4 = AccessPathUtil.applyAbstractedSummary(d3, summary);





 D d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);







 





 







 //for each return site





 //for each return site







 for(N retSiteN: returnSiteNs) {





 for(N retSiteN: returnSiteNs) {







 //compute return-flow function





 //compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);







 //for each target value of the function





 //for each target value of the function







 for(D d5: computeReturnFlowFunction(retFunction, d4, n)) {





 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, d4, n)) {







 // If we have not changed anything in the callee, we do not need the facts





 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());







 // from there. Even if we change something: If we don't need the concrete









 // path, we can skip the callee in the predecessor chain









 D d5p = d5;









 //	if (d5.equals(d2))









 //		d5p = d2;









 //	else if (setJumpPredecessors)









 //		d5.setPredecessor(d2);









 









 // Set the calling context









 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5p);









 









 propagate(d1, retSiteN, d5p_restoredCtx, n, false);





 propagate(d1, retSiteN, d5p_restoredCtx, n, false);







 }





 }







 }





 }



...@@ -281,8 +270,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -281,8 +270,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //process intra-procedural flows along call-to-return flow functions





 //process intra-procedural flows along call-to-return flow functions







 for (N returnSiteN : returnSiteNs) {





 for (N returnSiteN : returnSiteNs) {







 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);





 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);







 for(D d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))





 for(AnnotatedFact<D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))







 propagate(d1, returnSiteN, d3, n, false);





 propagate(d1, returnSiteN, d3.getFact(), n, false);







 }





 }







 }





 }

















...@@ -293,7 +282,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -293,7 +282,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param d2 The abstraction at the call site





	 * @param d2 The abstraction at the call site







	 * @return The set of caller-side abstractions at the callee's start node





	 * @return The set of caller-side abstractions at the callee's start node







	 */





	 */







 protected Set<D> computeCallFlowFunction





 protected Set<AnnotatedFact<D>> computeCallFlowFunction







 (FlowFunction<D> callFlowFunction, D d1, D d2) {





 (FlowFunction<D> callFlowFunction, D d1, D d2) {







 return callFlowFunction.computeTargets(d2);





 return callFlowFunction.computeTargets(d2);







 }





 }



...@@ -307,7 +296,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -307,7 +296,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param d2 The abstraction at the call site





	 * @param d2 The abstraction at the call site







	 * @return The set of caller-side abstractions at the return site





	 * @return The set of caller-side abstractions at the return site







	 */





	 */







 protected Set<D> computeCallToReturnFlowFunction





 protected Set<AnnotatedFact<D>> computeCallToReturnFlowFunction







 (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {





 (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {







 return callToReturnFlowFunction.computeTargets(d2);





 return callToReturnFlowFunction.computeTargets(d2);







 }





 }



...@@ -349,11 +338,11 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -349,11 +338,11 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 // compute return-flow function





 // compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);







 D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);





 D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);







 Set<D> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);





 Set<AnnotatedFact<D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);





















 // for each incoming-call value





 // for each incoming-call value







 for (D callerTargetFact : callerTargetFacts) {





 for (AnnotatedFact<D> callerTargetAnnotatedFact : callerTargetFacts) {







 callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetFact);





 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());







 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);





 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);







 }





 }







 }





 }



...@@ -367,9 +356,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -367,9 +356,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 for(N c: callers) {





 for(N c: callers) {







 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {





 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);







 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c);





 Set<AnnotatedFact<D>> targets = computeReturnFlowFunction(retFunction, d2, c);







 for(D d5: targets)





 for(AnnotatedFact<D> d5: targets)







 propagate(zeroValue, retSiteC, d5, c, true);





 propagate(zeroValue, retSiteC, d5.getFact(), c, true);







 }





 }







 }





 }







 //in cases where there are no callers, the return statement would normally not be processed at all;





 //in cases where there are no callers, the return statement would normally not be processed at all;



...@@ -390,7 +379,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -390,7 +379,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param callSite The call site





	 * @param callSite The call site







	 * @return The set of caller-side abstractions at the return site





	 * @return The set of caller-side abstractions at the return site







	 */





	 */







 protected Set<D> computeReturnFlowFunction





 protected Set<AnnotatedFact<D>> computeReturnFlowFunction







 (FlowFunction<D> retFunction, D d2, N callSite) {





 (FlowFunction<D> retFunction, D d2, N callSite) {







 return retFunction.computeTargets(d2);





 return retFunction.computeTargets(d2);







 }





 }



...@@ -405,27 +394,43 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -405,27 +394,43 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 final N n = edge.getTarget(); 





 final N n = edge.getTarget(); 







 final D d2 = edge.factAtTarget();





 final D d2 = edge.factAtTarget();







 





 







 //TODO: if reading field f









 // if d1.f element of incoming edges:









 //    create and propagate (d1.f, d2.f)









 // else 









 //	  create and set (d1.f, d2.f) on hold









 //	  create for each incoming edge inc: (inc.call-d1.f, inc.call-d2.f) and put on hold









 //always continue (d1, d2)









 









 //TODO: if writing field f









 // create edge e = (d1, d2.*\{f})









 // if d2.*\{f} element of incoming edges









 // 		continue with e









 // else 









 //		put e on hold









 // always kill (d1, d2)









 









 for (N m : icfg.getSuccsOf(n)) {





 for (N m : icfg.getSuccsOf(n)) {







 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);





 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);







 Set<D> res = computeNormalFlowFunction(flowFunction, d1, d2);





 Set<AnnotatedFact<D>> res = computeNormalFlowFunction(flowFunction, d1, d2);







 for (D d3 : res)





 for (AnnotatedFact<D> d3 : res) {







 propagate(d1, m, d3, null, false); 





 //TODO: if reading field f









 // if d1.f element of incoming edges:









 //    create and propagate (d1.f, d2.f)









 // else 









 //	  create and set (d1.f, d2.f) on hold









 //	  create for each incoming edge inc: (inc.call-d1.f, inc.call-d2.f) and put on hold









 //always continue (d1, d2)









 









 if(d3.getReadField() instanceof SpecificFieldReference) {









 SpecificFieldReference fieldRef = (SpecificFieldReference) d3.getReadField();









 Set<IncomingEdge<D, N>> incomingEdges = incoming(icfg.getMethodOf(n), d3.getFact());









 if(incomingEdges.isEmpty() && !d1.equals(zeroValue)) {









 //no caller interested in d3.field -> put edge on hold









 //TODO









 } else {









 //there is an incoming edge interested in d3.field









 D concretizedSourceValue = AccessPathUtil.cloneWithConcatenatedAccessPath(d1, fieldRef);









 propagate(concretizedSourceValue, m, d3.getFact(), null, false);









 }









 }









 









 









 //TODO: if writing field f









 // create edge e = (d1, d2.*\{f})









 // if d2.*\{f} element of incoming edges









 // 		continue with e









 // else 









 //		put e on hold









 // always kill (d1, d2)









 









 propagate(d1, m, d3.getFact(), null, false);









 









 }







 }





 }







 }





 }







 





 



...@@ -437,7 +442,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -437,7 +442,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param d1 The abstraction at the current node





	 * @param d1 The abstraction at the current node







	 * @return The set of abstractions at the successor node





	 * @return The set of abstractions at the successor node







	 */





	 */







 protected Set<D> computeNormalFlowFunction





 protected Set<AnnotatedFact<D>> computeNormalFlowFunction







 (FlowFunction<D> flowFunction, D d1, D d2) {





 (FlowFunction<D> flowFunction, D d1, D d2) {







 return flowFunction.computeTargets(d2);





 return flowFunction.computeTargets(d2);







 }





 }



......















src/heros/alias/FlowFunction.java



0 → 100644







View file @ 9176fc7c














/*******************************************************************************









 * Copyright (c) 2012 Eric Bodden.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Eric Bodden - initial API and implementation









 ******************************************************************************/









package heros.alias;



















import heros.alias.FieldReference.SpecificFieldReference;



















import java.util.LinkedHashSet;









import java.util.Set;



















/**









 * A flow function computes which of the finitely many D-type values are reachable









 * from the current source values. Typically there will be one such function









 * associated with every possible control flow. 









 * 









 * <b>NOTE:</b> To be able to produce <b>deterministic benchmarking results</b>, we have found that









 * it helps to return {@link LinkedHashSet}s from {@link #computeTargets(Object)}. This is









 * because the duration of IDE's fixed point iteration may depend on the iteration order.









 * Within the solver, we have tried to fix this order as much as possible, but the









 * order, in general, does also depend on the order in which the result set









 * of {@link #computeTargets(Object)} is traversed.









 * 









 * <b>NOTE:</b> Methods defined on this type may be called simultaneously by different threads.









 * Hence, classes implementing this interface should synchronize accesses to









 * any mutable shared state.









 * 









 * @param <D> The type of data-flow facts to be computed by the tabulation problem.









 */









public interface FlowFunction<D extends FieldSensitiveFact<?, D>> {



















 /**









	 * Returns the target values reachable from the source.









	 */









 Set<AnnotatedFact<D>> computeTargets(D source);









 









 public static class AnnotatedFact<D extends FieldSensitiveFact<?, D>> {









 









 private D fact;









 private FieldReference readField;









 private FieldReference writtenField;









 









 //TODO: Refactor API to make things more intuitive









 /**









		 * 









		 * @param fact









		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value









		 * @param writtenField









		 */









 public AnnotatedFact(D fact, FieldReference readField, FieldReference writtenField) {









 this.fact = fact;









 this.readField = readField;









 this.writtenField = writtenField;









 }









 









 public D getFact() {









 return fact;









 }









 









 public FieldReference getReadField() {









 return readField;









 }









 









 public FieldReference getWrittenField() {









 return writtenField;









 }



















 @Override









 public int hashCode() {









 final int prime = 31;









 int result = 1;









 result = prime * result + ((fact == null) ? 0 : fact.hashCode());









 result = prime * result + ((readField == null) ? 0 : readField.hashCode());









 result = prime * result + ((writtenField == null) ? 0 : writtenField.hashCode());









 return result;









 }



















 @Override









 public boolean equals(Object obj) {









 if (this == obj)









 return true;









 if (obj == null)









 return false;









 if (!(obj instanceof AnnotatedFact))









 return false;









 AnnotatedFact other = (AnnotatedFact) obj;









 if (fact == null) {









 if (other.fact != null)









 return false;









 } else if (!fact.equals(other.fact))









 return false;









 if (readField == null) {









 if (other.readField != null)









 return false;









 } else if (!readField.equals(other.readField))









 return false;









 if (writtenField == null) {









 if (other.writtenField != null)









 return false;









 } else if (!writtenField.equals(other.writtenField))









 return false;









 return true;









 }









 }









}















src/heros/alias/FlowFunctions.java








View file @ 9176fc7c








...@@ -11,7 +11,6 @@
...@@ -11,7 +11,6 @@






 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;





















import heros.FlowFunction;























/**





/**







 * Classes implementing this interface provide a factory for a 





 * Classes implementing this interface provide a factory for a 



...@@ -28,7 +27,7 @@ import heros.FlowFunction;
...@@ -28,7 +27,7 @@ import heros.FlowFunction;






 *            The type of objects used to represent methods. Typically





 *            The type of objects used to represent methods. Typically







 *            {@link SootMethod}.





 *            {@link SootMethod}.







 */





 */







public interface FlowFunctions<Stmt, F extends FieldSensitiveFact, Method> {





public interface FlowFunctions<Stmt, F extends FieldSensitiveFact<?, F>, Method> {





















 /**





 /**







	 * Returns the flow function that computes the flow for a normal statement,





	 * Returns the flow function that computes the flow for a normal statement,



...@@ -43,9 +42,6 @@ public interface FlowFunctions<Stmt, F extends FieldSensitiveFact, Method> {
...@@ -43,9 +42,6 @@ public interface FlowFunctions<Stmt, F extends FieldSensitiveFact, Method> {






	 */





	 */







 public FlowFunction<F> getNormalFlowFunction(Stmt curr, Stmt succ);





 public FlowFunction<F> getNormalFlowFunction(Stmt curr, Stmt succ);





















 public FieldReference getReadFieldReference(Stmt curr);









 









 public FieldReference getWrittenFieldReference(Stmt curr);









 





 







 /**





 /**







	 * Returns the flow function that computes the flow for a call statement.





	 * Returns the flow function that computes the flow for a call statement.



......















test/heros/alias/FieldSensitiveSolverTest.java








View file @ 9176fc7c








...@@ -95,8 +95,8 @@ public class FieldSensitiveSolverTest {
...@@ -95,8 +95,8 @@ public class FieldSensitiveSolverTest {






 callSite("c").calls("foo", flow("2.field", "3.field")));





 callSite("c").calls("foo", flow("2.field", "3.field")));







 





 







 helper.method("foo",startPoints("d"),





 helper.method("foo",startPoints("d"),







 readFieldStmt("d", "notfield").succ("e", flow("3", "3"), kill("3.notfield")),





 readFieldStmt("d", "notfield").succ("e", flow("3", "3")),







 normalStmt("e").succ("f", flow("3","4")));





 normalStmt("e").succ("f", flow("3","4"), kill("3.notfield")));







 





 







 helper.method("xyz",





 helper.method("xyz",







 startPoints("g"),





 startPoints("g"),



......

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

9176fc7c















Commit
9176fc7c


authored
Nov 13, 2014
by


Johannes Lerch



Browse files




annotated facts (WIP)







parent
3b064347













Changes
5




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPathUtil.java








View file @ 9176fc7c








...@@ -10,6 +10,8 @@
...@@ -10,6 +10,8 @@






 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;























import heros.alias.FieldReference.SpecificFieldReference;

















public class AccessPathUtil {





public class AccessPathUtil {





















 public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {





 public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {



...@@ -47,4 +49,11 @@ public class AccessPathUtil {
...@@ -47,4 +49,11 @@ public class AccessPathUtil {






 





 







 return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);





 return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);







 }





 }



















 public static <D extends FieldSensitiveFact<?, D>> D cloneWithConcatenatedAccessPath(D fact, FieldReference... fieldRefs) {









 FieldReference[] accessPath = new FieldReference[fact.getAccessPath().length+fieldRefs.length];









 System.arraycopy(fact.getAccessPath(), 0, accessPath, 0, fact.getAccessPath().length);









 System.arraycopy(fieldRefs, 0, accessPath, fact.getAccessPath().length, fieldRefs.length);









 return fact.cloneWithAccessPath(accessPath);









 }







}




}















src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 9176fc7c








...@@ -29,9 +29,9 @@ import com.google.common.cache.CacheBuilder;
...@@ -29,9 +29,9 @@ import com.google.common.cache.CacheBuilder;






import com.google.common.collect.Sets;





import com.google.common.collect.Sets;





















import heros.DontSynchronize;





import heros.DontSynchronize;







import heros.FlowFunction;









import heros.FlowFunctionCache;





import heros.FlowFunctionCache;







import heros.alias.FlowFunctions;





import heros.alias.FieldReference.SpecificFieldReference;









import heros.alias.FlowFunction.AnnotatedFact;







import heros.alias.IFDSTabulationProblem;





import heros.alias.IFDSTabulationProblem;







import heros.InterproceduralCFG;





import heros.InterproceduralCFG;







import heros.SynchronizedBy;





import heros.SynchronizedBy;



...@@ -223,27 +223,27 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -223,27 +223,27 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 for(M sCalledProcN: callees) { //still line 14





 for(M sCalledProcN: callees) { //still line 14







 //compute the call-flow function





 //compute the call-flow function







 FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);





 FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);







 Set<D> res = computeCallFlowFunction(function, d1, d2);





 Set<AnnotatedFact<D>> res = computeCallFlowFunction(function, d1, d2);







 





 







 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);





 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);







 //for each result node of the call-flow function





 //for each result node of the call-flow function







 for(D d3: res) {





 for(AnnotatedFact<D> d3: res) {







 //for each callee's start point(s)





 //for each callee's start point(s)







 for(N sP: startPointsOf) {





 for(N sP: startPointsOf) {







 //create initial self-loop





 //create initial self-loop







 D abstractStartPointFact = d3.cloneWithAccessPath();





 D abstractStartPointFact = d3.getFact().cloneWithAccessPath();







 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15





 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15







 }





 }







 





 







 //register the fact that <sp,d3> has an incoming edge from <n,d2>





 //register the fact that <sp,d3> has an incoming edge from <n,d2>







 //line 15.1 of Naeem/Lhotak/Rodriguez





 //line 15.1 of Naeem/Lhotak/Rodriguez







 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3,n,d1,d2)))





 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3.getFact(),n,d1,d2)))







 continue;





 continue;







 





 







 //TODO: Resume edges that are on hold and match this d3





 //TODO: Resume edges that are on hold and match this d3







 





 







 //line 15.2





 //line 15.2







 Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3);





 Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3.getFact());







 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez







 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,





 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,



...@@ -251,26 +251,15 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -251,26 +251,15 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //because we have observed a potentially new incoming edge into <sP,d3>





 //because we have observed a potentially new incoming edge into <sP,d3>







 if (endSumm != null)





 if (endSumm != null)







 for(SummaryEdge<D, N> summary: endSumm) {





 for(SummaryEdge<D, N> summary: endSumm) {







 D d4 = AccessPathUtil.applyAbstractedSummary(d3, summary);





 D d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);







 





 







 //for each return site





 //for each return site







 for(N retSiteN: returnSiteNs) {





 for(N retSiteN: returnSiteNs) {







 //compute return-flow function





 //compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);







 //for each target value of the function





 //for each target value of the function







 for(D d5: computeReturnFlowFunction(retFunction, d4, n)) {





 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, d4, n)) {







 // If we have not changed anything in the callee, we do not need the facts





 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());







 // from there. Even if we change something: If we don't need the concrete









 // path, we can skip the callee in the predecessor chain









 D d5p = d5;









 //	if (d5.equals(d2))









 //		d5p = d2;









 //	else if (setJumpPredecessors)









 //		d5.setPredecessor(d2);









 









 // Set the calling context









 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5p);









 









 propagate(d1, retSiteN, d5p_restoredCtx, n, false);





 propagate(d1, retSiteN, d5p_restoredCtx, n, false);







 }





 }







 }





 }



...@@ -281,8 +270,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -281,8 +270,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //process intra-procedural flows along call-to-return flow functions





 //process intra-procedural flows along call-to-return flow functions







 for (N returnSiteN : returnSiteNs) {





 for (N returnSiteN : returnSiteNs) {







 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);





 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);







 for(D d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))





 for(AnnotatedFact<D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))







 propagate(d1, returnSiteN, d3, n, false);





 propagate(d1, returnSiteN, d3.getFact(), n, false);







 }





 }







 }





 }

















...@@ -293,7 +282,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -293,7 +282,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param d2 The abstraction at the call site





	 * @param d2 The abstraction at the call site







	 * @return The set of caller-side abstractions at the callee's start node





	 * @return The set of caller-side abstractions at the callee's start node







	 */





	 */







 protected Set<D> computeCallFlowFunction





 protected Set<AnnotatedFact<D>> computeCallFlowFunction







 (FlowFunction<D> callFlowFunction, D d1, D d2) {





 (FlowFunction<D> callFlowFunction, D d1, D d2) {







 return callFlowFunction.computeTargets(d2);





 return callFlowFunction.computeTargets(d2);







 }





 }



...@@ -307,7 +296,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -307,7 +296,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param d2 The abstraction at the call site





	 * @param d2 The abstraction at the call site







	 * @return The set of caller-side abstractions at the return site





	 * @return The set of caller-side abstractions at the return site







	 */





	 */







 protected Set<D> computeCallToReturnFlowFunction





 protected Set<AnnotatedFact<D>> computeCallToReturnFlowFunction







 (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {





 (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {







 return callToReturnFlowFunction.computeTargets(d2);





 return callToReturnFlowFunction.computeTargets(d2);







 }





 }



...@@ -349,11 +338,11 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -349,11 +338,11 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 // compute return-flow function





 // compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);







 D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);





 D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);







 Set<D> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);





 Set<AnnotatedFact<D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);





















 // for each incoming-call value





 // for each incoming-call value







 for (D callerTargetFact : callerTargetFacts) {





 for (AnnotatedFact<D> callerTargetAnnotatedFact : callerTargetFacts) {







 callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetFact);





 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());







 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);





 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);







 }





 }







 }





 }



...@@ -367,9 +356,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -367,9 +356,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 for(N c: callers) {





 for(N c: callers) {







 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {





 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);







 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c);





 Set<AnnotatedFact<D>> targets = computeReturnFlowFunction(retFunction, d2, c);







 for(D d5: targets)





 for(AnnotatedFact<D> d5: targets)







 propagate(zeroValue, retSiteC, d5, c, true);





 propagate(zeroValue, retSiteC, d5.getFact(), c, true);







 }





 }







 }





 }







 //in cases where there are no callers, the return statement would normally not be processed at all;





 //in cases where there are no callers, the return statement would normally not be processed at all;



...@@ -390,7 +379,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -390,7 +379,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param callSite The call site





	 * @param callSite The call site







	 * @return The set of caller-side abstractions at the return site





	 * @return The set of caller-side abstractions at the return site







	 */





	 */







 protected Set<D> computeReturnFlowFunction





 protected Set<AnnotatedFact<D>> computeReturnFlowFunction







 (FlowFunction<D> retFunction, D d2, N callSite) {





 (FlowFunction<D> retFunction, D d2, N callSite) {







 return retFunction.computeTargets(d2);





 return retFunction.computeTargets(d2);







 }





 }



...@@ -405,27 +394,43 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -405,27 +394,43 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 final N n = edge.getTarget(); 





 final N n = edge.getTarget(); 







 final D d2 = edge.factAtTarget();





 final D d2 = edge.factAtTarget();







 





 







 //TODO: if reading field f









 // if d1.f element of incoming edges:









 //    create and propagate (d1.f, d2.f)









 // else 









 //	  create and set (d1.f, d2.f) on hold









 //	  create for each incoming edge inc: (inc.call-d1.f, inc.call-d2.f) and put on hold









 //always continue (d1, d2)









 









 //TODO: if writing field f









 // create edge e = (d1, d2.*\{f})









 // if d2.*\{f} element of incoming edges









 // 		continue with e









 // else 









 //		put e on hold









 // always kill (d1, d2)









 









 for (N m : icfg.getSuccsOf(n)) {





 for (N m : icfg.getSuccsOf(n)) {







 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);





 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);







 Set<D> res = computeNormalFlowFunction(flowFunction, d1, d2);





 Set<AnnotatedFact<D>> res = computeNormalFlowFunction(flowFunction, d1, d2);







 for (D d3 : res)





 for (AnnotatedFact<D> d3 : res) {







 propagate(d1, m, d3, null, false); 





 //TODO: if reading field f









 // if d1.f element of incoming edges:









 //    create and propagate (d1.f, d2.f)









 // else 









 //	  create and set (d1.f, d2.f) on hold









 //	  create for each incoming edge inc: (inc.call-d1.f, inc.call-d2.f) and put on hold









 //always continue (d1, d2)









 









 if(d3.getReadField() instanceof SpecificFieldReference) {









 SpecificFieldReference fieldRef = (SpecificFieldReference) d3.getReadField();









 Set<IncomingEdge<D, N>> incomingEdges = incoming(icfg.getMethodOf(n), d3.getFact());









 if(incomingEdges.isEmpty() && !d1.equals(zeroValue)) {









 //no caller interested in d3.field -> put edge on hold









 //TODO









 } else {









 //there is an incoming edge interested in d3.field









 D concretizedSourceValue = AccessPathUtil.cloneWithConcatenatedAccessPath(d1, fieldRef);









 propagate(concretizedSourceValue, m, d3.getFact(), null, false);









 }









 }









 









 









 //TODO: if writing field f









 // create edge e = (d1, d2.*\{f})









 // if d2.*\{f} element of incoming edges









 // 		continue with e









 // else 









 //		put e on hold









 // always kill (d1, d2)









 









 propagate(d1, m, d3.getFact(), null, false);









 









 }







 }





 }







 }





 }







 





 



...@@ -437,7 +442,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -437,7 +442,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param d1 The abstraction at the current node





	 * @param d1 The abstraction at the current node







	 * @return The set of abstractions at the successor node





	 * @return The set of abstractions at the successor node







	 */





	 */







 protected Set<D> computeNormalFlowFunction





 protected Set<AnnotatedFact<D>> computeNormalFlowFunction







 (FlowFunction<D> flowFunction, D d1, D d2) {





 (FlowFunction<D> flowFunction, D d1, D d2) {







 return flowFunction.computeTargets(d2);





 return flowFunction.computeTargets(d2);







 }





 }



......















src/heros/alias/FlowFunction.java



0 → 100644







View file @ 9176fc7c














/*******************************************************************************









 * Copyright (c) 2012 Eric Bodden.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Eric Bodden - initial API and implementation









 ******************************************************************************/









package heros.alias;



















import heros.alias.FieldReference.SpecificFieldReference;



















import java.util.LinkedHashSet;









import java.util.Set;



















/**









 * A flow function computes which of the finitely many D-type values are reachable









 * from the current source values. Typically there will be one such function









 * associated with every possible control flow. 









 * 









 * <b>NOTE:</b> To be able to produce <b>deterministic benchmarking results</b>, we have found that









 * it helps to return {@link LinkedHashSet}s from {@link #computeTargets(Object)}. This is









 * because the duration of IDE's fixed point iteration may depend on the iteration order.









 * Within the solver, we have tried to fix this order as much as possible, but the









 * order, in general, does also depend on the order in which the result set









 * of {@link #computeTargets(Object)} is traversed.









 * 









 * <b>NOTE:</b> Methods defined on this type may be called simultaneously by different threads.









 * Hence, classes implementing this interface should synchronize accesses to









 * any mutable shared state.









 * 









 * @param <D> The type of data-flow facts to be computed by the tabulation problem.









 */









public interface FlowFunction<D extends FieldSensitiveFact<?, D>> {



















 /**









	 * Returns the target values reachable from the source.









	 */









 Set<AnnotatedFact<D>> computeTargets(D source);









 









 public static class AnnotatedFact<D extends FieldSensitiveFact<?, D>> {









 









 private D fact;









 private FieldReference readField;









 private FieldReference writtenField;









 









 //TODO: Refactor API to make things more intuitive









 /**









		 * 









		 * @param fact









		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value









		 * @param writtenField









		 */









 public AnnotatedFact(D fact, FieldReference readField, FieldReference writtenField) {









 this.fact = fact;









 this.readField = readField;









 this.writtenField = writtenField;









 }









 









 public D getFact() {









 return fact;









 }









 









 public FieldReference getReadField() {









 return readField;









 }









 









 public FieldReference getWrittenField() {









 return writtenField;









 }



















 @Override









 public int hashCode() {









 final int prime = 31;









 int result = 1;









 result = prime * result + ((fact == null) ? 0 : fact.hashCode());









 result = prime * result + ((readField == null) ? 0 : readField.hashCode());









 result = prime * result + ((writtenField == null) ? 0 : writtenField.hashCode());









 return result;









 }



















 @Override









 public boolean equals(Object obj) {









 if (this == obj)









 return true;









 if (obj == null)









 return false;









 if (!(obj instanceof AnnotatedFact))









 return false;









 AnnotatedFact other = (AnnotatedFact) obj;









 if (fact == null) {









 if (other.fact != null)









 return false;









 } else if (!fact.equals(other.fact))









 return false;









 if (readField == null) {









 if (other.readField != null)









 return false;









 } else if (!readField.equals(other.readField))









 return false;









 if (writtenField == null) {









 if (other.writtenField != null)









 return false;









 } else if (!writtenField.equals(other.writtenField))









 return false;









 return true;









 }









 }









}















src/heros/alias/FlowFunctions.java








View file @ 9176fc7c








...@@ -11,7 +11,6 @@
...@@ -11,7 +11,6 @@






 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;





















import heros.FlowFunction;























/**





/**







 * Classes implementing this interface provide a factory for a 





 * Classes implementing this interface provide a factory for a 



...@@ -28,7 +27,7 @@ import heros.FlowFunction;
...@@ -28,7 +27,7 @@ import heros.FlowFunction;






 *            The type of objects used to represent methods. Typically





 *            The type of objects used to represent methods. Typically







 *            {@link SootMethod}.





 *            {@link SootMethod}.







 */





 */







public interface FlowFunctions<Stmt, F extends FieldSensitiveFact, Method> {





public interface FlowFunctions<Stmt, F extends FieldSensitiveFact<?, F>, Method> {





















 /**





 /**







	 * Returns the flow function that computes the flow for a normal statement,





	 * Returns the flow function that computes the flow for a normal statement,



...@@ -43,9 +42,6 @@ public interface FlowFunctions<Stmt, F extends FieldSensitiveFact, Method> {
...@@ -43,9 +42,6 @@ public interface FlowFunctions<Stmt, F extends FieldSensitiveFact, Method> {






	 */





	 */







 public FlowFunction<F> getNormalFlowFunction(Stmt curr, Stmt succ);





 public FlowFunction<F> getNormalFlowFunction(Stmt curr, Stmt succ);





















 public FieldReference getReadFieldReference(Stmt curr);









 









 public FieldReference getWrittenFieldReference(Stmt curr);









 





 







 /**





 /**







	 * Returns the flow function that computes the flow for a call statement.





	 * Returns the flow function that computes the flow for a call statement.



......















test/heros/alias/FieldSensitiveSolverTest.java








View file @ 9176fc7c








...@@ -95,8 +95,8 @@ public class FieldSensitiveSolverTest {
...@@ -95,8 +95,8 @@ public class FieldSensitiveSolverTest {






 callSite("c").calls("foo", flow("2.field", "3.field")));





 callSite("c").calls("foo", flow("2.field", "3.field")));







 





 







 helper.method("foo",startPoints("d"),





 helper.method("foo",startPoints("d"),







 readFieldStmt("d", "notfield").succ("e", flow("3", "3"), kill("3.notfield")),





 readFieldStmt("d", "notfield").succ("e", flow("3", "3")),







 normalStmt("e").succ("f", flow("3","4")));





 normalStmt("e").succ("f", flow("3","4"), kill("3.notfield")));







 





 







 helper.method("xyz",





 helper.method("xyz",







 startPoints("g"),





 startPoints("g"),



......

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

9176fc7c







Open sidebar



Joshua Garcia heros
Commits

9176fc7c




Open sidebar

Joshua Garcia heros
Commits

9176fc7c


Joshua GarciaherosherosCommits
9176fc7c








Commit
9176fc7c


authored
Nov 13, 2014
by


Johannes Lerch



Browse files




annotated facts (WIP)







parent
3b064347













Changes
5




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPathUtil.java








View file @ 9176fc7c








...@@ -10,6 +10,8 @@
...@@ -10,6 +10,8 @@






 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;























import heros.alias.FieldReference.SpecificFieldReference;

















public class AccessPathUtil {





public class AccessPathUtil {





















 public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {





 public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {



...@@ -47,4 +49,11 @@ public class AccessPathUtil {
...@@ -47,4 +49,11 @@ public class AccessPathUtil {






 





 







 return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);





 return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);







 }





 }



















 public static <D extends FieldSensitiveFact<?, D>> D cloneWithConcatenatedAccessPath(D fact, FieldReference... fieldRefs) {









 FieldReference[] accessPath = new FieldReference[fact.getAccessPath().length+fieldRefs.length];









 System.arraycopy(fact.getAccessPath(), 0, accessPath, 0, fact.getAccessPath().length);









 System.arraycopy(fieldRefs, 0, accessPath, fact.getAccessPath().length, fieldRefs.length);









 return fact.cloneWithAccessPath(accessPath);









 }







}




}















src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 9176fc7c








...@@ -29,9 +29,9 @@ import com.google.common.cache.CacheBuilder;
...@@ -29,9 +29,9 @@ import com.google.common.cache.CacheBuilder;






import com.google.common.collect.Sets;





import com.google.common.collect.Sets;





















import heros.DontSynchronize;





import heros.DontSynchronize;







import heros.FlowFunction;









import heros.FlowFunctionCache;





import heros.FlowFunctionCache;







import heros.alias.FlowFunctions;





import heros.alias.FieldReference.SpecificFieldReference;









import heros.alias.FlowFunction.AnnotatedFact;







import heros.alias.IFDSTabulationProblem;





import heros.alias.IFDSTabulationProblem;







import heros.InterproceduralCFG;





import heros.InterproceduralCFG;







import heros.SynchronizedBy;





import heros.SynchronizedBy;



...@@ -223,27 +223,27 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -223,27 +223,27 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 for(M sCalledProcN: callees) { //still line 14





 for(M sCalledProcN: callees) { //still line 14







 //compute the call-flow function





 //compute the call-flow function







 FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);





 FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);







 Set<D> res = computeCallFlowFunction(function, d1, d2);





 Set<AnnotatedFact<D>> res = computeCallFlowFunction(function, d1, d2);







 





 







 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);





 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);







 //for each result node of the call-flow function





 //for each result node of the call-flow function







 for(D d3: res) {





 for(AnnotatedFact<D> d3: res) {







 //for each callee's start point(s)





 //for each callee's start point(s)







 for(N sP: startPointsOf) {





 for(N sP: startPointsOf) {







 //create initial self-loop





 //create initial self-loop







 D abstractStartPointFact = d3.cloneWithAccessPath();





 D abstractStartPointFact = d3.getFact().cloneWithAccessPath();







 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15





 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15







 }





 }







 





 







 //register the fact that <sp,d3> has an incoming edge from <n,d2>





 //register the fact that <sp,d3> has an incoming edge from <n,d2>







 //line 15.1 of Naeem/Lhotak/Rodriguez





 //line 15.1 of Naeem/Lhotak/Rodriguez







 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3,n,d1,d2)))





 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3.getFact(),n,d1,d2)))







 continue;





 continue;







 





 







 //TODO: Resume edges that are on hold and match this d3





 //TODO: Resume edges that are on hold and match this d3







 





 







 //line 15.2





 //line 15.2







 Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3);





 Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3.getFact());







 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez







 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,





 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,



...@@ -251,26 +251,15 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -251,26 +251,15 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //because we have observed a potentially new incoming edge into <sP,d3>





 //because we have observed a potentially new incoming edge into <sP,d3>







 if (endSumm != null)





 if (endSumm != null)







 for(SummaryEdge<D, N> summary: endSumm) {





 for(SummaryEdge<D, N> summary: endSumm) {







 D d4 = AccessPathUtil.applyAbstractedSummary(d3, summary);





 D d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);







 





 







 //for each return site





 //for each return site







 for(N retSiteN: returnSiteNs) {





 for(N retSiteN: returnSiteNs) {







 //compute return-flow function





 //compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);







 //for each target value of the function





 //for each target value of the function







 for(D d5: computeReturnFlowFunction(retFunction, d4, n)) {





 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, d4, n)) {







 // If we have not changed anything in the callee, we do not need the facts





 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());







 // from there. Even if we change something: If we don't need the concrete









 // path, we can skip the callee in the predecessor chain









 D d5p = d5;









 //	if (d5.equals(d2))









 //		d5p = d2;









 //	else if (setJumpPredecessors)









 //		d5.setPredecessor(d2);









 









 // Set the calling context









 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5p);









 









 propagate(d1, retSiteN, d5p_restoredCtx, n, false);





 propagate(d1, retSiteN, d5p_restoredCtx, n, false);







 }





 }







 }





 }



...@@ -281,8 +270,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -281,8 +270,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //process intra-procedural flows along call-to-return flow functions





 //process intra-procedural flows along call-to-return flow functions







 for (N returnSiteN : returnSiteNs) {





 for (N returnSiteN : returnSiteNs) {







 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);





 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);







 for(D d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))





 for(AnnotatedFact<D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))







 propagate(d1, returnSiteN, d3, n, false);





 propagate(d1, returnSiteN, d3.getFact(), n, false);







 }





 }







 }





 }

















...@@ -293,7 +282,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -293,7 +282,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param d2 The abstraction at the call site





	 * @param d2 The abstraction at the call site







	 * @return The set of caller-side abstractions at the callee's start node





	 * @return The set of caller-side abstractions at the callee's start node







	 */





	 */







 protected Set<D> computeCallFlowFunction





 protected Set<AnnotatedFact<D>> computeCallFlowFunction







 (FlowFunction<D> callFlowFunction, D d1, D d2) {





 (FlowFunction<D> callFlowFunction, D d1, D d2) {







 return callFlowFunction.computeTargets(d2);





 return callFlowFunction.computeTargets(d2);







 }





 }



...@@ -307,7 +296,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -307,7 +296,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param d2 The abstraction at the call site





	 * @param d2 The abstraction at the call site







	 * @return The set of caller-side abstractions at the return site





	 * @return The set of caller-side abstractions at the return site







	 */





	 */







 protected Set<D> computeCallToReturnFlowFunction





 protected Set<AnnotatedFact<D>> computeCallToReturnFlowFunction







 (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {





 (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {







 return callToReturnFlowFunction.computeTargets(d2);





 return callToReturnFlowFunction.computeTargets(d2);







 }





 }



...@@ -349,11 +338,11 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -349,11 +338,11 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 // compute return-flow function





 // compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);







 D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);





 D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);







 Set<D> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);





 Set<AnnotatedFact<D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);





















 // for each incoming-call value





 // for each incoming-call value







 for (D callerTargetFact : callerTargetFacts) {





 for (AnnotatedFact<D> callerTargetAnnotatedFact : callerTargetFacts) {







 callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetFact);





 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());







 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);





 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);







 }





 }







 }





 }



...@@ -367,9 +356,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -367,9 +356,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 for(N c: callers) {





 for(N c: callers) {







 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {





 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);







 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c);





 Set<AnnotatedFact<D>> targets = computeReturnFlowFunction(retFunction, d2, c);







 for(D d5: targets)





 for(AnnotatedFact<D> d5: targets)







 propagate(zeroValue, retSiteC, d5, c, true);





 propagate(zeroValue, retSiteC, d5.getFact(), c, true);







 }





 }







 }





 }







 //in cases where there are no callers, the return statement would normally not be processed at all;





 //in cases where there are no callers, the return statement would normally not be processed at all;



...@@ -390,7 +379,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -390,7 +379,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param callSite The call site





	 * @param callSite The call site







	 * @return The set of caller-side abstractions at the return site





	 * @return The set of caller-side abstractions at the return site







	 */





	 */







 protected Set<D> computeReturnFlowFunction





 protected Set<AnnotatedFact<D>> computeReturnFlowFunction







 (FlowFunction<D> retFunction, D d2, N callSite) {





 (FlowFunction<D> retFunction, D d2, N callSite) {







 return retFunction.computeTargets(d2);





 return retFunction.computeTargets(d2);







 }





 }



...@@ -405,27 +394,43 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -405,27 +394,43 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 final N n = edge.getTarget(); 





 final N n = edge.getTarget(); 







 final D d2 = edge.factAtTarget();





 final D d2 = edge.factAtTarget();







 





 







 //TODO: if reading field f









 // if d1.f element of incoming edges:









 //    create and propagate (d1.f, d2.f)









 // else 









 //	  create and set (d1.f, d2.f) on hold









 //	  create for each incoming edge inc: (inc.call-d1.f, inc.call-d2.f) and put on hold









 //always continue (d1, d2)









 









 //TODO: if writing field f









 // create edge e = (d1, d2.*\{f})









 // if d2.*\{f} element of incoming edges









 // 		continue with e









 // else 









 //		put e on hold









 // always kill (d1, d2)









 









 for (N m : icfg.getSuccsOf(n)) {





 for (N m : icfg.getSuccsOf(n)) {







 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);





 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);







 Set<D> res = computeNormalFlowFunction(flowFunction, d1, d2);





 Set<AnnotatedFact<D>> res = computeNormalFlowFunction(flowFunction, d1, d2);







 for (D d3 : res)





 for (AnnotatedFact<D> d3 : res) {







 propagate(d1, m, d3, null, false); 





 //TODO: if reading field f









 // if d1.f element of incoming edges:









 //    create and propagate (d1.f, d2.f)









 // else 









 //	  create and set (d1.f, d2.f) on hold









 //	  create for each incoming edge inc: (inc.call-d1.f, inc.call-d2.f) and put on hold









 //always continue (d1, d2)









 









 if(d3.getReadField() instanceof SpecificFieldReference) {









 SpecificFieldReference fieldRef = (SpecificFieldReference) d3.getReadField();









 Set<IncomingEdge<D, N>> incomingEdges = incoming(icfg.getMethodOf(n), d3.getFact());









 if(incomingEdges.isEmpty() && !d1.equals(zeroValue)) {









 //no caller interested in d3.field -> put edge on hold









 //TODO









 } else {









 //there is an incoming edge interested in d3.field









 D concretizedSourceValue = AccessPathUtil.cloneWithConcatenatedAccessPath(d1, fieldRef);









 propagate(concretizedSourceValue, m, d3.getFact(), null, false);









 }









 }









 









 









 //TODO: if writing field f









 // create edge e = (d1, d2.*\{f})









 // if d2.*\{f} element of incoming edges









 // 		continue with e









 // else 









 //		put e on hold









 // always kill (d1, d2)









 









 propagate(d1, m, d3.getFact(), null, false);









 









 }







 }





 }







 }





 }







 





 



...@@ -437,7 +442,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -437,7 +442,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param d1 The abstraction at the current node





	 * @param d1 The abstraction at the current node







	 * @return The set of abstractions at the successor node





	 * @return The set of abstractions at the successor node







	 */





	 */







 protected Set<D> computeNormalFlowFunction





 protected Set<AnnotatedFact<D>> computeNormalFlowFunction







 (FlowFunction<D> flowFunction, D d1, D d2) {





 (FlowFunction<D> flowFunction, D d1, D d2) {







 return flowFunction.computeTargets(d2);





 return flowFunction.computeTargets(d2);







 }





 }



......















src/heros/alias/FlowFunction.java



0 → 100644







View file @ 9176fc7c














/*******************************************************************************









 * Copyright (c) 2012 Eric Bodden.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Eric Bodden - initial API and implementation









 ******************************************************************************/









package heros.alias;



















import heros.alias.FieldReference.SpecificFieldReference;



















import java.util.LinkedHashSet;









import java.util.Set;



















/**









 * A flow function computes which of the finitely many D-type values are reachable









 * from the current source values. Typically there will be one such function









 * associated with every possible control flow. 









 * 









 * <b>NOTE:</b> To be able to produce <b>deterministic benchmarking results</b>, we have found that









 * it helps to return {@link LinkedHashSet}s from {@link #computeTargets(Object)}. This is









 * because the duration of IDE's fixed point iteration may depend on the iteration order.









 * Within the solver, we have tried to fix this order as much as possible, but the









 * order, in general, does also depend on the order in which the result set









 * of {@link #computeTargets(Object)} is traversed.









 * 









 * <b>NOTE:</b> Methods defined on this type may be called simultaneously by different threads.









 * Hence, classes implementing this interface should synchronize accesses to









 * any mutable shared state.









 * 









 * @param <D> The type of data-flow facts to be computed by the tabulation problem.









 */









public interface FlowFunction<D extends FieldSensitiveFact<?, D>> {



















 /**









	 * Returns the target values reachable from the source.









	 */









 Set<AnnotatedFact<D>> computeTargets(D source);









 









 public static class AnnotatedFact<D extends FieldSensitiveFact<?, D>> {









 









 private D fact;









 private FieldReference readField;









 private FieldReference writtenField;









 









 //TODO: Refactor API to make things more intuitive









 /**









		 * 









		 * @param fact









		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value









		 * @param writtenField









		 */









 public AnnotatedFact(D fact, FieldReference readField, FieldReference writtenField) {









 this.fact = fact;









 this.readField = readField;









 this.writtenField = writtenField;









 }









 









 public D getFact() {









 return fact;









 }









 









 public FieldReference getReadField() {









 return readField;









 }









 









 public FieldReference getWrittenField() {









 return writtenField;









 }



















 @Override









 public int hashCode() {









 final int prime = 31;









 int result = 1;









 result = prime * result + ((fact == null) ? 0 : fact.hashCode());









 result = prime * result + ((readField == null) ? 0 : readField.hashCode());









 result = prime * result + ((writtenField == null) ? 0 : writtenField.hashCode());









 return result;









 }



















 @Override









 public boolean equals(Object obj) {









 if (this == obj)









 return true;









 if (obj == null)









 return false;









 if (!(obj instanceof AnnotatedFact))









 return false;









 AnnotatedFact other = (AnnotatedFact) obj;









 if (fact == null) {









 if (other.fact != null)









 return false;









 } else if (!fact.equals(other.fact))









 return false;









 if (readField == null) {









 if (other.readField != null)









 return false;









 } else if (!readField.equals(other.readField))









 return false;









 if (writtenField == null) {









 if (other.writtenField != null)









 return false;









 } else if (!writtenField.equals(other.writtenField))









 return false;









 return true;









 }









 }









}















src/heros/alias/FlowFunctions.java








View file @ 9176fc7c








...@@ -11,7 +11,6 @@
...@@ -11,7 +11,6 @@






 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;





















import heros.FlowFunction;























/**





/**







 * Classes implementing this interface provide a factory for a 





 * Classes implementing this interface provide a factory for a 



...@@ -28,7 +27,7 @@ import heros.FlowFunction;
...@@ -28,7 +27,7 @@ import heros.FlowFunction;






 *            The type of objects used to represent methods. Typically





 *            The type of objects used to represent methods. Typically







 *            {@link SootMethod}.





 *            {@link SootMethod}.







 */





 */







public interface FlowFunctions<Stmt, F extends FieldSensitiveFact, Method> {





public interface FlowFunctions<Stmt, F extends FieldSensitiveFact<?, F>, Method> {





















 /**





 /**







	 * Returns the flow function that computes the flow for a normal statement,





	 * Returns the flow function that computes the flow for a normal statement,



...@@ -43,9 +42,6 @@ public interface FlowFunctions<Stmt, F extends FieldSensitiveFact, Method> {
...@@ -43,9 +42,6 @@ public interface FlowFunctions<Stmt, F extends FieldSensitiveFact, Method> {






	 */





	 */







 public FlowFunction<F> getNormalFlowFunction(Stmt curr, Stmt succ);





 public FlowFunction<F> getNormalFlowFunction(Stmt curr, Stmt succ);





















 public FieldReference getReadFieldReference(Stmt curr);









 









 public FieldReference getWrittenFieldReference(Stmt curr);









 





 







 /**





 /**







	 * Returns the flow function that computes the flow for a call statement.





	 * Returns the flow function that computes the flow for a call statement.



......















test/heros/alias/FieldSensitiveSolverTest.java








View file @ 9176fc7c








...@@ -95,8 +95,8 @@ public class FieldSensitiveSolverTest {
...@@ -95,8 +95,8 @@ public class FieldSensitiveSolverTest {






 callSite("c").calls("foo", flow("2.field", "3.field")));





 callSite("c").calls("foo", flow("2.field", "3.field")));







 





 







 helper.method("foo",startPoints("d"),





 helper.method("foo",startPoints("d"),







 readFieldStmt("d", "notfield").succ("e", flow("3", "3"), kill("3.notfield")),





 readFieldStmt("d", "notfield").succ("e", flow("3", "3")),







 normalStmt("e").succ("f", flow("3","4")));





 normalStmt("e").succ("f", flow("3","4"), kill("3.notfield")));







 





 







 helper.method("xyz",





 helper.method("xyz",







 startPoints("g"),





 startPoints("g"),



......

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
9176fc7c


authored
Nov 13, 2014
by


Johannes Lerch



Browse files




annotated facts (WIP)







parent
3b064347













Changes
5




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/AccessPathUtil.java








View file @ 9176fc7c








...@@ -10,6 +10,8 @@
...@@ -10,6 +10,8 @@






 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;























import heros.alias.FieldReference.SpecificFieldReference;

















public class AccessPathUtil {





public class AccessPathUtil {





















 public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {





 public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {



...@@ -47,4 +49,11 @@ public class AccessPathUtil {
...@@ -47,4 +49,11 @@ public class AccessPathUtil {






 





 







 return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);





 return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);







 }





 }



















 public static <D extends FieldSensitiveFact<?, D>> D cloneWithConcatenatedAccessPath(D fact, FieldReference... fieldRefs) {









 FieldReference[] accessPath = new FieldReference[fact.getAccessPath().length+fieldRefs.length];









 System.arraycopy(fact.getAccessPath(), 0, accessPath, 0, fact.getAccessPath().length);









 System.arraycopy(fieldRefs, 0, accessPath, fact.getAccessPath().length, fieldRefs.length);









 return fact.cloneWithAccessPath(accessPath);









 }







}




}















src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 9176fc7c








...@@ -29,9 +29,9 @@ import com.google.common.cache.CacheBuilder;
...@@ -29,9 +29,9 @@ import com.google.common.cache.CacheBuilder;






import com.google.common.collect.Sets;





import com.google.common.collect.Sets;





















import heros.DontSynchronize;





import heros.DontSynchronize;







import heros.FlowFunction;









import heros.FlowFunctionCache;





import heros.FlowFunctionCache;







import heros.alias.FlowFunctions;





import heros.alias.FieldReference.SpecificFieldReference;









import heros.alias.FlowFunction.AnnotatedFact;







import heros.alias.IFDSTabulationProblem;





import heros.alias.IFDSTabulationProblem;







import heros.InterproceduralCFG;





import heros.InterproceduralCFG;







import heros.SynchronizedBy;





import heros.SynchronizedBy;



...@@ -223,27 +223,27 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -223,27 +223,27 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 for(M sCalledProcN: callees) { //still line 14





 for(M sCalledProcN: callees) { //still line 14







 //compute the call-flow function





 //compute the call-flow function







 FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);





 FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);







 Set<D> res = computeCallFlowFunction(function, d1, d2);





 Set<AnnotatedFact<D>> res = computeCallFlowFunction(function, d1, d2);







 





 







 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);





 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);







 //for each result node of the call-flow function





 //for each result node of the call-flow function







 for(D d3: res) {





 for(AnnotatedFact<D> d3: res) {







 //for each callee's start point(s)





 //for each callee's start point(s)







 for(N sP: startPointsOf) {





 for(N sP: startPointsOf) {







 //create initial self-loop





 //create initial self-loop







 D abstractStartPointFact = d3.cloneWithAccessPath();





 D abstractStartPointFact = d3.getFact().cloneWithAccessPath();







 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15





 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15







 }





 }







 





 







 //register the fact that <sp,d3> has an incoming edge from <n,d2>





 //register the fact that <sp,d3> has an incoming edge from <n,d2>







 //line 15.1 of Naeem/Lhotak/Rodriguez





 //line 15.1 of Naeem/Lhotak/Rodriguez







 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3,n,d1,d2)))





 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3.getFact(),n,d1,d2)))







 continue;





 continue;







 





 







 //TODO: Resume edges that are on hold and match this d3





 //TODO: Resume edges that are on hold and match this d3







 





 







 //line 15.2





 //line 15.2







 Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3);





 Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3.getFact());







 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez







 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,





 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,



...@@ -251,26 +251,15 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -251,26 +251,15 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //because we have observed a potentially new incoming edge into <sP,d3>





 //because we have observed a potentially new incoming edge into <sP,d3>







 if (endSumm != null)





 if (endSumm != null)







 for(SummaryEdge<D, N> summary: endSumm) {





 for(SummaryEdge<D, N> summary: endSumm) {







 D d4 = AccessPathUtil.applyAbstractedSummary(d3, summary);





 D d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);







 





 







 //for each return site





 //for each return site







 for(N retSiteN: returnSiteNs) {





 for(N retSiteN: returnSiteNs) {







 //compute return-flow function





 //compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);







 //for each target value of the function





 //for each target value of the function







 for(D d5: computeReturnFlowFunction(retFunction, d4, n)) {





 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, d4, n)) {







 // If we have not changed anything in the callee, we do not need the facts





 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());







 // from there. Even if we change something: If we don't need the concrete









 // path, we can skip the callee in the predecessor chain









 D d5p = d5;









 //	if (d5.equals(d2))









 //		d5p = d2;









 //	else if (setJumpPredecessors)









 //		d5.setPredecessor(d2);









 









 // Set the calling context









 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5p);









 









 propagate(d1, retSiteN, d5p_restoredCtx, n, false);





 propagate(d1, retSiteN, d5p_restoredCtx, n, false);







 }





 }







 }





 }



...@@ -281,8 +270,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -281,8 +270,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //process intra-procedural flows along call-to-return flow functions





 //process intra-procedural flows along call-to-return flow functions







 for (N returnSiteN : returnSiteNs) {





 for (N returnSiteN : returnSiteNs) {







 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);





 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);







 for(D d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))





 for(AnnotatedFact<D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))







 propagate(d1, returnSiteN, d3, n, false);





 propagate(d1, returnSiteN, d3.getFact(), n, false);







 }





 }







 }





 }

















...@@ -293,7 +282,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -293,7 +282,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param d2 The abstraction at the call site





	 * @param d2 The abstraction at the call site







	 * @return The set of caller-side abstractions at the callee's start node





	 * @return The set of caller-side abstractions at the callee's start node







	 */





	 */







 protected Set<D> computeCallFlowFunction





 protected Set<AnnotatedFact<D>> computeCallFlowFunction







 (FlowFunction<D> callFlowFunction, D d1, D d2) {





 (FlowFunction<D> callFlowFunction, D d1, D d2) {







 return callFlowFunction.computeTargets(d2);





 return callFlowFunction.computeTargets(d2);







 }





 }



...@@ -307,7 +296,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -307,7 +296,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param d2 The abstraction at the call site





	 * @param d2 The abstraction at the call site







	 * @return The set of caller-side abstractions at the return site





	 * @return The set of caller-side abstractions at the return site







	 */





	 */







 protected Set<D> computeCallToReturnFlowFunction





 protected Set<AnnotatedFact<D>> computeCallToReturnFlowFunction







 (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {





 (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {







 return callToReturnFlowFunction.computeTargets(d2);





 return callToReturnFlowFunction.computeTargets(d2);







 }





 }



...@@ -349,11 +338,11 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -349,11 +338,11 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 // compute return-flow function





 // compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);







 D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);





 D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);







 Set<D> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);





 Set<AnnotatedFact<D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);





















 // for each incoming-call value





 // for each incoming-call value







 for (D callerTargetFact : callerTargetFacts) {





 for (AnnotatedFact<D> callerTargetAnnotatedFact : callerTargetFacts) {







 callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetFact);





 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());







 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);





 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);







 }





 }







 }





 }



...@@ -367,9 +356,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -367,9 +356,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 for(N c: callers) {





 for(N c: callers) {







 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {





 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);







 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c);





 Set<AnnotatedFact<D>> targets = computeReturnFlowFunction(retFunction, d2, c);







 for(D d5: targets)





 for(AnnotatedFact<D> d5: targets)







 propagate(zeroValue, retSiteC, d5, c, true);





 propagate(zeroValue, retSiteC, d5.getFact(), c, true);







 }





 }







 }





 }







 //in cases where there are no callers, the return statement would normally not be processed at all;





 //in cases where there are no callers, the return statement would normally not be processed at all;



...@@ -390,7 +379,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -390,7 +379,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param callSite The call site





	 * @param callSite The call site







	 * @return The set of caller-side abstractions at the return site





	 * @return The set of caller-side abstractions at the return site







	 */





	 */







 protected Set<D> computeReturnFlowFunction





 protected Set<AnnotatedFact<D>> computeReturnFlowFunction







 (FlowFunction<D> retFunction, D d2, N callSite) {





 (FlowFunction<D> retFunction, D d2, N callSite) {







 return retFunction.computeTargets(d2);





 return retFunction.computeTargets(d2);







 }





 }



...@@ -405,27 +394,43 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -405,27 +394,43 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 final N n = edge.getTarget(); 





 final N n = edge.getTarget(); 







 final D d2 = edge.factAtTarget();





 final D d2 = edge.factAtTarget();







 





 







 //TODO: if reading field f









 // if d1.f element of incoming edges:









 //    create and propagate (d1.f, d2.f)









 // else 









 //	  create and set (d1.f, d2.f) on hold









 //	  create for each incoming edge inc: (inc.call-d1.f, inc.call-d2.f) and put on hold









 //always continue (d1, d2)









 









 //TODO: if writing field f









 // create edge e = (d1, d2.*\{f})









 // if d2.*\{f} element of incoming edges









 // 		continue with e









 // else 









 //		put e on hold









 // always kill (d1, d2)









 









 for (N m : icfg.getSuccsOf(n)) {





 for (N m : icfg.getSuccsOf(n)) {







 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);





 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);







 Set<D> res = computeNormalFlowFunction(flowFunction, d1, d2);





 Set<AnnotatedFact<D>> res = computeNormalFlowFunction(flowFunction, d1, d2);







 for (D d3 : res)





 for (AnnotatedFact<D> d3 : res) {







 propagate(d1, m, d3, null, false); 





 //TODO: if reading field f









 // if d1.f element of incoming edges:









 //    create and propagate (d1.f, d2.f)









 // else 









 //	  create and set (d1.f, d2.f) on hold









 //	  create for each incoming edge inc: (inc.call-d1.f, inc.call-d2.f) and put on hold









 //always continue (d1, d2)









 









 if(d3.getReadField() instanceof SpecificFieldReference) {









 SpecificFieldReference fieldRef = (SpecificFieldReference) d3.getReadField();









 Set<IncomingEdge<D, N>> incomingEdges = incoming(icfg.getMethodOf(n), d3.getFact());









 if(incomingEdges.isEmpty() && !d1.equals(zeroValue)) {









 //no caller interested in d3.field -> put edge on hold









 //TODO









 } else {









 //there is an incoming edge interested in d3.field









 D concretizedSourceValue = AccessPathUtil.cloneWithConcatenatedAccessPath(d1, fieldRef);









 propagate(concretizedSourceValue, m, d3.getFact(), null, false);









 }









 }









 









 









 //TODO: if writing field f









 // create edge e = (d1, d2.*\{f})









 // if d2.*\{f} element of incoming edges









 // 		continue with e









 // else 









 //		put e on hold









 // always kill (d1, d2)









 









 propagate(d1, m, d3.getFact(), null, false);









 









 }







 }





 }







 }





 }







 





 



...@@ -437,7 +442,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -437,7 +442,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param d1 The abstraction at the current node





	 * @param d1 The abstraction at the current node







	 * @return The set of abstractions at the successor node





	 * @return The set of abstractions at the successor node







	 */





	 */







 protected Set<D> computeNormalFlowFunction





 protected Set<AnnotatedFact<D>> computeNormalFlowFunction







 (FlowFunction<D> flowFunction, D d1, D d2) {





 (FlowFunction<D> flowFunction, D d1, D d2) {







 return flowFunction.computeTargets(d2);





 return flowFunction.computeTargets(d2);







 }





 }



......















src/heros/alias/FlowFunction.java



0 → 100644







View file @ 9176fc7c














/*******************************************************************************









 * Copyright (c) 2012 Eric Bodden.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Eric Bodden - initial API and implementation









 ******************************************************************************/









package heros.alias;



















import heros.alias.FieldReference.SpecificFieldReference;



















import java.util.LinkedHashSet;









import java.util.Set;



















/**









 * A flow function computes which of the finitely many D-type values are reachable









 * from the current source values. Typically there will be one such function









 * associated with every possible control flow. 









 * 









 * <b>NOTE:</b> To be able to produce <b>deterministic benchmarking results</b>, we have found that









 * it helps to return {@link LinkedHashSet}s from {@link #computeTargets(Object)}. This is









 * because the duration of IDE's fixed point iteration may depend on the iteration order.









 * Within the solver, we have tried to fix this order as much as possible, but the









 * order, in general, does also depend on the order in which the result set









 * of {@link #computeTargets(Object)} is traversed.









 * 









 * <b>NOTE:</b> Methods defined on this type may be called simultaneously by different threads.









 * Hence, classes implementing this interface should synchronize accesses to









 * any mutable shared state.









 * 









 * @param <D> The type of data-flow facts to be computed by the tabulation problem.









 */









public interface FlowFunction<D extends FieldSensitiveFact<?, D>> {



















 /**









	 * Returns the target values reachable from the source.









	 */









 Set<AnnotatedFact<D>> computeTargets(D source);









 









 public static class AnnotatedFact<D extends FieldSensitiveFact<?, D>> {









 









 private D fact;









 private FieldReference readField;









 private FieldReference writtenField;









 









 //TODO: Refactor API to make things more intuitive









 /**









		 * 









		 * @param fact









		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value









		 * @param writtenField









		 */









 public AnnotatedFact(D fact, FieldReference readField, FieldReference writtenField) {









 this.fact = fact;









 this.readField = readField;









 this.writtenField = writtenField;









 }









 









 public D getFact() {









 return fact;









 }









 









 public FieldReference getReadField() {









 return readField;









 }









 









 public FieldReference getWrittenField() {









 return writtenField;









 }



















 @Override









 public int hashCode() {









 final int prime = 31;









 int result = 1;









 result = prime * result + ((fact == null) ? 0 : fact.hashCode());









 result = prime * result + ((readField == null) ? 0 : readField.hashCode());









 result = prime * result + ((writtenField == null) ? 0 : writtenField.hashCode());









 return result;









 }



















 @Override









 public boolean equals(Object obj) {









 if (this == obj)









 return true;









 if (obj == null)









 return false;









 if (!(obj instanceof AnnotatedFact))









 return false;









 AnnotatedFact other = (AnnotatedFact) obj;









 if (fact == null) {









 if (other.fact != null)









 return false;









 } else if (!fact.equals(other.fact))









 return false;









 if (readField == null) {









 if (other.readField != null)









 return false;









 } else if (!readField.equals(other.readField))









 return false;









 if (writtenField == null) {









 if (other.writtenField != null)









 return false;









 } else if (!writtenField.equals(other.writtenField))









 return false;









 return true;









 }









 }









}















src/heros/alias/FlowFunctions.java








View file @ 9176fc7c








...@@ -11,7 +11,6 @@
...@@ -11,7 +11,6 @@






 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;





















import heros.FlowFunction;























/**





/**







 * Classes implementing this interface provide a factory for a 





 * Classes implementing this interface provide a factory for a 



...@@ -28,7 +27,7 @@ import heros.FlowFunction;
...@@ -28,7 +27,7 @@ import heros.FlowFunction;






 *            The type of objects used to represent methods. Typically





 *            The type of objects used to represent methods. Typically







 *            {@link SootMethod}.





 *            {@link SootMethod}.







 */





 */







public interface FlowFunctions<Stmt, F extends FieldSensitiveFact, Method> {





public interface FlowFunctions<Stmt, F extends FieldSensitiveFact<?, F>, Method> {





















 /**





 /**







	 * Returns the flow function that computes the flow for a normal statement,





	 * Returns the flow function that computes the flow for a normal statement,



...@@ -43,9 +42,6 @@ public interface FlowFunctions<Stmt, F extends FieldSensitiveFact, Method> {
...@@ -43,9 +42,6 @@ public interface FlowFunctions<Stmt, F extends FieldSensitiveFact, Method> {






	 */





	 */







 public FlowFunction<F> getNormalFlowFunction(Stmt curr, Stmt succ);





 public FlowFunction<F> getNormalFlowFunction(Stmt curr, Stmt succ);





















 public FieldReference getReadFieldReference(Stmt curr);









 









 public FieldReference getWrittenFieldReference(Stmt curr);









 





 







 /**





 /**







	 * Returns the flow function that computes the flow for a call statement.





	 * Returns the flow function that computes the flow for a call statement.



......















test/heros/alias/FieldSensitiveSolverTest.java








View file @ 9176fc7c








...@@ -95,8 +95,8 @@ public class FieldSensitiveSolverTest {
...@@ -95,8 +95,8 @@ public class FieldSensitiveSolverTest {






 callSite("c").calls("foo", flow("2.field", "3.field")));





 callSite("c").calls("foo", flow("2.field", "3.field")));







 





 







 helper.method("foo",startPoints("d"),





 helper.method("foo",startPoints("d"),







 readFieldStmt("d", "notfield").succ("e", flow("3", "3"), kill("3.notfield")),





 readFieldStmt("d", "notfield").succ("e", flow("3", "3")),







 normalStmt("e").succ("f", flow("3","4")));





 normalStmt("e").succ("f", flow("3","4"), kill("3.notfield")));







 





 







 helper.method("xyz",





 helper.method("xyz",







 startPoints("g"),





 startPoints("g"),



......

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
9176fc7c


authored
Nov 13, 2014
by


Johannes Lerch



Browse files



Commit
9176fc7c


authored
Nov 13, 2014
by


Johannes Lerch

9176fc7cauthoredbyJohannes Lerch

annotated facts (WIP)






parent
3b064347
















parent
3b064347





parent












Changes
5
5


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/alias/AccessPathUtil.java








View file @ 9176fc7c








...@@ -10,6 +10,8 @@
...@@ -10,6 +10,8 @@






 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;























import heros.alias.FieldReference.SpecificFieldReference;

















public class AccessPathUtil {





public class AccessPathUtil {





















 public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {





 public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {



...@@ -47,4 +49,11 @@ public class AccessPathUtil {
...@@ -47,4 +49,11 @@ public class AccessPathUtil {






 





 







 return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);





 return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);







 }





 }



















 public static <D extends FieldSensitiveFact<?, D>> D cloneWithConcatenatedAccessPath(D fact, FieldReference... fieldRefs) {









 FieldReference[] accessPath = new FieldReference[fact.getAccessPath().length+fieldRefs.length];









 System.arraycopy(fact.getAccessPath(), 0, accessPath, 0, fact.getAccessPath().length);









 System.arraycopy(fieldRefs, 0, accessPath, fact.getAccessPath().length, fieldRefs.length);









 return fact.cloneWithAccessPath(accessPath);









 }







}




}















src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 9176fc7c








...@@ -29,9 +29,9 @@ import com.google.common.cache.CacheBuilder;
...@@ -29,9 +29,9 @@ import com.google.common.cache.CacheBuilder;






import com.google.common.collect.Sets;





import com.google.common.collect.Sets;





















import heros.DontSynchronize;





import heros.DontSynchronize;







import heros.FlowFunction;









import heros.FlowFunctionCache;





import heros.FlowFunctionCache;







import heros.alias.FlowFunctions;





import heros.alias.FieldReference.SpecificFieldReference;









import heros.alias.FlowFunction.AnnotatedFact;







import heros.alias.IFDSTabulationProblem;





import heros.alias.IFDSTabulationProblem;







import heros.InterproceduralCFG;





import heros.InterproceduralCFG;







import heros.SynchronizedBy;





import heros.SynchronizedBy;



...@@ -223,27 +223,27 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -223,27 +223,27 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 for(M sCalledProcN: callees) { //still line 14





 for(M sCalledProcN: callees) { //still line 14







 //compute the call-flow function





 //compute the call-flow function







 FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);





 FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);







 Set<D> res = computeCallFlowFunction(function, d1, d2);





 Set<AnnotatedFact<D>> res = computeCallFlowFunction(function, d1, d2);







 





 







 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);





 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);







 //for each result node of the call-flow function





 //for each result node of the call-flow function







 for(D d3: res) {





 for(AnnotatedFact<D> d3: res) {







 //for each callee's start point(s)





 //for each callee's start point(s)







 for(N sP: startPointsOf) {





 for(N sP: startPointsOf) {







 //create initial self-loop





 //create initial self-loop







 D abstractStartPointFact = d3.cloneWithAccessPath();





 D abstractStartPointFact = d3.getFact().cloneWithAccessPath();







 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15





 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15







 }





 }







 





 







 //register the fact that <sp,d3> has an incoming edge from <n,d2>





 //register the fact that <sp,d3> has an incoming edge from <n,d2>







 //line 15.1 of Naeem/Lhotak/Rodriguez





 //line 15.1 of Naeem/Lhotak/Rodriguez







 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3,n,d1,d2)))





 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3.getFact(),n,d1,d2)))







 continue;





 continue;







 





 







 //TODO: Resume edges that are on hold and match this d3





 //TODO: Resume edges that are on hold and match this d3







 





 







 //line 15.2





 //line 15.2







 Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3);





 Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3.getFact());







 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez







 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,





 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,



...@@ -251,26 +251,15 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -251,26 +251,15 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //because we have observed a potentially new incoming edge into <sP,d3>





 //because we have observed a potentially new incoming edge into <sP,d3>







 if (endSumm != null)





 if (endSumm != null)







 for(SummaryEdge<D, N> summary: endSumm) {





 for(SummaryEdge<D, N> summary: endSumm) {







 D d4 = AccessPathUtil.applyAbstractedSummary(d3, summary);





 D d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);







 





 







 //for each return site





 //for each return site







 for(N retSiteN: returnSiteNs) {





 for(N retSiteN: returnSiteNs) {







 //compute return-flow function





 //compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);







 //for each target value of the function





 //for each target value of the function







 for(D d5: computeReturnFlowFunction(retFunction, d4, n)) {





 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, d4, n)) {







 // If we have not changed anything in the callee, we do not need the facts





 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());







 // from there. Even if we change something: If we don't need the concrete









 // path, we can skip the callee in the predecessor chain









 D d5p = d5;









 //	if (d5.equals(d2))









 //		d5p = d2;









 //	else if (setJumpPredecessors)









 //		d5.setPredecessor(d2);









 









 // Set the calling context









 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5p);









 









 propagate(d1, retSiteN, d5p_restoredCtx, n, false);





 propagate(d1, retSiteN, d5p_restoredCtx, n, false);







 }





 }







 }





 }



...@@ -281,8 +270,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -281,8 +270,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //process intra-procedural flows along call-to-return flow functions





 //process intra-procedural flows along call-to-return flow functions







 for (N returnSiteN : returnSiteNs) {





 for (N returnSiteN : returnSiteNs) {







 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);





 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);







 for(D d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))





 for(AnnotatedFact<D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))







 propagate(d1, returnSiteN, d3, n, false);





 propagate(d1, returnSiteN, d3.getFact(), n, false);







 }





 }







 }





 }

















...@@ -293,7 +282,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -293,7 +282,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param d2 The abstraction at the call site





	 * @param d2 The abstraction at the call site







	 * @return The set of caller-side abstractions at the callee's start node





	 * @return The set of caller-side abstractions at the callee's start node







	 */





	 */







 protected Set<D> computeCallFlowFunction





 protected Set<AnnotatedFact<D>> computeCallFlowFunction







 (FlowFunction<D> callFlowFunction, D d1, D d2) {





 (FlowFunction<D> callFlowFunction, D d1, D d2) {







 return callFlowFunction.computeTargets(d2);





 return callFlowFunction.computeTargets(d2);







 }





 }



...@@ -307,7 +296,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -307,7 +296,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param d2 The abstraction at the call site





	 * @param d2 The abstraction at the call site







	 * @return The set of caller-side abstractions at the return site





	 * @return The set of caller-side abstractions at the return site







	 */





	 */







 protected Set<D> computeCallToReturnFlowFunction





 protected Set<AnnotatedFact<D>> computeCallToReturnFlowFunction







 (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {





 (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {







 return callToReturnFlowFunction.computeTargets(d2);





 return callToReturnFlowFunction.computeTargets(d2);







 }





 }



...@@ -349,11 +338,11 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -349,11 +338,11 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 // compute return-flow function





 // compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);







 D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);





 D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);







 Set<D> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);





 Set<AnnotatedFact<D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);





















 // for each incoming-call value





 // for each incoming-call value







 for (D callerTargetFact : callerTargetFacts) {





 for (AnnotatedFact<D> callerTargetAnnotatedFact : callerTargetFacts) {







 callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetFact);





 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());







 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);





 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);







 }





 }







 }





 }



...@@ -367,9 +356,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -367,9 +356,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 for(N c: callers) {





 for(N c: callers) {







 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {





 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);







 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c);





 Set<AnnotatedFact<D>> targets = computeReturnFlowFunction(retFunction, d2, c);







 for(D d5: targets)





 for(AnnotatedFact<D> d5: targets)







 propagate(zeroValue, retSiteC, d5, c, true);





 propagate(zeroValue, retSiteC, d5.getFact(), c, true);







 }





 }







 }





 }







 //in cases where there are no callers, the return statement would normally not be processed at all;





 //in cases where there are no callers, the return statement would normally not be processed at all;



...@@ -390,7 +379,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -390,7 +379,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param callSite The call site





	 * @param callSite The call site







	 * @return The set of caller-side abstractions at the return site





	 * @return The set of caller-side abstractions at the return site







	 */





	 */







 protected Set<D> computeReturnFlowFunction





 protected Set<AnnotatedFact<D>> computeReturnFlowFunction







 (FlowFunction<D> retFunction, D d2, N callSite) {





 (FlowFunction<D> retFunction, D d2, N callSite) {







 return retFunction.computeTargets(d2);





 return retFunction.computeTargets(d2);







 }





 }



...@@ -405,27 +394,43 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -405,27 +394,43 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 final N n = edge.getTarget(); 





 final N n = edge.getTarget(); 







 final D d2 = edge.factAtTarget();





 final D d2 = edge.factAtTarget();







 





 







 //TODO: if reading field f









 // if d1.f element of incoming edges:









 //    create and propagate (d1.f, d2.f)









 // else 









 //	  create and set (d1.f, d2.f) on hold









 //	  create for each incoming edge inc: (inc.call-d1.f, inc.call-d2.f) and put on hold









 //always continue (d1, d2)









 









 //TODO: if writing field f









 // create edge e = (d1, d2.*\{f})









 // if d2.*\{f} element of incoming edges









 // 		continue with e









 // else 









 //		put e on hold









 // always kill (d1, d2)









 









 for (N m : icfg.getSuccsOf(n)) {





 for (N m : icfg.getSuccsOf(n)) {







 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);





 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);







 Set<D> res = computeNormalFlowFunction(flowFunction, d1, d2);





 Set<AnnotatedFact<D>> res = computeNormalFlowFunction(flowFunction, d1, d2);







 for (D d3 : res)





 for (AnnotatedFact<D> d3 : res) {







 propagate(d1, m, d3, null, false); 





 //TODO: if reading field f









 // if d1.f element of incoming edges:









 //    create and propagate (d1.f, d2.f)









 // else 









 //	  create and set (d1.f, d2.f) on hold









 //	  create for each incoming edge inc: (inc.call-d1.f, inc.call-d2.f) and put on hold









 //always continue (d1, d2)









 









 if(d3.getReadField() instanceof SpecificFieldReference) {









 SpecificFieldReference fieldRef = (SpecificFieldReference) d3.getReadField();









 Set<IncomingEdge<D, N>> incomingEdges = incoming(icfg.getMethodOf(n), d3.getFact());









 if(incomingEdges.isEmpty() && !d1.equals(zeroValue)) {









 //no caller interested in d3.field -> put edge on hold









 //TODO









 } else {









 //there is an incoming edge interested in d3.field









 D concretizedSourceValue = AccessPathUtil.cloneWithConcatenatedAccessPath(d1, fieldRef);









 propagate(concretizedSourceValue, m, d3.getFact(), null, false);









 }









 }









 









 









 //TODO: if writing field f









 // create edge e = (d1, d2.*\{f})









 // if d2.*\{f} element of incoming edges









 // 		continue with e









 // else 









 //		put e on hold









 // always kill (d1, d2)









 









 propagate(d1, m, d3.getFact(), null, false);









 









 }







 }





 }







 }





 }







 





 



...@@ -437,7 +442,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -437,7 +442,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param d1 The abstraction at the current node





	 * @param d1 The abstraction at the current node







	 * @return The set of abstractions at the successor node





	 * @return The set of abstractions at the successor node







	 */





	 */







 protected Set<D> computeNormalFlowFunction





 protected Set<AnnotatedFact<D>> computeNormalFlowFunction







 (FlowFunction<D> flowFunction, D d1, D d2) {





 (FlowFunction<D> flowFunction, D d1, D d2) {







 return flowFunction.computeTargets(d2);





 return flowFunction.computeTargets(d2);







 }





 }



......















src/heros/alias/FlowFunction.java



0 → 100644







View file @ 9176fc7c














/*******************************************************************************









 * Copyright (c) 2012 Eric Bodden.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Eric Bodden - initial API and implementation









 ******************************************************************************/









package heros.alias;



















import heros.alias.FieldReference.SpecificFieldReference;



















import java.util.LinkedHashSet;









import java.util.Set;



















/**









 * A flow function computes which of the finitely many D-type values are reachable









 * from the current source values. Typically there will be one such function









 * associated with every possible control flow. 









 * 









 * <b>NOTE:</b> To be able to produce <b>deterministic benchmarking results</b>, we have found that









 * it helps to return {@link LinkedHashSet}s from {@link #computeTargets(Object)}. This is









 * because the duration of IDE's fixed point iteration may depend on the iteration order.









 * Within the solver, we have tried to fix this order as much as possible, but the









 * order, in general, does also depend on the order in which the result set









 * of {@link #computeTargets(Object)} is traversed.









 * 









 * <b>NOTE:</b> Methods defined on this type may be called simultaneously by different threads.









 * Hence, classes implementing this interface should synchronize accesses to









 * any mutable shared state.









 * 









 * @param <D> The type of data-flow facts to be computed by the tabulation problem.









 */









public interface FlowFunction<D extends FieldSensitiveFact<?, D>> {



















 /**









	 * Returns the target values reachable from the source.









	 */









 Set<AnnotatedFact<D>> computeTargets(D source);









 









 public static class AnnotatedFact<D extends FieldSensitiveFact<?, D>> {









 









 private D fact;









 private FieldReference readField;









 private FieldReference writtenField;









 









 //TODO: Refactor API to make things more intuitive









 /**









		 * 









		 * @param fact









		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value









		 * @param writtenField









		 */









 public AnnotatedFact(D fact, FieldReference readField, FieldReference writtenField) {









 this.fact = fact;









 this.readField = readField;









 this.writtenField = writtenField;









 }









 









 public D getFact() {









 return fact;









 }









 









 public FieldReference getReadField() {









 return readField;









 }









 









 public FieldReference getWrittenField() {









 return writtenField;









 }



















 @Override









 public int hashCode() {









 final int prime = 31;









 int result = 1;









 result = prime * result + ((fact == null) ? 0 : fact.hashCode());









 result = prime * result + ((readField == null) ? 0 : readField.hashCode());









 result = prime * result + ((writtenField == null) ? 0 : writtenField.hashCode());









 return result;









 }



















 @Override









 public boolean equals(Object obj) {









 if (this == obj)









 return true;









 if (obj == null)









 return false;









 if (!(obj instanceof AnnotatedFact))









 return false;









 AnnotatedFact other = (AnnotatedFact) obj;









 if (fact == null) {









 if (other.fact != null)









 return false;









 } else if (!fact.equals(other.fact))









 return false;









 if (readField == null) {









 if (other.readField != null)









 return false;









 } else if (!readField.equals(other.readField))









 return false;









 if (writtenField == null) {









 if (other.writtenField != null)









 return false;









 } else if (!writtenField.equals(other.writtenField))









 return false;









 return true;









 }









 }









}















src/heros/alias/FlowFunctions.java








View file @ 9176fc7c








...@@ -11,7 +11,6 @@
...@@ -11,7 +11,6 @@






 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;





















import heros.FlowFunction;























/**





/**







 * Classes implementing this interface provide a factory for a 





 * Classes implementing this interface provide a factory for a 



...@@ -28,7 +27,7 @@ import heros.FlowFunction;
...@@ -28,7 +27,7 @@ import heros.FlowFunction;






 *            The type of objects used to represent methods. Typically





 *            The type of objects used to represent methods. Typically







 *            {@link SootMethod}.





 *            {@link SootMethod}.







 */





 */







public interface FlowFunctions<Stmt, F extends FieldSensitiveFact, Method> {





public interface FlowFunctions<Stmt, F extends FieldSensitiveFact<?, F>, Method> {





















 /**





 /**







	 * Returns the flow function that computes the flow for a normal statement,





	 * Returns the flow function that computes the flow for a normal statement,



...@@ -43,9 +42,6 @@ public interface FlowFunctions<Stmt, F extends FieldSensitiveFact, Method> {
...@@ -43,9 +42,6 @@ public interface FlowFunctions<Stmt, F extends FieldSensitiveFact, Method> {






	 */





	 */







 public FlowFunction<F> getNormalFlowFunction(Stmt curr, Stmt succ);





 public FlowFunction<F> getNormalFlowFunction(Stmt curr, Stmt succ);





















 public FieldReference getReadFieldReference(Stmt curr);









 









 public FieldReference getWrittenFieldReference(Stmt curr);









 





 







 /**





 /**







	 * Returns the flow function that computes the flow for a call statement.





	 * Returns the flow function that computes the flow for a call statement.



......















test/heros/alias/FieldSensitiveSolverTest.java








View file @ 9176fc7c








...@@ -95,8 +95,8 @@ public class FieldSensitiveSolverTest {
...@@ -95,8 +95,8 @@ public class FieldSensitiveSolverTest {






 callSite("c").calls("foo", flow("2.field", "3.field")));





 callSite("c").calls("foo", flow("2.field", "3.field")));







 





 







 helper.method("foo",startPoints("d"),





 helper.method("foo",startPoints("d"),







 readFieldStmt("d", "notfield").succ("e", flow("3", "3"), kill("3.notfield")),





 readFieldStmt("d", "notfield").succ("e", flow("3", "3")),







 normalStmt("e").succ("f", flow("3","4")));





 normalStmt("e").succ("f", flow("3","4"), kill("3.notfield")));







 





 







 helper.method("xyz",





 helper.method("xyz",







 startPoints("g"),





 startPoints("g"),



......















src/heros/alias/AccessPathUtil.java








View file @ 9176fc7c








...@@ -10,6 +10,8 @@
...@@ -10,6 +10,8 @@






 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;























import heros.alias.FieldReference.SpecificFieldReference;

















public class AccessPathUtil {





public class AccessPathUtil {





















 public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {





 public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {



...@@ -47,4 +49,11 @@ public class AccessPathUtil {
...@@ -47,4 +49,11 @@ public class AccessPathUtil {






 





 







 return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);





 return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);







 }





 }



















 public static <D extends FieldSensitiveFact<?, D>> D cloneWithConcatenatedAccessPath(D fact, FieldReference... fieldRefs) {









 FieldReference[] accessPath = new FieldReference[fact.getAccessPath().length+fieldRefs.length];









 System.arraycopy(fact.getAccessPath(), 0, accessPath, 0, fact.getAccessPath().length);









 System.arraycopy(fieldRefs, 0, accessPath, fact.getAccessPath().length, fieldRefs.length);









 return fact.cloneWithAccessPath(accessPath);









 }







}




}













src/heros/alias/AccessPathUtil.java








View file @ 9176fc7c








src/heros/alias/AccessPathUtil.java










View file @ 9176fc7c


9176fc7c





...@@ -10,6 +10,8 @@
...@@ -10,6 +10,8 @@






 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;























import heros.alias.FieldReference.SpecificFieldReference;

















public class AccessPathUtil {





public class AccessPathUtil {





















 public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {





 public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {



...@@ -47,4 +49,11 @@ public class AccessPathUtil {
...@@ -47,4 +49,11 @@ public class AccessPathUtil {






 





 







 return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);





 return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);







 }





 }



















 public static <D extends FieldSensitiveFact<?, D>> D cloneWithConcatenatedAccessPath(D fact, FieldReference... fieldRefs) {









 FieldReference[] accessPath = new FieldReference[fact.getAccessPath().length+fieldRefs.length];









 System.arraycopy(fact.getAccessPath(), 0, accessPath, 0, fact.getAccessPath().length);









 System.arraycopy(fieldRefs, 0, accessPath, fact.getAccessPath().length, fieldRefs.length);









 return fact.cloneWithAccessPath(accessPath);









 }







}




}









...@@ -10,6 +10,8 @@
...@@ -10,6 +10,8 @@






 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;























import heros.alias.FieldReference.SpecificFieldReference;

















public class AccessPathUtil {





public class AccessPathUtil {





















 public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {





 public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {



...@@ -47,4 +49,11 @@ public class AccessPathUtil {
...@@ -47,4 +49,11 @@ public class AccessPathUtil {






 





 







 return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);





 return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);







 }





 }



















 public static <D extends FieldSensitiveFact<?, D>> D cloneWithConcatenatedAccessPath(D fact, FieldReference... fieldRefs) {









 FieldReference[] accessPath = new FieldReference[fact.getAccessPath().length+fieldRefs.length];









 System.arraycopy(fact.getAccessPath(), 0, accessPath, 0, fact.getAccessPath().length);









 System.arraycopy(fieldRefs, 0, accessPath, fact.getAccessPath().length, fieldRefs.length);









 return fact.cloneWithAccessPath(accessPath);









 }







}




}






...@@ -10,6 +10,8 @@
...@@ -10,6 +10,8 @@






 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;























import heros.alias.FieldReference.SpecificFieldReference;

















public class AccessPathUtil {





public class AccessPathUtil {





















 public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {





 public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {



...@@ -47,4 +49,11 @@ public class AccessPathUtil {
...@@ -47,4 +49,11 @@ public class AccessPathUtil {






 





 







 return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);





 return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);







 }





 }



















 public static <D extends FieldSensitiveFact<?, D>> D cloneWithConcatenatedAccessPath(D fact, FieldReference... fieldRefs) {









 FieldReference[] accessPath = new FieldReference[fact.getAccessPath().length+fieldRefs.length];









 System.arraycopy(fact.getAccessPath(), 0, accessPath, 0, fact.getAccessPath().length);









 System.arraycopy(fieldRefs, 0, accessPath, fact.getAccessPath().length, fieldRefs.length);









 return fact.cloneWithAccessPath(accessPath);









 }







}




}


 ******************************************************************************/ ******************************************************************************/ ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;package heros.alias;packageheros.alias;import heros.alias.FieldReference.SpecificFieldReference;importheros.alias.FieldReference.SpecificFieldReference;public class AccessPathUtil {publicclassAccessPathUtil{public class AccessPathUtil {publicclassAccessPathUtil{ public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {publicstatic<DextendsFieldSensitiveFact<?,D>>booleanisPrefixOf(DprefixCandidate,Dfact){ public static <D extends FieldSensitiveFact<?, D>> boolean isPrefixOf(D prefixCandidate, D fact) {publicstatic<DextendsFieldSensitiveFact<?,D>>booleanisPrefixOf(DprefixCandidate,Dfact){   return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);returnsummary.getTargetFact().cloneWithAccessPath(resultAccessPath); return summary.getTargetFact().cloneWithAccessPath(resultAccessPath);returnsummary.getTargetFact().cloneWithAccessPath(resultAccessPath); }} }} public static <D extends FieldSensitiveFact<?, D>> D cloneWithConcatenatedAccessPath(D fact, FieldReference... fieldRefs) {publicstatic<DextendsFieldSensitiveFact<?,D>>DcloneWithConcatenatedAccessPath(Dfact,FieldReference...fieldRefs){ FieldReference[] accessPath = new FieldReference[fact.getAccessPath().length+fieldRefs.length];FieldReference[]accessPath=newFieldReference[fact.getAccessPath().length+fieldRefs.length]; System.arraycopy(fact.getAccessPath(), 0, accessPath, 0, fact.getAccessPath().length);System.arraycopy(fact.getAccessPath(),0,accessPath,0,fact.getAccessPath().length); System.arraycopy(fieldRefs, 0, accessPath, fact.getAccessPath().length, fieldRefs.length);System.arraycopy(fieldRefs,0,accessPath,fact.getAccessPath().length,fieldRefs.length); return fact.cloneWithAccessPath(accessPath);returnfact.cloneWithAccessPath(accessPath); }}}}}}








src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 9176fc7c








...@@ -29,9 +29,9 @@ import com.google.common.cache.CacheBuilder;
...@@ -29,9 +29,9 @@ import com.google.common.cache.CacheBuilder;






import com.google.common.collect.Sets;





import com.google.common.collect.Sets;





















import heros.DontSynchronize;





import heros.DontSynchronize;







import heros.FlowFunction;









import heros.FlowFunctionCache;





import heros.FlowFunctionCache;







import heros.alias.FlowFunctions;





import heros.alias.FieldReference.SpecificFieldReference;









import heros.alias.FlowFunction.AnnotatedFact;







import heros.alias.IFDSTabulationProblem;





import heros.alias.IFDSTabulationProblem;







import heros.InterproceduralCFG;





import heros.InterproceduralCFG;







import heros.SynchronizedBy;





import heros.SynchronizedBy;



...@@ -223,27 +223,27 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -223,27 +223,27 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 for(M sCalledProcN: callees) { //still line 14





 for(M sCalledProcN: callees) { //still line 14







 //compute the call-flow function





 //compute the call-flow function







 FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);





 FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);







 Set<D> res = computeCallFlowFunction(function, d1, d2);





 Set<AnnotatedFact<D>> res = computeCallFlowFunction(function, d1, d2);







 





 







 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);





 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);







 //for each result node of the call-flow function





 //for each result node of the call-flow function







 for(D d3: res) {





 for(AnnotatedFact<D> d3: res) {







 //for each callee's start point(s)





 //for each callee's start point(s)







 for(N sP: startPointsOf) {





 for(N sP: startPointsOf) {







 //create initial self-loop





 //create initial self-loop







 D abstractStartPointFact = d3.cloneWithAccessPath();





 D abstractStartPointFact = d3.getFact().cloneWithAccessPath();







 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15





 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15







 }





 }







 





 







 //register the fact that <sp,d3> has an incoming edge from <n,d2>





 //register the fact that <sp,d3> has an incoming edge from <n,d2>







 //line 15.1 of Naeem/Lhotak/Rodriguez





 //line 15.1 of Naeem/Lhotak/Rodriguez







 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3,n,d1,d2)))





 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3.getFact(),n,d1,d2)))







 continue;





 continue;







 





 







 //TODO: Resume edges that are on hold and match this d3





 //TODO: Resume edges that are on hold and match this d3







 





 







 //line 15.2





 //line 15.2







 Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3);





 Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3.getFact());







 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez







 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,





 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,



...@@ -251,26 +251,15 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -251,26 +251,15 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //because we have observed a potentially new incoming edge into <sP,d3>





 //because we have observed a potentially new incoming edge into <sP,d3>







 if (endSumm != null)





 if (endSumm != null)







 for(SummaryEdge<D, N> summary: endSumm) {





 for(SummaryEdge<D, N> summary: endSumm) {







 D d4 = AccessPathUtil.applyAbstractedSummary(d3, summary);





 D d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);







 





 







 //for each return site





 //for each return site







 for(N retSiteN: returnSiteNs) {





 for(N retSiteN: returnSiteNs) {







 //compute return-flow function





 //compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);







 //for each target value of the function





 //for each target value of the function







 for(D d5: computeReturnFlowFunction(retFunction, d4, n)) {





 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, d4, n)) {







 // If we have not changed anything in the callee, we do not need the facts





 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());







 // from there. Even if we change something: If we don't need the concrete









 // path, we can skip the callee in the predecessor chain









 D d5p = d5;









 //	if (d5.equals(d2))









 //		d5p = d2;









 //	else if (setJumpPredecessors)









 //		d5.setPredecessor(d2);









 









 // Set the calling context









 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5p);









 









 propagate(d1, retSiteN, d5p_restoredCtx, n, false);





 propagate(d1, retSiteN, d5p_restoredCtx, n, false);







 }





 }







 }





 }



...@@ -281,8 +270,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -281,8 +270,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //process intra-procedural flows along call-to-return flow functions





 //process intra-procedural flows along call-to-return flow functions







 for (N returnSiteN : returnSiteNs) {





 for (N returnSiteN : returnSiteNs) {







 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);





 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);







 for(D d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))





 for(AnnotatedFact<D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))







 propagate(d1, returnSiteN, d3, n, false);





 propagate(d1, returnSiteN, d3.getFact(), n, false);







 }





 }







 }





 }

















...@@ -293,7 +282,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -293,7 +282,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param d2 The abstraction at the call site





	 * @param d2 The abstraction at the call site







	 * @return The set of caller-side abstractions at the callee's start node





	 * @return The set of caller-side abstractions at the callee's start node







	 */





	 */







 protected Set<D> computeCallFlowFunction





 protected Set<AnnotatedFact<D>> computeCallFlowFunction







 (FlowFunction<D> callFlowFunction, D d1, D d2) {





 (FlowFunction<D> callFlowFunction, D d1, D d2) {







 return callFlowFunction.computeTargets(d2);





 return callFlowFunction.computeTargets(d2);







 }





 }



...@@ -307,7 +296,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -307,7 +296,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param d2 The abstraction at the call site





	 * @param d2 The abstraction at the call site







	 * @return The set of caller-side abstractions at the return site





	 * @return The set of caller-side abstractions at the return site







	 */





	 */







 protected Set<D> computeCallToReturnFlowFunction





 protected Set<AnnotatedFact<D>> computeCallToReturnFlowFunction







 (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {





 (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {







 return callToReturnFlowFunction.computeTargets(d2);





 return callToReturnFlowFunction.computeTargets(d2);







 }





 }



...@@ -349,11 +338,11 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -349,11 +338,11 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 // compute return-flow function





 // compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);







 D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);





 D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);







 Set<D> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);





 Set<AnnotatedFact<D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);





















 // for each incoming-call value





 // for each incoming-call value







 for (D callerTargetFact : callerTargetFacts) {





 for (AnnotatedFact<D> callerTargetAnnotatedFact : callerTargetFacts) {







 callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetFact);





 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());







 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);





 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);







 }





 }







 }





 }



...@@ -367,9 +356,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -367,9 +356,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 for(N c: callers) {





 for(N c: callers) {







 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {





 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);







 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c);





 Set<AnnotatedFact<D>> targets = computeReturnFlowFunction(retFunction, d2, c);







 for(D d5: targets)





 for(AnnotatedFact<D> d5: targets)







 propagate(zeroValue, retSiteC, d5, c, true);





 propagate(zeroValue, retSiteC, d5.getFact(), c, true);







 }





 }







 }





 }







 //in cases where there are no callers, the return statement would normally not be processed at all;





 //in cases where there are no callers, the return statement would normally not be processed at all;



...@@ -390,7 +379,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -390,7 +379,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param callSite The call site





	 * @param callSite The call site







	 * @return The set of caller-side abstractions at the return site





	 * @return The set of caller-side abstractions at the return site







	 */





	 */







 protected Set<D> computeReturnFlowFunction





 protected Set<AnnotatedFact<D>> computeReturnFlowFunction







 (FlowFunction<D> retFunction, D d2, N callSite) {





 (FlowFunction<D> retFunction, D d2, N callSite) {







 return retFunction.computeTargets(d2);





 return retFunction.computeTargets(d2);







 }





 }



...@@ -405,27 +394,43 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -405,27 +394,43 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 final N n = edge.getTarget(); 





 final N n = edge.getTarget(); 







 final D d2 = edge.factAtTarget();





 final D d2 = edge.factAtTarget();







 





 







 //TODO: if reading field f









 // if d1.f element of incoming edges:









 //    create and propagate (d1.f, d2.f)









 // else 









 //	  create and set (d1.f, d2.f) on hold









 //	  create for each incoming edge inc: (inc.call-d1.f, inc.call-d2.f) and put on hold









 //always continue (d1, d2)









 









 //TODO: if writing field f









 // create edge e = (d1, d2.*\{f})









 // if d2.*\{f} element of incoming edges









 // 		continue with e









 // else 









 //		put e on hold









 // always kill (d1, d2)









 









 for (N m : icfg.getSuccsOf(n)) {





 for (N m : icfg.getSuccsOf(n)) {







 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);





 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);







 Set<D> res = computeNormalFlowFunction(flowFunction, d1, d2);





 Set<AnnotatedFact<D>> res = computeNormalFlowFunction(flowFunction, d1, d2);







 for (D d3 : res)





 for (AnnotatedFact<D> d3 : res) {







 propagate(d1, m, d3, null, false); 





 //TODO: if reading field f









 // if d1.f element of incoming edges:









 //    create and propagate (d1.f, d2.f)









 // else 









 //	  create and set (d1.f, d2.f) on hold









 //	  create for each incoming edge inc: (inc.call-d1.f, inc.call-d2.f) and put on hold









 //always continue (d1, d2)









 









 if(d3.getReadField() instanceof SpecificFieldReference) {









 SpecificFieldReference fieldRef = (SpecificFieldReference) d3.getReadField();









 Set<IncomingEdge<D, N>> incomingEdges = incoming(icfg.getMethodOf(n), d3.getFact());









 if(incomingEdges.isEmpty() && !d1.equals(zeroValue)) {









 //no caller interested in d3.field -> put edge on hold









 //TODO









 } else {









 //there is an incoming edge interested in d3.field









 D concretizedSourceValue = AccessPathUtil.cloneWithConcatenatedAccessPath(d1, fieldRef);









 propagate(concretizedSourceValue, m, d3.getFact(), null, false);









 }









 }









 









 









 //TODO: if writing field f









 // create edge e = (d1, d2.*\{f})









 // if d2.*\{f} element of incoming edges









 // 		continue with e









 // else 









 //		put e on hold









 // always kill (d1, d2)









 









 propagate(d1, m, d3.getFact(), null, false);









 









 }







 }





 }







 }





 }







 





 



...@@ -437,7 +442,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -437,7 +442,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param d1 The abstraction at the current node





	 * @param d1 The abstraction at the current node







	 * @return The set of abstractions at the successor node





	 * @return The set of abstractions at the successor node







	 */





	 */







 protected Set<D> computeNormalFlowFunction





 protected Set<AnnotatedFact<D>> computeNormalFlowFunction







 (FlowFunction<D> flowFunction, D d1, D d2) {





 (FlowFunction<D> flowFunction, D d1, D d2) {







 return flowFunction.computeTargets(d2);





 return flowFunction.computeTargets(d2);







 }





 }



......













src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 9176fc7c








src/heros/alias/FieldSensitiveIFDSSolver.java










View file @ 9176fc7c


9176fc7c





...@@ -29,9 +29,9 @@ import com.google.common.cache.CacheBuilder;
...@@ -29,9 +29,9 @@ import com.google.common.cache.CacheBuilder;






import com.google.common.collect.Sets;





import com.google.common.collect.Sets;





















import heros.DontSynchronize;





import heros.DontSynchronize;







import heros.FlowFunction;









import heros.FlowFunctionCache;





import heros.FlowFunctionCache;







import heros.alias.FlowFunctions;





import heros.alias.FieldReference.SpecificFieldReference;









import heros.alias.FlowFunction.AnnotatedFact;







import heros.alias.IFDSTabulationProblem;





import heros.alias.IFDSTabulationProblem;







import heros.InterproceduralCFG;





import heros.InterproceduralCFG;







import heros.SynchronizedBy;





import heros.SynchronizedBy;



...@@ -223,27 +223,27 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -223,27 +223,27 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 for(M sCalledProcN: callees) { //still line 14





 for(M sCalledProcN: callees) { //still line 14







 //compute the call-flow function





 //compute the call-flow function







 FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);





 FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);







 Set<D> res = computeCallFlowFunction(function, d1, d2);





 Set<AnnotatedFact<D>> res = computeCallFlowFunction(function, d1, d2);







 





 







 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);





 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);







 //for each result node of the call-flow function





 //for each result node of the call-flow function







 for(D d3: res) {





 for(AnnotatedFact<D> d3: res) {







 //for each callee's start point(s)





 //for each callee's start point(s)







 for(N sP: startPointsOf) {





 for(N sP: startPointsOf) {







 //create initial self-loop





 //create initial self-loop







 D abstractStartPointFact = d3.cloneWithAccessPath();





 D abstractStartPointFact = d3.getFact().cloneWithAccessPath();







 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15





 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15







 }





 }







 





 







 //register the fact that <sp,d3> has an incoming edge from <n,d2>





 //register the fact that <sp,d3> has an incoming edge from <n,d2>







 //line 15.1 of Naeem/Lhotak/Rodriguez





 //line 15.1 of Naeem/Lhotak/Rodriguez







 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3,n,d1,d2)))





 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3.getFact(),n,d1,d2)))







 continue;





 continue;







 





 







 //TODO: Resume edges that are on hold and match this d3





 //TODO: Resume edges that are on hold and match this d3







 





 







 //line 15.2





 //line 15.2







 Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3);





 Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3.getFact());







 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez







 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,





 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,



...@@ -251,26 +251,15 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -251,26 +251,15 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //because we have observed a potentially new incoming edge into <sP,d3>





 //because we have observed a potentially new incoming edge into <sP,d3>







 if (endSumm != null)





 if (endSumm != null)







 for(SummaryEdge<D, N> summary: endSumm) {





 for(SummaryEdge<D, N> summary: endSumm) {







 D d4 = AccessPathUtil.applyAbstractedSummary(d3, summary);





 D d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);







 





 







 //for each return site





 //for each return site







 for(N retSiteN: returnSiteNs) {





 for(N retSiteN: returnSiteNs) {







 //compute return-flow function





 //compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);







 //for each target value of the function





 //for each target value of the function







 for(D d5: computeReturnFlowFunction(retFunction, d4, n)) {





 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, d4, n)) {







 // If we have not changed anything in the callee, we do not need the facts





 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());







 // from there. Even if we change something: If we don't need the concrete









 // path, we can skip the callee in the predecessor chain









 D d5p = d5;









 //	if (d5.equals(d2))









 //		d5p = d2;









 //	else if (setJumpPredecessors)









 //		d5.setPredecessor(d2);









 









 // Set the calling context









 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5p);









 









 propagate(d1, retSiteN, d5p_restoredCtx, n, false);





 propagate(d1, retSiteN, d5p_restoredCtx, n, false);







 }





 }







 }





 }



...@@ -281,8 +270,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -281,8 +270,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //process intra-procedural flows along call-to-return flow functions





 //process intra-procedural flows along call-to-return flow functions







 for (N returnSiteN : returnSiteNs) {





 for (N returnSiteN : returnSiteNs) {







 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);





 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);







 for(D d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))





 for(AnnotatedFact<D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))







 propagate(d1, returnSiteN, d3, n, false);





 propagate(d1, returnSiteN, d3.getFact(), n, false);







 }





 }







 }





 }

















...@@ -293,7 +282,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -293,7 +282,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param d2 The abstraction at the call site





	 * @param d2 The abstraction at the call site







	 * @return The set of caller-side abstractions at the callee's start node





	 * @return The set of caller-side abstractions at the callee's start node







	 */





	 */







 protected Set<D> computeCallFlowFunction





 protected Set<AnnotatedFact<D>> computeCallFlowFunction







 (FlowFunction<D> callFlowFunction, D d1, D d2) {





 (FlowFunction<D> callFlowFunction, D d1, D d2) {







 return callFlowFunction.computeTargets(d2);





 return callFlowFunction.computeTargets(d2);







 }





 }



...@@ -307,7 +296,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -307,7 +296,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param d2 The abstraction at the call site





	 * @param d2 The abstraction at the call site







	 * @return The set of caller-side abstractions at the return site





	 * @return The set of caller-side abstractions at the return site







	 */





	 */







 protected Set<D> computeCallToReturnFlowFunction





 protected Set<AnnotatedFact<D>> computeCallToReturnFlowFunction







 (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {





 (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {







 return callToReturnFlowFunction.computeTargets(d2);





 return callToReturnFlowFunction.computeTargets(d2);







 }





 }



...@@ -349,11 +338,11 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -349,11 +338,11 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 // compute return-flow function





 // compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);







 D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);





 D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);







 Set<D> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);





 Set<AnnotatedFact<D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);





















 // for each incoming-call value





 // for each incoming-call value







 for (D callerTargetFact : callerTargetFacts) {





 for (AnnotatedFact<D> callerTargetAnnotatedFact : callerTargetFacts) {







 callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetFact);





 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());







 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);





 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);







 }





 }







 }





 }



...@@ -367,9 +356,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -367,9 +356,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 for(N c: callers) {





 for(N c: callers) {







 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {





 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);







 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c);





 Set<AnnotatedFact<D>> targets = computeReturnFlowFunction(retFunction, d2, c);







 for(D d5: targets)





 for(AnnotatedFact<D> d5: targets)







 propagate(zeroValue, retSiteC, d5, c, true);





 propagate(zeroValue, retSiteC, d5.getFact(), c, true);







 }





 }







 }





 }







 //in cases where there are no callers, the return statement would normally not be processed at all;





 //in cases where there are no callers, the return statement would normally not be processed at all;



...@@ -390,7 +379,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -390,7 +379,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param callSite The call site





	 * @param callSite The call site







	 * @return The set of caller-side abstractions at the return site





	 * @return The set of caller-side abstractions at the return site







	 */





	 */







 protected Set<D> computeReturnFlowFunction





 protected Set<AnnotatedFact<D>> computeReturnFlowFunction







 (FlowFunction<D> retFunction, D d2, N callSite) {





 (FlowFunction<D> retFunction, D d2, N callSite) {







 return retFunction.computeTargets(d2);





 return retFunction.computeTargets(d2);







 }





 }



...@@ -405,27 +394,43 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -405,27 +394,43 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 final N n = edge.getTarget(); 





 final N n = edge.getTarget(); 







 final D d2 = edge.factAtTarget();





 final D d2 = edge.factAtTarget();







 





 







 //TODO: if reading field f









 // if d1.f element of incoming edges:









 //    create and propagate (d1.f, d2.f)









 // else 









 //	  create and set (d1.f, d2.f) on hold









 //	  create for each incoming edge inc: (inc.call-d1.f, inc.call-d2.f) and put on hold









 //always continue (d1, d2)









 









 //TODO: if writing field f









 // create edge e = (d1, d2.*\{f})









 // if d2.*\{f} element of incoming edges









 // 		continue with e









 // else 









 //		put e on hold









 // always kill (d1, d2)









 









 for (N m : icfg.getSuccsOf(n)) {





 for (N m : icfg.getSuccsOf(n)) {







 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);





 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);







 Set<D> res = computeNormalFlowFunction(flowFunction, d1, d2);





 Set<AnnotatedFact<D>> res = computeNormalFlowFunction(flowFunction, d1, d2);







 for (D d3 : res)





 for (AnnotatedFact<D> d3 : res) {







 propagate(d1, m, d3, null, false); 





 //TODO: if reading field f









 // if d1.f element of incoming edges:









 //    create and propagate (d1.f, d2.f)









 // else 









 //	  create and set (d1.f, d2.f) on hold









 //	  create for each incoming edge inc: (inc.call-d1.f, inc.call-d2.f) and put on hold









 //always continue (d1, d2)









 









 if(d3.getReadField() instanceof SpecificFieldReference) {









 SpecificFieldReference fieldRef = (SpecificFieldReference) d3.getReadField();









 Set<IncomingEdge<D, N>> incomingEdges = incoming(icfg.getMethodOf(n), d3.getFact());









 if(incomingEdges.isEmpty() && !d1.equals(zeroValue)) {









 //no caller interested in d3.field -> put edge on hold









 //TODO









 } else {









 //there is an incoming edge interested in d3.field









 D concretizedSourceValue = AccessPathUtil.cloneWithConcatenatedAccessPath(d1, fieldRef);









 propagate(concretizedSourceValue, m, d3.getFact(), null, false);









 }









 }









 









 









 //TODO: if writing field f









 // create edge e = (d1, d2.*\{f})









 // if d2.*\{f} element of incoming edges









 // 		continue with e









 // else 









 //		put e on hold









 // always kill (d1, d2)









 









 propagate(d1, m, d3.getFact(), null, false);









 









 }







 }





 }







 }





 }







 





 



...@@ -437,7 +442,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -437,7 +442,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param d1 The abstraction at the current node





	 * @param d1 The abstraction at the current node







	 * @return The set of abstractions at the successor node





	 * @return The set of abstractions at the successor node







	 */





	 */







 protected Set<D> computeNormalFlowFunction





 protected Set<AnnotatedFact<D>> computeNormalFlowFunction







 (FlowFunction<D> flowFunction, D d1, D d2) {





 (FlowFunction<D> flowFunction, D d1, D d2) {







 return flowFunction.computeTargets(d2);





 return flowFunction.computeTargets(d2);







 }





 }



......









...@@ -29,9 +29,9 @@ import com.google.common.cache.CacheBuilder;
...@@ -29,9 +29,9 @@ import com.google.common.cache.CacheBuilder;






import com.google.common.collect.Sets;





import com.google.common.collect.Sets;





















import heros.DontSynchronize;





import heros.DontSynchronize;







import heros.FlowFunction;









import heros.FlowFunctionCache;





import heros.FlowFunctionCache;







import heros.alias.FlowFunctions;





import heros.alias.FieldReference.SpecificFieldReference;









import heros.alias.FlowFunction.AnnotatedFact;







import heros.alias.IFDSTabulationProblem;





import heros.alias.IFDSTabulationProblem;







import heros.InterproceduralCFG;





import heros.InterproceduralCFG;







import heros.SynchronizedBy;





import heros.SynchronizedBy;



...@@ -223,27 +223,27 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -223,27 +223,27 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 for(M sCalledProcN: callees) { //still line 14





 for(M sCalledProcN: callees) { //still line 14







 //compute the call-flow function





 //compute the call-flow function







 FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);





 FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);







 Set<D> res = computeCallFlowFunction(function, d1, d2);





 Set<AnnotatedFact<D>> res = computeCallFlowFunction(function, d1, d2);







 





 







 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);





 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);







 //for each result node of the call-flow function





 //for each result node of the call-flow function







 for(D d3: res) {





 for(AnnotatedFact<D> d3: res) {







 //for each callee's start point(s)





 //for each callee's start point(s)







 for(N sP: startPointsOf) {





 for(N sP: startPointsOf) {







 //create initial self-loop





 //create initial self-loop







 D abstractStartPointFact = d3.cloneWithAccessPath();





 D abstractStartPointFact = d3.getFact().cloneWithAccessPath();







 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15





 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15







 }





 }







 





 







 //register the fact that <sp,d3> has an incoming edge from <n,d2>





 //register the fact that <sp,d3> has an incoming edge from <n,d2>







 //line 15.1 of Naeem/Lhotak/Rodriguez





 //line 15.1 of Naeem/Lhotak/Rodriguez







 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3,n,d1,d2)))





 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3.getFact(),n,d1,d2)))







 continue;





 continue;







 





 







 //TODO: Resume edges that are on hold and match this d3





 //TODO: Resume edges that are on hold and match this d3







 





 







 //line 15.2





 //line 15.2







 Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3);





 Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3.getFact());







 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez







 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,





 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,



...@@ -251,26 +251,15 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -251,26 +251,15 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //because we have observed a potentially new incoming edge into <sP,d3>





 //because we have observed a potentially new incoming edge into <sP,d3>







 if (endSumm != null)





 if (endSumm != null)







 for(SummaryEdge<D, N> summary: endSumm) {





 for(SummaryEdge<D, N> summary: endSumm) {







 D d4 = AccessPathUtil.applyAbstractedSummary(d3, summary);





 D d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);







 





 







 //for each return site





 //for each return site







 for(N retSiteN: returnSiteNs) {





 for(N retSiteN: returnSiteNs) {







 //compute return-flow function





 //compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);







 //for each target value of the function





 //for each target value of the function







 for(D d5: computeReturnFlowFunction(retFunction, d4, n)) {





 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, d4, n)) {







 // If we have not changed anything in the callee, we do not need the facts





 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());







 // from there. Even if we change something: If we don't need the concrete









 // path, we can skip the callee in the predecessor chain









 D d5p = d5;









 //	if (d5.equals(d2))









 //		d5p = d2;









 //	else if (setJumpPredecessors)









 //		d5.setPredecessor(d2);









 









 // Set the calling context









 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5p);









 









 propagate(d1, retSiteN, d5p_restoredCtx, n, false);





 propagate(d1, retSiteN, d5p_restoredCtx, n, false);







 }





 }







 }





 }



...@@ -281,8 +270,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -281,8 +270,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //process intra-procedural flows along call-to-return flow functions





 //process intra-procedural flows along call-to-return flow functions







 for (N returnSiteN : returnSiteNs) {





 for (N returnSiteN : returnSiteNs) {







 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);





 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);







 for(D d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))





 for(AnnotatedFact<D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))







 propagate(d1, returnSiteN, d3, n, false);





 propagate(d1, returnSiteN, d3.getFact(), n, false);







 }





 }







 }





 }

















...@@ -293,7 +282,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -293,7 +282,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param d2 The abstraction at the call site





	 * @param d2 The abstraction at the call site







	 * @return The set of caller-side abstractions at the callee's start node





	 * @return The set of caller-side abstractions at the callee's start node







	 */





	 */







 protected Set<D> computeCallFlowFunction





 protected Set<AnnotatedFact<D>> computeCallFlowFunction







 (FlowFunction<D> callFlowFunction, D d1, D d2) {





 (FlowFunction<D> callFlowFunction, D d1, D d2) {







 return callFlowFunction.computeTargets(d2);





 return callFlowFunction.computeTargets(d2);







 }





 }



...@@ -307,7 +296,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -307,7 +296,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param d2 The abstraction at the call site





	 * @param d2 The abstraction at the call site







	 * @return The set of caller-side abstractions at the return site





	 * @return The set of caller-side abstractions at the return site







	 */





	 */







 protected Set<D> computeCallToReturnFlowFunction





 protected Set<AnnotatedFact<D>> computeCallToReturnFlowFunction







 (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {





 (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {







 return callToReturnFlowFunction.computeTargets(d2);





 return callToReturnFlowFunction.computeTargets(d2);







 }





 }



...@@ -349,11 +338,11 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -349,11 +338,11 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 // compute return-flow function





 // compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);







 D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);





 D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);







 Set<D> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);





 Set<AnnotatedFact<D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);





















 // for each incoming-call value





 // for each incoming-call value







 for (D callerTargetFact : callerTargetFacts) {





 for (AnnotatedFact<D> callerTargetAnnotatedFact : callerTargetFacts) {







 callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetFact);





 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());







 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);





 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);







 }





 }







 }





 }



...@@ -367,9 +356,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -367,9 +356,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 for(N c: callers) {





 for(N c: callers) {







 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {





 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);







 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c);





 Set<AnnotatedFact<D>> targets = computeReturnFlowFunction(retFunction, d2, c);







 for(D d5: targets)





 for(AnnotatedFact<D> d5: targets)







 propagate(zeroValue, retSiteC, d5, c, true);





 propagate(zeroValue, retSiteC, d5.getFact(), c, true);







 }





 }







 }





 }







 //in cases where there are no callers, the return statement would normally not be processed at all;





 //in cases where there are no callers, the return statement would normally not be processed at all;



...@@ -390,7 +379,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -390,7 +379,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param callSite The call site





	 * @param callSite The call site







	 * @return The set of caller-side abstractions at the return site





	 * @return The set of caller-side abstractions at the return site







	 */





	 */







 protected Set<D> computeReturnFlowFunction





 protected Set<AnnotatedFact<D>> computeReturnFlowFunction







 (FlowFunction<D> retFunction, D d2, N callSite) {





 (FlowFunction<D> retFunction, D d2, N callSite) {







 return retFunction.computeTargets(d2);





 return retFunction.computeTargets(d2);







 }





 }



...@@ -405,27 +394,43 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -405,27 +394,43 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 final N n = edge.getTarget(); 





 final N n = edge.getTarget(); 







 final D d2 = edge.factAtTarget();





 final D d2 = edge.factAtTarget();







 





 







 //TODO: if reading field f









 // if d1.f element of incoming edges:









 //    create and propagate (d1.f, d2.f)









 // else 









 //	  create and set (d1.f, d2.f) on hold









 //	  create for each incoming edge inc: (inc.call-d1.f, inc.call-d2.f) and put on hold









 //always continue (d1, d2)









 









 //TODO: if writing field f









 // create edge e = (d1, d2.*\{f})









 // if d2.*\{f} element of incoming edges









 // 		continue with e









 // else 









 //		put e on hold









 // always kill (d1, d2)









 









 for (N m : icfg.getSuccsOf(n)) {





 for (N m : icfg.getSuccsOf(n)) {







 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);





 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);







 Set<D> res = computeNormalFlowFunction(flowFunction, d1, d2);





 Set<AnnotatedFact<D>> res = computeNormalFlowFunction(flowFunction, d1, d2);







 for (D d3 : res)





 for (AnnotatedFact<D> d3 : res) {







 propagate(d1, m, d3, null, false); 





 //TODO: if reading field f









 // if d1.f element of incoming edges:









 //    create and propagate (d1.f, d2.f)









 // else 









 //	  create and set (d1.f, d2.f) on hold









 //	  create for each incoming edge inc: (inc.call-d1.f, inc.call-d2.f) and put on hold









 //always continue (d1, d2)









 









 if(d3.getReadField() instanceof SpecificFieldReference) {









 SpecificFieldReference fieldRef = (SpecificFieldReference) d3.getReadField();









 Set<IncomingEdge<D, N>> incomingEdges = incoming(icfg.getMethodOf(n), d3.getFact());









 if(incomingEdges.isEmpty() && !d1.equals(zeroValue)) {









 //no caller interested in d3.field -> put edge on hold









 //TODO









 } else {









 //there is an incoming edge interested in d3.field









 D concretizedSourceValue = AccessPathUtil.cloneWithConcatenatedAccessPath(d1, fieldRef);









 propagate(concretizedSourceValue, m, d3.getFact(), null, false);









 }









 }









 









 









 //TODO: if writing field f









 // create edge e = (d1, d2.*\{f})









 // if d2.*\{f} element of incoming edges









 // 		continue with e









 // else 









 //		put e on hold









 // always kill (d1, d2)









 









 propagate(d1, m, d3.getFact(), null, false);









 









 }







 }





 }







 }





 }







 





 



...@@ -437,7 +442,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -437,7 +442,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param d1 The abstraction at the current node





	 * @param d1 The abstraction at the current node







	 * @return The set of abstractions at the successor node





	 * @return The set of abstractions at the successor node







	 */





	 */







 protected Set<D> computeNormalFlowFunction





 protected Set<AnnotatedFact<D>> computeNormalFlowFunction







 (FlowFunction<D> flowFunction, D d1, D d2) {





 (FlowFunction<D> flowFunction, D d1, D d2) {







 return flowFunction.computeTargets(d2);





 return flowFunction.computeTargets(d2);







 }





 }



......






...@@ -29,9 +29,9 @@ import com.google.common.cache.CacheBuilder;
...@@ -29,9 +29,9 @@ import com.google.common.cache.CacheBuilder;






import com.google.common.collect.Sets;





import com.google.common.collect.Sets;





















import heros.DontSynchronize;





import heros.DontSynchronize;







import heros.FlowFunction;









import heros.FlowFunctionCache;





import heros.FlowFunctionCache;







import heros.alias.FlowFunctions;





import heros.alias.FieldReference.SpecificFieldReference;









import heros.alias.FlowFunction.AnnotatedFact;







import heros.alias.IFDSTabulationProblem;





import heros.alias.IFDSTabulationProblem;







import heros.InterproceduralCFG;





import heros.InterproceduralCFG;







import heros.SynchronizedBy;





import heros.SynchronizedBy;



...@@ -223,27 +223,27 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -223,27 +223,27 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 for(M sCalledProcN: callees) { //still line 14





 for(M sCalledProcN: callees) { //still line 14







 //compute the call-flow function





 //compute the call-flow function







 FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);





 FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);







 Set<D> res = computeCallFlowFunction(function, d1, d2);





 Set<AnnotatedFact<D>> res = computeCallFlowFunction(function, d1, d2);







 





 







 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);





 Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);







 //for each result node of the call-flow function





 //for each result node of the call-flow function







 for(D d3: res) {





 for(AnnotatedFact<D> d3: res) {







 //for each callee's start point(s)





 //for each callee's start point(s)







 for(N sP: startPointsOf) {





 for(N sP: startPointsOf) {







 //create initial self-loop





 //create initial self-loop







 D abstractStartPointFact = d3.cloneWithAccessPath();





 D abstractStartPointFact = d3.getFact().cloneWithAccessPath();







 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15





 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15







 }





 }







 





 







 //register the fact that <sp,d3> has an incoming edge from <n,d2>





 //register the fact that <sp,d3> has an incoming edge from <n,d2>







 //line 15.1 of Naeem/Lhotak/Rodriguez





 //line 15.1 of Naeem/Lhotak/Rodriguez







 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3,n,d1,d2)))





 if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3.getFact(),n,d1,d2)))







 continue;





 continue;







 





 







 //TODO: Resume edges that are on hold and match this d3





 //TODO: Resume edges that are on hold and match this d3







 





 







 //line 15.2





 //line 15.2







 Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3);





 Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3.getFact());







 





 







 //still line 15.2 of Naeem/Lhotak/Rodriguez





 //still line 15.2 of Naeem/Lhotak/Rodriguez







 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,





 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,



...@@ -251,26 +251,15 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -251,26 +251,15 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //because we have observed a potentially new incoming edge into <sP,d3>





 //because we have observed a potentially new incoming edge into <sP,d3>







 if (endSumm != null)





 if (endSumm != null)







 for(SummaryEdge<D, N> summary: endSumm) {





 for(SummaryEdge<D, N> summary: endSumm) {







 D d4 = AccessPathUtil.applyAbstractedSummary(d3, summary);





 D d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);







 





 







 //for each return site





 //for each return site







 for(N retSiteN: returnSiteNs) {





 for(N retSiteN: returnSiteNs) {







 //compute return-flow function





 //compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);







 //for each target value of the function





 //for each target value of the function







 for(D d5: computeReturnFlowFunction(retFunction, d4, n)) {





 for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, d4, n)) {







 // If we have not changed anything in the callee, we do not need the facts





 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());







 // from there. Even if we change something: If we don't need the concrete









 // path, we can skip the callee in the predecessor chain









 D d5p = d5;









 //	if (d5.equals(d2))









 //		d5p = d2;









 //	else if (setJumpPredecessors)









 //		d5.setPredecessor(d2);









 









 // Set the calling context









 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5p);









 









 propagate(d1, retSiteN, d5p_restoredCtx, n, false);





 propagate(d1, retSiteN, d5p_restoredCtx, n, false);







 }





 }







 }





 }



...@@ -281,8 +270,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -281,8 +270,8 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 //process intra-procedural flows along call-to-return flow functions





 //process intra-procedural flows along call-to-return flow functions







 for (N returnSiteN : returnSiteNs) {





 for (N returnSiteN : returnSiteNs) {







 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);





 FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);







 for(D d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))





 for(AnnotatedFact<D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))







 propagate(d1, returnSiteN, d3, n, false);





 propagate(d1, returnSiteN, d3.getFact(), n, false);







 }





 }







 }





 }

















...@@ -293,7 +282,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -293,7 +282,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param d2 The abstraction at the call site





	 * @param d2 The abstraction at the call site







	 * @return The set of caller-side abstractions at the callee's start node





	 * @return The set of caller-side abstractions at the callee's start node







	 */





	 */







 protected Set<D> computeCallFlowFunction





 protected Set<AnnotatedFact<D>> computeCallFlowFunction







 (FlowFunction<D> callFlowFunction, D d1, D d2) {





 (FlowFunction<D> callFlowFunction, D d1, D d2) {







 return callFlowFunction.computeTargets(d2);





 return callFlowFunction.computeTargets(d2);







 }





 }



...@@ -307,7 +296,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -307,7 +296,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param d2 The abstraction at the call site





	 * @param d2 The abstraction at the call site







	 * @return The set of caller-side abstractions at the return site





	 * @return The set of caller-side abstractions at the return site







	 */





	 */







 protected Set<D> computeCallToReturnFlowFunction





 protected Set<AnnotatedFact<D>> computeCallToReturnFlowFunction







 (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {





 (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {







 return callToReturnFlowFunction.computeTargets(d2);





 return callToReturnFlowFunction.computeTargets(d2);







 }





 }



...@@ -349,11 +338,11 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -349,11 +338,11 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 // compute return-flow function





 // compute return-flow function







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);







 D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);





 D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);







 Set<D> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);





 Set<AnnotatedFact<D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);





















 // for each incoming-call value





 // for each incoming-call value







 for (D callerTargetFact : callerTargetFacts) {





 for (AnnotatedFact<D> callerTargetAnnotatedFact : callerTargetFacts) {







 callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetFact);





 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());







 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);





 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);







 }





 }







 }





 }



...@@ -367,9 +356,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -367,9 +356,9 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 for(N c: callers) {





 for(N c: callers) {







 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {





 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {







 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);





 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);







 Set<D> targets = computeReturnFlowFunction(retFunction, d2, c);





 Set<AnnotatedFact<D>> targets = computeReturnFlowFunction(retFunction, d2, c);







 for(D d5: targets)





 for(AnnotatedFact<D> d5: targets)







 propagate(zeroValue, retSiteC, d5, c, true);





 propagate(zeroValue, retSiteC, d5.getFact(), c, true);







 }





 }







 }





 }







 //in cases where there are no callers, the return statement would normally not be processed at all;





 //in cases where there are no callers, the return statement would normally not be processed at all;



...@@ -390,7 +379,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -390,7 +379,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param callSite The call site





	 * @param callSite The call site







	 * @return The set of caller-side abstractions at the return site





	 * @return The set of caller-side abstractions at the return site







	 */





	 */







 protected Set<D> computeReturnFlowFunction





 protected Set<AnnotatedFact<D>> computeReturnFlowFunction







 (FlowFunction<D> retFunction, D d2, N callSite) {





 (FlowFunction<D> retFunction, D d2, N callSite) {







 return retFunction.computeTargets(d2);





 return retFunction.computeTargets(d2);







 }





 }



...@@ -405,27 +394,43 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -405,27 +394,43 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






 final N n = edge.getTarget(); 





 final N n = edge.getTarget(); 







 final D d2 = edge.factAtTarget();





 final D d2 = edge.factAtTarget();







 





 







 //TODO: if reading field f









 // if d1.f element of incoming edges:









 //    create and propagate (d1.f, d2.f)









 // else 









 //	  create and set (d1.f, d2.f) on hold









 //	  create for each incoming edge inc: (inc.call-d1.f, inc.call-d2.f) and put on hold









 //always continue (d1, d2)









 









 //TODO: if writing field f









 // create edge e = (d1, d2.*\{f})









 // if d2.*\{f} element of incoming edges









 // 		continue with e









 // else 









 //		put e on hold









 // always kill (d1, d2)









 









 for (N m : icfg.getSuccsOf(n)) {





 for (N m : icfg.getSuccsOf(n)) {







 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);





 FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);







 Set<D> res = computeNormalFlowFunction(flowFunction, d1, d2);





 Set<AnnotatedFact<D>> res = computeNormalFlowFunction(flowFunction, d1, d2);







 for (D d3 : res)





 for (AnnotatedFact<D> d3 : res) {







 propagate(d1, m, d3, null, false); 





 //TODO: if reading field f









 // if d1.f element of incoming edges:









 //    create and propagate (d1.f, d2.f)









 // else 









 //	  create and set (d1.f, d2.f) on hold









 //	  create for each incoming edge inc: (inc.call-d1.f, inc.call-d2.f) and put on hold









 //always continue (d1, d2)









 









 if(d3.getReadField() instanceof SpecificFieldReference) {









 SpecificFieldReference fieldRef = (SpecificFieldReference) d3.getReadField();









 Set<IncomingEdge<D, N>> incomingEdges = incoming(icfg.getMethodOf(n), d3.getFact());









 if(incomingEdges.isEmpty() && !d1.equals(zeroValue)) {









 //no caller interested in d3.field -> put edge on hold









 //TODO









 } else {









 //there is an incoming edge interested in d3.field









 D concretizedSourceValue = AccessPathUtil.cloneWithConcatenatedAccessPath(d1, fieldRef);









 propagate(concretizedSourceValue, m, d3.getFact(), null, false);









 }









 }









 









 









 //TODO: if writing field f









 // create edge e = (d1, d2.*\{f})









 // if d2.*\{f} element of incoming edges









 // 		continue with e









 // else 









 //		put e on hold









 // always kill (d1, d2)









 









 propagate(d1, m, d3.getFact(), null, false);









 









 }







 }





 }







 }





 }







 





 



...@@ -437,7 +442,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact
...@@ -437,7 +442,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, D extends FieldSensitiveFact






	 * @param d1 The abstraction at the current node





	 * @param d1 The abstraction at the current node







	 * @return The set of abstractions at the successor node





	 * @return The set of abstractions at the successor node







	 */





	 */







 protected Set<D> computeNormalFlowFunction





 protected Set<AnnotatedFact<D>> computeNormalFlowFunction







 (FlowFunction<D> flowFunction, D d1, D d2) {





 (FlowFunction<D> flowFunction, D d1, D d2) {







 return flowFunction.computeTargets(d2);





 return flowFunction.computeTargets(d2);







 }





 }



......


import com.google.common.collect.Sets;importcom.google.common.collect.Sets;import com.google.common.collect.Sets;importcom.google.common.collect.Sets;import heros.DontSynchronize;importheros.DontSynchronize;import heros.DontSynchronize;importheros.DontSynchronize;import heros.FlowFunction;importheros.FlowFunction;import heros.FlowFunctionCache;importheros.FlowFunctionCache;import heros.FlowFunctionCache;importheros.FlowFunctionCache;import heros.alias.FlowFunctions;importheros.alias.FlowFunctions;import heros.alias.FieldReference.SpecificFieldReference;importheros.alias.FieldReference.SpecificFieldReference;import heros.alias.FlowFunction.AnnotatedFact;importheros.alias.FlowFunction.AnnotatedFact;import heros.alias.IFDSTabulationProblem;importheros.alias.IFDSTabulationProblem;import heros.alias.IFDSTabulationProblem;importheros.alias.IFDSTabulationProblem;import heros.InterproceduralCFG;importheros.InterproceduralCFG;import heros.InterproceduralCFG;importheros.InterproceduralCFG;import heros.SynchronizedBy;importheros.SynchronizedBy;import heros.SynchronizedBy;importheros.SynchronizedBy; for(M sCalledProcN: callees) { //still line 14for(MsCalledProcN:callees){//still line 14 for(M sCalledProcN: callees) { //still line 14for(MsCalledProcN:callees){//still line 14 //compute the call-flow function//compute the call-flow function //compute the call-flow function//compute the call-flow function FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);FlowFunction<D>function=flowFunctions.getCallFlowFunction(n,sCalledProcN); FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);FlowFunction<D>function=flowFunctions.getCallFlowFunction(n,sCalledProcN); Set<D> res = computeCallFlowFunction(function, d1, d2);Set<DD>res=computeCallFlowFunction(function,d1,d2); Set<AnnotatedFact<D>> res = computeCallFlowFunction(function, d1, d2);Set<AnnotatedFactAnnotatedFact<<DD>>>res=computeCallFlowFunction(function,d1,d2);   Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);Collection<N>startPointsOf=icfg.getStartPointsOf(sCalledProcN); Collection<N> startPointsOf = icfg.getStartPointsOf(sCalledProcN);Collection<N>startPointsOf=icfg.getStartPointsOf(sCalledProcN); //for each result node of the call-flow function//for each result node of the call-flow function //for each result node of the call-flow function//for each result node of the call-flow function for(D d3: res) {for(DDd3:res){ for(AnnotatedFact<D> d3: res) {for(AnnotatedFactAnnotatedFact<<DD>>d3:res){ //for each callee's start point(s)//for each callee's start point(s) //for each callee's start point(s)//for each callee's start point(s) for(N sP: startPointsOf) {for(NsP:startPointsOf){ for(N sP: startPointsOf) {for(NsP:startPointsOf){ //create initial self-loop//create initial self-loop //create initial self-loop//create initial self-loop D abstractStartPointFact = d3.cloneWithAccessPath();DabstractStartPointFact=d3.cloneWithAccessPath(); D abstractStartPointFact = d3.getFact().cloneWithAccessPath();DabstractStartPointFact=d3.getFactgetFact().().cloneWithAccessPath(); propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15propagate(abstractStartPointFact,sP,abstractStartPointFact,n,false);//line 15 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15propagate(abstractStartPointFact,sP,abstractStartPointFact,n,false);//line 15 }} }}   //register the fact that <sp,d3> has an incoming edge from <n,d2>//register the fact that <sp,d3> has an incoming edge from <n,d2> //register the fact that <sp,d3> has an incoming edge from <n,d2>//register the fact that <sp,d3> has an incoming edge from <n,d2> //line 15.1 of Naeem/Lhotak/Rodriguez//line 15.1 of Naeem/Lhotak/Rodriguez //line 15.1 of Naeem/Lhotak/Rodriguez//line 15.1 of Naeem/Lhotak/Rodriguez if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3,n,d1,d2)))if(!addIncoming(sCalledProcN,newIncomingEdge<D,N>(d3,n,d1,d2))) if (!addIncoming(sCalledProcN, new IncomingEdge<D, N>(d3.getFact(),n,d1,d2)))if(!addIncoming(sCalledProcN,newIncomingEdge<D,N>(d3..getFactgetFact(),()n,d1,d2))) continue;continue; continue;continue;   //TODO: Resume edges that are on hold and match this d3//TODO: Resume edges that are on hold and match this d3 //TODO: Resume edges that are on hold and match this d3//TODO: Resume edges that are on hold and match this d3   //line 15.2//line 15.2 //line 15.2//line 15.2 Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3);Set<SummaryEdge<D,N>>endSumm=endSummary(sCalledProcN,d3); Set<SummaryEdge<D, N>> endSumm = endSummary(sCalledProcN, d3.getFact());Set<SummaryEdge<D,N>>endSumm=endSummary(sCalledProcN,d3..getFactgetFact());()   //still line 15.2 of Naeem/Lhotak/Rodriguez//still line 15.2 of Naeem/Lhotak/Rodriguez //still line 15.2 of Naeem/Lhotak/Rodriguez//still line 15.2 of Naeem/Lhotak/Rodriguez //for each already-queried exit value <eP,d4> reachable from <sP,d3>,//for each already-queried exit value <eP,d4> reachable from <sP,d3>, //for each already-queried exit value <eP,d4> reachable from <sP,d3>,//for each already-queried exit value <eP,d4> reachable from <sP,d3>, //because we have observed a potentially new incoming edge into <sP,d3>//because we have observed a potentially new incoming edge into <sP,d3> //because we have observed a potentially new incoming edge into <sP,d3>//because we have observed a potentially new incoming edge into <sP,d3> if (endSumm != null)if(endSumm!=null) if (endSumm != null)if(endSumm!=null) for(SummaryEdge<D, N> summary: endSumm) {for(SummaryEdge<D,N>summary:endSumm){ for(SummaryEdge<D, N> summary: endSumm) {for(SummaryEdge<D,N>summary:endSumm){ D d4 = AccessPathUtil.applyAbstractedSummary(d3, summary);Dd4=AccessPathUtil.applyAbstractedSummary(d3,summary); D d4 = AccessPathUtil.applyAbstractedSummary(d3.getFact(), summary);Dd4=AccessPathUtil.applyAbstractedSummary(d3..getFactgetFact(),()summary);   //for each return site//for each return site //for each return site//for each return site for(N retSiteN: returnSiteNs) {for(NretSiteN:returnSiteNs){ for(N retSiteN: returnSiteNs) {for(NretSiteN:returnSiteNs){ //compute return-flow function//compute return-flow function //compute return-flow function//compute return-flow function FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);FlowFunction<D>retFunction=flowFunctions.getReturnFlowFunction(n,sCalledProcN,summary.getTargetStmt(),retSiteN); FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, summary.getTargetStmt(), retSiteN);FlowFunction<D>retFunction=flowFunctions.getReturnFlowFunction(n,sCalledProcN,summary.getTargetStmt(),retSiteN); //for each target value of the function//for each target value of the function //for each target value of the function//for each target value of the function for(D d5: computeReturnFlowFunction(retFunction, d4, n)) {for(Dd5:computeReturnFlowFunction(retFunction,d4,n)){ for(AnnotatedFact<D> d5: computeReturnFlowFunction(retFunction, d4, n)) {for(AnnotatedFact<D>d5:computeReturnFlowFunction(retFunction,d4,n)){ // If we have not changed anything in the callee, we do not need the facts// If we have not changed anything in the callee, we do not need the facts D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());Dd5p_restoredCtx=restoreContextOnReturnedFact(d2,d5.getFact()); // from there. Even if we change something: If we don't need the concrete// from there. Even if we change something: If we don't need the concrete // path, we can skip the callee in the predecessor chain// path, we can skip the callee in the predecessor chain D d5p = d5;Dd5p=d5; //	if (d5.equals(d2))//	if (d5.equals(d2)) //		d5p = d2;//		d5p = d2; //	else if (setJumpPredecessors)//	else if (setJumpPredecessors) //		d5.setPredecessor(d2);//		d5.setPredecessor(d2);  // Set the calling context// Set the calling context D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5p);Dd5p_restoredCtx=restoreContextOnReturnedFact(d2,d5p);  propagate(d1, retSiteN, d5p_restoredCtx, n, false);propagate(d1,retSiteN,d5p_restoredCtx,n,false); propagate(d1, retSiteN, d5p_restoredCtx, n, false);propagate(d1,retSiteN,d5p_restoredCtx,n,false); }} }} }} }} //process intra-procedural flows along call-to-return flow functions//process intra-procedural flows along call-to-return flow functions //process intra-procedural flows along call-to-return flow functions//process intra-procedural flows along call-to-return flow functions for (N returnSiteN : returnSiteNs) {for(NreturnSiteN:returnSiteNs){ for (N returnSiteN : returnSiteNs) {for(NreturnSiteN:returnSiteNs){ FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);FlowFunction<D>callToReturnFlowFunction=flowFunctions.getCallToReturnFlowFunction(n,returnSiteN); FlowFunction<D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);FlowFunction<D>callToReturnFlowFunction=flowFunctions.getCallToReturnFlowFunction(n,returnSiteN); for(D d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))for(DDd3:computeCallToReturnFlowFunction(callToReturnFlowFunction,d1,d2)) for(AnnotatedFact<D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))for(AnnotatedFactAnnotatedFact<<DD>>d3:computeCallToReturnFlowFunction(callToReturnFlowFunction,d1,d2)) propagate(d1, returnSiteN, d3, n, false);propagate(d1,returnSiteN,d3,n,false); propagate(d1, returnSiteN, d3.getFact(), n, false);propagate(d1,returnSiteN,d3..getFactgetFact(),()n,false); }} }} }} }}	 * @param d2 The abstraction at the call site	 * @param d2 The abstraction at the call site	 * @param d2 The abstraction at the call site	 * @param d2 The abstraction at the call site	 * @return The set of caller-side abstractions at the callee's start node	 * @return The set of caller-side abstractions at the callee's start node	 * @return The set of caller-side abstractions at the callee's start node	 * @return The set of caller-side abstractions at the callee's start node	 */	 */	 */	 */ protected Set<D> computeCallFlowFunctionprotectedSet<DD>computeCallFlowFunction protected Set<AnnotatedFact<D>> computeCallFlowFunctionprotectedSet<AnnotatedFactAnnotatedFact<<DD>>>computeCallFlowFunction (FlowFunction<D> callFlowFunction, D d1, D d2) {(FlowFunction<D>callFlowFunction,Dd1,Dd2){ (FlowFunction<D> callFlowFunction, D d1, D d2) {(FlowFunction<D>callFlowFunction,Dd1,Dd2){ return callFlowFunction.computeTargets(d2);returncallFlowFunction.computeTargets(d2); return callFlowFunction.computeTargets(d2);returncallFlowFunction.computeTargets(d2); }} }}	 * @param d2 The abstraction at the call site	 * @param d2 The abstraction at the call site	 * @param d2 The abstraction at the call site	 * @param d2 The abstraction at the call site	 * @return The set of caller-side abstractions at the return site	 * @return The set of caller-side abstractions at the return site	 * @return The set of caller-side abstractions at the return site	 * @return The set of caller-side abstractions at the return site	 */	 */	 */	 */ protected Set<D> computeCallToReturnFlowFunctionprotectedSet<DD>computeCallToReturnFlowFunction protected Set<AnnotatedFact<D>> computeCallToReturnFlowFunctionprotectedSet<AnnotatedFactAnnotatedFact<<DD>>>computeCallToReturnFlowFunction (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {(FlowFunction<D>callToReturnFlowFunction,Dd1,Dd2){ (FlowFunction<D> callToReturnFlowFunction, D d1, D d2) {(FlowFunction<D>callToReturnFlowFunction,Dd1,Dd2){ return callToReturnFlowFunction.computeTargets(d2);returncallToReturnFlowFunction.computeTargets(d2); return callToReturnFlowFunction.computeTargets(d2);returncallToReturnFlowFunction.computeTargets(d2); }} }} // compute return-flow function// compute return-flow function // compute return-flow function// compute return-flow function FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);FlowFunction<D>retFunction=flowFunctions.getReturnFlowFunction(callSite,methodThatNeedsSummary,n,retSiteC); FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(callSite, methodThatNeedsSummary, n, retSiteC);FlowFunction<D>retFunction=flowFunctions.getReturnFlowFunction(callSite,methodThatNeedsSummary,n,retSiteC); D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);DconcreteCalleeExitFact=AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(),summaryEdge); D concreteCalleeExitFact = AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(), summaryEdge);DconcreteCalleeExitFact=AccessPathUtil.applyAbstractedSummary(incomingEdge.getCalleeSourceFact(),summaryEdge); Set<D> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);Set<DD>callerTargetFacts=computeReturnFlowFunction(retFunction,concreteCalleeExitFact,callSite); Set<AnnotatedFact<D>> callerTargetFacts = computeReturnFlowFunction(retFunction, concreteCalleeExitFact, callSite);Set<AnnotatedFactAnnotatedFact<<DD>>>callerTargetFacts=computeReturnFlowFunction(retFunction,concreteCalleeExitFact,callSite); // for each incoming-call value// for each incoming-call value // for each incoming-call value// for each incoming-call value for (D callerTargetFact : callerTargetFacts) {for(DDcallerTargetFact:callerTargetFacts){ for (AnnotatedFact<D> callerTargetAnnotatedFact : callerTargetFacts) {for(AnnotatedFactAnnotatedFact<<DD>>callerTargetAnnotatedFactAnnotated:callerTargetFacts){ callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetFact);callerTargetFact=restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(),callerTargetFactFact); D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());DD callerTargetFact=restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(),callerTargetAnnotatedFactAnnotatedFact..getFactgetFact());() propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);propagate(incomingEdge.getCallerSourceFact(),retSiteC,callerTargetFact,callSite,false); propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);propagate(incomingEdge.getCallerSourceFact(),retSiteC,callerTargetFact,callSite,false); }} }} }} }} for(N c: callers) {for(Nc:callers){ for(N c: callers) {for(Nc:callers){ for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {for(NretSiteC:icfg.getReturnSitesOfCallAt(c)){ for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {for(NretSiteC:icfg.getReturnSitesOfCallAt(c)){ FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);FlowFunction<D>retFunction=flowFunctions.getReturnFlowFunction(c,methodThatNeedsSummary,n,retSiteC); FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);FlowFunction<D>retFunction=flowFunctions.getReturnFlowFunction(c,methodThatNeedsSummary,n,retSiteC); Set<D> targets = computeReturnFlowFunction(retFunction, d2, c);Set<DD>targets=computeReturnFlowFunction(retFunction,d2,c); Set<AnnotatedFact<D>> targets = computeReturnFlowFunction(retFunction, d2, c);Set<AnnotatedFactAnnotatedFact<<DD>>>targets=computeReturnFlowFunction(retFunction,d2,c); for(D d5: targets)for(DDd5:targets) for(AnnotatedFact<D> d5: targets)for(AnnotatedFactAnnotatedFact<<DD>>d5:targets) propagate(zeroValue, retSiteC, d5, c, true);propagate(zeroValue,retSiteC,d5,c,true); propagate(zeroValue, retSiteC, d5.getFact(), c, true);propagate(zeroValue,retSiteC,d5..getFactgetFact(),()c,true); }} }} }} }} //in cases where there are no callers, the return statement would normally not be processed at all;//in cases where there are no callers, the return statement would normally not be processed at all; //in cases where there are no callers, the return statement would normally not be processed at all;//in cases where there are no callers, the return statement would normally not be processed at all;	 * @param callSite The call site	 * @param callSite The call site	 * @param callSite The call site	 * @param callSite The call site	 * @return The set of caller-side abstractions at the return site	 * @return The set of caller-side abstractions at the return site	 * @return The set of caller-side abstractions at the return site	 * @return The set of caller-side abstractions at the return site	 */	 */	 */	 */ protected Set<D> computeReturnFlowFunctionprotectedSet<DD>computeReturnFlowFunction protected Set<AnnotatedFact<D>> computeReturnFlowFunctionprotectedSet<AnnotatedFactAnnotatedFact<<DD>>>computeReturnFlowFunction (FlowFunction<D> retFunction, D d2, N callSite) {(FlowFunction<D>retFunction,Dd2,NcallSite){ (FlowFunction<D> retFunction, D d2, N callSite) {(FlowFunction<D>retFunction,Dd2,NcallSite){ return retFunction.computeTargets(d2);returnretFunction.computeTargets(d2); return retFunction.computeTargets(d2);returnretFunction.computeTargets(d2); }} }} final N n = edge.getTarget(); finalNn=edge.getTarget(); final N n = edge.getTarget(); finalNn=edge.getTarget(); final D d2 = edge.factAtTarget();finalDd2=edge.factAtTarget(); final D d2 = edge.factAtTarget();finalDd2=edge.factAtTarget();   //TODO: if reading field f//TODO: if reading field f // if d1.f element of incoming edges:// if d1.f element of incoming edges: //    create and propagate (d1.f, d2.f)//    create and propagate (d1.f, d2.f) // else // else  //	  create and set (d1.f, d2.f) on hold//	  create and set (d1.f, d2.f) on hold //	  create for each incoming edge inc: (inc.call-d1.f, inc.call-d2.f) and put on hold//	  create for each incoming edge inc: (inc.call-d1.f, inc.call-d2.f) and put on hold //always continue (d1, d2)//always continue (d1, d2)  //TODO: if writing field f//TODO: if writing field f // create edge e = (d1, d2.*\{f})// create edge e = (d1, d2.*\{f}) // if d2.*\{f} element of incoming edges// if d2.*\{f} element of incoming edges // 		continue with e// 		continue with e // else // else  //		put e on hold//		put e on hold // always kill (d1, d2)// always kill (d1, d2)  for (N m : icfg.getSuccsOf(n)) {for(Nm:icfg.getSuccsOf(n)){ for (N m : icfg.getSuccsOf(n)) {for(Nm:icfg.getSuccsOf(n)){ FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);FlowFunction<D>flowFunction=flowFunctions.getNormalFlowFunction(n,m); FlowFunction<D> flowFunction = flowFunctions.getNormalFlowFunction(n,m);FlowFunction<D>flowFunction=flowFunctions.getNormalFlowFunction(n,m); Set<D> res = computeNormalFlowFunction(flowFunction, d1, d2);Set<D>res=computeNormalFlowFunction(flowFunction,d1,d2); Set<AnnotatedFact<D>> res = computeNormalFlowFunction(flowFunction, d1, d2);Set<AnnotatedFact<D>>res=computeNormalFlowFunction(flowFunction,d1,d2); for (D d3 : res)for(Dd3:res) for (AnnotatedFact<D> d3 : res) {for(AnnotatedFact<D>d3:res){ propagate(d1, m, d3, null, false); propagate(d1,m,d3,null,false); //TODO: if reading field f//TODO: if reading field f // if d1.f element of incoming edges:// if d1.f element of incoming edges: //    create and propagate (d1.f, d2.f)//    create and propagate (d1.f, d2.f) // else // else  //	  create and set (d1.f, d2.f) on hold//	  create and set (d1.f, d2.f) on hold //	  create for each incoming edge inc: (inc.call-d1.f, inc.call-d2.f) and put on hold//	  create for each incoming edge inc: (inc.call-d1.f, inc.call-d2.f) and put on hold //always continue (d1, d2)//always continue (d1, d2)  if(d3.getReadField() instanceof SpecificFieldReference) {if(d3.getReadField()instanceofSpecificFieldReference){ SpecificFieldReference fieldRef = (SpecificFieldReference) d3.getReadField();SpecificFieldReferencefieldRef=(SpecificFieldReference)d3.getReadField(); Set<IncomingEdge<D, N>> incomingEdges = incoming(icfg.getMethodOf(n), d3.getFact());Set<IncomingEdge<D,N>>incomingEdges=incoming(icfg.getMethodOf(n),d3.getFact()); if(incomingEdges.isEmpty() && !d1.equals(zeroValue)) {if(incomingEdges.isEmpty()&&!d1.equals(zeroValue)){ //no caller interested in d3.field -> put edge on hold//no caller interested in d3.field -> put edge on hold //TODO//TODO } else {}else{ //there is an incoming edge interested in d3.field//there is an incoming edge interested in d3.field D concretizedSourceValue = AccessPathUtil.cloneWithConcatenatedAccessPath(d1, fieldRef);DconcretizedSourceValue=AccessPathUtil.cloneWithConcatenatedAccessPath(d1,fieldRef); propagate(concretizedSourceValue, m, d3.getFact(), null, false);propagate(concretizedSourceValue,m,d3.getFact(),null,false); }} }}   //TODO: if writing field f//TODO: if writing field f // create edge e = (d1, d2.*\{f})// create edge e = (d1, d2.*\{f}) // if d2.*\{f} element of incoming edges// if d2.*\{f} element of incoming edges // 		continue with e// 		continue with e // else // else  //		put e on hold//		put e on hold // always kill (d1, d2)// always kill (d1, d2)  propagate(d1, m, d3.getFact(), null, false);propagate(d1,m,d3.getFact(),null,false);  }} }} }} }} }}  	 * @param d1 The abstraction at the current node	 * @param d1 The abstraction at the current node	 * @param d1 The abstraction at the current node	 * @param d1 The abstraction at the current node	 * @return The set of abstractions at the successor node	 * @return The set of abstractions at the successor node	 * @return The set of abstractions at the successor node	 * @return The set of abstractions at the successor node	 */	 */	 */	 */ protected Set<D> computeNormalFlowFunctionprotectedSet<DD>computeNormalFlowFunction protected Set<AnnotatedFact<D>> computeNormalFlowFunctionprotectedSet<AnnotatedFactAnnotatedFact<<DD>>>computeNormalFlowFunction (FlowFunction<D> flowFunction, D d1, D d2) {(FlowFunction<D>flowFunction,Dd1,Dd2){ (FlowFunction<D> flowFunction, D d1, D d2) {(FlowFunction<D>flowFunction,Dd1,Dd2){ return flowFunction.computeTargets(d2);returnflowFunction.computeTargets(d2); return flowFunction.computeTargets(d2);returnflowFunction.computeTargets(d2); }} }}








src/heros/alias/FlowFunction.java



0 → 100644







View file @ 9176fc7c














/*******************************************************************************









 * Copyright (c) 2012 Eric Bodden.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Eric Bodden - initial API and implementation









 ******************************************************************************/









package heros.alias;



















import heros.alias.FieldReference.SpecificFieldReference;



















import java.util.LinkedHashSet;









import java.util.Set;



















/**









 * A flow function computes which of the finitely many D-type values are reachable









 * from the current source values. Typically there will be one such function









 * associated with every possible control flow. 









 * 









 * <b>NOTE:</b> To be able to produce <b>deterministic benchmarking results</b>, we have found that









 * it helps to return {@link LinkedHashSet}s from {@link #computeTargets(Object)}. This is









 * because the duration of IDE's fixed point iteration may depend on the iteration order.









 * Within the solver, we have tried to fix this order as much as possible, but the









 * order, in general, does also depend on the order in which the result set









 * of {@link #computeTargets(Object)} is traversed.









 * 









 * <b>NOTE:</b> Methods defined on this type may be called simultaneously by different threads.









 * Hence, classes implementing this interface should synchronize accesses to









 * any mutable shared state.









 * 









 * @param <D> The type of data-flow facts to be computed by the tabulation problem.









 */









public interface FlowFunction<D extends FieldSensitiveFact<?, D>> {



















 /**









	 * Returns the target values reachable from the source.









	 */









 Set<AnnotatedFact<D>> computeTargets(D source);









 









 public static class AnnotatedFact<D extends FieldSensitiveFact<?, D>> {









 









 private D fact;









 private FieldReference readField;









 private FieldReference writtenField;









 









 //TODO: Refactor API to make things more intuitive









 /**









		 * 









		 * @param fact









		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value









		 * @param writtenField









		 */









 public AnnotatedFact(D fact, FieldReference readField, FieldReference writtenField) {









 this.fact = fact;









 this.readField = readField;









 this.writtenField = writtenField;









 }









 









 public D getFact() {









 return fact;









 }









 









 public FieldReference getReadField() {









 return readField;









 }









 









 public FieldReference getWrittenField() {









 return writtenField;









 }



















 @Override









 public int hashCode() {









 final int prime = 31;









 int result = 1;









 result = prime * result + ((fact == null) ? 0 : fact.hashCode());









 result = prime * result + ((readField == null) ? 0 : readField.hashCode());









 result = prime * result + ((writtenField == null) ? 0 : writtenField.hashCode());









 return result;









 }



















 @Override









 public boolean equals(Object obj) {









 if (this == obj)









 return true;









 if (obj == null)









 return false;









 if (!(obj instanceof AnnotatedFact))









 return false;









 AnnotatedFact other = (AnnotatedFact) obj;









 if (fact == null) {









 if (other.fact != null)









 return false;









 } else if (!fact.equals(other.fact))









 return false;









 if (readField == null) {









 if (other.readField != null)









 return false;









 } else if (!readField.equals(other.readField))









 return false;









 if (writtenField == null) {









 if (other.writtenField != null)









 return false;









 } else if (!writtenField.equals(other.writtenField))









 return false;









 return true;









 }









 }









}













src/heros/alias/FlowFunction.java



0 → 100644







View file @ 9176fc7c








src/heros/alias/FlowFunction.java



0 → 100644









View file @ 9176fc7c


9176fc7c











/*******************************************************************************









 * Copyright (c) 2012 Eric Bodden.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Eric Bodden - initial API and implementation









 ******************************************************************************/









package heros.alias;



















import heros.alias.FieldReference.SpecificFieldReference;



















import java.util.LinkedHashSet;









import java.util.Set;



















/**









 * A flow function computes which of the finitely many D-type values are reachable









 * from the current source values. Typically there will be one such function









 * associated with every possible control flow. 









 * 









 * <b>NOTE:</b> To be able to produce <b>deterministic benchmarking results</b>, we have found that









 * it helps to return {@link LinkedHashSet}s from {@link #computeTargets(Object)}. This is









 * because the duration of IDE's fixed point iteration may depend on the iteration order.









 * Within the solver, we have tried to fix this order as much as possible, but the









 * order, in general, does also depend on the order in which the result set









 * of {@link #computeTargets(Object)} is traversed.









 * 









 * <b>NOTE:</b> Methods defined on this type may be called simultaneously by different threads.









 * Hence, classes implementing this interface should synchronize accesses to









 * any mutable shared state.









 * 









 * @param <D> The type of data-flow facts to be computed by the tabulation problem.









 */









public interface FlowFunction<D extends FieldSensitiveFact<?, D>> {



















 /**









	 * Returns the target values reachable from the source.









	 */









 Set<AnnotatedFact<D>> computeTargets(D source);









 









 public static class AnnotatedFact<D extends FieldSensitiveFact<?, D>> {









 









 private D fact;









 private FieldReference readField;









 private FieldReference writtenField;









 









 //TODO: Refactor API to make things more intuitive









 /**









		 * 









		 * @param fact









		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value









		 * @param writtenField









		 */









 public AnnotatedFact(D fact, FieldReference readField, FieldReference writtenField) {









 this.fact = fact;









 this.readField = readField;









 this.writtenField = writtenField;









 }









 









 public D getFact() {









 return fact;









 }









 









 public FieldReference getReadField() {









 return readField;









 }









 









 public FieldReference getWrittenField() {









 return writtenField;









 }



















 @Override









 public int hashCode() {









 final int prime = 31;









 int result = 1;









 result = prime * result + ((fact == null) ? 0 : fact.hashCode());









 result = prime * result + ((readField == null) ? 0 : readField.hashCode());









 result = prime * result + ((writtenField == null) ? 0 : writtenField.hashCode());









 return result;









 }



















 @Override









 public boolean equals(Object obj) {









 if (this == obj)









 return true;









 if (obj == null)









 return false;









 if (!(obj instanceof AnnotatedFact))









 return false;









 AnnotatedFact other = (AnnotatedFact) obj;









 if (fact == null) {









 if (other.fact != null)









 return false;









 } else if (!fact.equals(other.fact))









 return false;









 if (readField == null) {









 if (other.readField != null)









 return false;









 } else if (!readField.equals(other.readField))









 return false;









 if (writtenField == null) {









 if (other.writtenField != null)









 return false;









 } else if (!writtenField.equals(other.writtenField))









 return false;









 return true;









 }









 }









}















/*******************************************************************************









 * Copyright (c) 2012 Eric Bodden.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Eric Bodden - initial API and implementation









 ******************************************************************************/









package heros.alias;



















import heros.alias.FieldReference.SpecificFieldReference;



















import java.util.LinkedHashSet;









import java.util.Set;



















/**









 * A flow function computes which of the finitely many D-type values are reachable









 * from the current source values. Typically there will be one such function









 * associated with every possible control flow. 









 * 









 * <b>NOTE:</b> To be able to produce <b>deterministic benchmarking results</b>, we have found that









 * it helps to return {@link LinkedHashSet}s from {@link #computeTargets(Object)}. This is









 * because the duration of IDE's fixed point iteration may depend on the iteration order.









 * Within the solver, we have tried to fix this order as much as possible, but the









 * order, in general, does also depend on the order in which the result set









 * of {@link #computeTargets(Object)} is traversed.









 * 









 * <b>NOTE:</b> Methods defined on this type may be called simultaneously by different threads.









 * Hence, classes implementing this interface should synchronize accesses to









 * any mutable shared state.









 * 









 * @param <D> The type of data-flow facts to be computed by the tabulation problem.









 */









public interface FlowFunction<D extends FieldSensitiveFact<?, D>> {



















 /**









	 * Returns the target values reachable from the source.









	 */









 Set<AnnotatedFact<D>> computeTargets(D source);









 









 public static class AnnotatedFact<D extends FieldSensitiveFact<?, D>> {









 









 private D fact;









 private FieldReference readField;









 private FieldReference writtenField;









 









 //TODO: Refactor API to make things more intuitive









 /**









		 * 









		 * @param fact









		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value









		 * @param writtenField









		 */









 public AnnotatedFact(D fact, FieldReference readField, FieldReference writtenField) {









 this.fact = fact;









 this.readField = readField;









 this.writtenField = writtenField;









 }









 









 public D getFact() {









 return fact;









 }









 









 public FieldReference getReadField() {









 return readField;









 }









 









 public FieldReference getWrittenField() {









 return writtenField;









 }



















 @Override









 public int hashCode() {









 final int prime = 31;









 int result = 1;









 result = prime * result + ((fact == null) ? 0 : fact.hashCode());









 result = prime * result + ((readField == null) ? 0 : readField.hashCode());









 result = prime * result + ((writtenField == null) ? 0 : writtenField.hashCode());









 return result;









 }



















 @Override









 public boolean equals(Object obj) {









 if (this == obj)









 return true;









 if (obj == null)









 return false;









 if (!(obj instanceof AnnotatedFact))









 return false;









 AnnotatedFact other = (AnnotatedFact) obj;









 if (fact == null) {









 if (other.fact != null)









 return false;









 } else if (!fact.equals(other.fact))









 return false;









 if (readField == null) {









 if (other.readField != null)









 return false;









 } else if (!readField.equals(other.readField))









 return false;









 if (writtenField == null) {









 if (other.writtenField != null)









 return false;









 } else if (!writtenField.equals(other.writtenField))









 return false;









 return true;









 }









 }









}












/*******************************************************************************









 * Copyright (c) 2012 Eric Bodden.









 * All rights reserved. This program and the accompanying materials









 * are made available under the terms of the GNU Lesser Public License v2.1









 * which accompanies this distribution, and is available at









 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html









 * 









 * Contributors:









 *     Eric Bodden - initial API and implementation









 ******************************************************************************/









package heros.alias;



















import heros.alias.FieldReference.SpecificFieldReference;



















import java.util.LinkedHashSet;









import java.util.Set;



















/**









 * A flow function computes which of the finitely many D-type values are reachable









 * from the current source values. Typically there will be one such function









 * associated with every possible control flow. 









 * 









 * <b>NOTE:</b> To be able to produce <b>deterministic benchmarking results</b>, we have found that









 * it helps to return {@link LinkedHashSet}s from {@link #computeTargets(Object)}. This is









 * because the duration of IDE's fixed point iteration may depend on the iteration order.









 * Within the solver, we have tried to fix this order as much as possible, but the









 * order, in general, does also depend on the order in which the result set









 * of {@link #computeTargets(Object)} is traversed.









 * 









 * <b>NOTE:</b> Methods defined on this type may be called simultaneously by different threads.









 * Hence, classes implementing this interface should synchronize accesses to









 * any mutable shared state.









 * 









 * @param <D> The type of data-flow facts to be computed by the tabulation problem.









 */









public interface FlowFunction<D extends FieldSensitiveFact<?, D>> {



















 /**









	 * Returns the target values reachable from the source.









	 */









 Set<AnnotatedFact<D>> computeTargets(D source);









 









 public static class AnnotatedFact<D extends FieldSensitiveFact<?, D>> {









 









 private D fact;









 private FieldReference readField;









 private FieldReference writtenField;









 









 //TODO: Refactor API to make things more intuitive









 /**









		 * 









		 * @param fact









		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value









		 * @param writtenField









		 */









 public AnnotatedFact(D fact, FieldReference readField, FieldReference writtenField) {









 this.fact = fact;









 this.readField = readField;









 this.writtenField = writtenField;









 }









 









 public D getFact() {









 return fact;









 }









 









 public FieldReference getReadField() {









 return readField;









 }









 









 public FieldReference getWrittenField() {









 return writtenField;









 }



















 @Override









 public int hashCode() {









 final int prime = 31;









 int result = 1;









 result = prime * result + ((fact == null) ? 0 : fact.hashCode());









 result = prime * result + ((readField == null) ? 0 : readField.hashCode());









 result = prime * result + ((writtenField == null) ? 0 : writtenField.hashCode());









 return result;









 }



















 @Override









 public boolean equals(Object obj) {









 if (this == obj)









 return true;









 if (obj == null)









 return false;









 if (!(obj instanceof AnnotatedFact))









 return false;









 AnnotatedFact other = (AnnotatedFact) obj;









 if (fact == null) {









 if (other.fact != null)









 return false;









 } else if (!fact.equals(other.fact))









 return false;









 if (readField == null) {









 if (other.readField != null)









 return false;









 } else if (!readField.equals(other.readField))









 return false;









 if (writtenField == null) {









 if (other.writtenField != null)









 return false;









 } else if (!writtenField.equals(other.writtenField))









 return false;









 return true;









 }









 }









}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2012 Eric Bodden. * Copyright (c) 2012 Eric Bodden. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Eric Bodden - initial API and implementation *     Eric Bodden - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;import heros.alias.FieldReference.SpecificFieldReference;importheros.alias.FieldReference.SpecificFieldReference;import java.util.LinkedHashSet;importjava.util.LinkedHashSet;import java.util.Set;importjava.util.Set;/**/** * A flow function computes which of the finitely many D-type values are reachable * A flow function computes which of the finitely many D-type values are reachable * from the current source values. Typically there will be one such function * from the current source values. Typically there will be one such function * associated with every possible control flow.  * associated with every possible control flow.  *  *  * <b>NOTE:</b> To be able to produce <b>deterministic benchmarking results</b>, we have found that * <b>NOTE:</b> To be able to produce <b>deterministic benchmarking results</b>, we have found that * it helps to return {@link LinkedHashSet}s from {@link #computeTargets(Object)}. This is * it helps to return {@link LinkedHashSet}s from {@link #computeTargets(Object)}. This is * because the duration of IDE's fixed point iteration may depend on the iteration order. * because the duration of IDE's fixed point iteration may depend on the iteration order. * Within the solver, we have tried to fix this order as much as possible, but the * Within the solver, we have tried to fix this order as much as possible, but the * order, in general, does also depend on the order in which the result set * order, in general, does also depend on the order in which the result set * of {@link #computeTargets(Object)} is traversed. * of {@link #computeTargets(Object)} is traversed. *  *  * <b>NOTE:</b> Methods defined on this type may be called simultaneously by different threads. * <b>NOTE:</b> Methods defined on this type may be called simultaneously by different threads. * Hence, classes implementing this interface should synchronize accesses to * Hence, classes implementing this interface should synchronize accesses to * any mutable shared state. * any mutable shared state. *  *  * @param <D> The type of data-flow facts to be computed by the tabulation problem. * @param <D> The type of data-flow facts to be computed by the tabulation problem. */ */public interface FlowFunction<D extends FieldSensitiveFact<?, D>> {publicinterfaceFlowFunction<DextendsFieldSensitiveFact<?,D>>{ /**/**	 * Returns the target values reachable from the source.	 * Returns the target values reachable from the source.	 */	 */ Set<AnnotatedFact<D>> computeTargets(D source);Set<AnnotatedFact<D>>computeTargets(Dsource);  public static class AnnotatedFact<D extends FieldSensitiveFact<?, D>> {publicstaticclassAnnotatedFact<DextendsFieldSensitiveFact<?,D>>{  private D fact;privateDfact; private FieldReference readField;privateFieldReferencereadField; private FieldReference writtenField;privateFieldReferencewrittenField;  //TODO: Refactor API to make things more intuitive//TODO: Refactor API to make things more intuitive /**/**		 * 		 * 		 * @param fact		 * @param fact		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value		 * @param readField Giving a field reference here means the base value of a field access was tainted, i.e., we have to concretize the source value		 * @param writtenField		 * @param writtenField		 */		 */ public AnnotatedFact(D fact, FieldReference readField, FieldReference writtenField) {publicAnnotatedFact(Dfact,FieldReferencereadField,FieldReferencewrittenField){ this.fact = fact;this.fact=fact; this.readField = readField;this.readField=readField; this.writtenField = writtenField;this.writtenField=writtenField; }}  public D getFact() {publicDgetFact(){ return fact;returnfact; }}  public FieldReference getReadField() {publicFieldReferencegetReadField(){ return readField;returnreadField; }}  public FieldReference getWrittenField() {publicFieldReferencegetWrittenField(){ return writtenField;returnwrittenField; }} @Override@Override public int hashCode() {publicinthashCode(){ final int prime = 31;finalintprime=31; int result = 1;intresult=1; result = prime * result + ((fact == null) ? 0 : fact.hashCode());result=prime*result+((fact==null)?0:fact.hashCode()); result = prime * result + ((readField == null) ? 0 : readField.hashCode());result=prime*result+((readField==null)?0:readField.hashCode()); result = prime * result + ((writtenField == null) ? 0 : writtenField.hashCode());result=prime*result+((writtenField==null)?0:writtenField.hashCode()); return result;returnresult; }} @Override@Override public boolean equals(Object obj) {publicbooleanequals(Objectobj){ if (this == obj)if(this==obj) return true;returntrue; if (obj == null)if(obj==null) return false;returnfalse; if (!(obj instanceof AnnotatedFact))if(!(objinstanceofAnnotatedFact)) return false;returnfalse; AnnotatedFact other = (AnnotatedFact) obj;AnnotatedFactother=(AnnotatedFact)obj; if (fact == null) {if(fact==null){ if (other.fact != null)if(other.fact!=null) return false;returnfalse; } else if (!fact.equals(other.fact))}elseif(!fact.equals(other.fact)) return false;returnfalse; if (readField == null) {if(readField==null){ if (other.readField != null)if(other.readField!=null) return false;returnfalse; } else if (!readField.equals(other.readField))}elseif(!readField.equals(other.readField)) return false;returnfalse; if (writtenField == null) {if(writtenField==null){ if (other.writtenField != null)if(other.writtenField!=null) return false;returnfalse; } else if (!writtenField.equals(other.writtenField))}elseif(!writtenField.equals(other.writtenField)) return false;returnfalse; return true;returntrue; }} }}}}








src/heros/alias/FlowFunctions.java








View file @ 9176fc7c








...@@ -11,7 +11,6 @@
...@@ -11,7 +11,6 @@






 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;





















import heros.FlowFunction;























/**





/**







 * Classes implementing this interface provide a factory for a 





 * Classes implementing this interface provide a factory for a 



...@@ -28,7 +27,7 @@ import heros.FlowFunction;
...@@ -28,7 +27,7 @@ import heros.FlowFunction;






 *            The type of objects used to represent methods. Typically





 *            The type of objects used to represent methods. Typically







 *            {@link SootMethod}.





 *            {@link SootMethod}.







 */





 */







public interface FlowFunctions<Stmt, F extends FieldSensitiveFact, Method> {





public interface FlowFunctions<Stmt, F extends FieldSensitiveFact<?, F>, Method> {





















 /**





 /**







	 * Returns the flow function that computes the flow for a normal statement,





	 * Returns the flow function that computes the flow for a normal statement,



...@@ -43,9 +42,6 @@ public interface FlowFunctions<Stmt, F extends FieldSensitiveFact, Method> {
...@@ -43,9 +42,6 @@ public interface FlowFunctions<Stmt, F extends FieldSensitiveFact, Method> {






	 */





	 */







 public FlowFunction<F> getNormalFlowFunction(Stmt curr, Stmt succ);





 public FlowFunction<F> getNormalFlowFunction(Stmt curr, Stmt succ);





















 public FieldReference getReadFieldReference(Stmt curr);









 









 public FieldReference getWrittenFieldReference(Stmt curr);









 





 







 /**





 /**







	 * Returns the flow function that computes the flow for a call statement.





	 * Returns the flow function that computes the flow for a call statement.



......













src/heros/alias/FlowFunctions.java








View file @ 9176fc7c








src/heros/alias/FlowFunctions.java










View file @ 9176fc7c


9176fc7c





...@@ -11,7 +11,6 @@
...@@ -11,7 +11,6 @@






 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;





















import heros.FlowFunction;























/**





/**







 * Classes implementing this interface provide a factory for a 





 * Classes implementing this interface provide a factory for a 



...@@ -28,7 +27,7 @@ import heros.FlowFunction;
...@@ -28,7 +27,7 @@ import heros.FlowFunction;






 *            The type of objects used to represent methods. Typically





 *            The type of objects used to represent methods. Typically







 *            {@link SootMethod}.





 *            {@link SootMethod}.







 */





 */







public interface FlowFunctions<Stmt, F extends FieldSensitiveFact, Method> {





public interface FlowFunctions<Stmt, F extends FieldSensitiveFact<?, F>, Method> {





















 /**





 /**







	 * Returns the flow function that computes the flow for a normal statement,





	 * Returns the flow function that computes the flow for a normal statement,



...@@ -43,9 +42,6 @@ public interface FlowFunctions<Stmt, F extends FieldSensitiveFact, Method> {
...@@ -43,9 +42,6 @@ public interface FlowFunctions<Stmt, F extends FieldSensitiveFact, Method> {






	 */





	 */







 public FlowFunction<F> getNormalFlowFunction(Stmt curr, Stmt succ);





 public FlowFunction<F> getNormalFlowFunction(Stmt curr, Stmt succ);





















 public FieldReference getReadFieldReference(Stmt curr);









 









 public FieldReference getWrittenFieldReference(Stmt curr);









 





 







 /**





 /**







	 * Returns the flow function that computes the flow for a call statement.





	 * Returns the flow function that computes the flow for a call statement.



......









...@@ -11,7 +11,6 @@
...@@ -11,7 +11,6 @@






 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;





















import heros.FlowFunction;























/**





/**







 * Classes implementing this interface provide a factory for a 





 * Classes implementing this interface provide a factory for a 



...@@ -28,7 +27,7 @@ import heros.FlowFunction;
...@@ -28,7 +27,7 @@ import heros.FlowFunction;






 *            The type of objects used to represent methods. Typically





 *            The type of objects used to represent methods. Typically







 *            {@link SootMethod}.





 *            {@link SootMethod}.







 */





 */







public interface FlowFunctions<Stmt, F extends FieldSensitiveFact, Method> {





public interface FlowFunctions<Stmt, F extends FieldSensitiveFact<?, F>, Method> {





















 /**





 /**







	 * Returns the flow function that computes the flow for a normal statement,





	 * Returns the flow function that computes the flow for a normal statement,



...@@ -43,9 +42,6 @@ public interface FlowFunctions<Stmt, F extends FieldSensitiveFact, Method> {
...@@ -43,9 +42,6 @@ public interface FlowFunctions<Stmt, F extends FieldSensitiveFact, Method> {






	 */





	 */







 public FlowFunction<F> getNormalFlowFunction(Stmt curr, Stmt succ);





 public FlowFunction<F> getNormalFlowFunction(Stmt curr, Stmt succ);





















 public FieldReference getReadFieldReference(Stmt curr);









 









 public FieldReference getWrittenFieldReference(Stmt curr);









 





 







 /**





 /**







	 * Returns the flow function that computes the flow for a call statement.





	 * Returns the flow function that computes the flow for a call statement.



......






...@@ -11,7 +11,6 @@
...@@ -11,7 +11,6 @@






 ******************************************************************************/





 ******************************************************************************/







package heros.alias;





package heros.alias;





















import heros.FlowFunction;























/**





/**







 * Classes implementing this interface provide a factory for a 





 * Classes implementing this interface provide a factory for a 



...@@ -28,7 +27,7 @@ import heros.FlowFunction;
...@@ -28,7 +27,7 @@ import heros.FlowFunction;






 *            The type of objects used to represent methods. Typically





 *            The type of objects used to represent methods. Typically







 *            {@link SootMethod}.





 *            {@link SootMethod}.







 */





 */







public interface FlowFunctions<Stmt, F extends FieldSensitiveFact, Method> {





public interface FlowFunctions<Stmt, F extends FieldSensitiveFact<?, F>, Method> {





















 /**





 /**







	 * Returns the flow function that computes the flow for a normal statement,





	 * Returns the flow function that computes the flow for a normal statement,



...@@ -43,9 +42,6 @@ public interface FlowFunctions<Stmt, F extends FieldSensitiveFact, Method> {
...@@ -43,9 +42,6 @@ public interface FlowFunctions<Stmt, F extends FieldSensitiveFact, Method> {






	 */





	 */







 public FlowFunction<F> getNormalFlowFunction(Stmt curr, Stmt succ);





 public FlowFunction<F> getNormalFlowFunction(Stmt curr, Stmt succ);





















 public FieldReference getReadFieldReference(Stmt curr);









 









 public FieldReference getWrittenFieldReference(Stmt curr);









 





 







 /**





 /**







	 * Returns the flow function that computes the flow for a call statement.





	 * Returns the flow function that computes the flow for a call statement.



......


 ******************************************************************************/ ******************************************************************************/ ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;package heros.alias;packageheros.alias;import heros.FlowFunction;importheros.FlowFunction;/**/**/**/** * Classes implementing this interface provide a factory for a  * Classes implementing this interface provide a factory for a  * Classes implementing this interface provide a factory for a  * Classes implementing this interface provide a factory for a  *            The type of objects used to represent methods. Typically *            The type of objects used to represent methods. Typically *            The type of objects used to represent methods. Typically *            The type of objects used to represent methods. Typically *            {@link SootMethod}. *            {@link SootMethod}. *            {@link SootMethod}. *            {@link SootMethod}. */ */ */ */public interface FlowFunctions<Stmt, F extends FieldSensitiveFact, Method> {publicinterfaceFlowFunctions<Stmt,FextendsFieldSensitiveFact,Method>{public interface FlowFunctions<Stmt, F extends FieldSensitiveFact<?, F>, Method> {publicinterfaceFlowFunctions<Stmt,FextendsFieldSensitiveFact<?,<?, FF>,>Method>{ /**/** /**/**	 * Returns the flow function that computes the flow for a normal statement,	 * Returns the flow function that computes the flow for a normal statement,	 * Returns the flow function that computes the flow for a normal statement,	 * Returns the flow function that computes the flow for a normal statement,	 */	 */	 */	 */ public FlowFunction<F> getNormalFlowFunction(Stmt curr, Stmt succ);publicFlowFunction<F>getNormalFlowFunction(Stmtcurr,Stmtsucc); public FlowFunction<F> getNormalFlowFunction(Stmt curr, Stmt succ);publicFlowFunction<F>getNormalFlowFunction(Stmtcurr,Stmtsucc); public FieldReference getReadFieldReference(Stmt curr);publicFieldReferencegetReadFieldReference(Stmtcurr);  public FieldReference getWrittenFieldReference(Stmt curr);publicFieldReferencegetWrittenFieldReference(Stmtcurr);   /**/** /**/**	 * Returns the flow function that computes the flow for a call statement.	 * Returns the flow function that computes the flow for a call statement.	 * Returns the flow function that computes the flow for a call statement.	 * Returns the flow function that computes the flow for a call statement.








test/heros/alias/FieldSensitiveSolverTest.java








View file @ 9176fc7c








...@@ -95,8 +95,8 @@ public class FieldSensitiveSolverTest {
...@@ -95,8 +95,8 @@ public class FieldSensitiveSolverTest {






 callSite("c").calls("foo", flow("2.field", "3.field")));





 callSite("c").calls("foo", flow("2.field", "3.field")));







 





 







 helper.method("foo",startPoints("d"),





 helper.method("foo",startPoints("d"),







 readFieldStmt("d", "notfield").succ("e", flow("3", "3"), kill("3.notfield")),





 readFieldStmt("d", "notfield").succ("e", flow("3", "3")),







 normalStmt("e").succ("f", flow("3","4")));





 normalStmt("e").succ("f", flow("3","4"), kill("3.notfield")));







 





 







 helper.method("xyz",





 helper.method("xyz",







 startPoints("g"),





 startPoints("g"),



......













test/heros/alias/FieldSensitiveSolverTest.java








View file @ 9176fc7c








test/heros/alias/FieldSensitiveSolverTest.java










View file @ 9176fc7c


9176fc7c





...@@ -95,8 +95,8 @@ public class FieldSensitiveSolverTest {
...@@ -95,8 +95,8 @@ public class FieldSensitiveSolverTest {






 callSite("c").calls("foo", flow("2.field", "3.field")));





 callSite("c").calls("foo", flow("2.field", "3.field")));







 





 







 helper.method("foo",startPoints("d"),





 helper.method("foo",startPoints("d"),







 readFieldStmt("d", "notfield").succ("e", flow("3", "3"), kill("3.notfield")),





 readFieldStmt("d", "notfield").succ("e", flow("3", "3")),







 normalStmt("e").succ("f", flow("3","4")));





 normalStmt("e").succ("f", flow("3","4"), kill("3.notfield")));







 





 







 helper.method("xyz",





 helper.method("xyz",







 startPoints("g"),





 startPoints("g"),



......









...@@ -95,8 +95,8 @@ public class FieldSensitiveSolverTest {
...@@ -95,8 +95,8 @@ public class FieldSensitiveSolverTest {






 callSite("c").calls("foo", flow("2.field", "3.field")));





 callSite("c").calls("foo", flow("2.field", "3.field")));







 





 







 helper.method("foo",startPoints("d"),





 helper.method("foo",startPoints("d"),







 readFieldStmt("d", "notfield").succ("e", flow("3", "3"), kill("3.notfield")),





 readFieldStmt("d", "notfield").succ("e", flow("3", "3")),







 normalStmt("e").succ("f", flow("3","4")));





 normalStmt("e").succ("f", flow("3","4"), kill("3.notfield")));







 





 







 helper.method("xyz",





 helper.method("xyz",







 startPoints("g"),





 startPoints("g"),



......






...@@ -95,8 +95,8 @@ public class FieldSensitiveSolverTest {
...@@ -95,8 +95,8 @@ public class FieldSensitiveSolverTest {






 callSite("c").calls("foo", flow("2.field", "3.field")));





 callSite("c").calls("foo", flow("2.field", "3.field")));







 





 







 helper.method("foo",startPoints("d"),





 helper.method("foo",startPoints("d"),







 readFieldStmt("d", "notfield").succ("e", flow("3", "3"), kill("3.notfield")),





 readFieldStmt("d", "notfield").succ("e", flow("3", "3")),







 normalStmt("e").succ("f", flow("3","4")));





 normalStmt("e").succ("f", flow("3","4"), kill("3.notfield")));







 





 







 helper.method("xyz",





 helper.method("xyz",







 startPoints("g"),





 startPoints("g"),



......


 callSite("c").calls("foo", flow("2.field", "3.field")));callSite("c").calls("foo",flow("2.field","3.field"))); callSite("c").calls("foo", flow("2.field", "3.field")));callSite("c").calls("foo",flow("2.field","3.field")));   helper.method("foo",startPoints("d"),helper.method("foo",startPoints("d"), helper.method("foo",startPoints("d"),helper.method("foo",startPoints("d"), readFieldStmt("d", "notfield").succ("e", flow("3", "3"), kill("3.notfield")),readFieldStmt("d","notfield").succ("e",flow("3","3"),, killkill(("3.notfield""3.notfield")),) readFieldStmt("d", "notfield").succ("e", flow("3", "3")),readFieldStmt("d","notfield").succ("e",flow("3","3")), normalStmt("e").succ("f", flow("3","4")));normalStmt("e").succ("f",flow("3","4"))); normalStmt("e").succ("f", flow("3","4"), kill("3.notfield")));normalStmt("e").succ("f",flow("3","4"),, killkill(("3.notfield""3.notfield")));)   helper.method("xyz",helper.method("xyz", helper.method("xyz",helper.method("xyz", startPoints("g"),startPoints("g"), startPoints("g"),startPoints("g"),









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






