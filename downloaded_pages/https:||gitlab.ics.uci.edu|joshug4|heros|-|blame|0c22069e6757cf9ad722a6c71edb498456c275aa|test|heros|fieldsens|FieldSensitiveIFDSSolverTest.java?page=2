



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab






Sign in




Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab






Sign in




Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab






Sign in




Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros

0c22069e6757cf9ad722a6c71edb498456c275aa

















0c22069e6757cf9ad722a6c71edb498456c275aa


Switch branch/tag










heros


test


heros


fieldsens


FieldSensitiveIFDSSolverTest.java



Find file
Normal viewHistoryPermalink






FieldSensitiveIFDSSolverTest.java



37.1 KB









Newer










Older









abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1001


1002


1003



		helper.method("bar",
				startPoints("c"),
				callSite("c").calls("xyz", flow("1", "1")).retSite("d", kill("1")),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1004


1005



				normalStmt("d", flow("1", overwriteField("f"), "1")).succ("e"),
				exitStmt("e").returns(over("b"), to("f"), flow("1", "2")));








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1006


1007


1008


1009


1010


1011


1012


1013


1014


1015


1016


1017



		
		helper.method("xyz",
				startPoints("x"),
				exitStmt("x").returns(over("c"), to("d"), flow("1", "1")));
		
		helper.runSolver(false, "a");
	}

	@Test
	public void unbalancedUseIncompatibleReturnResolver() {
		helper.method("foo",
				startPoints("a"),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1018



				normalStmt("a", flow("0", "1")).succ("b"),








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1019


1020


1021


1022



				exitStmt("b").returns(over("cs"), to("c"), flow("1", "1")));
		
		helper.method("bar",
				startPoints("unused1"),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1023


1024


1025



				normalStmt("cs").succ("c"),
				normalStmt("c", flow("1", readField("g"), "1")).succ("d"),
				normalStmt("d", flow("1", overwriteField("f"), "2")).succ("e"),








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1026


1027


1028


1029



				exitStmt("e").returns(over("cs2"), to("f"), flow("2", "2")));
		
		helper.method("xyz",
				startPoints("unused2"),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1030


1031



				normalStmt("cs2").succ("f"),
				normalStmt("f", flow("2", readField("f"), "3")).succ("g"),








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1032


1033


1034


1035



				normalStmt("g").succ("h"));
				
		helper.runSolver(true, "a");
	}








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1036


1037


1038


1039


1040


1041


1042


1043


1044


1045


1046


1047


1048


1049


1050


1051


1052


1053


1054


1055


1056


1057


1058


1059


1060


1061


1062


1063


1064


1065


1066


1067


1068


1069


1070


1071


1072


1073


1074


1075


1076


1077


1078


1079


1080


1081


1082


1083


1084


1085


1086


1087


1088


1089


1090


1091


1092


1093


1094


1095


1096


1097


1098


1099


1100


1101


1102


1103


1104


1105


1106


1107


1108


1109


1110


1111


1112


1113


1114


1115


1116


1117


1118


1119


1120


1121


1122


1123


1124


1125


1126


1127


1128


1129


1130


1131


1132


1133


1134


1135


1136


1137


1138


1139


1140


1141


1142


1143


1144


1145


1146


1147


1148


1149


1150


1151


1152


1153


1154


1155


1156


1157


1158


1159


1160


1161


1162


1163


1164


1165


1166


1167


1168


1169


1170


1171


1172


1173


1174


1175


1176


1177




	@Test
	public void recursiveReadField() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField2() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				callSite("e").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField3() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				normalStmt("e", flow("1", readField("g"), "1")).succ("f"),
				callSite("f").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField4() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b1"),
				callSite("b1").calls("bar", flow("1", "1")).retSite("b2", flow("1", "1")),
				callSite("b2").calls("xyz", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				normalStmt("e", flow("1", readField("g"), "1")).succ("f"),
				callSite("f").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", readField("f"), "1")).succ("b").succ("c"),
				normalStmt("c", kill("1")).succ("d"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField2() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),
				normalStmt("c1", flow("1", readField("f"), "1")).succ("b").succ("d"),
				normalStmt("c2", flow("1", readField("g"), "1")).succ("b").succ("d"),
				normalStmt("d", kill("1")).succ("e"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField3() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),
				normalStmt("c1", flow("1", readField("f"), "1")).succ("d"),
				normalStmt("c2", flow("1", readField("g"), "1")).succ("d"),
				normalStmt("d", flow("1", "1")).succ("e").succ("b"),
				normalStmt("e", kill("1")).succ("f"));
		
		helper.runSolver(false, "a");
	}

	@Test
	public void recursiveReturn() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "2")));
		
		helper.method("bar",
				startPoints("c"),
				callSite("c").calls("bar", flow("2", "2")).retSite("d", flow("2", "2")),
				normalStmt("d", flow(2, "2", "2")).succ("e").succ("f"),
				exitStmt("e").returns(over("c"), to("d"), flow(2, "2", "2")),
				normalStmt("f", flow(2, "2", readField("f"), "3")).succ("g"),
				normalStmt("g", kill("3")).succ("h"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void joinStmtIsCallSite() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", kill(2,"1")).retSite("c", flow("1", "1")),
				normalStmt("c", flow("1", prependField("f"), "1")).succ("b"));
		
		helper.runSolver(false, "a");
	}








Bugfix in FieldSens IFDS Solver

 


Johannes Lerch
committed
Jul 06, 2015




1178


1179


1180


1181


1182


1183


1184


1185


1186


1187


1188


1189


1190


1191


1192


1193


1194


1195



	
	@Test
	public void readMultipleAbstractedFields() {
		helper.method("foo",
			startPoints("a"),
			normalStmt("a", flow("0", prependField("f"), "1")).succ("b1").succ("b2"),
			normalStmt("b1", kill("1")).succ("c"),
			normalStmt("b2", flow("1", prependField("g"), "1")).succ("c"),
			normalStmt("c", flow("1", "2")).succ("d"),
			normalStmt("d", flow("2", "2")).succ("e1").succ("e2"),
			normalStmt("e1", flow("2", "3")).succ("f"),
			normalStmt("e2", kill("2")).succ("f"),
			normalStmt("f", flow("3", readField("g"), "4")).succ("g"),
			normalStmt("g", flow("4", readField("f"), "5")).succ("h"),
			normalStmt("h", kill("5")).succ("i"));
		
		helper.runSolver(false, "a");
	}








FieldSensitiveIFDSSolver - concept outline



Johannes Späth
committed
Oct 15, 2014




1196



}






For faster browsing, not all history is shown.

View entire blame








Prev


1


2


Next











H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros

0c22069e6757cf9ad722a6c71edb498456c275aa

















0c22069e6757cf9ad722a6c71edb498456c275aa


Switch branch/tag










heros


test


heros


fieldsens


FieldSensitiveIFDSSolverTest.java



Find file
Normal viewHistoryPermalink






FieldSensitiveIFDSSolverTest.java



37.1 KB









Newer










Older









abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1001


1002


1003



		helper.method("bar",
				startPoints("c"),
				callSite("c").calls("xyz", flow("1", "1")).retSite("d", kill("1")),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1004


1005



				normalStmt("d", flow("1", overwriteField("f"), "1")).succ("e"),
				exitStmt("e").returns(over("b"), to("f"), flow("1", "2")));








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1006


1007


1008


1009


1010


1011


1012


1013


1014


1015


1016


1017



		
		helper.method("xyz",
				startPoints("x"),
				exitStmt("x").returns(over("c"), to("d"), flow("1", "1")));
		
		helper.runSolver(false, "a");
	}

	@Test
	public void unbalancedUseIncompatibleReturnResolver() {
		helper.method("foo",
				startPoints("a"),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1018



				normalStmt("a", flow("0", "1")).succ("b"),








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1019


1020


1021


1022



				exitStmt("b").returns(over("cs"), to("c"), flow("1", "1")));
		
		helper.method("bar",
				startPoints("unused1"),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1023


1024


1025



				normalStmt("cs").succ("c"),
				normalStmt("c", flow("1", readField("g"), "1")).succ("d"),
				normalStmt("d", flow("1", overwriteField("f"), "2")).succ("e"),








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1026


1027


1028


1029



				exitStmt("e").returns(over("cs2"), to("f"), flow("2", "2")));
		
		helper.method("xyz",
				startPoints("unused2"),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1030


1031



				normalStmt("cs2").succ("f"),
				normalStmt("f", flow("2", readField("f"), "3")).succ("g"),








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1032


1033


1034


1035



				normalStmt("g").succ("h"));
				
		helper.runSolver(true, "a");
	}








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1036


1037


1038


1039


1040


1041


1042


1043


1044


1045


1046


1047


1048


1049


1050


1051


1052


1053


1054


1055


1056


1057


1058


1059


1060


1061


1062


1063


1064


1065


1066


1067


1068


1069


1070


1071


1072


1073


1074


1075


1076


1077


1078


1079


1080


1081


1082


1083


1084


1085


1086


1087


1088


1089


1090


1091


1092


1093


1094


1095


1096


1097


1098


1099


1100


1101


1102


1103


1104


1105


1106


1107


1108


1109


1110


1111


1112


1113


1114


1115


1116


1117


1118


1119


1120


1121


1122


1123


1124


1125


1126


1127


1128


1129


1130


1131


1132


1133


1134


1135


1136


1137


1138


1139


1140


1141


1142


1143


1144


1145


1146


1147


1148


1149


1150


1151


1152


1153


1154


1155


1156


1157


1158


1159


1160


1161


1162


1163


1164


1165


1166


1167


1168


1169


1170


1171


1172


1173


1174


1175


1176


1177




	@Test
	public void recursiveReadField() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField2() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				callSite("e").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField3() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				normalStmt("e", flow("1", readField("g"), "1")).succ("f"),
				callSite("f").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField4() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b1"),
				callSite("b1").calls("bar", flow("1", "1")).retSite("b2", flow("1", "1")),
				callSite("b2").calls("xyz", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				normalStmt("e", flow("1", readField("g"), "1")).succ("f"),
				callSite("f").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", readField("f"), "1")).succ("b").succ("c"),
				normalStmt("c", kill("1")).succ("d"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField2() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),
				normalStmt("c1", flow("1", readField("f"), "1")).succ("b").succ("d"),
				normalStmt("c2", flow("1", readField("g"), "1")).succ("b").succ("d"),
				normalStmt("d", kill("1")).succ("e"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField3() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),
				normalStmt("c1", flow("1", readField("f"), "1")).succ("d"),
				normalStmt("c2", flow("1", readField("g"), "1")).succ("d"),
				normalStmt("d", flow("1", "1")).succ("e").succ("b"),
				normalStmt("e", kill("1")).succ("f"));
		
		helper.runSolver(false, "a");
	}

	@Test
	public void recursiveReturn() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "2")));
		
		helper.method("bar",
				startPoints("c"),
				callSite("c").calls("bar", flow("2", "2")).retSite("d", flow("2", "2")),
				normalStmt("d", flow(2, "2", "2")).succ("e").succ("f"),
				exitStmt("e").returns(over("c"), to("d"), flow(2, "2", "2")),
				normalStmt("f", flow(2, "2", readField("f"), "3")).succ("g"),
				normalStmt("g", kill("3")).succ("h"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void joinStmtIsCallSite() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", kill(2,"1")).retSite("c", flow("1", "1")),
				normalStmt("c", flow("1", prependField("f"), "1")).succ("b"));
		
		helper.runSolver(false, "a");
	}








Bugfix in FieldSens IFDS Solver

 


Johannes Lerch
committed
Jul 06, 2015




1178


1179


1180


1181


1182


1183


1184


1185


1186


1187


1188


1189


1190


1191


1192


1193


1194


1195



	
	@Test
	public void readMultipleAbstractedFields() {
		helper.method("foo",
			startPoints("a"),
			normalStmt("a", flow("0", prependField("f"), "1")).succ("b1").succ("b2"),
			normalStmt("b1", kill("1")).succ("c"),
			normalStmt("b2", flow("1", prependField("g"), "1")).succ("c"),
			normalStmt("c", flow("1", "2")).succ("d"),
			normalStmt("d", flow("2", "2")).succ("e1").succ("e2"),
			normalStmt("e1", flow("2", "3")).succ("f"),
			normalStmt("e2", kill("2")).succ("f"),
			normalStmt("f", flow("3", readField("g"), "4")).succ("g"),
			normalStmt("g", flow("4", readField("f"), "5")).succ("h"),
			normalStmt("h", kill("5")).succ("i"));
		
		helper.runSolver(false, "a");
	}








FieldSensitiveIFDSSolver - concept outline



Johannes Späth
committed
Oct 15, 2014




1196



}






For faster browsing, not all history is shown.

View entire blame








Prev


1


2


Next










Open sidebar



Joshua Garcia heros

0c22069e6757cf9ad722a6c71edb498456c275aa







Open sidebar



Joshua Garcia heros

0c22069e6757cf9ad722a6c71edb498456c275aa




Open sidebar

Joshua Garcia heros

0c22069e6757cf9ad722a6c71edb498456c275aa


Joshua Garciaherosheros
0c22069e6757cf9ad722a6c71edb498456c275aa










0c22069e6757cf9ad722a6c71edb498456c275aa


Switch branch/tag










heros


test


heros


fieldsens


FieldSensitiveIFDSSolverTest.java



Find file
Normal viewHistoryPermalink






FieldSensitiveIFDSSolverTest.java



37.1 KB









Newer










Older









abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1001


1002


1003



		helper.method("bar",
				startPoints("c"),
				callSite("c").calls("xyz", flow("1", "1")).retSite("d", kill("1")),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1004


1005



				normalStmt("d", flow("1", overwriteField("f"), "1")).succ("e"),
				exitStmt("e").returns(over("b"), to("f"), flow("1", "2")));








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1006


1007


1008


1009


1010


1011


1012


1013


1014


1015


1016


1017



		
		helper.method("xyz",
				startPoints("x"),
				exitStmt("x").returns(over("c"), to("d"), flow("1", "1")));
		
		helper.runSolver(false, "a");
	}

	@Test
	public void unbalancedUseIncompatibleReturnResolver() {
		helper.method("foo",
				startPoints("a"),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1018



				normalStmt("a", flow("0", "1")).succ("b"),








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1019


1020


1021


1022



				exitStmt("b").returns(over("cs"), to("c"), flow("1", "1")));
		
		helper.method("bar",
				startPoints("unused1"),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1023


1024


1025



				normalStmt("cs").succ("c"),
				normalStmt("c", flow("1", readField("g"), "1")).succ("d"),
				normalStmt("d", flow("1", overwriteField("f"), "2")).succ("e"),








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1026


1027


1028


1029



				exitStmt("e").returns(over("cs2"), to("f"), flow("2", "2")));
		
		helper.method("xyz",
				startPoints("unused2"),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1030


1031



				normalStmt("cs2").succ("f"),
				normalStmt("f", flow("2", readField("f"), "3")).succ("g"),








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1032


1033


1034


1035



				normalStmt("g").succ("h"));
				
		helper.runSolver(true, "a");
	}








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1036


1037


1038


1039


1040


1041


1042


1043


1044


1045


1046


1047


1048


1049


1050


1051


1052


1053


1054


1055


1056


1057


1058


1059


1060


1061


1062


1063


1064


1065


1066


1067


1068


1069


1070


1071


1072


1073


1074


1075


1076


1077


1078


1079


1080


1081


1082


1083


1084


1085


1086


1087


1088


1089


1090


1091


1092


1093


1094


1095


1096


1097


1098


1099


1100


1101


1102


1103


1104


1105


1106


1107


1108


1109


1110


1111


1112


1113


1114


1115


1116


1117


1118


1119


1120


1121


1122


1123


1124


1125


1126


1127


1128


1129


1130


1131


1132


1133


1134


1135


1136


1137


1138


1139


1140


1141


1142


1143


1144


1145


1146


1147


1148


1149


1150


1151


1152


1153


1154


1155


1156


1157


1158


1159


1160


1161


1162


1163


1164


1165


1166


1167


1168


1169


1170


1171


1172


1173


1174


1175


1176


1177




	@Test
	public void recursiveReadField() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField2() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				callSite("e").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField3() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				normalStmt("e", flow("1", readField("g"), "1")).succ("f"),
				callSite("f").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField4() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b1"),
				callSite("b1").calls("bar", flow("1", "1")).retSite("b2", flow("1", "1")),
				callSite("b2").calls("xyz", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				normalStmt("e", flow("1", readField("g"), "1")).succ("f"),
				callSite("f").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", readField("f"), "1")).succ("b").succ("c"),
				normalStmt("c", kill("1")).succ("d"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField2() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),
				normalStmt("c1", flow("1", readField("f"), "1")).succ("b").succ("d"),
				normalStmt("c2", flow("1", readField("g"), "1")).succ("b").succ("d"),
				normalStmt("d", kill("1")).succ("e"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField3() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),
				normalStmt("c1", flow("1", readField("f"), "1")).succ("d"),
				normalStmt("c2", flow("1", readField("g"), "1")).succ("d"),
				normalStmt("d", flow("1", "1")).succ("e").succ("b"),
				normalStmt("e", kill("1")).succ("f"));
		
		helper.runSolver(false, "a");
	}

	@Test
	public void recursiveReturn() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "2")));
		
		helper.method("bar",
				startPoints("c"),
				callSite("c").calls("bar", flow("2", "2")).retSite("d", flow("2", "2")),
				normalStmt("d", flow(2, "2", "2")).succ("e").succ("f"),
				exitStmt("e").returns(over("c"), to("d"), flow(2, "2", "2")),
				normalStmt("f", flow(2, "2", readField("f"), "3")).succ("g"),
				normalStmt("g", kill("3")).succ("h"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void joinStmtIsCallSite() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", kill(2,"1")).retSite("c", flow("1", "1")),
				normalStmt("c", flow("1", prependField("f"), "1")).succ("b"));
		
		helper.runSolver(false, "a");
	}








Bugfix in FieldSens IFDS Solver

 


Johannes Lerch
committed
Jul 06, 2015




1178


1179


1180


1181


1182


1183


1184


1185


1186


1187


1188


1189


1190


1191


1192


1193


1194


1195



	
	@Test
	public void readMultipleAbstractedFields() {
		helper.method("foo",
			startPoints("a"),
			normalStmt("a", flow("0", prependField("f"), "1")).succ("b1").succ("b2"),
			normalStmt("b1", kill("1")).succ("c"),
			normalStmt("b2", flow("1", prependField("g"), "1")).succ("c"),
			normalStmt("c", flow("1", "2")).succ("d"),
			normalStmt("d", flow("2", "2")).succ("e1").succ("e2"),
			normalStmt("e1", flow("2", "3")).succ("f"),
			normalStmt("e2", kill("2")).succ("f"),
			normalStmt("f", flow("3", readField("g"), "4")).succ("g"),
			normalStmt("g", flow("4", readField("f"), "5")).succ("h"),
			normalStmt("h", kill("5")).succ("i"));
		
		helper.runSolver(false, "a");
	}








FieldSensitiveIFDSSolver - concept outline



Johannes Späth
committed
Oct 15, 2014




1196



}






For faster browsing, not all history is shown.

View entire blame








Prev


1


2


Next













0c22069e6757cf9ad722a6c71edb498456c275aa


Switch branch/tag










heros


test


heros


fieldsens


FieldSensitiveIFDSSolverTest.java



Find file
Normal viewHistoryPermalink






FieldSensitiveIFDSSolverTest.java



37.1 KB









Newer










Older









abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1001


1002


1003



		helper.method("bar",
				startPoints("c"),
				callSite("c").calls("xyz", flow("1", "1")).retSite("d", kill("1")),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1004


1005



				normalStmt("d", flow("1", overwriteField("f"), "1")).succ("e"),
				exitStmt("e").returns(over("b"), to("f"), flow("1", "2")));








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1006


1007


1008


1009


1010


1011


1012


1013


1014


1015


1016


1017



		
		helper.method("xyz",
				startPoints("x"),
				exitStmt("x").returns(over("c"), to("d"), flow("1", "1")));
		
		helper.runSolver(false, "a");
	}

	@Test
	public void unbalancedUseIncompatibleReturnResolver() {
		helper.method("foo",
				startPoints("a"),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1018



				normalStmt("a", flow("0", "1")).succ("b"),








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1019


1020


1021


1022



				exitStmt("b").returns(over("cs"), to("c"), flow("1", "1")));
		
		helper.method("bar",
				startPoints("unused1"),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1023


1024


1025



				normalStmt("cs").succ("c"),
				normalStmt("c", flow("1", readField("g"), "1")).succ("d"),
				normalStmt("d", flow("1", overwriteField("f"), "2")).succ("e"),








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1026


1027


1028


1029



				exitStmt("e").returns(over("cs2"), to("f"), flow("2", "2")));
		
		helper.method("xyz",
				startPoints("unused2"),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1030


1031



				normalStmt("cs2").succ("f"),
				normalStmt("f", flow("2", readField("f"), "3")).succ("g"),








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1032


1033


1034


1035



				normalStmt("g").succ("h"));
				
		helper.runSolver(true, "a");
	}








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1036


1037


1038


1039


1040


1041


1042


1043


1044


1045


1046


1047


1048


1049


1050


1051


1052


1053


1054


1055


1056


1057


1058


1059


1060


1061


1062


1063


1064


1065


1066


1067


1068


1069


1070


1071


1072


1073


1074


1075


1076


1077


1078


1079


1080


1081


1082


1083


1084


1085


1086


1087


1088


1089


1090


1091


1092


1093


1094


1095


1096


1097


1098


1099


1100


1101


1102


1103


1104


1105


1106


1107


1108


1109


1110


1111


1112


1113


1114


1115


1116


1117


1118


1119


1120


1121


1122


1123


1124


1125


1126


1127


1128


1129


1130


1131


1132


1133


1134


1135


1136


1137


1138


1139


1140


1141


1142


1143


1144


1145


1146


1147


1148


1149


1150


1151


1152


1153


1154


1155


1156


1157


1158


1159


1160


1161


1162


1163


1164


1165


1166


1167


1168


1169


1170


1171


1172


1173


1174


1175


1176


1177




	@Test
	public void recursiveReadField() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField2() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				callSite("e").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField3() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				normalStmt("e", flow("1", readField("g"), "1")).succ("f"),
				callSite("f").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField4() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b1"),
				callSite("b1").calls("bar", flow("1", "1")).retSite("b2", flow("1", "1")),
				callSite("b2").calls("xyz", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				normalStmt("e", flow("1", readField("g"), "1")).succ("f"),
				callSite("f").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", readField("f"), "1")).succ("b").succ("c"),
				normalStmt("c", kill("1")).succ("d"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField2() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),
				normalStmt("c1", flow("1", readField("f"), "1")).succ("b").succ("d"),
				normalStmt("c2", flow("1", readField("g"), "1")).succ("b").succ("d"),
				normalStmt("d", kill("1")).succ("e"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField3() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),
				normalStmt("c1", flow("1", readField("f"), "1")).succ("d"),
				normalStmt("c2", flow("1", readField("g"), "1")).succ("d"),
				normalStmt("d", flow("1", "1")).succ("e").succ("b"),
				normalStmt("e", kill("1")).succ("f"));
		
		helper.runSolver(false, "a");
	}

	@Test
	public void recursiveReturn() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "2")));
		
		helper.method("bar",
				startPoints("c"),
				callSite("c").calls("bar", flow("2", "2")).retSite("d", flow("2", "2")),
				normalStmt("d", flow(2, "2", "2")).succ("e").succ("f"),
				exitStmt("e").returns(over("c"), to("d"), flow(2, "2", "2")),
				normalStmt("f", flow(2, "2", readField("f"), "3")).succ("g"),
				normalStmt("g", kill("3")).succ("h"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void joinStmtIsCallSite() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", kill(2,"1")).retSite("c", flow("1", "1")),
				normalStmt("c", flow("1", prependField("f"), "1")).succ("b"));
		
		helper.runSolver(false, "a");
	}








Bugfix in FieldSens IFDS Solver

 


Johannes Lerch
committed
Jul 06, 2015




1178


1179


1180


1181


1182


1183


1184


1185


1186


1187


1188


1189


1190


1191


1192


1193


1194


1195



	
	@Test
	public void readMultipleAbstractedFields() {
		helper.method("foo",
			startPoints("a"),
			normalStmt("a", flow("0", prependField("f"), "1")).succ("b1").succ("b2"),
			normalStmt("b1", kill("1")).succ("c"),
			normalStmt("b2", flow("1", prependField("g"), "1")).succ("c"),
			normalStmt("c", flow("1", "2")).succ("d"),
			normalStmt("d", flow("2", "2")).succ("e1").succ("e2"),
			normalStmt("e1", flow("2", "3")).succ("f"),
			normalStmt("e2", kill("2")).succ("f"),
			normalStmt("f", flow("3", readField("g"), "4")).succ("g"),
			normalStmt("g", flow("4", readField("f"), "5")).succ("h"),
			normalStmt("h", kill("5")).succ("i"));
		
		helper.runSolver(false, "a");
	}








FieldSensitiveIFDSSolver - concept outline



Johannes Späth
committed
Oct 15, 2014




1196



}






For faster browsing, not all history is shown.

View entire blame








Prev


1


2


Next









0c22069e6757cf9ad722a6c71edb498456c275aa


Switch branch/tag










heros


test


heros


fieldsens


FieldSensitiveIFDSSolverTest.java



Find file
Normal viewHistoryPermalink




0c22069e6757cf9ad722a6c71edb498456c275aa


Switch branch/tag










heros


test


heros


fieldsens


FieldSensitiveIFDSSolverTest.java





0c22069e6757cf9ad722a6c71edb498456c275aa


Switch branch/tag








0c22069e6757cf9ad722a6c71edb498456c275aa


Switch branch/tag





0c22069e6757cf9ad722a6c71edb498456c275aa

Switch branch/tag





Switch branch/tag



Switch branch/tagSwitch branch/tag
heros

test

heros

fieldsens

FieldSensitiveIFDSSolverTest.java
Find file
Normal viewHistoryPermalink




FieldSensitiveIFDSSolverTest.java



37.1 KB









Newer










Older









abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1001


1002


1003



		helper.method("bar",
				startPoints("c"),
				callSite("c").calls("xyz", flow("1", "1")).retSite("d", kill("1")),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1004


1005



				normalStmt("d", flow("1", overwriteField("f"), "1")).succ("e"),
				exitStmt("e").returns(over("b"), to("f"), flow("1", "2")));








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1006


1007


1008


1009


1010


1011


1012


1013


1014


1015


1016


1017



		
		helper.method("xyz",
				startPoints("x"),
				exitStmt("x").returns(over("c"), to("d"), flow("1", "1")));
		
		helper.runSolver(false, "a");
	}

	@Test
	public void unbalancedUseIncompatibleReturnResolver() {
		helper.method("foo",
				startPoints("a"),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1018



				normalStmt("a", flow("0", "1")).succ("b"),








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1019


1020


1021


1022



				exitStmt("b").returns(over("cs"), to("c"), flow("1", "1")));
		
		helper.method("bar",
				startPoints("unused1"),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1023


1024


1025



				normalStmt("cs").succ("c"),
				normalStmt("c", flow("1", readField("g"), "1")).succ("d"),
				normalStmt("d", flow("1", overwriteField("f"), "2")).succ("e"),








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1026


1027


1028


1029



				exitStmt("e").returns(over("cs2"), to("f"), flow("2", "2")));
		
		helper.method("xyz",
				startPoints("unused2"),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1030


1031



				normalStmt("cs2").succ("f"),
				normalStmt("f", flow("2", readField("f"), "3")).succ("g"),








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1032


1033


1034


1035



				normalStmt("g").succ("h"));
				
		helper.runSolver(true, "a");
	}








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1036


1037


1038


1039


1040


1041


1042


1043


1044


1045


1046


1047


1048


1049


1050


1051


1052


1053


1054


1055


1056


1057


1058


1059


1060


1061


1062


1063


1064


1065


1066


1067


1068


1069


1070


1071


1072


1073


1074


1075


1076


1077


1078


1079


1080


1081


1082


1083


1084


1085


1086


1087


1088


1089


1090


1091


1092


1093


1094


1095


1096


1097


1098


1099


1100


1101


1102


1103


1104


1105


1106


1107


1108


1109


1110


1111


1112


1113


1114


1115


1116


1117


1118


1119


1120


1121


1122


1123


1124


1125


1126


1127


1128


1129


1130


1131


1132


1133


1134


1135


1136


1137


1138


1139


1140


1141


1142


1143


1144


1145


1146


1147


1148


1149


1150


1151


1152


1153


1154


1155


1156


1157


1158


1159


1160


1161


1162


1163


1164


1165


1166


1167


1168


1169


1170


1171


1172


1173


1174


1175


1176


1177




	@Test
	public void recursiveReadField() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField2() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				callSite("e").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField3() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				normalStmt("e", flow("1", readField("g"), "1")).succ("f"),
				callSite("f").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField4() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b1"),
				callSite("b1").calls("bar", flow("1", "1")).retSite("b2", flow("1", "1")),
				callSite("b2").calls("xyz", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				normalStmt("e", flow("1", readField("g"), "1")).succ("f"),
				callSite("f").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", readField("f"), "1")).succ("b").succ("c"),
				normalStmt("c", kill("1")).succ("d"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField2() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),
				normalStmt("c1", flow("1", readField("f"), "1")).succ("b").succ("d"),
				normalStmt("c2", flow("1", readField("g"), "1")).succ("b").succ("d"),
				normalStmt("d", kill("1")).succ("e"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField3() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),
				normalStmt("c1", flow("1", readField("f"), "1")).succ("d"),
				normalStmt("c2", flow("1", readField("g"), "1")).succ("d"),
				normalStmt("d", flow("1", "1")).succ("e").succ("b"),
				normalStmt("e", kill("1")).succ("f"));
		
		helper.runSolver(false, "a");
	}

	@Test
	public void recursiveReturn() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "2")));
		
		helper.method("bar",
				startPoints("c"),
				callSite("c").calls("bar", flow("2", "2")).retSite("d", flow("2", "2")),
				normalStmt("d", flow(2, "2", "2")).succ("e").succ("f"),
				exitStmt("e").returns(over("c"), to("d"), flow(2, "2", "2")),
				normalStmt("f", flow(2, "2", readField("f"), "3")).succ("g"),
				normalStmt("g", kill("3")).succ("h"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void joinStmtIsCallSite() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", kill(2,"1")).retSite("c", flow("1", "1")),
				normalStmt("c", flow("1", prependField("f"), "1")).succ("b"));
		
		helper.runSolver(false, "a");
	}








Bugfix in FieldSens IFDS Solver

 


Johannes Lerch
committed
Jul 06, 2015




1178


1179


1180


1181


1182


1183


1184


1185


1186


1187


1188


1189


1190


1191


1192


1193


1194


1195



	
	@Test
	public void readMultipleAbstractedFields() {
		helper.method("foo",
			startPoints("a"),
			normalStmt("a", flow("0", prependField("f"), "1")).succ("b1").succ("b2"),
			normalStmt("b1", kill("1")).succ("c"),
			normalStmt("b2", flow("1", prependField("g"), "1")).succ("c"),
			normalStmt("c", flow("1", "2")).succ("d"),
			normalStmt("d", flow("2", "2")).succ("e1").succ("e2"),
			normalStmt("e1", flow("2", "3")).succ("f"),
			normalStmt("e2", kill("2")).succ("f"),
			normalStmt("f", flow("3", readField("g"), "4")).succ("g"),
			normalStmt("g", flow("4", readField("f"), "5")).succ("h"),
			normalStmt("h", kill("5")).succ("i"));
		
		helper.runSolver(false, "a");
	}








FieldSensitiveIFDSSolver - concept outline



Johannes Späth
committed
Oct 15, 2014




1196



}






For faster browsing, not all history is shown.

View entire blame







FieldSensitiveIFDSSolverTest.java



37.1 KB










FieldSensitiveIFDSSolverTest.java



37.1 KB









Newer










Older
NewerOlder







abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1001


1002


1003



		helper.method("bar",
				startPoints("c"),
				callSite("c").calls("xyz", flow("1", "1")).retSite("d", kill("1")),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1004


1005



				normalStmt("d", flow("1", overwriteField("f"), "1")).succ("e"),
				exitStmt("e").returns(over("b"), to("f"), flow("1", "2")));








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1006


1007


1008


1009


1010


1011


1012


1013


1014


1015


1016


1017



		
		helper.method("xyz",
				startPoints("x"),
				exitStmt("x").returns(over("c"), to("d"), flow("1", "1")));
		
		helper.runSolver(false, "a");
	}

	@Test
	public void unbalancedUseIncompatibleReturnResolver() {
		helper.method("foo",
				startPoints("a"),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1018



				normalStmt("a", flow("0", "1")).succ("b"),








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1019


1020


1021


1022



				exitStmt("b").returns(over("cs"), to("c"), flow("1", "1")));
		
		helper.method("bar",
				startPoints("unused1"),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1023


1024


1025



				normalStmt("cs").succ("c"),
				normalStmt("c", flow("1", readField("g"), "1")).succ("d"),
				normalStmt("d", flow("1", overwriteField("f"), "2")).succ("e"),








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1026


1027


1028


1029



				exitStmt("e").returns(over("cs2"), to("f"), flow("2", "2")));
		
		helper.method("xyz",
				startPoints("unused2"),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1030


1031



				normalStmt("cs2").succ("f"),
				normalStmt("f", flow("2", readField("f"), "3")).succ("g"),








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1032


1033


1034


1035



				normalStmt("g").succ("h"));
				
		helper.runSolver(true, "a");
	}








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1036


1037


1038


1039


1040


1041


1042


1043


1044


1045


1046


1047


1048


1049


1050


1051


1052


1053


1054


1055


1056


1057


1058


1059


1060


1061


1062


1063


1064


1065


1066


1067


1068


1069


1070


1071


1072


1073


1074


1075


1076


1077


1078


1079


1080


1081


1082


1083


1084


1085


1086


1087


1088


1089


1090


1091


1092


1093


1094


1095


1096


1097


1098


1099


1100


1101


1102


1103


1104


1105


1106


1107


1108


1109


1110


1111


1112


1113


1114


1115


1116


1117


1118


1119


1120


1121


1122


1123


1124


1125


1126


1127


1128


1129


1130


1131


1132


1133


1134


1135


1136


1137


1138


1139


1140


1141


1142


1143


1144


1145


1146


1147


1148


1149


1150


1151


1152


1153


1154


1155


1156


1157


1158


1159


1160


1161


1162


1163


1164


1165


1166


1167


1168


1169


1170


1171


1172


1173


1174


1175


1176


1177




	@Test
	public void recursiveReadField() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField2() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				callSite("e").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField3() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				normalStmt("e", flow("1", readField("g"), "1")).succ("f"),
				callSite("f").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField4() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b1"),
				callSite("b1").calls("bar", flow("1", "1")).retSite("b2", flow("1", "1")),
				callSite("b2").calls("xyz", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				normalStmt("e", flow("1", readField("g"), "1")).succ("f"),
				callSite("f").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", readField("f"), "1")).succ("b").succ("c"),
				normalStmt("c", kill("1")).succ("d"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField2() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),
				normalStmt("c1", flow("1", readField("f"), "1")).succ("b").succ("d"),
				normalStmt("c2", flow("1", readField("g"), "1")).succ("b").succ("d"),
				normalStmt("d", kill("1")).succ("e"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField3() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),
				normalStmt("c1", flow("1", readField("f"), "1")).succ("d"),
				normalStmt("c2", flow("1", readField("g"), "1")).succ("d"),
				normalStmt("d", flow("1", "1")).succ("e").succ("b"),
				normalStmt("e", kill("1")).succ("f"));
		
		helper.runSolver(false, "a");
	}

	@Test
	public void recursiveReturn() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "2")));
		
		helper.method("bar",
				startPoints("c"),
				callSite("c").calls("bar", flow("2", "2")).retSite("d", flow("2", "2")),
				normalStmt("d", flow(2, "2", "2")).succ("e").succ("f"),
				exitStmt("e").returns(over("c"), to("d"), flow(2, "2", "2")),
				normalStmt("f", flow(2, "2", readField("f"), "3")).succ("g"),
				normalStmt("g", kill("3")).succ("h"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void joinStmtIsCallSite() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", kill(2,"1")).retSite("c", flow("1", "1")),
				normalStmt("c", flow("1", prependField("f"), "1")).succ("b"));
		
		helper.runSolver(false, "a");
	}








Bugfix in FieldSens IFDS Solver

 


Johannes Lerch
committed
Jul 06, 2015




1178


1179


1180


1181


1182


1183


1184


1185


1186


1187


1188


1189


1190


1191


1192


1193


1194


1195



	
	@Test
	public void readMultipleAbstractedFields() {
		helper.method("foo",
			startPoints("a"),
			normalStmt("a", flow("0", prependField("f"), "1")).succ("b1").succ("b2"),
			normalStmt("b1", kill("1")).succ("c"),
			normalStmt("b2", flow("1", prependField("g"), "1")).succ("c"),
			normalStmt("c", flow("1", "2")).succ("d"),
			normalStmt("d", flow("2", "2")).succ("e1").succ("e2"),
			normalStmt("e1", flow("2", "3")).succ("f"),
			normalStmt("e2", kill("2")).succ("f"),
			normalStmt("f", flow("3", readField("g"), "4")).succ("g"),
			normalStmt("g", flow("4", readField("f"), "5")).succ("h"),
			normalStmt("h", kill("5")).succ("i"));
		
		helper.runSolver(false, "a");
	}








FieldSensitiveIFDSSolver - concept outline



Johannes Späth
committed
Oct 15, 2014




1196



}











abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1001


1002


1003



		helper.method("bar",
				startPoints("c"),
				callSite("c").calls("xyz", flow("1", "1")).retSite("d", kill("1")),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1004


1005



				normalStmt("d", flow("1", overwriteField("f"), "1")).succ("e"),
				exitStmt("e").returns(over("b"), to("f"), flow("1", "2")));








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1006


1007


1008


1009


1010


1011


1012


1013


1014


1015


1016


1017



		
		helper.method("xyz",
				startPoints("x"),
				exitStmt("x").returns(over("c"), to("d"), flow("1", "1")));
		
		helper.runSolver(false, "a");
	}

	@Test
	public void unbalancedUseIncompatibleReturnResolver() {
		helper.method("foo",
				startPoints("a"),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1018



				normalStmt("a", flow("0", "1")).succ("b"),








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1019


1020


1021


1022



				exitStmt("b").returns(over("cs"), to("c"), flow("1", "1")));
		
		helper.method("bar",
				startPoints("unused1"),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1023


1024


1025



				normalStmt("cs").succ("c"),
				normalStmt("c", flow("1", readField("g"), "1")).succ("d"),
				normalStmt("d", flow("1", overwriteField("f"), "2")).succ("e"),








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1026


1027


1028


1029



				exitStmt("e").returns(over("cs2"), to("f"), flow("2", "2")));
		
		helper.method("xyz",
				startPoints("unused2"),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1030


1031



				normalStmt("cs2").succ("f"),
				normalStmt("f", flow("2", readField("f"), "3")).succ("g"),








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1032


1033


1034


1035



				normalStmt("g").succ("h"));
				
		helper.runSolver(true, "a");
	}








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1036


1037


1038


1039


1040


1041


1042


1043


1044


1045


1046


1047


1048


1049


1050


1051


1052


1053


1054


1055


1056


1057


1058


1059


1060


1061


1062


1063


1064


1065


1066


1067


1068


1069


1070


1071


1072


1073


1074


1075


1076


1077


1078


1079


1080


1081


1082


1083


1084


1085


1086


1087


1088


1089


1090


1091


1092


1093


1094


1095


1096


1097


1098


1099


1100


1101


1102


1103


1104


1105


1106


1107


1108


1109


1110


1111


1112


1113


1114


1115


1116


1117


1118


1119


1120


1121


1122


1123


1124


1125


1126


1127


1128


1129


1130


1131


1132


1133


1134


1135


1136


1137


1138


1139


1140


1141


1142


1143


1144


1145


1146


1147


1148


1149


1150


1151


1152


1153


1154


1155


1156


1157


1158


1159


1160


1161


1162


1163


1164


1165


1166


1167


1168


1169


1170


1171


1172


1173


1174


1175


1176


1177




	@Test
	public void recursiveReadField() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField2() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				callSite("e").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField3() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				normalStmt("e", flow("1", readField("g"), "1")).succ("f"),
				callSite("f").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField4() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b1"),
				callSite("b1").calls("bar", flow("1", "1")).retSite("b2", flow("1", "1")),
				callSite("b2").calls("xyz", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				normalStmt("e", flow("1", readField("g"), "1")).succ("f"),
				callSite("f").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", readField("f"), "1")).succ("b").succ("c"),
				normalStmt("c", kill("1")).succ("d"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField2() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),
				normalStmt("c1", flow("1", readField("f"), "1")).succ("b").succ("d"),
				normalStmt("c2", flow("1", readField("g"), "1")).succ("b").succ("d"),
				normalStmt("d", kill("1")).succ("e"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField3() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),
				normalStmt("c1", flow("1", readField("f"), "1")).succ("d"),
				normalStmt("c2", flow("1", readField("g"), "1")).succ("d"),
				normalStmt("d", flow("1", "1")).succ("e").succ("b"),
				normalStmt("e", kill("1")).succ("f"));
		
		helper.runSolver(false, "a");
	}

	@Test
	public void recursiveReturn() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "2")));
		
		helper.method("bar",
				startPoints("c"),
				callSite("c").calls("bar", flow("2", "2")).retSite("d", flow("2", "2")),
				normalStmt("d", flow(2, "2", "2")).succ("e").succ("f"),
				exitStmt("e").returns(over("c"), to("d"), flow(2, "2", "2")),
				normalStmt("f", flow(2, "2", readField("f"), "3")).succ("g"),
				normalStmt("g", kill("3")).succ("h"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void joinStmtIsCallSite() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", kill(2,"1")).retSite("c", flow("1", "1")),
				normalStmt("c", flow("1", prependField("f"), "1")).succ("b"));
		
		helper.runSolver(false, "a");
	}








Bugfix in FieldSens IFDS Solver

 


Johannes Lerch
committed
Jul 06, 2015




1178


1179


1180


1181


1182


1183


1184


1185


1186


1187


1188


1189


1190


1191


1192


1193


1194


1195



	
	@Test
	public void readMultipleAbstractedFields() {
		helper.method("foo",
			startPoints("a"),
			normalStmt("a", flow("0", prependField("f"), "1")).succ("b1").succ("b2"),
			normalStmt("b1", kill("1")).succ("c"),
			normalStmt("b2", flow("1", prependField("g"), "1")).succ("c"),
			normalStmt("c", flow("1", "2")).succ("d"),
			normalStmt("d", flow("2", "2")).succ("e1").succ("e2"),
			normalStmt("e1", flow("2", "3")).succ("f"),
			normalStmt("e2", kill("2")).succ("f"),
			normalStmt("f", flow("3", readField("g"), "4")).succ("g"),
			normalStmt("g", flow("4", readField("f"), "5")).succ("h"),
			normalStmt("h", kill("5")).succ("i"));
		
		helper.runSolver(false, "a");
	}








FieldSensitiveIFDSSolver - concept outline



Johannes Späth
committed
Oct 15, 2014




1196



}









abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1001


1002


1003



		helper.method("bar",
				startPoints("c"),
				callSite("c").calls("xyz", flow("1", "1")).retSite("d", kill("1")),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1004


1005



				normalStmt("d", flow("1", overwriteField("f"), "1")).succ("e"),
				exitStmt("e").returns(over("b"), to("f"), flow("1", "2")));








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1006


1007


1008


1009


1010


1011


1012


1013


1014


1015


1016


1017



		
		helper.method("xyz",
				startPoints("x"),
				exitStmt("x").returns(over("c"), to("d"), flow("1", "1")));
		
		helper.runSolver(false, "a");
	}

	@Test
	public void unbalancedUseIncompatibleReturnResolver() {
		helper.method("foo",
				startPoints("a"),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1018



				normalStmt("a", flow("0", "1")).succ("b"),








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1019


1020


1021


1022



				exitStmt("b").returns(over("cs"), to("c"), flow("1", "1")));
		
		helper.method("bar",
				startPoints("unused1"),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1023


1024


1025



				normalStmt("cs").succ("c"),
				normalStmt("c", flow("1", readField("g"), "1")).succ("d"),
				normalStmt("d", flow("1", overwriteField("f"), "2")).succ("e"),








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1026


1027


1028


1029



				exitStmt("e").returns(over("cs2"), to("f"), flow("2", "2")));
		
		helper.method("xyz",
				startPoints("unused2"),








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1030


1031



				normalStmt("cs2").succ("f"),
				normalStmt("f", flow("2", readField("f"), "3")).succ("g"),








abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1032


1033


1034


1035



				normalStmt("g").succ("h"));
				
		helper.runSolver(true, "a");
	}








rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1036


1037


1038


1039


1040


1041


1042


1043


1044


1045


1046


1047


1048


1049


1050


1051


1052


1053


1054


1055


1056


1057


1058


1059


1060


1061


1062


1063


1064


1065


1066


1067


1068


1069


1070


1071


1072


1073


1074


1075


1076


1077


1078


1079


1080


1081


1082


1083


1084


1085


1086


1087


1088


1089


1090


1091


1092


1093


1094


1095


1096


1097


1098


1099


1100


1101


1102


1103


1104


1105


1106


1107


1108


1109


1110


1111


1112


1113


1114


1115


1116


1117


1118


1119


1120


1121


1122


1123


1124


1125


1126


1127


1128


1129


1130


1131


1132


1133


1134


1135


1136


1137


1138


1139


1140


1141


1142


1143


1144


1145


1146


1147


1148


1149


1150


1151


1152


1153


1154


1155


1156


1157


1158


1159


1160


1161


1162


1163


1164


1165


1166


1167


1168


1169


1170


1171


1172


1173


1174


1175


1176


1177




	@Test
	public void recursiveReadField() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField2() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				callSite("e").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField3() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				normalStmt("e", flow("1", readField("g"), "1")).succ("f"),
				callSite("f").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField4() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b1"),
				callSite("b1").calls("bar", flow("1", "1")).retSite("b2", flow("1", "1")),
				callSite("b2").calls("xyz", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				normalStmt("e", flow("1", readField("g"), "1")).succ("f"),
				callSite("f").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", readField("f"), "1")).succ("b").succ("c"),
				normalStmt("c", kill("1")).succ("d"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField2() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),
				normalStmt("c1", flow("1", readField("f"), "1")).succ("b").succ("d"),
				normalStmt("c2", flow("1", readField("g"), "1")).succ("b").succ("d"),
				normalStmt("d", kill("1")).succ("e"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField3() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),
				normalStmt("c1", flow("1", readField("f"), "1")).succ("d"),
				normalStmt("c2", flow("1", readField("g"), "1")).succ("d"),
				normalStmt("d", flow("1", "1")).succ("e").succ("b"),
				normalStmt("e", kill("1")).succ("f"));
		
		helper.runSolver(false, "a");
	}

	@Test
	public void recursiveReturn() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "2")));
		
		helper.method("bar",
				startPoints("c"),
				callSite("c").calls("bar", flow("2", "2")).retSite("d", flow("2", "2")),
				normalStmt("d", flow(2, "2", "2")).succ("e").succ("f"),
				exitStmt("e").returns(over("c"), to("d"), flow(2, "2", "2")),
				normalStmt("f", flow(2, "2", readField("f"), "3")).succ("g"),
				normalStmt("g", kill("3")).succ("h"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void joinStmtIsCallSite() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", kill(2,"1")).retSite("c", flow("1", "1")),
				normalStmt("c", flow("1", prependField("f"), "1")).succ("b"));
		
		helper.runSolver(false, "a");
	}








Bugfix in FieldSens IFDS Solver

 


Johannes Lerch
committed
Jul 06, 2015




1178


1179


1180


1181


1182


1183


1184


1185


1186


1187


1188


1189


1190


1191


1192


1193


1194


1195



	
	@Test
	public void readMultipleAbstractedFields() {
		helper.method("foo",
			startPoints("a"),
			normalStmt("a", flow("0", prependField("f"), "1")).succ("b1").succ("b2"),
			normalStmt("b1", kill("1")).succ("c"),
			normalStmt("b2", flow("1", prependField("g"), "1")).succ("c"),
			normalStmt("c", flow("1", "2")).succ("d"),
			normalStmt("d", flow("2", "2")).succ("e1").succ("e2"),
			normalStmt("e1", flow("2", "3")).succ("f"),
			normalStmt("e2", kill("2")).succ("f"),
			normalStmt("f", flow("3", readField("g"), "4")).succ("g"),
			normalStmt("g", flow("4", readField("f"), "5")).succ("h"),
			normalStmt("h", kill("5")).succ("i"));
		
		helper.runSolver(false, "a");
	}








FieldSensitiveIFDSSolver - concept outline



Johannes Späth
committed
Oct 15, 2014




1196



}







abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1001


1002


1003



		helper.method("bar",
				startPoints("c"),
				callSite("c").calls("xyz", flow("1", "1")).retSite("d", kill("1")),






abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015



abstract at return edges

 

abstract at return edges

Johannes Lerch
committed
Feb 23, 2015


1001


1002


1003


		helper.method("bar",
				startPoints("c"),
				callSite("c").calls("xyz", flow("1", "1")).retSite("d", kill("1")),

		helper.method("bar",helper.method("bar",				startPoints("c"),startPoints("c"),				callSite("c").calls("xyz", flow("1", "1")).retSite("d", kill("1")),callSite("c").calls("xyz",flow("1","1")).retSite("d",kill("1")),




rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1004


1005



				normalStmt("d", flow("1", overwriteField("f"), "1")).succ("e"),
				exitStmt("e").returns(over("b"), to("f"), flow("1", "2")));






rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver

 

rewrite of ifds solver

Johannes Lerch
committed
Mar 19, 2015


1004


1005


				normalStmt("d", flow("1", overwriteField("f"), "1")).succ("e"),
				exitStmt("e").returns(over("b"), to("f"), flow("1", "2")));

				normalStmt("d", flow("1", overwriteField("f"), "1")).succ("e"),normalStmt("d",flow("1",overwriteField("f"),"1")).succ("e"),				exitStmt("e").returns(over("b"), to("f"), flow("1", "2")));exitStmt("e").returns(over("b"),to("f"),flow("1","2")));




abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1006


1007


1008


1009


1010


1011


1012


1013


1014


1015


1016


1017



		
		helper.method("xyz",
				startPoints("x"),
				exitStmt("x").returns(over("c"), to("d"), flow("1", "1")));
		
		helper.runSolver(false, "a");
	}

	@Test
	public void unbalancedUseIncompatibleReturnResolver() {
		helper.method("foo",
				startPoints("a"),






abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015



abstract at return edges

 

abstract at return edges

Johannes Lerch
committed
Feb 23, 2015


1006


1007


1008


1009


1010


1011


1012


1013


1014


1015


1016


1017


		
		helper.method("xyz",
				startPoints("x"),
				exitStmt("x").returns(over("c"), to("d"), flow("1", "1")));
		
		helper.runSolver(false, "a");
	}

	@Test
	public void unbalancedUseIncompatibleReturnResolver() {
		helper.method("foo",
				startPoints("a"),

				helper.method("xyz",helper.method("xyz",				startPoints("x"),startPoints("x"),				exitStmt("x").returns(over("c"), to("d"), flow("1", "1")));exitStmt("x").returns(over("c"),to("d"),flow("1","1")));				helper.runSolver(false, "a");helper.runSolver(false,"a");	}}	@Test@Test	public void unbalancedUseIncompatibleReturnResolver() {publicvoidunbalancedUseIncompatibleReturnResolver(){		helper.method("foo",helper.method("foo",				startPoints("a"),startPoints("a"),




rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1018



				normalStmt("a", flow("0", "1")).succ("b"),






rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver

 

rewrite of ifds solver

Johannes Lerch
committed
Mar 19, 2015


1018


				normalStmt("a", flow("0", "1")).succ("b"),

				normalStmt("a", flow("0", "1")).succ("b"),normalStmt("a",flow("0","1")).succ("b"),




abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1019


1020


1021


1022



				exitStmt("b").returns(over("cs"), to("c"), flow("1", "1")));
		
		helper.method("bar",
				startPoints("unused1"),






abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015



abstract at return edges

 

abstract at return edges

Johannes Lerch
committed
Feb 23, 2015


1019


1020


1021


1022


				exitStmt("b").returns(over("cs"), to("c"), flow("1", "1")));
		
		helper.method("bar",
				startPoints("unused1"),

				exitStmt("b").returns(over("cs"), to("c"), flow("1", "1")));exitStmt("b").returns(over("cs"),to("c"),flow("1","1")));				helper.method("bar",helper.method("bar",				startPoints("unused1"),startPoints("unused1"),




rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1023


1024


1025



				normalStmt("cs").succ("c"),
				normalStmt("c", flow("1", readField("g"), "1")).succ("d"),
				normalStmt("d", flow("1", overwriteField("f"), "2")).succ("e"),






rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver

 

rewrite of ifds solver

Johannes Lerch
committed
Mar 19, 2015


1023


1024


1025


				normalStmt("cs").succ("c"),
				normalStmt("c", flow("1", readField("g"), "1")).succ("d"),
				normalStmt("d", flow("1", overwriteField("f"), "2")).succ("e"),

				normalStmt("cs").succ("c"),normalStmt("cs").succ("c"),				normalStmt("c", flow("1", readField("g"), "1")).succ("d"),normalStmt("c",flow("1",readField("g"),"1")).succ("d"),				normalStmt("d", flow("1", overwriteField("f"), "2")).succ("e"),normalStmt("d",flow("1",overwriteField("f"),"2")).succ("e"),




abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1026


1027


1028


1029



				exitStmt("e").returns(over("cs2"), to("f"), flow("2", "2")));
		
		helper.method("xyz",
				startPoints("unused2"),






abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015



abstract at return edges

 

abstract at return edges

Johannes Lerch
committed
Feb 23, 2015


1026


1027


1028


1029


				exitStmt("e").returns(over("cs2"), to("f"), flow("2", "2")));
		
		helper.method("xyz",
				startPoints("unused2"),

				exitStmt("e").returns(over("cs2"), to("f"), flow("2", "2")));exitStmt("e").returns(over("cs2"),to("f"),flow("2","2")));				helper.method("xyz",helper.method("xyz",				startPoints("unused2"),startPoints("unused2"),




rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1030


1031



				normalStmt("cs2").succ("f"),
				normalStmt("f", flow("2", readField("f"), "3")).succ("g"),






rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver

 

rewrite of ifds solver

Johannes Lerch
committed
Mar 19, 2015


1030


1031


				normalStmt("cs2").succ("f"),
				normalStmt("f", flow("2", readField("f"), "3")).succ("g"),

				normalStmt("cs2").succ("f"),normalStmt("cs2").succ("f"),				normalStmt("f", flow("2", readField("f"), "3")).succ("g"),normalStmt("f",flow("2",readField("f"),"3")).succ("g"),




abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015




1032


1033


1034


1035



				normalStmt("g").succ("h"));
				
		helper.runSolver(true, "a");
	}






abstract at return edges

 


Johannes Lerch
committed
Feb 23, 2015



abstract at return edges

 

abstract at return edges

Johannes Lerch
committed
Feb 23, 2015


1032


1033


1034


1035


				normalStmt("g").succ("h"));
				
		helper.runSolver(true, "a");
	}

				normalStmt("g").succ("h"));normalStmt("g").succ("h"));						helper.runSolver(true, "a");helper.runSolver(true,"a");	}}




rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015




1036


1037


1038


1039


1040


1041


1042


1043


1044


1045


1046


1047


1048


1049


1050


1051


1052


1053


1054


1055


1056


1057


1058


1059


1060


1061


1062


1063


1064


1065


1066


1067


1068


1069


1070


1071


1072


1073


1074


1075


1076


1077


1078


1079


1080


1081


1082


1083


1084


1085


1086


1087


1088


1089


1090


1091


1092


1093


1094


1095


1096


1097


1098


1099


1100


1101


1102


1103


1104


1105


1106


1107


1108


1109


1110


1111


1112


1113


1114


1115


1116


1117


1118


1119


1120


1121


1122


1123


1124


1125


1126


1127


1128


1129


1130


1131


1132


1133


1134


1135


1136


1137


1138


1139


1140


1141


1142


1143


1144


1145


1146


1147


1148


1149


1150


1151


1152


1153


1154


1155


1156


1157


1158


1159


1160


1161


1162


1163


1164


1165


1166


1167


1168


1169


1170


1171


1172


1173


1174


1175


1176


1177




	@Test
	public void recursiveReadField() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField2() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				callSite("e").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField3() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				normalStmt("e", flow("1", readField("g"), "1")).succ("f"),
				callSite("f").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField4() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b1"),
				callSite("b1").calls("bar", flow("1", "1")).retSite("b2", flow("1", "1")),
				callSite("b2").calls("xyz", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				normalStmt("e", flow("1", readField("g"), "1")).succ("f"),
				callSite("f").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", readField("f"), "1")).succ("b").succ("c"),
				normalStmt("c", kill("1")).succ("d"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField2() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),
				normalStmt("c1", flow("1", readField("f"), "1")).succ("b").succ("d"),
				normalStmt("c2", flow("1", readField("g"), "1")).succ("b").succ("d"),
				normalStmt("d", kill("1")).succ("e"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField3() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),
				normalStmt("c1", flow("1", readField("f"), "1")).succ("d"),
				normalStmt("c2", flow("1", readField("g"), "1")).succ("d"),
				normalStmt("d", flow("1", "1")).succ("e").succ("b"),
				normalStmt("e", kill("1")).succ("f"));
		
		helper.runSolver(false, "a");
	}

	@Test
	public void recursiveReturn() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "2")));
		
		helper.method("bar",
				startPoints("c"),
				callSite("c").calls("bar", flow("2", "2")).retSite("d", flow("2", "2")),
				normalStmt("d", flow(2, "2", "2")).succ("e").succ("f"),
				exitStmt("e").returns(over("c"), to("d"), flow(2, "2", "2")),
				normalStmt("f", flow(2, "2", readField("f"), "3")).succ("g"),
				normalStmt("g", kill("3")).succ("h"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void joinStmtIsCallSite() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", kill(2,"1")).retSite("c", flow("1", "1")),
				normalStmt("c", flow("1", prependField("f"), "1")).succ("b"));
		
		helper.runSolver(false, "a");
	}






rewrite of ifds solver

 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver

 

rewrite of ifds solver

Johannes Lerch
committed
Mar 19, 2015


1036


1037


1038


1039


1040


1041


1042


1043


1044


1045


1046


1047


1048


1049


1050


1051


1052


1053


1054


1055


1056


1057


1058


1059


1060


1061


1062


1063


1064


1065


1066


1067


1068


1069


1070


1071


1072


1073


1074


1075


1076


1077


1078


1079


1080


1081


1082


1083


1084


1085


1086


1087


1088


1089


1090


1091


1092


1093


1094


1095


1096


1097


1098


1099


1100


1101


1102


1103


1104


1105


1106


1107


1108


1109


1110


1111


1112


1113


1114


1115


1116


1117


1118


1119


1120


1121


1122


1123


1124


1125


1126


1127


1128


1129


1130


1131


1132


1133


1134


1135


1136


1137


1138


1139


1140


1141


1142


1143


1144


1145


1146


1147


1148


1149


1150


1151


1152


1153


1154


1155


1156


1157


1158


1159


1160


1161


1162


1163


1164


1165


1166


1167


1168


1169


1170


1171


1172


1173


1174


1175


1176


1177



	@Test
	public void recursiveReadField() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField2() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				callSite("e").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField3() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				normalStmt("e", flow("1", readField("g"), "1")).succ("f"),
				callSite("f").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void recursiveReadField4() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b1"),
				callSite("b1").calls("bar", flow("1", "1")).retSite("b2", flow("1", "1")),
				callSite("b2").calls("xyz", flow("1", "1")));
		
		helper.method("bar",
				startPoints("c"),
				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),
				callSite("d").calls("xyz", flow("1", "1")));
		
		helper.method("xyz", 
				startPoints("e"),
				normalStmt("e", flow("1", readField("g"), "1")).succ("f"),
				callSite("f").calls("bar", flow("1", "1")));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", readField("f"), "1")).succ("b").succ("c"),
				normalStmt("c", kill("1")).succ("d"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField2() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),
				normalStmt("c1", flow("1", readField("f"), "1")).succ("b").succ("d"),
				normalStmt("c2", flow("1", readField("g"), "1")).succ("b").succ("d"),
				normalStmt("d", kill("1")).succ("e"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void loopReadingField3() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),
				normalStmt("c1", flow("1", readField("f"), "1")).succ("d"),
				normalStmt("c2", flow("1", readField("g"), "1")).succ("d"),
				normalStmt("d", flow("1", "1")).succ("e").succ("b"),
				normalStmt("e", kill("1")).succ("f"));
		
		helper.runSolver(false, "a");
	}

	@Test
	public void recursiveReturn() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", flow("1", "2")));
		
		helper.method("bar",
				startPoints("c"),
				callSite("c").calls("bar", flow("2", "2")).retSite("d", flow("2", "2")),
				normalStmt("d", flow(2, "2", "2")).succ("e").succ("f"),
				exitStmt("e").returns(over("c"), to("d"), flow(2, "2", "2")),
				normalStmt("f", flow(2, "2", readField("f"), "3")).succ("g"),
				normalStmt("g", kill("3")).succ("h"));
		
		helper.runSolver(false, "a");
	}
	
	@Test
	public void joinStmtIsCallSite() {
		helper.method("foo",
				startPoints("a"),
				normalStmt("a", flow("0", "1")).succ("b"),
				callSite("b").calls("bar", kill(2,"1")).retSite("c", flow("1", "1")),
				normalStmt("c", flow("1", prependField("f"), "1")).succ("b"));
		
		helper.runSolver(false, "a");
	}

	@Test@Test	public void recursiveReadField() {publicvoidrecursiveReadField(){		helper.method("foo",helper.method("foo",				startPoints("a"),startPoints("a"),				normalStmt("a", flow("0", "1")).succ("b"),normalStmt("a",flow("0","1")).succ("b"),				callSite("b").calls("bar", flow("1", "1")));callSite("b").calls("bar",flow("1","1")));				helper.method("bar",helper.method("bar",				startPoints("c"),startPoints("c"),				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),normalStmt("c",flow("1",readField("f"),"1")).succ("d"),				callSite("d").calls("bar", flow("1", "1")));callSite("d").calls("bar",flow("1","1")));				helper.runSolver(false, "a");helper.runSolver(false,"a");	}}		@Test@Test	public void recursiveReadField2() {publicvoidrecursiveReadField2(){		helper.method("foo",helper.method("foo",				startPoints("a"),startPoints("a"),				normalStmt("a", flow("0", "1")).succ("b"),normalStmt("a",flow("0","1")).succ("b"),				callSite("b").calls("bar", flow("1", "1")));callSite("b").calls("bar",flow("1","1")));				helper.method("bar",helper.method("bar",				startPoints("c"),startPoints("c"),				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),normalStmt("c",flow("1",readField("f"),"1")).succ("d"),				callSite("d").calls("xyz", flow("1", "1")));callSite("d").calls("xyz",flow("1","1")));				helper.method("xyz", helper.method("xyz",				startPoints("e"),startPoints("e"),				callSite("e").calls("bar", flow("1", "1")));callSite("e").calls("bar",flow("1","1")));				helper.runSolver(false, "a");helper.runSolver(false,"a");	}}		@Test@Test	public void recursiveReadField3() {publicvoidrecursiveReadField3(){		helper.method("foo",helper.method("foo",				startPoints("a"),startPoints("a"),				normalStmt("a", flow("0", "1")).succ("b"),normalStmt("a",flow("0","1")).succ("b"),				callSite("b").calls("bar", flow("1", "1")));callSite("b").calls("bar",flow("1","1")));				helper.method("bar",helper.method("bar",				startPoints("c"),startPoints("c"),				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),normalStmt("c",flow("1",readField("f"),"1")).succ("d"),				callSite("d").calls("xyz", flow("1", "1")));callSite("d").calls("xyz",flow("1","1")));				helper.method("xyz", helper.method("xyz",				startPoints("e"),startPoints("e"),				normalStmt("e", flow("1", readField("g"), "1")).succ("f"),normalStmt("e",flow("1",readField("g"),"1")).succ("f"),				callSite("f").calls("bar", flow("1", "1")));callSite("f").calls("bar",flow("1","1")));				helper.runSolver(false, "a");helper.runSolver(false,"a");	}}		@Test@Test	public void recursiveReadField4() {publicvoidrecursiveReadField4(){		helper.method("foo",helper.method("foo",				startPoints("a"),startPoints("a"),				normalStmt("a", flow("0", "1")).succ("b1"),normalStmt("a",flow("0","1")).succ("b1"),				callSite("b1").calls("bar", flow("1", "1")).retSite("b2", flow("1", "1")),callSite("b1").calls("bar",flow("1","1")).retSite("b2",flow("1","1")),				callSite("b2").calls("xyz", flow("1", "1")));callSite("b2").calls("xyz",flow("1","1")));				helper.method("bar",helper.method("bar",				startPoints("c"),startPoints("c"),				normalStmt("c", flow("1", readField("f"), "1")).succ("d"),normalStmt("c",flow("1",readField("f"),"1")).succ("d"),				callSite("d").calls("xyz", flow("1", "1")));callSite("d").calls("xyz",flow("1","1")));				helper.method("xyz", helper.method("xyz",				startPoints("e"),startPoints("e"),				normalStmt("e", flow("1", readField("g"), "1")).succ("f"),normalStmt("e",flow("1",readField("g"),"1")).succ("f"),				callSite("f").calls("bar", flow("1", "1")));callSite("f").calls("bar",flow("1","1")));				helper.runSolver(false, "a");helper.runSolver(false,"a");	}}		@Test@Test	public void loopReadingField() {publicvoidloopReadingField(){		helper.method("foo",helper.method("foo",				startPoints("a"),startPoints("a"),				normalStmt("a", flow("0", "1")).succ("b"),normalStmt("a",flow("0","1")).succ("b"),				normalStmt("b", flow("1", readField("f"), "1")).succ("b").succ("c"),normalStmt("b",flow("1",readField("f"),"1")).succ("b").succ("c"),				normalStmt("c", kill("1")).succ("d"));normalStmt("c",kill("1")).succ("d"));				helper.runSolver(false, "a");helper.runSolver(false,"a");	}}		@Test@Test	public void loopReadingField2() {publicvoidloopReadingField2(){		helper.method("foo",helper.method("foo",				startPoints("a"),startPoints("a"),				normalStmt("a", flow("0", "1")).succ("b"),normalStmt("a",flow("0","1")).succ("b"),				normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),normalStmt("b",flow("1","1")).succ("c1").succ("c2"),				normalStmt("c1", flow("1", readField("f"), "1")).succ("b").succ("d"),normalStmt("c1",flow("1",readField("f"),"1")).succ("b").succ("d"),				normalStmt("c2", flow("1", readField("g"), "1")).succ("b").succ("d"),normalStmt("c2",flow("1",readField("g"),"1")).succ("b").succ("d"),				normalStmt("d", kill("1")).succ("e"));normalStmt("d",kill("1")).succ("e"));				helper.runSolver(false, "a");helper.runSolver(false,"a");	}}		@Test@Test	public void loopReadingField3() {publicvoidloopReadingField3(){		helper.method("foo",helper.method("foo",				startPoints("a"),startPoints("a"),				normalStmt("a", flow("0", "1")).succ("b"),normalStmt("a",flow("0","1")).succ("b"),				normalStmt("b", flow("1", "1")).succ("c1").succ("c2"),normalStmt("b",flow("1","1")).succ("c1").succ("c2"),				normalStmt("c1", flow("1", readField("f"), "1")).succ("d"),normalStmt("c1",flow("1",readField("f"),"1")).succ("d"),				normalStmt("c2", flow("1", readField("g"), "1")).succ("d"),normalStmt("c2",flow("1",readField("g"),"1")).succ("d"),				normalStmt("d", flow("1", "1")).succ("e").succ("b"),normalStmt("d",flow("1","1")).succ("e").succ("b"),				normalStmt("e", kill("1")).succ("f"));normalStmt("e",kill("1")).succ("f"));				helper.runSolver(false, "a");helper.runSolver(false,"a");	}}	@Test@Test	public void recursiveReturn() {publicvoidrecursiveReturn(){		helper.method("foo",helper.method("foo",				startPoints("a"),startPoints("a"),				normalStmt("a", flow("0", "1")).succ("b"),normalStmt("a",flow("0","1")).succ("b"),				callSite("b").calls("bar", flow("1", "2")));callSite("b").calls("bar",flow("1","2")));				helper.method("bar",helper.method("bar",				startPoints("c"),startPoints("c"),				callSite("c").calls("bar", flow("2", "2")).retSite("d", flow("2", "2")),callSite("c").calls("bar",flow("2","2")).retSite("d",flow("2","2")),				normalStmt("d", flow(2, "2", "2")).succ("e").succ("f"),normalStmt("d",flow(2,"2","2")).succ("e").succ("f"),				exitStmt("e").returns(over("c"), to("d"), flow(2, "2", "2")),exitStmt("e").returns(over("c"),to("d"),flow(2,"2","2")),				normalStmt("f", flow(2, "2", readField("f"), "3")).succ("g"),normalStmt("f",flow(2,"2",readField("f"),"3")).succ("g"),				normalStmt("g", kill("3")).succ("h"));normalStmt("g",kill("3")).succ("h"));				helper.runSolver(false, "a");helper.runSolver(false,"a");	}}		@Test@Test	public void joinStmtIsCallSite() {publicvoidjoinStmtIsCallSite(){		helper.method("foo",helper.method("foo",				startPoints("a"),startPoints("a"),				normalStmt("a", flow("0", "1")).succ("b"),normalStmt("a",flow("0","1")).succ("b"),				callSite("b").calls("bar", kill(2,"1")).retSite("c", flow("1", "1")),callSite("b").calls("bar",kill(2,"1")).retSite("c",flow("1","1")),				normalStmt("c", flow("1", prependField("f"), "1")).succ("b"));normalStmt("c",flow("1",prependField("f"),"1")).succ("b"));				helper.runSolver(false, "a");helper.runSolver(false,"a");	}}




Bugfix in FieldSens IFDS Solver

 


Johannes Lerch
committed
Jul 06, 2015




1178


1179


1180


1181


1182


1183


1184


1185


1186


1187


1188


1189


1190


1191


1192


1193


1194


1195



	
	@Test
	public void readMultipleAbstractedFields() {
		helper.method("foo",
			startPoints("a"),
			normalStmt("a", flow("0", prependField("f"), "1")).succ("b1").succ("b2"),
			normalStmt("b1", kill("1")).succ("c"),
			normalStmt("b2", flow("1", prependField("g"), "1")).succ("c"),
			normalStmt("c", flow("1", "2")).succ("d"),
			normalStmt("d", flow("2", "2")).succ("e1").succ("e2"),
			normalStmt("e1", flow("2", "3")).succ("f"),
			normalStmt("e2", kill("2")).succ("f"),
			normalStmt("f", flow("3", readField("g"), "4")).succ("g"),
			normalStmt("g", flow("4", readField("f"), "5")).succ("h"),
			normalStmt("h", kill("5")).succ("i"));
		
		helper.runSolver(false, "a");
	}






Bugfix in FieldSens IFDS Solver

 


Johannes Lerch
committed
Jul 06, 2015



Bugfix in FieldSens IFDS Solver

 

Bugfix in FieldSens IFDS Solver

Johannes Lerch
committed
Jul 06, 2015


1178


1179


1180


1181


1182


1183


1184


1185


1186


1187


1188


1189


1190


1191


1192


1193


1194


1195


	
	@Test
	public void readMultipleAbstractedFields() {
		helper.method("foo",
			startPoints("a"),
			normalStmt("a", flow("0", prependField("f"), "1")).succ("b1").succ("b2"),
			normalStmt("b1", kill("1")).succ("c"),
			normalStmt("b2", flow("1", prependField("g"), "1")).succ("c"),
			normalStmt("c", flow("1", "2")).succ("d"),
			normalStmt("d", flow("2", "2")).succ("e1").succ("e2"),
			normalStmt("e1", flow("2", "3")).succ("f"),
			normalStmt("e2", kill("2")).succ("f"),
			normalStmt("f", flow("3", readField("g"), "4")).succ("g"),
			normalStmt("g", flow("4", readField("f"), "5")).succ("h"),
			normalStmt("h", kill("5")).succ("i"));
		
		helper.runSolver(false, "a");
	}

		@Test@Test	public void readMultipleAbstractedFields() {publicvoidreadMultipleAbstractedFields(){		helper.method("foo",helper.method("foo",			startPoints("a"),startPoints("a"),			normalStmt("a", flow("0", prependField("f"), "1")).succ("b1").succ("b2"),normalStmt("a",flow("0",prependField("f"),"1")).succ("b1").succ("b2"),			normalStmt("b1", kill("1")).succ("c"),normalStmt("b1",kill("1")).succ("c"),			normalStmt("b2", flow("1", prependField("g"), "1")).succ("c"),normalStmt("b2",flow("1",prependField("g"),"1")).succ("c"),			normalStmt("c", flow("1", "2")).succ("d"),normalStmt("c",flow("1","2")).succ("d"),			normalStmt("d", flow("2", "2")).succ("e1").succ("e2"),normalStmt("d",flow("2","2")).succ("e1").succ("e2"),			normalStmt("e1", flow("2", "3")).succ("f"),normalStmt("e1",flow("2","3")).succ("f"),			normalStmt("e2", kill("2")).succ("f"),normalStmt("e2",kill("2")).succ("f"),			normalStmt("f", flow("3", readField("g"), "4")).succ("g"),normalStmt("f",flow("3",readField("g"),"4")).succ("g"),			normalStmt("g", flow("4", readField("f"), "5")).succ("h"),normalStmt("g",flow("4",readField("f"),"5")).succ("h"),			normalStmt("h", kill("5")).succ("i"));normalStmt("h",kill("5")).succ("i"));				helper.runSolver(false, "a");helper.runSolver(false,"a");	}}




FieldSensitiveIFDSSolver - concept outline



Johannes Späth
committed
Oct 15, 2014




1196



}





FieldSensitiveIFDSSolver - concept outline



Johannes Späth
committed
Oct 15, 2014



FieldSensitiveIFDSSolver - concept outline


FieldSensitiveIFDSSolver - concept outline

Johannes Späth
committed
Oct 15, 2014


1196


}
}}
For faster browsing, not all history is shown.

View entire blame



View entire blame





Prev


1


2


Next





Prev

1

2

Next







