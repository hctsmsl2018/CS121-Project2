



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

d77de581















Commit
d77de581


authored
Jun 01, 2015
by


Johannes Lerch



Browse files




Fixing licence headers







parent
d93046f4













Changes
4




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/CacheMap.java








View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import java.util.Collection;



......














src/heros/fieldsens/JumpFunctions.java

deleted


100644 → 0







View file @ d93046f4













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import heros.SynchronizedBy;










import heros.ThreadSafe;










import heros.solver.PathEdge;
































/**










 * The IDE algorithm uses a list of jump functions. Instead of a list, we use a set of three










 * maps that are kept in sync. This allows for efficient indexing: the algorithm accesses










 * elements from the list through three different indices.










 */










@ThreadSafe










public class JumpFunctions<N,D> {










 










 //mapping from target node and value to a list of all source values and associated functions










 //where the list is implemented as a mapping from the source value to the function










 //we exclude empty default functions










 @SynchronizedBy("consistent lock on this")










 protected MyConcurrentHashMap<PathEdge<N, D>,D> nonEmptyReverseLookup =










 new MyConcurrentHashMap<PathEdge<N,D>, D>();










 










 public JumpFunctions() {










 }





















 /**










	 * Records a jump function. The source statement is implicit.










	 * @see PathEdge










	 */










 public D addFunction(PathEdge<N, D> edge) {










 return nonEmptyReverseLookup.putIfAbsent(edge, edge.factAtTarget());










 }










 










 /**










	 * Removes all jump functions










	 */










 public synchronized void clear() {










 this.nonEmptyReverseLookup = new MyConcurrentHashMap<PathEdge<N,D>, D>();










 }





















}














src/heros/fieldsens/MyConcurrentHashMap.java

deleted


100644 → 0







View file @ d93046f4













package heros.fieldsens;





















import java.util.concurrent.ConcurrentHashMap;





















public class MyConcurrentHashMap<K, V> extends ConcurrentHashMap<K, V> {










 










 /**










	 * 










	 */










 private static final long serialVersionUID = 6591113627062569214L;










 










 /**










	 * Puts the new key/value-pair if no mapping for the given key was in the in










	 * the map before, otherwise it returns the existing mapping. 










	 * @param key The key to check and put if it is not already in the map










	 * @param value The value to put










	 * @return The old value if one was present in the map for the given key,










	 * otherwise, the newly registered value










	 */










 public V putIfAbsentElseGet(K key, V value) {










 V oldVal = this.putIfAbsent(key, value);










 return oldVal == null ? value : oldVal;










 }





















}














test/heros/fieldsens/AccessPathTest.java








View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2014 Eric Bodden.










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;














......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

d77de581















Commit
d77de581


authored
Jun 01, 2015
by


Johannes Lerch



Browse files




Fixing licence headers







parent
d93046f4













Changes
4




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/CacheMap.java








View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import java.util.Collection;



......














src/heros/fieldsens/JumpFunctions.java

deleted


100644 → 0







View file @ d93046f4













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import heros.SynchronizedBy;










import heros.ThreadSafe;










import heros.solver.PathEdge;
































/**










 * The IDE algorithm uses a list of jump functions. Instead of a list, we use a set of three










 * maps that are kept in sync. This allows for efficient indexing: the algorithm accesses










 * elements from the list through three different indices.










 */










@ThreadSafe










public class JumpFunctions<N,D> {










 










 //mapping from target node and value to a list of all source values and associated functions










 //where the list is implemented as a mapping from the source value to the function










 //we exclude empty default functions










 @SynchronizedBy("consistent lock on this")










 protected MyConcurrentHashMap<PathEdge<N, D>,D> nonEmptyReverseLookup =










 new MyConcurrentHashMap<PathEdge<N,D>, D>();










 










 public JumpFunctions() {










 }





















 /**










	 * Records a jump function. The source statement is implicit.










	 * @see PathEdge










	 */










 public D addFunction(PathEdge<N, D> edge) {










 return nonEmptyReverseLookup.putIfAbsent(edge, edge.factAtTarget());










 }










 










 /**










	 * Removes all jump functions










	 */










 public synchronized void clear() {










 this.nonEmptyReverseLookup = new MyConcurrentHashMap<PathEdge<N,D>, D>();










 }





















}














src/heros/fieldsens/MyConcurrentHashMap.java

deleted


100644 → 0







View file @ d93046f4













package heros.fieldsens;





















import java.util.concurrent.ConcurrentHashMap;





















public class MyConcurrentHashMap<K, V> extends ConcurrentHashMap<K, V> {










 










 /**










	 * 










	 */










 private static final long serialVersionUID = 6591113627062569214L;










 










 /**










	 * Puts the new key/value-pair if no mapping for the given key was in the in










	 * the map before, otherwise it returns the existing mapping. 










	 * @param key The key to check and put if it is not already in the map










	 * @param value The value to put










	 * @return The old value if one was present in the map for the given key,










	 * otherwise, the newly registered value










	 */










 public V putIfAbsentElseGet(K key, V value) {










 V oldVal = this.putIfAbsent(key, value);










 return oldVal == null ? value : oldVal;










 }





















}














test/heros/fieldsens/AccessPathTest.java








View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2014 Eric Bodden.










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;














......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

d77de581







Open sidebar



Joshua Garcia heros
Commits

d77de581




Open sidebar

Joshua Garcia heros
Commits

d77de581


Joshua GarciaherosherosCommits
d77de581








Commit
d77de581


authored
Jun 01, 2015
by


Johannes Lerch



Browse files




Fixing licence headers







parent
d93046f4













Changes
4




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/CacheMap.java








View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import java.util.Collection;



......














src/heros/fieldsens/JumpFunctions.java

deleted


100644 → 0







View file @ d93046f4













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import heros.SynchronizedBy;










import heros.ThreadSafe;










import heros.solver.PathEdge;
































/**










 * The IDE algorithm uses a list of jump functions. Instead of a list, we use a set of three










 * maps that are kept in sync. This allows for efficient indexing: the algorithm accesses










 * elements from the list through three different indices.










 */










@ThreadSafe










public class JumpFunctions<N,D> {










 










 //mapping from target node and value to a list of all source values and associated functions










 //where the list is implemented as a mapping from the source value to the function










 //we exclude empty default functions










 @SynchronizedBy("consistent lock on this")










 protected MyConcurrentHashMap<PathEdge<N, D>,D> nonEmptyReverseLookup =










 new MyConcurrentHashMap<PathEdge<N,D>, D>();










 










 public JumpFunctions() {










 }





















 /**










	 * Records a jump function. The source statement is implicit.










	 * @see PathEdge










	 */










 public D addFunction(PathEdge<N, D> edge) {










 return nonEmptyReverseLookup.putIfAbsent(edge, edge.factAtTarget());










 }










 










 /**










	 * Removes all jump functions










	 */










 public synchronized void clear() {










 this.nonEmptyReverseLookup = new MyConcurrentHashMap<PathEdge<N,D>, D>();










 }





















}














src/heros/fieldsens/MyConcurrentHashMap.java

deleted


100644 → 0







View file @ d93046f4













package heros.fieldsens;





















import java.util.concurrent.ConcurrentHashMap;





















public class MyConcurrentHashMap<K, V> extends ConcurrentHashMap<K, V> {










 










 /**










	 * 










	 */










 private static final long serialVersionUID = 6591113627062569214L;










 










 /**










	 * Puts the new key/value-pair if no mapping for the given key was in the in










	 * the map before, otherwise it returns the existing mapping. 










	 * @param key The key to check and put if it is not already in the map










	 * @param value The value to put










	 * @return The old value if one was present in the map for the given key,










	 * otherwise, the newly registered value










	 */










 public V putIfAbsentElseGet(K key, V value) {










 V oldVal = this.putIfAbsent(key, value);










 return oldVal == null ? value : oldVal;










 }





















}














test/heros/fieldsens/AccessPathTest.java








View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2014 Eric Bodden.










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;














......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
d77de581


authored
Jun 01, 2015
by


Johannes Lerch



Browse files




Fixing licence headers







parent
d93046f4













Changes
4




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/CacheMap.java








View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import java.util.Collection;



......














src/heros/fieldsens/JumpFunctions.java

deleted


100644 → 0







View file @ d93046f4













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import heros.SynchronizedBy;










import heros.ThreadSafe;










import heros.solver.PathEdge;
































/**










 * The IDE algorithm uses a list of jump functions. Instead of a list, we use a set of three










 * maps that are kept in sync. This allows for efficient indexing: the algorithm accesses










 * elements from the list through three different indices.










 */










@ThreadSafe










public class JumpFunctions<N,D> {










 










 //mapping from target node and value to a list of all source values and associated functions










 //where the list is implemented as a mapping from the source value to the function










 //we exclude empty default functions










 @SynchronizedBy("consistent lock on this")










 protected MyConcurrentHashMap<PathEdge<N, D>,D> nonEmptyReverseLookup =










 new MyConcurrentHashMap<PathEdge<N,D>, D>();










 










 public JumpFunctions() {










 }





















 /**










	 * Records a jump function. The source statement is implicit.










	 * @see PathEdge










	 */










 public D addFunction(PathEdge<N, D> edge) {










 return nonEmptyReverseLookup.putIfAbsent(edge, edge.factAtTarget());










 }










 










 /**










	 * Removes all jump functions










	 */










 public synchronized void clear() {










 this.nonEmptyReverseLookup = new MyConcurrentHashMap<PathEdge<N,D>, D>();










 }





















}














src/heros/fieldsens/MyConcurrentHashMap.java

deleted


100644 → 0







View file @ d93046f4













package heros.fieldsens;





















import java.util.concurrent.ConcurrentHashMap;





















public class MyConcurrentHashMap<K, V> extends ConcurrentHashMap<K, V> {










 










 /**










	 * 










	 */










 private static final long serialVersionUID = 6591113627062569214L;










 










 /**










	 * Puts the new key/value-pair if no mapping for the given key was in the in










	 * the map before, otherwise it returns the existing mapping. 










	 * @param key The key to check and put if it is not already in the map










	 * @param value The value to put










	 * @return The old value if one was present in the map for the given key,










	 * otherwise, the newly registered value










	 */










 public V putIfAbsentElseGet(K key, V value) {










 V oldVal = this.putIfAbsent(key, value);










 return oldVal == null ? value : oldVal;










 }





















}














test/heros/fieldsens/AccessPathTest.java








View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2014 Eric Bodden.










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;














......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
d77de581


authored
Jun 01, 2015
by


Johannes Lerch



Browse files



Commit
d77de581


authored
Jun 01, 2015
by


Johannes Lerch

d77de581authoredbyJohannes Lerch

Fixing licence headers






parent
d93046f4
















parent
d93046f4





parent












Changes
4
4


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/fieldsens/CacheMap.java








View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import java.util.Collection;



......














src/heros/fieldsens/JumpFunctions.java

deleted


100644 → 0







View file @ d93046f4













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import heros.SynchronizedBy;










import heros.ThreadSafe;










import heros.solver.PathEdge;
































/**










 * The IDE algorithm uses a list of jump functions. Instead of a list, we use a set of three










 * maps that are kept in sync. This allows for efficient indexing: the algorithm accesses










 * elements from the list through three different indices.










 */










@ThreadSafe










public class JumpFunctions<N,D> {










 










 //mapping from target node and value to a list of all source values and associated functions










 //where the list is implemented as a mapping from the source value to the function










 //we exclude empty default functions










 @SynchronizedBy("consistent lock on this")










 protected MyConcurrentHashMap<PathEdge<N, D>,D> nonEmptyReverseLookup =










 new MyConcurrentHashMap<PathEdge<N,D>, D>();










 










 public JumpFunctions() {










 }





















 /**










	 * Records a jump function. The source statement is implicit.










	 * @see PathEdge










	 */










 public D addFunction(PathEdge<N, D> edge) {










 return nonEmptyReverseLookup.putIfAbsent(edge, edge.factAtTarget());










 }










 










 /**










	 * Removes all jump functions










	 */










 public synchronized void clear() {










 this.nonEmptyReverseLookup = new MyConcurrentHashMap<PathEdge<N,D>, D>();










 }





















}














src/heros/fieldsens/MyConcurrentHashMap.java

deleted


100644 → 0







View file @ d93046f4













package heros.fieldsens;





















import java.util.concurrent.ConcurrentHashMap;





















public class MyConcurrentHashMap<K, V> extends ConcurrentHashMap<K, V> {










 










 /**










	 * 










	 */










 private static final long serialVersionUID = 6591113627062569214L;










 










 /**










	 * Puts the new key/value-pair if no mapping for the given key was in the in










	 * the map before, otherwise it returns the existing mapping. 










	 * @param key The key to check and put if it is not already in the map










	 * @param value The value to put










	 * @return The old value if one was present in the map for the given key,










	 * otherwise, the newly registered value










	 */










 public V putIfAbsentElseGet(K key, V value) {










 V oldVal = this.putIfAbsent(key, value);










 return oldVal == null ? value : oldVal;










 }





















}














test/heros/fieldsens/AccessPathTest.java








View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2014 Eric Bodden.










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;














......














src/heros/fieldsens/CacheMap.java








View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import java.util.Collection;



......












src/heros/fieldsens/CacheMap.java








View file @ d77de581








src/heros/fieldsens/CacheMap.java










View file @ d77de581


d77de581










/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import java.util.Collection;



......













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import java.util.Collection;



......


/*******************************************************************************/******************************************************************************* * Copyright (c) 2015 Johannes Lerch. * Copyright (c) 2015 Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.fieldsens;packageheros.fieldsens;import java.util.Collection;importjava.util.Collection;








src/heros/fieldsens/JumpFunctions.java

deleted


100644 → 0







View file @ d93046f4













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import heros.SynchronizedBy;










import heros.ThreadSafe;










import heros.solver.PathEdge;
































/**










 * The IDE algorithm uses a list of jump functions. Instead of a list, we use a set of three










 * maps that are kept in sync. This allows for efficient indexing: the algorithm accesses










 * elements from the list through three different indices.










 */










@ThreadSafe










public class JumpFunctions<N,D> {










 










 //mapping from target node and value to a list of all source values and associated functions










 //where the list is implemented as a mapping from the source value to the function










 //we exclude empty default functions










 @SynchronizedBy("consistent lock on this")










 protected MyConcurrentHashMap<PathEdge<N, D>,D> nonEmptyReverseLookup =










 new MyConcurrentHashMap<PathEdge<N,D>, D>();










 










 public JumpFunctions() {










 }





















 /**










	 * Records a jump function. The source statement is implicit.










	 * @see PathEdge










	 */










 public D addFunction(PathEdge<N, D> edge) {










 return nonEmptyReverseLookup.putIfAbsent(edge, edge.factAtTarget());










 }










 










 /**










	 * Removes all jump functions










	 */










 public synchronized void clear() {










 this.nonEmptyReverseLookup = new MyConcurrentHashMap<PathEdge<N,D>, D>();










 }





















}












src/heros/fieldsens/JumpFunctions.java

deleted


100644 → 0







View file @ d93046f4








src/heros/fieldsens/JumpFunctions.java

deleted


100644 → 0









View file @ d93046f4


d93046f4










/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import heros.SynchronizedBy;










import heros.ThreadSafe;










import heros.solver.PathEdge;
































/**










 * The IDE algorithm uses a list of jump functions. Instead of a list, we use a set of three










 * maps that are kept in sync. This allows for efficient indexing: the algorithm accesses










 * elements from the list through three different indices.










 */










@ThreadSafe










public class JumpFunctions<N,D> {










 










 //mapping from target node and value to a list of all source values and associated functions










 //where the list is implemented as a mapping from the source value to the function










 //we exclude empty default functions










 @SynchronizedBy("consistent lock on this")










 protected MyConcurrentHashMap<PathEdge<N, D>,D> nonEmptyReverseLookup =










 new MyConcurrentHashMap<PathEdge<N,D>, D>();










 










 public JumpFunctions() {










 }





















 /**










	 * Records a jump function. The source statement is implicit.










	 * @see PathEdge










	 */










 public D addFunction(PathEdge<N, D> edge) {










 return nonEmptyReverseLookup.putIfAbsent(edge, edge.factAtTarget());










 }










 










 /**










	 * Removes all jump functions










	 */










 public synchronized void clear() {










 this.nonEmptyReverseLookup = new MyConcurrentHashMap<PathEdge<N,D>, D>();










 }





















}













/*******************************************************************************










 * Copyright (c) 2012 Eric Bodden.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import heros.SynchronizedBy;










import heros.ThreadSafe;










import heros.solver.PathEdge;
































/**










 * The IDE algorithm uses a list of jump functions. Instead of a list, we use a set of three










 * maps that are kept in sync. This allows for efficient indexing: the algorithm accesses










 * elements from the list through three different indices.










 */










@ThreadSafe










public class JumpFunctions<N,D> {










 










 //mapping from target node and value to a list of all source values and associated functions










 //where the list is implemented as a mapping from the source value to the function










 //we exclude empty default functions










 @SynchronizedBy("consistent lock on this")










 protected MyConcurrentHashMap<PathEdge<N, D>,D> nonEmptyReverseLookup =










 new MyConcurrentHashMap<PathEdge<N,D>, D>();










 










 public JumpFunctions() {










 }





















 /**










	 * Records a jump function. The source statement is implicit.










	 * @see PathEdge










	 */










 public D addFunction(PathEdge<N, D> edge) {










 return nonEmptyReverseLookup.putIfAbsent(edge, edge.factAtTarget());










 }










 










 /**










	 * Removes all jump functions










	 */










 public synchronized void clear() {










 this.nonEmptyReverseLookup = new MyConcurrentHashMap<PathEdge<N,D>, D>();










 }





















}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2012 Eric Bodden. * Copyright (c) 2012 Eric Bodden. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Eric Bodden - initial API and implementation *     Eric Bodden - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.fieldsens;packageheros.fieldsens;import heros.SynchronizedBy;importheros.SynchronizedBy;import heros.ThreadSafe;importheros.ThreadSafe;import heros.solver.PathEdge;importheros.solver.PathEdge;/**/** * The IDE algorithm uses a list of jump functions. Instead of a list, we use a set of three * The IDE algorithm uses a list of jump functions. Instead of a list, we use a set of three * maps that are kept in sync. This allows for efficient indexing: the algorithm accesses * maps that are kept in sync. This allows for efficient indexing: the algorithm accesses * elements from the list through three different indices. * elements from the list through three different indices. */ */@ThreadSafe@ThreadSafepublic class JumpFunctions<N,D> {publicclassJumpFunctions<N,D>{  //mapping from target node and value to a list of all source values and associated functions//mapping from target node and value to a list of all source values and associated functions //where the list is implemented as a mapping from the source value to the function//where the list is implemented as a mapping from the source value to the function //we exclude empty default functions//we exclude empty default functions @SynchronizedBy("consistent lock on this")@SynchronizedBy("consistent lock on this") protected MyConcurrentHashMap<PathEdge<N, D>,D> nonEmptyReverseLookup =protectedMyConcurrentHashMap<PathEdge<N,D>,D>nonEmptyReverseLookup= new MyConcurrentHashMap<PathEdge<N,D>, D>();newMyConcurrentHashMap<PathEdge<N,D>,D>();  public JumpFunctions() {publicJumpFunctions(){ }} /**/**	 * Records a jump function. The source statement is implicit.	 * Records a jump function. The source statement is implicit.	 * @see PathEdge	 * @see PathEdge	 */	 */ public D addFunction(PathEdge<N, D> edge) {publicDaddFunction(PathEdge<N,D>edge){ return nonEmptyReverseLookup.putIfAbsent(edge, edge.factAtTarget());returnnonEmptyReverseLookup.putIfAbsent(edge,edge.factAtTarget()); }}  /**/**	 * Removes all jump functions	 * Removes all jump functions	 */	 */ public synchronized void clear() {publicsynchronizedvoidclear(){ this.nonEmptyReverseLookup = new MyConcurrentHashMap<PathEdge<N,D>, D>();this.nonEmptyReverseLookup=newMyConcurrentHashMap<PathEdge<N,D>,D>(); }}}}








src/heros/fieldsens/MyConcurrentHashMap.java

deleted


100644 → 0







View file @ d93046f4













package heros.fieldsens;





















import java.util.concurrent.ConcurrentHashMap;





















public class MyConcurrentHashMap<K, V> extends ConcurrentHashMap<K, V> {










 










 /**










	 * 










	 */










 private static final long serialVersionUID = 6591113627062569214L;










 










 /**










	 * Puts the new key/value-pair if no mapping for the given key was in the in










	 * the map before, otherwise it returns the existing mapping. 










	 * @param key The key to check and put if it is not already in the map










	 * @param value The value to put










	 * @return The old value if one was present in the map for the given key,










	 * otherwise, the newly registered value










	 */










 public V putIfAbsentElseGet(K key, V value) {










 V oldVal = this.putIfAbsent(key, value);










 return oldVal == null ? value : oldVal;










 }





















}












src/heros/fieldsens/MyConcurrentHashMap.java

deleted


100644 → 0







View file @ d93046f4








src/heros/fieldsens/MyConcurrentHashMap.java

deleted


100644 → 0









View file @ d93046f4


d93046f4










package heros.fieldsens;





















import java.util.concurrent.ConcurrentHashMap;





















public class MyConcurrentHashMap<K, V> extends ConcurrentHashMap<K, V> {










 










 /**










	 * 










	 */










 private static final long serialVersionUID = 6591113627062569214L;










 










 /**










	 * Puts the new key/value-pair if no mapping for the given key was in the in










	 * the map before, otherwise it returns the existing mapping. 










	 * @param key The key to check and put if it is not already in the map










	 * @param value The value to put










	 * @return The old value if one was present in the map for the given key,










	 * otherwise, the newly registered value










	 */










 public V putIfAbsentElseGet(K key, V value) {










 V oldVal = this.putIfAbsent(key, value);










 return oldVal == null ? value : oldVal;










 }





















}













package heros.fieldsens;





















import java.util.concurrent.ConcurrentHashMap;





















public class MyConcurrentHashMap<K, V> extends ConcurrentHashMap<K, V> {










 










 /**










	 * 










	 */










 private static final long serialVersionUID = 6591113627062569214L;










 










 /**










	 * Puts the new key/value-pair if no mapping for the given key was in the in










	 * the map before, otherwise it returns the existing mapping. 










	 * @param key The key to check and put if it is not already in the map










	 * @param value The value to put










	 * @return The old value if one was present in the map for the given key,










	 * otherwise, the newly registered value










	 */










 public V putIfAbsentElseGet(K key, V value) {










 V oldVal = this.putIfAbsent(key, value);










 return oldVal == null ? value : oldVal;










 }





















}


package heros.fieldsens;packageheros.fieldsens;import java.util.concurrent.ConcurrentHashMap;importjava.util.concurrent.ConcurrentHashMap;public class MyConcurrentHashMap<K, V> extends ConcurrentHashMap<K, V> {publicclassMyConcurrentHashMap<K,V>extendsConcurrentHashMap<K,V>{  /**/**	 * 	 * 	 */	 */ private static final long serialVersionUID = 6591113627062569214L;privatestaticfinallongserialVersionUID=6591113627062569214L;  /**/**	 * Puts the new key/value-pair if no mapping for the given key was in the in	 * Puts the new key/value-pair if no mapping for the given key was in the in	 * the map before, otherwise it returns the existing mapping. 	 * the map before, otherwise it returns the existing mapping. 	 * @param key The key to check and put if it is not already in the map	 * @param key The key to check and put if it is not already in the map	 * @param value The value to put	 * @param value The value to put	 * @return The old value if one was present in the map for the given key,	 * @return The old value if one was present in the map for the given key,	 * otherwise, the newly registered value	 * otherwise, the newly registered value	 */	 */ public V putIfAbsentElseGet(K key, V value) {publicVputIfAbsentElseGet(Kkey,Vvalue){ V oldVal = this.putIfAbsent(key, value);VoldVal=this.putIfAbsent(key,value); return oldVal == null ? value : oldVal;returnoldVal==null?value:oldVal; }}}}








test/heros/fieldsens/AccessPathTest.java








View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2014 Eric Bodden.










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;














......












test/heros/fieldsens/AccessPathTest.java








View file @ d77de581








test/heros/fieldsens/AccessPathTest.java










View file @ d77de581


d77de581










/*******************************************************************************










 * Copyright (c) 2014 Eric Bodden.










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;














......













/*******************************************************************************










 * Copyright (c) 2014 Eric Bodden.










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Eric Bodden - initial API and implementation










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;














......


/*******************************************************************************/******************************************************************************* * Copyright (c) 2014 Eric Bodden. * Copyright (c) 2014 Eric Bodden.4 Eric Bodden * Copyright (c) 2015 Johannes Lerch. * Copyright (c) 2015 Johannes Lerch.5 Johannes Lerch * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Eric Bodden - initial API and implementation *     Eric Bodden - initial API and implementationEric Bodden *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementationJohannes Lerch ******************************************************************************/ ******************************************************************************/package heros.fieldsens;packageheros.fieldsens;









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






