



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

0a55e6f0















Commit
0a55e6f0


authored
Jul 05, 2013
by


Eric Bodden



Browse files




more advances on BiDi Solver







parent
3e910732













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ 0a55e6f0






......@@ -10,27 +10,52 @@









 ******************************************************************************/










package heros.solver;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;





















import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.BiDiIFDSSolver.AbstractionWithSourceStmt;





















public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {










import java.util.Collections;










import java.util.HashSet;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;





















 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 super(new AugmentedTabulationProblem<N,D,M,I>(forwardProblem));










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, forwardProblem.numThreads(), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() {










 










 IFDSSolver<N,AbstractionWithSourceStmt<N,D>,M,I> fwSolver = new SingleDirectionSolver(forwardProblem);





















 IFDSSolver<N,AbstractionWithSourceStmt<N,D>,M,I> bwSolver = new SingleDirectionSolver(backwardProblem);










 










 fwSolver.solve();










 }










 










 private class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem) {










 super(ifdsProblem);










 }





















 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 }





















 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;



......@@ -102,8 +127,13 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> extends









 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(N callSite, N returnSite) {










 return null;










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {



......














src/heros/solver/BiDiNotes.txt



0 â†’ 100644







View file @ 0a55e6f0













TODOs:





















- change initialSeeds() to return a mapping from Unit to Abstraction










- this then allows us to overwrite the initial seeds in the AugmentedTabulationProblem to include the seed unit
































General principle:





















We propagate configurations (abstraction, source) in both directions. Initially, "source" is the seed unit.





















Whenever a configuration (abstraction, source) reaches the return-flow function, we proceed as follows:










- if "the other" analysis has already reached the return-flow function for "source"










	then we continue and at the same time unpause "the other" return flow 










- if "the other" analysis has not yet reached the return-flow function for "source" but is still propagating "source"










	then we register and pause the return flow and yield





















On every propagation:










- if "the other" analysis has terminated the analysis for "source" then we kill the taint




\ No newline at end of file
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

0a55e6f0















Commit
0a55e6f0


authored
Jul 05, 2013
by


Eric Bodden



Browse files




more advances on BiDi Solver







parent
3e910732













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ 0a55e6f0






......@@ -10,27 +10,52 @@









 ******************************************************************************/










package heros.solver;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;





















import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.BiDiIFDSSolver.AbstractionWithSourceStmt;





















public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {










import java.util.Collections;










import java.util.HashSet;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;





















 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 super(new AugmentedTabulationProblem<N,D,M,I>(forwardProblem));










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, forwardProblem.numThreads(), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() {










 










 IFDSSolver<N,AbstractionWithSourceStmt<N,D>,M,I> fwSolver = new SingleDirectionSolver(forwardProblem);





















 IFDSSolver<N,AbstractionWithSourceStmt<N,D>,M,I> bwSolver = new SingleDirectionSolver(backwardProblem);










 










 fwSolver.solve();










 }










 










 private class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem) {










 super(ifdsProblem);










 }





















 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 }





















 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;



......@@ -102,8 +127,13 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> extends









 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(N callSite, N returnSite) {










 return null;










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {



......














src/heros/solver/BiDiNotes.txt



0 â†’ 100644







View file @ 0a55e6f0













TODOs:





















- change initialSeeds() to return a mapping from Unit to Abstraction










- this then allows us to overwrite the initial seeds in the AugmentedTabulationProblem to include the seed unit
































General principle:





















We propagate configurations (abstraction, source) in both directions. Initially, "source" is the seed unit.





















Whenever a configuration (abstraction, source) reaches the return-flow function, we proceed as follows:










- if "the other" analysis has already reached the return-flow function for "source"










	then we continue and at the same time unpause "the other" return flow 










- if "the other" analysis has not yet reached the return-flow function for "source" but is still propagating "source"










	then we register and pause the return flow and yield





















On every propagation:










- if "the other" analysis has terminated the analysis for "source" then we kill the taint




\ No newline at end of file
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

0a55e6f0







Open sidebar



Joshua Garcia heros
Commits

0a55e6f0




Open sidebar

Joshua Garcia heros
Commits

0a55e6f0


Joshua GarciaherosherosCommits
0a55e6f0








Commit
0a55e6f0


authored
Jul 05, 2013
by


Eric Bodden



Browse files




more advances on BiDi Solver







parent
3e910732













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ 0a55e6f0






......@@ -10,27 +10,52 @@









 ******************************************************************************/










package heros.solver;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;





















import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.BiDiIFDSSolver.AbstractionWithSourceStmt;





















public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {










import java.util.Collections;










import java.util.HashSet;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;





















 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 super(new AugmentedTabulationProblem<N,D,M,I>(forwardProblem));










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, forwardProblem.numThreads(), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() {










 










 IFDSSolver<N,AbstractionWithSourceStmt<N,D>,M,I> fwSolver = new SingleDirectionSolver(forwardProblem);





















 IFDSSolver<N,AbstractionWithSourceStmt<N,D>,M,I> bwSolver = new SingleDirectionSolver(backwardProblem);










 










 fwSolver.solve();










 }










 










 private class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem) {










 super(ifdsProblem);










 }





















 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 }





















 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;



......@@ -102,8 +127,13 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> extends









 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(N callSite, N returnSite) {










 return null;










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {



......














src/heros/solver/BiDiNotes.txt



0 â†’ 100644







View file @ 0a55e6f0













TODOs:





















- change initialSeeds() to return a mapping from Unit to Abstraction










- this then allows us to overwrite the initial seeds in the AugmentedTabulationProblem to include the seed unit
































General principle:





















We propagate configurations (abstraction, source) in both directions. Initially, "source" is the seed unit.





















Whenever a configuration (abstraction, source) reaches the return-flow function, we proceed as follows:










- if "the other" analysis has already reached the return-flow function for "source"










	then we continue and at the same time unpause "the other" return flow 










- if "the other" analysis has not yet reached the return-flow function for "source" but is still propagating "source"










	then we register and pause the return flow and yield





















On every propagation:










- if "the other" analysis has terminated the analysis for "source" then we kill the taint




\ No newline at end of file
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
0a55e6f0


authored
Jul 05, 2013
by


Eric Bodden



Browse files




more advances on BiDi Solver







parent
3e910732













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ 0a55e6f0






......@@ -10,27 +10,52 @@









 ******************************************************************************/










package heros.solver;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;





















import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.BiDiIFDSSolver.AbstractionWithSourceStmt;





















public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {










import java.util.Collections;










import java.util.HashSet;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;





















 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 super(new AugmentedTabulationProblem<N,D,M,I>(forwardProblem));










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, forwardProblem.numThreads(), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() {










 










 IFDSSolver<N,AbstractionWithSourceStmt<N,D>,M,I> fwSolver = new SingleDirectionSolver(forwardProblem);





















 IFDSSolver<N,AbstractionWithSourceStmt<N,D>,M,I> bwSolver = new SingleDirectionSolver(backwardProblem);










 










 fwSolver.solve();










 }










 










 private class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem) {










 super(ifdsProblem);










 }





















 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 }





















 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;



......@@ -102,8 +127,13 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> extends









 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(N callSite, N returnSite) {










 return null;










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {



......














src/heros/solver/BiDiNotes.txt



0 â†’ 100644







View file @ 0a55e6f0













TODOs:





















- change initialSeeds() to return a mapping from Unit to Abstraction










- this then allows us to overwrite the initial seeds in the AugmentedTabulationProblem to include the seed unit
































General principle:





















We propagate configurations (abstraction, source) in both directions. Initially, "source" is the seed unit.





















Whenever a configuration (abstraction, source) reaches the return-flow function, we proceed as follows:










- if "the other" analysis has already reached the return-flow function for "source"










	then we continue and at the same time unpause "the other" return flow 










- if "the other" analysis has not yet reached the return-flow function for "source" but is still propagating "source"










	then we register and pause the return flow and yield





















On every propagation:










- if "the other" analysis has terminated the analysis for "source" then we kill the taint




\ No newline at end of file
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
0a55e6f0


authored
Jul 05, 2013
by


Eric Bodden



Browse files



Commit
0a55e6f0


authored
Jul 05, 2013
by


Eric Bodden

0a55e6f0authoredbyEric Bodden

more advances on BiDi Solver






parent
3e910732
















parent
3e910732





parent












Changes
2
2


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/solver/BiDiIFDSSolver.java








View file @ 0a55e6f0






......@@ -10,27 +10,52 @@









 ******************************************************************************/










package heros.solver;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;





















import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.BiDiIFDSSolver.AbstractionWithSourceStmt;





















public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {










import java.util.Collections;










import java.util.HashSet;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;





















 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 super(new AugmentedTabulationProblem<N,D,M,I>(forwardProblem));










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, forwardProblem.numThreads(), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() {










 










 IFDSSolver<N,AbstractionWithSourceStmt<N,D>,M,I> fwSolver = new SingleDirectionSolver(forwardProblem);





















 IFDSSolver<N,AbstractionWithSourceStmt<N,D>,M,I> bwSolver = new SingleDirectionSolver(backwardProblem);










 










 fwSolver.solve();










 }










 










 private class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem) {










 super(ifdsProblem);










 }





















 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 }





















 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;



......@@ -102,8 +127,13 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> extends









 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(N callSite, N returnSite) {










 return null;










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {



......














src/heros/solver/BiDiNotes.txt



0 â†’ 100644







View file @ 0a55e6f0













TODOs:





















- change initialSeeds() to return a mapping from Unit to Abstraction










- this then allows us to overwrite the initial seeds in the AugmentedTabulationProblem to include the seed unit
































General principle:





















We propagate configurations (abstraction, source) in both directions. Initially, "source" is the seed unit.





















Whenever a configuration (abstraction, source) reaches the return-flow function, we proceed as follows:










- if "the other" analysis has already reached the return-flow function for "source"










	then we continue and at the same time unpause "the other" return flow 










- if "the other" analysis has not yet reached the return-flow function for "source" but is still propagating "source"










	then we register and pause the return flow and yield





















On every propagation:










- if "the other" analysis has terminated the analysis for "source" then we kill the taint




\ No newline at end of file














src/heros/solver/BiDiIFDSSolver.java








View file @ 0a55e6f0






......@@ -10,27 +10,52 @@









 ******************************************************************************/










package heros.solver;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;





















import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.BiDiIFDSSolver.AbstractionWithSourceStmt;





















public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {










import java.util.Collections;










import java.util.HashSet;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;





















 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 super(new AugmentedTabulationProblem<N,D,M,I>(forwardProblem));










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, forwardProblem.numThreads(), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() {










 










 IFDSSolver<N,AbstractionWithSourceStmt<N,D>,M,I> fwSolver = new SingleDirectionSolver(forwardProblem);





















 IFDSSolver<N,AbstractionWithSourceStmt<N,D>,M,I> bwSolver = new SingleDirectionSolver(backwardProblem);










 










 fwSolver.solve();










 }










 










 private class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem) {










 super(ifdsProblem);










 }





















 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 }





















 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;



......@@ -102,8 +127,13 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> extends









 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(N callSite, N returnSite) {










 return null;










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {



......












src/heros/solver/BiDiIFDSSolver.java








View file @ 0a55e6f0








src/heros/solver/BiDiIFDSSolver.java










View file @ 0a55e6f0


0a55e6f0



......@@ -10,27 +10,52 @@









 ******************************************************************************/










package heros.solver;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;





















import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.BiDiIFDSSolver.AbstractionWithSourceStmt;





















public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {










import java.util.Collections;










import java.util.HashSet;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;





















 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 super(new AugmentedTabulationProblem<N,D,M,I>(forwardProblem));










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, forwardProblem.numThreads(), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() {










 










 IFDSSolver<N,AbstractionWithSourceStmt<N,D>,M,I> fwSolver = new SingleDirectionSolver(forwardProblem);





















 IFDSSolver<N,AbstractionWithSourceStmt<N,D>,M,I> bwSolver = new SingleDirectionSolver(backwardProblem);










 










 fwSolver.solve();










 }










 










 private class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem) {










 super(ifdsProblem);










 }





















 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 }





















 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;



......@@ -102,8 +127,13 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> extends









 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(N callSite, N returnSite) {










 return null;










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {



......






......@@ -10,27 +10,52 @@









 ******************************************************************************/










package heros.solver;





















import java.util.Collections;










import java.util.HashSet;










import java.util.Set;





















import heros.FlowFunction;










import heros.FlowFunctions;










import heros.IFDSTabulationProblem;










import heros.InterproceduralCFG;










import heros.solver.BiDiIFDSSolver.AbstractionWithSourceStmt;





















public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {










import java.util.Collections;










import java.util.HashSet;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;





















 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 super(new AugmentedTabulationProblem<N,D,M,I>(forwardProblem));










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 










 }










 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);










 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);










 this.sharedExecutor = new CountingThreadPoolExecutor(1, forwardProblem.numThreads(), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 }










 










 public void solve() {










 










 IFDSSolver<N,AbstractionWithSourceStmt<N,D>,M,I> fwSolver = new SingleDirectionSolver(forwardProblem);





















 IFDSSolver<N,AbstractionWithSourceStmt<N,D>,M,I> bwSolver = new SingleDirectionSolver(backwardProblem);










 










 fwSolver.solve();










 }










 










 private class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem) {










 super(ifdsProblem);










 }





















 protected CountingThreadPoolExecutor getExecutor() {










 return sharedExecutor;










 }










 }





















 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;



......@@ -102,8 +127,13 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> extends









 }





















 @Override










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(N callSite, N returnSite) {










 return null;










 public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(final N callSite, final N returnSite) {










 return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {










 @Override










 public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {










 return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));










 }










 };










 }










 










 private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {



......


 ******************************************************************************/ ******************************************************************************/package heros.solver;packageheros.solver;import java.util.Collections;importjava.util.Collections;import java.util.HashSet;importjava.util.HashSet;import java.util.Set;importjava.util.Set;import heros.FlowFunction;importheros.FlowFunction;import heros.FlowFunctions;importheros.FlowFunctions;import heros.IFDSTabulationProblem;importheros.IFDSTabulationProblem;import heros.InterproceduralCFG;importheros.InterproceduralCFG;import heros.solver.BiDiIFDSSolver.AbstractionWithSourceStmt;importheros.solver.BiDiIFDSSolver.AbstractionWithSourceStmt;public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> extends IFDSSolver<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {publicclassBiDiIFDSSolver<N,D,M,IextendsInterproceduralCFG<N,M>>extendsIFDSSolver<N,BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I>{import java.util.Collections;importjava.util.Collections;import java.util.HashSet;importjava.util.HashSet;import java.util.Set;importjava.util.Set;import java.util.concurrent.LinkedBlockingQueue;importjava.util.concurrent.LinkedBlockingQueue;import java.util.concurrent.TimeUnit;importjava.util.concurrent.TimeUnit;public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {publicclassBiDiIFDSSolver<N,D,M,IextendsInterproceduralCFG<N,M>>{ private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;privatefinalIFDSTabulationProblem<N,AbstractionWithSourceStmt<N,D>,M,I>forwardProblem; private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;privatefinalIFDSTabulationProblem<N,AbstractionWithSourceStmt<N,D>,M,I>backwardProblem; private final CountingThreadPoolExecutor sharedExecutor;privatefinalCountingThreadPoolExecutorsharedExecutor; public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {publicBiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I>forwardProblem,IFDSTabulationProblem<N,D,M,I>backwardProblem){ super(new AugmentedTabulationProblem<N,D,M,I>(forwardProblem));super(newAugmentedTabulationProblem<N,D,M,I>(forwardProblem)); this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);this.backwardProblem=newAugmentedTabulationProblem<N,D,M,I>(backwardProblem); if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {if(!forwardProblem.followReturnsPastSeeds()||!backwardProblem.followReturnsPastSeeds()){ throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); thrownewIllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); }} this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);this.forwardProblem=newAugmentedTabulationProblem<N,D,M,I>(forwardProblem); this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);this.backwardProblem=newAugmentedTabulationProblem<N,D,M,I>(backwardProblem); this.sharedExecutor = new CountingThreadPoolExecutor(1, forwardProblem.numThreads(), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());this.sharedExecutor=newCountingThreadPoolExecutor(1,forwardProblem.numThreads(),30,TimeUnit.SECONDS,newLinkedBlockingQueue<Runnable>()); }}  public void solve() {publicvoidsolve(){  IFDSSolver<N,AbstractionWithSourceStmt<N,D>,M,I> fwSolver = new SingleDirectionSolver(forwardProblem);IFDSSolver<N,AbstractionWithSourceStmt<N,D>,M,I>fwSolver=newSingleDirectionSolver(forwardProblem); IFDSSolver<N,AbstractionWithSourceStmt<N,D>,M,I> bwSolver = new SingleDirectionSolver(backwardProblem);IFDSSolver<N,AbstractionWithSourceStmt<N,D>,M,I>bwSolver=newSingleDirectionSolver(backwardProblem);  fwSolver.solve();fwSolver.solve(); }}  private class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {privateclassSingleDirectionSolverextendsIFDSSolver<N,AbstractionWithSourceStmt<N,D>,M,I>{ private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem) {privateSingleDirectionSolver(IFDSTabulationProblem<N,AbstractionWithSourceStmt<N,D>,M,I>ifdsProblem){ super(ifdsProblem);super(ifdsProblem); }} protected CountingThreadPoolExecutor getExecutor() {protectedCountingThreadPoolExecutorgetExecutor(){ return sharedExecutor;returnsharedExecutor; }} }} public static class AbstractionWithSourceStmt<N,D> {publicstaticclassAbstractionWithSourceStmt<N,D>{ protected final D abstraction;protectedfinalDabstraction; }} @Override@Override public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(N callSite, N returnSite) {publicFlowFunction<AbstractionWithSourceStmt<N,D>>getCallToReturnFlowFunction(NcallSite,NreturnSite){ return null;returnnull; public FlowFunction<AbstractionWithSourceStmt<N, D>> getCallToReturnFlowFunction(final N callSite, final N returnSite) {publicFlowFunction<AbstractionWithSourceStmt<N,D>>getCallToReturnFlowFunction(finalNcallSite,finalNreturnSite){ return new FlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>() {returnnewFlowFunction<BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>>(){ @Override@Override public Set<AbstractionWithSourceStmt<N, D>> computeTargets(AbstractionWithSourceStmt<N, D> source) {publicSet<AbstractionWithSourceStmt<N,D>>computeTargets(AbstractionWithSourceStmt<N,D>source){ return copyOverSourceStmts(source, originalFunctions.getCallToReturnFlowFunction(callSite, returnSite));returncopyOverSourceStmts(source,originalFunctions.getCallToReturnFlowFunction(callSite,returnSite)); }} };}; }}  private Set<AbstractionWithSourceStmt<N, D>> copyOverSourceStmts(AbstractionWithSourceStmt<N, D> source, FlowFunction<D> originalFunction) {privateSet<AbstractionWithSourceStmt<N,D>>copyOverSourceStmts(AbstractionWithSourceStmt<N,D>source,FlowFunction<D>originalFunction){








src/heros/solver/BiDiNotes.txt



0 â†’ 100644







View file @ 0a55e6f0













TODOs:





















- change initialSeeds() to return a mapping from Unit to Abstraction










- this then allows us to overwrite the initial seeds in the AugmentedTabulationProblem to include the seed unit
































General principle:





















We propagate configurations (abstraction, source) in both directions. Initially, "source" is the seed unit.





















Whenever a configuration (abstraction, source) reaches the return-flow function, we proceed as follows:










- if "the other" analysis has already reached the return-flow function for "source"










	then we continue and at the same time unpause "the other" return flow 










- if "the other" analysis has not yet reached the return-flow function for "source" but is still propagating "source"










	then we register and pause the return flow and yield





















On every propagation:










- if "the other" analysis has terminated the analysis for "source" then we kill the taint




\ No newline at end of file












src/heros/solver/BiDiNotes.txt



0 â†’ 100644







View file @ 0a55e6f0








src/heros/solver/BiDiNotes.txt



0 â†’ 100644









View file @ 0a55e6f0


0a55e6f0










TODOs:





















- change initialSeeds() to return a mapping from Unit to Abstraction










- this then allows us to overwrite the initial seeds in the AugmentedTabulationProblem to include the seed unit
































General principle:





















We propagate configurations (abstraction, source) in both directions. Initially, "source" is the seed unit.





















Whenever a configuration (abstraction, source) reaches the return-flow function, we proceed as follows:










- if "the other" analysis has already reached the return-flow function for "source"










	then we continue and at the same time unpause "the other" return flow 










- if "the other" analysis has not yet reached the return-flow function for "source" but is still propagating "source"










	then we register and pause the return flow and yield





















On every propagation:










- if "the other" analysis has terminated the analysis for "source" then we kill the taint




\ No newline at end of file













TODOs:





















- change initialSeeds() to return a mapping from Unit to Abstraction










- this then allows us to overwrite the initial seeds in the AugmentedTabulationProblem to include the seed unit
































General principle:





















We propagate configurations (abstraction, source) in both directions. Initially, "source" is the seed unit.





















Whenever a configuration (abstraction, source) reaches the return-flow function, we proceed as follows:










- if "the other" analysis has already reached the return-flow function for "source"










	then we continue and at the same time unpause "the other" return flow 










- if "the other" analysis has not yet reached the return-flow function for "source" but is still propagating "source"










	then we register and pause the return flow and yield





















On every propagation:










- if "the other" analysis has terminated the analysis for "source" then we kill the taint




\ No newline at end of file


TODOs:- change initialSeeds() to return a mapping from Unit to Abstraction- this then allows us to overwrite the initial seeds in the AugmentedTabulationProblem to include the seed unitGeneral principle:We propagate configurations (abstraction, source) in both directions. Initially, "source" is the seed unit.Whenever a configuration (abstraction, source) reaches the return-flow function, we proceed as follows:- if "the other" analysis has already reached the return-flow function for "source"	then we continue and at the same time unpause "the other" return flow - if "the other" analysis has not yet reached the return-flow function for "source" but is still propagating "source"	then we register and pause the return flow and yieldOn every propagation:- if "the other" analysis has terminated the analysis for "source" then we kill the taint









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






