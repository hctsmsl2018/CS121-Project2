



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

2026bb15















Commit
2026bb15


authored
Dec 12, 2012
by


Eric Bodden



Browse files




implemented a small optimization in processExit: propagate intra-procedural...

implemented a small optimization in processExit: propagate intra-procedural flows only if summary function was updated
also added implementation-level comments






parent
bcfdf777













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 2026bb15






......@@ -275,7 +275,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 /**










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context.










	 * 










	 * For each possible callee, registers incoming call edges and updates the callee's summary










	 * functions for each already-queried endSummary.










	 * Also propagates call-to-return flows and summarized flows intra-procedurally. 










	 * 










	 * @param edge an edge whose target node resembles a method call










	 */










 private void processCall(PathEdge<N,D,M> edge) {



......@@ -283,15 +288,23 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final N n = edge.getTarget(); // a call node; line 14...










 final D d2 = edge.factAtTarget();










 










 //for each possible callee










 Set<M> callees = icfg.getCalleesOfCallAt(n);










 for(M sCalledProcN: callees) { //still line 14










 










 //compute the call-flow function










 FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);










 flowFunctionConstructionCount++;










 Set<D> res = function.computeTargets(d2);










 for(N sP: icfg.getStartPointsOf(sCalledProcN)) { 










 










 //for each callee's start point(s)










 for(N sP: icfg.getStartPointsOf(sCalledProcN)) { 










 //for each result node of the call-flow function










 for(D d3: res) {










 //create initial self-loop










 propagate(d3, sP, d3, EdgeIdentity.<V>v()); //line 15










 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>










 Set<Cell<N, D, EdgeFunction<V>>> endSumm;










 synchronized (incoming) {










 //line 15.1 of Naeem/Lhotak/Rodriguez



......@@ -301,14 +314,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 //still line 15.2 of Naeem/Lhotak/Rodriguez










 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,










 //re-process that value, updating sCalledProcN's summary function,










 //because we have observed a potentially new incoming edge into <sP,d3>










 for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {










 N eP = entry.getRowKey();










 D d4 = entry.getColumnKey();










 EdgeFunction<V> fCalleeSummary = entry.getValue();










 //for each return site










 for(N retSiteN: icfg.getReturnSitesOfCallAt(n)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);










 flowFunctionConstructionCount++;










 //for each target value of the function










 for(D d5: retFunction.computeTargets(d4)) {










 //update the caller-side summary function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);










 synchronized (summaryFunctions) {



......@@ -325,7 +345,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 } 










 }










 }










 //line 17-19 of Naeem/Lhotak/Rodriguez










 //line 17-19 of Naeem/Lhotak/Rodriguez		










 //process intra-procedural flows along call-to-return flow functions










 //and along summary functions










 EdgeFunction<V> f = jumpFunction(edge);










 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);










 for (N returnSiteN : returnSiteNs) {



......@@ -357,9 +379,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final D d1 = edge.factAtSource();










 final D d2 = edge.factAtTarget();










 










 //for each of the method's start points










 for(N sP: icfg.getStartPointsOf(methodThatNeedsSummary)) {










 //line 21.1 of Naeem/Lhotak/Rodriguez










 










 //register end-summary










 Set<Entry<N, Set<D>>> inc;










 synchronized (incoming) {










 addEndSummary(sP, d1, n, d2, f);



......@@ -367,32 +391,44 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 inc = new HashSet<Map.Entry<N,Set<D>>>(incoming(d1, sP));










 }










 










 //for each incoming call edge already processed










 //(see processCall(..))










 for (Entry<N,Set<D>> entry: inc) {










 //line 22










 N c = entry.getKey();










 //for each return site










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 //update callee-side summary functions










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 EdgeFunction<V> fPrime;










 boolean updatedSummary = false;










 synchronized (summaryFunctions) {










 EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(c,d4,retSiteC).get(d5); 










 if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper










 fPrime = f4.composeWith(f).composeWith(f5).joinWith(summaryFunction);










 if(!fPrime.equalTo(summaryFunction)) {










 summaryFunctions.insertFunction(c,d4,retSiteC,d5,fPrime);










 updatedSummary = true;










 }










 }










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)); {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 //propagate caller-side intra-procedural flows according to updated summary functions










 if(updatedSummary) {










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)); {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 }










 }










 }










 }



......@@ -404,6 +440,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 /**










	 * Lines 33-37 of the algorithm.










	 * Simply propagate normal, intra-procedural flows.










	 * @param edge










	 */










 private void processNormalFlow(PathEdge<N,D,M> edge) {



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

2026bb15















Commit
2026bb15


authored
Dec 12, 2012
by


Eric Bodden



Browse files




implemented a small optimization in processExit: propagate intra-procedural...

implemented a small optimization in processExit: propagate intra-procedural flows only if summary function was updated
also added implementation-level comments






parent
bcfdf777













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 2026bb15






......@@ -275,7 +275,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 /**










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context.










	 * 










	 * For each possible callee, registers incoming call edges and updates the callee's summary










	 * functions for each already-queried endSummary.










	 * Also propagates call-to-return flows and summarized flows intra-procedurally. 










	 * 










	 * @param edge an edge whose target node resembles a method call










	 */










 private void processCall(PathEdge<N,D,M> edge) {



......@@ -283,15 +288,23 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final N n = edge.getTarget(); // a call node; line 14...










 final D d2 = edge.factAtTarget();










 










 //for each possible callee










 Set<M> callees = icfg.getCalleesOfCallAt(n);










 for(M sCalledProcN: callees) { //still line 14










 










 //compute the call-flow function










 FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);










 flowFunctionConstructionCount++;










 Set<D> res = function.computeTargets(d2);










 for(N sP: icfg.getStartPointsOf(sCalledProcN)) { 










 










 //for each callee's start point(s)










 for(N sP: icfg.getStartPointsOf(sCalledProcN)) { 










 //for each result node of the call-flow function










 for(D d3: res) {










 //create initial self-loop










 propagate(d3, sP, d3, EdgeIdentity.<V>v()); //line 15










 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>










 Set<Cell<N, D, EdgeFunction<V>>> endSumm;










 synchronized (incoming) {










 //line 15.1 of Naeem/Lhotak/Rodriguez



......@@ -301,14 +314,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 //still line 15.2 of Naeem/Lhotak/Rodriguez










 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,










 //re-process that value, updating sCalledProcN's summary function,










 //because we have observed a potentially new incoming edge into <sP,d3>










 for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {










 N eP = entry.getRowKey();










 D d4 = entry.getColumnKey();










 EdgeFunction<V> fCalleeSummary = entry.getValue();










 //for each return site










 for(N retSiteN: icfg.getReturnSitesOfCallAt(n)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);










 flowFunctionConstructionCount++;










 //for each target value of the function










 for(D d5: retFunction.computeTargets(d4)) {










 //update the caller-side summary function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);










 synchronized (summaryFunctions) {



......@@ -325,7 +345,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 } 










 }










 }










 //line 17-19 of Naeem/Lhotak/Rodriguez










 //line 17-19 of Naeem/Lhotak/Rodriguez		










 //process intra-procedural flows along call-to-return flow functions










 //and along summary functions










 EdgeFunction<V> f = jumpFunction(edge);










 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);










 for (N returnSiteN : returnSiteNs) {



......@@ -357,9 +379,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final D d1 = edge.factAtSource();










 final D d2 = edge.factAtTarget();










 










 //for each of the method's start points










 for(N sP: icfg.getStartPointsOf(methodThatNeedsSummary)) {










 //line 21.1 of Naeem/Lhotak/Rodriguez










 










 //register end-summary










 Set<Entry<N, Set<D>>> inc;










 synchronized (incoming) {










 addEndSummary(sP, d1, n, d2, f);



......@@ -367,32 +391,44 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 inc = new HashSet<Map.Entry<N,Set<D>>>(incoming(d1, sP));










 }










 










 //for each incoming call edge already processed










 //(see processCall(..))










 for (Entry<N,Set<D>> entry: inc) {










 //line 22










 N c = entry.getKey();










 //for each return site










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 //update callee-side summary functions










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 EdgeFunction<V> fPrime;










 boolean updatedSummary = false;










 synchronized (summaryFunctions) {










 EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(c,d4,retSiteC).get(d5); 










 if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper










 fPrime = f4.composeWith(f).composeWith(f5).joinWith(summaryFunction);










 if(!fPrime.equalTo(summaryFunction)) {










 summaryFunctions.insertFunction(c,d4,retSiteC,d5,fPrime);










 updatedSummary = true;










 }










 }










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)); {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 //propagate caller-side intra-procedural flows according to updated summary functions










 if(updatedSummary) {










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)); {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 }










 }










 }










 }



......@@ -404,6 +440,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 /**










	 * Lines 33-37 of the algorithm.










	 * Simply propagate normal, intra-procedural flows.










	 * @param edge










	 */










 private void processNormalFlow(PathEdge<N,D,M> edge) {



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

2026bb15







Open sidebar



Joshua Garcia heros
Commits

2026bb15




Open sidebar

Joshua Garcia heros
Commits

2026bb15


Joshua GarciaherosherosCommits
2026bb15








Commit
2026bb15


authored
Dec 12, 2012
by


Eric Bodden



Browse files




implemented a small optimization in processExit: propagate intra-procedural...

implemented a small optimization in processExit: propagate intra-procedural flows only if summary function was updated
also added implementation-level comments






parent
bcfdf777













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 2026bb15






......@@ -275,7 +275,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 /**










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context.










	 * 










	 * For each possible callee, registers incoming call edges and updates the callee's summary










	 * functions for each already-queried endSummary.










	 * Also propagates call-to-return flows and summarized flows intra-procedurally. 










	 * 










	 * @param edge an edge whose target node resembles a method call










	 */










 private void processCall(PathEdge<N,D,M> edge) {



......@@ -283,15 +288,23 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final N n = edge.getTarget(); // a call node; line 14...










 final D d2 = edge.factAtTarget();










 










 //for each possible callee










 Set<M> callees = icfg.getCalleesOfCallAt(n);










 for(M sCalledProcN: callees) { //still line 14










 










 //compute the call-flow function










 FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);










 flowFunctionConstructionCount++;










 Set<D> res = function.computeTargets(d2);










 for(N sP: icfg.getStartPointsOf(sCalledProcN)) { 










 










 //for each callee's start point(s)










 for(N sP: icfg.getStartPointsOf(sCalledProcN)) { 










 //for each result node of the call-flow function










 for(D d3: res) {










 //create initial self-loop










 propagate(d3, sP, d3, EdgeIdentity.<V>v()); //line 15










 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>










 Set<Cell<N, D, EdgeFunction<V>>> endSumm;










 synchronized (incoming) {










 //line 15.1 of Naeem/Lhotak/Rodriguez



......@@ -301,14 +314,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 //still line 15.2 of Naeem/Lhotak/Rodriguez










 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,










 //re-process that value, updating sCalledProcN's summary function,










 //because we have observed a potentially new incoming edge into <sP,d3>










 for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {










 N eP = entry.getRowKey();










 D d4 = entry.getColumnKey();










 EdgeFunction<V> fCalleeSummary = entry.getValue();










 //for each return site










 for(N retSiteN: icfg.getReturnSitesOfCallAt(n)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);










 flowFunctionConstructionCount++;










 //for each target value of the function










 for(D d5: retFunction.computeTargets(d4)) {










 //update the caller-side summary function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);










 synchronized (summaryFunctions) {



......@@ -325,7 +345,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 } 










 }










 }










 //line 17-19 of Naeem/Lhotak/Rodriguez










 //line 17-19 of Naeem/Lhotak/Rodriguez		










 //process intra-procedural flows along call-to-return flow functions










 //and along summary functions










 EdgeFunction<V> f = jumpFunction(edge);










 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);










 for (N returnSiteN : returnSiteNs) {



......@@ -357,9 +379,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final D d1 = edge.factAtSource();










 final D d2 = edge.factAtTarget();










 










 //for each of the method's start points










 for(N sP: icfg.getStartPointsOf(methodThatNeedsSummary)) {










 //line 21.1 of Naeem/Lhotak/Rodriguez










 










 //register end-summary










 Set<Entry<N, Set<D>>> inc;










 synchronized (incoming) {










 addEndSummary(sP, d1, n, d2, f);



......@@ -367,32 +391,44 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 inc = new HashSet<Map.Entry<N,Set<D>>>(incoming(d1, sP));










 }










 










 //for each incoming call edge already processed










 //(see processCall(..))










 for (Entry<N,Set<D>> entry: inc) {










 //line 22










 N c = entry.getKey();










 //for each return site










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 //update callee-side summary functions










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 EdgeFunction<V> fPrime;










 boolean updatedSummary = false;










 synchronized (summaryFunctions) {










 EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(c,d4,retSiteC).get(d5); 










 if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper










 fPrime = f4.composeWith(f).composeWith(f5).joinWith(summaryFunction);










 if(!fPrime.equalTo(summaryFunction)) {










 summaryFunctions.insertFunction(c,d4,retSiteC,d5,fPrime);










 updatedSummary = true;










 }










 }










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)); {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 //propagate caller-side intra-procedural flows according to updated summary functions










 if(updatedSummary) {










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)); {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 }










 }










 }










 }



......@@ -404,6 +440,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 /**










	 * Lines 33-37 of the algorithm.










	 * Simply propagate normal, intra-procedural flows.










	 * @param edge










	 */










 private void processNormalFlow(PathEdge<N,D,M> edge) {



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
2026bb15


authored
Dec 12, 2012
by


Eric Bodden



Browse files




implemented a small optimization in processExit: propagate intra-procedural...

implemented a small optimization in processExit: propagate intra-procedural flows only if summary function was updated
also added implementation-level comments






parent
bcfdf777













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/IDESolver.java








View file @ 2026bb15






......@@ -275,7 +275,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 /**










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context.










	 * 










	 * For each possible callee, registers incoming call edges and updates the callee's summary










	 * functions for each already-queried endSummary.










	 * Also propagates call-to-return flows and summarized flows intra-procedurally. 










	 * 










	 * @param edge an edge whose target node resembles a method call










	 */










 private void processCall(PathEdge<N,D,M> edge) {



......@@ -283,15 +288,23 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final N n = edge.getTarget(); // a call node; line 14...










 final D d2 = edge.factAtTarget();










 










 //for each possible callee










 Set<M> callees = icfg.getCalleesOfCallAt(n);










 for(M sCalledProcN: callees) { //still line 14










 










 //compute the call-flow function










 FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);










 flowFunctionConstructionCount++;










 Set<D> res = function.computeTargets(d2);










 for(N sP: icfg.getStartPointsOf(sCalledProcN)) { 










 










 //for each callee's start point(s)










 for(N sP: icfg.getStartPointsOf(sCalledProcN)) { 










 //for each result node of the call-flow function










 for(D d3: res) {










 //create initial self-loop










 propagate(d3, sP, d3, EdgeIdentity.<V>v()); //line 15










 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>










 Set<Cell<N, D, EdgeFunction<V>>> endSumm;










 synchronized (incoming) {










 //line 15.1 of Naeem/Lhotak/Rodriguez



......@@ -301,14 +314,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 //still line 15.2 of Naeem/Lhotak/Rodriguez










 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,










 //re-process that value, updating sCalledProcN's summary function,










 //because we have observed a potentially new incoming edge into <sP,d3>










 for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {










 N eP = entry.getRowKey();










 D d4 = entry.getColumnKey();










 EdgeFunction<V> fCalleeSummary = entry.getValue();










 //for each return site










 for(N retSiteN: icfg.getReturnSitesOfCallAt(n)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);










 flowFunctionConstructionCount++;










 //for each target value of the function










 for(D d5: retFunction.computeTargets(d4)) {










 //update the caller-side summary function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);










 synchronized (summaryFunctions) {



......@@ -325,7 +345,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 } 










 }










 }










 //line 17-19 of Naeem/Lhotak/Rodriguez










 //line 17-19 of Naeem/Lhotak/Rodriguez		










 //process intra-procedural flows along call-to-return flow functions










 //and along summary functions










 EdgeFunction<V> f = jumpFunction(edge);










 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);










 for (N returnSiteN : returnSiteNs) {



......@@ -357,9 +379,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final D d1 = edge.factAtSource();










 final D d2 = edge.factAtTarget();










 










 //for each of the method's start points










 for(N sP: icfg.getStartPointsOf(methodThatNeedsSummary)) {










 //line 21.1 of Naeem/Lhotak/Rodriguez










 










 //register end-summary










 Set<Entry<N, Set<D>>> inc;










 synchronized (incoming) {










 addEndSummary(sP, d1, n, d2, f);



......@@ -367,32 +391,44 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 inc = new HashSet<Map.Entry<N,Set<D>>>(incoming(d1, sP));










 }










 










 //for each incoming call edge already processed










 //(see processCall(..))










 for (Entry<N,Set<D>> entry: inc) {










 //line 22










 N c = entry.getKey();










 //for each return site










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 //update callee-side summary functions










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 EdgeFunction<V> fPrime;










 boolean updatedSummary = false;










 synchronized (summaryFunctions) {










 EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(c,d4,retSiteC).get(d5); 










 if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper










 fPrime = f4.composeWith(f).composeWith(f5).joinWith(summaryFunction);










 if(!fPrime.equalTo(summaryFunction)) {










 summaryFunctions.insertFunction(c,d4,retSiteC,d5,fPrime);










 updatedSummary = true;










 }










 }










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)); {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 //propagate caller-side intra-procedural flows according to updated summary functions










 if(updatedSummary) {










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)); {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 }










 }










 }










 }



......@@ -404,6 +440,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 /**










	 * Lines 33-37 of the algorithm.










	 * Simply propagate normal, intra-procedural flows.










	 * @param edge










	 */










 private void processNormalFlow(PathEdge<N,D,M> edge) {



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
2026bb15


authored
Dec 12, 2012
by


Eric Bodden



Browse files



Commit
2026bb15


authored
Dec 12, 2012
by


Eric Bodden

2026bb15authoredbyEric Bodden

implemented a small optimization in processExit: propagate intra-procedural...

implemented a small optimization in processExit: propagate intra-procedural flows only if summary function was updated
also added implementation-level comments





parent
bcfdf777
















parent
bcfdf777





parent












Changes
1
1


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/solver/IDESolver.java








View file @ 2026bb15






......@@ -275,7 +275,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 /**










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context.










	 * 










	 * For each possible callee, registers incoming call edges and updates the callee's summary










	 * functions for each already-queried endSummary.










	 * Also propagates call-to-return flows and summarized flows intra-procedurally. 










	 * 










	 * @param edge an edge whose target node resembles a method call










	 */










 private void processCall(PathEdge<N,D,M> edge) {



......@@ -283,15 +288,23 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final N n = edge.getTarget(); // a call node; line 14...










 final D d2 = edge.factAtTarget();










 










 //for each possible callee










 Set<M> callees = icfg.getCalleesOfCallAt(n);










 for(M sCalledProcN: callees) { //still line 14










 










 //compute the call-flow function










 FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);










 flowFunctionConstructionCount++;










 Set<D> res = function.computeTargets(d2);










 for(N sP: icfg.getStartPointsOf(sCalledProcN)) { 










 










 //for each callee's start point(s)










 for(N sP: icfg.getStartPointsOf(sCalledProcN)) { 










 //for each result node of the call-flow function










 for(D d3: res) {










 //create initial self-loop










 propagate(d3, sP, d3, EdgeIdentity.<V>v()); //line 15










 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>










 Set<Cell<N, D, EdgeFunction<V>>> endSumm;










 synchronized (incoming) {










 //line 15.1 of Naeem/Lhotak/Rodriguez



......@@ -301,14 +314,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 //still line 15.2 of Naeem/Lhotak/Rodriguez










 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,










 //re-process that value, updating sCalledProcN's summary function,










 //because we have observed a potentially new incoming edge into <sP,d3>










 for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {










 N eP = entry.getRowKey();










 D d4 = entry.getColumnKey();










 EdgeFunction<V> fCalleeSummary = entry.getValue();










 //for each return site










 for(N retSiteN: icfg.getReturnSitesOfCallAt(n)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);










 flowFunctionConstructionCount++;










 //for each target value of the function










 for(D d5: retFunction.computeTargets(d4)) {










 //update the caller-side summary function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);










 synchronized (summaryFunctions) {



......@@ -325,7 +345,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 } 










 }










 }










 //line 17-19 of Naeem/Lhotak/Rodriguez










 //line 17-19 of Naeem/Lhotak/Rodriguez		










 //process intra-procedural flows along call-to-return flow functions










 //and along summary functions










 EdgeFunction<V> f = jumpFunction(edge);










 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);










 for (N returnSiteN : returnSiteNs) {



......@@ -357,9 +379,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final D d1 = edge.factAtSource();










 final D d2 = edge.factAtTarget();










 










 //for each of the method's start points










 for(N sP: icfg.getStartPointsOf(methodThatNeedsSummary)) {










 //line 21.1 of Naeem/Lhotak/Rodriguez










 










 //register end-summary










 Set<Entry<N, Set<D>>> inc;










 synchronized (incoming) {










 addEndSummary(sP, d1, n, d2, f);



......@@ -367,32 +391,44 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 inc = new HashSet<Map.Entry<N,Set<D>>>(incoming(d1, sP));










 }










 










 //for each incoming call edge already processed










 //(see processCall(..))










 for (Entry<N,Set<D>> entry: inc) {










 //line 22










 N c = entry.getKey();










 //for each return site










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 //update callee-side summary functions










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 EdgeFunction<V> fPrime;










 boolean updatedSummary = false;










 synchronized (summaryFunctions) {










 EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(c,d4,retSiteC).get(d5); 










 if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper










 fPrime = f4.composeWith(f).composeWith(f5).joinWith(summaryFunction);










 if(!fPrime.equalTo(summaryFunction)) {










 summaryFunctions.insertFunction(c,d4,retSiteC,d5,fPrime);










 updatedSummary = true;










 }










 }










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)); {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 //propagate caller-side intra-procedural flows according to updated summary functions










 if(updatedSummary) {










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)); {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 }










 }










 }










 }



......@@ -404,6 +440,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 /**










	 * Lines 33-37 of the algorithm.










	 * Simply propagate normal, intra-procedural flows.










	 * @param edge










	 */










 private void processNormalFlow(PathEdge<N,D,M> edge) {



......














src/heros/solver/IDESolver.java








View file @ 2026bb15






......@@ -275,7 +275,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 /**










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context.










	 * 










	 * For each possible callee, registers incoming call edges and updates the callee's summary










	 * functions for each already-queried endSummary.










	 * Also propagates call-to-return flows and summarized flows intra-procedurally. 










	 * 










	 * @param edge an edge whose target node resembles a method call










	 */










 private void processCall(PathEdge<N,D,M> edge) {



......@@ -283,15 +288,23 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final N n = edge.getTarget(); // a call node; line 14...










 final D d2 = edge.factAtTarget();










 










 //for each possible callee










 Set<M> callees = icfg.getCalleesOfCallAt(n);










 for(M sCalledProcN: callees) { //still line 14










 










 //compute the call-flow function










 FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);










 flowFunctionConstructionCount++;










 Set<D> res = function.computeTargets(d2);










 for(N sP: icfg.getStartPointsOf(sCalledProcN)) { 










 










 //for each callee's start point(s)










 for(N sP: icfg.getStartPointsOf(sCalledProcN)) { 










 //for each result node of the call-flow function










 for(D d3: res) {










 //create initial self-loop










 propagate(d3, sP, d3, EdgeIdentity.<V>v()); //line 15










 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>










 Set<Cell<N, D, EdgeFunction<V>>> endSumm;










 synchronized (incoming) {










 //line 15.1 of Naeem/Lhotak/Rodriguez



......@@ -301,14 +314,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 //still line 15.2 of Naeem/Lhotak/Rodriguez










 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,










 //re-process that value, updating sCalledProcN's summary function,










 //because we have observed a potentially new incoming edge into <sP,d3>










 for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {










 N eP = entry.getRowKey();










 D d4 = entry.getColumnKey();










 EdgeFunction<V> fCalleeSummary = entry.getValue();










 //for each return site










 for(N retSiteN: icfg.getReturnSitesOfCallAt(n)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);










 flowFunctionConstructionCount++;










 //for each target value of the function










 for(D d5: retFunction.computeTargets(d4)) {










 //update the caller-side summary function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);










 synchronized (summaryFunctions) {



......@@ -325,7 +345,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 } 










 }










 }










 //line 17-19 of Naeem/Lhotak/Rodriguez










 //line 17-19 of Naeem/Lhotak/Rodriguez		










 //process intra-procedural flows along call-to-return flow functions










 //and along summary functions










 EdgeFunction<V> f = jumpFunction(edge);










 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);










 for (N returnSiteN : returnSiteNs) {



......@@ -357,9 +379,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final D d1 = edge.factAtSource();










 final D d2 = edge.factAtTarget();










 










 //for each of the method's start points










 for(N sP: icfg.getStartPointsOf(methodThatNeedsSummary)) {










 //line 21.1 of Naeem/Lhotak/Rodriguez










 










 //register end-summary










 Set<Entry<N, Set<D>>> inc;










 synchronized (incoming) {










 addEndSummary(sP, d1, n, d2, f);



......@@ -367,32 +391,44 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 inc = new HashSet<Map.Entry<N,Set<D>>>(incoming(d1, sP));










 }










 










 //for each incoming call edge already processed










 //(see processCall(..))










 for (Entry<N,Set<D>> entry: inc) {










 //line 22










 N c = entry.getKey();










 //for each return site










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 //update callee-side summary functions










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 EdgeFunction<V> fPrime;










 boolean updatedSummary = false;










 synchronized (summaryFunctions) {










 EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(c,d4,retSiteC).get(d5); 










 if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper










 fPrime = f4.composeWith(f).composeWith(f5).joinWith(summaryFunction);










 if(!fPrime.equalTo(summaryFunction)) {










 summaryFunctions.insertFunction(c,d4,retSiteC,d5,fPrime);










 updatedSummary = true;










 }










 }










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)); {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 //propagate caller-side intra-procedural flows according to updated summary functions










 if(updatedSummary) {










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)); {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 }










 }










 }










 }



......@@ -404,6 +440,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 /**










	 * Lines 33-37 of the algorithm.










	 * Simply propagate normal, intra-procedural flows.










	 * @param edge










	 */










 private void processNormalFlow(PathEdge<N,D,M> edge) {



......












src/heros/solver/IDESolver.java








View file @ 2026bb15








src/heros/solver/IDESolver.java










View file @ 2026bb15


2026bb15



......@@ -275,7 +275,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 /**










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context.










	 * 










	 * For each possible callee, registers incoming call edges and updates the callee's summary










	 * functions for each already-queried endSummary.










	 * Also propagates call-to-return flows and summarized flows intra-procedurally. 










	 * 










	 * @param edge an edge whose target node resembles a method call










	 */










 private void processCall(PathEdge<N,D,M> edge) {



......@@ -283,15 +288,23 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final N n = edge.getTarget(); // a call node; line 14...










 final D d2 = edge.factAtTarget();










 










 //for each possible callee










 Set<M> callees = icfg.getCalleesOfCallAt(n);










 for(M sCalledProcN: callees) { //still line 14










 










 //compute the call-flow function










 FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);










 flowFunctionConstructionCount++;










 Set<D> res = function.computeTargets(d2);










 for(N sP: icfg.getStartPointsOf(sCalledProcN)) { 










 










 //for each callee's start point(s)










 for(N sP: icfg.getStartPointsOf(sCalledProcN)) { 










 //for each result node of the call-flow function










 for(D d3: res) {










 //create initial self-loop










 propagate(d3, sP, d3, EdgeIdentity.<V>v()); //line 15










 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>










 Set<Cell<N, D, EdgeFunction<V>>> endSumm;










 synchronized (incoming) {










 //line 15.1 of Naeem/Lhotak/Rodriguez



......@@ -301,14 +314,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 //still line 15.2 of Naeem/Lhotak/Rodriguez










 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,










 //re-process that value, updating sCalledProcN's summary function,










 //because we have observed a potentially new incoming edge into <sP,d3>










 for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {










 N eP = entry.getRowKey();










 D d4 = entry.getColumnKey();










 EdgeFunction<V> fCalleeSummary = entry.getValue();










 //for each return site










 for(N retSiteN: icfg.getReturnSitesOfCallAt(n)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);










 flowFunctionConstructionCount++;










 //for each target value of the function










 for(D d5: retFunction.computeTargets(d4)) {










 //update the caller-side summary function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);










 synchronized (summaryFunctions) {



......@@ -325,7 +345,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 } 










 }










 }










 //line 17-19 of Naeem/Lhotak/Rodriguez










 //line 17-19 of Naeem/Lhotak/Rodriguez		










 //process intra-procedural flows along call-to-return flow functions










 //and along summary functions










 EdgeFunction<V> f = jumpFunction(edge);










 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);










 for (N returnSiteN : returnSiteNs) {



......@@ -357,9 +379,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final D d1 = edge.factAtSource();










 final D d2 = edge.factAtTarget();










 










 //for each of the method's start points










 for(N sP: icfg.getStartPointsOf(methodThatNeedsSummary)) {










 //line 21.1 of Naeem/Lhotak/Rodriguez










 










 //register end-summary










 Set<Entry<N, Set<D>>> inc;










 synchronized (incoming) {










 addEndSummary(sP, d1, n, d2, f);



......@@ -367,32 +391,44 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 inc = new HashSet<Map.Entry<N,Set<D>>>(incoming(d1, sP));










 }










 










 //for each incoming call edge already processed










 //(see processCall(..))










 for (Entry<N,Set<D>> entry: inc) {










 //line 22










 N c = entry.getKey();










 //for each return site










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 //update callee-side summary functions










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 EdgeFunction<V> fPrime;










 boolean updatedSummary = false;










 synchronized (summaryFunctions) {










 EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(c,d4,retSiteC).get(d5); 










 if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper










 fPrime = f4.composeWith(f).composeWith(f5).joinWith(summaryFunction);










 if(!fPrime.equalTo(summaryFunction)) {










 summaryFunctions.insertFunction(c,d4,retSiteC,d5,fPrime);










 updatedSummary = true;










 }










 }










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)); {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 //propagate caller-side intra-procedural flows according to updated summary functions










 if(updatedSummary) {










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)); {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 }










 }










 }










 }



......@@ -404,6 +440,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 /**










	 * Lines 33-37 of the algorithm.










	 * Simply propagate normal, intra-procedural flows.










	 * @param edge










	 */










 private void processNormalFlow(PathEdge<N,D,M> edge) {



......






......@@ -275,7 +275,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 /**










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context










	 * Lines 13-20 of the algorithm; processing a call site in the caller's context.










	 * 










	 * For each possible callee, registers incoming call edges and updates the callee's summary










	 * functions for each already-queried endSummary.










	 * Also propagates call-to-return flows and summarized flows intra-procedurally. 










	 * 










	 * @param edge an edge whose target node resembles a method call










	 */










 private void processCall(PathEdge<N,D,M> edge) {



......@@ -283,15 +288,23 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final N n = edge.getTarget(); // a call node; line 14...










 final D d2 = edge.factAtTarget();










 










 //for each possible callee










 Set<M> callees = icfg.getCalleesOfCallAt(n);










 for(M sCalledProcN: callees) { //still line 14










 










 //compute the call-flow function










 FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);










 flowFunctionConstructionCount++;










 Set<D> res = function.computeTargets(d2);










 for(N sP: icfg.getStartPointsOf(sCalledProcN)) { 










 










 //for each callee's start point(s)










 for(N sP: icfg.getStartPointsOf(sCalledProcN)) { 










 //for each result node of the call-flow function










 for(D d3: res) {










 //create initial self-loop










 propagate(d3, sP, d3, EdgeIdentity.<V>v()); //line 15










 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>










 Set<Cell<N, D, EdgeFunction<V>>> endSumm;










 synchronized (incoming) {










 //line 15.1 of Naeem/Lhotak/Rodriguez



......@@ -301,14 +314,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 //still line 15.2 of Naeem/Lhotak/Rodriguez










 //for each already-queried exit value <eP,d4> reachable from <sP,d3>,










 //re-process that value, updating sCalledProcN's summary function,










 //because we have observed a potentially new incoming edge into <sP,d3>










 for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {










 N eP = entry.getRowKey();










 D d4 = entry.getColumnKey();










 EdgeFunction<V> fCalleeSummary = entry.getValue();










 //for each return site










 for(N retSiteN: icfg.getReturnSitesOfCallAt(n)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);










 flowFunctionConstructionCount++;










 //for each target value of the function










 for(D d5: retFunction.computeTargets(d4)) {










 //update the caller-side summary function










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);










 synchronized (summaryFunctions) {



......@@ -325,7 +345,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 } 










 }










 }










 //line 17-19 of Naeem/Lhotak/Rodriguez










 //line 17-19 of Naeem/Lhotak/Rodriguez		










 //process intra-procedural flows along call-to-return flow functions










 //and along summary functions










 EdgeFunction<V> f = jumpFunction(edge);










 List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);










 for (N returnSiteN : returnSiteNs) {



......@@ -357,9 +379,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 final D d1 = edge.factAtSource();










 final D d2 = edge.factAtTarget();










 










 //for each of the method's start points










 for(N sP: icfg.getStartPointsOf(methodThatNeedsSummary)) {










 //line 21.1 of Naeem/Lhotak/Rodriguez










 










 //register end-summary










 Set<Entry<N, Set<D>>> inc;










 synchronized (incoming) {










 addEndSummary(sP, d1, n, d2, f);



......@@ -367,32 +391,44 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 inc = new HashSet<Map.Entry<N,Set<D>>>(incoming(d1, sP));










 }










 










 //for each incoming call edge already processed










 //(see processCall(..))










 for (Entry<N,Set<D>> entry: inc) {










 //line 22










 N c = entry.getKey();










 //for each return site










 for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {










 //compute return-flow function










 FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 flowFunctionConstructionCount++;










 Set<D> targets = retFunction.computeTargets(d2);










 //for each incoming-call value










 for(D d4: entry.getValue()) {










 //for each target value at the return site










 //line 23










 for(D d5: targets) {










 //update callee-side summary functions










 EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);










 EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);










 EdgeFunction<V> fPrime;










 boolean updatedSummary = false;










 synchronized (summaryFunctions) {










 EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(c,d4,retSiteC).get(d5); 










 if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paper










 fPrime = f4.composeWith(f).composeWith(f5).joinWith(summaryFunction);










 if(!fPrime.equalTo(summaryFunction)) {










 summaryFunctions.insertFunction(c,d4,retSiteC,d5,fPrime);










 updatedSummary = true;










 }










 }










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)); {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 //propagate caller-side intra-procedural flows according to updated summary functions










 if(updatedSummary) {










 for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {










 EdgeFunction<V> f3 = valAndFunc.getValue();










 if(!f3.equalTo(allTop)); {










 D d3 = valAndFunc.getKey();










 propagate(d3, retSiteC, d5, f3.composeWith(fPrime));










 }










 }










 }










 }



......@@ -404,6 +440,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 /**










	 * Lines 33-37 of the algorithm.










	 * Simply propagate normal, intra-procedural flows.










	 * @param edge










	 */










 private void processNormalFlow(PathEdge<N,D,M> edge) {



......


 }}  /**/**	 * Lines 13-20 of the algorithm; processing a call site in the caller's context	 * Lines 13-20 of the algorithm; processing a call site in the caller's context	 * Lines 13-20 of the algorithm; processing a call site in the caller's context.	 * Lines 13-20 of the algorithm; processing a call site in the caller's context.	 * 	 * 	 * For each possible callee, registers incoming call edges and updates the callee's summary	 * For each possible callee, registers incoming call edges and updates the callee's summary	 * functions for each already-queried endSummary.	 * functions for each already-queried endSummary.	 * Also propagates call-to-return flows and summarized flows intra-procedurally. 	 * Also propagates call-to-return flows and summarized flows intra-procedurally. 	 * 	 * 	 * @param edge an edge whose target node resembles a method call	 * @param edge an edge whose target node resembles a method call	 */	 */ private void processCall(PathEdge<N,D,M> edge) {privatevoidprocessCall(PathEdge<N,D,M>edge){ final N n = edge.getTarget(); // a call node; line 14...finalNn=edge.getTarget();// a call node; line 14... final D d2 = edge.factAtTarget();finalDd2=edge.factAtTarget();  //for each possible callee//for each possible callee Set<M> callees = icfg.getCalleesOfCallAt(n);Set<M>callees=icfg.getCalleesOfCallAt(n); for(M sCalledProcN: callees) { //still line 14for(MsCalledProcN:callees){//still line 14  //compute the call-flow function//compute the call-flow function FlowFunction<D> function = flowFunctions.getCallFlowFunction(n, sCalledProcN);FlowFunction<D>function=flowFunctions.getCallFlowFunction(n,sCalledProcN); flowFunctionConstructionCount++;flowFunctionConstructionCount++; Set<D> res = function.computeTargets(d2);Set<D>res=function.computeTargets(d2); for(N sP: icfg.getStartPointsOf(sCalledProcN)) { for(NsP:icfg.getStartPointsOf(sCalledProcN)){  //for each callee's start point(s)//for each callee's start point(s) for(N sP: icfg.getStartPointsOf(sCalledProcN)) { for(NsP:icfg.getStartPointsOf(sCalledProcN)){ //for each result node of the call-flow function//for each result node of the call-flow function for(D d3: res) {for(Dd3:res){ //create initial self-loop//create initial self-loop propagate(d3, sP, d3, EdgeIdentity.<V>v()); //line 15propagate(d3,sP,d3,EdgeIdentity.<V>v());//line 15  //register the fact that <sp,d3> has an incoming edge from <n,d2>//register the fact that <sp,d3> has an incoming edge from <n,d2> Set<Cell<N, D, EdgeFunction<V>>> endSumm;Set<Cell<N,D,EdgeFunction<V>>>endSumm; synchronized (incoming) {synchronized(incoming){ //line 15.1 of Naeem/Lhotak/Rodriguez//line 15.1 of Naeem/Lhotak/Rodriguez }}  //still line 15.2 of Naeem/Lhotak/Rodriguez//still line 15.2 of Naeem/Lhotak/Rodriguez //for each already-queried exit value <eP,d4> reachable from <sP,d3>,//for each already-queried exit value <eP,d4> reachable from <sP,d3>, //re-process that value, updating sCalledProcN's summary function,//re-process that value, updating sCalledProcN's summary function, //because we have observed a potentially new incoming edge into <sP,d3>//because we have observed a potentially new incoming edge into <sP,d3> for(Cell<N, D, EdgeFunction<V>> entry: endSumm) {for(Cell<N,D,EdgeFunction<V>>entry:endSumm){ N eP = entry.getRowKey();NeP=entry.getRowKey(); D d4 = entry.getColumnKey();Dd4=entry.getColumnKey(); EdgeFunction<V> fCalleeSummary = entry.getValue();EdgeFunction<V>fCalleeSummary=entry.getValue(); //for each return site//for each return site for(N retSiteN: icfg.getReturnSitesOfCallAt(n)) {for(NretSiteN:icfg.getReturnSitesOfCallAt(n)){ //compute return-flow function//compute return-flow function FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(n, sCalledProcN, eP, retSiteN);FlowFunction<D>retFunction=flowFunctions.getReturnFlowFunction(n,sCalledProcN,eP,retSiteN); flowFunctionConstructionCount++;flowFunctionConstructionCount++; //for each target value of the function//for each target value of the function for(D d5: retFunction.computeTargets(d4)) {for(Dd5:retFunction.computeTargets(d4)){ //update the caller-side summary function//update the caller-side summary function EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(n, d2, sCalledProcN, d3);EdgeFunction<V>f4=edgeFunctions.getCallEdgeFunction(n,d2,sCalledProcN,d3); EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(n, sCalledProcN, eP, d4, retSiteN, d5);EdgeFunction<V>f5=edgeFunctions.getReturnEdgeFunction(n,sCalledProcN,eP,d4,retSiteN,d5); synchronized (summaryFunctions) {synchronized(summaryFunctions){ } } }} }} //line 17-19 of Naeem/Lhotak/Rodriguez//line 17-19 of Naeem/Lhotak/Rodriguez //line 17-19 of Naeem/Lhotak/Rodriguez		//line 17-19 of Naeem/Lhotak/Rodriguez		 //process intra-procedural flows along call-to-return flow functions//process intra-procedural flows along call-to-return flow functions //and along summary functions//and along summary functions EdgeFunction<V> f = jumpFunction(edge);EdgeFunction<V>f=jumpFunction(edge); List<N> returnSiteNs = icfg.getReturnSitesOfCallAt(n);List<N>returnSiteNs=icfg.getReturnSitesOfCallAt(n); for (N returnSiteN : returnSiteNs) {for(NreturnSiteN:returnSiteNs){ final D d1 = edge.factAtSource();finalDd1=edge.factAtSource(); final D d2 = edge.factAtTarget();finalDd2=edge.factAtTarget();  //for each of the method's start points//for each of the method's start points for(N sP: icfg.getStartPointsOf(methodThatNeedsSummary)) {for(NsP:icfg.getStartPointsOf(methodThatNeedsSummary)){ //line 21.1 of Naeem/Lhotak/Rodriguez//line 21.1 of Naeem/Lhotak/Rodriguez  //register end-summary//register end-summary Set<Entry<N, Set<D>>> inc;Set<Entry<N,Set<D>>>inc; synchronized (incoming) {synchronized(incoming){ addEndSummary(sP, d1, n, d2, f);addEndSummary(sP,d1,n,d2,f); inc = new HashSet<Map.Entry<N,Set<D>>>(incoming(d1, sP));inc=newHashSet<Map.Entry<N,Set<D>>>(incoming(d1,sP)); }}  //for each incoming call edge already processed//for each incoming call edge already processed //(see processCall(..))//(see processCall(..)) for (Entry<N,Set<D>> entry: inc) {for(Entry<N,Set<D>>entry:inc){ //line 22//line 22 N c = entry.getKey();Nc=entry.getKey(); //for each return site//for each return site for(N retSiteC: icfg.getReturnSitesOfCallAt(c)) {for(NretSiteC:icfg.getReturnSitesOfCallAt(c)){ //compute return-flow function//compute return-flow function FlowFunction<D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);FlowFunction<D>retFunction=flowFunctions.getReturnFlowFunction(c,methodThatNeedsSummary,n,retSiteC); flowFunctionConstructionCount++;flowFunctionConstructionCount++; Set<D> targets = retFunction.computeTargets(d2);Set<D>targets=retFunction.computeTargets(d2); //for each incoming-call value//for each incoming-call value for(D d4: entry.getValue()) {for(Dd4:entry.getValue()){ //for each target value at the return site//for each target value at the return site //line 23//line 23 for(D d5: targets) {for(Dd5:targets){ //update callee-side summary functions//update callee-side summary functions EdgeFunction<V> f4 = edgeFunctions.getCallEdgeFunction(c, d4, icfg.getMethodOf(n), d1);EdgeFunction<V>f4=edgeFunctions.getCallEdgeFunction(c,d4,icfg.getMethodOf(n),d1); EdgeFunction<V> f5 = edgeFunctions.getReturnEdgeFunction(c, icfg.getMethodOf(n), n, d2, retSiteC, d5);EdgeFunction<V>f5=edgeFunctions.getReturnEdgeFunction(c,icfg.getMethodOf(n),n,d2,retSiteC,d5); EdgeFunction<V> fPrime;EdgeFunction<V>fPrime; boolean updatedSummary = false;booleanupdatedSummary=false; synchronized (summaryFunctions) {synchronized(summaryFunctions){ EdgeFunction<V> summaryFunction = summaryFunctions.summariesFor(c,d4,retSiteC).get(d5); EdgeFunction<V>summaryFunction=summaryFunctions.summariesFor(c,d4,retSiteC).get(d5); if(summaryFunction==null) summaryFunction = allTop; //SummaryFn initialized to all-top, see line [4] in SRH96 paperif(summaryFunction==null)summaryFunction=allTop;//SummaryFn initialized to all-top, see line [4] in SRH96 paper fPrime = f4.composeWith(f).composeWith(f5).joinWith(summaryFunction);fPrime=f4.composeWith(f).composeWith(f5).joinWith(summaryFunction); if(!fPrime.equalTo(summaryFunction)) {if(!fPrime.equalTo(summaryFunction)){ summaryFunctions.insertFunction(c,d4,retSiteC,d5,fPrime);summaryFunctions.insertFunction(c,d4,retSiteC,d5,fPrime); updatedSummary = true;updatedSummary=true; }} }} for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {for(Map.Entry<D,EdgeFunction<V>>valAndFunc:jumpFn.reverseLookup(c,d4).entrySet()){ EdgeFunction<V> f3 = valAndFunc.getValue();EdgeFunction<V>f3=valAndFunc.getValue(); if(!f3.equalTo(allTop)); {if(!f3.equalTo(allTop));{ D d3 = valAndFunc.getKey();Dd3=valAndFunc.getKey(); propagate(d3, retSiteC, d5, f3.composeWith(fPrime));propagate(d3,retSiteC,d5,f3.composeWith(fPrime)); //propagate caller-side intra-procedural flows according to updated summary functions//propagate caller-side intra-procedural flows according to updated summary functions if(updatedSummary) {if(updatedSummary){ for(Map.Entry<D,EdgeFunction<V>> valAndFunc: jumpFn.reverseLookup(c,d4).entrySet()) {for(Map.Entry<D,EdgeFunction<V>>valAndFunc:jumpFn.reverseLookup(c,d4).entrySet()){ EdgeFunction<V> f3 = valAndFunc.getValue();EdgeFunction<V>f3=valAndFunc.getValue(); if(!f3.equalTo(allTop)); {if(!f3.equalTo(allTop));{ D d3 = valAndFunc.getKey();Dd3=valAndFunc.getKey(); propagate(d3, retSiteC, d5, f3.composeWith(fPrime));propagate(d3,retSiteC,d5,f3.composeWith(fPrime)); }} }} }} }}  /**/**	 * Lines 33-37 of the algorithm.	 * Lines 33-37 of the algorithm.	 * Simply propagate normal, intra-procedural flows.	 * Simply propagate normal, intra-procedural flows.	 * @param edge	 * @param edge	 */	 */ private void processNormalFlow(PathEdge<N,D,M> edge) {privatevoidprocessNormalFlow(PathEdge<N,D,M>edge){









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






