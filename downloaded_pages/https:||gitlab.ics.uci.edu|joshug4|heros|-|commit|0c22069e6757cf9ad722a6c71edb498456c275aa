



GitLab












Menu




Projects
Groups
Snippets


















/








Help







Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab












Menu




Projects
Groups
Snippets


















/








Help







Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab












Menu




Projects
Groups
Snippets



GitLab






GitLab




Menu




Projects
Groups
Snippets




Menu


Projects
Groups
Snippets















/








Help







Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in
















/














/








Help







Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help



Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab




Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

0c22069e















Commit
0c22069e


authored
Jul 09, 2015
by


Johannes Lerch



Browse files




skipping resolvers if interest is transitively given







parent
b651ea7e













Changes
9




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ 0c22069e






......@@ -64,8 +64,8 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(new WrappedFact<Field, Fact, Stmt, Method>(fact.getFact(), resolvedAccPath, resolver));










 ControlFlowJoinResolver.this.interest();










//				incomingEdges.add(new WrappedFact<Field, Fact, Stmt, Method>(fact.getFact(), resolvedAccPath, resolver));










 ControlFlowJoinResolver.this.interest(resolver);










 }





















 @Override



......














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ 0c22069e






......@@ -96,7 +96,7 @@ public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }





















 private void bootstrapAtMethodStartPoints() {










 callEdgeResolver.interest();










 callEdgeResolver.interest(callEdgeResolver);










 for(Stmt startPoint : context.icfg.getStartPointsOf(method)) {










 WrappedFactAtStatement<Field, Fact, Stmt, Method> target = new WrappedFactAtStatement<Field, Fact, Stmt, Method>(startPoint, wrappedSource());










 if(!reachableStatements.containsKey(target))



......














src/heros/fieldsens/Resolver.java








View file @ 0c22069e






......@@ -13,12 +13,14 @@ package heros.fieldsens;









import heros.fieldsens.FlowFunction.Constraint;





















import java.util.List;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Sets;





















public abstract class Resolver<Field, Fact, Stmt, Method> {





















 private boolean interest = false;










 private Set<Resolver<Field, Fact, Stmt, Method>> interest = Sets.newHashSet();










 private List<InterestCallback<Field, Fact, Stmt, Method>> interestCallbacks = Lists.newLinkedList();










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer;










 private boolean canBeResolvedEmpty = false;



......@@ -29,18 +31,14 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {




















 public abstract void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback);










 










 public void interest() {










 if(interest)










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(!interest.add(resolver))










 return;





















 log("Interest given");










 interest = true;










 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.interest(analyzer, this);










 callback.interest(analyzer, resolver);










 }










 










 if(canBeResolvedEmpty)










 interestCallbacks = null;










 }










 










 protected void canBeResolvedEmpty() {



......@@ -51,18 +49,16 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {









 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.canBeResolvedEmpty();










 }










 










 if(interest)










 interestCallbacks = null;










 }





















 public boolean isInterestGiven() {










 return interest;










 return !interest.isEmpty();










 }





















 protected void registerCallback(InterestCallback<Field, Fact, Stmt, Method> callback) {










 if(interest) {










 callback.interest(analyzer, this);










 if(!interest.isEmpty()) {










 for(Resolver<Field, Fact, Stmt, Method> resolver : interest)










 callback.interest(analyzer, resolver);










 }










 else {










 log("Callback registered");



......














src/heros/fieldsens/ResolverTemplate.java








View file @ 0c22069e






......@@ -13,6 +13,7 @@ package heros.fieldsens;









import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Sets;














......@@ -62,9 +63,9 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 if(!incomingEdges.add(inc))










 return;










 










 interest();










 interest(this);










 










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : nestedResolvers.values()) {










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : Lists.newLinkedList(nestedResolvers.values())) {










 nestedResolver.addIncoming(inc);










 }










 



......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ 0c22069e






......@@ -104,7 +104,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










 ReturnSiteResolver.this.interest(ReturnSiteResolver.this);










 }










 










 @Override



......@@ -119,7 +119,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath));










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest();










 interest(this);










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }



......@@ -132,8 +132,8 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(resolver);










 }










 










 @Override



......














src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ 0c22069e






......@@ -28,7 +28,7 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 }










 










 @Override










 public void interest() {










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 }










 










 @Override



......














test/heros/fieldsens/FieldSensitiveIFDSSolverTest.java








View file @ 0c22069e






......@@ -30,12 +30,12 @@ import static heros.utilities.FieldSensitiveTestHelper.*;









public class FieldSensitiveIFDSSolverTest {





















 private FieldSensitiveTestHelper helper;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 @Before










 public void before() {










 System.err.println("-----");










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 helper = new FieldSensitiveTestHelper(debugger);










 }










 



......@@ -718,7 +718,6 @@ public class FieldSensitiveIFDSSolverTest {









 normalStmt("f", flow("6", readField("f"), "7")).succ("g"),










 normalStmt("g", kill("7")).succ("h"));










 










 










 helper.runSolver(true, "a");










 }










 



......














test/heros/utilities/FieldSensitiveTestHelper.java








View file @ 0c22069e






......@@ -58,9 +58,9 @@ public class FieldSensitiveTestHelper {









 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, TestMethod> stmt2method = Maps.newHashMap();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger) {










 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod> debugger) {










 this.debugger = debugger;










 }














......














test/heros/utilities/TestDebugger.java








View file @ 0c22069e






......@@ -18,11 +18,14 @@ import com.google.common.collect.Sets;




















import heros.InterproceduralCFG;










import heros.fieldsens.Debugger;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










public class TestDebugger<Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 private JsonDocument root = new JsonDocument();










 private I icfg;










 private InterproceduralCFG<Stmt, Method> icfg;










 










 public void writeJsonDebugFile(String filename) {










 try {



......@@ -41,7 +44,7 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









	 * @see heros.alias.Debugger#setICFG(I)










	 */










 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 this.icfg = icfg;










 }














......@@ -108,4 +111,14 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 stmt(exitStmt).doc("returns").doc(returnSite.toString()).keyValue("flow", expectedFlowFunctionsToString);










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















}
















Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

0c22069e















Commit
0c22069e


authored
Jul 09, 2015
by


Johannes Lerch



Browse files




skipping resolvers if interest is transitively given







parent
b651ea7e













Changes
9




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ 0c22069e






......@@ -64,8 +64,8 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(new WrappedFact<Field, Fact, Stmt, Method>(fact.getFact(), resolvedAccPath, resolver));










 ControlFlowJoinResolver.this.interest();










//				incomingEdges.add(new WrappedFact<Field, Fact, Stmt, Method>(fact.getFact(), resolvedAccPath, resolver));










 ControlFlowJoinResolver.this.interest(resolver);










 }





















 @Override



......














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ 0c22069e






......@@ -96,7 +96,7 @@ public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }





















 private void bootstrapAtMethodStartPoints() {










 callEdgeResolver.interest();










 callEdgeResolver.interest(callEdgeResolver);










 for(Stmt startPoint : context.icfg.getStartPointsOf(method)) {










 WrappedFactAtStatement<Field, Fact, Stmt, Method> target = new WrappedFactAtStatement<Field, Fact, Stmt, Method>(startPoint, wrappedSource());










 if(!reachableStatements.containsKey(target))



......














src/heros/fieldsens/Resolver.java








View file @ 0c22069e






......@@ -13,12 +13,14 @@ package heros.fieldsens;









import heros.fieldsens.FlowFunction.Constraint;





















import java.util.List;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Sets;





















public abstract class Resolver<Field, Fact, Stmt, Method> {





















 private boolean interest = false;










 private Set<Resolver<Field, Fact, Stmt, Method>> interest = Sets.newHashSet();










 private List<InterestCallback<Field, Fact, Stmt, Method>> interestCallbacks = Lists.newLinkedList();










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer;










 private boolean canBeResolvedEmpty = false;



......@@ -29,18 +31,14 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {




















 public abstract void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback);










 










 public void interest() {










 if(interest)










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(!interest.add(resolver))










 return;





















 log("Interest given");










 interest = true;










 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.interest(analyzer, this);










 callback.interest(analyzer, resolver);










 }










 










 if(canBeResolvedEmpty)










 interestCallbacks = null;










 }










 










 protected void canBeResolvedEmpty() {



......@@ -51,18 +49,16 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {









 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.canBeResolvedEmpty();










 }










 










 if(interest)










 interestCallbacks = null;










 }





















 public boolean isInterestGiven() {










 return interest;










 return !interest.isEmpty();










 }





















 protected void registerCallback(InterestCallback<Field, Fact, Stmt, Method> callback) {










 if(interest) {










 callback.interest(analyzer, this);










 if(!interest.isEmpty()) {










 for(Resolver<Field, Fact, Stmt, Method> resolver : interest)










 callback.interest(analyzer, resolver);










 }










 else {










 log("Callback registered");



......














src/heros/fieldsens/ResolverTemplate.java








View file @ 0c22069e






......@@ -13,6 +13,7 @@ package heros.fieldsens;









import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Sets;














......@@ -62,9 +63,9 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 if(!incomingEdges.add(inc))










 return;










 










 interest();










 interest(this);










 










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : nestedResolvers.values()) {










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : Lists.newLinkedList(nestedResolvers.values())) {










 nestedResolver.addIncoming(inc);










 }










 



......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ 0c22069e






......@@ -104,7 +104,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










 ReturnSiteResolver.this.interest(ReturnSiteResolver.this);










 }










 










 @Override



......@@ -119,7 +119,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath));










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest();










 interest(this);










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }



......@@ -132,8 +132,8 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(resolver);










 }










 










 @Override



......














src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ 0c22069e






......@@ -28,7 +28,7 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 }










 










 @Override










 public void interest() {










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 }










 










 @Override



......














test/heros/fieldsens/FieldSensitiveIFDSSolverTest.java








View file @ 0c22069e






......@@ -30,12 +30,12 @@ import static heros.utilities.FieldSensitiveTestHelper.*;









public class FieldSensitiveIFDSSolverTest {





















 private FieldSensitiveTestHelper helper;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 @Before










 public void before() {










 System.err.println("-----");










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 helper = new FieldSensitiveTestHelper(debugger);










 }










 



......@@ -718,7 +718,6 @@ public class FieldSensitiveIFDSSolverTest {









 normalStmt("f", flow("6", readField("f"), "7")).succ("g"),










 normalStmt("g", kill("7")).succ("h"));










 










 










 helper.runSolver(true, "a");










 }










 



......














test/heros/utilities/FieldSensitiveTestHelper.java








View file @ 0c22069e






......@@ -58,9 +58,9 @@ public class FieldSensitiveTestHelper {









 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, TestMethod> stmt2method = Maps.newHashMap();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger) {










 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod> debugger) {










 this.debugger = debugger;










 }














......














test/heros/utilities/TestDebugger.java








View file @ 0c22069e






......@@ -18,11 +18,14 @@ import com.google.common.collect.Sets;




















import heros.InterproceduralCFG;










import heros.fieldsens.Debugger;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










public class TestDebugger<Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 private JsonDocument root = new JsonDocument();










 private I icfg;










 private InterproceduralCFG<Stmt, Method> icfg;










 










 public void writeJsonDebugFile(String filename) {










 try {



......@@ -41,7 +44,7 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









	 * @see heros.alias.Debugger#setICFG(I)










	 */










 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 this.icfg = icfg;










 }














......@@ -108,4 +111,14 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 stmt(exitStmt).doc("returns").doc(returnSite.toString()).keyValue("flow", expectedFlowFunctionsToString);










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















}
















Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

0c22069e







Open sidebar



Joshua Garcia heros
Commits

0c22069e




Open sidebar

Joshua Garcia heros
Commits

0c22069e


Joshua GarciaherosherosCommits
0c22069e








Commit
0c22069e


authored
Jul 09, 2015
by


Johannes Lerch



Browse files




skipping resolvers if interest is transitively given







parent
b651ea7e













Changes
9




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ 0c22069e






......@@ -64,8 +64,8 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(new WrappedFact<Field, Fact, Stmt, Method>(fact.getFact(), resolvedAccPath, resolver));










 ControlFlowJoinResolver.this.interest();










//				incomingEdges.add(new WrappedFact<Field, Fact, Stmt, Method>(fact.getFact(), resolvedAccPath, resolver));










 ControlFlowJoinResolver.this.interest(resolver);










 }





















 @Override



......














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ 0c22069e






......@@ -96,7 +96,7 @@ public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }





















 private void bootstrapAtMethodStartPoints() {










 callEdgeResolver.interest();










 callEdgeResolver.interest(callEdgeResolver);










 for(Stmt startPoint : context.icfg.getStartPointsOf(method)) {










 WrappedFactAtStatement<Field, Fact, Stmt, Method> target = new WrappedFactAtStatement<Field, Fact, Stmt, Method>(startPoint, wrappedSource());










 if(!reachableStatements.containsKey(target))



......














src/heros/fieldsens/Resolver.java








View file @ 0c22069e






......@@ -13,12 +13,14 @@ package heros.fieldsens;









import heros.fieldsens.FlowFunction.Constraint;





















import java.util.List;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Sets;





















public abstract class Resolver<Field, Fact, Stmt, Method> {





















 private boolean interest = false;










 private Set<Resolver<Field, Fact, Stmt, Method>> interest = Sets.newHashSet();










 private List<InterestCallback<Field, Fact, Stmt, Method>> interestCallbacks = Lists.newLinkedList();










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer;










 private boolean canBeResolvedEmpty = false;



......@@ -29,18 +31,14 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {




















 public abstract void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback);










 










 public void interest() {










 if(interest)










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(!interest.add(resolver))










 return;





















 log("Interest given");










 interest = true;










 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.interest(analyzer, this);










 callback.interest(analyzer, resolver);










 }










 










 if(canBeResolvedEmpty)










 interestCallbacks = null;










 }










 










 protected void canBeResolvedEmpty() {



......@@ -51,18 +49,16 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {









 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.canBeResolvedEmpty();










 }










 










 if(interest)










 interestCallbacks = null;










 }





















 public boolean isInterestGiven() {










 return interest;










 return !interest.isEmpty();










 }





















 protected void registerCallback(InterestCallback<Field, Fact, Stmt, Method> callback) {










 if(interest) {










 callback.interest(analyzer, this);










 if(!interest.isEmpty()) {










 for(Resolver<Field, Fact, Stmt, Method> resolver : interest)










 callback.interest(analyzer, resolver);










 }










 else {










 log("Callback registered");



......














src/heros/fieldsens/ResolverTemplate.java








View file @ 0c22069e






......@@ -13,6 +13,7 @@ package heros.fieldsens;









import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Sets;














......@@ -62,9 +63,9 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 if(!incomingEdges.add(inc))










 return;










 










 interest();










 interest(this);










 










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : nestedResolvers.values()) {










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : Lists.newLinkedList(nestedResolvers.values())) {










 nestedResolver.addIncoming(inc);










 }










 



......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ 0c22069e






......@@ -104,7 +104,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










 ReturnSiteResolver.this.interest(ReturnSiteResolver.this);










 }










 










 @Override



......@@ -119,7 +119,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath));










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest();










 interest(this);










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }



......@@ -132,8 +132,8 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(resolver);










 }










 










 @Override



......














src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ 0c22069e






......@@ -28,7 +28,7 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 }










 










 @Override










 public void interest() {










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 }










 










 @Override



......














test/heros/fieldsens/FieldSensitiveIFDSSolverTest.java








View file @ 0c22069e






......@@ -30,12 +30,12 @@ import static heros.utilities.FieldSensitiveTestHelper.*;









public class FieldSensitiveIFDSSolverTest {





















 private FieldSensitiveTestHelper helper;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 @Before










 public void before() {










 System.err.println("-----");










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 helper = new FieldSensitiveTestHelper(debugger);










 }










 



......@@ -718,7 +718,6 @@ public class FieldSensitiveIFDSSolverTest {









 normalStmt("f", flow("6", readField("f"), "7")).succ("g"),










 normalStmt("g", kill("7")).succ("h"));










 










 










 helper.runSolver(true, "a");










 }










 



......














test/heros/utilities/FieldSensitiveTestHelper.java








View file @ 0c22069e






......@@ -58,9 +58,9 @@ public class FieldSensitiveTestHelper {









 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, TestMethod> stmt2method = Maps.newHashMap();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger) {










 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod> debugger) {










 this.debugger = debugger;










 }














......














test/heros/utilities/TestDebugger.java








View file @ 0c22069e






......@@ -18,11 +18,14 @@ import com.google.common.collect.Sets;




















import heros.InterproceduralCFG;










import heros.fieldsens.Debugger;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










public class TestDebugger<Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 private JsonDocument root = new JsonDocument();










 private I icfg;










 private InterproceduralCFG<Stmt, Method> icfg;










 










 public void writeJsonDebugFile(String filename) {










 try {



......@@ -41,7 +44,7 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









	 * @see heros.alias.Debugger#setICFG(I)










	 */










 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 this.icfg = icfg;










 }














......@@ -108,4 +111,14 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 stmt(exitStmt).doc("returns").doc(returnSite.toString()).keyValue("flow", expectedFlowFunctionsToString);










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















}
















Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
0c22069e


authored
Jul 09, 2015
by


Johannes Lerch



Browse files




skipping resolvers if interest is transitively given







parent
b651ea7e













Changes
9




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ 0c22069e






......@@ -64,8 +64,8 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(new WrappedFact<Field, Fact, Stmt, Method>(fact.getFact(), resolvedAccPath, resolver));










 ControlFlowJoinResolver.this.interest();










//				incomingEdges.add(new WrappedFact<Field, Fact, Stmt, Method>(fact.getFact(), resolvedAccPath, resolver));










 ControlFlowJoinResolver.this.interest(resolver);










 }





















 @Override



......














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ 0c22069e






......@@ -96,7 +96,7 @@ public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }





















 private void bootstrapAtMethodStartPoints() {










 callEdgeResolver.interest();










 callEdgeResolver.interest(callEdgeResolver);










 for(Stmt startPoint : context.icfg.getStartPointsOf(method)) {










 WrappedFactAtStatement<Field, Fact, Stmt, Method> target = new WrappedFactAtStatement<Field, Fact, Stmt, Method>(startPoint, wrappedSource());










 if(!reachableStatements.containsKey(target))



......














src/heros/fieldsens/Resolver.java








View file @ 0c22069e






......@@ -13,12 +13,14 @@ package heros.fieldsens;









import heros.fieldsens.FlowFunction.Constraint;





















import java.util.List;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Sets;





















public abstract class Resolver<Field, Fact, Stmt, Method> {





















 private boolean interest = false;










 private Set<Resolver<Field, Fact, Stmt, Method>> interest = Sets.newHashSet();










 private List<InterestCallback<Field, Fact, Stmt, Method>> interestCallbacks = Lists.newLinkedList();










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer;










 private boolean canBeResolvedEmpty = false;



......@@ -29,18 +31,14 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {




















 public abstract void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback);










 










 public void interest() {










 if(interest)










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(!interest.add(resolver))










 return;





















 log("Interest given");










 interest = true;










 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.interest(analyzer, this);










 callback.interest(analyzer, resolver);










 }










 










 if(canBeResolvedEmpty)










 interestCallbacks = null;










 }










 










 protected void canBeResolvedEmpty() {



......@@ -51,18 +49,16 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {









 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.canBeResolvedEmpty();










 }










 










 if(interest)










 interestCallbacks = null;










 }





















 public boolean isInterestGiven() {










 return interest;










 return !interest.isEmpty();










 }





















 protected void registerCallback(InterestCallback<Field, Fact, Stmt, Method> callback) {










 if(interest) {










 callback.interest(analyzer, this);










 if(!interest.isEmpty()) {










 for(Resolver<Field, Fact, Stmt, Method> resolver : interest)










 callback.interest(analyzer, resolver);










 }










 else {










 log("Callback registered");



......














src/heros/fieldsens/ResolverTemplate.java








View file @ 0c22069e






......@@ -13,6 +13,7 @@ package heros.fieldsens;









import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Sets;














......@@ -62,9 +63,9 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 if(!incomingEdges.add(inc))










 return;










 










 interest();










 interest(this);










 










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : nestedResolvers.values()) {










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : Lists.newLinkedList(nestedResolvers.values())) {










 nestedResolver.addIncoming(inc);










 }










 



......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ 0c22069e






......@@ -104,7 +104,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










 ReturnSiteResolver.this.interest(ReturnSiteResolver.this);










 }










 










 @Override



......@@ -119,7 +119,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath));










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest();










 interest(this);










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }



......@@ -132,8 +132,8 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(resolver);










 }










 










 @Override



......














src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ 0c22069e






......@@ -28,7 +28,7 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 }










 










 @Override










 public void interest() {










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 }










 










 @Override



......














test/heros/fieldsens/FieldSensitiveIFDSSolverTest.java








View file @ 0c22069e






......@@ -30,12 +30,12 @@ import static heros.utilities.FieldSensitiveTestHelper.*;









public class FieldSensitiveIFDSSolverTest {





















 private FieldSensitiveTestHelper helper;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 @Before










 public void before() {










 System.err.println("-----");










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 helper = new FieldSensitiveTestHelper(debugger);










 }










 



......@@ -718,7 +718,6 @@ public class FieldSensitiveIFDSSolverTest {









 normalStmt("f", flow("6", readField("f"), "7")).succ("g"),










 normalStmt("g", kill("7")).succ("h"));










 










 










 helper.runSolver(true, "a");










 }










 



......














test/heros/utilities/FieldSensitiveTestHelper.java








View file @ 0c22069e






......@@ -58,9 +58,9 @@ public class FieldSensitiveTestHelper {









 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, TestMethod> stmt2method = Maps.newHashMap();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger) {










 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod> debugger) {










 this.debugger = debugger;










 }














......














test/heros/utilities/TestDebugger.java








View file @ 0c22069e






......@@ -18,11 +18,14 @@ import com.google.common.collect.Sets;




















import heros.InterproceduralCFG;










import heros.fieldsens.Debugger;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










public class TestDebugger<Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 private JsonDocument root = new JsonDocument();










 private I icfg;










 private InterproceduralCFG<Stmt, Method> icfg;










 










 public void writeJsonDebugFile(String filename) {










 try {



......@@ -41,7 +44,7 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









	 * @see heros.alias.Debugger#setICFG(I)










	 */










 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 this.icfg = icfg;










 }














......@@ -108,4 +111,14 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 stmt(exitStmt).doc("returns").doc(returnSite.toString()).keyValue("flow", expectedFlowFunctionsToString);










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















}
















Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
0c22069e


authored
Jul 09, 2015
by


Johannes Lerch



Browse files



Commit
0c22069e


authored
Jul 09, 2015
by


Johannes Lerch

0c22069eauthoredbyJohannes Lerch

skipping resolvers if interest is transitively given






parent
b651ea7e
















parent
b651ea7e





parent












Changes
9
9


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ 0c22069e






......@@ -64,8 +64,8 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(new WrappedFact<Field, Fact, Stmt, Method>(fact.getFact(), resolvedAccPath, resolver));










 ControlFlowJoinResolver.this.interest();










//				incomingEdges.add(new WrappedFact<Field, Fact, Stmt, Method>(fact.getFact(), resolvedAccPath, resolver));










 ControlFlowJoinResolver.this.interest(resolver);










 }





















 @Override



......














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ 0c22069e






......@@ -96,7 +96,7 @@ public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }





















 private void bootstrapAtMethodStartPoints() {










 callEdgeResolver.interest();










 callEdgeResolver.interest(callEdgeResolver);










 for(Stmt startPoint : context.icfg.getStartPointsOf(method)) {










 WrappedFactAtStatement<Field, Fact, Stmt, Method> target = new WrappedFactAtStatement<Field, Fact, Stmt, Method>(startPoint, wrappedSource());










 if(!reachableStatements.containsKey(target))



......














src/heros/fieldsens/Resolver.java








View file @ 0c22069e






......@@ -13,12 +13,14 @@ package heros.fieldsens;









import heros.fieldsens.FlowFunction.Constraint;





















import java.util.List;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Sets;





















public abstract class Resolver<Field, Fact, Stmt, Method> {





















 private boolean interest = false;










 private Set<Resolver<Field, Fact, Stmt, Method>> interest = Sets.newHashSet();










 private List<InterestCallback<Field, Fact, Stmt, Method>> interestCallbacks = Lists.newLinkedList();










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer;










 private boolean canBeResolvedEmpty = false;



......@@ -29,18 +31,14 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {




















 public abstract void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback);










 










 public void interest() {










 if(interest)










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(!interest.add(resolver))










 return;





















 log("Interest given");










 interest = true;










 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.interest(analyzer, this);










 callback.interest(analyzer, resolver);










 }










 










 if(canBeResolvedEmpty)










 interestCallbacks = null;










 }










 










 protected void canBeResolvedEmpty() {



......@@ -51,18 +49,16 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {









 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.canBeResolvedEmpty();










 }










 










 if(interest)










 interestCallbacks = null;










 }





















 public boolean isInterestGiven() {










 return interest;










 return !interest.isEmpty();










 }





















 protected void registerCallback(InterestCallback<Field, Fact, Stmt, Method> callback) {










 if(interest) {










 callback.interest(analyzer, this);










 if(!interest.isEmpty()) {










 for(Resolver<Field, Fact, Stmt, Method> resolver : interest)










 callback.interest(analyzer, resolver);










 }










 else {










 log("Callback registered");



......














src/heros/fieldsens/ResolverTemplate.java








View file @ 0c22069e






......@@ -13,6 +13,7 @@ package heros.fieldsens;









import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Sets;














......@@ -62,9 +63,9 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 if(!incomingEdges.add(inc))










 return;










 










 interest();










 interest(this);










 










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : nestedResolvers.values()) {










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : Lists.newLinkedList(nestedResolvers.values())) {










 nestedResolver.addIncoming(inc);










 }










 



......














src/heros/fieldsens/ReturnSiteResolver.java








View file @ 0c22069e






......@@ -104,7 +104,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










 ReturnSiteResolver.this.interest(ReturnSiteResolver.this);










 }










 










 @Override



......@@ -119,7 +119,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath));










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest();










 interest(this);










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }



......@@ -132,8 +132,8 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(resolver);










 }










 










 @Override



......














src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ 0c22069e






......@@ -28,7 +28,7 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 }










 










 @Override










 public void interest() {










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 }










 










 @Override



......














test/heros/fieldsens/FieldSensitiveIFDSSolverTest.java








View file @ 0c22069e






......@@ -30,12 +30,12 @@ import static heros.utilities.FieldSensitiveTestHelper.*;









public class FieldSensitiveIFDSSolverTest {





















 private FieldSensitiveTestHelper helper;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 @Before










 public void before() {










 System.err.println("-----");










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 helper = new FieldSensitiveTestHelper(debugger);










 }










 



......@@ -718,7 +718,6 @@ public class FieldSensitiveIFDSSolverTest {









 normalStmt("f", flow("6", readField("f"), "7")).succ("g"),










 normalStmt("g", kill("7")).succ("h"));










 










 










 helper.runSolver(true, "a");










 }










 



......














test/heros/utilities/FieldSensitiveTestHelper.java








View file @ 0c22069e






......@@ -58,9 +58,9 @@ public class FieldSensitiveTestHelper {









 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, TestMethod> stmt2method = Maps.newHashMap();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger) {










 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod> debugger) {










 this.debugger = debugger;










 }














......














test/heros/utilities/TestDebugger.java








View file @ 0c22069e






......@@ -18,11 +18,14 @@ import com.google.common.collect.Sets;




















import heros.InterproceduralCFG;










import heros.fieldsens.Debugger;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










public class TestDebugger<Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 private JsonDocument root = new JsonDocument();










 private I icfg;










 private InterproceduralCFG<Stmt, Method> icfg;










 










 public void writeJsonDebugFile(String filename) {










 try {



......@@ -41,7 +44,7 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









	 * @see heros.alias.Debugger#setICFG(I)










	 */










 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 this.icfg = icfg;










 }














......@@ -108,4 +111,14 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 stmt(exitStmt).doc("returns").doc(returnSite.toString()).keyValue("flow", expectedFlowFunctionsToString);










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















}














src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ 0c22069e






......@@ -64,8 +64,8 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(new WrappedFact<Field, Fact, Stmt, Method>(fact.getFact(), resolvedAccPath, resolver));










 ControlFlowJoinResolver.this.interest();










//				incomingEdges.add(new WrappedFact<Field, Fact, Stmt, Method>(fact.getFact(), resolvedAccPath, resolver));










 ControlFlowJoinResolver.this.interest(resolver);










 }





















 @Override



......












src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ 0c22069e








src/heros/fieldsens/ControlFlowJoinResolver.java










View file @ 0c22069e


0c22069e



......@@ -64,8 +64,8 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(new WrappedFact<Field, Fact, Stmt, Method>(fact.getFact(), resolvedAccPath, resolver));










 ControlFlowJoinResolver.this.interest();










//				incomingEdges.add(new WrappedFact<Field, Fact, Stmt, Method>(fact.getFact(), resolvedAccPath, resolver));










 ControlFlowJoinResolver.this.interest(resolver);










 }





















 @Override



......






......@@ -64,8 +64,8 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, 










 Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(new WrappedFact<Field, Fact, Stmt, Method>(fact.getFact(), resolvedAccPath, resolver));










 ControlFlowJoinResolver.this.interest();










//				incomingEdges.add(new WrappedFact<Field, Fact, Stmt, Method>(fact.getFact(), resolvedAccPath, resolver));










 ControlFlowJoinResolver.this.interest(resolver);










 }





















 @Override



......


 @Override@Override public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, publicvoidinterest(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {Resolver<Field,Fact,Stmt,Method>resolver){ incomingEdges.add(new WrappedFact<Field, Fact, Stmt, Method>(fact.getFact(), resolvedAccPath, resolver));incomingEdges.add(newWrappedFact<Field,Fact,Stmt,Method>(fact.getFact(),resolvedAccPath,resolver)); ControlFlowJoinResolver.this.interest();ControlFlowJoinResolver.this.interest();//				incomingEdges.add(new WrappedFact<Field, Fact, Stmt, Method>(fact.getFact(), resolvedAccPath, resolver));//				incomingEdges.add(new WrappedFact<Field, Fact, Stmt, Method>(fact.getFact(), resolvedAccPath, resolver));// ControlFlowJoinResolver.this.interest(resolver);ControlFlowJoinResolver.this.interest(resolverresolver); }} @Override@Override








src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ 0c22069e






......@@ -96,7 +96,7 @@ public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }





















 private void bootstrapAtMethodStartPoints() {










 callEdgeResolver.interest();










 callEdgeResolver.interest(callEdgeResolver);










 for(Stmt startPoint : context.icfg.getStartPointsOf(method)) {










 WrappedFactAtStatement<Field, Fact, Stmt, Method> target = new WrappedFactAtStatement<Field, Fact, Stmt, Method>(startPoint, wrappedSource());










 if(!reachableStatements.containsKey(target))



......












src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ 0c22069e








src/heros/fieldsens/PerAccessPathMethodAnalyzer.java










View file @ 0c22069e


0c22069e



......@@ -96,7 +96,7 @@ public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }





















 private void bootstrapAtMethodStartPoints() {










 callEdgeResolver.interest();










 callEdgeResolver.interest(callEdgeResolver);










 for(Stmt startPoint : context.icfg.getStartPointsOf(method)) {










 WrappedFactAtStatement<Field, Fact, Stmt, Method> target = new WrappedFactAtStatement<Field, Fact, Stmt, Method>(startPoint, wrappedSource());










 if(!reachableStatements.containsKey(target))



......






......@@ -96,7 +96,7 @@ public class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 }





















 private void bootstrapAtMethodStartPoints() {










 callEdgeResolver.interest();










 callEdgeResolver.interest(callEdgeResolver);










 for(Stmt startPoint : context.icfg.getStartPointsOf(method)) {










 WrappedFactAtStatement<Field, Fact, Stmt, Method> target = new WrappedFactAtStatement<Field, Fact, Stmt, Method>(startPoint, wrappedSource());










 if(!reachableStatements.containsKey(target))



......


 }} private void bootstrapAtMethodStartPoints() {privatevoidbootstrapAtMethodStartPoints(){ callEdgeResolver.interest();callEdgeResolver.interest(); callEdgeResolver.interest(callEdgeResolver);callEdgeResolver.interest(callEdgeResolvercallEdgeResolver); for(Stmt startPoint : context.icfg.getStartPointsOf(method)) {for(StmtstartPoint:context.icfg.getStartPointsOf(method)){ WrappedFactAtStatement<Field, Fact, Stmt, Method> target = new WrappedFactAtStatement<Field, Fact, Stmt, Method>(startPoint, wrappedSource());WrappedFactAtStatement<Field,Fact,Stmt,Method>target=newWrappedFactAtStatement<Field,Fact,Stmt,Method>(startPoint,wrappedSource()); if(!reachableStatements.containsKey(target))if(!reachableStatements.containsKey(target))








src/heros/fieldsens/Resolver.java








View file @ 0c22069e






......@@ -13,12 +13,14 @@ package heros.fieldsens;









import heros.fieldsens.FlowFunction.Constraint;





















import java.util.List;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Sets;





















public abstract class Resolver<Field, Fact, Stmt, Method> {





















 private boolean interest = false;










 private Set<Resolver<Field, Fact, Stmt, Method>> interest = Sets.newHashSet();










 private List<InterestCallback<Field, Fact, Stmt, Method>> interestCallbacks = Lists.newLinkedList();










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer;










 private boolean canBeResolvedEmpty = false;



......@@ -29,18 +31,14 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {




















 public abstract void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback);










 










 public void interest() {










 if(interest)










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(!interest.add(resolver))










 return;





















 log("Interest given");










 interest = true;










 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.interest(analyzer, this);










 callback.interest(analyzer, resolver);










 }










 










 if(canBeResolvedEmpty)










 interestCallbacks = null;










 }










 










 protected void canBeResolvedEmpty() {



......@@ -51,18 +49,16 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {









 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.canBeResolvedEmpty();










 }










 










 if(interest)










 interestCallbacks = null;










 }





















 public boolean isInterestGiven() {










 return interest;










 return !interest.isEmpty();










 }





















 protected void registerCallback(InterestCallback<Field, Fact, Stmt, Method> callback) {










 if(interest) {










 callback.interest(analyzer, this);










 if(!interest.isEmpty()) {










 for(Resolver<Field, Fact, Stmt, Method> resolver : interest)










 callback.interest(analyzer, resolver);










 }










 else {










 log("Callback registered");



......












src/heros/fieldsens/Resolver.java








View file @ 0c22069e








src/heros/fieldsens/Resolver.java










View file @ 0c22069e


0c22069e



......@@ -13,12 +13,14 @@ package heros.fieldsens;









import heros.fieldsens.FlowFunction.Constraint;





















import java.util.List;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Sets;





















public abstract class Resolver<Field, Fact, Stmt, Method> {





















 private boolean interest = false;










 private Set<Resolver<Field, Fact, Stmt, Method>> interest = Sets.newHashSet();










 private List<InterestCallback<Field, Fact, Stmt, Method>> interestCallbacks = Lists.newLinkedList();










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer;










 private boolean canBeResolvedEmpty = false;



......@@ -29,18 +31,14 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {




















 public abstract void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback);










 










 public void interest() {










 if(interest)










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(!interest.add(resolver))










 return;





















 log("Interest given");










 interest = true;










 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.interest(analyzer, this);










 callback.interest(analyzer, resolver);










 }










 










 if(canBeResolvedEmpty)










 interestCallbacks = null;










 }










 










 protected void canBeResolvedEmpty() {



......@@ -51,18 +49,16 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {









 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.canBeResolvedEmpty();










 }










 










 if(interest)










 interestCallbacks = null;










 }





















 public boolean isInterestGiven() {










 return interest;










 return !interest.isEmpty();










 }





















 protected void registerCallback(InterestCallback<Field, Fact, Stmt, Method> callback) {










 if(interest) {










 callback.interest(analyzer, this);










 if(!interest.isEmpty()) {










 for(Resolver<Field, Fact, Stmt, Method> resolver : interest)










 callback.interest(analyzer, resolver);










 }










 else {










 log("Callback registered");



......






......@@ -13,12 +13,14 @@ package heros.fieldsens;









import heros.fieldsens.FlowFunction.Constraint;





















import java.util.List;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Sets;





















public abstract class Resolver<Field, Fact, Stmt, Method> {





















 private boolean interest = false;










 private Set<Resolver<Field, Fact, Stmt, Method>> interest = Sets.newHashSet();










 private List<InterestCallback<Field, Fact, Stmt, Method>> interestCallbacks = Lists.newLinkedList();










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer;










 private boolean canBeResolvedEmpty = false;



......@@ -29,18 +31,14 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {




















 public abstract void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback);










 










 public void interest() {










 if(interest)










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 if(!interest.add(resolver))










 return;





















 log("Interest given");










 interest = true;










 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.interest(analyzer, this);










 callback.interest(analyzer, resolver);










 }










 










 if(canBeResolvedEmpty)










 interestCallbacks = null;










 }










 










 protected void canBeResolvedEmpty() {



......@@ -51,18 +49,16 @@ public abstract class Resolver<Field, Fact, Stmt, Method> {









 for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {










 callback.canBeResolvedEmpty();










 }










 










 if(interest)










 interestCallbacks = null;










 }





















 public boolean isInterestGiven() {










 return interest;










 return !interest.isEmpty();










 }





















 protected void registerCallback(InterestCallback<Field, Fact, Stmt, Method> callback) {










 if(interest) {










 callback.interest(analyzer, this);










 if(!interest.isEmpty()) {










 for(Resolver<Field, Fact, Stmt, Method> resolver : interest)










 callback.interest(analyzer, resolver);










 }










 else {










 log("Callback registered");



......


import heros.fieldsens.FlowFunction.Constraint;importheros.fieldsens.FlowFunction.Constraint;import java.util.List;importjava.util.List;import java.util.Set;importjava.util.Set;import com.google.common.collect.Lists;importcom.google.common.collect.Lists;import com.google.common.collect.Sets;importcom.google.common.collect.Sets;public abstract class Resolver<Field, Fact, Stmt, Method> {publicabstractclassResolver<Field,Fact,Stmt,Method>{ private boolean interest = false;privatebooleanboolean interestinterest == falsefalse; private Set<Resolver<Field, Fact, Stmt, Method>> interest = Sets.newHashSet();privateSetSet<<ResolverResolver<<FieldField,, FactFact,, StmtStmt,, MethodMethod>>>> interestinterest == SetsSets..newHashSetnewHashSet();() private List<InterestCallback<Field, Fact, Stmt, Method>> interestCallbacks = Lists.newLinkedList();privateList<InterestCallback<Field,Fact,Stmt,Method>>interestCallbacks=Lists.newLinkedList(); protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer;protectedPerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer; private boolean canBeResolvedEmpty = false;privatebooleancanBeResolvedEmpty=false; public abstract void resolve(Constraint<Field> constraint, InterestCallback<Field, Fact, Stmt, Method> callback);publicabstractvoidresolve(Constraint<Field>constraint,InterestCallback<Field,Fact,Stmt,Method>callback);  public void interest() {publicvoidinterest(){ if(interest)if(interest) public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {publicvoidinterest(ResolverResolver<<FieldField,, FactFact,, StmtStmt,, MethodMethod>> resolverresolver){ if(!interest.add(resolver))if(!!interest..addadd((resolverresolver))) return;return; log("Interest given");log("Interest given"); interest = true;interest=true; for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {for(InterestCallback<Field,Fact,Stmt,Method>callback:Lists.newLinkedList(interestCallbacks)){ callback.interest(analyzer, this);callback.interest(analyzer,thisthis); callback.interest(analyzer, resolver);callback.interest(analyzer,resolverresolver); }}  if(canBeResolvedEmpty)if(canBeResolvedEmpty) interestCallbacks = null;interestCallbacks=null; }}  protected void canBeResolvedEmpty() {protectedvoidcanBeResolvedEmpty(){ for(InterestCallback<Field, Fact, Stmt, Method> callback : Lists.newLinkedList(interestCallbacks)) {for(InterestCallback<Field,Fact,Stmt,Method>callback:Lists.newLinkedList(interestCallbacks)){ callback.canBeResolvedEmpty();callback.canBeResolvedEmpty(); }}  if(interest)if(interest) interestCallbacks = null;interestCallbacks=null; }} public boolean isInterestGiven() {publicbooleanisInterestGiven(){ return interest;returninterest; return !interest.isEmpty();return!!interest..isEmptyisEmpty();() }} protected void registerCallback(InterestCallback<Field, Fact, Stmt, Method> callback) {protectedvoidregisterCallback(InterestCallback<Field,Fact,Stmt,Method>callback){ if(interest) {if(interest){ callback.interest(analyzer, this);callback.interest(analyzer,this); if(!interest.isEmpty()) {if(!interest.isEmpty()){ for(Resolver<Field, Fact, Stmt, Method> resolver : interest)for(Resolver<Field,Fact,Stmt,Method>resolver:interest) callback.interest(analyzer, resolver);callback.interest(analyzer,resolver); }} else {else{ log("Callback registered");log("Callback registered");








src/heros/fieldsens/ResolverTemplate.java








View file @ 0c22069e






......@@ -13,6 +13,7 @@ package heros.fieldsens;









import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Sets;














......@@ -62,9 +63,9 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 if(!incomingEdges.add(inc))










 return;










 










 interest();










 interest(this);










 










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : nestedResolvers.values()) {










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : Lists.newLinkedList(nestedResolvers.values())) {










 nestedResolver.addIncoming(inc);










 }










 



......












src/heros/fieldsens/ResolverTemplate.java








View file @ 0c22069e








src/heros/fieldsens/ResolverTemplate.java










View file @ 0c22069e


0c22069e



......@@ -13,6 +13,7 @@ package heros.fieldsens;









import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Sets;














......@@ -62,9 +63,9 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 if(!incomingEdges.add(inc))










 return;










 










 interest();










 interest(this);










 










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : nestedResolvers.values()) {










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : Lists.newLinkedList(nestedResolvers.values())) {










 nestedResolver.addIncoming(inc);










 }










 



......






......@@ -13,6 +13,7 @@ package heros.fieldsens;









import java.util.Map;










import java.util.Set;





















import com.google.common.collect.Lists;










import com.google.common.collect.Maps;










import com.google.common.collect.Sets;














......@@ -62,9 +63,9 @@ public abstract class ResolverTemplate<Field, Fact, Stmt, Method, Incoming>  ext









 if(!incomingEdges.add(inc))










 return;










 










 interest();










 interest(this);










 










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : nestedResolvers.values()) {










 for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : Lists.newLinkedList(nestedResolvers.values())) {










 nestedResolver.addIncoming(inc);










 }










 



......


import java.util.Map;importjava.util.Map;import java.util.Set;importjava.util.Set;import com.google.common.collect.Lists;importcom.google.common.collect.Lists;import com.google.common.collect.Maps;importcom.google.common.collect.Maps;import com.google.common.collect.Sets;importcom.google.common.collect.Sets; if(!incomingEdges.add(inc))if(!incomingEdges.add(inc)) return;return;  interest();interest(); interest(this);interest(thisthis);  for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : nestedResolvers.values()) {for(ResolverTemplate<Field,Fact,Stmt,Method,Incoming>nestedResolver:nestedResolvers.values()){ for(ResolverTemplate<Field, Fact, Stmt, Method, Incoming> nestedResolver : Lists.newLinkedList(nestedResolvers.values())) {for(ResolverTemplate<Field,Fact,Stmt,Method,Incoming>nestedResolver:ListsLists..newLinkedListnewLinkedList((nestedResolvers.values()))){ nestedResolver.addIncoming(inc);nestedResolver.addIncoming(inc); }} 








src/heros/fieldsens/ReturnSiteResolver.java








View file @ 0c22069e






......@@ -104,7 +104,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










 ReturnSiteResolver.this.interest(ReturnSiteResolver.this);










 }










 










 @Override



......@@ -119,7 +119,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath));










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest();










 interest(this);










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }



......@@ -132,8 +132,8 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(resolver);










 }










 










 @Override



......












src/heros/fieldsens/ReturnSiteResolver.java








View file @ 0c22069e








src/heros/fieldsens/ReturnSiteResolver.java










View file @ 0c22069e


0c22069e



......@@ -104,7 +104,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










 ReturnSiteResolver.this.interest(ReturnSiteResolver.this);










 }










 










 @Override



......@@ -119,7 +119,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath));










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest();










 interest(this);










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }



......@@ -132,8 +132,8 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(resolver);










 }










 










 @Override



......






......@@ -104,7 +104,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










 ReturnSiteResolver.this.interest(ReturnSiteResolver.this);










 }










 










 @Override



......@@ -119,7 +119,7 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath));










 if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {










 incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));










 interest();










 interest(this);










 } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {










 resolveViaCallSiteResolver(retEdge, currAccPath);










 }



......@@ -132,8 +132,8 @@ public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTempl









 retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {










 @Override










 public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest();










//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));










 ReturnSiteResolver.this.interest(resolver);










 }










 










 @Override



......


 @Override@Override public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {publicvoidinterest(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,Resolver<Field,Fact,Stmt,Method>resolver){ incomingEdges.add(retEdge.copyWithIncomingResolver(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));incomingEdges.add(retEdge.copyWithIncomingResolver(resolver,retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath()))); ReturnSiteResolver.this.interest();ReturnSiteResolver.this.interest(); ReturnSiteResolver.this.interest(ReturnSiteResolver.this);ReturnSiteResolver.this.interest(ReturnSiteResolverReturnSiteResolver..thisthis); }}  @Override@Override final AccessPath<Field> currAccPath = retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath));finalAccessPath<Field>currAccPath=retEdge.callDelta.applyTo(retEdge.usedAccessPathOfIncResolver.applyTo(retEdge.incAccessPath)); if(getResolvedAccessPath().isPrefixOf(currAccPath) == PrefixTestResult.GUARANTEED_PREFIX) {if(getResolvedAccessPath().isPrefixOf(currAccPath)==PrefixTestResult.GUARANTEED_PREFIX){ incomingEdges.add(retEdge.copyWithIncomingResolver(null, retEdge.usedAccessPathOfIncResolver));incomingEdges.add(retEdge.copyWithIncomingResolver(null,retEdge.usedAccessPathOfIncResolver)); interest();interest(); interest(this);interest(thisthis); } else if(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)) {}elseif(currAccPath.isPrefixOf(getResolvedAccessPath()).atLeast(PrefixTestResult.POTENTIAL_PREFIX)){ resolveViaCallSiteResolver(retEdge, currAccPath);resolveViaCallSiteResolver(retEdge,currAccPath); }} retEdge.resolverAtCaller.resolve(new DeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())), new InterestCallback<Field, Fact, Stmt, Method>() {retEdge.resolverAtCaller.resolve(newDeltaConstraint<Field>(currAccPath.getDeltaTo(getResolvedAccessPath())),newInterestCallback<Field,Fact,Stmt,Method>(){ @Override@Override public void interest(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {publicvoidinterest(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,Resolver<Field,Fact,Stmt,Method>resolver){ incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver,retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath()))); ReturnSiteResolver.this.interest();ReturnSiteResolver.this.interest();//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));//					incomingEdges.add(retEdge.copyWithResolverAtCaller(resolver, retEdge.incAccessPath.getDeltaTo(getResolvedAccessPath())));// ReturnSiteResolver.this.interest(resolver);ReturnSiteResolver.this.interest(resolverresolver); }}  @Override@Override








src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ 0c22069e






......@@ -28,7 +28,7 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 }










 










 @Override










 public void interest() {










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 }










 










 @Override



......












src/heros/fieldsens/ZeroCallEdgeResolver.java








View file @ 0c22069e








src/heros/fieldsens/ZeroCallEdgeResolver.java










View file @ 0c22069e


0c22069e



......@@ -28,7 +28,7 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 }










 










 @Override










 public void interest() {










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 }










 










 @Override



......






......@@ -28,7 +28,7 @@ public class ZeroCallEdgeResolver<Field, Fact, Stmt, Method> extends CallEdgeRes









 }










 










 @Override










 public void interest() {










 public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {










 }










 










 @Override



......


 }}  @Override@Override public void interest() {publicvoidinterest(){ public void interest(Resolver<Field, Fact, Stmt, Method> resolver) {publicvoidinterest(ResolverResolver<<FieldField,, FactFact,, StmtStmt,, MethodMethod>> resolverresolver){ }}  @Override@Override








test/heros/fieldsens/FieldSensitiveIFDSSolverTest.java








View file @ 0c22069e






......@@ -30,12 +30,12 @@ import static heros.utilities.FieldSensitiveTestHelper.*;









public class FieldSensitiveIFDSSolverTest {





















 private FieldSensitiveTestHelper helper;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 @Before










 public void before() {










 System.err.println("-----");










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 helper = new FieldSensitiveTestHelper(debugger);










 }










 



......@@ -718,7 +718,6 @@ public class FieldSensitiveIFDSSolverTest {









 normalStmt("f", flow("6", readField("f"), "7")).succ("g"),










 normalStmt("g", kill("7")).succ("h"));










 










 










 helper.runSolver(true, "a");










 }










 



......












test/heros/fieldsens/FieldSensitiveIFDSSolverTest.java








View file @ 0c22069e








test/heros/fieldsens/FieldSensitiveIFDSSolverTest.java










View file @ 0c22069e


0c22069e



......@@ -30,12 +30,12 @@ import static heros.utilities.FieldSensitiveTestHelper.*;









public class FieldSensitiveIFDSSolverTest {





















 private FieldSensitiveTestHelper helper;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 @Before










 public void before() {










 System.err.println("-----");










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 helper = new FieldSensitiveTestHelper(debugger);










 }










 



......@@ -718,7 +718,6 @@ public class FieldSensitiveIFDSSolverTest {









 normalStmt("f", flow("6", readField("f"), "7")).succ("g"),










 normalStmt("g", kill("7")).succ("h"));










 










 










 helper.runSolver(true, "a");










 }










 



......






......@@ -30,12 +30,12 @@ import static heros.utilities.FieldSensitiveTestHelper.*;









public class FieldSensitiveIFDSSolverTest {





















 private FieldSensitiveTestHelper helper;










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 @Before










 public void before() {










 System.err.println("-----");










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();










 debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();










 helper = new FieldSensitiveTestHelper(debugger);










 }










 



......@@ -718,7 +718,6 @@ public class FieldSensitiveIFDSSolverTest {









 normalStmt("f", flow("6", readField("f"), "7")).succ("g"),










 normalStmt("g", kill("7")).succ("h"));










 










 










 helper.runSolver(true, "a");










 }










 



......


public class FieldSensitiveIFDSSolverTest {publicclassFieldSensitiveIFDSSolverTest{ private FieldSensitiveTestHelper helper;privateFieldSensitiveTestHelperhelper; private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;privateTestDebugger<String,TestFact,Statement,TestMethod,, InterproceduralCFGInterproceduralCFG<<StatementStatement,, TestMethodTestMethod>>>debugger; private TestDebugger<String, TestFact, Statement, TestMethod> debugger;privateTestDebugger<String,TestFact,Statement,TestMethod>debugger; @Before@Before public void before() {publicvoidbefore(){ System.err.println("-----");System.err.println("-----"); debugger = new TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>>();debugger=newTestDebugger<String,TestFact,Statement,TestMethod,, InterproceduralCFGInterproceduralCFG<<StatementStatement,, TestMethodTestMethod>>();> debugger = new TestDebugger<String, TestFact, Statement, TestMethod>();debugger=newTestDebugger<String,TestFact,Statement,TestMethod>(); helper = new FieldSensitiveTestHelper(debugger);helper=newFieldSensitiveTestHelper(debugger); }}  normalStmt("f", flow("6", readField("f"), "7")).succ("g"),normalStmt("f",flow("6",readField("f"),"7")).succ("g"), normalStmt("g", kill("7")).succ("h"));normalStmt("g",kill("7")).succ("h"));   helper.runSolver(true, "a");helper.runSolver(true,"a"); }} 








test/heros/utilities/FieldSensitiveTestHelper.java








View file @ 0c22069e






......@@ -58,9 +58,9 @@ public class FieldSensitiveTestHelper {









 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, TestMethod> stmt2method = Maps.newHashMap();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger) {










 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod> debugger) {










 this.debugger = debugger;










 }














......












test/heros/utilities/FieldSensitiveTestHelper.java








View file @ 0c22069e








test/heros/utilities/FieldSensitiveTestHelper.java










View file @ 0c22069e


0c22069e



......@@ -58,9 +58,9 @@ public class FieldSensitiveTestHelper {









 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, TestMethod> stmt2method = Maps.newHashMap();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger) {










 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod> debugger) {










 this.debugger = debugger;










 }














......






......@@ -58,9 +58,9 @@ public class FieldSensitiveTestHelper {









 private List<ReturnEdge> returnEdges = Lists.newLinkedList();










 private Map<Statement, TestMethod> stmt2method = Maps.newHashMap();










 private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();










 private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;










 private TestDebugger<String, TestFact, Statement, TestMethod> debugger;





















 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger) {










 public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod> debugger) {










 this.debugger = debugger;










 }














......


 private List<ReturnEdge> returnEdges = Lists.newLinkedList();privateList<ReturnEdge>returnEdges=Lists.newLinkedList(); private Map<Statement, TestMethod> stmt2method = Maps.newHashMap();privateMap<Statement,TestMethod>stmt2method=Maps.newHashMap(); private Multiset<ExpectedFlowFunction> remainingFlowFunctions = HashMultiset.create();privateMultiset<ExpectedFlowFunction>remainingFlowFunctions=HashMultiset.create(); private TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger;privateTestDebugger<String,TestFact,Statement,TestMethod,, InterproceduralCFGInterproceduralCFG<<StatementStatement,, TestMethodTestMethod>>>debugger; private TestDebugger<String, TestFact, Statement, TestMethod> debugger;privateTestDebugger<String,TestFact,Statement,TestMethod>debugger; public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod, InterproceduralCFG<Statement, TestMethod>> debugger) {publicFieldSensitiveTestHelper(TestDebugger<String,TestFact,Statement,TestMethod,, InterproceduralCFGInterproceduralCFG<<StatementStatement,, TestMethodTestMethod>>>debugger){ public FieldSensitiveTestHelper(TestDebugger<String, TestFact, Statement, TestMethod> debugger) {publicFieldSensitiveTestHelper(TestDebugger<String,TestFact,Statement,TestMethod>debugger){ this.debugger = debugger;this.debugger=debugger; }}








test/heros/utilities/TestDebugger.java








View file @ 0c22069e






......@@ -18,11 +18,14 @@ import com.google.common.collect.Sets;




















import heros.InterproceduralCFG;










import heros.fieldsens.Debugger;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










public class TestDebugger<Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 private JsonDocument root = new JsonDocument();










 private I icfg;










 private InterproceduralCFG<Stmt, Method> icfg;










 










 public void writeJsonDebugFile(String filename) {










 try {



......@@ -41,7 +44,7 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









	 * @see heros.alias.Debugger#setICFG(I)










	 */










 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 this.icfg = icfg;










 }














......@@ -108,4 +111,14 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 stmt(exitStmt).doc("returns").doc(returnSite.toString()).keyValue("flow", expectedFlowFunctionsToString);










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















}












test/heros/utilities/TestDebugger.java








View file @ 0c22069e








test/heros/utilities/TestDebugger.java










View file @ 0c22069e


0c22069e



......@@ -18,11 +18,14 @@ import com.google.common.collect.Sets;




















import heros.InterproceduralCFG;










import heros.fieldsens.Debugger;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










public class TestDebugger<Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 private JsonDocument root = new JsonDocument();










 private I icfg;










 private InterproceduralCFG<Stmt, Method> icfg;










 










 public void writeJsonDebugFile(String filename) {










 try {



......@@ -41,7 +44,7 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









	 * @see heros.alias.Debugger#setICFG(I)










	 */










 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 this.icfg = icfg;










 }














......@@ -108,4 +111,14 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 stmt(exitStmt).doc("returns").doc(returnSite.toString()).keyValue("flow", expectedFlowFunctionsToString);










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















}






......@@ -18,11 +18,14 @@ import com.google.common.collect.Sets;




















import heros.InterproceduralCFG;










import heros.fieldsens.Debugger;










import heros.fieldsens.PerAccessPathMethodAnalyzer;










import heros.fieldsens.Resolver;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {










public class TestDebugger<Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {





















 private JsonDocument root = new JsonDocument();










 private I icfg;










 private InterproceduralCFG<Stmt, Method> icfg;










 










 public void writeJsonDebugFile(String filename) {










 try {



......@@ -41,7 +44,7 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









	 * @see heros.alias.Debugger#setICFG(I)










	 */










 @Override










 public void setICFG(I icfg) {










 public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {










 this.icfg = icfg;










 }














......@@ -108,4 +111,14 @@ public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCF









 stmt(exitStmt).doc("returns").doc(returnSite.toString()).keyValue("flow", expectedFlowFunctionsToString);










 }





















 @Override










 public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {










 










 }





















 @Override










 public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {










 










 }





















}


import heros.InterproceduralCFG;importheros.InterproceduralCFG;import heros.fieldsens.Debugger;importheros.fieldsens.Debugger;import heros.fieldsens.PerAccessPathMethodAnalyzer;importheros.fieldsens.PerAccessPathMethodAnalyzer;import heros.fieldsens.Resolver;importheros.fieldsens.Resolver;import heros.fieldsens.structs.WrappedFactAtStatement;importheros.fieldsens.structs.WrappedFactAtStatement;public class TestDebugger<Field, Fact, Stmt, Method, I extends InterproceduralCFG<Stmt, Method>> implements Debugger<Field, Fact, Stmt, Method, I> {publicclassTestDebugger<Field,Fact,Stmt,Method,, II extendsextends InterproceduralCFGInterproceduralCFG<<StmtStmt,, MethodMethod>>>implementsDebugger<Field,Fact,Stmt,Method,, II>{public class TestDebugger<Field, Fact, Stmt, Method> implements Debugger<Field, Fact, Stmt, Method> {publicclassTestDebugger<Field,Fact,Stmt,Method>implementsDebugger<Field,Fact,Stmt,Method>{ private JsonDocument root = new JsonDocument();privateJsonDocumentroot=newJsonDocument(); private I icfg;privateIicfg; private InterproceduralCFG<Stmt, Method> icfg;privateInterproceduralCFGnterproceduralCFG<<StmtStmt,, MethodMethod>>icfg;  public void writeJsonDebugFile(String filename) {publicvoidwriteJsonDebugFile(Stringfilename){ try {try{	 * @see heros.alias.Debugger#setICFG(I)	 * @see heros.alias.Debugger#setICFG(I)	 */	 */ @Override@Override public void setICFG(I icfg) {publicvoidsetICFG(Iicfg){ public void setICFG(InterproceduralCFG<Stmt, Method> icfg) {publicvoidsetICFG(InterproceduralCFGnterproceduralCFG<<StmtStmt,, MethodMethod>>icfg){ this.icfg = icfg;this.icfg=icfg; }} stmt(exitStmt).doc("returns").doc(returnSite.toString()).keyValue("flow", expectedFlowFunctionsToString);stmt(exitStmt).doc("returns").doc(returnSite.toString()).keyValue("flow",expectedFlowFunctionsToString); }} @Override@Override public void edgeTo(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, WrappedFactAtStatement<Field, Fact, Stmt, Method> factAtStmt) {publicvoidedgeTo(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,WrappedFactAtStatement<Field,Fact,Stmt,Method>factAtStmt){  }} @Override@Override public void newResolver(PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> analyzer, Resolver<Field, Fact, Stmt, Method> resolver) {publicvoidnewResolver(PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>analyzer,Resolver<Field,Fact,Stmt,Method>resolver){  }}}}









Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview






















Write



Preview











































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel












Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel




Supports Markdown





0%










Try again


or


attach a new file


.




Attach a file




Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Attach a file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






