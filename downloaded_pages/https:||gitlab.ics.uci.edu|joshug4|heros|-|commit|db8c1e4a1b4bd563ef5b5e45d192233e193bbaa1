



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

db8c1e4a















Commit
db8c1e4a


authored
Jan 28, 2013
by


Eric Bodden



Browse files




Revert "adding CountLatch"


This reverts commit 31c5f3dd.

Revert "bugfix: must increment counter on task submission, not when task starts executing"

This reverts commit c8267b07.

Revert "Revert "optimized synchronization to work without busy loops""

This reverts commit 9229bc5c.

Revert "Revert "further cleanups""

This reverts commit f6eab2a7.

bugfix: must increment counter on task submission, not when task starts executing






parent
31c5f3dd













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/CountLatch.java








View file @ db8c1e4a






......@@ -85,4 +85,4 @@ public class CountLatch {









 return super.toString() + "[Count = " + sync.getCount() + "]";










 }





















}




\ No newline at end of file









}














src/heros/solver/IDESolver.java








View file @ db8c1e4a






......@@ -36,9 +36,7 @@ import java.util.Map;









import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;










import java.util.concurrent.atomic.AtomicLong;





















import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;



......@@ -72,14 +70,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 protected ThreadPoolExecutor executor;










 protected CountingThreadPoolExecutor executor;










 










 @DontSynchronize("only used by single thread")










 protected int numThreads;










 










 //the number of currently running tasks










 protected final AtomicLong numTasks = new AtomicLong();










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 protected final JumpFunctions<N,D,V> jumpFn;










 



......@@ -140,7 +135,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;





















 










 /**










	 * Creates a solver for the given problem, which caches flow functions and edge functions.










	 * The solver must then be started by calling {@link #solve()}.



......@@ -210,7 +205,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 public void solve(int numThreads) {










 this.numThreads = Math.max(1,numThreads);










 this.executor = new ThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);



......@@ -227,13 +222,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









		   * on the exception being thrown.










		   */










 final long before = System.currentTimeMillis();










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 //await termination of tasks










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 durationFlowFunctionConstruction = System.currentTimeMillis() - before;










 }










 {



......@@ -252,7 +246,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param edge the edge to process










   */










 private void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 numTasks.getAndIncrement();










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -262,7 +255,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param vpt










   */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 numTasks.getAndIncrement();










 executor.execute(vpt);










 }










 



......@@ -500,13 +492,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 //await termination of tasks










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads



......@@ -522,8 +513,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //wait until done










 //await termination of tasks










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 //ask executor to shut down;










 //this will cause new submissions to the executor to be rejected,










 //but at this point all tasks should have completed anyway










 executor.shutdown();










 //similarly here: we await termination, but this should happen instantaneously,










 //as all tasks should have completed










 try {










 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);










 } catch (InterruptedException e) {



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

db8c1e4a















Commit
db8c1e4a


authored
Jan 28, 2013
by


Eric Bodden



Browse files




Revert "adding CountLatch"


This reverts commit 31c5f3dd.

Revert "bugfix: must increment counter on task submission, not when task starts executing"

This reverts commit c8267b07.

Revert "Revert "optimized synchronization to work without busy loops""

This reverts commit 9229bc5c.

Revert "Revert "further cleanups""

This reverts commit f6eab2a7.

bugfix: must increment counter on task submission, not when task starts executing






parent
31c5f3dd













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/CountLatch.java








View file @ db8c1e4a






......@@ -85,4 +85,4 @@ public class CountLatch {









 return super.toString() + "[Count = " + sync.getCount() + "]";










 }





















}




\ No newline at end of file









}














src/heros/solver/IDESolver.java








View file @ db8c1e4a






......@@ -36,9 +36,7 @@ import java.util.Map;









import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;










import java.util.concurrent.atomic.AtomicLong;





















import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;



......@@ -72,14 +70,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 protected ThreadPoolExecutor executor;










 protected CountingThreadPoolExecutor executor;










 










 @DontSynchronize("only used by single thread")










 protected int numThreads;










 










 //the number of currently running tasks










 protected final AtomicLong numTasks = new AtomicLong();










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 protected final JumpFunctions<N,D,V> jumpFn;










 



......@@ -140,7 +135,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;





















 










 /**










	 * Creates a solver for the given problem, which caches flow functions and edge functions.










	 * The solver must then be started by calling {@link #solve()}.



......@@ -210,7 +205,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 public void solve(int numThreads) {










 this.numThreads = Math.max(1,numThreads);










 this.executor = new ThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);



......@@ -227,13 +222,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









		   * on the exception being thrown.










		   */










 final long before = System.currentTimeMillis();










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 //await termination of tasks










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 durationFlowFunctionConstruction = System.currentTimeMillis() - before;










 }










 {



......@@ -252,7 +246,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param edge the edge to process










   */










 private void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 numTasks.getAndIncrement();










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -262,7 +255,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param vpt










   */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 numTasks.getAndIncrement();










 executor.execute(vpt);










 }










 



......@@ -500,13 +492,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 //await termination of tasks










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads



......@@ -522,8 +513,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //wait until done










 //await termination of tasks










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 //ask executor to shut down;










 //this will cause new submissions to the executor to be rejected,










 //but at this point all tasks should have completed anyway










 executor.shutdown();










 //similarly here: we await termination, but this should happen instantaneously,










 //as all tasks should have completed










 try {










 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);










 } catch (InterruptedException e) {



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

db8c1e4a







Open sidebar



Joshua Garcia heros
Commits

db8c1e4a




Open sidebar

Joshua Garcia heros
Commits

db8c1e4a


Joshua GarciaherosherosCommits
db8c1e4a








Commit
db8c1e4a


authored
Jan 28, 2013
by


Eric Bodden



Browse files




Revert "adding CountLatch"


This reverts commit 31c5f3dd.

Revert "bugfix: must increment counter on task submission, not when task starts executing"

This reverts commit c8267b07.

Revert "Revert "optimized synchronization to work without busy loops""

This reverts commit 9229bc5c.

Revert "Revert "further cleanups""

This reverts commit f6eab2a7.

bugfix: must increment counter on task submission, not when task starts executing






parent
31c5f3dd













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/CountLatch.java








View file @ db8c1e4a






......@@ -85,4 +85,4 @@ public class CountLatch {









 return super.toString() + "[Count = " + sync.getCount() + "]";










 }





















}




\ No newline at end of file









}














src/heros/solver/IDESolver.java








View file @ db8c1e4a






......@@ -36,9 +36,7 @@ import java.util.Map;









import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;










import java.util.concurrent.atomic.AtomicLong;





















import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;



......@@ -72,14 +70,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 protected ThreadPoolExecutor executor;










 protected CountingThreadPoolExecutor executor;










 










 @DontSynchronize("only used by single thread")










 protected int numThreads;










 










 //the number of currently running tasks










 protected final AtomicLong numTasks = new AtomicLong();










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 protected final JumpFunctions<N,D,V> jumpFn;










 



......@@ -140,7 +135,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;





















 










 /**










	 * Creates a solver for the given problem, which caches flow functions and edge functions.










	 * The solver must then be started by calling {@link #solve()}.



......@@ -210,7 +205,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 public void solve(int numThreads) {










 this.numThreads = Math.max(1,numThreads);










 this.executor = new ThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);



......@@ -227,13 +222,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









		   * on the exception being thrown.










		   */










 final long before = System.currentTimeMillis();










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 //await termination of tasks










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 durationFlowFunctionConstruction = System.currentTimeMillis() - before;










 }










 {



......@@ -252,7 +246,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param edge the edge to process










   */










 private void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 numTasks.getAndIncrement();










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -262,7 +255,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param vpt










   */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 numTasks.getAndIncrement();










 executor.execute(vpt);










 }










 



......@@ -500,13 +492,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 //await termination of tasks










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads



......@@ -522,8 +513,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //wait until done










 //await termination of tasks










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 //ask executor to shut down;










 //this will cause new submissions to the executor to be rejected,










 //but at this point all tasks should have completed anyway










 executor.shutdown();










 //similarly here: we await termination, but this should happen instantaneously,










 //as all tasks should have completed










 try {










 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);










 } catch (InterruptedException e) {



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
db8c1e4a


authored
Jan 28, 2013
by


Eric Bodden



Browse files




Revert "adding CountLatch"


This reverts commit 31c5f3dd.

Revert "bugfix: must increment counter on task submission, not when task starts executing"

This reverts commit c8267b07.

Revert "Revert "optimized synchronization to work without busy loops""

This reverts commit 9229bc5c.

Revert "Revert "further cleanups""

This reverts commit f6eab2a7.

bugfix: must increment counter on task submission, not when task starts executing






parent
31c5f3dd













Changes
2




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/CountLatch.java








View file @ db8c1e4a






......@@ -85,4 +85,4 @@ public class CountLatch {









 return super.toString() + "[Count = " + sync.getCount() + "]";










 }





















}




\ No newline at end of file









}














src/heros/solver/IDESolver.java








View file @ db8c1e4a






......@@ -36,9 +36,7 @@ import java.util.Map;









import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;










import java.util.concurrent.atomic.AtomicLong;





















import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;



......@@ -72,14 +70,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 protected ThreadPoolExecutor executor;










 protected CountingThreadPoolExecutor executor;










 










 @DontSynchronize("only used by single thread")










 protected int numThreads;










 










 //the number of currently running tasks










 protected final AtomicLong numTasks = new AtomicLong();










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 protected final JumpFunctions<N,D,V> jumpFn;










 



......@@ -140,7 +135,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;





















 










 /**










	 * Creates a solver for the given problem, which caches flow functions and edge functions.










	 * The solver must then be started by calling {@link #solve()}.



......@@ -210,7 +205,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 public void solve(int numThreads) {










 this.numThreads = Math.max(1,numThreads);










 this.executor = new ThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);



......@@ -227,13 +222,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









		   * on the exception being thrown.










		   */










 final long before = System.currentTimeMillis();










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 //await termination of tasks










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 durationFlowFunctionConstruction = System.currentTimeMillis() - before;










 }










 {



......@@ -252,7 +246,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param edge the edge to process










   */










 private void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 numTasks.getAndIncrement();










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -262,7 +255,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param vpt










   */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 numTasks.getAndIncrement();










 executor.execute(vpt);










 }










 



......@@ -500,13 +492,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 //await termination of tasks










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads



......@@ -522,8 +513,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //wait until done










 //await termination of tasks










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 //ask executor to shut down;










 //this will cause new submissions to the executor to be rejected,










 //but at this point all tasks should have completed anyway










 executor.shutdown();










 //similarly here: we await termination, but this should happen instantaneously,










 //as all tasks should have completed










 try {










 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);










 } catch (InterruptedException e) {



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
db8c1e4a


authored
Jan 28, 2013
by


Eric Bodden



Browse files



Commit
db8c1e4a


authored
Jan 28, 2013
by


Eric Bodden

db8c1e4aauthoredbyEric Bodden

Revert "adding CountLatch"


This reverts commit 31c5f3dd.

Revert "bugfix: must increment counter on task submission, not when task starts executing"

This reverts commit c8267b07.

Revert "Revert "optimized synchronization to work without busy loops""

This reverts commit 9229bc5c.

Revert "Revert "further cleanups""

This reverts commit f6eab2a7.

bugfix: must increment counter on task submission, not when task starts executing





parent
31c5f3dd
















parent
31c5f3dd





parent












Changes
2
2


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/solver/CountLatch.java








View file @ db8c1e4a






......@@ -85,4 +85,4 @@ public class CountLatch {









 return super.toString() + "[Count = " + sync.getCount() + "]";










 }





















}




\ No newline at end of file









}














src/heros/solver/IDESolver.java








View file @ db8c1e4a






......@@ -36,9 +36,7 @@ import java.util.Map;









import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;










import java.util.concurrent.atomic.AtomicLong;





















import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;



......@@ -72,14 +70,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 protected ThreadPoolExecutor executor;










 protected CountingThreadPoolExecutor executor;










 










 @DontSynchronize("only used by single thread")










 protected int numThreads;










 










 //the number of currently running tasks










 protected final AtomicLong numTasks = new AtomicLong();










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 protected final JumpFunctions<N,D,V> jumpFn;










 



......@@ -140,7 +135,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;





















 










 /**










	 * Creates a solver for the given problem, which caches flow functions and edge functions.










	 * The solver must then be started by calling {@link #solve()}.



......@@ -210,7 +205,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 public void solve(int numThreads) {










 this.numThreads = Math.max(1,numThreads);










 this.executor = new ThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);



......@@ -227,13 +222,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









		   * on the exception being thrown.










		   */










 final long before = System.currentTimeMillis();










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 //await termination of tasks










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 durationFlowFunctionConstruction = System.currentTimeMillis() - before;










 }










 {



......@@ -252,7 +246,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param edge the edge to process










   */










 private void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 numTasks.getAndIncrement();










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -262,7 +255,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param vpt










   */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 numTasks.getAndIncrement();










 executor.execute(vpt);










 }










 



......@@ -500,13 +492,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 //await termination of tasks










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads



......@@ -522,8 +513,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //wait until done










 //await termination of tasks










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 //ask executor to shut down;










 //this will cause new submissions to the executor to be rejected,










 //but at this point all tasks should have completed anyway










 executor.shutdown();










 //similarly here: we await termination, but this should happen instantaneously,










 //as all tasks should have completed










 try {










 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);










 } catch (InterruptedException e) {



......














src/heros/solver/CountLatch.java








View file @ db8c1e4a






......@@ -85,4 +85,4 @@ public class CountLatch {









 return super.toString() + "[Count = " + sync.getCount() + "]";










 }





















}




\ No newline at end of file









}












src/heros/solver/CountLatch.java








View file @ db8c1e4a








src/heros/solver/CountLatch.java










View file @ db8c1e4a


db8c1e4a



......@@ -85,4 +85,4 @@ public class CountLatch {









 return super.toString() + "[Count = " + sync.getCount() + "]";










 }





















}




\ No newline at end of file









}






......@@ -85,4 +85,4 @@ public class CountLatch {









 return super.toString() + "[Count = " + sync.getCount() + "]";










 }





















}




\ No newline at end of file









}


 return super.toString() + "[Count = " + sync.getCount() + "]";returnsuper.toString()+"[Count = "+sync.getCount()+"]"; }}}}}}








src/heros/solver/IDESolver.java








View file @ db8c1e4a






......@@ -36,9 +36,7 @@ import java.util.Map;









import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;










import java.util.concurrent.atomic.AtomicLong;





















import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;



......@@ -72,14 +70,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 protected ThreadPoolExecutor executor;










 protected CountingThreadPoolExecutor executor;










 










 @DontSynchronize("only used by single thread")










 protected int numThreads;










 










 //the number of currently running tasks










 protected final AtomicLong numTasks = new AtomicLong();










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 protected final JumpFunctions<N,D,V> jumpFn;










 



......@@ -140,7 +135,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;





















 










 /**










	 * Creates a solver for the given problem, which caches flow functions and edge functions.










	 * The solver must then be started by calling {@link #solve()}.



......@@ -210,7 +205,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 public void solve(int numThreads) {










 this.numThreads = Math.max(1,numThreads);










 this.executor = new ThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);



......@@ -227,13 +222,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









		   * on the exception being thrown.










		   */










 final long before = System.currentTimeMillis();










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 //await termination of tasks










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 durationFlowFunctionConstruction = System.currentTimeMillis() - before;










 }










 {



......@@ -252,7 +246,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param edge the edge to process










   */










 private void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 numTasks.getAndIncrement();










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -262,7 +255,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param vpt










   */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 numTasks.getAndIncrement();










 executor.execute(vpt);










 }










 



......@@ -500,13 +492,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 //await termination of tasks










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads



......@@ -522,8 +513,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //wait until done










 //await termination of tasks










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 //ask executor to shut down;










 //this will cause new submissions to the executor to be rejected,










 //but at this point all tasks should have completed anyway










 executor.shutdown();










 //similarly here: we await termination, but this should happen instantaneously,










 //as all tasks should have completed










 try {










 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);










 } catch (InterruptedException e) {



......












src/heros/solver/IDESolver.java








View file @ db8c1e4a








src/heros/solver/IDESolver.java










View file @ db8c1e4a


db8c1e4a



......@@ -36,9 +36,7 @@ import java.util.Map;









import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;










import java.util.concurrent.atomic.AtomicLong;





















import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;



......@@ -72,14 +70,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 protected ThreadPoolExecutor executor;










 protected CountingThreadPoolExecutor executor;










 










 @DontSynchronize("only used by single thread")










 protected int numThreads;










 










 //the number of currently running tasks










 protected final AtomicLong numTasks = new AtomicLong();










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 protected final JumpFunctions<N,D,V> jumpFn;










 



......@@ -140,7 +135,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;





















 










 /**










	 * Creates a solver for the given problem, which caches flow functions and edge functions.










	 * The solver must then be started by calling {@link #solve()}.



......@@ -210,7 +205,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 public void solve(int numThreads) {










 this.numThreads = Math.max(1,numThreads);










 this.executor = new ThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);



......@@ -227,13 +222,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









		   * on the exception being thrown.










		   */










 final long before = System.currentTimeMillis();










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 //await termination of tasks










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 durationFlowFunctionConstruction = System.currentTimeMillis() - before;










 }










 {



......@@ -252,7 +246,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param edge the edge to process










   */










 private void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 numTasks.getAndIncrement();










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -262,7 +255,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param vpt










   */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 numTasks.getAndIncrement();










 executor.execute(vpt);










 }










 



......@@ -500,13 +492,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 //await termination of tasks










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads



......@@ -522,8 +513,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //wait until done










 //await termination of tasks










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 //ask executor to shut down;










 //this will cause new submissions to the executor to be rejected,










 //but at this point all tasks should have completed anyway










 executor.shutdown();










 //similarly here: we await termination, but this should happen instantaneously,










 //as all tasks should have completed










 try {










 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);










 } catch (InterruptedException e) {



......






......@@ -36,9 +36,7 @@ import java.util.Map;









import java.util.Map.Entry;










import java.util.Set;










import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.ThreadPoolExecutor;










import java.util.concurrent.TimeUnit;










import java.util.concurrent.atomic.AtomicLong;





















import com.google.common.base.Predicate;










import com.google.common.cache.CacheBuilder;



......@@ -72,14 +70,11 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 










 //executor for dispatching individual compute jobs (may be multi-threaded)










 @DontSynchronize("only used by single thread")










 protected ThreadPoolExecutor executor;










 protected CountingThreadPoolExecutor executor;










 










 @DontSynchronize("only used by single thread")










 protected int numThreads;










 










 //the number of currently running tasks










 protected final AtomicLong numTasks = new AtomicLong();










 










 @SynchronizedBy("thread safe data structure, consistent locking when used")










 protected final JumpFunctions<N,D,V> jumpFn;










 



......@@ -140,7 +135,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {




















 @DontSynchronize("readOnly")










 protected final boolean followReturnsPastSeeds;





















 










 /**










	 * Creates a solver for the given problem, which caches flow functions and edge functions.










	 * The solver must then be started by calling {@link #solve()}.



......@@ -210,7 +205,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 */










 public void solve(int numThreads) {










 this.numThreads = Math.max(1,numThreads);










 this.executor = new ThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());










 










 for(N startPoint: initialSeeds) {










 propagate(zeroValue, startPoint, zeroValue, allTop);



......@@ -227,13 +222,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









		   * on the exception being thrown.










		   */










 final long before = System.currentTimeMillis();










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 //await termination of tasks










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 durationFlowFunctionConstruction = System.currentTimeMillis() - before;










 }










 {



......@@ -252,7 +246,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param edge the edge to process










   */










 private void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 numTasks.getAndIncrement();










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -262,7 +255,6 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









   * @param vpt










   */










 private void scheduleValueProcessing(ValuePropagationTask vpt){










 numTasks.getAndIncrement();










 executor.execute(vpt);










 }










 



......@@ -500,13 +492,12 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 scheduleValueProcessing(new ValuePropagationTask(superGraphNode));










 }










 










 do { //Wait until we are done the processing










 try {










 Thread.sleep(200);










 } catch (InterruptedException e) {










 throw new RuntimeException(e);










 }










 } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());










 //await termination of tasks










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 










 //Phase II(ii)










 //we create an array of all nodes and then dispatch fractions of this array to multiple threads



......@@ -522,8 +513,18 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 for(int t=0;t<numThreads; t++) {










 executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));










 }










 //wait until done










 //await termination of tasks










 try {










 executor.awaitCompletion();










 } catch (InterruptedException e) {










 e.printStackTrace();










 }










 //ask executor to shut down;










 //this will cause new submissions to the executor to be rejected,










 //but at this point all tasks should have completed anyway










 executor.shutdown();










 //similarly here: we await termination, but this should happen instantaneously,










 //as all tasks should have completed










 try {










 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);










 } catch (InterruptedException e) {



......


import java.util.Map.Entry;importjava.util.Map.Entry;import java.util.Set;importjava.util.Set;import java.util.concurrent.LinkedBlockingQueue;importjava.util.concurrent.LinkedBlockingQueue;import java.util.concurrent.ThreadPoolExecutor;importjava.util.concurrent.ThreadPoolExecutor;import java.util.concurrent.TimeUnit;importjava.util.concurrent.TimeUnit;import java.util.concurrent.atomic.AtomicLong;importjava.util.concurrent.atomic.AtomicLong;import com.google.common.base.Predicate;importcom.google.common.base.Predicate;import com.google.common.cache.CacheBuilder;importcom.google.common.cache.CacheBuilder;  //executor for dispatching individual compute jobs (may be multi-threaded)//executor for dispatching individual compute jobs (may be multi-threaded) @DontSynchronize("only used by single thread")@DontSynchronize("only used by single thread") protected ThreadPoolExecutor executor;protectedThreadPoolExecutorexecutor; protected CountingThreadPoolExecutor executor;protectedCountingThreadPoolExecutorCountingexecutor;  @DontSynchronize("only used by single thread")@DontSynchronize("only used by single thread") protected int numThreads;protectedintnumThreads;  //the number of currently running tasks//the number of currently running tasks protected final AtomicLong numTasks = new AtomicLong();protectedfinalAtomicLongnumTasks=newAtomicLong();  @SynchronizedBy("thread safe data structure, consistent locking when used")@SynchronizedBy("thread safe data structure, consistent locking when used") protected final JumpFunctions<N,D,V> jumpFn;protectedfinalJumpFunctions<N,D,V>jumpFn;  @DontSynchronize("readOnly")@DontSynchronize("readOnly") protected final boolean followReturnsPastSeeds;protectedfinalbooleanfollowReturnsPastSeeds;  /**/**	 * Creates a solver for the given problem, which caches flow functions and edge functions.	 * Creates a solver for the given problem, which caches flow functions and edge functions.	 * The solver must then be started by calling {@link #solve()}.	 * The solver must then be started by calling {@link #solve()}.	 */	 */ public void solve(int numThreads) {publicvoidsolve(intnumThreads){ this.numThreads = Math.max(1,numThreads);this.numThreads=Math.max(1,numThreads); this.executor = new ThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());this.executor=newThreadPoolExecutor(1,this.numThreads,30,TimeUnit.SECONDS,newLinkedBlockingQueue<Runnable>()); this.executor = new CountingThreadPoolExecutor(1, this.numThreads, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());this.executor=newCountingThreadPoolExecutorCounting(1,this.numThreads,30,TimeUnit.SECONDS,newLinkedBlockingQueue<Runnable>());  for(N startPoint: initialSeeds) {for(NstartPoint:initialSeeds){ propagate(zeroValue, startPoint, zeroValue, allTop);propagate(zeroValue,startPoint,zeroValue,allTop);		   * on the exception being thrown.		   * on the exception being thrown.		   */		   */ final long before = System.currentTimeMillis();finallongbefore=System.currentTimeMillis(); do { //Wait until we are done the processingdo{//Wait until we are done the processing try {try{ Thread.sleep(200);Thread.sleep(200); } catch (InterruptedException e) {}catch(InterruptedExceptione){ throw new RuntimeException(e);thrownewRuntimeException(e); }} } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());}while(!executor.getQueue().isEmpty()||numTasks.longValue()>executor.getCompletedTaskCount()); //await termination of tasks//await termination of tasks try {try{ executor.awaitCompletion();executor.awaitCompletion(); } catch (InterruptedException e) {}catch(InterruptedExceptione){ e.printStackTrace();e.printStackTrace(); }} durationFlowFunctionConstruction = System.currentTimeMillis() - before;durationFlowFunctionConstruction=System.currentTimeMillis()-before; }} {{   * @param edge the edge to process   * @param edge the edge to process   */   */ private void scheduleEdgeProcessing(PathEdge<N,D,M> edge){privatevoidscheduleEdgeProcessing(PathEdge<N,D,M>edge){ numTasks.getAndIncrement();numTasks.getAndIncrement(); executor.execute(new PathEdgeProcessingTask(edge));executor.execute(newPathEdgeProcessingTask(edge)); propagationCount++;propagationCount++; }}   * @param vpt   * @param vpt   */   */ private void scheduleValueProcessing(ValuePropagationTask vpt){privatevoidscheduleValueProcessing(ValuePropagationTaskvpt){ numTasks.getAndIncrement();numTasks.getAndIncrement(); executor.execute(vpt);executor.execute(vpt); }}  scheduleValueProcessing(new ValuePropagationTask(superGraphNode));scheduleValueProcessing(newValuePropagationTask(superGraphNode)); }}  do { //Wait until we are done the processingdo{//Wait until we are done the processing try {try{ Thread.sleep(200);Thread.sleep(200); } catch (InterruptedException e) {}catch(InterruptedExceptione){ throw new RuntimeException(e);thrownewRuntimeException(e); }} } while (!executor.getQueue().isEmpty() || numTasks.longValue() > executor.getCompletedTaskCount());}while(!executor.getQueue().isEmpty()||numTasks.longValue()>executor.getCompletedTaskCount()); //await termination of tasks//await termination of tasks try {try{ executor.awaitCompletion();executor.awaitCompletion(); } catch (InterruptedException e) {}catch(InterruptedExceptione){ e.printStackTrace();e.printStackTrace(); }}  //Phase II(ii)//Phase II(ii) //we create an array of all nodes and then dispatch fractions of this array to multiple threads//we create an array of all nodes and then dispatch fractions of this array to multiple threads for(int t=0;t<numThreads; t++) {for(intt=0;t<numThreads;t++){ executor.execute(new ValueComputationTask(nonCallStartNodesArray, t));executor.execute(newValueComputationTask(nonCallStartNodesArray,t)); }} //wait until done//wait until done //await termination of tasks//await termination of tasks try {try{ executor.awaitCompletion();executor.awaitCompletion(); } catch (InterruptedException e) {}catch(InterruptedExceptione){ e.printStackTrace();e.printStackTrace(); }} //ask executor to shut down;//ask executor to shut down; //this will cause new submissions to the executor to be rejected,//this will cause new submissions to the executor to be rejected, //but at this point all tasks should have completed anyway//but at this point all tasks should have completed anyway executor.shutdown();executor.shutdown(); //similarly here: we await termination, but this should happen instantaneously,//similarly here: we await termination, but this should happen instantaneously, //as all tasks should have completed//as all tasks should have completed try {try{ executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);executor.awaitTermination(Long.MAX_VALUE,TimeUnit.DAYS); } catch (InterruptedException e) {}catch(InterruptedExceptione){









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






