



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros

Commits


















275f57839b2238791d76ac90f9fa93c67b633abe


Switch branch/tag









herossrcherossolver
















05 Jul, 2013
1 commit









changing initialization of analysis such that initialSeeds not is a mapping...

·
275f5783





Eric Bodden authored Jul 05, 2013

changing initialization of analysis such that initialSeeds not is a mapping from units to initial data-flow facts at these units

this is a breaking change, but the class DefaultSeeds can be used to easily convert a set of units (old format) into a default map that should work for current clients

the change was implemented to permit subtypes of IFDSTabulationProblem to overwrite facts at seeds in a convenient way





275f5783










04 Jul, 2013
2 commits









bugfix: when propagating inside out into a caller that was not yet processed...

·
17895853





Eric Bodden authored Jul 04, 2013

bugfix: when propagating inside out into a caller that was not yet processed we need to create a summary edge starting at ZERO, not at the callee's flow fact!





17895853













memory improvement: do not store implicit TOP values

·
987a7a4c


Steven Arzt authored Jul 04, 2013






987a7a4c










16 Jun, 2013
1 commit









fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return...

·
0ec8bfc3





Steven Arzt authored Jun 16, 2013

fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return edge gets processed for **all callers** of the callee from which we return in cases where we haven't seen the respective call edge.

This however leads to spurious edges if we have multiple call sites for the same callee. Let us assume call site A calls foo() with jump function a and call site B calls it with b. If we now return from foo with something derived from a, we will not find an incoming edge for call site B. FollowReturnsPastSeeds thus made us propagate the value to both call sites which makes us loose context sensitivity.

Fix as follows: Only follow past seeds if we have seen no call edge into the callee at all. We can then assume that we're really running beyond the seeds of the analysis and have no other chance than propagating to all call sites.





0ec8bfc3










05 Jun, 2013
1 commit









for unbalanced problems on return statements we now use the return flow...

·
4ae358b3





Eric Bodden authored Jun 05, 2013

for unbalanced problems on return statements we now use the return flow function, not the normal flow function
the caller is then simply "null"
added some comments about this





4ae358b3










29 May, 2013
1 commit









adding synchronization on "val" due to possible race conditions (thanks to...

·
525c45fb





Eric Bodden authored May 29, 2013

adding synchronization on "val" due to possible race conditions (thanks to Damien Octeau for reporting this!)





525c45fb










14 May, 2013
1 commit









made a structure definition "protected"

·
a81e8b33


Steven Arzt authored May 14, 2013






a81e8b33










25 Apr, 2013
1 commit









performance fix for return edges; if there were N start points (e.g. in a...

·
6a91d71e





Eric Bodden authored Apr 25, 2013

performance fix for return edges; if there were N start points (e.g. in a backwards analysis) and we did an unbalanced analysis, then the return-foe function was computed N times; now this is done only once





6a91d71e










15 Mar, 2013
1 commit









Bugfix: ProcessCall computed the new jump functions for a method call at a...

·
d564bec7





Steven Arzt authored Mar 15, 2013

Bugfix: ProcessCall computed the new jump functions for a method call at a specific call and return site pair, but then propagated the results to all return sites of this call. This lead to spurious results if there were multiple return sites for a call that had non-equal fact sets on their return edges.





d564bec7










11 Mar, 2013
1 commit









Replaced the duplicate call to the icfg by an access to cached structure we have anyway

·
5c0a40f6


Steven Arzt authored Mar 11, 2013






5c0a40f6










28 Feb, 2013
1 commit









removed stupig bug found by findbugs !!!

·
72286798


Eric Bodden authored Feb 28, 2013






72286798










20 Feb, 2013
1 commit









bugfix: were propagating incorrect values at return-flow edges

·
0645e494


Eric Bodden authored Feb 20, 2013






0645e494










14 Feb, 2013
1 commit









bug fix for value computation (need to treat initialSeeds just as method start nodes)

·
227b9337


Eric Bodden authored Feb 14, 2013






227b9337










02 Feb, 2013
1 commit









added notes on persisting summary information

·
f66df606


Eric Bodden authored Feb 02, 2013






f66df606










30 Jan, 2013
3 commits









extracted method awaitCompletionComputeValuesAndShutdown()

·
446d709e


Eric Bodden authored Jan 30, 2013






446d709e













made scheduleEdgeProcessing protected such that it can be called from the outside

·
abe1050c


Eric Bodden authored Jan 30, 2013






abe1050c













Revert "removed superfluous call to scheduleEdgeProcessing"

·
2c7e04fd





Eric Bodden authored Jan 30, 2013


This reverts commit 1747df0c.

The change was wrong; scheduleEdgeProcessing does need to be called explicitly at initialization time!





2c7e04fd










29 Jan, 2013
6 commits









fixing shutdown sequence

·
e0e51e68


Eric Bodden authored Jan 29, 2013






e0e51e68













making executor exchangeable

·
18c72755


Eric Bodden authored Jan 29, 2013






18c72755













make computation of values optional

·
357e129e


Eric Bodden authored Jan 29, 2013






357e129e













number of threads is now configured through SolverConfiguration, a new super...

·
1e7167fe





Eric Bodden authored Jan 29, 2013

number of threads is now configured through SolverConfiguration, a new super interface of IFDSTabulationProblem





1e7167fe













indentation

·
aa7b4340


Eric Bodden authored Jan 29, 2013






aa7b4340













removed superfluous call to scheduleEdgeProcessing

·
1747df0c


Eric Bodden authored Jan 29, 2013






1747df0c










28 Jan, 2013
6 commits









refactoring: autoAddZero is now set in IFDSTabulationProblem

·
4b103811


Eric Bodden authored Jan 28, 2013






4b103811













comments

·
aa036d4b


Eric Bodden authored Jan 28, 2013






aa036d4b













refactoring

·
b9930158


Eric Bodden authored Jan 28, 2013






b9930158













Revert "adding CountLatch"

·
db8c1e4a





Eric Bodden authored Jan 28, 2013


This reverts commit 31c5f3dd.

Revert "bugfix: must increment counter on task submission, not when task starts executing"

This reverts commit c8267b07.

Revert "Revert "optimized synchronization to work without busy loops""

This reverts commit 9229bc5c.

Revert "Revert "further cleanups""

This reverts commit f6eab2a7.

bugfix: must increment counter on task submission, not when task starts executing





db8c1e4a













adding CountLatch

·
31c5f3dd


Eric Bodden authored Jan 28, 2013






31c5f3dd













bugfix: must increment counter on task submission, not when task starts executing

·
c8267b07


Eric Bodden authored Jan 28, 2013






c8267b07










27 Jan, 2013
2 commits









Revert "optimized synchronization to work without busy loops"

·
9229bc5c





Eric Bodden authored Jan 27, 2013


This reverts commit 6f028b34.





9229bc5c













Revert "further cleanups"

·
f6eab2a7





Eric Bodden authored Jan 27, 2013


This reverts commit 5502e147.





f6eab2a7










26 Jan, 2013
3 commits









further cleanups

·
5502e147


Eric Bodden authored Jan 26, 2013






5502e147













optimized synchronization to work without busy loops

·
6f028b34


Eric Bodden authored Jan 26, 2013






6f028b34













minor cleanups

·
cdf8292c


Eric Bodden authored Jan 26, 2013






cdf8292c










25 Jan, 2013
1 commit









Fixed race condition in IDESolver and simplified the code

·
0a1e0ff5


Marc-André Laverdière authored Jan 25, 2013






0a1e0ff5










24 Jan, 2013
2 commits









replaced env variable by property

·
7afff058


Eric Bodden authored Jan 24, 2013






7afff058













added env flag HEROS_DEBUG

·
24fd6856


Eric Bodden authored Jan 24, 2013






24fd6856










22 Jan, 2013
2 commits









support for autoZero

·
0947a364


Eric Bodden authored Jan 22, 2013






0947a364













added possibility to switch off auto-zeroing of flow functions

·
0563038b


Eric Bodden authored Jan 22, 2013






0563038b










08 Jan, 2013
1 commit









fixing race condition found by Steven Arzt

·
2e63b6e7


Eric Bodden authored Jan 08, 2013






2e63b6e7



















H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros

Commits


















275f57839b2238791d76ac90f9fa93c67b633abe


Switch branch/tag









herossrcherossolver
















05 Jul, 2013
1 commit









changing initialization of analysis such that initialSeeds not is a mapping...

·
275f5783





Eric Bodden authored Jul 05, 2013

changing initialization of analysis such that initialSeeds not is a mapping from units to initial data-flow facts at these units

this is a breaking change, but the class DefaultSeeds can be used to easily convert a set of units (old format) into a default map that should work for current clients

the change was implemented to permit subtypes of IFDSTabulationProblem to overwrite facts at seeds in a convenient way





275f5783










04 Jul, 2013
2 commits









bugfix: when propagating inside out into a caller that was not yet processed...

·
17895853





Eric Bodden authored Jul 04, 2013

bugfix: when propagating inside out into a caller that was not yet processed we need to create a summary edge starting at ZERO, not at the callee's flow fact!





17895853













memory improvement: do not store implicit TOP values

·
987a7a4c


Steven Arzt authored Jul 04, 2013






987a7a4c










16 Jun, 2013
1 commit









fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return...

·
0ec8bfc3





Steven Arzt authored Jun 16, 2013

fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return edge gets processed for **all callers** of the callee from which we return in cases where we haven't seen the respective call edge.

This however leads to spurious edges if we have multiple call sites for the same callee. Let us assume call site A calls foo() with jump function a and call site B calls it with b. If we now return from foo with something derived from a, we will not find an incoming edge for call site B. FollowReturnsPastSeeds thus made us propagate the value to both call sites which makes us loose context sensitivity.

Fix as follows: Only follow past seeds if we have seen no call edge into the callee at all. We can then assume that we're really running beyond the seeds of the analysis and have no other chance than propagating to all call sites.





0ec8bfc3










05 Jun, 2013
1 commit









for unbalanced problems on return statements we now use the return flow...

·
4ae358b3





Eric Bodden authored Jun 05, 2013

for unbalanced problems on return statements we now use the return flow function, not the normal flow function
the caller is then simply "null"
added some comments about this





4ae358b3










29 May, 2013
1 commit









adding synchronization on "val" due to possible race conditions (thanks to...

·
525c45fb





Eric Bodden authored May 29, 2013

adding synchronization on "val" due to possible race conditions (thanks to Damien Octeau for reporting this!)





525c45fb










14 May, 2013
1 commit









made a structure definition "protected"

·
a81e8b33


Steven Arzt authored May 14, 2013






a81e8b33










25 Apr, 2013
1 commit









performance fix for return edges; if there were N start points (e.g. in a...

·
6a91d71e





Eric Bodden authored Apr 25, 2013

performance fix for return edges; if there were N start points (e.g. in a backwards analysis) and we did an unbalanced analysis, then the return-foe function was computed N times; now this is done only once





6a91d71e










15 Mar, 2013
1 commit









Bugfix: ProcessCall computed the new jump functions for a method call at a...

·
d564bec7





Steven Arzt authored Mar 15, 2013

Bugfix: ProcessCall computed the new jump functions for a method call at a specific call and return site pair, but then propagated the results to all return sites of this call. This lead to spurious results if there were multiple return sites for a call that had non-equal fact sets on their return edges.





d564bec7










11 Mar, 2013
1 commit









Replaced the duplicate call to the icfg by an access to cached structure we have anyway

·
5c0a40f6


Steven Arzt authored Mar 11, 2013






5c0a40f6










28 Feb, 2013
1 commit









removed stupig bug found by findbugs !!!

·
72286798


Eric Bodden authored Feb 28, 2013






72286798










20 Feb, 2013
1 commit









bugfix: were propagating incorrect values at return-flow edges

·
0645e494


Eric Bodden authored Feb 20, 2013






0645e494










14 Feb, 2013
1 commit









bug fix for value computation (need to treat initialSeeds just as method start nodes)

·
227b9337


Eric Bodden authored Feb 14, 2013






227b9337










02 Feb, 2013
1 commit









added notes on persisting summary information

·
f66df606


Eric Bodden authored Feb 02, 2013






f66df606










30 Jan, 2013
3 commits









extracted method awaitCompletionComputeValuesAndShutdown()

·
446d709e


Eric Bodden authored Jan 30, 2013






446d709e













made scheduleEdgeProcessing protected such that it can be called from the outside

·
abe1050c


Eric Bodden authored Jan 30, 2013






abe1050c













Revert "removed superfluous call to scheduleEdgeProcessing"

·
2c7e04fd





Eric Bodden authored Jan 30, 2013


This reverts commit 1747df0c.

The change was wrong; scheduleEdgeProcessing does need to be called explicitly at initialization time!





2c7e04fd










29 Jan, 2013
6 commits









fixing shutdown sequence

·
e0e51e68


Eric Bodden authored Jan 29, 2013






e0e51e68













making executor exchangeable

·
18c72755


Eric Bodden authored Jan 29, 2013






18c72755













make computation of values optional

·
357e129e


Eric Bodden authored Jan 29, 2013






357e129e













number of threads is now configured through SolverConfiguration, a new super...

·
1e7167fe





Eric Bodden authored Jan 29, 2013

number of threads is now configured through SolverConfiguration, a new super interface of IFDSTabulationProblem





1e7167fe













indentation

·
aa7b4340


Eric Bodden authored Jan 29, 2013






aa7b4340













removed superfluous call to scheduleEdgeProcessing

·
1747df0c


Eric Bodden authored Jan 29, 2013






1747df0c










28 Jan, 2013
6 commits









refactoring: autoAddZero is now set in IFDSTabulationProblem

·
4b103811


Eric Bodden authored Jan 28, 2013






4b103811













comments

·
aa036d4b


Eric Bodden authored Jan 28, 2013






aa036d4b













refactoring

·
b9930158


Eric Bodden authored Jan 28, 2013






b9930158













Revert "adding CountLatch"

·
db8c1e4a





Eric Bodden authored Jan 28, 2013


This reverts commit 31c5f3dd.

Revert "bugfix: must increment counter on task submission, not when task starts executing"

This reverts commit c8267b07.

Revert "Revert "optimized synchronization to work without busy loops""

This reverts commit 9229bc5c.

Revert "Revert "further cleanups""

This reverts commit f6eab2a7.

bugfix: must increment counter on task submission, not when task starts executing





db8c1e4a













adding CountLatch

·
31c5f3dd


Eric Bodden authored Jan 28, 2013






31c5f3dd













bugfix: must increment counter on task submission, not when task starts executing

·
c8267b07


Eric Bodden authored Jan 28, 2013






c8267b07










27 Jan, 2013
2 commits









Revert "optimized synchronization to work without busy loops"

·
9229bc5c





Eric Bodden authored Jan 27, 2013


This reverts commit 6f028b34.





9229bc5c













Revert "further cleanups"

·
f6eab2a7





Eric Bodden authored Jan 27, 2013


This reverts commit 5502e147.





f6eab2a7










26 Jan, 2013
3 commits









further cleanups

·
5502e147


Eric Bodden authored Jan 26, 2013






5502e147













optimized synchronization to work without busy loops

·
6f028b34


Eric Bodden authored Jan 26, 2013






6f028b34













minor cleanups

·
cdf8292c


Eric Bodden authored Jan 26, 2013






cdf8292c










25 Jan, 2013
1 commit









Fixed race condition in IDESolver and simplified the code

·
0a1e0ff5


Marc-André Laverdière authored Jan 25, 2013






0a1e0ff5










24 Jan, 2013
2 commits









replaced env variable by property

·
7afff058


Eric Bodden authored Jan 24, 2013






7afff058













added env flag HEROS_DEBUG

·
24fd6856


Eric Bodden authored Jan 24, 2013






24fd6856










22 Jan, 2013
2 commits









support for autoZero

·
0947a364


Eric Bodden authored Jan 22, 2013






0947a364













added possibility to switch off auto-zeroing of flow functions

·
0563038b


Eric Bodden authored Jan 22, 2013






0563038b










08 Jan, 2013
1 commit









fixing race condition found by Steven Arzt

·
2e63b6e7


Eric Bodden authored Jan 08, 2013






2e63b6e7


















Open sidebar



Joshua Garcia heros

Commits







Open sidebar



Joshua Garcia heros

Commits




Open sidebar

Joshua Garcia heros

Commits


Joshua Garciaherosheros
Commits











275f57839b2238791d76ac90f9fa93c67b633abe


Switch branch/tag









herossrcherossolver
















05 Jul, 2013
1 commit









changing initialization of analysis such that initialSeeds not is a mapping...

·
275f5783





Eric Bodden authored Jul 05, 2013

changing initialization of analysis such that initialSeeds not is a mapping from units to initial data-flow facts at these units

this is a breaking change, but the class DefaultSeeds can be used to easily convert a set of units (old format) into a default map that should work for current clients

the change was implemented to permit subtypes of IFDSTabulationProblem to overwrite facts at seeds in a convenient way





275f5783










04 Jul, 2013
2 commits









bugfix: when propagating inside out into a caller that was not yet processed...

·
17895853





Eric Bodden authored Jul 04, 2013

bugfix: when propagating inside out into a caller that was not yet processed we need to create a summary edge starting at ZERO, not at the callee's flow fact!





17895853













memory improvement: do not store implicit TOP values

·
987a7a4c


Steven Arzt authored Jul 04, 2013






987a7a4c










16 Jun, 2013
1 commit









fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return...

·
0ec8bfc3





Steven Arzt authored Jun 16, 2013

fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return edge gets processed for **all callers** of the callee from which we return in cases where we haven't seen the respective call edge.

This however leads to spurious edges if we have multiple call sites for the same callee. Let us assume call site A calls foo() with jump function a and call site B calls it with b. If we now return from foo with something derived from a, we will not find an incoming edge for call site B. FollowReturnsPastSeeds thus made us propagate the value to both call sites which makes us loose context sensitivity.

Fix as follows: Only follow past seeds if we have seen no call edge into the callee at all. We can then assume that we're really running beyond the seeds of the analysis and have no other chance than propagating to all call sites.





0ec8bfc3










05 Jun, 2013
1 commit









for unbalanced problems on return statements we now use the return flow...

·
4ae358b3





Eric Bodden authored Jun 05, 2013

for unbalanced problems on return statements we now use the return flow function, not the normal flow function
the caller is then simply "null"
added some comments about this





4ae358b3










29 May, 2013
1 commit









adding synchronization on "val" due to possible race conditions (thanks to...

·
525c45fb





Eric Bodden authored May 29, 2013

adding synchronization on "val" due to possible race conditions (thanks to Damien Octeau for reporting this!)





525c45fb










14 May, 2013
1 commit









made a structure definition "protected"

·
a81e8b33


Steven Arzt authored May 14, 2013






a81e8b33










25 Apr, 2013
1 commit









performance fix for return edges; if there were N start points (e.g. in a...

·
6a91d71e





Eric Bodden authored Apr 25, 2013

performance fix for return edges; if there were N start points (e.g. in a backwards analysis) and we did an unbalanced analysis, then the return-foe function was computed N times; now this is done only once





6a91d71e










15 Mar, 2013
1 commit









Bugfix: ProcessCall computed the new jump functions for a method call at a...

·
d564bec7





Steven Arzt authored Mar 15, 2013

Bugfix: ProcessCall computed the new jump functions for a method call at a specific call and return site pair, but then propagated the results to all return sites of this call. This lead to spurious results if there were multiple return sites for a call that had non-equal fact sets on their return edges.





d564bec7










11 Mar, 2013
1 commit









Replaced the duplicate call to the icfg by an access to cached structure we have anyway

·
5c0a40f6


Steven Arzt authored Mar 11, 2013






5c0a40f6










28 Feb, 2013
1 commit









removed stupig bug found by findbugs !!!

·
72286798


Eric Bodden authored Feb 28, 2013






72286798










20 Feb, 2013
1 commit









bugfix: were propagating incorrect values at return-flow edges

·
0645e494


Eric Bodden authored Feb 20, 2013






0645e494










14 Feb, 2013
1 commit









bug fix for value computation (need to treat initialSeeds just as method start nodes)

·
227b9337


Eric Bodden authored Feb 14, 2013






227b9337










02 Feb, 2013
1 commit









added notes on persisting summary information

·
f66df606


Eric Bodden authored Feb 02, 2013






f66df606










30 Jan, 2013
3 commits









extracted method awaitCompletionComputeValuesAndShutdown()

·
446d709e


Eric Bodden authored Jan 30, 2013






446d709e













made scheduleEdgeProcessing protected such that it can be called from the outside

·
abe1050c


Eric Bodden authored Jan 30, 2013






abe1050c













Revert "removed superfluous call to scheduleEdgeProcessing"

·
2c7e04fd





Eric Bodden authored Jan 30, 2013


This reverts commit 1747df0c.

The change was wrong; scheduleEdgeProcessing does need to be called explicitly at initialization time!





2c7e04fd










29 Jan, 2013
6 commits









fixing shutdown sequence

·
e0e51e68


Eric Bodden authored Jan 29, 2013






e0e51e68













making executor exchangeable

·
18c72755


Eric Bodden authored Jan 29, 2013






18c72755













make computation of values optional

·
357e129e


Eric Bodden authored Jan 29, 2013






357e129e













number of threads is now configured through SolverConfiguration, a new super...

·
1e7167fe





Eric Bodden authored Jan 29, 2013

number of threads is now configured through SolverConfiguration, a new super interface of IFDSTabulationProblem





1e7167fe













indentation

·
aa7b4340


Eric Bodden authored Jan 29, 2013






aa7b4340













removed superfluous call to scheduleEdgeProcessing

·
1747df0c


Eric Bodden authored Jan 29, 2013






1747df0c










28 Jan, 2013
6 commits









refactoring: autoAddZero is now set in IFDSTabulationProblem

·
4b103811


Eric Bodden authored Jan 28, 2013






4b103811













comments

·
aa036d4b


Eric Bodden authored Jan 28, 2013






aa036d4b













refactoring

·
b9930158


Eric Bodden authored Jan 28, 2013






b9930158













Revert "adding CountLatch"

·
db8c1e4a





Eric Bodden authored Jan 28, 2013


This reverts commit 31c5f3dd.

Revert "bugfix: must increment counter on task submission, not when task starts executing"

This reverts commit c8267b07.

Revert "Revert "optimized synchronization to work without busy loops""

This reverts commit 9229bc5c.

Revert "Revert "further cleanups""

This reverts commit f6eab2a7.

bugfix: must increment counter on task submission, not when task starts executing





db8c1e4a













adding CountLatch

·
31c5f3dd


Eric Bodden authored Jan 28, 2013






31c5f3dd













bugfix: must increment counter on task submission, not when task starts executing

·
c8267b07


Eric Bodden authored Jan 28, 2013






c8267b07










27 Jan, 2013
2 commits









Revert "optimized synchronization to work without busy loops"

·
9229bc5c





Eric Bodden authored Jan 27, 2013


This reverts commit 6f028b34.





9229bc5c













Revert "further cleanups"

·
f6eab2a7





Eric Bodden authored Jan 27, 2013


This reverts commit 5502e147.





f6eab2a7










26 Jan, 2013
3 commits









further cleanups

·
5502e147


Eric Bodden authored Jan 26, 2013






5502e147













optimized synchronization to work without busy loops

·
6f028b34


Eric Bodden authored Jan 26, 2013






6f028b34













minor cleanups

·
cdf8292c


Eric Bodden authored Jan 26, 2013






cdf8292c










25 Jan, 2013
1 commit









Fixed race condition in IDESolver and simplified the code

·
0a1e0ff5


Marc-André Laverdière authored Jan 25, 2013






0a1e0ff5










24 Jan, 2013
2 commits









replaced env variable by property

·
7afff058


Eric Bodden authored Jan 24, 2013






7afff058













added env flag HEROS_DEBUG

·
24fd6856


Eric Bodden authored Jan 24, 2013






24fd6856










22 Jan, 2013
2 commits









support for autoZero

·
0947a364


Eric Bodden authored Jan 22, 2013






0947a364













added possibility to switch off auto-zeroing of flow functions

·
0563038b


Eric Bodden authored Jan 22, 2013






0563038b










08 Jan, 2013
1 commit









fixing race condition found by Steven Arzt

·
2e63b6e7


Eric Bodden authored Jan 08, 2013






2e63b6e7






















275f57839b2238791d76ac90f9fa93c67b633abe


Switch branch/tag









herossrcherossolver
















05 Jul, 2013
1 commit









changing initialization of analysis such that initialSeeds not is a mapping...

·
275f5783





Eric Bodden authored Jul 05, 2013

changing initialization of analysis such that initialSeeds not is a mapping from units to initial data-flow facts at these units

this is a breaking change, but the class DefaultSeeds can be used to easily convert a set of units (old format) into a default map that should work for current clients

the change was implemented to permit subtypes of IFDSTabulationProblem to overwrite facts at seeds in a convenient way





275f5783










04 Jul, 2013
2 commits









bugfix: when propagating inside out into a caller that was not yet processed...

·
17895853





Eric Bodden authored Jul 04, 2013

bugfix: when propagating inside out into a caller that was not yet processed we need to create a summary edge starting at ZERO, not at the callee's flow fact!





17895853













memory improvement: do not store implicit TOP values

·
987a7a4c


Steven Arzt authored Jul 04, 2013






987a7a4c










16 Jun, 2013
1 commit









fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return...

·
0ec8bfc3





Steven Arzt authored Jun 16, 2013

fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return edge gets processed for **all callers** of the callee from which we return in cases where we haven't seen the respective call edge.

This however leads to spurious edges if we have multiple call sites for the same callee. Let us assume call site A calls foo() with jump function a and call site B calls it with b. If we now return from foo with something derived from a, we will not find an incoming edge for call site B. FollowReturnsPastSeeds thus made us propagate the value to both call sites which makes us loose context sensitivity.

Fix as follows: Only follow past seeds if we have seen no call edge into the callee at all. We can then assume that we're really running beyond the seeds of the analysis and have no other chance than propagating to all call sites.





0ec8bfc3










05 Jun, 2013
1 commit









for unbalanced problems on return statements we now use the return flow...

·
4ae358b3





Eric Bodden authored Jun 05, 2013

for unbalanced problems on return statements we now use the return flow function, not the normal flow function
the caller is then simply "null"
added some comments about this





4ae358b3










29 May, 2013
1 commit









adding synchronization on "val" due to possible race conditions (thanks to...

·
525c45fb





Eric Bodden authored May 29, 2013

adding synchronization on "val" due to possible race conditions (thanks to Damien Octeau for reporting this!)





525c45fb










14 May, 2013
1 commit









made a structure definition "protected"

·
a81e8b33


Steven Arzt authored May 14, 2013






a81e8b33










25 Apr, 2013
1 commit









performance fix for return edges; if there were N start points (e.g. in a...

·
6a91d71e





Eric Bodden authored Apr 25, 2013

performance fix for return edges; if there were N start points (e.g. in a backwards analysis) and we did an unbalanced analysis, then the return-foe function was computed N times; now this is done only once





6a91d71e










15 Mar, 2013
1 commit









Bugfix: ProcessCall computed the new jump functions for a method call at a...

·
d564bec7





Steven Arzt authored Mar 15, 2013

Bugfix: ProcessCall computed the new jump functions for a method call at a specific call and return site pair, but then propagated the results to all return sites of this call. This lead to spurious results if there were multiple return sites for a call that had non-equal fact sets on their return edges.





d564bec7










11 Mar, 2013
1 commit









Replaced the duplicate call to the icfg by an access to cached structure we have anyway

·
5c0a40f6


Steven Arzt authored Mar 11, 2013






5c0a40f6










28 Feb, 2013
1 commit









removed stupig bug found by findbugs !!!

·
72286798


Eric Bodden authored Feb 28, 2013






72286798










20 Feb, 2013
1 commit









bugfix: were propagating incorrect values at return-flow edges

·
0645e494


Eric Bodden authored Feb 20, 2013






0645e494










14 Feb, 2013
1 commit









bug fix for value computation (need to treat initialSeeds just as method start nodes)

·
227b9337


Eric Bodden authored Feb 14, 2013






227b9337










02 Feb, 2013
1 commit









added notes on persisting summary information

·
f66df606


Eric Bodden authored Feb 02, 2013






f66df606










30 Jan, 2013
3 commits









extracted method awaitCompletionComputeValuesAndShutdown()

·
446d709e


Eric Bodden authored Jan 30, 2013






446d709e













made scheduleEdgeProcessing protected such that it can be called from the outside

·
abe1050c


Eric Bodden authored Jan 30, 2013






abe1050c













Revert "removed superfluous call to scheduleEdgeProcessing"

·
2c7e04fd





Eric Bodden authored Jan 30, 2013


This reverts commit 1747df0c.

The change was wrong; scheduleEdgeProcessing does need to be called explicitly at initialization time!





2c7e04fd










29 Jan, 2013
6 commits









fixing shutdown sequence

·
e0e51e68


Eric Bodden authored Jan 29, 2013






e0e51e68













making executor exchangeable

·
18c72755


Eric Bodden authored Jan 29, 2013






18c72755













make computation of values optional

·
357e129e


Eric Bodden authored Jan 29, 2013






357e129e













number of threads is now configured through SolverConfiguration, a new super...

·
1e7167fe





Eric Bodden authored Jan 29, 2013

number of threads is now configured through SolverConfiguration, a new super interface of IFDSTabulationProblem





1e7167fe













indentation

·
aa7b4340


Eric Bodden authored Jan 29, 2013






aa7b4340













removed superfluous call to scheduleEdgeProcessing

·
1747df0c


Eric Bodden authored Jan 29, 2013






1747df0c










28 Jan, 2013
6 commits









refactoring: autoAddZero is now set in IFDSTabulationProblem

·
4b103811


Eric Bodden authored Jan 28, 2013






4b103811













comments

·
aa036d4b


Eric Bodden authored Jan 28, 2013






aa036d4b













refactoring

·
b9930158


Eric Bodden authored Jan 28, 2013






b9930158













Revert "adding CountLatch"

·
db8c1e4a





Eric Bodden authored Jan 28, 2013


This reverts commit 31c5f3dd.

Revert "bugfix: must increment counter on task submission, not when task starts executing"

This reverts commit c8267b07.

Revert "Revert "optimized synchronization to work without busy loops""

This reverts commit 9229bc5c.

Revert "Revert "further cleanups""

This reverts commit f6eab2a7.

bugfix: must increment counter on task submission, not when task starts executing





db8c1e4a













adding CountLatch

·
31c5f3dd


Eric Bodden authored Jan 28, 2013






31c5f3dd













bugfix: must increment counter on task submission, not when task starts executing

·
c8267b07


Eric Bodden authored Jan 28, 2013






c8267b07










27 Jan, 2013
2 commits









Revert "optimized synchronization to work without busy loops"

·
9229bc5c





Eric Bodden authored Jan 27, 2013


This reverts commit 6f028b34.





9229bc5c













Revert "further cleanups"

·
f6eab2a7





Eric Bodden authored Jan 27, 2013


This reverts commit 5502e147.





f6eab2a7










26 Jan, 2013
3 commits









further cleanups

·
5502e147


Eric Bodden authored Jan 26, 2013






5502e147













optimized synchronization to work without busy loops

·
6f028b34


Eric Bodden authored Jan 26, 2013






6f028b34













minor cleanups

·
cdf8292c


Eric Bodden authored Jan 26, 2013






cdf8292c










25 Jan, 2013
1 commit









Fixed race condition in IDESolver and simplified the code

·
0a1e0ff5


Marc-André Laverdière authored Jan 25, 2013






0a1e0ff5










24 Jan, 2013
2 commits









replaced env variable by property

·
7afff058


Eric Bodden authored Jan 24, 2013






7afff058













added env flag HEROS_DEBUG

·
24fd6856


Eric Bodden authored Jan 24, 2013






24fd6856










22 Jan, 2013
2 commits









support for autoZero

·
0947a364


Eric Bodden authored Jan 22, 2013






0947a364













added possibility to switch off auto-zeroing of flow functions

·
0563038b


Eric Bodden authored Jan 22, 2013






0563038b










08 Jan, 2013
1 commit









fixing race condition found by Steven Arzt

·
2e63b6e7


Eric Bodden authored Jan 08, 2013






2e63b6e7


















275f57839b2238791d76ac90f9fa93c67b633abe


Switch branch/tag









herossrcherossolver

















275f57839b2238791d76ac90f9fa93c67b633abe


Switch branch/tag









herossrcherossolver















275f57839b2238791d76ac90f9fa93c67b633abe


Switch branch/tag









herossrcherossolver




275f57839b2238791d76ac90f9fa93c67b633abe


Switch branch/tag








275f57839b2238791d76ac90f9fa93c67b633abe


Switch branch/tag





275f57839b2238791d76ac90f9fa93c67b633abe

Switch branch/tag





Switch branch/tag



Switch branch/tagSwitch branch/tagherossrcherossolver













05 Jul, 2013
1 commit









changing initialization of analysis such that initialSeeds not is a mapping...

·
275f5783





Eric Bodden authored Jul 05, 2013

changing initialization of analysis such that initialSeeds not is a mapping from units to initial data-flow facts at these units

this is a breaking change, but the class DefaultSeeds can be used to easily convert a set of units (old format) into a default map that should work for current clients

the change was implemented to permit subtypes of IFDSTabulationProblem to overwrite facts at seeds in a convenient way





275f5783










04 Jul, 2013
2 commits









bugfix: when propagating inside out into a caller that was not yet processed...

·
17895853





Eric Bodden authored Jul 04, 2013

bugfix: when propagating inside out into a caller that was not yet processed we need to create a summary edge starting at ZERO, not at the callee's flow fact!





17895853













memory improvement: do not store implicit TOP values

·
987a7a4c


Steven Arzt authored Jul 04, 2013






987a7a4c










16 Jun, 2013
1 commit









fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return...

·
0ec8bfc3





Steven Arzt authored Jun 16, 2013

fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return edge gets processed for **all callers** of the callee from which we return in cases where we haven't seen the respective call edge.

This however leads to spurious edges if we have multiple call sites for the same callee. Let us assume call site A calls foo() with jump function a and call site B calls it with b. If we now return from foo with something derived from a, we will not find an incoming edge for call site B. FollowReturnsPastSeeds thus made us propagate the value to both call sites which makes us loose context sensitivity.

Fix as follows: Only follow past seeds if we have seen no call edge into the callee at all. We can then assume that we're really running beyond the seeds of the analysis and have no other chance than propagating to all call sites.





0ec8bfc3










05 Jun, 2013
1 commit









for unbalanced problems on return statements we now use the return flow...

·
4ae358b3





Eric Bodden authored Jun 05, 2013

for unbalanced problems on return statements we now use the return flow function, not the normal flow function
the caller is then simply "null"
added some comments about this





4ae358b3










29 May, 2013
1 commit









adding synchronization on "val" due to possible race conditions (thanks to...

·
525c45fb





Eric Bodden authored May 29, 2013

adding synchronization on "val" due to possible race conditions (thanks to Damien Octeau for reporting this!)





525c45fb










14 May, 2013
1 commit









made a structure definition "protected"

·
a81e8b33


Steven Arzt authored May 14, 2013






a81e8b33










25 Apr, 2013
1 commit









performance fix for return edges; if there were N start points (e.g. in a...

·
6a91d71e





Eric Bodden authored Apr 25, 2013

performance fix for return edges; if there were N start points (e.g. in a backwards analysis) and we did an unbalanced analysis, then the return-foe function was computed N times; now this is done only once





6a91d71e










15 Mar, 2013
1 commit









Bugfix: ProcessCall computed the new jump functions for a method call at a...

·
d564bec7





Steven Arzt authored Mar 15, 2013

Bugfix: ProcessCall computed the new jump functions for a method call at a specific call and return site pair, but then propagated the results to all return sites of this call. This lead to spurious results if there were multiple return sites for a call that had non-equal fact sets on their return edges.





d564bec7










11 Mar, 2013
1 commit









Replaced the duplicate call to the icfg by an access to cached structure we have anyway

·
5c0a40f6


Steven Arzt authored Mar 11, 2013






5c0a40f6










28 Feb, 2013
1 commit









removed stupig bug found by findbugs !!!

·
72286798


Eric Bodden authored Feb 28, 2013






72286798










20 Feb, 2013
1 commit









bugfix: were propagating incorrect values at return-flow edges

·
0645e494


Eric Bodden authored Feb 20, 2013






0645e494










14 Feb, 2013
1 commit









bug fix for value computation (need to treat initialSeeds just as method start nodes)

·
227b9337


Eric Bodden authored Feb 14, 2013






227b9337










02 Feb, 2013
1 commit









added notes on persisting summary information

·
f66df606


Eric Bodden authored Feb 02, 2013






f66df606










30 Jan, 2013
3 commits









extracted method awaitCompletionComputeValuesAndShutdown()

·
446d709e


Eric Bodden authored Jan 30, 2013






446d709e













made scheduleEdgeProcessing protected such that it can be called from the outside

·
abe1050c


Eric Bodden authored Jan 30, 2013






abe1050c













Revert "removed superfluous call to scheduleEdgeProcessing"

·
2c7e04fd





Eric Bodden authored Jan 30, 2013


This reverts commit 1747df0c.

The change was wrong; scheduleEdgeProcessing does need to be called explicitly at initialization time!





2c7e04fd










29 Jan, 2013
6 commits









fixing shutdown sequence

·
e0e51e68


Eric Bodden authored Jan 29, 2013






e0e51e68













making executor exchangeable

·
18c72755


Eric Bodden authored Jan 29, 2013






18c72755













make computation of values optional

·
357e129e


Eric Bodden authored Jan 29, 2013






357e129e













number of threads is now configured through SolverConfiguration, a new super...

·
1e7167fe





Eric Bodden authored Jan 29, 2013

number of threads is now configured through SolverConfiguration, a new super interface of IFDSTabulationProblem





1e7167fe













indentation

·
aa7b4340


Eric Bodden authored Jan 29, 2013






aa7b4340













removed superfluous call to scheduleEdgeProcessing

·
1747df0c


Eric Bodden authored Jan 29, 2013






1747df0c










28 Jan, 2013
6 commits









refactoring: autoAddZero is now set in IFDSTabulationProblem

·
4b103811


Eric Bodden authored Jan 28, 2013






4b103811













comments

·
aa036d4b


Eric Bodden authored Jan 28, 2013






aa036d4b













refactoring

·
b9930158


Eric Bodden authored Jan 28, 2013






b9930158













Revert "adding CountLatch"

·
db8c1e4a





Eric Bodden authored Jan 28, 2013


This reverts commit 31c5f3dd.

Revert "bugfix: must increment counter on task submission, not when task starts executing"

This reverts commit c8267b07.

Revert "Revert "optimized synchronization to work without busy loops""

This reverts commit 9229bc5c.

Revert "Revert "further cleanups""

This reverts commit f6eab2a7.

bugfix: must increment counter on task submission, not when task starts executing





db8c1e4a













adding CountLatch

·
31c5f3dd


Eric Bodden authored Jan 28, 2013






31c5f3dd













bugfix: must increment counter on task submission, not when task starts executing

·
c8267b07


Eric Bodden authored Jan 28, 2013






c8267b07










27 Jan, 2013
2 commits









Revert "optimized synchronization to work without busy loops"

·
9229bc5c





Eric Bodden authored Jan 27, 2013


This reverts commit 6f028b34.





9229bc5c













Revert "further cleanups"

·
f6eab2a7





Eric Bodden authored Jan 27, 2013


This reverts commit 5502e147.





f6eab2a7










26 Jan, 2013
3 commits









further cleanups

·
5502e147


Eric Bodden authored Jan 26, 2013






5502e147













optimized synchronization to work without busy loops

·
6f028b34


Eric Bodden authored Jan 26, 2013






6f028b34













minor cleanups

·
cdf8292c


Eric Bodden authored Jan 26, 2013






cdf8292c










25 Jan, 2013
1 commit









Fixed race condition in IDESolver and simplified the code

·
0a1e0ff5


Marc-André Laverdière authored Jan 25, 2013






0a1e0ff5










24 Jan, 2013
2 commits









replaced env variable by property

·
7afff058


Eric Bodden authored Jan 24, 2013






7afff058













added env flag HEROS_DEBUG

·
24fd6856


Eric Bodden authored Jan 24, 2013






24fd6856










22 Jan, 2013
2 commits









support for autoZero

·
0947a364


Eric Bodden authored Jan 22, 2013






0947a364













added possibility to switch off auto-zeroing of flow functions

·
0563038b


Eric Bodden authored Jan 22, 2013






0563038b










08 Jan, 2013
1 commit









fixing race condition found by Steven Arzt

·
2e63b6e7


Eric Bodden authored Jan 08, 2013






2e63b6e7











05 Jul, 2013
1 commit
05 Jul, 20131 commit







changing initialization of analysis such that initialSeeds not is a mapping...

·
275f5783





Eric Bodden authored Jul 05, 2013

changing initialization of analysis such that initialSeeds not is a mapping from units to initial data-flow facts at these units

this is a breaking change, but the class DefaultSeeds can be used to easily convert a set of units (old format) into a default map that should work for current clients

the change was implemented to permit subtypes of IFDSTabulationProblem to overwrite facts at seeds in a convenient way





275f5783














changing initialization of analysis such that initialSeeds not is a mapping...

·
275f5783





Eric Bodden authored Jul 05, 2013

changing initialization of analysis such that initialSeeds not is a mapping from units to initial data-flow facts at these units

this is a breaking change, but the class DefaultSeeds can be used to easily convert a set of units (old format) into a default map that should work for current clients

the change was implemented to permit subtypes of IFDSTabulationProblem to overwrite facts at seeds in a convenient way





275f5783










changing initialization of analysis such that initialSeeds not is a mapping...

·
275f5783





Eric Bodden authored Jul 05, 2013

changing initialization of analysis such that initialSeeds not is a mapping from units to initial data-flow facts at these units

this is a breaking change, but the class DefaultSeeds can be used to easily convert a set of units (old format) into a default map that should work for current clients

the change was implemented to permit subtypes of IFDSTabulationProblem to overwrite facts at seeds in a convenient way





275f5783






changing initialization of analysis such that initialSeeds not is a mapping...

·
275f5783





Eric Bodden authored Jul 05, 2013

changing initialization of analysis such that initialSeeds not is a mapping from units to initial data-flow facts at these units

this is a breaking change, but the class DefaultSeeds can be used to easily convert a set of units (old format) into a default map that should work for current clients

the change was implemented to permit subtypes of IFDSTabulationProblem to overwrite facts at seeds in a convenient way

·
275f5783

Eric Bodden authored Jul 05, 2013




275f5783






275f5783




275f5783

04 Jul, 2013
2 commits
04 Jul, 20132 commits







bugfix: when propagating inside out into a caller that was not yet processed...

·
17895853





Eric Bodden authored Jul 04, 2013

bugfix: when propagating inside out into a caller that was not yet processed we need to create a summary edge starting at ZERO, not at the callee's flow fact!





17895853













memory improvement: do not store implicit TOP values

·
987a7a4c


Steven Arzt authored Jul 04, 2013






987a7a4c














bugfix: when propagating inside out into a caller that was not yet processed...

·
17895853





Eric Bodden authored Jul 04, 2013

bugfix: when propagating inside out into a caller that was not yet processed we need to create a summary edge starting at ZERO, not at the callee's flow fact!





17895853










bugfix: when propagating inside out into a caller that was not yet processed...

·
17895853





Eric Bodden authored Jul 04, 2013

bugfix: when propagating inside out into a caller that was not yet processed we need to create a summary edge starting at ZERO, not at the callee's flow fact!





17895853






bugfix: when propagating inside out into a caller that was not yet processed...

·
17895853





Eric Bodden authored Jul 04, 2013

bugfix: when propagating inside out into a caller that was not yet processed we need to create a summary edge starting at ZERO, not at the callee's flow fact!

·
17895853

Eric Bodden authored Jul 04, 2013




17895853






17895853




17895853






memory improvement: do not store implicit TOP values

·
987a7a4c


Steven Arzt authored Jul 04, 2013






987a7a4c










memory improvement: do not store implicit TOP values

·
987a7a4c


Steven Arzt authored Jul 04, 2013






987a7a4c






memory improvement: do not store implicit TOP values

·
987a7a4c


Steven Arzt authored Jul 04, 2013


·
987a7a4c

Steven Arzt authored Jul 04, 2013




987a7a4c






987a7a4c




987a7a4c

16 Jun, 2013
1 commit
16 Jun, 20131 commit







fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return...

·
0ec8bfc3





Steven Arzt authored Jun 16, 2013

fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return edge gets processed for **all callers** of the callee from which we return in cases where we haven't seen the respective call edge.

This however leads to spurious edges if we have multiple call sites for the same callee. Let us assume call site A calls foo() with jump function a and call site B calls it with b. If we now return from foo with something derived from a, we will not find an incoming edge for call site B. FollowReturnsPastSeeds thus made us propagate the value to both call sites which makes us loose context sensitivity.

Fix as follows: Only follow past seeds if we have seen no call edge into the callee at all. We can then assume that we're really running beyond the seeds of the analysis and have no other chance than propagating to all call sites.





0ec8bfc3














fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return...

·
0ec8bfc3





Steven Arzt authored Jun 16, 2013

fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return edge gets processed for **all callers** of the callee from which we return in cases where we haven't seen the respective call edge.

This however leads to spurious edges if we have multiple call sites for the same callee. Let us assume call site A calls foo() with jump function a and call site B calls it with b. If we now return from foo with something derived from a, we will not find an incoming edge for call site B. FollowReturnsPastSeeds thus made us propagate the value to both call sites which makes us loose context sensitivity.

Fix as follows: Only follow past seeds if we have seen no call edge into the callee at all. We can then assume that we're really running beyond the seeds of the analysis and have no other chance than propagating to all call sites.





0ec8bfc3










fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return...

·
0ec8bfc3





Steven Arzt authored Jun 16, 2013

fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return edge gets processed for **all callers** of the callee from which we return in cases where we haven't seen the respective call edge.

This however leads to spurious edges if we have multiple call sites for the same callee. Let us assume call site A calls foo() with jump function a and call site B calls it with b. If we now return from foo with something derived from a, we will not find an incoming edge for call site B. FollowReturnsPastSeeds thus made us propagate the value to both call sites which makes us loose context sensitivity.

Fix as follows: Only follow past seeds if we have seen no call edge into the callee at all. We can then assume that we're really running beyond the seeds of the analysis and have no other chance than propagating to all call sites.





0ec8bfc3






fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return...

·
0ec8bfc3





Steven Arzt authored Jun 16, 2013

fixed the semantics of FollowReturnsPastSeeds: If this option is set, a return edge gets processed for **all callers** of the callee from which we return in cases where we haven't seen the respective call edge.

This however leads to spurious edges if we have multiple call sites for the same callee. Let us assume call site A calls foo() with jump function a and call site B calls it with b. If we now return from foo with something derived from a, we will not find an incoming edge for call site B. FollowReturnsPastSeeds thus made us propagate the value to both call sites which makes us loose context sensitivity.

Fix as follows: Only follow past seeds if we have seen no call edge into the callee at all. We can then assume that we're really running beyond the seeds of the analysis and have no other chance than propagating to all call sites.

·
0ec8bfc3

Steven Arzt authored Jun 16, 2013




0ec8bfc3






0ec8bfc3




0ec8bfc3

05 Jun, 2013
1 commit
05 Jun, 20131 commit







for unbalanced problems on return statements we now use the return flow...

·
4ae358b3





Eric Bodden authored Jun 05, 2013

for unbalanced problems on return statements we now use the return flow function, not the normal flow function
the caller is then simply "null"
added some comments about this





4ae358b3














for unbalanced problems on return statements we now use the return flow...

·
4ae358b3





Eric Bodden authored Jun 05, 2013

for unbalanced problems on return statements we now use the return flow function, not the normal flow function
the caller is then simply "null"
added some comments about this





4ae358b3










for unbalanced problems on return statements we now use the return flow...

·
4ae358b3





Eric Bodden authored Jun 05, 2013

for unbalanced problems on return statements we now use the return flow function, not the normal flow function
the caller is then simply "null"
added some comments about this





4ae358b3






for unbalanced problems on return statements we now use the return flow...

·
4ae358b3





Eric Bodden authored Jun 05, 2013

for unbalanced problems on return statements we now use the return flow function, not the normal flow function
the caller is then simply "null"
added some comments about this

·
4ae358b3

Eric Bodden authored Jun 05, 2013




4ae358b3






4ae358b3




4ae358b3

29 May, 2013
1 commit
29 May, 20131 commit







adding synchronization on "val" due to possible race conditions (thanks to...

·
525c45fb





Eric Bodden authored May 29, 2013

adding synchronization on "val" due to possible race conditions (thanks to Damien Octeau for reporting this!)





525c45fb














adding synchronization on "val" due to possible race conditions (thanks to...

·
525c45fb





Eric Bodden authored May 29, 2013

adding synchronization on "val" due to possible race conditions (thanks to Damien Octeau for reporting this!)





525c45fb










adding synchronization on "val" due to possible race conditions (thanks to...

·
525c45fb





Eric Bodden authored May 29, 2013

adding synchronization on "val" due to possible race conditions (thanks to Damien Octeau for reporting this!)





525c45fb






adding synchronization on "val" due to possible race conditions (thanks to...

·
525c45fb





Eric Bodden authored May 29, 2013

adding synchronization on "val" due to possible race conditions (thanks to Damien Octeau for reporting this!)

·
525c45fb

Eric Bodden authored May 29, 2013




525c45fb






525c45fb




525c45fb

14 May, 2013
1 commit
14 May, 20131 commit







made a structure definition "protected"

·
a81e8b33


Steven Arzt authored May 14, 2013






a81e8b33














made a structure definition "protected"

·
a81e8b33


Steven Arzt authored May 14, 2013






a81e8b33










made a structure definition "protected"

·
a81e8b33


Steven Arzt authored May 14, 2013






a81e8b33






made a structure definition "protected"

·
a81e8b33


Steven Arzt authored May 14, 2013


·
a81e8b33

Steven Arzt authored May 14, 2013




a81e8b33






a81e8b33




a81e8b33

25 Apr, 2013
1 commit
25 Apr, 20131 commit







performance fix for return edges; if there were N start points (e.g. in a...

·
6a91d71e





Eric Bodden authored Apr 25, 2013

performance fix for return edges; if there were N start points (e.g. in a backwards analysis) and we did an unbalanced analysis, then the return-foe function was computed N times; now this is done only once





6a91d71e














performance fix for return edges; if there were N start points (e.g. in a...

·
6a91d71e





Eric Bodden authored Apr 25, 2013

performance fix for return edges; if there were N start points (e.g. in a backwards analysis) and we did an unbalanced analysis, then the return-foe function was computed N times; now this is done only once





6a91d71e










performance fix for return edges; if there were N start points (e.g. in a...

·
6a91d71e





Eric Bodden authored Apr 25, 2013

performance fix for return edges; if there were N start points (e.g. in a backwards analysis) and we did an unbalanced analysis, then the return-foe function was computed N times; now this is done only once





6a91d71e






performance fix for return edges; if there were N start points (e.g. in a...

·
6a91d71e





Eric Bodden authored Apr 25, 2013

performance fix for return edges; if there were N start points (e.g. in a backwards analysis) and we did an unbalanced analysis, then the return-foe function was computed N times; now this is done only once

·
6a91d71e

Eric Bodden authored Apr 25, 2013




6a91d71e






6a91d71e




6a91d71e

15 Mar, 2013
1 commit
15 Mar, 20131 commit







Bugfix: ProcessCall computed the new jump functions for a method call at a...

·
d564bec7





Steven Arzt authored Mar 15, 2013

Bugfix: ProcessCall computed the new jump functions for a method call at a specific call and return site pair, but then propagated the results to all return sites of this call. This lead to spurious results if there were multiple return sites for a call that had non-equal fact sets on their return edges.





d564bec7














Bugfix: ProcessCall computed the new jump functions for a method call at a...

·
d564bec7





Steven Arzt authored Mar 15, 2013

Bugfix: ProcessCall computed the new jump functions for a method call at a specific call and return site pair, but then propagated the results to all return sites of this call. This lead to spurious results if there were multiple return sites for a call that had non-equal fact sets on their return edges.





d564bec7










Bugfix: ProcessCall computed the new jump functions for a method call at a...

·
d564bec7





Steven Arzt authored Mar 15, 2013

Bugfix: ProcessCall computed the new jump functions for a method call at a specific call and return site pair, but then propagated the results to all return sites of this call. This lead to spurious results if there were multiple return sites for a call that had non-equal fact sets on their return edges.





d564bec7






Bugfix: ProcessCall computed the new jump functions for a method call at a...

·
d564bec7





Steven Arzt authored Mar 15, 2013

Bugfix: ProcessCall computed the new jump functions for a method call at a specific call and return site pair, but then propagated the results to all return sites of this call. This lead to spurious results if there were multiple return sites for a call that had non-equal fact sets on their return edges.

·
d564bec7

Steven Arzt authored Mar 15, 2013




d564bec7






d564bec7




d564bec7

11 Mar, 2013
1 commit
11 Mar, 20131 commit







Replaced the duplicate call to the icfg by an access to cached structure we have anyway

·
5c0a40f6


Steven Arzt authored Mar 11, 2013






5c0a40f6














Replaced the duplicate call to the icfg by an access to cached structure we have anyway

·
5c0a40f6


Steven Arzt authored Mar 11, 2013






5c0a40f6










Replaced the duplicate call to the icfg by an access to cached structure we have anyway

·
5c0a40f6


Steven Arzt authored Mar 11, 2013






5c0a40f6






Replaced the duplicate call to the icfg by an access to cached structure we have anyway

·
5c0a40f6


Steven Arzt authored Mar 11, 2013


·
5c0a40f6

Steven Arzt authored Mar 11, 2013




5c0a40f6






5c0a40f6




5c0a40f6

28 Feb, 2013
1 commit
28 Feb, 20131 commit







removed stupig bug found by findbugs !!!

·
72286798


Eric Bodden authored Feb 28, 2013






72286798














removed stupig bug found by findbugs !!!

·
72286798


Eric Bodden authored Feb 28, 2013






72286798










removed stupig bug found by findbugs !!!

·
72286798


Eric Bodden authored Feb 28, 2013






72286798






removed stupig bug found by findbugs !!!

·
72286798


Eric Bodden authored Feb 28, 2013


·
72286798

Eric Bodden authored Feb 28, 2013




72286798






72286798




72286798

20 Feb, 2013
1 commit
20 Feb, 20131 commit







bugfix: were propagating incorrect values at return-flow edges

·
0645e494


Eric Bodden authored Feb 20, 2013






0645e494














bugfix: were propagating incorrect values at return-flow edges

·
0645e494


Eric Bodden authored Feb 20, 2013






0645e494










bugfix: were propagating incorrect values at return-flow edges

·
0645e494


Eric Bodden authored Feb 20, 2013






0645e494






bugfix: were propagating incorrect values at return-flow edges

·
0645e494


Eric Bodden authored Feb 20, 2013


·
0645e494

Eric Bodden authored Feb 20, 2013




0645e494






0645e494




0645e494

14 Feb, 2013
1 commit
14 Feb, 20131 commit







bug fix for value computation (need to treat initialSeeds just as method start nodes)

·
227b9337


Eric Bodden authored Feb 14, 2013






227b9337














bug fix for value computation (need to treat initialSeeds just as method start nodes)

·
227b9337


Eric Bodden authored Feb 14, 2013






227b9337










bug fix for value computation (need to treat initialSeeds just as method start nodes)

·
227b9337


Eric Bodden authored Feb 14, 2013






227b9337






bug fix for value computation (need to treat initialSeeds just as method start nodes)

·
227b9337


Eric Bodden authored Feb 14, 2013


·
227b9337

Eric Bodden authored Feb 14, 2013




227b9337






227b9337




227b9337

02 Feb, 2013
1 commit
02 Feb, 20131 commit







added notes on persisting summary information

·
f66df606


Eric Bodden authored Feb 02, 2013






f66df606














added notes on persisting summary information

·
f66df606


Eric Bodden authored Feb 02, 2013






f66df606










added notes on persisting summary information

·
f66df606


Eric Bodden authored Feb 02, 2013






f66df606






added notes on persisting summary information

·
f66df606


Eric Bodden authored Feb 02, 2013


·
f66df606

Eric Bodden authored Feb 02, 2013




f66df606






f66df606




f66df606

30 Jan, 2013
3 commits
30 Jan, 20133 commits







extracted method awaitCompletionComputeValuesAndShutdown()

·
446d709e


Eric Bodden authored Jan 30, 2013






446d709e













made scheduleEdgeProcessing protected such that it can be called from the outside

·
abe1050c


Eric Bodden authored Jan 30, 2013






abe1050c













Revert "removed superfluous call to scheduleEdgeProcessing"

·
2c7e04fd





Eric Bodden authored Jan 30, 2013


This reverts commit 1747df0c.

The change was wrong; scheduleEdgeProcessing does need to be called explicitly at initialization time!





2c7e04fd














extracted method awaitCompletionComputeValuesAndShutdown()

·
446d709e


Eric Bodden authored Jan 30, 2013






446d709e










extracted method awaitCompletionComputeValuesAndShutdown()

·
446d709e


Eric Bodden authored Jan 30, 2013






446d709e






extracted method awaitCompletionComputeValuesAndShutdown()

·
446d709e


Eric Bodden authored Jan 30, 2013


·
446d709e

Eric Bodden authored Jan 30, 2013




446d709e






446d709e




446d709e






made scheduleEdgeProcessing protected such that it can be called from the outside

·
abe1050c


Eric Bodden authored Jan 30, 2013






abe1050c










made scheduleEdgeProcessing protected such that it can be called from the outside

·
abe1050c


Eric Bodden authored Jan 30, 2013






abe1050c






made scheduleEdgeProcessing protected such that it can be called from the outside

·
abe1050c


Eric Bodden authored Jan 30, 2013


·
abe1050c

Eric Bodden authored Jan 30, 2013




abe1050c






abe1050c




abe1050c






Revert "removed superfluous call to scheduleEdgeProcessing"

·
2c7e04fd





Eric Bodden authored Jan 30, 2013


This reverts commit 1747df0c.

The change was wrong; scheduleEdgeProcessing does need to be called explicitly at initialization time!





2c7e04fd










Revert "removed superfluous call to scheduleEdgeProcessing"

·
2c7e04fd





Eric Bodden authored Jan 30, 2013


This reverts commit 1747df0c.

The change was wrong; scheduleEdgeProcessing does need to be called explicitly at initialization time!





2c7e04fd






Revert "removed superfluous call to scheduleEdgeProcessing"

·
2c7e04fd





Eric Bodden authored Jan 30, 2013


This reverts commit 1747df0c.

The change was wrong; scheduleEdgeProcessing does need to be called explicitly at initialization time!

·
2c7e04fd

Eric Bodden authored Jan 30, 2013




2c7e04fd






2c7e04fd




2c7e04fd

29 Jan, 2013
6 commits
29 Jan, 20136 commits







fixing shutdown sequence

·
e0e51e68


Eric Bodden authored Jan 29, 2013






e0e51e68













making executor exchangeable

·
18c72755


Eric Bodden authored Jan 29, 2013






18c72755













make computation of values optional

·
357e129e


Eric Bodden authored Jan 29, 2013






357e129e













number of threads is now configured through SolverConfiguration, a new super...

·
1e7167fe





Eric Bodden authored Jan 29, 2013

number of threads is now configured through SolverConfiguration, a new super interface of IFDSTabulationProblem





1e7167fe













indentation

·
aa7b4340


Eric Bodden authored Jan 29, 2013






aa7b4340













removed superfluous call to scheduleEdgeProcessing

·
1747df0c


Eric Bodden authored Jan 29, 2013






1747df0c














fixing shutdown sequence

·
e0e51e68


Eric Bodden authored Jan 29, 2013






e0e51e68










fixing shutdown sequence

·
e0e51e68


Eric Bodden authored Jan 29, 2013






e0e51e68






fixing shutdown sequence

·
e0e51e68


Eric Bodden authored Jan 29, 2013


·
e0e51e68

Eric Bodden authored Jan 29, 2013




e0e51e68






e0e51e68




e0e51e68






making executor exchangeable

·
18c72755


Eric Bodden authored Jan 29, 2013






18c72755










making executor exchangeable

·
18c72755


Eric Bodden authored Jan 29, 2013






18c72755






making executor exchangeable

·
18c72755


Eric Bodden authored Jan 29, 2013


·
18c72755

Eric Bodden authored Jan 29, 2013




18c72755






18c72755




18c72755






make computation of values optional

·
357e129e


Eric Bodden authored Jan 29, 2013






357e129e










make computation of values optional

·
357e129e


Eric Bodden authored Jan 29, 2013






357e129e






make computation of values optional

·
357e129e


Eric Bodden authored Jan 29, 2013


·
357e129e

Eric Bodden authored Jan 29, 2013




357e129e






357e129e




357e129e






number of threads is now configured through SolverConfiguration, a new super...

·
1e7167fe





Eric Bodden authored Jan 29, 2013

number of threads is now configured through SolverConfiguration, a new super interface of IFDSTabulationProblem





1e7167fe










number of threads is now configured through SolverConfiguration, a new super...

·
1e7167fe





Eric Bodden authored Jan 29, 2013

number of threads is now configured through SolverConfiguration, a new super interface of IFDSTabulationProblem





1e7167fe






number of threads is now configured through SolverConfiguration, a new super...

·
1e7167fe





Eric Bodden authored Jan 29, 2013

number of threads is now configured through SolverConfiguration, a new super interface of IFDSTabulationProblem

·
1e7167fe

Eric Bodden authored Jan 29, 2013




1e7167fe






1e7167fe




1e7167fe






indentation

·
aa7b4340


Eric Bodden authored Jan 29, 2013






aa7b4340










indentation

·
aa7b4340


Eric Bodden authored Jan 29, 2013






aa7b4340






indentation

·
aa7b4340


Eric Bodden authored Jan 29, 2013


·
aa7b4340

Eric Bodden authored Jan 29, 2013




aa7b4340






aa7b4340




aa7b4340






removed superfluous call to scheduleEdgeProcessing

·
1747df0c


Eric Bodden authored Jan 29, 2013






1747df0c










removed superfluous call to scheduleEdgeProcessing

·
1747df0c


Eric Bodden authored Jan 29, 2013






1747df0c






removed superfluous call to scheduleEdgeProcessing

·
1747df0c


Eric Bodden authored Jan 29, 2013


·
1747df0c

Eric Bodden authored Jan 29, 2013




1747df0c






1747df0c




1747df0c

28 Jan, 2013
6 commits
28 Jan, 20136 commits







refactoring: autoAddZero is now set in IFDSTabulationProblem

·
4b103811


Eric Bodden authored Jan 28, 2013






4b103811













comments

·
aa036d4b


Eric Bodden authored Jan 28, 2013






aa036d4b













refactoring

·
b9930158


Eric Bodden authored Jan 28, 2013






b9930158













Revert "adding CountLatch"

·
db8c1e4a





Eric Bodden authored Jan 28, 2013


This reverts commit 31c5f3dd.

Revert "bugfix: must increment counter on task submission, not when task starts executing"

This reverts commit c8267b07.

Revert "Revert "optimized synchronization to work without busy loops""

This reverts commit 9229bc5c.

Revert "Revert "further cleanups""

This reverts commit f6eab2a7.

bugfix: must increment counter on task submission, not when task starts executing





db8c1e4a













adding CountLatch

·
31c5f3dd


Eric Bodden authored Jan 28, 2013






31c5f3dd













bugfix: must increment counter on task submission, not when task starts executing

·
c8267b07


Eric Bodden authored Jan 28, 2013






c8267b07














refactoring: autoAddZero is now set in IFDSTabulationProblem

·
4b103811


Eric Bodden authored Jan 28, 2013






4b103811










refactoring: autoAddZero is now set in IFDSTabulationProblem

·
4b103811


Eric Bodden authored Jan 28, 2013






4b103811






refactoring: autoAddZero is now set in IFDSTabulationProblem

·
4b103811


Eric Bodden authored Jan 28, 2013


·
4b103811

Eric Bodden authored Jan 28, 2013




4b103811






4b103811




4b103811






comments

·
aa036d4b


Eric Bodden authored Jan 28, 2013






aa036d4b










comments

·
aa036d4b


Eric Bodden authored Jan 28, 2013






aa036d4b






comments

·
aa036d4b


Eric Bodden authored Jan 28, 2013


·
aa036d4b

Eric Bodden authored Jan 28, 2013




aa036d4b






aa036d4b




aa036d4b






refactoring

·
b9930158


Eric Bodden authored Jan 28, 2013






b9930158










refactoring

·
b9930158


Eric Bodden authored Jan 28, 2013






b9930158






refactoring

·
b9930158


Eric Bodden authored Jan 28, 2013


·
b9930158

Eric Bodden authored Jan 28, 2013




b9930158






b9930158




b9930158






Revert "adding CountLatch"

·
db8c1e4a





Eric Bodden authored Jan 28, 2013


This reverts commit 31c5f3dd.

Revert "bugfix: must increment counter on task submission, not when task starts executing"

This reverts commit c8267b07.

Revert "Revert "optimized synchronization to work without busy loops""

This reverts commit 9229bc5c.

Revert "Revert "further cleanups""

This reverts commit f6eab2a7.

bugfix: must increment counter on task submission, not when task starts executing





db8c1e4a










Revert "adding CountLatch"

·
db8c1e4a





Eric Bodden authored Jan 28, 2013


This reverts commit 31c5f3dd.

Revert "bugfix: must increment counter on task submission, not when task starts executing"

This reverts commit c8267b07.

Revert "Revert "optimized synchronization to work without busy loops""

This reverts commit 9229bc5c.

Revert "Revert "further cleanups""

This reverts commit f6eab2a7.

bugfix: must increment counter on task submission, not when task starts executing





db8c1e4a






Revert "adding CountLatch"

·
db8c1e4a





Eric Bodden authored Jan 28, 2013


This reverts commit 31c5f3dd.

Revert "bugfix: must increment counter on task submission, not when task starts executing"

This reverts commit c8267b07.

Revert "Revert "optimized synchronization to work without busy loops""

This reverts commit 9229bc5c.

Revert "Revert "further cleanups""

This reverts commit f6eab2a7.

bugfix: must increment counter on task submission, not when task starts executing

·
db8c1e4a

Eric Bodden authored Jan 28, 2013




db8c1e4a






db8c1e4a




db8c1e4a






adding CountLatch

·
31c5f3dd


Eric Bodden authored Jan 28, 2013






31c5f3dd










adding CountLatch

·
31c5f3dd


Eric Bodden authored Jan 28, 2013






31c5f3dd






adding CountLatch

·
31c5f3dd


Eric Bodden authored Jan 28, 2013


·
31c5f3dd

Eric Bodden authored Jan 28, 2013




31c5f3dd






31c5f3dd




31c5f3dd






bugfix: must increment counter on task submission, not when task starts executing

·
c8267b07


Eric Bodden authored Jan 28, 2013






c8267b07










bugfix: must increment counter on task submission, not when task starts executing

·
c8267b07


Eric Bodden authored Jan 28, 2013






c8267b07






bugfix: must increment counter on task submission, not when task starts executing

·
c8267b07


Eric Bodden authored Jan 28, 2013


·
c8267b07

Eric Bodden authored Jan 28, 2013




c8267b07






c8267b07




c8267b07

27 Jan, 2013
2 commits
27 Jan, 20132 commits







Revert "optimized synchronization to work without busy loops"

·
9229bc5c





Eric Bodden authored Jan 27, 2013


This reverts commit 6f028b34.





9229bc5c













Revert "further cleanups"

·
f6eab2a7





Eric Bodden authored Jan 27, 2013


This reverts commit 5502e147.





f6eab2a7














Revert "optimized synchronization to work without busy loops"

·
9229bc5c





Eric Bodden authored Jan 27, 2013


This reverts commit 6f028b34.





9229bc5c










Revert "optimized synchronization to work without busy loops"

·
9229bc5c





Eric Bodden authored Jan 27, 2013


This reverts commit 6f028b34.





9229bc5c






Revert "optimized synchronization to work without busy loops"

·
9229bc5c





Eric Bodden authored Jan 27, 2013


This reverts commit 6f028b34.

·
9229bc5c

Eric Bodden authored Jan 27, 2013




9229bc5c






9229bc5c




9229bc5c






Revert "further cleanups"

·
f6eab2a7





Eric Bodden authored Jan 27, 2013


This reverts commit 5502e147.





f6eab2a7










Revert "further cleanups"

·
f6eab2a7





Eric Bodden authored Jan 27, 2013


This reverts commit 5502e147.





f6eab2a7






Revert "further cleanups"

·
f6eab2a7





Eric Bodden authored Jan 27, 2013


This reverts commit 5502e147.

·
f6eab2a7

Eric Bodden authored Jan 27, 2013




f6eab2a7






f6eab2a7




f6eab2a7

26 Jan, 2013
3 commits
26 Jan, 20133 commits







further cleanups

·
5502e147


Eric Bodden authored Jan 26, 2013






5502e147













optimized synchronization to work without busy loops

·
6f028b34


Eric Bodden authored Jan 26, 2013






6f028b34













minor cleanups

·
cdf8292c


Eric Bodden authored Jan 26, 2013






cdf8292c














further cleanups

·
5502e147


Eric Bodden authored Jan 26, 2013






5502e147










further cleanups

·
5502e147


Eric Bodden authored Jan 26, 2013






5502e147






further cleanups

·
5502e147


Eric Bodden authored Jan 26, 2013


·
5502e147

Eric Bodden authored Jan 26, 2013




5502e147






5502e147




5502e147






optimized synchronization to work without busy loops

·
6f028b34


Eric Bodden authored Jan 26, 2013






6f028b34










optimized synchronization to work without busy loops

·
6f028b34


Eric Bodden authored Jan 26, 2013






6f028b34






optimized synchronization to work without busy loops

·
6f028b34


Eric Bodden authored Jan 26, 2013


·
6f028b34

Eric Bodden authored Jan 26, 2013




6f028b34






6f028b34




6f028b34






minor cleanups

·
cdf8292c


Eric Bodden authored Jan 26, 2013






cdf8292c










minor cleanups

·
cdf8292c


Eric Bodden authored Jan 26, 2013






cdf8292c






minor cleanups

·
cdf8292c


Eric Bodden authored Jan 26, 2013


·
cdf8292c

Eric Bodden authored Jan 26, 2013




cdf8292c






cdf8292c




cdf8292c

25 Jan, 2013
1 commit
25 Jan, 20131 commit







Fixed race condition in IDESolver and simplified the code

·
0a1e0ff5


Marc-André Laverdière authored Jan 25, 2013






0a1e0ff5














Fixed race condition in IDESolver and simplified the code

·
0a1e0ff5


Marc-André Laverdière authored Jan 25, 2013






0a1e0ff5










Fixed race condition in IDESolver and simplified the code

·
0a1e0ff5


Marc-André Laverdière authored Jan 25, 2013






0a1e0ff5






Fixed race condition in IDESolver and simplified the code

·
0a1e0ff5


Marc-André Laverdière authored Jan 25, 2013


·
0a1e0ff5

Marc-André Laverdière authored Jan 25, 2013




0a1e0ff5






0a1e0ff5




0a1e0ff5

24 Jan, 2013
2 commits
24 Jan, 20132 commits







replaced env variable by property

·
7afff058


Eric Bodden authored Jan 24, 2013






7afff058













added env flag HEROS_DEBUG

·
24fd6856


Eric Bodden authored Jan 24, 2013






24fd6856














replaced env variable by property

·
7afff058


Eric Bodden authored Jan 24, 2013






7afff058










replaced env variable by property

·
7afff058


Eric Bodden authored Jan 24, 2013






7afff058






replaced env variable by property

·
7afff058


Eric Bodden authored Jan 24, 2013


·
7afff058

Eric Bodden authored Jan 24, 2013




7afff058






7afff058




7afff058






added env flag HEROS_DEBUG

·
24fd6856


Eric Bodden authored Jan 24, 2013






24fd6856










added env flag HEROS_DEBUG

·
24fd6856


Eric Bodden authored Jan 24, 2013






24fd6856






added env flag HEROS_DEBUG

·
24fd6856


Eric Bodden authored Jan 24, 2013


·
24fd6856

Eric Bodden authored Jan 24, 2013




24fd6856






24fd6856




24fd6856

22 Jan, 2013
2 commits
22 Jan, 20132 commits







support for autoZero

·
0947a364


Eric Bodden authored Jan 22, 2013






0947a364













added possibility to switch off auto-zeroing of flow functions

·
0563038b


Eric Bodden authored Jan 22, 2013






0563038b














support for autoZero

·
0947a364


Eric Bodden authored Jan 22, 2013






0947a364










support for autoZero

·
0947a364


Eric Bodden authored Jan 22, 2013






0947a364






support for autoZero

·
0947a364


Eric Bodden authored Jan 22, 2013


·
0947a364

Eric Bodden authored Jan 22, 2013




0947a364






0947a364




0947a364






added possibility to switch off auto-zeroing of flow functions

·
0563038b


Eric Bodden authored Jan 22, 2013






0563038b










added possibility to switch off auto-zeroing of flow functions

·
0563038b


Eric Bodden authored Jan 22, 2013






0563038b






added possibility to switch off auto-zeroing of flow functions

·
0563038b


Eric Bodden authored Jan 22, 2013


·
0563038b

Eric Bodden authored Jan 22, 2013




0563038b






0563038b




0563038b

08 Jan, 2013
1 commit
08 Jan, 20131 commit







fixing race condition found by Steven Arzt

·
2e63b6e7


Eric Bodden authored Jan 08, 2013






2e63b6e7














fixing race condition found by Steven Arzt

·
2e63b6e7


Eric Bodden authored Jan 08, 2013






2e63b6e7










fixing race condition found by Steven Arzt

·
2e63b6e7


Eric Bodden authored Jan 08, 2013






2e63b6e7






fixing race condition found by Steven Arzt

·
2e63b6e7


Eric Bodden authored Jan 08, 2013


·
2e63b6e7

Eric Bodden authored Jan 08, 2013




2e63b6e7






2e63b6e7




2e63b6e7






