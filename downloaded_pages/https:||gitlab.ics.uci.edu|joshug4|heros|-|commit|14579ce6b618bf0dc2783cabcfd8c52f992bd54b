



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

14579ce6















Commit
14579ce6


authored
Jul 09, 2013
by


Eric Bodden



Browse files




comments







parent
4835598d













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ 14579ce6






......@@ -25,12 +25,33 @@ import java.util.Set;









import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> see {@link IFDSSolver}










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 



......@@ -41,9 +62,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 










 public void solve() { 










 //construct and connect the two solvers










 SingleDirectionSolver fwSolver = new SingleDirectionSolver(forwardProblem, "FW");










 SingleDirectionSolver bwSolver = new SingleDirectionSolver(backwardProblem,"BW");










 fwSolver = new SingleDirectionSolver(forwardProblem, "FW");










 bwSolver = new SingleDirectionSolver(backwardProblem,"BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 



......@@ -56,6 +76,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 fwSolver.solve();










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 private class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;



......@@ -70,13 +93,17 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();



......@@ -87,16 +114,18 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 System.err.println("++ PAUSE "+debugName+": "+edge);










 }










 } else {










 //the default case










 super.processExit(edge);










 }










 }










 










 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(),relatedCallSite);










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 



......@@ -104,10 +133,17 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(N sourceStmt) {










 return leakedSources.contains(sourceStmt);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {



......@@ -132,6 +168,10 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;



......@@ -191,7 +231,11 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }










 










 static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>> implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>>










 implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;



......@@ -309,4 +353,21 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {




















 }










 










 public Set<D> fwIFDSResultAt(N stmt) {










 return extractResults(fwSolver.ifdsResultsAt(stmt));










 }





















 










 public Set<D> bwIFDSResultAt(N stmt) {










 return extractResults(bwSolver.ifdsResultsAt(stmt));










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt<N, D>> annotatedResults) {










 Set<D> res = new HashSet<D>(); 










 for (AbstractionWithSourceStmt<N, D> abstractionWithSourceStmt : annotatedResults) {










 res.add(abstractionWithSourceStmt.getAbstraction());










 }










 return res;










 }










 










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

14579ce6















Commit
14579ce6


authored
Jul 09, 2013
by


Eric Bodden



Browse files




comments







parent
4835598d













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ 14579ce6






......@@ -25,12 +25,33 @@ import java.util.Set;









import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> see {@link IFDSSolver}










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 



......@@ -41,9 +62,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 










 public void solve() { 










 //construct and connect the two solvers










 SingleDirectionSolver fwSolver = new SingleDirectionSolver(forwardProblem, "FW");










 SingleDirectionSolver bwSolver = new SingleDirectionSolver(backwardProblem,"BW");










 fwSolver = new SingleDirectionSolver(forwardProblem, "FW");










 bwSolver = new SingleDirectionSolver(backwardProblem,"BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 



......@@ -56,6 +76,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 fwSolver.solve();










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 private class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;



......@@ -70,13 +93,17 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();



......@@ -87,16 +114,18 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 System.err.println("++ PAUSE "+debugName+": "+edge);










 }










 } else {










 //the default case










 super.processExit(edge);










 }










 }










 










 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(),relatedCallSite);










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 



......@@ -104,10 +133,17 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(N sourceStmt) {










 return leakedSources.contains(sourceStmt);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {



......@@ -132,6 +168,10 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;



......@@ -191,7 +231,11 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }










 










 static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>> implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>>










 implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;



......@@ -309,4 +353,21 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {




















 }










 










 public Set<D> fwIFDSResultAt(N stmt) {










 return extractResults(fwSolver.ifdsResultsAt(stmt));










 }





















 










 public Set<D> bwIFDSResultAt(N stmt) {










 return extractResults(bwSolver.ifdsResultsAt(stmt));










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt<N, D>> annotatedResults) {










 Set<D> res = new HashSet<D>(); 










 for (AbstractionWithSourceStmt<N, D> abstractionWithSourceStmt : annotatedResults) {










 res.add(abstractionWithSourceStmt.getAbstraction());










 }










 return res;










 }










 










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

14579ce6







Open sidebar



Joshua Garcia heros
Commits

14579ce6




Open sidebar

Joshua Garcia heros
Commits

14579ce6


Joshua GarciaherosherosCommits
14579ce6








Commit
14579ce6


authored
Jul 09, 2013
by


Eric Bodden



Browse files




comments







parent
4835598d













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ 14579ce6






......@@ -25,12 +25,33 @@ import java.util.Set;









import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> see {@link IFDSSolver}










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 



......@@ -41,9 +62,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 










 public void solve() { 










 //construct and connect the two solvers










 SingleDirectionSolver fwSolver = new SingleDirectionSolver(forwardProblem, "FW");










 SingleDirectionSolver bwSolver = new SingleDirectionSolver(backwardProblem,"BW");










 fwSolver = new SingleDirectionSolver(forwardProblem, "FW");










 bwSolver = new SingleDirectionSolver(backwardProblem,"BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 



......@@ -56,6 +76,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 fwSolver.solve();










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 private class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;



......@@ -70,13 +93,17 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();



......@@ -87,16 +114,18 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 System.err.println("++ PAUSE "+debugName+": "+edge);










 }










 } else {










 //the default case










 super.processExit(edge);










 }










 }










 










 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(),relatedCallSite);










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 



......@@ -104,10 +133,17 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(N sourceStmt) {










 return leakedSources.contains(sourceStmt);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {



......@@ -132,6 +168,10 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;



......@@ -191,7 +231,11 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }










 










 static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>> implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>>










 implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;



......@@ -309,4 +353,21 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {




















 }










 










 public Set<D> fwIFDSResultAt(N stmt) {










 return extractResults(fwSolver.ifdsResultsAt(stmt));










 }





















 










 public Set<D> bwIFDSResultAt(N stmt) {










 return extractResults(bwSolver.ifdsResultsAt(stmt));










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt<N, D>> annotatedResults) {










 Set<D> res = new HashSet<D>(); 










 for (AbstractionWithSourceStmt<N, D> abstractionWithSourceStmt : annotatedResults) {










 res.add(abstractionWithSourceStmt.getAbstraction());










 }










 return res;










 }










 










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
14579ce6


authored
Jul 09, 2013
by


Eric Bodden



Browse files




comments







parent
4835598d













Changes
1




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ 14579ce6






......@@ -25,12 +25,33 @@ import java.util.Set;









import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> see {@link IFDSSolver}










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 



......@@ -41,9 +62,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 










 public void solve() { 










 //construct and connect the two solvers










 SingleDirectionSolver fwSolver = new SingleDirectionSolver(forwardProblem, "FW");










 SingleDirectionSolver bwSolver = new SingleDirectionSolver(backwardProblem,"BW");










 fwSolver = new SingleDirectionSolver(forwardProblem, "FW");










 bwSolver = new SingleDirectionSolver(backwardProblem,"BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 



......@@ -56,6 +76,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 fwSolver.solve();










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 private class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;



......@@ -70,13 +93,17 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();



......@@ -87,16 +114,18 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 System.err.println("++ PAUSE "+debugName+": "+edge);










 }










 } else {










 //the default case










 super.processExit(edge);










 }










 }










 










 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(),relatedCallSite);










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 



......@@ -104,10 +133,17 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(N sourceStmt) {










 return leakedSources.contains(sourceStmt);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {



......@@ -132,6 +168,10 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;



......@@ -191,7 +231,11 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }










 










 static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>> implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>>










 implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;



......@@ -309,4 +353,21 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {




















 }










 










 public Set<D> fwIFDSResultAt(N stmt) {










 return extractResults(fwSolver.ifdsResultsAt(stmt));










 }





















 










 public Set<D> bwIFDSResultAt(N stmt) {










 return extractResults(bwSolver.ifdsResultsAt(stmt));










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt<N, D>> annotatedResults) {










 Set<D> res = new HashSet<D>(); 










 for (AbstractionWithSourceStmt<N, D> abstractionWithSourceStmt : annotatedResults) {










 res.add(abstractionWithSourceStmt.getAbstraction());










 }










 return res;










 }










 










}
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
14579ce6


authored
Jul 09, 2013
by


Eric Bodden



Browse files



Commit
14579ce6


authored
Jul 09, 2013
by


Eric Bodden

14579ce6authoredbyEric Bodden

comments






parent
4835598d
















parent
4835598d





parent












Changes
1
1


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/solver/BiDiIFDSSolver.java








View file @ 14579ce6






......@@ -25,12 +25,33 @@ import java.util.Set;









import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> see {@link IFDSSolver}










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 



......@@ -41,9 +62,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 










 public void solve() { 










 //construct and connect the two solvers










 SingleDirectionSolver fwSolver = new SingleDirectionSolver(forwardProblem, "FW");










 SingleDirectionSolver bwSolver = new SingleDirectionSolver(backwardProblem,"BW");










 fwSolver = new SingleDirectionSolver(forwardProblem, "FW");










 bwSolver = new SingleDirectionSolver(backwardProblem,"BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 



......@@ -56,6 +76,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 fwSolver.solve();










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 private class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;



......@@ -70,13 +93,17 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();



......@@ -87,16 +114,18 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 System.err.println("++ PAUSE "+debugName+": "+edge);










 }










 } else {










 //the default case










 super.processExit(edge);










 }










 }










 










 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(),relatedCallSite);










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 



......@@ -104,10 +133,17 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(N sourceStmt) {










 return leakedSources.contains(sourceStmt);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {



......@@ -132,6 +168,10 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;



......@@ -191,7 +231,11 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }










 










 static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>> implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>>










 implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;



......@@ -309,4 +353,21 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {




















 }










 










 public Set<D> fwIFDSResultAt(N stmt) {










 return extractResults(fwSolver.ifdsResultsAt(stmt));










 }





















 










 public Set<D> bwIFDSResultAt(N stmt) {










 return extractResults(bwSolver.ifdsResultsAt(stmt));










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt<N, D>> annotatedResults) {










 Set<D> res = new HashSet<D>(); 










 for (AbstractionWithSourceStmt<N, D> abstractionWithSourceStmt : annotatedResults) {










 res.add(abstractionWithSourceStmt.getAbstraction());










 }










 return res;










 }










 










}














src/heros/solver/BiDiIFDSSolver.java








View file @ 14579ce6






......@@ -25,12 +25,33 @@ import java.util.Set;









import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> see {@link IFDSSolver}










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 



......@@ -41,9 +62,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 










 public void solve() { 










 //construct and connect the two solvers










 SingleDirectionSolver fwSolver = new SingleDirectionSolver(forwardProblem, "FW");










 SingleDirectionSolver bwSolver = new SingleDirectionSolver(backwardProblem,"BW");










 fwSolver = new SingleDirectionSolver(forwardProblem, "FW");










 bwSolver = new SingleDirectionSolver(backwardProblem,"BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 



......@@ -56,6 +76,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 fwSolver.solve();










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 private class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;



......@@ -70,13 +93,17 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();



......@@ -87,16 +114,18 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 System.err.println("++ PAUSE "+debugName+": "+edge);










 }










 } else {










 //the default case










 super.processExit(edge);










 }










 }










 










 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(),relatedCallSite);










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 



......@@ -104,10 +133,17 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(N sourceStmt) {










 return leakedSources.contains(sourceStmt);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {



......@@ -132,6 +168,10 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;



......@@ -191,7 +231,11 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }










 










 static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>> implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>>










 implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;



......@@ -309,4 +353,21 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {




















 }










 










 public Set<D> fwIFDSResultAt(N stmt) {










 return extractResults(fwSolver.ifdsResultsAt(stmt));










 }





















 










 public Set<D> bwIFDSResultAt(N stmt) {










 return extractResults(bwSolver.ifdsResultsAt(stmt));










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt<N, D>> annotatedResults) {










 Set<D> res = new HashSet<D>(); 










 for (AbstractionWithSourceStmt<N, D> abstractionWithSourceStmt : annotatedResults) {










 res.add(abstractionWithSourceStmt.getAbstraction());










 }










 return res;










 }










 










}












src/heros/solver/BiDiIFDSSolver.java








View file @ 14579ce6








src/heros/solver/BiDiIFDSSolver.java










View file @ 14579ce6


14579ce6



......@@ -25,12 +25,33 @@ import java.util.Set;









import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> see {@link IFDSSolver}










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 



......@@ -41,9 +62,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 










 public void solve() { 










 //construct and connect the two solvers










 SingleDirectionSolver fwSolver = new SingleDirectionSolver(forwardProblem, "FW");










 SingleDirectionSolver bwSolver = new SingleDirectionSolver(backwardProblem,"BW");










 fwSolver = new SingleDirectionSolver(forwardProblem, "FW");










 bwSolver = new SingleDirectionSolver(backwardProblem,"BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 



......@@ -56,6 +76,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 fwSolver.solve();










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 private class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;



......@@ -70,13 +93,17 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();



......@@ -87,16 +114,18 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 System.err.println("++ PAUSE "+debugName+": "+edge);










 }










 } else {










 //the default case










 super.processExit(edge);










 }










 }










 










 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(),relatedCallSite);










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 



......@@ -104,10 +133,17 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(N sourceStmt) {










 return leakedSources.contains(sourceStmt);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {



......@@ -132,6 +168,10 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;



......@@ -191,7 +231,11 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }










 










 static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>> implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>>










 implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;



......@@ -309,4 +353,21 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {




















 }










 










 public Set<D> fwIFDSResultAt(N stmt) {










 return extractResults(fwSolver.ifdsResultsAt(stmt));










 }





















 










 public Set<D> bwIFDSResultAt(N stmt) {










 return extractResults(bwSolver.ifdsResultsAt(stmt));










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt<N, D>> annotatedResults) {










 Set<D> res = new HashSet<D>(); 










 for (AbstractionWithSourceStmt<N, D> abstractionWithSourceStmt : annotatedResults) {










 res.add(abstractionWithSourceStmt.getAbstraction());










 }










 return res;










 }










 










}






......@@ -25,12 +25,33 @@ import java.util.Set;









import java.util.concurrent.LinkedBlockingQueue;










import java.util.concurrent.TimeUnit;





















/**










 * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to










 * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions.










 * 










 * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems










 * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}.










 * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified










 * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever).










 * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their










 * computed paths are realizable at the same time.










 *










 * @param <N> see {@link IFDSSolver}










 * @param <D> see {@link IFDSSolver}










 * @param <M> see {@link IFDSSolver}










 * @param <I> see {@link IFDSSolver}










 */










public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {





















 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;










 private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;










 private final CountingThreadPoolExecutor sharedExecutor;










 private SingleDirectionSolver fwSolver;










 private SingleDirectionSolver bwSolver;





















 /**










	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.










	 */










 public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {










 if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {










 throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); 



......@@ -41,9 +62,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 










 public void solve() { 










 //construct and connect the two solvers










 SingleDirectionSolver fwSolver = new SingleDirectionSolver(forwardProblem, "FW");










 SingleDirectionSolver bwSolver = new SingleDirectionSolver(backwardProblem,"BW");










 fwSolver = new SingleDirectionSolver(forwardProblem, "FW");










 bwSolver = new SingleDirectionSolver(backwardProblem,"BW");










 fwSolver.otherSolver = bwSolver;










 bwSolver.otherSolver = fwSolver;










 



......@@ -56,6 +76,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 fwSolver.solve();










 }










 










 /**










	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.










	 */










 private class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {










 private final String debugName;










 private SingleDirectionSolver otherSolver;



......@@ -70,13 +93,17 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 










 @Override










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 //if an edge is originating from ZERO then to us this signifies an unbalanced return edge










 if(edge.factAtSource().equals(zeroValue)) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 //we mark the fact that this solver would like to "leak" this edge to the caller










 leakedSources.add(sourceStmt);










 if(otherSolver.hasLeaked(sourceStmt)) {










 //if the other solver has leaked already then unpause its edges and continue










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 //otherwise we pause this solver's edge and don't continue










 Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) {










 pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();



......@@ -87,16 +114,18 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 System.err.println("++ PAUSE "+debugName+": "+edge);










 }










 } else {










 //the default case










 super.processExit(edge);










 }










 }










 










 protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {










 //the follwing branch will be taken only on an unbalanced return










 if(isUnbalancedReturn) {










 assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";










 










 //attach target statement as new "source" statement to track










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(),relatedCallSite);










 targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(), relatedCallSite);










 










 super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);










 } else { 



......@@ -104,10 +133,17 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }










 










 /**










		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source










		 * to its caller.










		 */










 private boolean hasLeaked(N sourceStmt) {










 return leakedSources.contains(sourceStmt);










 }










 










 /**










		 * Unpauses all edges associated with the given source statement.










		 */










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {



......@@ -132,6 +168,10 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }





















 /**










	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the










	 * abstraction the source statement from which this fact originated. 










	 */










 public static class AbstractionWithSourceStmt<N,D> {





















 protected final D abstraction;



......@@ -191,7 +231,11 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 }










 










 static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>> implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {










 /**










	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.










	 */










 private static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>>










 implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {





















 private final IFDSTabulationProblem<N,D,M,I> delegate;










 private final AbstractionWithSourceStmt<N, D> ZERO;



......@@ -309,4 +353,21 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {




















 }










 










 public Set<D> fwIFDSResultAt(N stmt) {










 return extractResults(fwSolver.ifdsResultsAt(stmt));










 }





















 










 public Set<D> bwIFDSResultAt(N stmt) {










 return extractResults(bwSolver.ifdsResultsAt(stmt));










 }





















 private Set<D> extractResults(Set<AbstractionWithSourceStmt<N, D>> annotatedResults) {










 Set<D> res = new HashSet<D>(); 










 for (AbstractionWithSourceStmt<N, D> abstractionWithSourceStmt : annotatedResults) {










 res.add(abstractionWithSourceStmt.getAbstraction());










 }










 return res;










 }










 










}


import java.util.concurrent.LinkedBlockingQueue;importjava.util.concurrent.LinkedBlockingQueue;import java.util.concurrent.TimeUnit;importjava.util.concurrent.TimeUnit;/**/** * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to * This is a special IFDS solver that solves the analysis problem inside out, i.e., from further down the call stack to * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions. * further up the call stack. This can be useful, for instance, for taint analysis problems that track flows in two directions. *  *  * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems * The solver is instantiated with two analyses, one to be computed forward and one to be computed backward. Both analysis problems * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}. * must be unbalanced, i.e., must return <code>true</code> for {@link IFDSTabulationProblem#followReturnsPastSeeds()}. * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified * The solver then executes both analyses in lockstep, i.e., when one of the analyses reaches an unbalanced return edge (signified * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever). * by a ZERO source value) then the solver pauses this analysis until the other analysis reaches the same unbalanced return (if ever). * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their * The result is that the analyses will never diverge, i.e., will ultimately always only propagate into contexts in which both their * computed paths are realizable at the same time. * computed paths are realizable at the same time. * * * @param <N> see {@link IFDSSolver} * @param <N> see {@link IFDSSolver} * @param <D> see {@link IFDSSolver} * @param <D> see {@link IFDSSolver} * @param <M> see {@link IFDSSolver} * @param <M> see {@link IFDSSolver} * @param <I> see {@link IFDSSolver} * @param <I> see {@link IFDSSolver} */ */public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {publicclassBiDiIFDSSolver<N,D,M,IextendsInterproceduralCFG<N,M>>{ private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> forwardProblem;privatefinalIFDSTabulationProblem<N,AbstractionWithSourceStmt<N,D>,M,I>forwardProblem; private final IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> backwardProblem;privatefinalIFDSTabulationProblem<N,AbstractionWithSourceStmt<N,D>,M,I>backwardProblem; private final CountingThreadPoolExecutor sharedExecutor;privatefinalCountingThreadPoolExecutorsharedExecutor; private SingleDirectionSolver fwSolver;privateSingleDirectionSolverfwSolver; private SingleDirectionSolver bwSolver;privateSingleDirectionSolverbwSolver; /**/**	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.	 * Instantiates a {@link BiDiIFDSSolver} with the associated forward and backward problem.	 */	 */ public BiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I> forwardProblem, IFDSTabulationProblem<N,D,M,I> backwardProblem) {publicBiDiIFDSSolver(IFDSTabulationProblem<N,D,M,I>forwardProblem,IFDSTabulationProblem<N,D,M,I>backwardProblem){ if(!forwardProblem.followReturnsPastSeeds() || !backwardProblem.followReturnsPastSeeds()) {if(!forwardProblem.followReturnsPastSeeds()||!backwardProblem.followReturnsPastSeeds()){ throw new IllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); thrownewIllegalArgumentException("This solver is only meant for bottom-up problems, so followReturnsPastSeeds() should return true."); }}  public void solve() { publicvoidsolve(){ //construct and connect the two solvers//construct and connect the two solvers SingleDirectionSolver fwSolver = new SingleDirectionSolver(forwardProblem, "FW");SingleDirectionSolverfwSolver=newSingleDirectionSolver(forwardProblem,"FW"); SingleDirectionSolver bwSolver = new SingleDirectionSolver(backwardProblem,"BW");SingleDirectionSolverbwSolver=newSingleDirectionSolver(backwardProblem,"BW"); fwSolver = new SingleDirectionSolver(forwardProblem, "FW");fwSolver=newSingleDirectionSolver(forwardProblem,"FW"); bwSolver = new SingleDirectionSolver(backwardProblem,"BW");bwSolver=newSingleDirectionSolver(backwardProblem,"BW"); fwSolver.otherSolver = bwSolver;fwSolver.otherSolver=bwSolver; bwSolver.otherSolver = fwSolver;bwSolver.otherSolver=fwSolver;  fwSolver.solve();fwSolver.solve(); }}  /**/**	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.	 * This is a modified IFDS solver that is capable of pausing and unpausing return-flow edges.	 */	 */ private class SingleDirectionSolver extends IFDSSolver<N, AbstractionWithSourceStmt<N, D>, M, I> {privateclassSingleDirectionSolverextendsIFDSSolver<N,AbstractionWithSourceStmt<N,D>,M,I>{ private final String debugName;privatefinalStringdebugName; private SingleDirectionSolver otherSolver;privateSingleDirectionSolverotherSolver;  @Override@Override protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {protectedvoidprocessExit(PathEdge<N,AbstractionWithSourceStmt<N,D>>edge){ //if an edge is originating from ZERO then to us this signifies an unbalanced return edge//if an edge is originating from ZERO then to us this signifies an unbalanced return edge if(edge.factAtSource().equals(zeroValue)) {if(edge.factAtSource().equals(zeroValue)){ N sourceStmt = edge.factAtTarget().getSourceStmt();NsourceStmt=edge.factAtTarget().getSourceStmt(); //we mark the fact that this solver would like to "leak" this edge to the caller//we mark the fact that this solver would like to "leak" this edge to the caller leakedSources.add(sourceStmt);leakedSources.add(sourceStmt); if(otherSolver.hasLeaked(sourceStmt)) {if(otherSolver.hasLeaked(sourceStmt)){ //if the other solver has leaked already then unpause its edges and continue//if the other solver has leaked already then unpause its edges and continue otherSolver.unpausePathEdgesForSource(sourceStmt);otherSolver.unpausePathEdgesForSource(sourceStmt); super.processExit(edge);super.processExit(edge); } else {}else{ //otherwise we pause this solver's edge and don't continue//otherwise we pause this solver's edge and don't continue Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>> pausedEdges = pausedPathEdges.get(sourceStmt);Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>pausedEdges=pausedPathEdges.get(sourceStmt); if(pausedEdges==null) {if(pausedEdges==null){ pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();pausedEdges=newHashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>(); System.err.println("++ PAUSE "+debugName+": "+edge);System.err.println("++ PAUSE "+debugName+": "+edge); }} } else {}else{ //the default case//the default case super.processExit(edge);super.processExit(edge); }} }}  protected void propagate(AbstractionWithSourceStmt<N,D> sourceVal, N target, AbstractionWithSourceStmt<N,D> targetVal, EdgeFunction<IFDSSolver.BinaryDomain> f, N relatedCallSite, boolean isUnbalancedReturn) {protectedvoidpropagate(AbstractionWithSourceStmt<N,D>sourceVal,Ntarget,AbstractionWithSourceStmt<N,D>targetVal,EdgeFunction<IFDSSolver.BinaryDomain>f,NrelatedCallSite,booleanisUnbalancedReturn){ //the follwing branch will be taken only on an unbalanced return//the follwing branch will be taken only on an unbalanced return if(isUnbalancedReturn) {if(isUnbalancedReturn){ assert sourceVal.getSourceStmt()==null : "source value should have no statement attached";assertsourceVal.getSourceStmt()==null:"source value should have no statement attached";  //attach target statement as new "source" statement to track//attach target statement as new "source" statement to track targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(),relatedCallSite);targetVal=newAbstractionWithSourceStmt<N,D>(targetVal.getAbstraction(),relatedCallSite); targetVal = new AbstractionWithSourceStmt<N, D>(targetVal.getAbstraction(), relatedCallSite);targetVal=newAbstractionWithSourceStmt<N,D>(targetVal.getAbstraction(), relatedCallSite);  super.propagate(sourceVal, target, targetVal, f, relatedCallSite, isUnbalancedReturn);super.propagate(sourceVal,target,targetVal,f,relatedCallSite,isUnbalancedReturn); } else { }else{ }} }}  /**/**		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source		 * Returns <code>true</code> if this solver has tried to leak an edge originating from the given source		 * to its caller.		 * to its caller.		 */		 */ private boolean hasLeaked(N sourceStmt) {privatebooleanhasLeaked(NsourceStmt){ return leakedSources.contains(sourceStmt);returnleakedSources.contains(sourceStmt); }}  /**/**		 * Unpauses all edges associated with the given source statement.		 * Unpauses all edges associated with the given source statement.		 */		 */ private void unpausePathEdgesForSource(N sourceStmt) {privatevoidunpausePathEdgesForSource(NsourceStmt){ Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>pausedEdges=pausedPathEdges.get(sourceStmt); if(pausedEdges!=null) {if(pausedEdges!=null){ }} }} /**/**	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the	 * This is an augmented abstraction propagated by the {@link SingleDirectionSolver}. It associates with the	 * abstraction the source statement from which this fact originated. 	 * abstraction the source statement from which this fact originated. 	 */	 */ public static class AbstractionWithSourceStmt<N,D> {publicstaticclassAbstractionWithSourceStmt<N,D>{ protected final D abstraction;protectedfinalDabstraction; }} }}  static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>> implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {staticclassAugmentedTabulationProblem<N,D,M,IextendsInterproceduralCFG<N,M>>implementsIFDSTabulationProblem<N,BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I>{ /**/**	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.	 * This tabulation problem simply propagates augmented abstractions where the normal problem would propagate normal abstractions.	 */	 */ private static class AugmentedTabulationProblem<N,D,M,I extends InterproceduralCFG<N, M>>privatestaticclassAugmentedTabulationProblem<N,D,M,IextendsInterproceduralCFG<N,M>> implements IFDSTabulationProblem<N, BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I> {implementsIFDSTabulationProblem<N,BiDiIFDSSolver.AbstractionWithSourceStmt<N,D>,M,I>{ private final IFDSTabulationProblem<N,D,M,I> delegate;privatefinalIFDSTabulationProblem<N,D,M,I>delegate; private final AbstractionWithSourceStmt<N, D> ZERO;privatefinalAbstractionWithSourceStmt<N,D>ZERO; }}  public Set<D> fwIFDSResultAt(N stmt) {publicSet<D>fwIFDSResultAt(Nstmt){ return extractResults(fwSolver.ifdsResultsAt(stmt));returnextractResults(fwSolver.ifdsResultsAt(stmt)); }}  public Set<D> bwIFDSResultAt(N stmt) {publicSet<D>bwIFDSResultAt(Nstmt){ return extractResults(bwSolver.ifdsResultsAt(stmt));returnextractResults(bwSolver.ifdsResultsAt(stmt)); }} private Set<D> extractResults(Set<AbstractionWithSourceStmt<N, D>> annotatedResults) {privateSet<D>extractResults(Set<AbstractionWithSourceStmt<N,D>>annotatedResults){ Set<D> res = new HashSet<D>(); Set<D>res=newHashSet<D>(); for (AbstractionWithSourceStmt<N, D> abstractionWithSourceStmt : annotatedResults) {for(AbstractionWithSourceStmt<N,D>abstractionWithSourceStmt:annotatedResults){ res.add(abstractionWithSourceStmt.getAbstraction());res.add(abstractionWithSourceStmt.getAbstraction()); }} return res;returnres; }} }}









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






