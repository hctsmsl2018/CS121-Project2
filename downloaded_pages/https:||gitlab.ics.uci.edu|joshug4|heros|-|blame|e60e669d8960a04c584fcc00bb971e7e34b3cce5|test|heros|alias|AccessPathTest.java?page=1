



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros

e60e669d8960a04c584fcc00bb971e7e34b3cce5

















e60e669d8960a04c584fcc00bb971e7e34b3cce5


Switch branch/tag










heros


test


heros


alias


AccessPathTest.java



Find file
Normal viewHistoryPermalink






AccessPathTest.java



2.39 KB









Newer










Older









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.*;


import org.junit.Test;

import com.google.common.collect.Sets;

import heros.alias.AccessPath.PrefixTestResult;

@SuppressWarnings("unchecked")
public class AccessPathTest {

	









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






26




27




	private static AccessPath<String> ap(String... path) {
		return new AccessPath<String>(path, Sets.<String> newHashSet());









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






28




29




30




	}
	
	@Test









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






31




32




33




	public void append() {
		AccessPath<String> sut = ap("a");
		assertEquals(ap("a", "b"), sut.append("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






34




35




36




37




	}
	
	@Test
	public void addOnExclusion() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






38




39




		AccessPath<String> sut = ap().appendExcludedFieldReference("a");
		assertEquals(ap("b"), sut.append("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






40




41




42




43




	}
	
	@Test(expected=IllegalArgumentException.class)
	public void addMergedFieldsOnSingleExclusion() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






44




45




		AccessPath<String> sut = ap().appendExcludedFieldReference("a");
		sut.append("a");	









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






46




47




48




	}
	
	@Test









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






49




50




	public void prepend() {
		assertEquals(ap("c", "a", "b"), ap("a", "b").prepend("c"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






51




52




53




54




	}
	
	@Test
	public void remove() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






55




		assertEquals(ap("b"), ap("a", "b").removeFirst());









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






56




57




58




59




	}
	
	@Test
	public void deltaDepth1() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






60




61




		String[] actual = ap("a").getDeltaTo(ap("a", "b")).accesses;
		assertArrayEquals(new String[] { "b" }, actual);









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






62




63




64




65




	}
	
	@Test
	public void deltaDepth2() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






66




67




		String[] actual = ap("a").getDeltaTo(ap("a", "b", "c")).accesses;
		assertArrayEquals(new String[] { "b", "c" }, actual);









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






68




69




70




71




	}
	
	@Test
	public void emptyDeltaOnEqualExclusions() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






72




73




74




		AccessPath<String> actual = ap().appendExcludedFieldReference("f");
		assertEquals(0, actual.getDeltaTo(ap().appendExcludedFieldReference("f")).accesses.length);
		assertTrue(actual.getDeltaTo(ap().appendExcludedFieldReference("f")).exclusions.equals(Sets.newHashSet("f")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






75




76




	}
	









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






77




78




	@Test
	public void multipleExclPrefixOfMultipleExcl() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






79




80




		AccessPath<String> sut = ap().appendExcludedFieldReference("f", "g");
		assertEquals(PrefixTestResult.POTENTIAL_PREFIX, sut.isPrefixOf(ap().appendExcludedFieldReference("f", "h")));









subumption + debugging


 

 


Johannes Lerch
committed
Feb 09, 2015






81




	}









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






82




}












H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros

e60e669d8960a04c584fcc00bb971e7e34b3cce5

















e60e669d8960a04c584fcc00bb971e7e34b3cce5


Switch branch/tag










heros


test


heros


alias


AccessPathTest.java



Find file
Normal viewHistoryPermalink






AccessPathTest.java



2.39 KB









Newer










Older









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.*;


import org.junit.Test;

import com.google.common.collect.Sets;

import heros.alias.AccessPath.PrefixTestResult;

@SuppressWarnings("unchecked")
public class AccessPathTest {

	









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






26




27




	private static AccessPath<String> ap(String... path) {
		return new AccessPath<String>(path, Sets.<String> newHashSet());









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






28




29




30




	}
	
	@Test









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






31




32




33




	public void append() {
		AccessPath<String> sut = ap("a");
		assertEquals(ap("a", "b"), sut.append("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






34




35




36




37




	}
	
	@Test
	public void addOnExclusion() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






38




39




		AccessPath<String> sut = ap().appendExcludedFieldReference("a");
		assertEquals(ap("b"), sut.append("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






40




41




42




43




	}
	
	@Test(expected=IllegalArgumentException.class)
	public void addMergedFieldsOnSingleExclusion() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






44




45




		AccessPath<String> sut = ap().appendExcludedFieldReference("a");
		sut.append("a");	









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






46




47




48




	}
	
	@Test









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






49




50




	public void prepend() {
		assertEquals(ap("c", "a", "b"), ap("a", "b").prepend("c"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






51




52




53




54




	}
	
	@Test
	public void remove() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






55




		assertEquals(ap("b"), ap("a", "b").removeFirst());









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






56




57




58




59




	}
	
	@Test
	public void deltaDepth1() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






60




61




		String[] actual = ap("a").getDeltaTo(ap("a", "b")).accesses;
		assertArrayEquals(new String[] { "b" }, actual);









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






62




63




64




65




	}
	
	@Test
	public void deltaDepth2() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






66




67




		String[] actual = ap("a").getDeltaTo(ap("a", "b", "c")).accesses;
		assertArrayEquals(new String[] { "b", "c" }, actual);









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






68




69




70




71




	}
	
	@Test
	public void emptyDeltaOnEqualExclusions() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






72




73




74




		AccessPath<String> actual = ap().appendExcludedFieldReference("f");
		assertEquals(0, actual.getDeltaTo(ap().appendExcludedFieldReference("f")).accesses.length);
		assertTrue(actual.getDeltaTo(ap().appendExcludedFieldReference("f")).exclusions.equals(Sets.newHashSet("f")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






75




76




	}
	









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






77




78




	@Test
	public void multipleExclPrefixOfMultipleExcl() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






79




80




		AccessPath<String> sut = ap().appendExcludedFieldReference("f", "g");
		assertEquals(PrefixTestResult.POTENTIAL_PREFIX, sut.isPrefixOf(ap().appendExcludedFieldReference("f", "h")));









subumption + debugging


 

 


Johannes Lerch
committed
Feb 09, 2015






81




	}









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






82




}











Open sidebar



Joshua Garcia heros

e60e669d8960a04c584fcc00bb971e7e34b3cce5







Open sidebar



Joshua Garcia heros

e60e669d8960a04c584fcc00bb971e7e34b3cce5




Open sidebar

Joshua Garcia heros

e60e669d8960a04c584fcc00bb971e7e34b3cce5


Joshua Garciaherosheros
e60e669d8960a04c584fcc00bb971e7e34b3cce5










e60e669d8960a04c584fcc00bb971e7e34b3cce5


Switch branch/tag










heros


test


heros


alias


AccessPathTest.java



Find file
Normal viewHistoryPermalink






AccessPathTest.java



2.39 KB









Newer










Older









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.*;


import org.junit.Test;

import com.google.common.collect.Sets;

import heros.alias.AccessPath.PrefixTestResult;

@SuppressWarnings("unchecked")
public class AccessPathTest {

	









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






26




27




	private static AccessPath<String> ap(String... path) {
		return new AccessPath<String>(path, Sets.<String> newHashSet());









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






28




29




30




	}
	
	@Test









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






31




32




33




	public void append() {
		AccessPath<String> sut = ap("a");
		assertEquals(ap("a", "b"), sut.append("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






34




35




36




37




	}
	
	@Test
	public void addOnExclusion() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






38




39




		AccessPath<String> sut = ap().appendExcludedFieldReference("a");
		assertEquals(ap("b"), sut.append("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






40




41




42




43




	}
	
	@Test(expected=IllegalArgumentException.class)
	public void addMergedFieldsOnSingleExclusion() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






44




45




		AccessPath<String> sut = ap().appendExcludedFieldReference("a");
		sut.append("a");	









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






46




47




48




	}
	
	@Test









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






49




50




	public void prepend() {
		assertEquals(ap("c", "a", "b"), ap("a", "b").prepend("c"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






51




52




53




54




	}
	
	@Test
	public void remove() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






55




		assertEquals(ap("b"), ap("a", "b").removeFirst());









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






56




57




58




59




	}
	
	@Test
	public void deltaDepth1() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






60




61




		String[] actual = ap("a").getDeltaTo(ap("a", "b")).accesses;
		assertArrayEquals(new String[] { "b" }, actual);









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






62




63




64




65




	}
	
	@Test
	public void deltaDepth2() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






66




67




		String[] actual = ap("a").getDeltaTo(ap("a", "b", "c")).accesses;
		assertArrayEquals(new String[] { "b", "c" }, actual);









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






68




69




70




71




	}
	
	@Test
	public void emptyDeltaOnEqualExclusions() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






72




73




74




		AccessPath<String> actual = ap().appendExcludedFieldReference("f");
		assertEquals(0, actual.getDeltaTo(ap().appendExcludedFieldReference("f")).accesses.length);
		assertTrue(actual.getDeltaTo(ap().appendExcludedFieldReference("f")).exclusions.equals(Sets.newHashSet("f")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






75




76




	}
	









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






77




78




	@Test
	public void multipleExclPrefixOfMultipleExcl() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






79




80




		AccessPath<String> sut = ap().appendExcludedFieldReference("f", "g");
		assertEquals(PrefixTestResult.POTENTIAL_PREFIX, sut.isPrefixOf(ap().appendExcludedFieldReference("f", "h")));









subumption + debugging


 

 


Johannes Lerch
committed
Feb 09, 2015






81




	}









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






82




}














e60e669d8960a04c584fcc00bb971e7e34b3cce5


Switch branch/tag










heros


test


heros


alias


AccessPathTest.java



Find file
Normal viewHistoryPermalink






AccessPathTest.java



2.39 KB









Newer










Older









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.*;


import org.junit.Test;

import com.google.common.collect.Sets;

import heros.alias.AccessPath.PrefixTestResult;

@SuppressWarnings("unchecked")
public class AccessPathTest {

	









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






26




27




	private static AccessPath<String> ap(String... path) {
		return new AccessPath<String>(path, Sets.<String> newHashSet());









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






28




29




30




	}
	
	@Test









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






31




32




33




	public void append() {
		AccessPath<String> sut = ap("a");
		assertEquals(ap("a", "b"), sut.append("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






34




35




36




37




	}
	
	@Test
	public void addOnExclusion() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






38




39




		AccessPath<String> sut = ap().appendExcludedFieldReference("a");
		assertEquals(ap("b"), sut.append("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






40




41




42




43




	}
	
	@Test(expected=IllegalArgumentException.class)
	public void addMergedFieldsOnSingleExclusion() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






44




45




		AccessPath<String> sut = ap().appendExcludedFieldReference("a");
		sut.append("a");	









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






46




47




48




	}
	
	@Test









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






49




50




	public void prepend() {
		assertEquals(ap("c", "a", "b"), ap("a", "b").prepend("c"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






51




52




53




54




	}
	
	@Test
	public void remove() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






55




		assertEquals(ap("b"), ap("a", "b").removeFirst());









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






56




57




58




59




	}
	
	@Test
	public void deltaDepth1() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






60




61




		String[] actual = ap("a").getDeltaTo(ap("a", "b")).accesses;
		assertArrayEquals(new String[] { "b" }, actual);









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






62




63




64




65




	}
	
	@Test
	public void deltaDepth2() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






66




67




		String[] actual = ap("a").getDeltaTo(ap("a", "b", "c")).accesses;
		assertArrayEquals(new String[] { "b", "c" }, actual);









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






68




69




70




71




	}
	
	@Test
	public void emptyDeltaOnEqualExclusions() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






72




73




74




		AccessPath<String> actual = ap().appendExcludedFieldReference("f");
		assertEquals(0, actual.getDeltaTo(ap().appendExcludedFieldReference("f")).accesses.length);
		assertTrue(actual.getDeltaTo(ap().appendExcludedFieldReference("f")).exclusions.equals(Sets.newHashSet("f")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






75




76




	}
	









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






77




78




	@Test
	public void multipleExclPrefixOfMultipleExcl() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






79




80




		AccessPath<String> sut = ap().appendExcludedFieldReference("f", "g");
		assertEquals(PrefixTestResult.POTENTIAL_PREFIX, sut.isPrefixOf(ap().appendExcludedFieldReference("f", "h")));









subumption + debugging


 

 


Johannes Lerch
committed
Feb 09, 2015






81




	}









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






82




}










e60e669d8960a04c584fcc00bb971e7e34b3cce5


Switch branch/tag










heros


test


heros


alias


AccessPathTest.java



Find file
Normal viewHistoryPermalink




e60e669d8960a04c584fcc00bb971e7e34b3cce5


Switch branch/tag










heros


test


heros


alias


AccessPathTest.java





e60e669d8960a04c584fcc00bb971e7e34b3cce5


Switch branch/tag








e60e669d8960a04c584fcc00bb971e7e34b3cce5


Switch branch/tag





e60e669d8960a04c584fcc00bb971e7e34b3cce5

Switch branch/tag





Switch branch/tag



Switch branch/tagSwitch branch/tag
heros

test

heros

alias

AccessPathTest.java
Find file
Normal viewHistoryPermalink




AccessPathTest.java



2.39 KB









Newer










Older









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.*;


import org.junit.Test;

import com.google.common.collect.Sets;

import heros.alias.AccessPath.PrefixTestResult;

@SuppressWarnings("unchecked")
public class AccessPathTest {

	









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






26




27




	private static AccessPath<String> ap(String... path) {
		return new AccessPath<String>(path, Sets.<String> newHashSet());









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






28




29




30




	}
	
	@Test









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






31




32




33




	public void append() {
		AccessPath<String> sut = ap("a");
		assertEquals(ap("a", "b"), sut.append("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






34




35




36




37




	}
	
	@Test
	public void addOnExclusion() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






38




39




		AccessPath<String> sut = ap().appendExcludedFieldReference("a");
		assertEquals(ap("b"), sut.append("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






40




41




42




43




	}
	
	@Test(expected=IllegalArgumentException.class)
	public void addMergedFieldsOnSingleExclusion() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






44




45




		AccessPath<String> sut = ap().appendExcludedFieldReference("a");
		sut.append("a");	









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






46




47




48




	}
	
	@Test









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






49




50




	public void prepend() {
		assertEquals(ap("c", "a", "b"), ap("a", "b").prepend("c"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






51




52




53




54




	}
	
	@Test
	public void remove() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






55




		assertEquals(ap("b"), ap("a", "b").removeFirst());









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






56




57




58




59




	}
	
	@Test
	public void deltaDepth1() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






60




61




		String[] actual = ap("a").getDeltaTo(ap("a", "b")).accesses;
		assertArrayEquals(new String[] { "b" }, actual);









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






62




63




64




65




	}
	
	@Test
	public void deltaDepth2() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






66




67




		String[] actual = ap("a").getDeltaTo(ap("a", "b", "c")).accesses;
		assertArrayEquals(new String[] { "b", "c" }, actual);









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






68




69




70




71




	}
	
	@Test
	public void emptyDeltaOnEqualExclusions() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






72




73




74




		AccessPath<String> actual = ap().appendExcludedFieldReference("f");
		assertEquals(0, actual.getDeltaTo(ap().appendExcludedFieldReference("f")).accesses.length);
		assertTrue(actual.getDeltaTo(ap().appendExcludedFieldReference("f")).exclusions.equals(Sets.newHashSet("f")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






75




76




	}
	









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






77




78




	@Test
	public void multipleExclPrefixOfMultipleExcl() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






79




80




		AccessPath<String> sut = ap().appendExcludedFieldReference("f", "g");
		assertEquals(PrefixTestResult.POTENTIAL_PREFIX, sut.isPrefixOf(ap().appendExcludedFieldReference("f", "h")));









subumption + debugging


 

 


Johannes Lerch
committed
Feb 09, 2015






81




	}









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






82




}








AccessPathTest.java



2.39 KB










AccessPathTest.java



2.39 KB









Newer










Older
NewerOlder







regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






1




2




3




4




5




6




7




8




9




10




11




12




13




14




15




16




17




18




19




20




21




22




23




24




25




/*******************************************************************************
 * Copyright (c) 2015 Johannes Lerch.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Johannes Lerch - initial API and implementation
 ******************************************************************************/
package heros.alias;

import static org.junit.Assert.*;


import org.junit.Test;

import com.google.common.collect.Sets;

import heros.alias.AccessPath.PrefixTestResult;

@SuppressWarnings("unchecked")
public class AccessPathTest {

	









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






26




27




	private static AccessPath<String> ap(String... path) {
		return new AccessPath<String>(path, Sets.<String> newHashSet());









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






28




29




30




	}
	
	@Test









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






31




32




33




	public void append() {
		AccessPath<String> sut = ap("a");
		assertEquals(ap("a", "b"), sut.append("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






34




35




36




37




	}
	
	@Test
	public void addOnExclusion() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






38




39




		AccessPath<String> sut = ap().appendExcludedFieldReference("a");
		assertEquals(ap("b"), sut.append("b"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






40




41




42




43




	}
	
	@Test(expected=IllegalArgumentException.class)
	public void addMergedFieldsOnSingleExclusion() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






44




45




		AccessPath<String> sut = ap().appendExcludedFieldReference("a");
		sut.append("a");	









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






46




47




48




	}
	
	@Test









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






49




50




	public void prepend() {
		assertEquals(ap("c", "a", "b"), ap("a", "b").prepend("c"));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






51




52




53




54




	}
	
	@Test
	public void remove() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






55




		assertEquals(ap("b"), ap("a", "b").removeFirst());









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






56




57




58




59




	}
	
	@Test
	public void deltaDepth1() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






60




61




		String[] actual = ap("a").getDeltaTo(ap("a", "b")).accesses;
		assertArrayEquals(new String[] { "b" }, actual);









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






62




63




64




65




	}
	
	@Test
	public void deltaDepth2() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






66




67




		String[] actual = ap("a").getDeltaTo(ap("a", "b", "c")).accesses;
		assertArrayEquals(new String[] { "b", "c" }, actual);









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






68




69




70




71




	}
	
	@Test
	public void emptyDeltaOnEqualExclusions() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






72




73




74




		AccessPath<String> actual = ap().appendExcludedFieldReference("f");
		assertEquals(0, actual.getDeltaTo(ap().appendExcludedFieldReference("f")).accesses.length);
		assertTrue(actual.getDeltaTo(ap().appendExcludedFieldReference("f")).exclusions.equals(Sets.newHashSet("f")));









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






75




76




	}
	









rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015






77




78




	@Test
	public void multipleExclPrefixOfMultipleExcl() {









removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015






79




80




		AccessPath<String> sut = ap().appendExcludedFieldReference("f", "g");
		assertEquals(PrefixTestResult.POTENTIAL_PREFIX, sut.isPrefixOf(ap().appendExcludedFieldReference("f", "h")));









subumption + debugging


 

 


Johannes Lerch
committed
Feb 09, 2015






81




	}









regexp access path



 


Johannes Lerch
committed
Feb 05, 2015






82




}







regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25
/*******************************************************************************/******************************************************************************* * Copyright (c) 2015 Johannes Lerch. * Copyright (c) 2015 Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;import static org.junit.Assert.*;importstaticorg.junit.Assert.*;import org.junit.Test;importorg.junit.Test;import com.google.common.collect.Sets;importcom.google.common.collect.Sets;import heros.alias.AccessPath.PrefixTestResult;importheros.alias.AccessPath.PrefixTestResult;@SuppressWarnings("unchecked")@SuppressWarnings("unchecked")public class AccessPathTest {publicclassAccessPathTest{	



removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015



removed unnecessary merge code in access path


 

 

removed unnecessary merge code in access path

 

Johannes Lerch
committed
Mar 25, 2015

26

27
	private static AccessPath<String> ap(String... path) {privatestaticAccessPath<String>ap(String...path){		return new AccessPath<String>(path, Sets.<String> newHashSet());returnnewAccessPath<String>(path,Sets.<String>newHashSet());



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

28

29

30
	}}		@Test@Test



removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015



removed unnecessary merge code in access path


 

 

removed unnecessary merge code in access path

 

Johannes Lerch
committed
Mar 25, 2015

31

32

33
	public void append() {publicvoidappend(){		AccessPath<String> sut = ap("a");AccessPath<String>sut=ap("a");		assertEquals(ap("a", "b"), sut.append("b"));assertEquals(ap("a","b"),sut.append("b"));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

34

35

36

37
	}}		@Test@Test	public void addOnExclusion() {publicvoidaddOnExclusion(){



removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015



removed unnecessary merge code in access path


 

 

removed unnecessary merge code in access path

 

Johannes Lerch
committed
Mar 25, 2015

38

39
		AccessPath<String> sut = ap().appendExcludedFieldReference("a");AccessPath<String>sut=ap().appendExcludedFieldReference("a");		assertEquals(ap("b"), sut.append("b"));assertEquals(ap("b"),sut.append("b"));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

40

41

42

43
	}}		@Test(expected=IllegalArgumentException.class)@Test(expected=IllegalArgumentException.class)	public void addMergedFieldsOnSingleExclusion() {publicvoidaddMergedFieldsOnSingleExclusion(){



removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015



removed unnecessary merge code in access path


 

 

removed unnecessary merge code in access path

 

Johannes Lerch
committed
Mar 25, 2015

44

45
		AccessPath<String> sut = ap().appendExcludedFieldReference("a");AccessPath<String>sut=ap().appendExcludedFieldReference("a");		sut.append("a");	sut.append("a");



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

46

47

48
	}}		@Test@Test



removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015



removed unnecessary merge code in access path


 

 

removed unnecessary merge code in access path

 

Johannes Lerch
committed
Mar 25, 2015

49

50
	public void prepend() {publicvoidprepend(){		assertEquals(ap("c", "a", "b"), ap("a", "b").prepend("c"));assertEquals(ap("c","a","b"),ap("a","b").prepend("c"));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

51

52

53

54
	}}		@Test@Test	public void remove() {publicvoidremove(){



removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015



removed unnecessary merge code in access path


 

 

removed unnecessary merge code in access path

 

Johannes Lerch
committed
Mar 25, 2015

55
		assertEquals(ap("b"), ap("a", "b").removeFirst());assertEquals(ap("b"),ap("a","b").removeFirst());



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

56

57

58

59
	}}		@Test@Test	public void deltaDepth1() {publicvoiddeltaDepth1(){



removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015



removed unnecessary merge code in access path


 

 

removed unnecessary merge code in access path

 

Johannes Lerch
committed
Mar 25, 2015

60

61
		String[] actual = ap("a").getDeltaTo(ap("a", "b")).accesses;String[]actual=ap("a").getDeltaTo(ap("a","b")).accesses;		assertArrayEquals(new String[] { "b" }, actual);assertArrayEquals(newString[]{"b"},actual);



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

62

63

64

65
	}}		@Test@Test	public void deltaDepth2() {publicvoiddeltaDepth2(){



removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015



removed unnecessary merge code in access path


 

 

removed unnecessary merge code in access path

 

Johannes Lerch
committed
Mar 25, 2015

66

67
		String[] actual = ap("a").getDeltaTo(ap("a", "b", "c")).accesses;String[]actual=ap("a").getDeltaTo(ap("a","b","c")).accesses;		assertArrayEquals(new String[] { "b", "c" }, actual);assertArrayEquals(newString[]{"b","c"},actual);



rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver


 

 

rewrite of ifds solver

 

Johannes Lerch
committed
Mar 19, 2015

68

69

70

71
	}}		@Test@Test	public void emptyDeltaOnEqualExclusions() {publicvoidemptyDeltaOnEqualExclusions(){



removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015



removed unnecessary merge code in access path


 

 

removed unnecessary merge code in access path

 

Johannes Lerch
committed
Mar 25, 2015

72

73

74
		AccessPath<String> actual = ap().appendExcludedFieldReference("f");AccessPath<String>actual=ap().appendExcludedFieldReference("f");		assertEquals(0, actual.getDeltaTo(ap().appendExcludedFieldReference("f")).accesses.length);assertEquals(0,actual.getDeltaTo(ap().appendExcludedFieldReference("f")).accesses.length);		assertTrue(actual.getDeltaTo(ap().appendExcludedFieldReference("f")).exclusions.equals(Sets.newHashSet("f")));assertTrue(actual.getDeltaTo(ap().appendExcludedFieldReference("f")).exclusions.equals(Sets.newHashSet("f")));



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

75

76
	}}	



rewrite of ifds solver


 

 


Johannes Lerch
committed
Mar 19, 2015



rewrite of ifds solver


 

 

rewrite of ifds solver

 

Johannes Lerch
committed
Mar 19, 2015

77

78
	@Test@Test	public void multipleExclPrefixOfMultipleExcl() {publicvoidmultipleExclPrefixOfMultipleExcl(){



removed unnecessary merge code in access path


 

 


Johannes Lerch
committed
Mar 25, 2015



removed unnecessary merge code in access path


 

 

removed unnecessary merge code in access path

 

Johannes Lerch
committed
Mar 25, 2015

79

80
		AccessPath<String> sut = ap().appendExcludedFieldReference("f", "g");AccessPath<String>sut=ap().appendExcludedFieldReference("f","g");		assertEquals(PrefixTestResult.POTENTIAL_PREFIX, sut.isPrefixOf(ap().appendExcludedFieldReference("f", "h")));assertEquals(PrefixTestResult.POTENTIAL_PREFIX,sut.isPrefixOf(ap().appendExcludedFieldReference("f","h")));



subumption + debugging


 

 


Johannes Lerch
committed
Feb 09, 2015



subumption + debugging


 

 

subumption + debugging

 

Johannes Lerch
committed
Feb 09, 2015

81
	}}



regexp access path



 


Johannes Lerch
committed
Feb 05, 2015



regexp access path



 

regexp access path


Johannes Lerch
committed
Feb 05, 2015

82
}}





