



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

1bf300ef















Commit
1bf300ef


authored
Jun 01, 2015
by


Johannes Lerch



Browse files




restructuring







parent
d77de581













Changes
26




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/AccessPath.java








View file @ 1bf300ef






......@@ -10,8 +10,6 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.FlowFunction.Constraint;





















import java.util.Arrays;










import java.util.Collection;










import java.util.HashSet;



......














src/heros/fieldsens/AccessPathHandler.java








View file @ 1bf300ef






......@@ -13,6 +13,7 @@ package heros.fieldsens;









import heros.fieldsens.FlowFunction.ConstrainedFact;










import heros.fieldsens.FlowFunction.ReadFieldConstraint;










import heros.fieldsens.FlowFunction.WriteFieldConstraint;










import heros.fieldsens.structs.WrappedFact;





















public class AccessPathHandler<Field, Fact, Stmt, Method> {














......














src/heros/fieldsens/CallConcretizationPathEdge.java

deleted


100644 → 0







View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import heros.solver.PathEdge;





















public class CallConcretizationPathEdge<M, N,D> extends PathEdge<N, D> {





















 private M calleeMethod;










 private D calleeSourceFact;





















 public CallConcretizationPathEdge(D dSource, N target, D dTarget, M calleeMethod, D calleeSourceFact) {










 super(dSource, target, dTarget);










 this.calleeMethod = calleeMethod;










 this.calleeSourceFact = calleeSourceFact;










 }





















 public M getCalleeMethod() {










 return calleeMethod;










 }





















 public D getCalleeSourceFact() {










 return calleeSourceFact;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = super.hashCode();










 result = prime * result + ((calleeMethod == null) ? 0 : calleeMethod.hashCode());










 result = prime * result + ((calleeSourceFact == null) ? 0 : calleeSourceFact.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (!super.equals(obj))










 return false;










 if (!(obj instanceof CallConcretizationPathEdge))










 return false;










 CallConcretizationPathEdge other = (CallConcretizationPathEdge) obj;










 if (calleeMethod == null) {










 if (other.calleeMethod != null)










 return false;










 } else if (!calleeMethod.equals(other.calleeMethod))










 return false;










 if (calleeSourceFact == null) {










 if (other.calleeSourceFact != null)










 return false;










 } else if (!calleeSourceFact.equals(other.calleeSourceFact))










 return false;










 return true;










 }





















 @Override










 public String toString() {










 return "ConcretizationPathEdge "+super.toString()+ " registers interest at "+calleeMethod+" in "+calleeSourceFact;










 }










}














src/heros/fieldsens/CallEdge.java








View file @ 1bf300ef






......@@ -12,6 +12,9 @@ package heros.fieldsens;




















import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class CallEdge<Field, Fact, Stmt, Method> {














......














src/heros/fieldsens/CallEdgeResolver.java








View file @ 1bf300ef






......@@ -10,6 +10,8 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFactAtStatement;





















import com.google.common.collect.Lists;

























......














src/heros/fieldsens/ConcurrentHashSet.java

deleted


100644 → 0







View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2012 Secure Software Engineering Group at EC SPRIDE.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors: Christian Fritz, Steven Arzt, Siegfried Rasthofer, Eric










 * Bodden, and others.










 ******************************************************************************/










package heros.fieldsens;





















import java.util.AbstractSet;










import java.util.Iterator;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;





















import com.google.common.collect.MapMaker;





















/**










 * Multithreaded version of a hash set










 * 










 * @author Steven Arzt










 */










public class ConcurrentHashSet<E> extends AbstractSet<E> implements Set<E> {





















 protected final ConcurrentMap<E,E> delegate;










 










 /**










     * Creates a new, empty ConcurrentHashSet. 










     */










 public ConcurrentHashSet() {










 // had some really weird NPEs with Java's ConcurrentHashMap (i.e. got a










 // NPE at size()), now trying witrh Guava instead










 delegate = new MapMaker().concurrencyLevel










 (Runtime.getRuntime().availableProcessors()).makeMap();










 }





















 @Override










 public int size() {










 return delegate.size();










 }





















 @Override










 public boolean contains(Object o) {










 return delegate.containsKey(o);










 }





















 @Override










 public Iterator<E> iterator() {










 return delegate.keySet().iterator();










 }





















 @Override










 public boolean add(E o) {










 assert o != null;










 return delegate.put(o, o)==null;










 }





















 @Override










 public boolean remove(Object o) {










 return delegate.remove(o)!=null;










 }





















 @Override










 public void clear() {










 delegate.entrySet().clear();










 }





















 @Override










 public int hashCode() {










 return delegate.hashCode();










 }





















 @Override










 public boolean equals(Object obj) {










 return obj instanceof ConcurrentHashSet && delegate.equals(obj);










 }










 










 @Override










 public String toString() {










 return delegate.keySet().toString();










 }





















 










}














src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ 1bf300ef






......@@ -11,6 +11,9 @@









package heros.fieldsens;





















import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {














......@@ -35,7 +38,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 return inc.getAccessPath();










 }





















 protected void processIncomingGuaranteedPrefix(heros.fieldsens.WrappedFact<Field,Fact,Stmt,Method> fact) {










 protected void processIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 propagated=true;










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(



......














src/heros/fieldsens/FieldSensitiveIFDSSolver.java








View file @ 1bf300ef






......@@ -11,6 +11,7 @@









package heros.fieldsens;





















import heros.InterproceduralCFG;










import heros.utilities.DefaultValueMap;





















import java.util.Map.Entry;










import java.util.Set;



......@@ -24,7 +25,7 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 protected static final Logger logger = LoggerFactory.getLogger(FieldSensitiveIFDSSolver.class);










 










 private CacheMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new CacheMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {










 private DefaultValueMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new DefaultValueMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {










 @Override










 protected MethodAnalyzer<FieldRef, D, N, M> createItem(M key) {










 return createMethodAnalyzer(key);



......














src/heros/fieldsens/FlowFunction.java








View file @ 1bf300ef






......@@ -10,6 +10,8 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFact;





















import java.util.LinkedHashSet;










import java.util.Set;














......














src/heros/fieldsens/MethodAnalyzer.java








View file @ 1bf300ef






......@@ -10,6 +10,8 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFactAtStatement;





















public interface MethodAnalyzer<Field,Fact,Stmt,Method> {





















 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge);



......














src/heros/fieldsens/MethodAnalyzerImpl.java








View file @ 1bf300ef






......@@ -10,12 +10,16 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;










import heros.utilities.DefaultValueMap;





















public class MethodAnalyzerImpl<Field,Fact, Stmt, Method> 










 implements MethodAnalyzer<Field, Fact, Stmt, Method> {





















 private Method method;










 private CacheMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new CacheMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 private DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Fact key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context);



......














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ 1bf300ef






......@@ -13,6 +13,10 @@ package heros.fieldsens;









import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;










import heros.fieldsens.FlowFunction.ConstrainedFact;










import heros.fieldsens.structs.FactAtStatement;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;










import heros.utilities.DefaultValueMap;





















import java.io.FileWriter;










import java.io.IOException;



......@@ -37,13 +41,13 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private List<WrappedFactAtStatement<Field, Fact, Stmt, Method>> summaries = Lists.newLinkedList();










 private Context<Field, Fact, Stmt, Method> context;










 private Method method;










 private CacheMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new CacheMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<>(PerAccessPathMethodAnalyzer.this, key.stmt);










 }










 };










 private CacheMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new CacheMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<>(PerAccessPathMethodAnalyzer.this, key.stmt);



......














src/heros/fieldsens/ReturnConcretizationPathEdge.java

deleted


100644 → 0







View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import heros.solver.PathEdge;





















public abstract class ReturnConcretizationPathEdge<N,D> extends PathEdge<N, D> {
































 public ReturnConcretizationPathEdge(D dSource, N target, D dTarget) {










 super(dSource, target, dTarget);










 }





















 public void propagate() {










 _propagate(dSource, target, dTarget);










 }










 










 protected abstract void _propagate(D dSource, N target, D dTarget);










 










 @Override










 public PathEdge<N, D> copyWithTarget(D dTarget) {










 final ReturnConcretizationPathEdge<N, D> outer = this;










 return new ReturnConcretizationPathEdge<N, D>(dSource, target, dTarget) {





















 @Override










 protected void _propagate(D dSource, N target, D dTarget) {










 outer._propagate(dSource, target, dTarget);










 }










 };










 }










 










 @Override










 public String toString() {










 return "ReturnConcretizationPathEdge "+super.toString();










 }










}














src/heros/fieldsens/ReturnSiteResolver.java








View file @ 1bf300ef






......@@ -12,6 +12,10 @@ package heros.fieldsens;




















import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.ReturnEdge;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {














......














src/heros/fieldsens/SourceStmtAnnotatedMethodAnalyzer.java








View file @ 1bf300ef






......@@ -10,13 +10,17 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;










import heros.utilities.DefaultValueMap;
































public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>










 implements MethodAnalyzer<Field, Fact, Stmt, Method> {





















 private Method method;










 private CacheMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new CacheMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 private DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Key<Fact, Stmt> key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context);



......














src/heros/fieldsens/ZeroHandler.java








View file @ 1bf300ef






......@@ -10,6 +10,7 @@









 ******************************************************************************/










package heros.fieldsens;
































public interface ZeroHandler<Field> {





















 /**



......














src/heros/fieldsens/DeltaConstraint.java

→

src/heros/fieldsens/structs/DeltaConstraint.java








View file @ 1bf300ef






......@@ -8,8 +8,10 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















import heros.fieldsens.AccessPath;










import heros.fieldsens.FlowFunction;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;














......














src/heros/fieldsens/FactAtStatement.java

→

src/heros/fieldsens/structs/FactAtStatement.java








View file @ 1bf300ef






......@@ -8,7 +8,7 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















public class FactAtStatement<Fact, Stmt> {














......














src/heros/fieldsens/ReturnEdge.java

→

src/heros/fieldsens/structs/ReturnEdge.java








View file @ 1bf300ef






......@@ -8,19 +8,21 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















import heros.fieldsens.AccessPath;










import heros.fieldsens.Resolver;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;





















class ReturnEdge<Field, Fact, Stmt, Method> {










public class ReturnEdge<Field, Fact, Stmt, Method> {





















 final Fact incFact;










 final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 final Delta<Field> callDelta;










 final AccessPath<Field> incAccessPath;










 final Resolver<Field, Fact, Stmt, Method> incResolver;










 final Delta<Field> usedAccessPathOfIncResolver;










 public final Fact incFact;










 public final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 public final Delta<Field> callDelta;










 public final AccessPath<Field> incAccessPath;










 public final Resolver<Field, Fact, Stmt, Method> incResolver;










 public final Delta<Field> usedAccessPathOfIncResolver;





















 public ReturnEdge(WrappedFact<Field, Fact, Stmt, Method> fact, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller,



......














src/heros/fieldsens/WrappedFact.java

→

src/heros/fieldsens/structs/WrappedFact.java








View file @ 1bf300ef






......@@ -8,8 +8,12 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















import heros.fieldsens.AccessPath;










import heros.fieldsens.FlowFunction;










import heros.fieldsens.Resolver;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;





















public class WrappedFact<Field, Fact, Stmt, Method>{



......@@ -18,7 +22,7 @@ public class WrappedFact<Field, Fact, Stmt, Method>{









 private final AccessPath<Field> accessPath;










 private final Resolver<Field, Fact, Stmt, Method> resolver;










 










 WrappedFact(Fact fact, AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 public WrappedFact(Fact fact, AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 assert fact != null;










 assert accessPath != null;










 assert resolver != null;



......









Prev


1


2


Next















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

1bf300ef















Commit
1bf300ef


authored
Jun 01, 2015
by


Johannes Lerch



Browse files




restructuring







parent
d77de581













Changes
26




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/AccessPath.java








View file @ 1bf300ef






......@@ -10,8 +10,6 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.FlowFunction.Constraint;





















import java.util.Arrays;










import java.util.Collection;










import java.util.HashSet;



......














src/heros/fieldsens/AccessPathHandler.java








View file @ 1bf300ef






......@@ -13,6 +13,7 @@ package heros.fieldsens;









import heros.fieldsens.FlowFunction.ConstrainedFact;










import heros.fieldsens.FlowFunction.ReadFieldConstraint;










import heros.fieldsens.FlowFunction.WriteFieldConstraint;










import heros.fieldsens.structs.WrappedFact;





















public class AccessPathHandler<Field, Fact, Stmt, Method> {














......














src/heros/fieldsens/CallConcretizationPathEdge.java

deleted


100644 → 0







View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import heros.solver.PathEdge;





















public class CallConcretizationPathEdge<M, N,D> extends PathEdge<N, D> {





















 private M calleeMethod;










 private D calleeSourceFact;





















 public CallConcretizationPathEdge(D dSource, N target, D dTarget, M calleeMethod, D calleeSourceFact) {










 super(dSource, target, dTarget);










 this.calleeMethod = calleeMethod;










 this.calleeSourceFact = calleeSourceFact;










 }





















 public M getCalleeMethod() {










 return calleeMethod;










 }





















 public D getCalleeSourceFact() {










 return calleeSourceFact;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = super.hashCode();










 result = prime * result + ((calleeMethod == null) ? 0 : calleeMethod.hashCode());










 result = prime * result + ((calleeSourceFact == null) ? 0 : calleeSourceFact.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (!super.equals(obj))










 return false;










 if (!(obj instanceof CallConcretizationPathEdge))










 return false;










 CallConcretizationPathEdge other = (CallConcretizationPathEdge) obj;










 if (calleeMethod == null) {










 if (other.calleeMethod != null)










 return false;










 } else if (!calleeMethod.equals(other.calleeMethod))










 return false;










 if (calleeSourceFact == null) {










 if (other.calleeSourceFact != null)










 return false;










 } else if (!calleeSourceFact.equals(other.calleeSourceFact))










 return false;










 return true;










 }





















 @Override










 public String toString() {










 return "ConcretizationPathEdge "+super.toString()+ " registers interest at "+calleeMethod+" in "+calleeSourceFact;










 }










}














src/heros/fieldsens/CallEdge.java








View file @ 1bf300ef






......@@ -12,6 +12,9 @@ package heros.fieldsens;




















import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class CallEdge<Field, Fact, Stmt, Method> {














......














src/heros/fieldsens/CallEdgeResolver.java








View file @ 1bf300ef






......@@ -10,6 +10,8 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFactAtStatement;





















import com.google.common.collect.Lists;

























......














src/heros/fieldsens/ConcurrentHashSet.java

deleted


100644 → 0







View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2012 Secure Software Engineering Group at EC SPRIDE.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors: Christian Fritz, Steven Arzt, Siegfried Rasthofer, Eric










 * Bodden, and others.










 ******************************************************************************/










package heros.fieldsens;





















import java.util.AbstractSet;










import java.util.Iterator;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;





















import com.google.common.collect.MapMaker;





















/**










 * Multithreaded version of a hash set










 * 










 * @author Steven Arzt










 */










public class ConcurrentHashSet<E> extends AbstractSet<E> implements Set<E> {





















 protected final ConcurrentMap<E,E> delegate;










 










 /**










     * Creates a new, empty ConcurrentHashSet. 










     */










 public ConcurrentHashSet() {










 // had some really weird NPEs with Java's ConcurrentHashMap (i.e. got a










 // NPE at size()), now trying witrh Guava instead










 delegate = new MapMaker().concurrencyLevel










 (Runtime.getRuntime().availableProcessors()).makeMap();










 }





















 @Override










 public int size() {










 return delegate.size();










 }





















 @Override










 public boolean contains(Object o) {










 return delegate.containsKey(o);










 }





















 @Override










 public Iterator<E> iterator() {










 return delegate.keySet().iterator();










 }





















 @Override










 public boolean add(E o) {










 assert o != null;










 return delegate.put(o, o)==null;










 }





















 @Override










 public boolean remove(Object o) {










 return delegate.remove(o)!=null;










 }





















 @Override










 public void clear() {










 delegate.entrySet().clear();










 }





















 @Override










 public int hashCode() {










 return delegate.hashCode();










 }





















 @Override










 public boolean equals(Object obj) {










 return obj instanceof ConcurrentHashSet && delegate.equals(obj);










 }










 










 @Override










 public String toString() {










 return delegate.keySet().toString();










 }





















 










}














src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ 1bf300ef






......@@ -11,6 +11,9 @@









package heros.fieldsens;





















import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {














......@@ -35,7 +38,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 return inc.getAccessPath();










 }





















 protected void processIncomingGuaranteedPrefix(heros.fieldsens.WrappedFact<Field,Fact,Stmt,Method> fact) {










 protected void processIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 propagated=true;










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(



......














src/heros/fieldsens/FieldSensitiveIFDSSolver.java








View file @ 1bf300ef






......@@ -11,6 +11,7 @@









package heros.fieldsens;





















import heros.InterproceduralCFG;










import heros.utilities.DefaultValueMap;





















import java.util.Map.Entry;










import java.util.Set;



......@@ -24,7 +25,7 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 protected static final Logger logger = LoggerFactory.getLogger(FieldSensitiveIFDSSolver.class);










 










 private CacheMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new CacheMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {










 private DefaultValueMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new DefaultValueMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {










 @Override










 protected MethodAnalyzer<FieldRef, D, N, M> createItem(M key) {










 return createMethodAnalyzer(key);



......














src/heros/fieldsens/FlowFunction.java








View file @ 1bf300ef






......@@ -10,6 +10,8 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFact;





















import java.util.LinkedHashSet;










import java.util.Set;














......














src/heros/fieldsens/MethodAnalyzer.java








View file @ 1bf300ef






......@@ -10,6 +10,8 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFactAtStatement;





















public interface MethodAnalyzer<Field,Fact,Stmt,Method> {





















 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge);



......














src/heros/fieldsens/MethodAnalyzerImpl.java








View file @ 1bf300ef






......@@ -10,12 +10,16 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;










import heros.utilities.DefaultValueMap;





















public class MethodAnalyzerImpl<Field,Fact, Stmt, Method> 










 implements MethodAnalyzer<Field, Fact, Stmt, Method> {





















 private Method method;










 private CacheMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new CacheMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 private DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Fact key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context);



......














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ 1bf300ef






......@@ -13,6 +13,10 @@ package heros.fieldsens;









import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;










import heros.fieldsens.FlowFunction.ConstrainedFact;










import heros.fieldsens.structs.FactAtStatement;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;










import heros.utilities.DefaultValueMap;





















import java.io.FileWriter;










import java.io.IOException;



......@@ -37,13 +41,13 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private List<WrappedFactAtStatement<Field, Fact, Stmt, Method>> summaries = Lists.newLinkedList();










 private Context<Field, Fact, Stmt, Method> context;










 private Method method;










 private CacheMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new CacheMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<>(PerAccessPathMethodAnalyzer.this, key.stmt);










 }










 };










 private CacheMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new CacheMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<>(PerAccessPathMethodAnalyzer.this, key.stmt);



......














src/heros/fieldsens/ReturnConcretizationPathEdge.java

deleted


100644 → 0







View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import heros.solver.PathEdge;





















public abstract class ReturnConcretizationPathEdge<N,D> extends PathEdge<N, D> {
































 public ReturnConcretizationPathEdge(D dSource, N target, D dTarget) {










 super(dSource, target, dTarget);










 }





















 public void propagate() {










 _propagate(dSource, target, dTarget);










 }










 










 protected abstract void _propagate(D dSource, N target, D dTarget);










 










 @Override










 public PathEdge<N, D> copyWithTarget(D dTarget) {










 final ReturnConcretizationPathEdge<N, D> outer = this;










 return new ReturnConcretizationPathEdge<N, D>(dSource, target, dTarget) {





















 @Override










 protected void _propagate(D dSource, N target, D dTarget) {










 outer._propagate(dSource, target, dTarget);










 }










 };










 }










 










 @Override










 public String toString() {










 return "ReturnConcretizationPathEdge "+super.toString();










 }










}














src/heros/fieldsens/ReturnSiteResolver.java








View file @ 1bf300ef






......@@ -12,6 +12,10 @@ package heros.fieldsens;




















import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.ReturnEdge;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {














......














src/heros/fieldsens/SourceStmtAnnotatedMethodAnalyzer.java








View file @ 1bf300ef






......@@ -10,13 +10,17 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;










import heros.utilities.DefaultValueMap;
































public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>










 implements MethodAnalyzer<Field, Fact, Stmt, Method> {





















 private Method method;










 private CacheMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new CacheMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 private DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Key<Fact, Stmt> key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context);



......














src/heros/fieldsens/ZeroHandler.java








View file @ 1bf300ef






......@@ -10,6 +10,7 @@









 ******************************************************************************/










package heros.fieldsens;
































public interface ZeroHandler<Field> {





















 /**



......














src/heros/fieldsens/DeltaConstraint.java

→

src/heros/fieldsens/structs/DeltaConstraint.java








View file @ 1bf300ef






......@@ -8,8 +8,10 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















import heros.fieldsens.AccessPath;










import heros.fieldsens.FlowFunction;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;














......














src/heros/fieldsens/FactAtStatement.java

→

src/heros/fieldsens/structs/FactAtStatement.java








View file @ 1bf300ef






......@@ -8,7 +8,7 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















public class FactAtStatement<Fact, Stmt> {














......














src/heros/fieldsens/ReturnEdge.java

→

src/heros/fieldsens/structs/ReturnEdge.java








View file @ 1bf300ef






......@@ -8,19 +8,21 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















import heros.fieldsens.AccessPath;










import heros.fieldsens.Resolver;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;





















class ReturnEdge<Field, Fact, Stmt, Method> {










public class ReturnEdge<Field, Fact, Stmt, Method> {





















 final Fact incFact;










 final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 final Delta<Field> callDelta;










 final AccessPath<Field> incAccessPath;










 final Resolver<Field, Fact, Stmt, Method> incResolver;










 final Delta<Field> usedAccessPathOfIncResolver;










 public final Fact incFact;










 public final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 public final Delta<Field> callDelta;










 public final AccessPath<Field> incAccessPath;










 public final Resolver<Field, Fact, Stmt, Method> incResolver;










 public final Delta<Field> usedAccessPathOfIncResolver;





















 public ReturnEdge(WrappedFact<Field, Fact, Stmt, Method> fact, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller,



......














src/heros/fieldsens/WrappedFact.java

→

src/heros/fieldsens/structs/WrappedFact.java








View file @ 1bf300ef






......@@ -8,8 +8,12 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















import heros.fieldsens.AccessPath;










import heros.fieldsens.FlowFunction;










import heros.fieldsens.Resolver;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;





















public class WrappedFact<Field, Fact, Stmt, Method>{



......@@ -18,7 +22,7 @@ public class WrappedFact<Field, Fact, Stmt, Method>{









 private final AccessPath<Field> accessPath;










 private final Resolver<Field, Fact, Stmt, Method> resolver;










 










 WrappedFact(Fact fact, AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 public WrappedFact(Fact fact, AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 assert fact != null;










 assert accessPath != null;










 assert resolver != null;



......









Prev


1


2


Next















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

1bf300ef







Open sidebar



Joshua Garcia heros
Commits

1bf300ef




Open sidebar

Joshua Garcia heros
Commits

1bf300ef


Joshua GarciaherosherosCommits
1bf300ef








Commit
1bf300ef


authored
Jun 01, 2015
by


Johannes Lerch



Browse files




restructuring







parent
d77de581













Changes
26




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/AccessPath.java








View file @ 1bf300ef






......@@ -10,8 +10,6 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.FlowFunction.Constraint;





















import java.util.Arrays;










import java.util.Collection;










import java.util.HashSet;



......














src/heros/fieldsens/AccessPathHandler.java








View file @ 1bf300ef






......@@ -13,6 +13,7 @@ package heros.fieldsens;









import heros.fieldsens.FlowFunction.ConstrainedFact;










import heros.fieldsens.FlowFunction.ReadFieldConstraint;










import heros.fieldsens.FlowFunction.WriteFieldConstraint;










import heros.fieldsens.structs.WrappedFact;





















public class AccessPathHandler<Field, Fact, Stmt, Method> {














......














src/heros/fieldsens/CallConcretizationPathEdge.java

deleted


100644 → 0







View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import heros.solver.PathEdge;





















public class CallConcretizationPathEdge<M, N,D> extends PathEdge<N, D> {





















 private M calleeMethod;










 private D calleeSourceFact;





















 public CallConcretizationPathEdge(D dSource, N target, D dTarget, M calleeMethod, D calleeSourceFact) {










 super(dSource, target, dTarget);










 this.calleeMethod = calleeMethod;










 this.calleeSourceFact = calleeSourceFact;










 }





















 public M getCalleeMethod() {










 return calleeMethod;










 }





















 public D getCalleeSourceFact() {










 return calleeSourceFact;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = super.hashCode();










 result = prime * result + ((calleeMethod == null) ? 0 : calleeMethod.hashCode());










 result = prime * result + ((calleeSourceFact == null) ? 0 : calleeSourceFact.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (!super.equals(obj))










 return false;










 if (!(obj instanceof CallConcretizationPathEdge))










 return false;










 CallConcretizationPathEdge other = (CallConcretizationPathEdge) obj;










 if (calleeMethod == null) {










 if (other.calleeMethod != null)










 return false;










 } else if (!calleeMethod.equals(other.calleeMethod))










 return false;










 if (calleeSourceFact == null) {










 if (other.calleeSourceFact != null)










 return false;










 } else if (!calleeSourceFact.equals(other.calleeSourceFact))










 return false;










 return true;










 }





















 @Override










 public String toString() {










 return "ConcretizationPathEdge "+super.toString()+ " registers interest at "+calleeMethod+" in "+calleeSourceFact;










 }










}














src/heros/fieldsens/CallEdge.java








View file @ 1bf300ef






......@@ -12,6 +12,9 @@ package heros.fieldsens;




















import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class CallEdge<Field, Fact, Stmt, Method> {














......














src/heros/fieldsens/CallEdgeResolver.java








View file @ 1bf300ef






......@@ -10,6 +10,8 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFactAtStatement;





















import com.google.common.collect.Lists;

























......














src/heros/fieldsens/ConcurrentHashSet.java

deleted


100644 → 0







View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2012 Secure Software Engineering Group at EC SPRIDE.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors: Christian Fritz, Steven Arzt, Siegfried Rasthofer, Eric










 * Bodden, and others.










 ******************************************************************************/










package heros.fieldsens;





















import java.util.AbstractSet;










import java.util.Iterator;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;





















import com.google.common.collect.MapMaker;





















/**










 * Multithreaded version of a hash set










 * 










 * @author Steven Arzt










 */










public class ConcurrentHashSet<E> extends AbstractSet<E> implements Set<E> {





















 protected final ConcurrentMap<E,E> delegate;










 










 /**










     * Creates a new, empty ConcurrentHashSet. 










     */










 public ConcurrentHashSet() {










 // had some really weird NPEs with Java's ConcurrentHashMap (i.e. got a










 // NPE at size()), now trying witrh Guava instead










 delegate = new MapMaker().concurrencyLevel










 (Runtime.getRuntime().availableProcessors()).makeMap();










 }





















 @Override










 public int size() {










 return delegate.size();










 }





















 @Override










 public boolean contains(Object o) {










 return delegate.containsKey(o);










 }





















 @Override










 public Iterator<E> iterator() {










 return delegate.keySet().iterator();










 }





















 @Override










 public boolean add(E o) {










 assert o != null;










 return delegate.put(o, o)==null;










 }





















 @Override










 public boolean remove(Object o) {










 return delegate.remove(o)!=null;










 }





















 @Override










 public void clear() {










 delegate.entrySet().clear();










 }





















 @Override










 public int hashCode() {










 return delegate.hashCode();










 }





















 @Override










 public boolean equals(Object obj) {










 return obj instanceof ConcurrentHashSet && delegate.equals(obj);










 }










 










 @Override










 public String toString() {










 return delegate.keySet().toString();










 }





















 










}














src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ 1bf300ef






......@@ -11,6 +11,9 @@









package heros.fieldsens;





















import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {














......@@ -35,7 +38,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 return inc.getAccessPath();










 }





















 protected void processIncomingGuaranteedPrefix(heros.fieldsens.WrappedFact<Field,Fact,Stmt,Method> fact) {










 protected void processIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 propagated=true;










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(



......














src/heros/fieldsens/FieldSensitiveIFDSSolver.java








View file @ 1bf300ef






......@@ -11,6 +11,7 @@









package heros.fieldsens;





















import heros.InterproceduralCFG;










import heros.utilities.DefaultValueMap;





















import java.util.Map.Entry;










import java.util.Set;



......@@ -24,7 +25,7 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 protected static final Logger logger = LoggerFactory.getLogger(FieldSensitiveIFDSSolver.class);










 










 private CacheMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new CacheMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {










 private DefaultValueMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new DefaultValueMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {










 @Override










 protected MethodAnalyzer<FieldRef, D, N, M> createItem(M key) {










 return createMethodAnalyzer(key);



......














src/heros/fieldsens/FlowFunction.java








View file @ 1bf300ef






......@@ -10,6 +10,8 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFact;





















import java.util.LinkedHashSet;










import java.util.Set;














......














src/heros/fieldsens/MethodAnalyzer.java








View file @ 1bf300ef






......@@ -10,6 +10,8 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFactAtStatement;





















public interface MethodAnalyzer<Field,Fact,Stmt,Method> {





















 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge);



......














src/heros/fieldsens/MethodAnalyzerImpl.java








View file @ 1bf300ef






......@@ -10,12 +10,16 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;










import heros.utilities.DefaultValueMap;





















public class MethodAnalyzerImpl<Field,Fact, Stmt, Method> 










 implements MethodAnalyzer<Field, Fact, Stmt, Method> {





















 private Method method;










 private CacheMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new CacheMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 private DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Fact key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context);



......














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ 1bf300ef






......@@ -13,6 +13,10 @@ package heros.fieldsens;









import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;










import heros.fieldsens.FlowFunction.ConstrainedFact;










import heros.fieldsens.structs.FactAtStatement;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;










import heros.utilities.DefaultValueMap;





















import java.io.FileWriter;










import java.io.IOException;



......@@ -37,13 +41,13 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private List<WrappedFactAtStatement<Field, Fact, Stmt, Method>> summaries = Lists.newLinkedList();










 private Context<Field, Fact, Stmt, Method> context;










 private Method method;










 private CacheMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new CacheMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<>(PerAccessPathMethodAnalyzer.this, key.stmt);










 }










 };










 private CacheMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new CacheMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<>(PerAccessPathMethodAnalyzer.this, key.stmt);



......














src/heros/fieldsens/ReturnConcretizationPathEdge.java

deleted


100644 → 0







View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import heros.solver.PathEdge;





















public abstract class ReturnConcretizationPathEdge<N,D> extends PathEdge<N, D> {
































 public ReturnConcretizationPathEdge(D dSource, N target, D dTarget) {










 super(dSource, target, dTarget);










 }





















 public void propagate() {










 _propagate(dSource, target, dTarget);










 }










 










 protected abstract void _propagate(D dSource, N target, D dTarget);










 










 @Override










 public PathEdge<N, D> copyWithTarget(D dTarget) {










 final ReturnConcretizationPathEdge<N, D> outer = this;










 return new ReturnConcretizationPathEdge<N, D>(dSource, target, dTarget) {





















 @Override










 protected void _propagate(D dSource, N target, D dTarget) {










 outer._propagate(dSource, target, dTarget);










 }










 };










 }










 










 @Override










 public String toString() {










 return "ReturnConcretizationPathEdge "+super.toString();










 }










}














src/heros/fieldsens/ReturnSiteResolver.java








View file @ 1bf300ef






......@@ -12,6 +12,10 @@ package heros.fieldsens;




















import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.ReturnEdge;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {














......














src/heros/fieldsens/SourceStmtAnnotatedMethodAnalyzer.java








View file @ 1bf300ef






......@@ -10,13 +10,17 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;










import heros.utilities.DefaultValueMap;
































public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>










 implements MethodAnalyzer<Field, Fact, Stmt, Method> {





















 private Method method;










 private CacheMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new CacheMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 private DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Key<Fact, Stmt> key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context);



......














src/heros/fieldsens/ZeroHandler.java








View file @ 1bf300ef






......@@ -10,6 +10,7 @@









 ******************************************************************************/










package heros.fieldsens;
































public interface ZeroHandler<Field> {





















 /**



......














src/heros/fieldsens/DeltaConstraint.java

→

src/heros/fieldsens/structs/DeltaConstraint.java








View file @ 1bf300ef






......@@ -8,8 +8,10 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















import heros.fieldsens.AccessPath;










import heros.fieldsens.FlowFunction;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;














......














src/heros/fieldsens/FactAtStatement.java

→

src/heros/fieldsens/structs/FactAtStatement.java








View file @ 1bf300ef






......@@ -8,7 +8,7 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















public class FactAtStatement<Fact, Stmt> {














......














src/heros/fieldsens/ReturnEdge.java

→

src/heros/fieldsens/structs/ReturnEdge.java








View file @ 1bf300ef






......@@ -8,19 +8,21 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















import heros.fieldsens.AccessPath;










import heros.fieldsens.Resolver;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;





















class ReturnEdge<Field, Fact, Stmt, Method> {










public class ReturnEdge<Field, Fact, Stmt, Method> {





















 final Fact incFact;










 final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 final Delta<Field> callDelta;










 final AccessPath<Field> incAccessPath;










 final Resolver<Field, Fact, Stmt, Method> incResolver;










 final Delta<Field> usedAccessPathOfIncResolver;










 public final Fact incFact;










 public final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 public final Delta<Field> callDelta;










 public final AccessPath<Field> incAccessPath;










 public final Resolver<Field, Fact, Stmt, Method> incResolver;










 public final Delta<Field> usedAccessPathOfIncResolver;





















 public ReturnEdge(WrappedFact<Field, Fact, Stmt, Method> fact, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller,



......














src/heros/fieldsens/WrappedFact.java

→

src/heros/fieldsens/structs/WrappedFact.java








View file @ 1bf300ef






......@@ -8,8 +8,12 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















import heros.fieldsens.AccessPath;










import heros.fieldsens.FlowFunction;










import heros.fieldsens.Resolver;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;





















public class WrappedFact<Field, Fact, Stmt, Method>{



......@@ -18,7 +22,7 @@ public class WrappedFact<Field, Fact, Stmt, Method>{









 private final AccessPath<Field> accessPath;










 private final Resolver<Field, Fact, Stmt, Method> resolver;










 










 WrappedFact(Fact fact, AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 public WrappedFact(Fact fact, AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 assert fact != null;










 assert accessPath != null;










 assert resolver != null;



......









Prev


1


2


Next















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
1bf300ef


authored
Jun 01, 2015
by


Johannes Lerch



Browse files




restructuring







parent
d77de581













Changes
26




Hide whitespace changes

Inline
Side-by-side















src/heros/fieldsens/AccessPath.java








View file @ 1bf300ef






......@@ -10,8 +10,6 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.FlowFunction.Constraint;





















import java.util.Arrays;










import java.util.Collection;










import java.util.HashSet;



......














src/heros/fieldsens/AccessPathHandler.java








View file @ 1bf300ef






......@@ -13,6 +13,7 @@ package heros.fieldsens;









import heros.fieldsens.FlowFunction.ConstrainedFact;










import heros.fieldsens.FlowFunction.ReadFieldConstraint;










import heros.fieldsens.FlowFunction.WriteFieldConstraint;










import heros.fieldsens.structs.WrappedFact;





















public class AccessPathHandler<Field, Fact, Stmt, Method> {














......














src/heros/fieldsens/CallConcretizationPathEdge.java

deleted


100644 → 0







View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import heros.solver.PathEdge;





















public class CallConcretizationPathEdge<M, N,D> extends PathEdge<N, D> {





















 private M calleeMethod;










 private D calleeSourceFact;





















 public CallConcretizationPathEdge(D dSource, N target, D dTarget, M calleeMethod, D calleeSourceFact) {










 super(dSource, target, dTarget);










 this.calleeMethod = calleeMethod;










 this.calleeSourceFact = calleeSourceFact;










 }





















 public M getCalleeMethod() {










 return calleeMethod;










 }





















 public D getCalleeSourceFact() {










 return calleeSourceFact;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = super.hashCode();










 result = prime * result + ((calleeMethod == null) ? 0 : calleeMethod.hashCode());










 result = prime * result + ((calleeSourceFact == null) ? 0 : calleeSourceFact.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (!super.equals(obj))










 return false;










 if (!(obj instanceof CallConcretizationPathEdge))










 return false;










 CallConcretizationPathEdge other = (CallConcretizationPathEdge) obj;










 if (calleeMethod == null) {










 if (other.calleeMethod != null)










 return false;










 } else if (!calleeMethod.equals(other.calleeMethod))










 return false;










 if (calleeSourceFact == null) {










 if (other.calleeSourceFact != null)










 return false;










 } else if (!calleeSourceFact.equals(other.calleeSourceFact))










 return false;










 return true;










 }





















 @Override










 public String toString() {










 return "ConcretizationPathEdge "+super.toString()+ " registers interest at "+calleeMethod+" in "+calleeSourceFact;










 }










}














src/heros/fieldsens/CallEdge.java








View file @ 1bf300ef






......@@ -12,6 +12,9 @@ package heros.fieldsens;




















import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class CallEdge<Field, Fact, Stmt, Method> {














......














src/heros/fieldsens/CallEdgeResolver.java








View file @ 1bf300ef






......@@ -10,6 +10,8 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFactAtStatement;





















import com.google.common.collect.Lists;

























......














src/heros/fieldsens/ConcurrentHashSet.java

deleted


100644 → 0







View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2012 Secure Software Engineering Group at EC SPRIDE.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors: Christian Fritz, Steven Arzt, Siegfried Rasthofer, Eric










 * Bodden, and others.










 ******************************************************************************/










package heros.fieldsens;





















import java.util.AbstractSet;










import java.util.Iterator;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;





















import com.google.common.collect.MapMaker;





















/**










 * Multithreaded version of a hash set










 * 










 * @author Steven Arzt










 */










public class ConcurrentHashSet<E> extends AbstractSet<E> implements Set<E> {





















 protected final ConcurrentMap<E,E> delegate;










 










 /**










     * Creates a new, empty ConcurrentHashSet. 










     */










 public ConcurrentHashSet() {










 // had some really weird NPEs with Java's ConcurrentHashMap (i.e. got a










 // NPE at size()), now trying witrh Guava instead










 delegate = new MapMaker().concurrencyLevel










 (Runtime.getRuntime().availableProcessors()).makeMap();










 }





















 @Override










 public int size() {










 return delegate.size();










 }





















 @Override










 public boolean contains(Object o) {










 return delegate.containsKey(o);










 }





















 @Override










 public Iterator<E> iterator() {










 return delegate.keySet().iterator();










 }





















 @Override










 public boolean add(E o) {










 assert o != null;










 return delegate.put(o, o)==null;










 }





















 @Override










 public boolean remove(Object o) {










 return delegate.remove(o)!=null;










 }





















 @Override










 public void clear() {










 delegate.entrySet().clear();










 }





















 @Override










 public int hashCode() {










 return delegate.hashCode();










 }





















 @Override










 public boolean equals(Object obj) {










 return obj instanceof ConcurrentHashSet && delegate.equals(obj);










 }










 










 @Override










 public String toString() {










 return delegate.keySet().toString();










 }





















 










}














src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ 1bf300ef






......@@ -11,6 +11,9 @@









package heros.fieldsens;





















import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {














......@@ -35,7 +38,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 return inc.getAccessPath();










 }





















 protected void processIncomingGuaranteedPrefix(heros.fieldsens.WrappedFact<Field,Fact,Stmt,Method> fact) {










 protected void processIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 propagated=true;










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(



......














src/heros/fieldsens/FieldSensitiveIFDSSolver.java








View file @ 1bf300ef






......@@ -11,6 +11,7 @@









package heros.fieldsens;





















import heros.InterproceduralCFG;










import heros.utilities.DefaultValueMap;





















import java.util.Map.Entry;










import java.util.Set;



......@@ -24,7 +25,7 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 protected static final Logger logger = LoggerFactory.getLogger(FieldSensitiveIFDSSolver.class);










 










 private CacheMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new CacheMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {










 private DefaultValueMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new DefaultValueMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {










 @Override










 protected MethodAnalyzer<FieldRef, D, N, M> createItem(M key) {










 return createMethodAnalyzer(key);



......














src/heros/fieldsens/FlowFunction.java








View file @ 1bf300ef






......@@ -10,6 +10,8 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFact;





















import java.util.LinkedHashSet;










import java.util.Set;














......














src/heros/fieldsens/MethodAnalyzer.java








View file @ 1bf300ef






......@@ -10,6 +10,8 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFactAtStatement;





















public interface MethodAnalyzer<Field,Fact,Stmt,Method> {





















 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge);



......














src/heros/fieldsens/MethodAnalyzerImpl.java








View file @ 1bf300ef






......@@ -10,12 +10,16 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;










import heros.utilities.DefaultValueMap;





















public class MethodAnalyzerImpl<Field,Fact, Stmt, Method> 










 implements MethodAnalyzer<Field, Fact, Stmt, Method> {





















 private Method method;










 private CacheMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new CacheMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 private DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Fact key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context);



......














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ 1bf300ef






......@@ -13,6 +13,10 @@ package heros.fieldsens;









import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;










import heros.fieldsens.FlowFunction.ConstrainedFact;










import heros.fieldsens.structs.FactAtStatement;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;










import heros.utilities.DefaultValueMap;





















import java.io.FileWriter;










import java.io.IOException;



......@@ -37,13 +41,13 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private List<WrappedFactAtStatement<Field, Fact, Stmt, Method>> summaries = Lists.newLinkedList();










 private Context<Field, Fact, Stmt, Method> context;










 private Method method;










 private CacheMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new CacheMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<>(PerAccessPathMethodAnalyzer.this, key.stmt);










 }










 };










 private CacheMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new CacheMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<>(PerAccessPathMethodAnalyzer.this, key.stmt);



......














src/heros/fieldsens/ReturnConcretizationPathEdge.java

deleted


100644 → 0







View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import heros.solver.PathEdge;





















public abstract class ReturnConcretizationPathEdge<N,D> extends PathEdge<N, D> {
































 public ReturnConcretizationPathEdge(D dSource, N target, D dTarget) {










 super(dSource, target, dTarget);










 }





















 public void propagate() {










 _propagate(dSource, target, dTarget);










 }










 










 protected abstract void _propagate(D dSource, N target, D dTarget);










 










 @Override










 public PathEdge<N, D> copyWithTarget(D dTarget) {










 final ReturnConcretizationPathEdge<N, D> outer = this;










 return new ReturnConcretizationPathEdge<N, D>(dSource, target, dTarget) {





















 @Override










 protected void _propagate(D dSource, N target, D dTarget) {










 outer._propagate(dSource, target, dTarget);










 }










 };










 }










 










 @Override










 public String toString() {










 return "ReturnConcretizationPathEdge "+super.toString();










 }










}














src/heros/fieldsens/ReturnSiteResolver.java








View file @ 1bf300ef






......@@ -12,6 +12,10 @@ package heros.fieldsens;




















import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.ReturnEdge;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {














......














src/heros/fieldsens/SourceStmtAnnotatedMethodAnalyzer.java








View file @ 1bf300ef






......@@ -10,13 +10,17 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;










import heros.utilities.DefaultValueMap;
































public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>










 implements MethodAnalyzer<Field, Fact, Stmt, Method> {





















 private Method method;










 private CacheMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new CacheMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 private DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Key<Fact, Stmt> key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context);



......














src/heros/fieldsens/ZeroHandler.java








View file @ 1bf300ef






......@@ -10,6 +10,7 @@









 ******************************************************************************/










package heros.fieldsens;
































public interface ZeroHandler<Field> {





















 /**



......














src/heros/fieldsens/DeltaConstraint.java

→

src/heros/fieldsens/structs/DeltaConstraint.java








View file @ 1bf300ef






......@@ -8,8 +8,10 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















import heros.fieldsens.AccessPath;










import heros.fieldsens.FlowFunction;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;














......














src/heros/fieldsens/FactAtStatement.java

→

src/heros/fieldsens/structs/FactAtStatement.java








View file @ 1bf300ef






......@@ -8,7 +8,7 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















public class FactAtStatement<Fact, Stmt> {














......














src/heros/fieldsens/ReturnEdge.java

→

src/heros/fieldsens/structs/ReturnEdge.java








View file @ 1bf300ef






......@@ -8,19 +8,21 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















import heros.fieldsens.AccessPath;










import heros.fieldsens.Resolver;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;





















class ReturnEdge<Field, Fact, Stmt, Method> {










public class ReturnEdge<Field, Fact, Stmt, Method> {





















 final Fact incFact;










 final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 final Delta<Field> callDelta;










 final AccessPath<Field> incAccessPath;










 final Resolver<Field, Fact, Stmt, Method> incResolver;










 final Delta<Field> usedAccessPathOfIncResolver;










 public final Fact incFact;










 public final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 public final Delta<Field> callDelta;










 public final AccessPath<Field> incAccessPath;










 public final Resolver<Field, Fact, Stmt, Method> incResolver;










 public final Delta<Field> usedAccessPathOfIncResolver;





















 public ReturnEdge(WrappedFact<Field, Fact, Stmt, Method> fact, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller,



......














src/heros/fieldsens/WrappedFact.java

→

src/heros/fieldsens/structs/WrappedFact.java








View file @ 1bf300ef






......@@ -8,8 +8,12 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















import heros.fieldsens.AccessPath;










import heros.fieldsens.FlowFunction;










import heros.fieldsens.Resolver;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;





















public class WrappedFact<Field, Fact, Stmt, Method>{



......@@ -18,7 +22,7 @@ public class WrappedFact<Field, Fact, Stmt, Method>{









 private final AccessPath<Field> accessPath;










 private final Resolver<Field, Fact, Stmt, Method> resolver;










 










 WrappedFact(Fact fact, AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 public WrappedFact(Fact fact, AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 assert fact != null;










 assert accessPath != null;










 assert resolver != null;



......









Prev


1


2


Next















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
1bf300ef


authored
Jun 01, 2015
by


Johannes Lerch



Browse files



Commit
1bf300ef


authored
Jun 01, 2015
by


Johannes Lerch

1bf300efauthoredbyJohannes Lerch

restructuring






parent
d77de581
















parent
d77de581





parent












Changes
26
26


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/fieldsens/AccessPath.java








View file @ 1bf300ef






......@@ -10,8 +10,6 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.FlowFunction.Constraint;





















import java.util.Arrays;










import java.util.Collection;










import java.util.HashSet;



......














src/heros/fieldsens/AccessPathHandler.java








View file @ 1bf300ef






......@@ -13,6 +13,7 @@ package heros.fieldsens;









import heros.fieldsens.FlowFunction.ConstrainedFact;










import heros.fieldsens.FlowFunction.ReadFieldConstraint;










import heros.fieldsens.FlowFunction.WriteFieldConstraint;










import heros.fieldsens.structs.WrappedFact;





















public class AccessPathHandler<Field, Fact, Stmt, Method> {














......














src/heros/fieldsens/CallConcretizationPathEdge.java

deleted


100644 → 0







View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import heros.solver.PathEdge;





















public class CallConcretizationPathEdge<M, N,D> extends PathEdge<N, D> {





















 private M calleeMethod;










 private D calleeSourceFact;





















 public CallConcretizationPathEdge(D dSource, N target, D dTarget, M calleeMethod, D calleeSourceFact) {










 super(dSource, target, dTarget);










 this.calleeMethod = calleeMethod;










 this.calleeSourceFact = calleeSourceFact;










 }





















 public M getCalleeMethod() {










 return calleeMethod;










 }





















 public D getCalleeSourceFact() {










 return calleeSourceFact;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = super.hashCode();










 result = prime * result + ((calleeMethod == null) ? 0 : calleeMethod.hashCode());










 result = prime * result + ((calleeSourceFact == null) ? 0 : calleeSourceFact.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (!super.equals(obj))










 return false;










 if (!(obj instanceof CallConcretizationPathEdge))










 return false;










 CallConcretizationPathEdge other = (CallConcretizationPathEdge) obj;










 if (calleeMethod == null) {










 if (other.calleeMethod != null)










 return false;










 } else if (!calleeMethod.equals(other.calleeMethod))










 return false;










 if (calleeSourceFact == null) {










 if (other.calleeSourceFact != null)










 return false;










 } else if (!calleeSourceFact.equals(other.calleeSourceFact))










 return false;










 return true;










 }





















 @Override










 public String toString() {










 return "ConcretizationPathEdge "+super.toString()+ " registers interest at "+calleeMethod+" in "+calleeSourceFact;










 }










}














src/heros/fieldsens/CallEdge.java








View file @ 1bf300ef






......@@ -12,6 +12,9 @@ package heros.fieldsens;




















import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class CallEdge<Field, Fact, Stmt, Method> {














......














src/heros/fieldsens/CallEdgeResolver.java








View file @ 1bf300ef






......@@ -10,6 +10,8 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFactAtStatement;





















import com.google.common.collect.Lists;

























......














src/heros/fieldsens/ConcurrentHashSet.java

deleted


100644 → 0







View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2012 Secure Software Engineering Group at EC SPRIDE.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors: Christian Fritz, Steven Arzt, Siegfried Rasthofer, Eric










 * Bodden, and others.










 ******************************************************************************/










package heros.fieldsens;





















import java.util.AbstractSet;










import java.util.Iterator;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;





















import com.google.common.collect.MapMaker;





















/**










 * Multithreaded version of a hash set










 * 










 * @author Steven Arzt










 */










public class ConcurrentHashSet<E> extends AbstractSet<E> implements Set<E> {





















 protected final ConcurrentMap<E,E> delegate;










 










 /**










     * Creates a new, empty ConcurrentHashSet. 










     */










 public ConcurrentHashSet() {










 // had some really weird NPEs with Java's ConcurrentHashMap (i.e. got a










 // NPE at size()), now trying witrh Guava instead










 delegate = new MapMaker().concurrencyLevel










 (Runtime.getRuntime().availableProcessors()).makeMap();










 }





















 @Override










 public int size() {










 return delegate.size();










 }





















 @Override










 public boolean contains(Object o) {










 return delegate.containsKey(o);










 }





















 @Override










 public Iterator<E> iterator() {










 return delegate.keySet().iterator();










 }





















 @Override










 public boolean add(E o) {










 assert o != null;










 return delegate.put(o, o)==null;










 }





















 @Override










 public boolean remove(Object o) {










 return delegate.remove(o)!=null;










 }





















 @Override










 public void clear() {










 delegate.entrySet().clear();










 }





















 @Override










 public int hashCode() {










 return delegate.hashCode();










 }





















 @Override










 public boolean equals(Object obj) {










 return obj instanceof ConcurrentHashSet && delegate.equals(obj);










 }










 










 @Override










 public String toString() {










 return delegate.keySet().toString();










 }





















 










}














src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ 1bf300ef






......@@ -11,6 +11,9 @@









package heros.fieldsens;





















import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {














......@@ -35,7 +38,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 return inc.getAccessPath();










 }





















 protected void processIncomingGuaranteedPrefix(heros.fieldsens.WrappedFact<Field,Fact,Stmt,Method> fact) {










 protected void processIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 propagated=true;










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(



......














src/heros/fieldsens/FieldSensitiveIFDSSolver.java








View file @ 1bf300ef






......@@ -11,6 +11,7 @@









package heros.fieldsens;





















import heros.InterproceduralCFG;










import heros.utilities.DefaultValueMap;





















import java.util.Map.Entry;










import java.util.Set;



......@@ -24,7 +25,7 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 protected static final Logger logger = LoggerFactory.getLogger(FieldSensitiveIFDSSolver.class);










 










 private CacheMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new CacheMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {










 private DefaultValueMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new DefaultValueMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {










 @Override










 protected MethodAnalyzer<FieldRef, D, N, M> createItem(M key) {










 return createMethodAnalyzer(key);



......














src/heros/fieldsens/FlowFunction.java








View file @ 1bf300ef






......@@ -10,6 +10,8 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFact;





















import java.util.LinkedHashSet;










import java.util.Set;














......














src/heros/fieldsens/MethodAnalyzer.java








View file @ 1bf300ef






......@@ -10,6 +10,8 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFactAtStatement;





















public interface MethodAnalyzer<Field,Fact,Stmt,Method> {





















 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge);



......














src/heros/fieldsens/MethodAnalyzerImpl.java








View file @ 1bf300ef






......@@ -10,12 +10,16 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;










import heros.utilities.DefaultValueMap;





















public class MethodAnalyzerImpl<Field,Fact, Stmt, Method> 










 implements MethodAnalyzer<Field, Fact, Stmt, Method> {





















 private Method method;










 private CacheMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new CacheMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 private DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Fact key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context);



......














src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ 1bf300ef






......@@ -13,6 +13,10 @@ package heros.fieldsens;









import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;










import heros.fieldsens.FlowFunction.ConstrainedFact;










import heros.fieldsens.structs.FactAtStatement;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;










import heros.utilities.DefaultValueMap;





















import java.io.FileWriter;










import java.io.IOException;



......@@ -37,13 +41,13 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private List<WrappedFactAtStatement<Field, Fact, Stmt, Method>> summaries = Lists.newLinkedList();










 private Context<Field, Fact, Stmt, Method> context;










 private Method method;










 private CacheMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new CacheMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<>(PerAccessPathMethodAnalyzer.this, key.stmt);










 }










 };










 private CacheMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new CacheMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<>(PerAccessPathMethodAnalyzer.this, key.stmt);



......














src/heros/fieldsens/ReturnConcretizationPathEdge.java

deleted


100644 → 0







View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import heros.solver.PathEdge;





















public abstract class ReturnConcretizationPathEdge<N,D> extends PathEdge<N, D> {
































 public ReturnConcretizationPathEdge(D dSource, N target, D dTarget) {










 super(dSource, target, dTarget);










 }





















 public void propagate() {










 _propagate(dSource, target, dTarget);










 }










 










 protected abstract void _propagate(D dSource, N target, D dTarget);










 










 @Override










 public PathEdge<N, D> copyWithTarget(D dTarget) {










 final ReturnConcretizationPathEdge<N, D> outer = this;










 return new ReturnConcretizationPathEdge<N, D>(dSource, target, dTarget) {





















 @Override










 protected void _propagate(D dSource, N target, D dTarget) {










 outer._propagate(dSource, target, dTarget);










 }










 };










 }










 










 @Override










 public String toString() {










 return "ReturnConcretizationPathEdge "+super.toString();










 }










}














src/heros/fieldsens/ReturnSiteResolver.java








View file @ 1bf300ef






......@@ -12,6 +12,10 @@ package heros.fieldsens;




















import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.ReturnEdge;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {














......














src/heros/fieldsens/SourceStmtAnnotatedMethodAnalyzer.java








View file @ 1bf300ef






......@@ -10,13 +10,17 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;










import heros.utilities.DefaultValueMap;
































public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>










 implements MethodAnalyzer<Field, Fact, Stmt, Method> {





















 private Method method;










 private CacheMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new CacheMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 private DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Key<Fact, Stmt> key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context);



......














src/heros/fieldsens/ZeroHandler.java








View file @ 1bf300ef






......@@ -10,6 +10,7 @@









 ******************************************************************************/










package heros.fieldsens;
































public interface ZeroHandler<Field> {





















 /**



......














src/heros/fieldsens/DeltaConstraint.java

→

src/heros/fieldsens/structs/DeltaConstraint.java








View file @ 1bf300ef






......@@ -8,8 +8,10 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















import heros.fieldsens.AccessPath;










import heros.fieldsens.FlowFunction;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;














......














src/heros/fieldsens/FactAtStatement.java

→

src/heros/fieldsens/structs/FactAtStatement.java








View file @ 1bf300ef






......@@ -8,7 +8,7 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















public class FactAtStatement<Fact, Stmt> {














......














src/heros/fieldsens/ReturnEdge.java

→

src/heros/fieldsens/structs/ReturnEdge.java








View file @ 1bf300ef






......@@ -8,19 +8,21 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















import heros.fieldsens.AccessPath;










import heros.fieldsens.Resolver;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;





















class ReturnEdge<Field, Fact, Stmt, Method> {










public class ReturnEdge<Field, Fact, Stmt, Method> {





















 final Fact incFact;










 final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 final Delta<Field> callDelta;










 final AccessPath<Field> incAccessPath;










 final Resolver<Field, Fact, Stmt, Method> incResolver;










 final Delta<Field> usedAccessPathOfIncResolver;










 public final Fact incFact;










 public final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 public final Delta<Field> callDelta;










 public final AccessPath<Field> incAccessPath;










 public final Resolver<Field, Fact, Stmt, Method> incResolver;










 public final Delta<Field> usedAccessPathOfIncResolver;





















 public ReturnEdge(WrappedFact<Field, Fact, Stmt, Method> fact, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller,



......














src/heros/fieldsens/WrappedFact.java

→

src/heros/fieldsens/structs/WrappedFact.java








View file @ 1bf300ef






......@@ -8,8 +8,12 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















import heros.fieldsens.AccessPath;










import heros.fieldsens.FlowFunction;










import heros.fieldsens.Resolver;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;





















public class WrappedFact<Field, Fact, Stmt, Method>{



......@@ -18,7 +22,7 @@ public class WrappedFact<Field, Fact, Stmt, Method>{









 private final AccessPath<Field> accessPath;










 private final Resolver<Field, Fact, Stmt, Method> resolver;










 










 WrappedFact(Fact fact, AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 public WrappedFact(Fact fact, AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 assert fact != null;










 assert accessPath != null;










 assert resolver != null;



......









Prev


1


2


Next













src/heros/fieldsens/AccessPath.java








View file @ 1bf300ef






......@@ -10,8 +10,6 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.FlowFunction.Constraint;





















import java.util.Arrays;










import java.util.Collection;










import java.util.HashSet;



......












src/heros/fieldsens/AccessPath.java








View file @ 1bf300ef








src/heros/fieldsens/AccessPath.java










View file @ 1bf300ef


1bf300ef



......@@ -10,8 +10,6 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.FlowFunction.Constraint;





















import java.util.Arrays;










import java.util.Collection;










import java.util.HashSet;



......






......@@ -10,8 +10,6 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.FlowFunction.Constraint;





















import java.util.Arrays;










import java.util.Collection;










import java.util.HashSet;



......


 ******************************************************************************/ ******************************************************************************/package heros.fieldsens;packageheros.fieldsens;import heros.fieldsens.FlowFunction.Constraint;importheros.fieldsens.FlowFunction.Constraint;import java.util.Arrays;importjava.util.Arrays;import java.util.Collection;importjava.util.Collection;import java.util.HashSet;importjava.util.HashSet;








src/heros/fieldsens/AccessPathHandler.java








View file @ 1bf300ef






......@@ -13,6 +13,7 @@ package heros.fieldsens;









import heros.fieldsens.FlowFunction.ConstrainedFact;










import heros.fieldsens.FlowFunction.ReadFieldConstraint;










import heros.fieldsens.FlowFunction.WriteFieldConstraint;










import heros.fieldsens.structs.WrappedFact;





















public class AccessPathHandler<Field, Fact, Stmt, Method> {














......












src/heros/fieldsens/AccessPathHandler.java








View file @ 1bf300ef








src/heros/fieldsens/AccessPathHandler.java










View file @ 1bf300ef


1bf300ef



......@@ -13,6 +13,7 @@ package heros.fieldsens;









import heros.fieldsens.FlowFunction.ConstrainedFact;










import heros.fieldsens.FlowFunction.ReadFieldConstraint;










import heros.fieldsens.FlowFunction.WriteFieldConstraint;










import heros.fieldsens.structs.WrappedFact;





















public class AccessPathHandler<Field, Fact, Stmt, Method> {














......






......@@ -13,6 +13,7 @@ package heros.fieldsens;









import heros.fieldsens.FlowFunction.ConstrainedFact;










import heros.fieldsens.FlowFunction.ReadFieldConstraint;










import heros.fieldsens.FlowFunction.WriteFieldConstraint;










import heros.fieldsens.structs.WrappedFact;





















public class AccessPathHandler<Field, Fact, Stmt, Method> {














......


import heros.fieldsens.FlowFunction.ConstrainedFact;importheros.fieldsens.FlowFunction.ConstrainedFact;import heros.fieldsens.FlowFunction.ReadFieldConstraint;importheros.fieldsens.FlowFunction.ReadFieldConstraint;import heros.fieldsens.FlowFunction.WriteFieldConstraint;importheros.fieldsens.FlowFunction.WriteFieldConstraint;import heros.fieldsens.structs.WrappedFact;importheros.fieldsens.structs.WrappedFact;public class AccessPathHandler<Field, Fact, Stmt, Method> {publicclassAccessPathHandler<Field,Fact,Stmt,Method>{








src/heros/fieldsens/CallConcretizationPathEdge.java

deleted


100644 → 0







View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import heros.solver.PathEdge;





















public class CallConcretizationPathEdge<M, N,D> extends PathEdge<N, D> {





















 private M calleeMethod;










 private D calleeSourceFact;





















 public CallConcretizationPathEdge(D dSource, N target, D dTarget, M calleeMethod, D calleeSourceFact) {










 super(dSource, target, dTarget);










 this.calleeMethod = calleeMethod;










 this.calleeSourceFact = calleeSourceFact;










 }





















 public M getCalleeMethod() {










 return calleeMethod;










 }





















 public D getCalleeSourceFact() {










 return calleeSourceFact;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = super.hashCode();










 result = prime * result + ((calleeMethod == null) ? 0 : calleeMethod.hashCode());










 result = prime * result + ((calleeSourceFact == null) ? 0 : calleeSourceFact.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (!super.equals(obj))










 return false;










 if (!(obj instanceof CallConcretizationPathEdge))










 return false;










 CallConcretizationPathEdge other = (CallConcretizationPathEdge) obj;










 if (calleeMethod == null) {










 if (other.calleeMethod != null)










 return false;










 } else if (!calleeMethod.equals(other.calleeMethod))










 return false;










 if (calleeSourceFact == null) {










 if (other.calleeSourceFact != null)










 return false;










 } else if (!calleeSourceFact.equals(other.calleeSourceFact))










 return false;










 return true;










 }





















 @Override










 public String toString() {










 return "ConcretizationPathEdge "+super.toString()+ " registers interest at "+calleeMethod+" in "+calleeSourceFact;










 }










}












src/heros/fieldsens/CallConcretizationPathEdge.java

deleted


100644 → 0







View file @ d77de581








src/heros/fieldsens/CallConcretizationPathEdge.java

deleted


100644 → 0









View file @ d77de581


d77de581










/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import heros.solver.PathEdge;





















public class CallConcretizationPathEdge<M, N,D> extends PathEdge<N, D> {





















 private M calleeMethod;










 private D calleeSourceFact;





















 public CallConcretizationPathEdge(D dSource, N target, D dTarget, M calleeMethod, D calleeSourceFact) {










 super(dSource, target, dTarget);










 this.calleeMethod = calleeMethod;










 this.calleeSourceFact = calleeSourceFact;










 }





















 public M getCalleeMethod() {










 return calleeMethod;










 }





















 public D getCalleeSourceFact() {










 return calleeSourceFact;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = super.hashCode();










 result = prime * result + ((calleeMethod == null) ? 0 : calleeMethod.hashCode());










 result = prime * result + ((calleeSourceFact == null) ? 0 : calleeSourceFact.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (!super.equals(obj))










 return false;










 if (!(obj instanceof CallConcretizationPathEdge))










 return false;










 CallConcretizationPathEdge other = (CallConcretizationPathEdge) obj;










 if (calleeMethod == null) {










 if (other.calleeMethod != null)










 return false;










 } else if (!calleeMethod.equals(other.calleeMethod))










 return false;










 if (calleeSourceFact == null) {










 if (other.calleeSourceFact != null)










 return false;










 } else if (!calleeSourceFact.equals(other.calleeSourceFact))










 return false;










 return true;










 }





















 @Override










 public String toString() {










 return "ConcretizationPathEdge "+super.toString()+ " registers interest at "+calleeMethod+" in "+calleeSourceFact;










 }










}













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import heros.solver.PathEdge;





















public class CallConcretizationPathEdge<M, N,D> extends PathEdge<N, D> {





















 private M calleeMethod;










 private D calleeSourceFact;





















 public CallConcretizationPathEdge(D dSource, N target, D dTarget, M calleeMethod, D calleeSourceFact) {










 super(dSource, target, dTarget);










 this.calleeMethod = calleeMethod;










 this.calleeSourceFact = calleeSourceFact;










 }





















 public M getCalleeMethod() {










 return calleeMethod;










 }





















 public D getCalleeSourceFact() {










 return calleeSourceFact;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = super.hashCode();










 result = prime * result + ((calleeMethod == null) ? 0 : calleeMethod.hashCode());










 result = prime * result + ((calleeSourceFact == null) ? 0 : calleeSourceFact.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (!super.equals(obj))










 return false;










 if (!(obj instanceof CallConcretizationPathEdge))










 return false;










 CallConcretizationPathEdge other = (CallConcretizationPathEdge) obj;










 if (calleeMethod == null) {










 if (other.calleeMethod != null)










 return false;










 } else if (!calleeMethod.equals(other.calleeMethod))










 return false;










 if (calleeSourceFact == null) {










 if (other.calleeSourceFact != null)










 return false;










 } else if (!calleeSourceFact.equals(other.calleeSourceFact))










 return false;










 return true;










 }





















 @Override










 public String toString() {










 return "ConcretizationPathEdge "+super.toString()+ " registers interest at "+calleeMethod+" in "+calleeSourceFact;










 }










}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2015 Johannes Lerch. * Copyright (c) 2015 Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.fieldsens;packageheros.fieldsens;import heros.solver.PathEdge;importheros.solver.PathEdge;public class CallConcretizationPathEdge<M, N,D> extends PathEdge<N, D> {publicclassCallConcretizationPathEdge<M,N,D>extendsPathEdge<N,D>{ private M calleeMethod;privateMcalleeMethod; private D calleeSourceFact;privateDcalleeSourceFact; public CallConcretizationPathEdge(D dSource, N target, D dTarget, M calleeMethod, D calleeSourceFact) {publicCallConcretizationPathEdge(DdSource,Ntarget,DdTarget,McalleeMethod,DcalleeSourceFact){ super(dSource, target, dTarget);super(dSource,target,dTarget); this.calleeMethod = calleeMethod;this.calleeMethod=calleeMethod; this.calleeSourceFact = calleeSourceFact;this.calleeSourceFact=calleeSourceFact; }} public M getCalleeMethod() {publicMgetCalleeMethod(){ return calleeMethod;returncalleeMethod; }} public D getCalleeSourceFact() {publicDgetCalleeSourceFact(){ return calleeSourceFact;returncalleeSourceFact; }} @Override@Override public int hashCode() {publicinthashCode(){ final int prime = 31;finalintprime=31; int result = super.hashCode();intresult=super.hashCode(); result = prime * result + ((calleeMethod == null) ? 0 : calleeMethod.hashCode());result=prime*result+((calleeMethod==null)?0:calleeMethod.hashCode()); result = prime * result + ((calleeSourceFact == null) ? 0 : calleeSourceFact.hashCode());result=prime*result+((calleeSourceFact==null)?0:calleeSourceFact.hashCode()); return result;returnresult; }} @Override@Override public boolean equals(Object obj) {publicbooleanequals(Objectobj){ if (this == obj)if(this==obj) return true;returntrue; if (!super.equals(obj))if(!super.equals(obj)) return false;returnfalse; if (!(obj instanceof CallConcretizationPathEdge))if(!(objinstanceofCallConcretizationPathEdge)) return false;returnfalse; CallConcretizationPathEdge other = (CallConcretizationPathEdge) obj;CallConcretizationPathEdgeother=(CallConcretizationPathEdge)obj; if (calleeMethod == null) {if(calleeMethod==null){ if (other.calleeMethod != null)if(other.calleeMethod!=null) return false;returnfalse; } else if (!calleeMethod.equals(other.calleeMethod))}elseif(!calleeMethod.equals(other.calleeMethod)) return false;returnfalse; if (calleeSourceFact == null) {if(calleeSourceFact==null){ if (other.calleeSourceFact != null)if(other.calleeSourceFact!=null) return false;returnfalse; } else if (!calleeSourceFact.equals(other.calleeSourceFact))}elseif(!calleeSourceFact.equals(other.calleeSourceFact)) return false;returnfalse; return true;returntrue; }} @Override@Override public String toString() {publicStringtoString(){ return "ConcretizationPathEdge "+super.toString()+ " registers interest at "+calleeMethod+" in "+calleeSourceFact;return"ConcretizationPathEdge "+super.toString()+" registers interest at "+calleeMethod+" in "+calleeSourceFact; }}}}








src/heros/fieldsens/CallEdge.java








View file @ 1bf300ef






......@@ -12,6 +12,9 @@ package heros.fieldsens;




















import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class CallEdge<Field, Fact, Stmt, Method> {














......












src/heros/fieldsens/CallEdge.java








View file @ 1bf300ef








src/heros/fieldsens/CallEdge.java










View file @ 1bf300ef


1bf300ef



......@@ -12,6 +12,9 @@ package heros.fieldsens;




















import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class CallEdge<Field, Fact, Stmt, Method> {














......






......@@ -12,6 +12,9 @@ package heros.fieldsens;




















import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class CallEdge<Field, Fact, Stmt, Method> {














......


import heros.fieldsens.AccessPath.Delta;importheros.fieldsens.AccessPath.Delta;import heros.fieldsens.AccessPath.PrefixTestResult;importheros.fieldsens.AccessPath.PrefixTestResult;import heros.fieldsens.structs.DeltaConstraint;importheros.fieldsens.structs.DeltaConstraint;import heros.fieldsens.structs.WrappedFact;importheros.fieldsens.structs.WrappedFact;import heros.fieldsens.structs.WrappedFactAtStatement;importheros.fieldsens.structs.WrappedFactAtStatement;public class CallEdge<Field, Fact, Stmt, Method> {publicclassCallEdge<Field,Fact,Stmt,Method>{








src/heros/fieldsens/CallEdgeResolver.java








View file @ 1bf300ef






......@@ -10,6 +10,8 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFactAtStatement;





















import com.google.common.collect.Lists;

























......












src/heros/fieldsens/CallEdgeResolver.java








View file @ 1bf300ef








src/heros/fieldsens/CallEdgeResolver.java










View file @ 1bf300ef


1bf300ef



......@@ -10,6 +10,8 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFactAtStatement;





















import com.google.common.collect.Lists;

























......






......@@ -10,6 +10,8 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFactAtStatement;





















import com.google.common.collect.Lists;

























......


 ******************************************************************************/ ******************************************************************************/package heros.fieldsens;packageheros.fieldsens;import heros.fieldsens.structs.WrappedFactAtStatement;importheros.fieldsens.structs.WrappedFactAtStatement;import com.google.common.collect.Lists;importcom.google.common.collect.Lists;








src/heros/fieldsens/ConcurrentHashSet.java

deleted


100644 → 0







View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2012 Secure Software Engineering Group at EC SPRIDE.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors: Christian Fritz, Steven Arzt, Siegfried Rasthofer, Eric










 * Bodden, and others.










 ******************************************************************************/










package heros.fieldsens;





















import java.util.AbstractSet;










import java.util.Iterator;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;





















import com.google.common.collect.MapMaker;





















/**










 * Multithreaded version of a hash set










 * 










 * @author Steven Arzt










 */










public class ConcurrentHashSet<E> extends AbstractSet<E> implements Set<E> {





















 protected final ConcurrentMap<E,E> delegate;










 










 /**










     * Creates a new, empty ConcurrentHashSet. 










     */










 public ConcurrentHashSet() {










 // had some really weird NPEs with Java's ConcurrentHashMap (i.e. got a










 // NPE at size()), now trying witrh Guava instead










 delegate = new MapMaker().concurrencyLevel










 (Runtime.getRuntime().availableProcessors()).makeMap();










 }





















 @Override










 public int size() {










 return delegate.size();










 }





















 @Override










 public boolean contains(Object o) {










 return delegate.containsKey(o);










 }





















 @Override










 public Iterator<E> iterator() {










 return delegate.keySet().iterator();










 }





















 @Override










 public boolean add(E o) {










 assert o != null;










 return delegate.put(o, o)==null;










 }





















 @Override










 public boolean remove(Object o) {










 return delegate.remove(o)!=null;










 }





















 @Override










 public void clear() {










 delegate.entrySet().clear();










 }





















 @Override










 public int hashCode() {










 return delegate.hashCode();










 }





















 @Override










 public boolean equals(Object obj) {










 return obj instanceof ConcurrentHashSet && delegate.equals(obj);










 }










 










 @Override










 public String toString() {










 return delegate.keySet().toString();










 }





















 










}












src/heros/fieldsens/ConcurrentHashSet.java

deleted


100644 → 0







View file @ d77de581








src/heros/fieldsens/ConcurrentHashSet.java

deleted


100644 → 0









View file @ d77de581


d77de581










/*******************************************************************************










 * Copyright (c) 2012 Secure Software Engineering Group at EC SPRIDE.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors: Christian Fritz, Steven Arzt, Siegfried Rasthofer, Eric










 * Bodden, and others.










 ******************************************************************************/










package heros.fieldsens;





















import java.util.AbstractSet;










import java.util.Iterator;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;





















import com.google.common.collect.MapMaker;





















/**










 * Multithreaded version of a hash set










 * 










 * @author Steven Arzt










 */










public class ConcurrentHashSet<E> extends AbstractSet<E> implements Set<E> {





















 protected final ConcurrentMap<E,E> delegate;










 










 /**










     * Creates a new, empty ConcurrentHashSet. 










     */










 public ConcurrentHashSet() {










 // had some really weird NPEs with Java's ConcurrentHashMap (i.e. got a










 // NPE at size()), now trying witrh Guava instead










 delegate = new MapMaker().concurrencyLevel










 (Runtime.getRuntime().availableProcessors()).makeMap();










 }





















 @Override










 public int size() {










 return delegate.size();










 }





















 @Override










 public boolean contains(Object o) {










 return delegate.containsKey(o);










 }





















 @Override










 public Iterator<E> iterator() {










 return delegate.keySet().iterator();










 }





















 @Override










 public boolean add(E o) {










 assert o != null;










 return delegate.put(o, o)==null;










 }





















 @Override










 public boolean remove(Object o) {










 return delegate.remove(o)!=null;










 }





















 @Override










 public void clear() {










 delegate.entrySet().clear();










 }





















 @Override










 public int hashCode() {










 return delegate.hashCode();










 }





















 @Override










 public boolean equals(Object obj) {










 return obj instanceof ConcurrentHashSet && delegate.equals(obj);










 }










 










 @Override










 public String toString() {










 return delegate.keySet().toString();










 }





















 










}













/*******************************************************************************










 * Copyright (c) 2012 Secure Software Engineering Group at EC SPRIDE.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors: Christian Fritz, Steven Arzt, Siegfried Rasthofer, Eric










 * Bodden, and others.










 ******************************************************************************/










package heros.fieldsens;





















import java.util.AbstractSet;










import java.util.Iterator;










import java.util.Set;










import java.util.concurrent.ConcurrentMap;





















import com.google.common.collect.MapMaker;





















/**










 * Multithreaded version of a hash set










 * 










 * @author Steven Arzt










 */










public class ConcurrentHashSet<E> extends AbstractSet<E> implements Set<E> {





















 protected final ConcurrentMap<E,E> delegate;










 










 /**










     * Creates a new, empty ConcurrentHashSet. 










     */










 public ConcurrentHashSet() {










 // had some really weird NPEs with Java's ConcurrentHashMap (i.e. got a










 // NPE at size()), now trying witrh Guava instead










 delegate = new MapMaker().concurrencyLevel










 (Runtime.getRuntime().availableProcessors()).makeMap();










 }





















 @Override










 public int size() {










 return delegate.size();










 }





















 @Override










 public boolean contains(Object o) {










 return delegate.containsKey(o);










 }





















 @Override










 public Iterator<E> iterator() {










 return delegate.keySet().iterator();










 }





















 @Override










 public boolean add(E o) {










 assert o != null;










 return delegate.put(o, o)==null;










 }





















 @Override










 public boolean remove(Object o) {










 return delegate.remove(o)!=null;










 }





















 @Override










 public void clear() {










 delegate.entrySet().clear();










 }





















 @Override










 public int hashCode() {










 return delegate.hashCode();










 }





















 @Override










 public boolean equals(Object obj) {










 return obj instanceof ConcurrentHashSet && delegate.equals(obj);










 }










 










 @Override










 public String toString() {










 return delegate.keySet().toString();










 }





















 










}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2012 Secure Software Engineering Group at EC SPRIDE. * Copyright (c) 2012 Secure Software Engineering Group at EC SPRIDE. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: Christian Fritz, Steven Arzt, Siegfried Rasthofer, Eric * Contributors: Christian Fritz, Steven Arzt, Siegfried Rasthofer, Eric * Bodden, and others. * Bodden, and others. ******************************************************************************/ ******************************************************************************/package heros.fieldsens;packageheros.fieldsens;import java.util.AbstractSet;importjava.util.AbstractSet;import java.util.Iterator;importjava.util.Iterator;import java.util.Set;importjava.util.Set;import java.util.concurrent.ConcurrentMap;importjava.util.concurrent.ConcurrentMap;import com.google.common.collect.MapMaker;importcom.google.common.collect.MapMaker;/**/** * Multithreaded version of a hash set * Multithreaded version of a hash set *  *  * @author Steven Arzt * @author Steven Arzt */ */public class ConcurrentHashSet<E> extends AbstractSet<E> implements Set<E> {publicclassConcurrentHashSet<E>extendsAbstractSet<E>implementsSet<E>{ protected final ConcurrentMap<E,E> delegate;protectedfinalConcurrentMap<E,E>delegate;  /**/**     * Creates a new, empty ConcurrentHashSet.      * Creates a new, empty ConcurrentHashSet.      */     */ public ConcurrentHashSet() {publicConcurrentHashSet(){ // had some really weird NPEs with Java's ConcurrentHashMap (i.e. got a// had some really weird NPEs with Java's ConcurrentHashMap (i.e. got a // NPE at size()), now trying witrh Guava instead// NPE at size()), now trying witrh Guava instead delegate = new MapMaker().concurrencyLeveldelegate=newMapMaker().concurrencyLevel (Runtime.getRuntime().availableProcessors()).makeMap();(Runtime.getRuntime().availableProcessors()).makeMap(); }} @Override@Override public int size() {publicintsize(){ return delegate.size();returndelegate.size(); }} @Override@Override public boolean contains(Object o) {publicbooleancontains(Objecto){ return delegate.containsKey(o);returndelegate.containsKey(o); }} @Override@Override public Iterator<E> iterator() {publicIterator<E>iterator(){ return delegate.keySet().iterator();returndelegate.keySet().iterator(); }} @Override@Override public boolean add(E o) {publicbooleanadd(Eo){ assert o != null;asserto!=null; return delegate.put(o, o)==null;returndelegate.put(o,o)==null; }} @Override@Override public boolean remove(Object o) {publicbooleanremove(Objecto){ return delegate.remove(o)!=null;returndelegate.remove(o)!=null; }} @Override@Override public void clear() {publicvoidclear(){ delegate.entrySet().clear();delegate.entrySet().clear(); }} @Override@Override public int hashCode() {publicinthashCode(){ return delegate.hashCode();returndelegate.hashCode(); }} @Override@Override public boolean equals(Object obj) {publicbooleanequals(Objectobj){ return obj instanceof ConcurrentHashSet && delegate.equals(obj);returnobjinstanceofConcurrentHashSet&&delegate.equals(obj); }}  @Override@Override public String toString() {publicStringtoString(){ return delegate.keySet().toString();returndelegate.keySet().toString(); }} }}








src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ 1bf300ef






......@@ -11,6 +11,9 @@









package heros.fieldsens;





















import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {














......@@ -35,7 +38,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 return inc.getAccessPath();










 }





















 protected void processIncomingGuaranteedPrefix(heros.fieldsens.WrappedFact<Field,Fact,Stmt,Method> fact) {










 protected void processIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 propagated=true;










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(



......












src/heros/fieldsens/ControlFlowJoinResolver.java








View file @ 1bf300ef








src/heros/fieldsens/ControlFlowJoinResolver.java










View file @ 1bf300ef


1bf300ef



......@@ -11,6 +11,9 @@









package heros.fieldsens;





















import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {














......@@ -35,7 +38,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 return inc.getAccessPath();










 }





















 protected void processIncomingGuaranteedPrefix(heros.fieldsens.WrappedFact<Field,Fact,Stmt,Method> fact) {










 protected void processIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 propagated=true;










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(



......






......@@ -11,6 +11,9 @@









package heros.fieldsens;





















import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {














......@@ -35,7 +38,7 @@ public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends Resolver









 return inc.getAccessPath();










 }





















 protected void processIncomingGuaranteedPrefix(heros.fieldsens.WrappedFact<Field,Fact,Stmt,Method> fact) {










 protected void processIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method> fact) {










 if(!propagated) {










 propagated=true;










 analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(



......


package heros.fieldsens;packageheros.fieldsens;import heros.fieldsens.AccessPath.Delta;importheros.fieldsens.AccessPath.Delta;import heros.fieldsens.structs.DeltaConstraint;importheros.fieldsens.structs.DeltaConstraint;import heros.fieldsens.structs.WrappedFact;importheros.fieldsens.structs.WrappedFact;import heros.fieldsens.structs.WrappedFactAtStatement;importheros.fieldsens.structs.WrappedFactAtStatement;public class ControlFlowJoinResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, WrappedFact<Field, Fact, Stmt, Method>> {publicclassControlFlowJoinResolver<Field,Fact,Stmt,Method>extendsResolverTemplate<Field,Fact,Stmt,Method,WrappedFact<Field,Fact,Stmt,Method>>{ return inc.getAccessPath();returninc.getAccessPath(); }} protected void processIncomingGuaranteedPrefix(heros.fieldsens.WrappedFact<Field,Fact,Stmt,Method> fact) {protectedvoidprocessIncomingGuaranteedPrefix(heros.fieldsens.WrappedFact<Field,Fact,Stmt,Method>fact){ protected void processIncomingGuaranteedPrefix(heros.fieldsens.structs.WrappedFact<Field,Fact,Stmt,Method> fact) {protectedvoidprocessIncomingGuaranteedPrefix(heros.fieldsens.structsstructs..WrappedFact<Field,Fact,Stmt,Method>fact){ if(!propagated) {if(!propagated){ propagated=true;propagated=true; analyzer.processFlowFromJoinStmt(new WrappedFactAtStatement<>(joinStmt, new WrappedFact<>(analyzer.processFlowFromJoinStmt(newWrappedFactAtStatement<>(joinStmt,newWrappedFact<>(








src/heros/fieldsens/FieldSensitiveIFDSSolver.java








View file @ 1bf300ef






......@@ -11,6 +11,7 @@









package heros.fieldsens;





















import heros.InterproceduralCFG;










import heros.utilities.DefaultValueMap;





















import java.util.Map.Entry;










import java.util.Set;



......@@ -24,7 +25,7 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 protected static final Logger logger = LoggerFactory.getLogger(FieldSensitiveIFDSSolver.class);










 










 private CacheMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new CacheMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {










 private DefaultValueMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new DefaultValueMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {










 @Override










 protected MethodAnalyzer<FieldRef, D, N, M> createItem(M key) {










 return createMethodAnalyzer(key);



......












src/heros/fieldsens/FieldSensitiveIFDSSolver.java








View file @ 1bf300ef








src/heros/fieldsens/FieldSensitiveIFDSSolver.java










View file @ 1bf300ef


1bf300ef



......@@ -11,6 +11,7 @@









package heros.fieldsens;





















import heros.InterproceduralCFG;










import heros.utilities.DefaultValueMap;





















import java.util.Map.Entry;










import java.util.Set;



......@@ -24,7 +25,7 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 protected static final Logger logger = LoggerFactory.getLogger(FieldSensitiveIFDSSolver.class);










 










 private CacheMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new CacheMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {










 private DefaultValueMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new DefaultValueMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {










 @Override










 protected MethodAnalyzer<FieldRef, D, N, M> createItem(M key) {










 return createMethodAnalyzer(key);



......






......@@ -11,6 +11,7 @@









package heros.fieldsens;





















import heros.InterproceduralCFG;










import heros.utilities.DefaultValueMap;





















import java.util.Map.Entry;










import java.util.Set;



......@@ -24,7 +25,7 @@ public class FieldSensitiveIFDSSolver<FieldRef, D, N, M, I extends Interprocedur




















 protected static final Logger logger = LoggerFactory.getLogger(FieldSensitiveIFDSSolver.class);










 










 private CacheMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new CacheMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {










 private DefaultValueMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new DefaultValueMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {










 @Override










 protected MethodAnalyzer<FieldRef, D, N, M> createItem(M key) {










 return createMethodAnalyzer(key);



......


package heros.fieldsens;packageheros.fieldsens;import heros.InterproceduralCFG;importheros.InterproceduralCFG;import heros.utilities.DefaultValueMap;importheros.utilities.DefaultValueMap;import java.util.Map.Entry;importjava.util.Map.Entry;import java.util.Set;importjava.util.Set; protected static final Logger logger = LoggerFactory.getLogger(FieldSensitiveIFDSSolver.class);protectedstaticfinalLoggerlogger=LoggerFactory.getLogger(FieldSensitiveIFDSSolver.class);  private CacheMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new CacheMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {privateCacheMapCach<M,MethodAnalyzer<FieldRef,D,N,M>>methodAnalyzers=newCacheMapCach<M,MethodAnalyzer<FieldRef,D,N,M>>(){ private DefaultValueMap<M, MethodAnalyzer<FieldRef, D, N, M>> methodAnalyzers = new DefaultValueMap<M, MethodAnalyzer<FieldRef, D,N, M>>() {privateDefaultValueMapDefaultValu<M,MethodAnalyzer<FieldRef,D,N,M>>methodAnalyzers=newDefaultValueMapDefaultValu<M,MethodAnalyzer<FieldRef,D,N,M>>(){ @Override@Override protected MethodAnalyzer<FieldRef, D, N, M> createItem(M key) {protectedMethodAnalyzer<FieldRef,D,N,M>createItem(Mkey){ return createMethodAnalyzer(key);returncreateMethodAnalyzer(key);








src/heros/fieldsens/FlowFunction.java








View file @ 1bf300ef






......@@ -10,6 +10,8 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFact;





















import java.util.LinkedHashSet;










import java.util.Set;














......












src/heros/fieldsens/FlowFunction.java








View file @ 1bf300ef








src/heros/fieldsens/FlowFunction.java










View file @ 1bf300ef


1bf300ef



......@@ -10,6 +10,8 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFact;





















import java.util.LinkedHashSet;










import java.util.Set;














......






......@@ -10,6 +10,8 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFact;





















import java.util.LinkedHashSet;










import java.util.Set;














......


 ******************************************************************************/ ******************************************************************************/package heros.fieldsens;packageheros.fieldsens;import heros.fieldsens.structs.WrappedFact;importheros.fieldsens.structs.WrappedFact;import java.util.LinkedHashSet;importjava.util.LinkedHashSet;import java.util.Set;importjava.util.Set;








src/heros/fieldsens/MethodAnalyzer.java








View file @ 1bf300ef






......@@ -10,6 +10,8 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFactAtStatement;





















public interface MethodAnalyzer<Field,Fact,Stmt,Method> {





















 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge);



......












src/heros/fieldsens/MethodAnalyzer.java








View file @ 1bf300ef








src/heros/fieldsens/MethodAnalyzer.java










View file @ 1bf300ef


1bf300ef



......@@ -10,6 +10,8 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFactAtStatement;





















public interface MethodAnalyzer<Field,Fact,Stmt,Method> {





















 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge);



......






......@@ -10,6 +10,8 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFactAtStatement;





















public interface MethodAnalyzer<Field,Fact,Stmt,Method> {





















 public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge);



......


 ******************************************************************************/ ******************************************************************************/package heros.fieldsens;packageheros.fieldsens;import heros.fieldsens.structs.WrappedFactAtStatement;importheros.fieldsens.structs.WrappedFactAtStatement;public interface MethodAnalyzer<Field,Fact,Stmt,Method> {publicinterfaceMethodAnalyzer<Field,Fact,Stmt,Method>{ public void addIncomingEdge(CallEdge<Field, Fact, Stmt, Method> incEdge);publicvoidaddIncomingEdge(CallEdge<Field,Fact,Stmt,Method>incEdge);








src/heros/fieldsens/MethodAnalyzerImpl.java








View file @ 1bf300ef






......@@ -10,12 +10,16 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;










import heros.utilities.DefaultValueMap;





















public class MethodAnalyzerImpl<Field,Fact, Stmt, Method> 










 implements MethodAnalyzer<Field, Fact, Stmt, Method> {





















 private Method method;










 private CacheMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new CacheMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 private DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Fact key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context);



......












src/heros/fieldsens/MethodAnalyzerImpl.java








View file @ 1bf300ef








src/heros/fieldsens/MethodAnalyzerImpl.java










View file @ 1bf300ef


1bf300ef



......@@ -10,12 +10,16 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;










import heros.utilities.DefaultValueMap;





















public class MethodAnalyzerImpl<Field,Fact, Stmt, Method> 










 implements MethodAnalyzer<Field, Fact, Stmt, Method> {





















 private Method method;










 private CacheMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new CacheMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 private DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Fact key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context);



......






......@@ -10,12 +10,16 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;










import heros.utilities.DefaultValueMap;





















public class MethodAnalyzerImpl<Field,Fact, Stmt, Method> 










 implements MethodAnalyzer<Field, Fact, Stmt, Method> {





















 private Method method;










 private CacheMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new CacheMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 private DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Fact key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context);



......


 ******************************************************************************/ ******************************************************************************/package heros.fieldsens;packageheros.fieldsens;import heros.fieldsens.structs.WrappedFact;importheros.fieldsens.structs.WrappedFact;import heros.fieldsens.structs.WrappedFactAtStatement;importheros.fieldsens.structs.WrappedFactAtStatement;import heros.utilities.DefaultValueMap;importheros.utilities.DefaultValueMap;public class MethodAnalyzerImpl<Field,Fact, Stmt, Method> publicclassMethodAnalyzerImpl<Field,Fact,Stmt,Method> implements MethodAnalyzer<Field, Fact, Stmt, Method> {implementsMethodAnalyzer<Field,Fact,Stmt,Method>{ private Method method;privateMethodmethod; private CacheMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = privateCacheMapCach<Fact,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>>perSourceAnalyzer= new CacheMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {newCacheMapCach<Fact,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>>(){ private DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = privateDefaultValueMapDefaultValu<Fact,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>>perSourceAnalyzer= new DefaultValueMap<Fact, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {newDefaultValueMapDefaultValu<Fact,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>>(){ @Override@Override protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Fact key) {protectedPerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>createItem(Factkey){ return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key, context);returnnewPerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>(method,key,context);








src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ 1bf300ef






......@@ -13,6 +13,10 @@ package heros.fieldsens;









import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;










import heros.fieldsens.FlowFunction.ConstrainedFact;










import heros.fieldsens.structs.FactAtStatement;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;










import heros.utilities.DefaultValueMap;





















import java.io.FileWriter;










import java.io.IOException;



......@@ -37,13 +41,13 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private List<WrappedFactAtStatement<Field, Fact, Stmt, Method>> summaries = Lists.newLinkedList();










 private Context<Field, Fact, Stmt, Method> context;










 private Method method;










 private CacheMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new CacheMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<>(PerAccessPathMethodAnalyzer.this, key.stmt);










 }










 };










 private CacheMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new CacheMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<>(PerAccessPathMethodAnalyzer.this, key.stmt);



......












src/heros/fieldsens/PerAccessPathMethodAnalyzer.java








View file @ 1bf300ef








src/heros/fieldsens/PerAccessPathMethodAnalyzer.java










View file @ 1bf300ef


1bf300ef



......@@ -13,6 +13,10 @@ package heros.fieldsens;









import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;










import heros.fieldsens.FlowFunction.ConstrainedFact;










import heros.fieldsens.structs.FactAtStatement;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;










import heros.utilities.DefaultValueMap;





















import java.io.FileWriter;










import java.io.IOException;



......@@ -37,13 +41,13 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private List<WrappedFactAtStatement<Field, Fact, Stmt, Method>> summaries = Lists.newLinkedList();










 private Context<Field, Fact, Stmt, Method> context;










 private Method method;










 private CacheMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new CacheMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<>(PerAccessPathMethodAnalyzer.this, key.stmt);










 }










 };










 private CacheMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new CacheMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<>(PerAccessPathMethodAnalyzer.this, key.stmt);



......






......@@ -13,6 +13,10 @@ package heros.fieldsens;









import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;










import heros.fieldsens.FlowFunction.ConstrainedFact;










import heros.fieldsens.structs.FactAtStatement;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;










import heros.utilities.DefaultValueMap;





















import java.io.FileWriter;










import java.io.IOException;



......@@ -37,13 +41,13 @@ class PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> {









 private List<WrappedFactAtStatement<Field, Fact, Stmt, Method>> summaries = Lists.newLinkedList();










 private Context<Field, Fact, Stmt, Method> context;










 private Method method;










 private CacheMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new CacheMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ReturnSiteResolver<>(PerAccessPathMethodAnalyzer.this, key.stmt);










 }










 };










 private CacheMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new CacheMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {










 @Override










 protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {










 return new ControlFlowJoinResolver<>(PerAccessPathMethodAnalyzer.this, key.stmt);



......


import heros.fieldsens.AccessPath.Delta;importheros.fieldsens.AccessPath.Delta;import heros.fieldsens.AccessPath.PrefixTestResult;importheros.fieldsens.AccessPath.PrefixTestResult;import heros.fieldsens.FlowFunction.ConstrainedFact;importheros.fieldsens.FlowFunction.ConstrainedFact;import heros.fieldsens.structs.FactAtStatement;importheros.fieldsens.structs.FactAtStatement;import heros.fieldsens.structs.WrappedFact;importheros.fieldsens.structs.WrappedFact;import heros.fieldsens.structs.WrappedFactAtStatement;importheros.fieldsens.structs.WrappedFactAtStatement;import heros.utilities.DefaultValueMap;importheros.utilities.DefaultValueMap;import java.io.FileWriter;importjava.io.FileWriter;import java.io.IOException;importjava.io.IOException; private List<WrappedFactAtStatement<Field, Fact, Stmt, Method>> summaries = Lists.newLinkedList();privateList<WrappedFactAtStatement<Field,Fact,Stmt,Method>>summaries=Lists.newLinkedList(); private Context<Field, Fact, Stmt, Method> context;privateContext<Field,Fact,Stmt,Method>context; private Method method;privateMethodmethod; private CacheMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new CacheMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {privateCacheMapCach<FactAtStatement<Fact,Stmt>,ReturnSiteResolver<Field,Fact,Stmt,Method>>returnSiteResolvers=newCacheMapCach<FactAtStatement<Fact,Stmt>,ReturnSiteResolver<Field,Fact,Stmt,Method>>(){ private DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field, Fact, Stmt, Method>> returnSiteResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ReturnSiteResolver<Field,Fact,Stmt,Method>>() {privateDefaultValueMapDefaultValu<FactAtStatement<Fact,Stmt>,ReturnSiteResolver<Field,Fact,Stmt,Method>>returnSiteResolvers=newDefaultValueMapDefaultValu<FactAtStatement<Fact,Stmt>,ReturnSiteResolver<Field,Fact,Stmt,Method>>(){ @Override@Override protected ReturnSiteResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {protectedReturnSiteResolver<Field,Fact,Stmt,Method>createItem(FactAtStatement<Fact,Stmt>key){ return new ReturnSiteResolver<>(PerAccessPathMethodAnalyzer.this, key.stmt);returnnewReturnSiteResolver<>(PerAccessPathMethodAnalyzer.this,key.stmt); }} };}; private CacheMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new CacheMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {privateCacheMapCach<FactAtStatement<Fact,Stmt>,ControlFlowJoinResolver<Field,Fact,Stmt,Method>>ctrFlowJoinResolvers=newCacheMapCach<FactAtStatement<Fact,Stmt>,ControlFlowJoinResolver<Field,Fact,Stmt,Method>>(){ private DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field, Fact, Stmt, Method>> ctrFlowJoinResolvers = new DefaultValueMap<FactAtStatement<Fact, Stmt>, ControlFlowJoinResolver<Field,Fact,Stmt,Method>>() {privateDefaultValueMapDefaultValu<FactAtStatement<Fact,Stmt>,ControlFlowJoinResolver<Field,Fact,Stmt,Method>>ctrFlowJoinResolvers=newDefaultValueMapDefaultValu<FactAtStatement<Fact,Stmt>,ControlFlowJoinResolver<Field,Fact,Stmt,Method>>(){ @Override@Override protected ControlFlowJoinResolver<Field, Fact, Stmt, Method> createItem(FactAtStatement<Fact, Stmt> key) {protectedControlFlowJoinResolver<Field,Fact,Stmt,Method>createItem(FactAtStatement<Fact,Stmt>key){ return new ControlFlowJoinResolver<>(PerAccessPathMethodAnalyzer.this, key.stmt);returnnewControlFlowJoinResolver<>(PerAccessPathMethodAnalyzer.this,key.stmt);








src/heros/fieldsens/ReturnConcretizationPathEdge.java

deleted


100644 → 0







View file @ d77de581













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import heros.solver.PathEdge;





















public abstract class ReturnConcretizationPathEdge<N,D> extends PathEdge<N, D> {
































 public ReturnConcretizationPathEdge(D dSource, N target, D dTarget) {










 super(dSource, target, dTarget);










 }





















 public void propagate() {










 _propagate(dSource, target, dTarget);










 }










 










 protected abstract void _propagate(D dSource, N target, D dTarget);










 










 @Override










 public PathEdge<N, D> copyWithTarget(D dTarget) {










 final ReturnConcretizationPathEdge<N, D> outer = this;










 return new ReturnConcretizationPathEdge<N, D>(dSource, target, dTarget) {





















 @Override










 protected void _propagate(D dSource, N target, D dTarget) {










 outer._propagate(dSource, target, dTarget);










 }










 };










 }










 










 @Override










 public String toString() {










 return "ReturnConcretizationPathEdge "+super.toString();










 }










}












src/heros/fieldsens/ReturnConcretizationPathEdge.java

deleted


100644 → 0







View file @ d77de581








src/heros/fieldsens/ReturnConcretizationPathEdge.java

deleted


100644 → 0









View file @ d77de581


d77de581










/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import heros.solver.PathEdge;





















public abstract class ReturnConcretizationPathEdge<N,D> extends PathEdge<N, D> {
































 public ReturnConcretizationPathEdge(D dSource, N target, D dTarget) {










 super(dSource, target, dTarget);










 }





















 public void propagate() {










 _propagate(dSource, target, dTarget);










 }










 










 protected abstract void _propagate(D dSource, N target, D dTarget);










 










 @Override










 public PathEdge<N, D> copyWithTarget(D dTarget) {










 final ReturnConcretizationPathEdge<N, D> outer = this;










 return new ReturnConcretizationPathEdge<N, D>(dSource, target, dTarget) {





















 @Override










 protected void _propagate(D dSource, N target, D dTarget) {










 outer._propagate(dSource, target, dTarget);










 }










 };










 }










 










 @Override










 public String toString() {










 return "ReturnConcretizationPathEdge "+super.toString();










 }










}













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;





















import heros.solver.PathEdge;





















public abstract class ReturnConcretizationPathEdge<N,D> extends PathEdge<N, D> {
































 public ReturnConcretizationPathEdge(D dSource, N target, D dTarget) {










 super(dSource, target, dTarget);










 }





















 public void propagate() {










 _propagate(dSource, target, dTarget);










 }










 










 protected abstract void _propagate(D dSource, N target, D dTarget);










 










 @Override










 public PathEdge<N, D> copyWithTarget(D dTarget) {










 final ReturnConcretizationPathEdge<N, D> outer = this;










 return new ReturnConcretizationPathEdge<N, D>(dSource, target, dTarget) {





















 @Override










 protected void _propagate(D dSource, N target, D dTarget) {










 outer._propagate(dSource, target, dTarget);










 }










 };










 }










 










 @Override










 public String toString() {










 return "ReturnConcretizationPathEdge "+super.toString();










 }










}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2015 Johannes Lerch. * Copyright (c) 2015 Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.fieldsens;packageheros.fieldsens;import heros.solver.PathEdge;importheros.solver.PathEdge;public abstract class ReturnConcretizationPathEdge<N,D> extends PathEdge<N, D> {publicabstractclassReturnConcretizationPathEdge<N,D>extendsPathEdge<N,D>{ public ReturnConcretizationPathEdge(D dSource, N target, D dTarget) {publicReturnConcretizationPathEdge(DdSource,Ntarget,DdTarget){ super(dSource, target, dTarget);super(dSource,target,dTarget); }} public void propagate() {publicvoidpropagate(){ _propagate(dSource, target, dTarget);_propagate(dSource,target,dTarget); }}  protected abstract void _propagate(D dSource, N target, D dTarget);protectedabstractvoid_propagate(DdSource,Ntarget,DdTarget);  @Override@Override public PathEdge<N, D> copyWithTarget(D dTarget) {publicPathEdge<N,D>copyWithTarget(DdTarget){ final ReturnConcretizationPathEdge<N, D> outer = this;finalReturnConcretizationPathEdge<N,D>outer=this; return new ReturnConcretizationPathEdge<N, D>(dSource, target, dTarget) {returnnewReturnConcretizationPathEdge<N,D>(dSource,target,dTarget){ @Override@Override protected void _propagate(D dSource, N target, D dTarget) {protectedvoid_propagate(DdSource,Ntarget,DdTarget){ outer._propagate(dSource, target, dTarget);outer._propagate(dSource,target,dTarget); }} };}; }}  @Override@Override public String toString() {publicStringtoString(){ return "ReturnConcretizationPathEdge "+super.toString();return"ReturnConcretizationPathEdge "+super.toString(); }}}}








src/heros/fieldsens/ReturnSiteResolver.java








View file @ 1bf300ef






......@@ -12,6 +12,10 @@ package heros.fieldsens;




















import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.ReturnEdge;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {














......












src/heros/fieldsens/ReturnSiteResolver.java








View file @ 1bf300ef








src/heros/fieldsens/ReturnSiteResolver.java










View file @ 1bf300ef


1bf300ef



......@@ -12,6 +12,10 @@ package heros.fieldsens;




















import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.ReturnEdge;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {














......






......@@ -12,6 +12,10 @@ package heros.fieldsens;




















import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;










import heros.fieldsens.structs.DeltaConstraint;










import heros.fieldsens.structs.ReturnEdge;










import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;





















public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {














......


import heros.fieldsens.AccessPath.Delta;importheros.fieldsens.AccessPath.Delta;import heros.fieldsens.AccessPath.PrefixTestResult;importheros.fieldsens.AccessPath.PrefixTestResult;import heros.fieldsens.structs.DeltaConstraint;importheros.fieldsens.structs.DeltaConstraint;import heros.fieldsens.structs.ReturnEdge;importheros.fieldsens.structs.ReturnEdge;import heros.fieldsens.structs.WrappedFact;importheros.fieldsens.structs.WrappedFact;import heros.fieldsens.structs.WrappedFactAtStatement;importheros.fieldsens.structs.WrappedFactAtStatement;public class ReturnSiteResolver<Field, Fact, Stmt, Method> extends ResolverTemplate<Field, Fact, Stmt, Method, ReturnEdge<Field, Fact, Stmt, Method>> {publicclassReturnSiteResolver<Field,Fact,Stmt,Method>extendsResolverTemplate<Field,Fact,Stmt,Method,ReturnEdge<Field,Fact,Stmt,Method>>{








src/heros/fieldsens/SourceStmtAnnotatedMethodAnalyzer.java








View file @ 1bf300ef






......@@ -10,13 +10,17 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;










import heros.utilities.DefaultValueMap;
































public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>










 implements MethodAnalyzer<Field, Fact, Stmt, Method> {





















 private Method method;










 private CacheMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new CacheMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 private DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Key<Fact, Stmt> key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context);



......












src/heros/fieldsens/SourceStmtAnnotatedMethodAnalyzer.java








View file @ 1bf300ef








src/heros/fieldsens/SourceStmtAnnotatedMethodAnalyzer.java










View file @ 1bf300ef


1bf300ef



......@@ -10,13 +10,17 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;










import heros.utilities.DefaultValueMap;
































public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>










 implements MethodAnalyzer<Field, Fact, Stmt, Method> {





















 private Method method;










 private CacheMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new CacheMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 private DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Key<Fact, Stmt> key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context);



......






......@@ -10,13 +10,17 @@









 ******************************************************************************/










package heros.fieldsens;





















import heros.fieldsens.structs.WrappedFact;










import heros.fieldsens.structs.WrappedFactAtStatement;










import heros.utilities.DefaultValueMap;
































public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>










 implements MethodAnalyzer<Field, Fact, Stmt, Method> {





















 private Method method;










 private CacheMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new CacheMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 private DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = 










 new DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {










 @Override










 protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Key<Fact, Stmt> key) {










 return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context);



......


 ******************************************************************************/ ******************************************************************************/package heros.fieldsens;packageheros.fieldsens;import heros.fieldsens.structs.WrappedFact;importheros.fieldsens.structs.WrappedFact;import heros.fieldsens.structs.WrappedFactAtStatement;importheros.fieldsens.structs.WrappedFactAtStatement;import heros.utilities.DefaultValueMap;importheros.utilities.DefaultValueMap;public class SourceStmtAnnotatedMethodAnalyzer<Field, Fact, Stmt, Method>publicclassSourceStmtAnnotatedMethodAnalyzer<Field,Fact,Stmt,Method> implements MethodAnalyzer<Field, Fact, Stmt, Method> {implementsMethodAnalyzer<Field,Fact,Stmt,Method>{ private Method method;privateMethodmethod; private CacheMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = privateCacheMapCach<Key<Fact,Stmt>,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>>perSourceAnalyzer= new CacheMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {newCacheMapCach<Key<Fact,Stmt>,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>>(){ private DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>> perSourceAnalyzer = privateDefaultValueMapDefaultValu<Key<Fact,Stmt>,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>>perSourceAnalyzer= new DefaultValueMap<Key<Fact, Stmt>, PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>>() {newDefaultValueMapDefaultValu<Key<Fact,Stmt>,PerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>>(){ @Override@Override protected PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method> createItem(Key<Fact, Stmt> key) {protectedPerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>createItem(Key<Fact,Stmt>key){ return new PerAccessPathMethodAnalyzer<Field, Fact, Stmt, Method>(method, key.fact, context);returnnewPerAccessPathMethodAnalyzer<Field,Fact,Stmt,Method>(method,key.fact,context);








src/heros/fieldsens/ZeroHandler.java








View file @ 1bf300ef






......@@ -10,6 +10,7 @@









 ******************************************************************************/










package heros.fieldsens;
































public interface ZeroHandler<Field> {





















 /**



......












src/heros/fieldsens/ZeroHandler.java








View file @ 1bf300ef








src/heros/fieldsens/ZeroHandler.java










View file @ 1bf300ef


1bf300ef



......@@ -10,6 +10,7 @@









 ******************************************************************************/










package heros.fieldsens;
































public interface ZeroHandler<Field> {





















 /**



......






......@@ -10,6 +10,7 @@









 ******************************************************************************/










package heros.fieldsens;
































public interface ZeroHandler<Field> {





















 /**



......


 ******************************************************************************/ ******************************************************************************/package heros.fieldsens;packageheros.fieldsens;public interface ZeroHandler<Field> {publicinterfaceZeroHandler<Field>{ /**/**








src/heros/fieldsens/DeltaConstraint.java

→

src/heros/fieldsens/structs/DeltaConstraint.java








View file @ 1bf300ef






......@@ -8,8 +8,10 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















import heros.fieldsens.AccessPath;










import heros.fieldsens.FlowFunction;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;














......












src/heros/fieldsens/DeltaConstraint.java

→

src/heros/fieldsens/structs/DeltaConstraint.java








View file @ 1bf300ef








src/heros/fieldsens/DeltaConstraint.java

→

src/heros/fieldsens/structs/DeltaConstraint.java





structs/




View file @ 1bf300ef


1bf300ef



......@@ -8,8 +8,10 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















import heros.fieldsens.AccessPath;










import heros.fieldsens.FlowFunction;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;














......






......@@ -8,8 +8,10 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















import heros.fieldsens.AccessPath;










import heros.fieldsens.FlowFunction;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;














......


 * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.fieldsens;packageheros.fieldsens;package heros.fieldsens.structs;packageheros.fieldsens.structs.structs;import heros.fieldsens.AccessPath;importheros.fieldsens.AccessPath;import heros.fieldsens.FlowFunction;importheros.fieldsens.FlowFunction;import heros.fieldsens.AccessPath.Delta;importheros.fieldsens.AccessPath.Delta;import heros.fieldsens.FlowFunction.Constraint;importheros.fieldsens.FlowFunction.Constraint;








src/heros/fieldsens/FactAtStatement.java

→

src/heros/fieldsens/structs/FactAtStatement.java








View file @ 1bf300ef






......@@ -8,7 +8,7 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















public class FactAtStatement<Fact, Stmt> {














......












src/heros/fieldsens/FactAtStatement.java

→

src/heros/fieldsens/structs/FactAtStatement.java








View file @ 1bf300ef








src/heros/fieldsens/FactAtStatement.java

→

src/heros/fieldsens/structs/FactAtStatement.java





structs/




View file @ 1bf300ef


1bf300ef



......@@ -8,7 +8,7 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















public class FactAtStatement<Fact, Stmt> {














......






......@@ -8,7 +8,7 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















public class FactAtStatement<Fact, Stmt> {














......


 * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.fieldsens;packageheros.fieldsens;package heros.fieldsens.structs;packageheros.fieldsens.structs.structs;public class FactAtStatement<Fact, Stmt> {publicclassFactAtStatement<Fact,Stmt>{








src/heros/fieldsens/ReturnEdge.java

→

src/heros/fieldsens/structs/ReturnEdge.java








View file @ 1bf300ef






......@@ -8,19 +8,21 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















import heros.fieldsens.AccessPath;










import heros.fieldsens.Resolver;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;





















class ReturnEdge<Field, Fact, Stmt, Method> {










public class ReturnEdge<Field, Fact, Stmt, Method> {





















 final Fact incFact;










 final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 final Delta<Field> callDelta;










 final AccessPath<Field> incAccessPath;










 final Resolver<Field, Fact, Stmt, Method> incResolver;










 final Delta<Field> usedAccessPathOfIncResolver;










 public final Fact incFact;










 public final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 public final Delta<Field> callDelta;










 public final AccessPath<Field> incAccessPath;










 public final Resolver<Field, Fact, Stmt, Method> incResolver;










 public final Delta<Field> usedAccessPathOfIncResolver;





















 public ReturnEdge(WrappedFact<Field, Fact, Stmt, Method> fact, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller,



......












src/heros/fieldsens/ReturnEdge.java

→

src/heros/fieldsens/structs/ReturnEdge.java








View file @ 1bf300ef








src/heros/fieldsens/ReturnEdge.java

→

src/heros/fieldsens/structs/ReturnEdge.java





structs/




View file @ 1bf300ef


1bf300ef



......@@ -8,19 +8,21 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















import heros.fieldsens.AccessPath;










import heros.fieldsens.Resolver;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;





















class ReturnEdge<Field, Fact, Stmt, Method> {










public class ReturnEdge<Field, Fact, Stmt, Method> {





















 final Fact incFact;










 final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 final Delta<Field> callDelta;










 final AccessPath<Field> incAccessPath;










 final Resolver<Field, Fact, Stmt, Method> incResolver;










 final Delta<Field> usedAccessPathOfIncResolver;










 public final Fact incFact;










 public final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 public final Delta<Field> callDelta;










 public final AccessPath<Field> incAccessPath;










 public final Resolver<Field, Fact, Stmt, Method> incResolver;










 public final Delta<Field> usedAccessPathOfIncResolver;





















 public ReturnEdge(WrappedFact<Field, Fact, Stmt, Method> fact, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller,



......






......@@ -8,19 +8,21 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















import heros.fieldsens.AccessPath;










import heros.fieldsens.Resolver;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.AccessPath.PrefixTestResult;





















class ReturnEdge<Field, Fact, Stmt, Method> {










public class ReturnEdge<Field, Fact, Stmt, Method> {





















 final Fact incFact;










 final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 final Delta<Field> callDelta;










 final AccessPath<Field> incAccessPath;










 final Resolver<Field, Fact, Stmt, Method> incResolver;










 final Delta<Field> usedAccessPathOfIncResolver;










 public final Fact incFact;










 public final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;










 public final Delta<Field> callDelta;










 public final AccessPath<Field> incAccessPath;










 public final Resolver<Field, Fact, Stmt, Method> incResolver;










 public final Delta<Field> usedAccessPathOfIncResolver;





















 public ReturnEdge(WrappedFact<Field, Fact, Stmt, Method> fact, 










 Resolver<Field, Fact, Stmt, Method> resolverAtCaller,



......


 * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.fieldsens;packageheros.fieldsens;package heros.fieldsens.structs;packageheros.fieldsens.structs.structs;import heros.fieldsens.AccessPath;importheros.fieldsens.AccessPath;import heros.fieldsens.Resolver;importheros.fieldsens.Resolver;import heros.fieldsens.AccessPath.Delta;importheros.fieldsens.AccessPath.Delta;import heros.fieldsens.AccessPath.PrefixTestResult;importheros.fieldsens.AccessPath.PrefixTestResult;class ReturnEdge<Field, Fact, Stmt, Method> {classReturnEdge<Field,Fact,Stmt,Method>{public class ReturnEdge<Field, Fact, Stmt, Method> {publicpublic classReturnEdge<Field,Fact,Stmt,Method>{ final Fact incFact;finalFactincFact; final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;finalResolver<Field,Fact,Stmt,Method>resolverAtCaller; final Delta<Field> callDelta;finalDelta<Field>callDelta; final AccessPath<Field> incAccessPath;finalAccessPath<Field>incAccessPath; final Resolver<Field, Fact, Stmt, Method> incResolver;finalResolver<Field,Fact,Stmt,Method>incResolver; final Delta<Field> usedAccessPathOfIncResolver;finalDelta<Field>usedAccessPathOfIncResolver; public final Fact incFact;publicpublic finalFactincFact; public final Resolver<Field, Fact, Stmt, Method> resolverAtCaller;publicpublic finalResolver<Field,Fact,Stmt,Method>resolverAtCaller; public final Delta<Field> callDelta;publicpublic finalDelta<Field>callDelta; public final AccessPath<Field> incAccessPath;publicpublic finalAccessPath<Field>incAccessPath; public final Resolver<Field, Fact, Stmt, Method> incResolver;publicpublic finalResolver<Field,Fact,Stmt,Method>incResolver; public final Delta<Field> usedAccessPathOfIncResolver;publicpublic finalDelta<Field>usedAccessPathOfIncResolver; public ReturnEdge(WrappedFact<Field, Fact, Stmt, Method> fact, publicReturnEdge(WrappedFact<Field,Fact,Stmt,Method>fact, Resolver<Field, Fact, Stmt, Method> resolverAtCaller,Resolver<Field,Fact,Stmt,Method>resolverAtCaller,








src/heros/fieldsens/WrappedFact.java

→

src/heros/fieldsens/structs/WrappedFact.java








View file @ 1bf300ef






......@@ -8,8 +8,12 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















import heros.fieldsens.AccessPath;










import heros.fieldsens.FlowFunction;










import heros.fieldsens.Resolver;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;





















public class WrappedFact<Field, Fact, Stmt, Method>{



......@@ -18,7 +22,7 @@ public class WrappedFact<Field, Fact, Stmt, Method>{









 private final AccessPath<Field> accessPath;










 private final Resolver<Field, Fact, Stmt, Method> resolver;










 










 WrappedFact(Fact fact, AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 public WrappedFact(Fact fact, AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 assert fact != null;










 assert accessPath != null;










 assert resolver != null;



......












src/heros/fieldsens/WrappedFact.java

→

src/heros/fieldsens/structs/WrappedFact.java








View file @ 1bf300ef








src/heros/fieldsens/WrappedFact.java

→

src/heros/fieldsens/structs/WrappedFact.java





structs/




View file @ 1bf300ef


1bf300ef



......@@ -8,8 +8,12 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















import heros.fieldsens.AccessPath;










import heros.fieldsens.FlowFunction;










import heros.fieldsens.Resolver;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;





















public class WrappedFact<Field, Fact, Stmt, Method>{



......@@ -18,7 +22,7 @@ public class WrappedFact<Field, Fact, Stmt, Method>{









 private final AccessPath<Field> accessPath;










 private final Resolver<Field, Fact, Stmt, Method> resolver;










 










 WrappedFact(Fact fact, AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 public WrappedFact(Fact fact, AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 assert fact != null;










 assert accessPath != null;










 assert resolver != null;



......






......@@ -8,8 +8,12 @@









 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.fieldsens;










package heros.fieldsens.structs;





















import heros.fieldsens.AccessPath;










import heros.fieldsens.FlowFunction;










import heros.fieldsens.Resolver;










import heros.fieldsens.AccessPath.Delta;










import heros.fieldsens.FlowFunction.Constraint;





















public class WrappedFact<Field, Fact, Stmt, Method>{



......@@ -18,7 +22,7 @@ public class WrappedFact<Field, Fact, Stmt, Method>{









 private final AccessPath<Field> accessPath;










 private final Resolver<Field, Fact, Stmt, Method> resolver;










 










 WrappedFact(Fact fact, AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 public WrappedFact(Fact fact, AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {










 assert fact != null;










 assert accessPath != null;










 assert resolver != null;



......


 * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.fieldsens;packageheros.fieldsens;package heros.fieldsens.structs;packageheros.fieldsens.structs.structs;import heros.fieldsens.AccessPath;importheros.fieldsens.AccessPath;import heros.fieldsens.FlowFunction;importheros.fieldsens.FlowFunction;import heros.fieldsens.Resolver;importheros.fieldsens.Resolver;import heros.fieldsens.AccessPath.Delta;importheros.fieldsens.AccessPath.Delta;import heros.fieldsens.FlowFunction.Constraint;importheros.fieldsens.FlowFunction.Constraint;public class WrappedFact<Field, Fact, Stmt, Method>{publicclassWrappedFact<Field,Fact,Stmt,Method>{ private final AccessPath<Field> accessPath;privatefinalAccessPath<Field>accessPath; private final Resolver<Field, Fact, Stmt, Method> resolver;privatefinalResolver<Field,Fact,Stmt,Method>resolver;  WrappedFact(Fact fact, AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {WrappedFact(Factfact,AccessPath<Field>accessPath,Resolver<Field,Fact,Stmt,Method>resolver){ public WrappedFact(Fact fact, AccessPath<Field> accessPath, Resolver<Field, Fact, Stmt, Method> resolver) {publicpublic WrappedFact(Factfact,AccessPath<Field>accessPath,Resolver<Field,Fact,Stmt,Method>resolver){ assert fact != null;assertfact!=null; assert accessPath != null;assertaccessPath!=null; assert resolver != null;assertresolver!=null;



Prev


1


2


Next





Prev

1

2

Next











Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






