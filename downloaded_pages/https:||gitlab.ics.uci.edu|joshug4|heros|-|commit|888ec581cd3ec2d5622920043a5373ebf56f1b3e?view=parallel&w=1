



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab






Sign in




Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab






Sign in




Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab






Sign in




Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

888ec581















Commit
888ec581


authored
Jul 17, 2013
by


Steven Arzt



Browse files




Merge branch 'develop' of github.com:Sable/heros into develop







parents
94dc7f59
bdc8348c













Changes
3




Show whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ 888ec581








...@@ -58,7 +58,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -58,7 +58,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 }





 }







 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);





 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);







 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);





 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);







 this.sharedExecutor = new CountingThreadPoolExecutor(1, forwardProblem.numThreads(), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());





 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());







 }





 }







 





 







 public void solve() { 





 public void solve() { 



......















src/heros/solver/CountingThreadPoolExecutor.java








View file @ 888ec581








...@@ -22,6 +22,8 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -22,6 +22,8 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {






 





 







 protected final CountLatch numRunningTasks = new CountLatch(0);





 protected final CountLatch numRunningTasks = new CountLatch(0);







 





 









 protected Throwable exception = null;

















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,





 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,







 BlockingQueue<Runnable> workQueue) {





 BlockingQueue<Runnable> workQueue) {







 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);





 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);



...@@ -36,6 +38,10 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -36,6 +38,10 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {






 @Override





 @Override







 protected void afterExecute(Runnable r, Throwable t) {





 protected void afterExecute(Runnable r, Throwable t) {







 numRunningTasks.decrement();





 numRunningTasks.decrement();









 if(t!=null) {









 exception = t;









 shutdownNow();









 }







 super.afterExecute(r, t);





 super.afterExecute(r, t);







 }





 }

















...@@ -53,4 +59,11 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -53,4 +59,11 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {






 numRunningTasks.awaitZero(timeout, unit);





 numRunningTasks.awaitZero(timeout, unit);







 }





 }







 





 









 /**









	 * Returns the exception thrown during task execution (if any).









	 */









 public Throwable getException() {









 return exception;









 }

















}




}





\ No newline at end of file















src/heros/solver/IDESolver.java








View file @ 888ec581








...@@ -216,12 +216,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -216,12 +216,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 protected void awaitCompletionComputeValuesAndShutdown() {





 protected void awaitCompletionComputeValuesAndShutdown() {







 {





 {







 final long before = System.currentTimeMillis();





 final long before = System.currentTimeMillis();







 //await termination of tasks





 //run executor and await termination of tasks







 try {





 runExecutorAndAwaitCompletion();







 executor.awaitCompletion();









 } catch (InterruptedException e) {









 e.printStackTrace();









 }









 durationFlowFunctionConstruction = System.currentTimeMillis() - before;





 durationFlowFunctionConstruction = System.currentTimeMillis() - before;







 }





 }







 if(computeValues) {





 if(computeValues) {



...@@ -238,10 +234,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -238,10 +234,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 executor.shutdown();





 executor.shutdown();







 //similarly here: we await termination, but this should happen instantaneously,





 //similarly here: we await termination, but this should happen instantaneously,







 //as all tasks should have completed





 //as all tasks should have completed









 runExecutorAndAwaitCompletion();









 }



















 /**









	 * Runs execution, re-throwing exceptions that might be thrown during its execution.









	 */









 private void runExecutorAndAwaitCompletion() {







 try {





 try {







 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);





 executor.awaitCompletion();







 } catch (InterruptedException e) {





 } catch (InterruptedException e) {







 throw new RuntimeException(e);





 e.printStackTrace();









 }









 Throwable exception = executor.getException();









 if(exception!=null) {









 throw new RuntimeException("There were exceptions during IDE analysis. Exiting.",exception);







 }





 }







 }





 }

















......

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment











H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

888ec581















Commit
888ec581


authored
Jul 17, 2013
by


Steven Arzt



Browse files




Merge branch 'develop' of github.com:Sable/heros into develop







parents
94dc7f59
bdc8348c













Changes
3




Show whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ 888ec581








...@@ -58,7 +58,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -58,7 +58,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 }





 }







 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);





 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);







 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);





 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);







 this.sharedExecutor = new CountingThreadPoolExecutor(1, forwardProblem.numThreads(), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());





 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());







 }





 }







 





 







 public void solve() { 





 public void solve() { 



......















src/heros/solver/CountingThreadPoolExecutor.java








View file @ 888ec581








...@@ -22,6 +22,8 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -22,6 +22,8 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {






 





 







 protected final CountLatch numRunningTasks = new CountLatch(0);





 protected final CountLatch numRunningTasks = new CountLatch(0);







 





 









 protected Throwable exception = null;

















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,





 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,







 BlockingQueue<Runnable> workQueue) {





 BlockingQueue<Runnable> workQueue) {







 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);





 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);



...@@ -36,6 +38,10 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -36,6 +38,10 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {






 @Override





 @Override







 protected void afterExecute(Runnable r, Throwable t) {





 protected void afterExecute(Runnable r, Throwable t) {







 numRunningTasks.decrement();





 numRunningTasks.decrement();









 if(t!=null) {









 exception = t;









 shutdownNow();









 }







 super.afterExecute(r, t);





 super.afterExecute(r, t);







 }





 }

















...@@ -53,4 +59,11 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -53,4 +59,11 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {






 numRunningTasks.awaitZero(timeout, unit);





 numRunningTasks.awaitZero(timeout, unit);







 }





 }







 





 









 /**









	 * Returns the exception thrown during task execution (if any).









	 */









 public Throwable getException() {









 return exception;









 }

















}




}





\ No newline at end of file















src/heros/solver/IDESolver.java








View file @ 888ec581








...@@ -216,12 +216,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -216,12 +216,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 protected void awaitCompletionComputeValuesAndShutdown() {





 protected void awaitCompletionComputeValuesAndShutdown() {







 {





 {







 final long before = System.currentTimeMillis();





 final long before = System.currentTimeMillis();







 //await termination of tasks





 //run executor and await termination of tasks







 try {





 runExecutorAndAwaitCompletion();







 executor.awaitCompletion();









 } catch (InterruptedException e) {









 e.printStackTrace();









 }









 durationFlowFunctionConstruction = System.currentTimeMillis() - before;





 durationFlowFunctionConstruction = System.currentTimeMillis() - before;







 }





 }







 if(computeValues) {





 if(computeValues) {



...@@ -238,10 +234,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -238,10 +234,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 executor.shutdown();





 executor.shutdown();







 //similarly here: we await termination, but this should happen instantaneously,





 //similarly here: we await termination, but this should happen instantaneously,







 //as all tasks should have completed





 //as all tasks should have completed









 runExecutorAndAwaitCompletion();









 }



















 /**









	 * Runs execution, re-throwing exceptions that might be thrown during its execution.









	 */









 private void runExecutorAndAwaitCompletion() {







 try {





 try {







 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);





 executor.awaitCompletion();







 } catch (InterruptedException e) {





 } catch (InterruptedException e) {







 throw new RuntimeException(e);





 e.printStackTrace();









 }









 Throwable exception = executor.getException();









 if(exception!=null) {









 throw new RuntimeException("There were exceptions during IDE analysis. Exiting.",exception);







 }





 }







 }





 }

















......

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Open sidebar



Joshua Garcia heros
Commits

888ec581







Open sidebar



Joshua Garcia heros
Commits

888ec581




Open sidebar

Joshua Garcia heros
Commits

888ec581


Joshua GarciaherosherosCommits
888ec581








Commit
888ec581


authored
Jul 17, 2013
by


Steven Arzt



Browse files




Merge branch 'develop' of github.com:Sable/heros into develop







parents
94dc7f59
bdc8348c













Changes
3




Show whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ 888ec581








...@@ -58,7 +58,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -58,7 +58,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 }





 }







 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);





 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);







 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);





 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);







 this.sharedExecutor = new CountingThreadPoolExecutor(1, forwardProblem.numThreads(), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());





 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());







 }





 }







 





 







 public void solve() { 





 public void solve() { 



......















src/heros/solver/CountingThreadPoolExecutor.java








View file @ 888ec581








...@@ -22,6 +22,8 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -22,6 +22,8 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {






 





 







 protected final CountLatch numRunningTasks = new CountLatch(0);





 protected final CountLatch numRunningTasks = new CountLatch(0);







 





 









 protected Throwable exception = null;

















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,





 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,







 BlockingQueue<Runnable> workQueue) {





 BlockingQueue<Runnable> workQueue) {







 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);





 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);



...@@ -36,6 +38,10 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -36,6 +38,10 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {






 @Override





 @Override







 protected void afterExecute(Runnable r, Throwable t) {





 protected void afterExecute(Runnable r, Throwable t) {







 numRunningTasks.decrement();





 numRunningTasks.decrement();









 if(t!=null) {









 exception = t;









 shutdownNow();









 }







 super.afterExecute(r, t);





 super.afterExecute(r, t);







 }





 }

















...@@ -53,4 +59,11 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -53,4 +59,11 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {






 numRunningTasks.awaitZero(timeout, unit);





 numRunningTasks.awaitZero(timeout, unit);







 }





 }







 





 









 /**









	 * Returns the exception thrown during task execution (if any).









	 */









 public Throwable getException() {









 return exception;









 }

















}




}





\ No newline at end of file















src/heros/solver/IDESolver.java








View file @ 888ec581








...@@ -216,12 +216,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -216,12 +216,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 protected void awaitCompletionComputeValuesAndShutdown() {





 protected void awaitCompletionComputeValuesAndShutdown() {







 {





 {







 final long before = System.currentTimeMillis();





 final long before = System.currentTimeMillis();







 //await termination of tasks





 //run executor and await termination of tasks







 try {





 runExecutorAndAwaitCompletion();







 executor.awaitCompletion();









 } catch (InterruptedException e) {









 e.printStackTrace();









 }









 durationFlowFunctionConstruction = System.currentTimeMillis() - before;





 durationFlowFunctionConstruction = System.currentTimeMillis() - before;







 }





 }







 if(computeValues) {





 if(computeValues) {



...@@ -238,10 +234,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -238,10 +234,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 executor.shutdown();





 executor.shutdown();







 //similarly here: we await termination, but this should happen instantaneously,





 //similarly here: we await termination, but this should happen instantaneously,







 //as all tasks should have completed





 //as all tasks should have completed









 runExecutorAndAwaitCompletion();









 }



















 /**









	 * Runs execution, re-throwing exceptions that might be thrown during its execution.









	 */









 private void runExecutorAndAwaitCompletion() {







 try {





 try {







 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);





 executor.awaitCompletion();







 } catch (InterruptedException e) {





 } catch (InterruptedException e) {







 throw new RuntimeException(e);





 e.printStackTrace();









 }









 Throwable exception = executor.getException();









 if(exception!=null) {









 throw new RuntimeException("There were exceptions during IDE analysis. Exiting.",exception);







 }





 }







 }





 }

















......

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment











Commit
888ec581


authored
Jul 17, 2013
by


Steven Arzt



Browse files




Merge branch 'develop' of github.com:Sable/heros into develop







parents
94dc7f59
bdc8348c













Changes
3




Show whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ 888ec581








...@@ -58,7 +58,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -58,7 +58,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 }





 }







 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);





 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);







 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);





 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);







 this.sharedExecutor = new CountingThreadPoolExecutor(1, forwardProblem.numThreads(), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());





 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());







 }





 }







 





 







 public void solve() { 





 public void solve() { 



......















src/heros/solver/CountingThreadPoolExecutor.java








View file @ 888ec581








...@@ -22,6 +22,8 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -22,6 +22,8 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {






 





 







 protected final CountLatch numRunningTasks = new CountLatch(0);





 protected final CountLatch numRunningTasks = new CountLatch(0);







 





 









 protected Throwable exception = null;

















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,





 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,







 BlockingQueue<Runnable> workQueue) {





 BlockingQueue<Runnable> workQueue) {







 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);





 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);



...@@ -36,6 +38,10 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -36,6 +38,10 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {






 @Override





 @Override







 protected void afterExecute(Runnable r, Throwable t) {





 protected void afterExecute(Runnable r, Throwable t) {







 numRunningTasks.decrement();





 numRunningTasks.decrement();









 if(t!=null) {









 exception = t;









 shutdownNow();









 }







 super.afterExecute(r, t);





 super.afterExecute(r, t);







 }





 }

















...@@ -53,4 +59,11 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -53,4 +59,11 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {






 numRunningTasks.awaitZero(timeout, unit);





 numRunningTasks.awaitZero(timeout, unit);







 }





 }







 





 









 /**









	 * Returns the exception thrown during task execution (if any).









	 */









 public Throwable getException() {









 return exception;









 }

















}




}





\ No newline at end of file















src/heros/solver/IDESolver.java








View file @ 888ec581








...@@ -216,12 +216,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -216,12 +216,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 protected void awaitCompletionComputeValuesAndShutdown() {





 protected void awaitCompletionComputeValuesAndShutdown() {







 {





 {







 final long before = System.currentTimeMillis();





 final long before = System.currentTimeMillis();







 //await termination of tasks





 //run executor and await termination of tasks







 try {





 runExecutorAndAwaitCompletion();







 executor.awaitCompletion();









 } catch (InterruptedException e) {









 e.printStackTrace();









 }









 durationFlowFunctionConstruction = System.currentTimeMillis() - before;





 durationFlowFunctionConstruction = System.currentTimeMillis() - before;







 }





 }







 if(computeValues) {





 if(computeValues) {



...@@ -238,10 +234,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -238,10 +234,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 executor.shutdown();





 executor.shutdown();







 //similarly here: we await termination, but this should happen instantaneously,





 //similarly here: we await termination, but this should happen instantaneously,







 //as all tasks should have completed





 //as all tasks should have completed









 runExecutorAndAwaitCompletion();









 }



















 /**









	 * Runs execution, re-throwing exceptions that might be thrown during its execution.









	 */









 private void runExecutorAndAwaitCompletion() {







 try {





 try {







 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);





 executor.awaitCompletion();







 } catch (InterruptedException e) {





 } catch (InterruptedException e) {







 throw new RuntimeException(e);





 e.printStackTrace();









 }









 Throwable exception = executor.getException();









 if(exception!=null) {









 throw new RuntimeException("There were exceptions during IDE analysis. Exiting.",exception);







 }





 }







 }





 }

















......

















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment







Commit
888ec581


authored
Jul 17, 2013
by


Steven Arzt



Browse files



Commit
888ec581


authored
Jul 17, 2013
by


Steven Arzt

888ec581authoredbySteven Arzt

Merge branch 'develop' of github.com:Sable/heros into develop






parents
94dc7f59
bdc8348c
















parents
94dc7f59
bdc8348c





parents












Changes
3
3


Show whitespace changes

Inline
Side-by-side






Show whitespace changes

Inline
Side-by-side




Show whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/solver/BiDiIFDSSolver.java








View file @ 888ec581








...@@ -58,7 +58,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -58,7 +58,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 }





 }







 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);





 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);







 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);





 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);







 this.sharedExecutor = new CountingThreadPoolExecutor(1, forwardProblem.numThreads(), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());





 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());







 }





 }







 





 







 public void solve() { 





 public void solve() { 



......















src/heros/solver/CountingThreadPoolExecutor.java








View file @ 888ec581








...@@ -22,6 +22,8 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -22,6 +22,8 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {






 





 







 protected final CountLatch numRunningTasks = new CountLatch(0);





 protected final CountLatch numRunningTasks = new CountLatch(0);







 





 









 protected Throwable exception = null;

















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,





 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,







 BlockingQueue<Runnable> workQueue) {





 BlockingQueue<Runnable> workQueue) {







 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);





 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);



...@@ -36,6 +38,10 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -36,6 +38,10 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {






 @Override





 @Override







 protected void afterExecute(Runnable r, Throwable t) {





 protected void afterExecute(Runnable r, Throwable t) {







 numRunningTasks.decrement();





 numRunningTasks.decrement();









 if(t!=null) {









 exception = t;









 shutdownNow();









 }







 super.afterExecute(r, t);





 super.afterExecute(r, t);







 }





 }

















...@@ -53,4 +59,11 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -53,4 +59,11 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {






 numRunningTasks.awaitZero(timeout, unit);





 numRunningTasks.awaitZero(timeout, unit);







 }





 }







 





 









 /**









	 * Returns the exception thrown during task execution (if any).









	 */









 public Throwable getException() {









 return exception;









 }

















}




}





\ No newline at end of file















src/heros/solver/IDESolver.java








View file @ 888ec581








...@@ -216,12 +216,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -216,12 +216,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 protected void awaitCompletionComputeValuesAndShutdown() {





 protected void awaitCompletionComputeValuesAndShutdown() {







 {





 {







 final long before = System.currentTimeMillis();





 final long before = System.currentTimeMillis();







 //await termination of tasks





 //run executor and await termination of tasks







 try {





 runExecutorAndAwaitCompletion();







 executor.awaitCompletion();









 } catch (InterruptedException e) {









 e.printStackTrace();









 }









 durationFlowFunctionConstruction = System.currentTimeMillis() - before;





 durationFlowFunctionConstruction = System.currentTimeMillis() - before;







 }





 }







 if(computeValues) {





 if(computeValues) {



...@@ -238,10 +234,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -238,10 +234,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 executor.shutdown();





 executor.shutdown();







 //similarly here: we await termination, but this should happen instantaneously,





 //similarly here: we await termination, but this should happen instantaneously,







 //as all tasks should have completed





 //as all tasks should have completed









 runExecutorAndAwaitCompletion();









 }



















 /**









	 * Runs execution, re-throwing exceptions that might be thrown during its execution.









	 */









 private void runExecutorAndAwaitCompletion() {







 try {





 try {







 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);





 executor.awaitCompletion();







 } catch (InterruptedException e) {





 } catch (InterruptedException e) {







 throw new RuntimeException(e);





 e.printStackTrace();









 }









 Throwable exception = executor.getException();









 if(exception!=null) {









 throw new RuntimeException("There were exceptions during IDE analysis. Exiting.",exception);







 }





 }







 }





 }

















......















src/heros/solver/BiDiIFDSSolver.java








View file @ 888ec581








...@@ -58,7 +58,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -58,7 +58,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 }





 }







 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);





 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);







 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);





 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);







 this.sharedExecutor = new CountingThreadPoolExecutor(1, forwardProblem.numThreads(), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());





 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());







 }





 }







 





 







 public void solve() { 





 public void solve() { 



......













src/heros/solver/BiDiIFDSSolver.java








View file @ 888ec581








src/heros/solver/BiDiIFDSSolver.java










View file @ 888ec581


888ec581





...@@ -58,7 +58,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -58,7 +58,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 }





 }







 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);





 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);







 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);





 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);







 this.sharedExecutor = new CountingThreadPoolExecutor(1, forwardProblem.numThreads(), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());





 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());







 }





 }







 





 







 public void solve() { 





 public void solve() { 



......









...@@ -58,7 +58,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -58,7 +58,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 }





 }







 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);





 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);







 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);





 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);







 this.sharedExecutor = new CountingThreadPoolExecutor(1, forwardProblem.numThreads(), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());





 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());







 }





 }







 





 







 public void solve() { 





 public void solve() { 



......






...@@ -58,7 +58,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {
...@@ -58,7 +58,7 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {






 }





 }







 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);





 this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);







 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);





 this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);







 this.sharedExecutor = new CountingThreadPoolExecutor(1, forwardProblem.numThreads(), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());





 this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());







 }





 }







 





 







 public void solve() { 





 public void solve() { 



......


 }} }} this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);this.forwardProblem=newAugmentedTabulationProblem<N,D,M,I>(forwardProblem); this.forwardProblem = new AugmentedTabulationProblem<N,D,M,I>(forwardProblem);this.forwardProblem=newAugmentedTabulationProblem<N,D,M,I>(forwardProblem); this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);this.backwardProblem=newAugmentedTabulationProblem<N,D,M,I>(backwardProblem); this.backwardProblem = new AugmentedTabulationProblem<N,D,M,I>(backwardProblem);this.backwardProblem=newAugmentedTabulationProblem<N,D,M,I>(backwardProblem); this.sharedExecutor = new CountingThreadPoolExecutor(1, forwardProblem.numThreads(), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());this.sharedExecutor=newCountingThreadPoolExecutor(1,forwardProblem.numThreads(),30,TimeUnit.SECONDS,newLinkedBlockingQueue<Runnable>()); this.sharedExecutor = new CountingThreadPoolExecutor(1, Math.max(1,forwardProblem.numThreads()), 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());this.sharedExecutor=newCountingThreadPoolExecutor(1,MathMath..maxmax((11,,forwardProblem.numThreads()),)30,TimeUnit.SECONDS,newLinkedBlockingQueue<Runnable>()); }} }}   public void solve() { publicvoidsolve(){ public void solve() { publicvoidsolve(){








src/heros/solver/CountingThreadPoolExecutor.java








View file @ 888ec581








...@@ -22,6 +22,8 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -22,6 +22,8 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {






 





 







 protected final CountLatch numRunningTasks = new CountLatch(0);





 protected final CountLatch numRunningTasks = new CountLatch(0);







 





 









 protected Throwable exception = null;

















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,





 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,







 BlockingQueue<Runnable> workQueue) {





 BlockingQueue<Runnable> workQueue) {







 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);





 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);



...@@ -36,6 +38,10 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -36,6 +38,10 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {






 @Override





 @Override







 protected void afterExecute(Runnable r, Throwable t) {





 protected void afterExecute(Runnable r, Throwable t) {







 numRunningTasks.decrement();





 numRunningTasks.decrement();









 if(t!=null) {









 exception = t;









 shutdownNow();









 }







 super.afterExecute(r, t);





 super.afterExecute(r, t);







 }





 }

















...@@ -53,4 +59,11 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -53,4 +59,11 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {






 numRunningTasks.awaitZero(timeout, unit);





 numRunningTasks.awaitZero(timeout, unit);







 }





 }







 





 









 /**









	 * Returns the exception thrown during task execution (if any).









	 */









 public Throwable getException() {









 return exception;









 }

















}




}





\ No newline at end of file













src/heros/solver/CountingThreadPoolExecutor.java








View file @ 888ec581








src/heros/solver/CountingThreadPoolExecutor.java










View file @ 888ec581


888ec581





...@@ -22,6 +22,8 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -22,6 +22,8 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {






 





 







 protected final CountLatch numRunningTasks = new CountLatch(0);





 protected final CountLatch numRunningTasks = new CountLatch(0);







 





 









 protected Throwable exception = null;

















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,





 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,







 BlockingQueue<Runnable> workQueue) {





 BlockingQueue<Runnable> workQueue) {







 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);





 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);



...@@ -36,6 +38,10 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -36,6 +38,10 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {






 @Override





 @Override







 protected void afterExecute(Runnable r, Throwable t) {





 protected void afterExecute(Runnable r, Throwable t) {







 numRunningTasks.decrement();





 numRunningTasks.decrement();









 if(t!=null) {









 exception = t;









 shutdownNow();









 }







 super.afterExecute(r, t);





 super.afterExecute(r, t);







 }





 }

















...@@ -53,4 +59,11 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -53,4 +59,11 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {






 numRunningTasks.awaitZero(timeout, unit);





 numRunningTasks.awaitZero(timeout, unit);







 }





 }







 





 









 /**









	 * Returns the exception thrown during task execution (if any).









	 */









 public Throwable getException() {









 return exception;









 }

















}




}





\ No newline at end of file









...@@ -22,6 +22,8 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -22,6 +22,8 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {






 





 







 protected final CountLatch numRunningTasks = new CountLatch(0);





 protected final CountLatch numRunningTasks = new CountLatch(0);







 





 









 protected Throwable exception = null;

















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,





 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,







 BlockingQueue<Runnable> workQueue) {





 BlockingQueue<Runnable> workQueue) {







 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);





 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);



...@@ -36,6 +38,10 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -36,6 +38,10 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {






 @Override





 @Override







 protected void afterExecute(Runnable r, Throwable t) {





 protected void afterExecute(Runnable r, Throwable t) {







 numRunningTasks.decrement();





 numRunningTasks.decrement();









 if(t!=null) {









 exception = t;









 shutdownNow();









 }







 super.afterExecute(r, t);





 super.afterExecute(r, t);







 }





 }

















...@@ -53,4 +59,11 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -53,4 +59,11 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {






 numRunningTasks.awaitZero(timeout, unit);





 numRunningTasks.awaitZero(timeout, unit);







 }





 }







 





 









 /**









	 * Returns the exception thrown during task execution (if any).









	 */









 public Throwable getException() {









 return exception;









 }

















}




}





\ No newline at end of file






...@@ -22,6 +22,8 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -22,6 +22,8 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {






 





 







 protected final CountLatch numRunningTasks = new CountLatch(0);





 protected final CountLatch numRunningTasks = new CountLatch(0);







 





 









 protected Throwable exception = null;

















 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,





 public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,







 BlockingQueue<Runnable> workQueue) {





 BlockingQueue<Runnable> workQueue) {







 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);





 super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);



...@@ -36,6 +38,10 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -36,6 +38,10 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {






 @Override





 @Override







 protected void afterExecute(Runnable r, Throwable t) {





 protected void afterExecute(Runnable r, Throwable t) {







 numRunningTasks.decrement();





 numRunningTasks.decrement();









 if(t!=null) {









 exception = t;









 shutdownNow();









 }







 super.afterExecute(r, t);





 super.afterExecute(r, t);







 }





 }

















...@@ -53,4 +59,11 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {
...@@ -53,4 +59,11 @@ public class CountingThreadPoolExecutor extends ThreadPoolExecutor {






 numRunningTasks.awaitZero(timeout, unit);





 numRunningTasks.awaitZero(timeout, unit);







 }





 }







 





 









 /**









	 * Returns the exception thrown during task execution (if any).









	 */









 public Throwable getException() {









 return exception;









 }

















}




}





\ No newline at end of file


   protected final CountLatch numRunningTasks = new CountLatch(0);protectedfinalCountLatchnumRunningTasks=newCountLatch(0); protected final CountLatch numRunningTasks = new CountLatch(0);protectedfinalCountLatchnumRunningTasks=newCountLatch(0);   protected Throwable exception = null;protectedThrowableexception=null; public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,publicCountingThreadPoolExecutor(intcorePoolSize,intmaximumPoolSize,longkeepAliveTime,TimeUnitunit, public CountingThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,publicCountingThreadPoolExecutor(intcorePoolSize,intmaximumPoolSize,longkeepAliveTime,TimeUnitunit, BlockingQueue<Runnable> workQueue) {BlockingQueue<Runnable>workQueue){ BlockingQueue<Runnable> workQueue) {BlockingQueue<Runnable>workQueue){ super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);super(corePoolSize,maximumPoolSize,keepAliveTime,unit,workQueue); super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);super(corePoolSize,maximumPoolSize,keepAliveTime,unit,workQueue); @Override@Override @Override@Override protected void afterExecute(Runnable r, Throwable t) {protectedvoidafterExecute(Runnabler,Throwablet){ protected void afterExecute(Runnable r, Throwable t) {protectedvoidafterExecute(Runnabler,Throwablet){ numRunningTasks.decrement();numRunningTasks.decrement(); numRunningTasks.decrement();numRunningTasks.decrement(); if(t!=null) {if(t!=null){ exception = t;exception=t; shutdownNow();shutdownNow(); }} super.afterExecute(r, t);super.afterExecute(r,t); super.afterExecute(r, t);super.afterExecute(r,t); }} }} numRunningTasks.awaitZero(timeout, unit);numRunningTasks.awaitZero(timeout,unit); numRunningTasks.awaitZero(timeout, unit);numRunningTasks.awaitZero(timeout,unit); }} }}   /**/**	 * Returns the exception thrown during task execution (if any).	 * Returns the exception thrown during task execution (if any).	 */	 */ public Throwable getException() {publicThrowablegetException(){ return exception;returnexception; }}}}}}








src/heros/solver/IDESolver.java








View file @ 888ec581








...@@ -216,12 +216,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -216,12 +216,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 protected void awaitCompletionComputeValuesAndShutdown() {





 protected void awaitCompletionComputeValuesAndShutdown() {







 {





 {







 final long before = System.currentTimeMillis();





 final long before = System.currentTimeMillis();







 //await termination of tasks





 //run executor and await termination of tasks







 try {





 runExecutorAndAwaitCompletion();







 executor.awaitCompletion();









 } catch (InterruptedException e) {









 e.printStackTrace();









 }









 durationFlowFunctionConstruction = System.currentTimeMillis() - before;





 durationFlowFunctionConstruction = System.currentTimeMillis() - before;







 }





 }







 if(computeValues) {





 if(computeValues) {



...@@ -238,10 +234,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -238,10 +234,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 executor.shutdown();





 executor.shutdown();







 //similarly here: we await termination, but this should happen instantaneously,





 //similarly here: we await termination, but this should happen instantaneously,







 //as all tasks should have completed





 //as all tasks should have completed









 runExecutorAndAwaitCompletion();









 }



















 /**









	 * Runs execution, re-throwing exceptions that might be thrown during its execution.









	 */









 private void runExecutorAndAwaitCompletion() {







 try {





 try {







 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);





 executor.awaitCompletion();







 } catch (InterruptedException e) {





 } catch (InterruptedException e) {







 throw new RuntimeException(e);





 e.printStackTrace();









 }









 Throwable exception = executor.getException();









 if(exception!=null) {









 throw new RuntimeException("There were exceptions during IDE analysis. Exiting.",exception);







 }





 }







 }





 }

















......













src/heros/solver/IDESolver.java








View file @ 888ec581








src/heros/solver/IDESolver.java










View file @ 888ec581


888ec581





...@@ -216,12 +216,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -216,12 +216,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 protected void awaitCompletionComputeValuesAndShutdown() {





 protected void awaitCompletionComputeValuesAndShutdown() {







 {





 {







 final long before = System.currentTimeMillis();





 final long before = System.currentTimeMillis();







 //await termination of tasks





 //run executor and await termination of tasks







 try {





 runExecutorAndAwaitCompletion();







 executor.awaitCompletion();









 } catch (InterruptedException e) {









 e.printStackTrace();









 }









 durationFlowFunctionConstruction = System.currentTimeMillis() - before;





 durationFlowFunctionConstruction = System.currentTimeMillis() - before;







 }





 }







 if(computeValues) {





 if(computeValues) {



...@@ -238,10 +234,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -238,10 +234,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 executor.shutdown();





 executor.shutdown();







 //similarly here: we await termination, but this should happen instantaneously,





 //similarly here: we await termination, but this should happen instantaneously,







 //as all tasks should have completed





 //as all tasks should have completed









 runExecutorAndAwaitCompletion();









 }



















 /**









	 * Runs execution, re-throwing exceptions that might be thrown during its execution.









	 */









 private void runExecutorAndAwaitCompletion() {







 try {





 try {







 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);





 executor.awaitCompletion();







 } catch (InterruptedException e) {





 } catch (InterruptedException e) {







 throw new RuntimeException(e);





 e.printStackTrace();









 }









 Throwable exception = executor.getException();









 if(exception!=null) {









 throw new RuntimeException("There were exceptions during IDE analysis. Exiting.",exception);







 }





 }







 }





 }

















......









...@@ -216,12 +216,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -216,12 +216,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 protected void awaitCompletionComputeValuesAndShutdown() {





 protected void awaitCompletionComputeValuesAndShutdown() {







 {





 {







 final long before = System.currentTimeMillis();





 final long before = System.currentTimeMillis();







 //await termination of tasks





 //run executor and await termination of tasks







 try {





 runExecutorAndAwaitCompletion();







 executor.awaitCompletion();









 } catch (InterruptedException e) {









 e.printStackTrace();









 }









 durationFlowFunctionConstruction = System.currentTimeMillis() - before;





 durationFlowFunctionConstruction = System.currentTimeMillis() - before;







 }





 }







 if(computeValues) {





 if(computeValues) {



...@@ -238,10 +234,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -238,10 +234,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 executor.shutdown();





 executor.shutdown();







 //similarly here: we await termination, but this should happen instantaneously,





 //similarly here: we await termination, but this should happen instantaneously,







 //as all tasks should have completed





 //as all tasks should have completed









 runExecutorAndAwaitCompletion();









 }



















 /**









	 * Runs execution, re-throwing exceptions that might be thrown during its execution.









	 */









 private void runExecutorAndAwaitCompletion() {







 try {





 try {







 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);





 executor.awaitCompletion();







 } catch (InterruptedException e) {





 } catch (InterruptedException e) {







 throw new RuntimeException(e);





 e.printStackTrace();









 }









 Throwable exception = executor.getException();









 if(exception!=null) {









 throw new RuntimeException("There were exceptions during IDE analysis. Exiting.",exception);







 }





 }







 }





 }

















......






...@@ -216,12 +216,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -216,12 +216,8 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 protected void awaitCompletionComputeValuesAndShutdown() {





 protected void awaitCompletionComputeValuesAndShutdown() {







 {





 {







 final long before = System.currentTimeMillis();





 final long before = System.currentTimeMillis();







 //await termination of tasks





 //run executor and await termination of tasks







 try {





 runExecutorAndAwaitCompletion();







 executor.awaitCompletion();









 } catch (InterruptedException e) {









 e.printStackTrace();









 }









 durationFlowFunctionConstruction = System.currentTimeMillis() - before;





 durationFlowFunctionConstruction = System.currentTimeMillis() - before;







 }





 }







 if(computeValues) {





 if(computeValues) {



...@@ -238,10 +234,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {
...@@ -238,10 +234,21 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {






 executor.shutdown();





 executor.shutdown();







 //similarly here: we await termination, but this should happen instantaneously,





 //similarly here: we await termination, but this should happen instantaneously,







 //as all tasks should have completed





 //as all tasks should have completed









 runExecutorAndAwaitCompletion();









 }



















 /**









	 * Runs execution, re-throwing exceptions that might be thrown during its execution.









	 */









 private void runExecutorAndAwaitCompletion() {







 try {





 try {







 executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);





 executor.awaitCompletion();







 } catch (InterruptedException e) {





 } catch (InterruptedException e) {







 throw new RuntimeException(e);





 e.printStackTrace();









 }









 Throwable exception = executor.getException();









 if(exception!=null) {









 throw new RuntimeException("There were exceptions during IDE analysis. Exiting.",exception);







 }





 }







 }





 }

















......


 protected void awaitCompletionComputeValuesAndShutdown() {protectedvoidawaitCompletionComputeValuesAndShutdown(){ protected void awaitCompletionComputeValuesAndShutdown() {protectedvoidawaitCompletionComputeValuesAndShutdown(){ {{ {{ final long before = System.currentTimeMillis();finallongbefore=System.currentTimeMillis(); final long before = System.currentTimeMillis();finallongbefore=System.currentTimeMillis(); //await termination of tasks//await termination of tasks //run executor and await termination of tasks//run executor and await termination of tasks try {try{ runExecutorAndAwaitCompletion();runExecutorAndAwaitCompletion(); executor.awaitCompletion();executor.awaitCompletion(); } catch (InterruptedException e) {}catch(InterruptedExceptione){ e.printStackTrace();e.printStackTrace(); }} durationFlowFunctionConstruction = System.currentTimeMillis() - before;durationFlowFunctionConstruction=System.currentTimeMillis()-before; durationFlowFunctionConstruction = System.currentTimeMillis() - before;durationFlowFunctionConstruction=System.currentTimeMillis()-before; }} }} if(computeValues) {if(computeValues){ if(computeValues) {if(computeValues){ executor.shutdown();executor.shutdown(); executor.shutdown();executor.shutdown(); //similarly here: we await termination, but this should happen instantaneously,//similarly here: we await termination, but this should happen instantaneously, //similarly here: we await termination, but this should happen instantaneously,//similarly here: we await termination, but this should happen instantaneously, //as all tasks should have completed//as all tasks should have completed //as all tasks should have completed//as all tasks should have completed runExecutorAndAwaitCompletion();runExecutorAndAwaitCompletion(); }} /**/**	 * Runs execution, re-throwing exceptions that might be thrown during its execution.	 * Runs execution, re-throwing exceptions that might be thrown during its execution.	 */	 */ private void runExecutorAndAwaitCompletion() {privatevoidrunExecutorAndAwaitCompletion(){ try {try{ try {try{ executor.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);executor.awaitTerminationTermination((LongLong..MAX_VALUEMAX_VALUE,, TimeUnitTimeUnit..DAYSDAYS); executor.awaitCompletion();executor.awaitCompletionCompletion();( } catch (InterruptedException e) {}catch(InterruptedExceptione){ } catch (InterruptedException e) {}catch(InterruptedExceptione){ throw new RuntimeException(e);thrownewRuntimeException(e); e.printStackTrace();e.printStackTrace(); }} Throwable exception = executor.getException();Throwableexception=executor.getException(); if(exception!=null) {if(exception!=null){ throw new RuntimeException("There were exceptions during IDE analysis. Exiting.",exception);thrownewRuntimeException("There were exceptions during IDE analysis. Exiting.",exception); }} }} }} }}









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






