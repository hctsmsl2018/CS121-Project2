



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

05779cea















Commit
05779cea


authored
Jan 07, 2015
by


Johannes Lerch



Browse files




"interest/concrretization" edges in callers are no longer propagated as

normal path edges, but immediately registered as jump functions to avoid
duplications and avoidable merges






parent
1cd34e9e













Changes
3




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/ConcretizationPathEdge.java



0 â†’ 100644







View file @ 05779cea













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.solver.PathEdge;





















public class ConcretizationPathEdge<M, N,D> extends PathEdge<N, D> {





















 private M calleeMethod;










 private D calleeSourceFact;





















 public ConcretizationPathEdge(D dSource, N target, D dTarget, M calleeMethod, D calleeSourceFact) {










 super(dSource, target, dTarget);










 this.calleeMethod = calleeMethod;










 this.calleeSourceFact = calleeSourceFact;










 }





















 public M getCalleeMethod() {










 return calleeMethod;










 }





















 public D getCalleeSourceFact() {










 return calleeSourceFact;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = super.hashCode();










 result = prime * result + ((calleeMethod == null) ? 0 : calleeMethod.hashCode());










 result = prime * result + ((calleeSourceFact == null) ? 0 : calleeSourceFact.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (!super.equals(obj))










 return false;










 if (!(obj instanceof ConcretizationPathEdge))










 return false;










 ConcretizationPathEdge other = (ConcretizationPathEdge) obj;










 if (calleeMethod == null) {










 if (other.calleeMethod != null)










 return false;










 } else if (!calleeMethod.equals(other.calleeMethod))










 return false;










 if (calleeSourceFact == null) {










 if (other.calleeSourceFact != null)










 return false;










 } else if (!calleeSourceFact.equals(other.calleeSourceFact))










 return false;










 return true;










 }





















 @Override










 public String toString() {










 return "ConcretizationPathEdge "+super.toString()+ " registers interest at "+calleeMethod+" in "+calleeSourceFact;










 }










}














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 05779cea






......@@ -144,7 +144,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue())










 propagate(zeroValue, startPoint, val, null, false);










 propagate(new PathEdge<>(zeroValue, startPoint, val), null, false);










 jumpFn.addFunction(new PathEdge<N, D>(zeroValue, startPoint, zeroValue));










 }










 }



......@@ -230,7 +230,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(N sP: startPointsOf) {










 //create initial self-loop










 D abstractStartPointFact = d3.getFact().cloneWithAccessPath(new AccessPath<FieldRef>());










 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15










 propagate(new PathEdge<>(abstractStartPointFact, sP, abstractStartPointFact), n, false); //line 15










 }










 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>



......@@ -262,7 +262,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //for each target value of the function










 for(AnnotatedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1, retSiteN, d5p_restoredCtx, n, false);










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }










 }










 }



......@@ -275,7 +275,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for (N returnSiteN : returnSiteNs) {










 FlowFunction<FieldRef, D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);










 for(AnnotatedFact<FieldRef, D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))










 propagate(d1, returnSiteN, d3.getFact(), n, false);










 propagate(new PathEdge<>(d1, returnSiteN, d3.getFact()), n, false);










 }










 }














......@@ -287,7 +287,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint)) {










 if(edges.remove(edge)) {










 logger.trace("RESUME-EDGE: {}", edge);










 propagate(edge.factAtSource(), edge.getTarget(), edge.factAtTarget(), null, false);










 propagate(edge, edge instanceof ConcretizationPathEdge ? edge.getTarget() : null, false);










 }










 }










 }



......@@ -309,10 +309,12 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 }










 };










 










 propagateConstrained(constraint, new PathEdge<N,D>(










 propagateConstrained(constraint, new ConcretizationPathEdge<>(










 applyConstraint(constraint, incomingEdge.getCallerSourceFact()), 










 incomingEdge.getCallSite(), 










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact())));










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact()),










 method,










 edge.factAtSource()));










 }










 }










 }



......@@ -386,7 +388,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 // for each incoming-call value










 for (AnnotatedFact<FieldRef, D> callerTargetAnnotatedFact : callerTargetFacts) {










 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());










 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);










 propagate(new PathEdge<>(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact), callSite, false);










 }










 }










 }



......@@ -404,7 +406,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 Set<AnnotatedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(AnnotatedFact<FieldRef, D> d5: targets)










 propagate(zeroValue, retSiteC, d5.getFact(), c, true);










 propagate(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c, true);










 }










 }










 //in cases where there are no callers, the return statement would normally not be processed at all;



......@@ -448,7 +450,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagateConstrained(d3.getConstraint(), new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 }










 else










 propagate(d1, m, d3.getFact(), null, false);










 propagate(new PathEdge<>(d1, m, d3.getFact()), null, false);










 }










 }










 }



......@@ -477,17 +479,19 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixesOf(calleeMethod, pathEdge.factAtSource())) {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 PathEdge<N,D> callerEdge = new PathEdge<>(










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(constraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(constraint, incEdge.getCallerCallSiteFact()));










 applyConstraint(constraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 propagate |= propagateConstrained(constraint, callerEdge);










 }










 }










 }










 










 if(propagate) {










 propagate(pathEdge.factAtSource(), pathEdge.getTarget(), pathEdge.factAtTarget(), null, false);










 propagate(pathEdge, pathEdge instanceof ConcretizationPathEdge ? pathEdge.getTarget() : null, false);










 return true;










 } else {










 pauseEdge(pathEdge);



......@@ -536,28 +540,40 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 /**










	 * Propagates the flow further down the exploded super graph. 










	 * @param sourceVal the source value of the propagated summary edge










	 * @param target the target statement










	 * @param targetVal the target value at the target statement










	 * @param edge the PathEdge that should be propagated










	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IFDSSolver}) 










	 * @param isUnbalancedReturn <code>true</code> if this edge is propagating an unbalanced return










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IFDSSolver})










	 */










 protected void propagate(D sourceVal, N target, D targetVal,










 protected void propagate(PathEdge<N,D> edge,










 /* deliberately exposed to clients */ N relatedCallSite,










 /* deliberately exposed to clients */ boolean isUnbalancedReturn) {










 final PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 










 final D existingVal = jumpFn.addFunction(edge);










 //TODO: Merge d.* and d.*\{x} as d.*










 if (existingVal != null) {










 if (existingVal != targetVal)










 existingVal.addNeighbor(targetVal);










 }










 else {










 scheduleEdgeProcessing(edge);










 if(targetVal!=zeroValue)










 logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);










 










 if(edge instanceof ConcretizationPathEdge) {










 ConcretizationPathEdge<M, N, D> concEdge = (ConcretizationPathEdge<M,N,D>) edge;










 jumpFn.addFunction(concEdge);










 










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(concEdge.getCalleeSourceFact(), 










 concEdge.getTarget(), concEdge.factAtSource(), concEdge.factAtTarget());










 if (!addIncoming(concEdge.getCalleeMethod(), incomingEdge))










 return;










 










 resumeEdges(concEdge.getCalleeMethod(), concEdge.getCalleeSourceFact());










 registerInterestedCaller(concEdge.getCalleeMethod(), incomingEdge);










 } else {










 //TODO: Merge d.* and d.*\{x} as d.*










 if (existingVal != null) {










 if (existingVal != edge.factAtTarget())










 existingVal.addNeighbor(edge.factAtTarget());










 }










 else {










 scheduleEdgeProcessing(edge);










 if(edge.factAtTarget()!=zeroValue)










 logger.trace("EDGE: {}: {}", icfg.getMethodOf(edge.getTarget()), edge);










 }










 }










 }














......














test/heros/alias/FieldSensitiveSolverTest.java








View file @ 05779cea






......@@ -147,7 +147,7 @@ public class FieldSensitiveSolverTest {









 










 helper.method("bar",










 startPoints("c"),










 callSite("c").calls("xyz", flow("2", "3"), flow("2.f", "3.f")));










 callSite("c").calls("xyz", flow("2", "3")));










 










 helper.method("xyz", 










 startPoints("d"),



......@@ -245,7 +245,7 @@ public class FieldSensitiveSolverTest {









 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.f")),










 callSite("b").calls("bar", flow("1.f", "2"), flow("1.f^f", "2^f")));










 callSite("b").calls("bar", flow("1.f", "2")));










 










 helper.method("bar",










 startPoints("c"),



......@@ -283,7 +283,7 @@ public class FieldSensitiveSolverTest {









 










 helper.method("bar",










 startPoints("c"),










 callSite("c").calls("xyz", flow("2", "3"), flow("2^f", "3^f")));










 callSite("c").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),



......@@ -315,12 +315,12 @@ public class FieldSensitiveSolverTest {









 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.f")),










 callSite("b").calls("bar", flow("1.f", "2.f")).retSite("e", kill("1.f")),










 callSite("e").calls("bar", flow("4", "2"), flow("4^f", "2^f")).retSite("f", kill("4"), kill("4^f") /*unwanted call2ret*/));










 callSite("e").calls("bar", flow("4", "2")).retSite("f", kill("4")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("2", writeField("f"), "2^f"), flow("2", "3")),










 exitStmt("d").returns(over("b"), to("e"), flow("3.f", "4")).returns(over("e"), to("f"), kill("3"), kill("3^f"), kill("2^f"))); 










 exitStmt("d").returns(over("b"), to("e"), flow("3.f", "4")).returns(over("e"), to("f"), kill("3"), kill("2^f"))); 










 










 helper.runSolver(false, "a");










 }



......@@ -347,12 +347,12 @@ public class FieldSensitiveSolverTest {









 normalStmt("a").succ("b", flow("0", "1.g")),










 callSite("b").calls("bar", flow("1.g", "1.g")).retSite("e", kill("1.g")),










 normalStmt("e").succ("f", flow("1.g", "3")),










 callSite("f").calls("bar", flow("3", "1"), flow("3.f", "1.f")).retSite("g", kill("3"), kill("3.f") /* TODO: we want to get rid of kill(3.f) */)); //0->3 at f, should generate 0->3.f as well, because 1.f is paused on caller side










 callSite("f").calls("bar", flow("3", "1")).retSite("g", kill("3"))); 










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("1", readField("f"), "2"), flow("1", "1")),










 exitStmt("d").returns(over("b"), to("e"), flow("1.g", "1.g") /* ignore fact 2, not possible with this caller ctx*/).returns(over("f"), to("g"), kill("1"), kill("1.f"), kill("2")));










 exitStmt("d").returns(over("b"), to("e"), flow("1.g", "1.g") /* ignore fact 2, not possible with this caller ctx*/).returns(over("f"), to("g"), kill("1"), kill("2")));










 










 helper.runSolver(false, "a");










 }



......@@ -378,7 +378,7 @@ public class FieldSensitiveSolverTest {









 










 helper.method("bar",










 startPoints("b"),










 callSite("b").calls("xyz", flow("1", "1"), flow("1.f", "1.f"), flow("1.g", "1.g")).retSite("e", kill("1"), kill("1.f"), kill("1.g")),










 callSite("b").calls("xyz", flow("1", "1")).retSite("e", kill("1")),










 exitStmt("e").returns(over("a"), to("f"), flow("2", "2")));










 










 helper.method("xyz",



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

05779cea















Commit
05779cea


authored
Jan 07, 2015
by


Johannes Lerch



Browse files




"interest/concrretization" edges in callers are no longer propagated as

normal path edges, but immediately registered as jump functions to avoid
duplications and avoidable merges






parent
1cd34e9e













Changes
3




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/ConcretizationPathEdge.java



0 â†’ 100644







View file @ 05779cea













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.solver.PathEdge;





















public class ConcretizationPathEdge<M, N,D> extends PathEdge<N, D> {





















 private M calleeMethod;










 private D calleeSourceFact;





















 public ConcretizationPathEdge(D dSource, N target, D dTarget, M calleeMethod, D calleeSourceFact) {










 super(dSource, target, dTarget);










 this.calleeMethod = calleeMethod;










 this.calleeSourceFact = calleeSourceFact;










 }





















 public M getCalleeMethod() {










 return calleeMethod;










 }





















 public D getCalleeSourceFact() {










 return calleeSourceFact;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = super.hashCode();










 result = prime * result + ((calleeMethod == null) ? 0 : calleeMethod.hashCode());










 result = prime * result + ((calleeSourceFact == null) ? 0 : calleeSourceFact.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (!super.equals(obj))










 return false;










 if (!(obj instanceof ConcretizationPathEdge))










 return false;










 ConcretizationPathEdge other = (ConcretizationPathEdge) obj;










 if (calleeMethod == null) {










 if (other.calleeMethod != null)










 return false;










 } else if (!calleeMethod.equals(other.calleeMethod))










 return false;










 if (calleeSourceFact == null) {










 if (other.calleeSourceFact != null)










 return false;










 } else if (!calleeSourceFact.equals(other.calleeSourceFact))










 return false;










 return true;










 }





















 @Override










 public String toString() {










 return "ConcretizationPathEdge "+super.toString()+ " registers interest at "+calleeMethod+" in "+calleeSourceFact;










 }










}














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 05779cea






......@@ -144,7 +144,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue())










 propagate(zeroValue, startPoint, val, null, false);










 propagate(new PathEdge<>(zeroValue, startPoint, val), null, false);










 jumpFn.addFunction(new PathEdge<N, D>(zeroValue, startPoint, zeroValue));










 }










 }



......@@ -230,7 +230,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(N sP: startPointsOf) {










 //create initial self-loop










 D abstractStartPointFact = d3.getFact().cloneWithAccessPath(new AccessPath<FieldRef>());










 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15










 propagate(new PathEdge<>(abstractStartPointFact, sP, abstractStartPointFact), n, false); //line 15










 }










 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>



......@@ -262,7 +262,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //for each target value of the function










 for(AnnotatedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1, retSiteN, d5p_restoredCtx, n, false);










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }










 }










 }



......@@ -275,7 +275,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for (N returnSiteN : returnSiteNs) {










 FlowFunction<FieldRef, D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);










 for(AnnotatedFact<FieldRef, D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))










 propagate(d1, returnSiteN, d3.getFact(), n, false);










 propagate(new PathEdge<>(d1, returnSiteN, d3.getFact()), n, false);










 }










 }














......@@ -287,7 +287,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint)) {










 if(edges.remove(edge)) {










 logger.trace("RESUME-EDGE: {}", edge);










 propagate(edge.factAtSource(), edge.getTarget(), edge.factAtTarget(), null, false);










 propagate(edge, edge instanceof ConcretizationPathEdge ? edge.getTarget() : null, false);










 }










 }










 }



......@@ -309,10 +309,12 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 }










 };










 










 propagateConstrained(constraint, new PathEdge<N,D>(










 propagateConstrained(constraint, new ConcretizationPathEdge<>(










 applyConstraint(constraint, incomingEdge.getCallerSourceFact()), 










 incomingEdge.getCallSite(), 










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact())));










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact()),










 method,










 edge.factAtSource()));










 }










 }










 }



......@@ -386,7 +388,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 // for each incoming-call value










 for (AnnotatedFact<FieldRef, D> callerTargetAnnotatedFact : callerTargetFacts) {










 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());










 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);










 propagate(new PathEdge<>(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact), callSite, false);










 }










 }










 }



......@@ -404,7 +406,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 Set<AnnotatedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(AnnotatedFact<FieldRef, D> d5: targets)










 propagate(zeroValue, retSiteC, d5.getFact(), c, true);










 propagate(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c, true);










 }










 }










 //in cases where there are no callers, the return statement would normally not be processed at all;



......@@ -448,7 +450,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagateConstrained(d3.getConstraint(), new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 }










 else










 propagate(d1, m, d3.getFact(), null, false);










 propagate(new PathEdge<>(d1, m, d3.getFact()), null, false);










 }










 }










 }



......@@ -477,17 +479,19 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixesOf(calleeMethod, pathEdge.factAtSource())) {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 PathEdge<N,D> callerEdge = new PathEdge<>(










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(constraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(constraint, incEdge.getCallerCallSiteFact()));










 applyConstraint(constraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 propagate |= propagateConstrained(constraint, callerEdge);










 }










 }










 }










 










 if(propagate) {










 propagate(pathEdge.factAtSource(), pathEdge.getTarget(), pathEdge.factAtTarget(), null, false);










 propagate(pathEdge, pathEdge instanceof ConcretizationPathEdge ? pathEdge.getTarget() : null, false);










 return true;










 } else {










 pauseEdge(pathEdge);



......@@ -536,28 +540,40 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 /**










	 * Propagates the flow further down the exploded super graph. 










	 * @param sourceVal the source value of the propagated summary edge










	 * @param target the target statement










	 * @param targetVal the target value at the target statement










	 * @param edge the PathEdge that should be propagated










	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IFDSSolver}) 










	 * @param isUnbalancedReturn <code>true</code> if this edge is propagating an unbalanced return










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IFDSSolver})










	 */










 protected void propagate(D sourceVal, N target, D targetVal,










 protected void propagate(PathEdge<N,D> edge,










 /* deliberately exposed to clients */ N relatedCallSite,










 /* deliberately exposed to clients */ boolean isUnbalancedReturn) {










 final PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 










 final D existingVal = jumpFn.addFunction(edge);










 //TODO: Merge d.* and d.*\{x} as d.*










 if (existingVal != null) {










 if (existingVal != targetVal)










 existingVal.addNeighbor(targetVal);










 }










 else {










 scheduleEdgeProcessing(edge);










 if(targetVal!=zeroValue)










 logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);










 










 if(edge instanceof ConcretizationPathEdge) {










 ConcretizationPathEdge<M, N, D> concEdge = (ConcretizationPathEdge<M,N,D>) edge;










 jumpFn.addFunction(concEdge);










 










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(concEdge.getCalleeSourceFact(), 










 concEdge.getTarget(), concEdge.factAtSource(), concEdge.factAtTarget());










 if (!addIncoming(concEdge.getCalleeMethod(), incomingEdge))










 return;










 










 resumeEdges(concEdge.getCalleeMethod(), concEdge.getCalleeSourceFact());










 registerInterestedCaller(concEdge.getCalleeMethod(), incomingEdge);










 } else {










 //TODO: Merge d.* and d.*\{x} as d.*










 if (existingVal != null) {










 if (existingVal != edge.factAtTarget())










 existingVal.addNeighbor(edge.factAtTarget());










 }










 else {










 scheduleEdgeProcessing(edge);










 if(edge.factAtTarget()!=zeroValue)










 logger.trace("EDGE: {}: {}", icfg.getMethodOf(edge.getTarget()), edge);










 }










 }










 }














......














test/heros/alias/FieldSensitiveSolverTest.java








View file @ 05779cea






......@@ -147,7 +147,7 @@ public class FieldSensitiveSolverTest {









 










 helper.method("bar",










 startPoints("c"),










 callSite("c").calls("xyz", flow("2", "3"), flow("2.f", "3.f")));










 callSite("c").calls("xyz", flow("2", "3")));










 










 helper.method("xyz", 










 startPoints("d"),



......@@ -245,7 +245,7 @@ public class FieldSensitiveSolverTest {









 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.f")),










 callSite("b").calls("bar", flow("1.f", "2"), flow("1.f^f", "2^f")));










 callSite("b").calls("bar", flow("1.f", "2")));










 










 helper.method("bar",










 startPoints("c"),



......@@ -283,7 +283,7 @@ public class FieldSensitiveSolverTest {









 










 helper.method("bar",










 startPoints("c"),










 callSite("c").calls("xyz", flow("2", "3"), flow("2^f", "3^f")));










 callSite("c").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),



......@@ -315,12 +315,12 @@ public class FieldSensitiveSolverTest {









 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.f")),










 callSite("b").calls("bar", flow("1.f", "2.f")).retSite("e", kill("1.f")),










 callSite("e").calls("bar", flow("4", "2"), flow("4^f", "2^f")).retSite("f", kill("4"), kill("4^f") /*unwanted call2ret*/));










 callSite("e").calls("bar", flow("4", "2")).retSite("f", kill("4")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("2", writeField("f"), "2^f"), flow("2", "3")),










 exitStmt("d").returns(over("b"), to("e"), flow("3.f", "4")).returns(over("e"), to("f"), kill("3"), kill("3^f"), kill("2^f"))); 










 exitStmt("d").returns(over("b"), to("e"), flow("3.f", "4")).returns(over("e"), to("f"), kill("3"), kill("2^f"))); 










 










 helper.runSolver(false, "a");










 }



......@@ -347,12 +347,12 @@ public class FieldSensitiveSolverTest {









 normalStmt("a").succ("b", flow("0", "1.g")),










 callSite("b").calls("bar", flow("1.g", "1.g")).retSite("e", kill("1.g")),










 normalStmt("e").succ("f", flow("1.g", "3")),










 callSite("f").calls("bar", flow("3", "1"), flow("3.f", "1.f")).retSite("g", kill("3"), kill("3.f") /* TODO: we want to get rid of kill(3.f) */)); //0->3 at f, should generate 0->3.f as well, because 1.f is paused on caller side










 callSite("f").calls("bar", flow("3", "1")).retSite("g", kill("3"))); 










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("1", readField("f"), "2"), flow("1", "1")),










 exitStmt("d").returns(over("b"), to("e"), flow("1.g", "1.g") /* ignore fact 2, not possible with this caller ctx*/).returns(over("f"), to("g"), kill("1"), kill("1.f"), kill("2")));










 exitStmt("d").returns(over("b"), to("e"), flow("1.g", "1.g") /* ignore fact 2, not possible with this caller ctx*/).returns(over("f"), to("g"), kill("1"), kill("2")));










 










 helper.runSolver(false, "a");










 }



......@@ -378,7 +378,7 @@ public class FieldSensitiveSolverTest {









 










 helper.method("bar",










 startPoints("b"),










 callSite("b").calls("xyz", flow("1", "1"), flow("1.f", "1.f"), flow("1.g", "1.g")).retSite("e", kill("1"), kill("1.f"), kill("1.g")),










 callSite("b").calls("xyz", flow("1", "1")).retSite("e", kill("1")),










 exitStmt("e").returns(over("a"), to("f"), flow("2", "2")));










 










 helper.method("xyz",



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

05779cea







Open sidebar



Joshua Garcia heros
Commits

05779cea




Open sidebar

Joshua Garcia heros
Commits

05779cea


Joshua GarciaherosherosCommits
05779cea








Commit
05779cea


authored
Jan 07, 2015
by


Johannes Lerch



Browse files




"interest/concrretization" edges in callers are no longer propagated as

normal path edges, but immediately registered as jump functions to avoid
duplications and avoidable merges






parent
1cd34e9e













Changes
3




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/ConcretizationPathEdge.java



0 â†’ 100644







View file @ 05779cea













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.solver.PathEdge;





















public class ConcretizationPathEdge<M, N,D> extends PathEdge<N, D> {





















 private M calleeMethod;










 private D calleeSourceFact;





















 public ConcretizationPathEdge(D dSource, N target, D dTarget, M calleeMethod, D calleeSourceFact) {










 super(dSource, target, dTarget);










 this.calleeMethod = calleeMethod;










 this.calleeSourceFact = calleeSourceFact;










 }





















 public M getCalleeMethod() {










 return calleeMethod;










 }





















 public D getCalleeSourceFact() {










 return calleeSourceFact;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = super.hashCode();










 result = prime * result + ((calleeMethod == null) ? 0 : calleeMethod.hashCode());










 result = prime * result + ((calleeSourceFact == null) ? 0 : calleeSourceFact.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (!super.equals(obj))










 return false;










 if (!(obj instanceof ConcretizationPathEdge))










 return false;










 ConcretizationPathEdge other = (ConcretizationPathEdge) obj;










 if (calleeMethod == null) {










 if (other.calleeMethod != null)










 return false;










 } else if (!calleeMethod.equals(other.calleeMethod))










 return false;










 if (calleeSourceFact == null) {










 if (other.calleeSourceFact != null)










 return false;










 } else if (!calleeSourceFact.equals(other.calleeSourceFact))










 return false;










 return true;










 }





















 @Override










 public String toString() {










 return "ConcretizationPathEdge "+super.toString()+ " registers interest at "+calleeMethod+" in "+calleeSourceFact;










 }










}














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 05779cea






......@@ -144,7 +144,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue())










 propagate(zeroValue, startPoint, val, null, false);










 propagate(new PathEdge<>(zeroValue, startPoint, val), null, false);










 jumpFn.addFunction(new PathEdge<N, D>(zeroValue, startPoint, zeroValue));










 }










 }



......@@ -230,7 +230,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(N sP: startPointsOf) {










 //create initial self-loop










 D abstractStartPointFact = d3.getFact().cloneWithAccessPath(new AccessPath<FieldRef>());










 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15










 propagate(new PathEdge<>(abstractStartPointFact, sP, abstractStartPointFact), n, false); //line 15










 }










 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>



......@@ -262,7 +262,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //for each target value of the function










 for(AnnotatedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1, retSiteN, d5p_restoredCtx, n, false);










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }










 }










 }



......@@ -275,7 +275,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for (N returnSiteN : returnSiteNs) {










 FlowFunction<FieldRef, D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);










 for(AnnotatedFact<FieldRef, D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))










 propagate(d1, returnSiteN, d3.getFact(), n, false);










 propagate(new PathEdge<>(d1, returnSiteN, d3.getFact()), n, false);










 }










 }














......@@ -287,7 +287,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint)) {










 if(edges.remove(edge)) {










 logger.trace("RESUME-EDGE: {}", edge);










 propagate(edge.factAtSource(), edge.getTarget(), edge.factAtTarget(), null, false);










 propagate(edge, edge instanceof ConcretizationPathEdge ? edge.getTarget() : null, false);










 }










 }










 }



......@@ -309,10 +309,12 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 }










 };










 










 propagateConstrained(constraint, new PathEdge<N,D>(










 propagateConstrained(constraint, new ConcretizationPathEdge<>(










 applyConstraint(constraint, incomingEdge.getCallerSourceFact()), 










 incomingEdge.getCallSite(), 










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact())));










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact()),










 method,










 edge.factAtSource()));










 }










 }










 }



......@@ -386,7 +388,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 // for each incoming-call value










 for (AnnotatedFact<FieldRef, D> callerTargetAnnotatedFact : callerTargetFacts) {










 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());










 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);










 propagate(new PathEdge<>(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact), callSite, false);










 }










 }










 }



......@@ -404,7 +406,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 Set<AnnotatedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(AnnotatedFact<FieldRef, D> d5: targets)










 propagate(zeroValue, retSiteC, d5.getFact(), c, true);










 propagate(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c, true);










 }










 }










 //in cases where there are no callers, the return statement would normally not be processed at all;



......@@ -448,7 +450,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagateConstrained(d3.getConstraint(), new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 }










 else










 propagate(d1, m, d3.getFact(), null, false);










 propagate(new PathEdge<>(d1, m, d3.getFact()), null, false);










 }










 }










 }



......@@ -477,17 +479,19 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixesOf(calleeMethod, pathEdge.factAtSource())) {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 PathEdge<N,D> callerEdge = new PathEdge<>(










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(constraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(constraint, incEdge.getCallerCallSiteFact()));










 applyConstraint(constraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 propagate |= propagateConstrained(constraint, callerEdge);










 }










 }










 }










 










 if(propagate) {










 propagate(pathEdge.factAtSource(), pathEdge.getTarget(), pathEdge.factAtTarget(), null, false);










 propagate(pathEdge, pathEdge instanceof ConcretizationPathEdge ? pathEdge.getTarget() : null, false);










 return true;










 } else {










 pauseEdge(pathEdge);



......@@ -536,28 +540,40 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 /**










	 * Propagates the flow further down the exploded super graph. 










	 * @param sourceVal the source value of the propagated summary edge










	 * @param target the target statement










	 * @param targetVal the target value at the target statement










	 * @param edge the PathEdge that should be propagated










	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IFDSSolver}) 










	 * @param isUnbalancedReturn <code>true</code> if this edge is propagating an unbalanced return










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IFDSSolver})










	 */










 protected void propagate(D sourceVal, N target, D targetVal,










 protected void propagate(PathEdge<N,D> edge,










 /* deliberately exposed to clients */ N relatedCallSite,










 /* deliberately exposed to clients */ boolean isUnbalancedReturn) {










 final PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 










 final D existingVal = jumpFn.addFunction(edge);










 //TODO: Merge d.* and d.*\{x} as d.*










 if (existingVal != null) {










 if (existingVal != targetVal)










 existingVal.addNeighbor(targetVal);










 }










 else {










 scheduleEdgeProcessing(edge);










 if(targetVal!=zeroValue)










 logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);










 










 if(edge instanceof ConcretizationPathEdge) {










 ConcretizationPathEdge<M, N, D> concEdge = (ConcretizationPathEdge<M,N,D>) edge;










 jumpFn.addFunction(concEdge);










 










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(concEdge.getCalleeSourceFact(), 










 concEdge.getTarget(), concEdge.factAtSource(), concEdge.factAtTarget());










 if (!addIncoming(concEdge.getCalleeMethod(), incomingEdge))










 return;










 










 resumeEdges(concEdge.getCalleeMethod(), concEdge.getCalleeSourceFact());










 registerInterestedCaller(concEdge.getCalleeMethod(), incomingEdge);










 } else {










 //TODO: Merge d.* and d.*\{x} as d.*










 if (existingVal != null) {










 if (existingVal != edge.factAtTarget())










 existingVal.addNeighbor(edge.factAtTarget());










 }










 else {










 scheduleEdgeProcessing(edge);










 if(edge.factAtTarget()!=zeroValue)










 logger.trace("EDGE: {}: {}", icfg.getMethodOf(edge.getTarget()), edge);










 }










 }










 }














......














test/heros/alias/FieldSensitiveSolverTest.java








View file @ 05779cea






......@@ -147,7 +147,7 @@ public class FieldSensitiveSolverTest {









 










 helper.method("bar",










 startPoints("c"),










 callSite("c").calls("xyz", flow("2", "3"), flow("2.f", "3.f")));










 callSite("c").calls("xyz", flow("2", "3")));










 










 helper.method("xyz", 










 startPoints("d"),



......@@ -245,7 +245,7 @@ public class FieldSensitiveSolverTest {









 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.f")),










 callSite("b").calls("bar", flow("1.f", "2"), flow("1.f^f", "2^f")));










 callSite("b").calls("bar", flow("1.f", "2")));










 










 helper.method("bar",










 startPoints("c"),



......@@ -283,7 +283,7 @@ public class FieldSensitiveSolverTest {









 










 helper.method("bar",










 startPoints("c"),










 callSite("c").calls("xyz", flow("2", "3"), flow("2^f", "3^f")));










 callSite("c").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),



......@@ -315,12 +315,12 @@ public class FieldSensitiveSolverTest {









 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.f")),










 callSite("b").calls("bar", flow("1.f", "2.f")).retSite("e", kill("1.f")),










 callSite("e").calls("bar", flow("4", "2"), flow("4^f", "2^f")).retSite("f", kill("4"), kill("4^f") /*unwanted call2ret*/));










 callSite("e").calls("bar", flow("4", "2")).retSite("f", kill("4")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("2", writeField("f"), "2^f"), flow("2", "3")),










 exitStmt("d").returns(over("b"), to("e"), flow("3.f", "4")).returns(over("e"), to("f"), kill("3"), kill("3^f"), kill("2^f"))); 










 exitStmt("d").returns(over("b"), to("e"), flow("3.f", "4")).returns(over("e"), to("f"), kill("3"), kill("2^f"))); 










 










 helper.runSolver(false, "a");










 }



......@@ -347,12 +347,12 @@ public class FieldSensitiveSolverTest {









 normalStmt("a").succ("b", flow("0", "1.g")),










 callSite("b").calls("bar", flow("1.g", "1.g")).retSite("e", kill("1.g")),










 normalStmt("e").succ("f", flow("1.g", "3")),










 callSite("f").calls("bar", flow("3", "1"), flow("3.f", "1.f")).retSite("g", kill("3"), kill("3.f") /* TODO: we want to get rid of kill(3.f) */)); //0->3 at f, should generate 0->3.f as well, because 1.f is paused on caller side










 callSite("f").calls("bar", flow("3", "1")).retSite("g", kill("3"))); 










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("1", readField("f"), "2"), flow("1", "1")),










 exitStmt("d").returns(over("b"), to("e"), flow("1.g", "1.g") /* ignore fact 2, not possible with this caller ctx*/).returns(over("f"), to("g"), kill("1"), kill("1.f"), kill("2")));










 exitStmt("d").returns(over("b"), to("e"), flow("1.g", "1.g") /* ignore fact 2, not possible with this caller ctx*/).returns(over("f"), to("g"), kill("1"), kill("2")));










 










 helper.runSolver(false, "a");










 }



......@@ -378,7 +378,7 @@ public class FieldSensitiveSolverTest {









 










 helper.method("bar",










 startPoints("b"),










 callSite("b").calls("xyz", flow("1", "1"), flow("1.f", "1.f"), flow("1.g", "1.g")).retSite("e", kill("1"), kill("1.f"), kill("1.g")),










 callSite("b").calls("xyz", flow("1", "1")).retSite("e", kill("1")),










 exitStmt("e").returns(over("a"), to("f"), flow("2", "2")));










 










 helper.method("xyz",



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
05779cea


authored
Jan 07, 2015
by


Johannes Lerch



Browse files




"interest/concrretization" edges in callers are no longer propagated as

normal path edges, but immediately registered as jump functions to avoid
duplications and avoidable merges






parent
1cd34e9e













Changes
3




Hide whitespace changes

Inline
Side-by-side















src/heros/alias/ConcretizationPathEdge.java



0 â†’ 100644







View file @ 05779cea













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.solver.PathEdge;





















public class ConcretizationPathEdge<M, N,D> extends PathEdge<N, D> {





















 private M calleeMethod;










 private D calleeSourceFact;





















 public ConcretizationPathEdge(D dSource, N target, D dTarget, M calleeMethod, D calleeSourceFact) {










 super(dSource, target, dTarget);










 this.calleeMethod = calleeMethod;










 this.calleeSourceFact = calleeSourceFact;










 }





















 public M getCalleeMethod() {










 return calleeMethod;










 }





















 public D getCalleeSourceFact() {










 return calleeSourceFact;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = super.hashCode();










 result = prime * result + ((calleeMethod == null) ? 0 : calleeMethod.hashCode());










 result = prime * result + ((calleeSourceFact == null) ? 0 : calleeSourceFact.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (!super.equals(obj))










 return false;










 if (!(obj instanceof ConcretizationPathEdge))










 return false;










 ConcretizationPathEdge other = (ConcretizationPathEdge) obj;










 if (calleeMethod == null) {










 if (other.calleeMethod != null)










 return false;










 } else if (!calleeMethod.equals(other.calleeMethod))










 return false;










 if (calleeSourceFact == null) {










 if (other.calleeSourceFact != null)










 return false;










 } else if (!calleeSourceFact.equals(other.calleeSourceFact))










 return false;










 return true;










 }





















 @Override










 public String toString() {










 return "ConcretizationPathEdge "+super.toString()+ " registers interest at "+calleeMethod+" in "+calleeSourceFact;










 }










}














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 05779cea






......@@ -144,7 +144,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue())










 propagate(zeroValue, startPoint, val, null, false);










 propagate(new PathEdge<>(zeroValue, startPoint, val), null, false);










 jumpFn.addFunction(new PathEdge<N, D>(zeroValue, startPoint, zeroValue));










 }










 }



......@@ -230,7 +230,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(N sP: startPointsOf) {










 //create initial self-loop










 D abstractStartPointFact = d3.getFact().cloneWithAccessPath(new AccessPath<FieldRef>());










 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15










 propagate(new PathEdge<>(abstractStartPointFact, sP, abstractStartPointFact), n, false); //line 15










 }










 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>



......@@ -262,7 +262,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //for each target value of the function










 for(AnnotatedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1, retSiteN, d5p_restoredCtx, n, false);










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }










 }










 }



......@@ -275,7 +275,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for (N returnSiteN : returnSiteNs) {










 FlowFunction<FieldRef, D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);










 for(AnnotatedFact<FieldRef, D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))










 propagate(d1, returnSiteN, d3.getFact(), n, false);










 propagate(new PathEdge<>(d1, returnSiteN, d3.getFact()), n, false);










 }










 }














......@@ -287,7 +287,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint)) {










 if(edges.remove(edge)) {










 logger.trace("RESUME-EDGE: {}", edge);










 propagate(edge.factAtSource(), edge.getTarget(), edge.factAtTarget(), null, false);










 propagate(edge, edge instanceof ConcretizationPathEdge ? edge.getTarget() : null, false);










 }










 }










 }



......@@ -309,10 +309,12 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 }










 };










 










 propagateConstrained(constraint, new PathEdge<N,D>(










 propagateConstrained(constraint, new ConcretizationPathEdge<>(










 applyConstraint(constraint, incomingEdge.getCallerSourceFact()), 










 incomingEdge.getCallSite(), 










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact())));










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact()),










 method,










 edge.factAtSource()));










 }










 }










 }



......@@ -386,7 +388,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 // for each incoming-call value










 for (AnnotatedFact<FieldRef, D> callerTargetAnnotatedFact : callerTargetFacts) {










 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());










 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);










 propagate(new PathEdge<>(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact), callSite, false);










 }










 }










 }



......@@ -404,7 +406,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 Set<AnnotatedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(AnnotatedFact<FieldRef, D> d5: targets)










 propagate(zeroValue, retSiteC, d5.getFact(), c, true);










 propagate(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c, true);










 }










 }










 //in cases where there are no callers, the return statement would normally not be processed at all;



......@@ -448,7 +450,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagateConstrained(d3.getConstraint(), new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 }










 else










 propagate(d1, m, d3.getFact(), null, false);










 propagate(new PathEdge<>(d1, m, d3.getFact()), null, false);










 }










 }










 }



......@@ -477,17 +479,19 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixesOf(calleeMethod, pathEdge.factAtSource())) {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 PathEdge<N,D> callerEdge = new PathEdge<>(










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(constraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(constraint, incEdge.getCallerCallSiteFact()));










 applyConstraint(constraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 propagate |= propagateConstrained(constraint, callerEdge);










 }










 }










 }










 










 if(propagate) {










 propagate(pathEdge.factAtSource(), pathEdge.getTarget(), pathEdge.factAtTarget(), null, false);










 propagate(pathEdge, pathEdge instanceof ConcretizationPathEdge ? pathEdge.getTarget() : null, false);










 return true;










 } else {










 pauseEdge(pathEdge);



......@@ -536,28 +540,40 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 /**










	 * Propagates the flow further down the exploded super graph. 










	 * @param sourceVal the source value of the propagated summary edge










	 * @param target the target statement










	 * @param targetVal the target value at the target statement










	 * @param edge the PathEdge that should be propagated










	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IFDSSolver}) 










	 * @param isUnbalancedReturn <code>true</code> if this edge is propagating an unbalanced return










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IFDSSolver})










	 */










 protected void propagate(D sourceVal, N target, D targetVal,










 protected void propagate(PathEdge<N,D> edge,










 /* deliberately exposed to clients */ N relatedCallSite,










 /* deliberately exposed to clients */ boolean isUnbalancedReturn) {










 final PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 










 final D existingVal = jumpFn.addFunction(edge);










 //TODO: Merge d.* and d.*\{x} as d.*










 if (existingVal != null) {










 if (existingVal != targetVal)










 existingVal.addNeighbor(targetVal);










 }










 else {










 scheduleEdgeProcessing(edge);










 if(targetVal!=zeroValue)










 logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);










 










 if(edge instanceof ConcretizationPathEdge) {










 ConcretizationPathEdge<M, N, D> concEdge = (ConcretizationPathEdge<M,N,D>) edge;










 jumpFn.addFunction(concEdge);










 










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(concEdge.getCalleeSourceFact(), 










 concEdge.getTarget(), concEdge.factAtSource(), concEdge.factAtTarget());










 if (!addIncoming(concEdge.getCalleeMethod(), incomingEdge))










 return;










 










 resumeEdges(concEdge.getCalleeMethod(), concEdge.getCalleeSourceFact());










 registerInterestedCaller(concEdge.getCalleeMethod(), incomingEdge);










 } else {










 //TODO: Merge d.* and d.*\{x} as d.*










 if (existingVal != null) {










 if (existingVal != edge.factAtTarget())










 existingVal.addNeighbor(edge.factAtTarget());










 }










 else {










 scheduleEdgeProcessing(edge);










 if(edge.factAtTarget()!=zeroValue)










 logger.trace("EDGE: {}: {}", icfg.getMethodOf(edge.getTarget()), edge);










 }










 }










 }














......














test/heros/alias/FieldSensitiveSolverTest.java








View file @ 05779cea






......@@ -147,7 +147,7 @@ public class FieldSensitiveSolverTest {









 










 helper.method("bar",










 startPoints("c"),










 callSite("c").calls("xyz", flow("2", "3"), flow("2.f", "3.f")));










 callSite("c").calls("xyz", flow("2", "3")));










 










 helper.method("xyz", 










 startPoints("d"),



......@@ -245,7 +245,7 @@ public class FieldSensitiveSolverTest {









 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.f")),










 callSite("b").calls("bar", flow("1.f", "2"), flow("1.f^f", "2^f")));










 callSite("b").calls("bar", flow("1.f", "2")));










 










 helper.method("bar",










 startPoints("c"),



......@@ -283,7 +283,7 @@ public class FieldSensitiveSolverTest {









 










 helper.method("bar",










 startPoints("c"),










 callSite("c").calls("xyz", flow("2", "3"), flow("2^f", "3^f")));










 callSite("c").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),



......@@ -315,12 +315,12 @@ public class FieldSensitiveSolverTest {









 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.f")),










 callSite("b").calls("bar", flow("1.f", "2.f")).retSite("e", kill("1.f")),










 callSite("e").calls("bar", flow("4", "2"), flow("4^f", "2^f")).retSite("f", kill("4"), kill("4^f") /*unwanted call2ret*/));










 callSite("e").calls("bar", flow("4", "2")).retSite("f", kill("4")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("2", writeField("f"), "2^f"), flow("2", "3")),










 exitStmt("d").returns(over("b"), to("e"), flow("3.f", "4")).returns(over("e"), to("f"), kill("3"), kill("3^f"), kill("2^f"))); 










 exitStmt("d").returns(over("b"), to("e"), flow("3.f", "4")).returns(over("e"), to("f"), kill("3"), kill("2^f"))); 










 










 helper.runSolver(false, "a");










 }



......@@ -347,12 +347,12 @@ public class FieldSensitiveSolverTest {









 normalStmt("a").succ("b", flow("0", "1.g")),










 callSite("b").calls("bar", flow("1.g", "1.g")).retSite("e", kill("1.g")),










 normalStmt("e").succ("f", flow("1.g", "3")),










 callSite("f").calls("bar", flow("3", "1"), flow("3.f", "1.f")).retSite("g", kill("3"), kill("3.f") /* TODO: we want to get rid of kill(3.f) */)); //0->3 at f, should generate 0->3.f as well, because 1.f is paused on caller side










 callSite("f").calls("bar", flow("3", "1")).retSite("g", kill("3"))); 










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("1", readField("f"), "2"), flow("1", "1")),










 exitStmt("d").returns(over("b"), to("e"), flow("1.g", "1.g") /* ignore fact 2, not possible with this caller ctx*/).returns(over("f"), to("g"), kill("1"), kill("1.f"), kill("2")));










 exitStmt("d").returns(over("b"), to("e"), flow("1.g", "1.g") /* ignore fact 2, not possible with this caller ctx*/).returns(over("f"), to("g"), kill("1"), kill("2")));










 










 helper.runSolver(false, "a");










 }



......@@ -378,7 +378,7 @@ public class FieldSensitiveSolverTest {









 










 helper.method("bar",










 startPoints("b"),










 callSite("b").calls("xyz", flow("1", "1"), flow("1.f", "1.f"), flow("1.g", "1.g")).retSite("e", kill("1"), kill("1.f"), kill("1.g")),










 callSite("b").calls("xyz", flow("1", "1")).retSite("e", kill("1")),










 exitStmt("e").returns(over("a"), to("f"), flow("2", "2")));










 










 helper.method("xyz",



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
05779cea


authored
Jan 07, 2015
by


Johannes Lerch



Browse files



Commit
05779cea


authored
Jan 07, 2015
by


Johannes Lerch

05779ceaauthoredbyJohannes Lerch

"interest/concrretization" edges in callers are no longer propagated as

normal path edges, but immediately registered as jump functions to avoid
duplications and avoidable merges





parent
1cd34e9e
















parent
1cd34e9e





parent












Changes
3
3


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/alias/ConcretizationPathEdge.java



0 â†’ 100644







View file @ 05779cea













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.solver.PathEdge;





















public class ConcretizationPathEdge<M, N,D> extends PathEdge<N, D> {





















 private M calleeMethod;










 private D calleeSourceFact;





















 public ConcretizationPathEdge(D dSource, N target, D dTarget, M calleeMethod, D calleeSourceFact) {










 super(dSource, target, dTarget);










 this.calleeMethod = calleeMethod;










 this.calleeSourceFact = calleeSourceFact;










 }





















 public M getCalleeMethod() {










 return calleeMethod;










 }





















 public D getCalleeSourceFact() {










 return calleeSourceFact;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = super.hashCode();










 result = prime * result + ((calleeMethod == null) ? 0 : calleeMethod.hashCode());










 result = prime * result + ((calleeSourceFact == null) ? 0 : calleeSourceFact.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (!super.equals(obj))










 return false;










 if (!(obj instanceof ConcretizationPathEdge))










 return false;










 ConcretizationPathEdge other = (ConcretizationPathEdge) obj;










 if (calleeMethod == null) {










 if (other.calleeMethod != null)










 return false;










 } else if (!calleeMethod.equals(other.calleeMethod))










 return false;










 if (calleeSourceFact == null) {










 if (other.calleeSourceFact != null)










 return false;










 } else if (!calleeSourceFact.equals(other.calleeSourceFact))










 return false;










 return true;










 }





















 @Override










 public String toString() {










 return "ConcretizationPathEdge "+super.toString()+ " registers interest at "+calleeMethod+" in "+calleeSourceFact;










 }










}














src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 05779cea






......@@ -144,7 +144,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue())










 propagate(zeroValue, startPoint, val, null, false);










 propagate(new PathEdge<>(zeroValue, startPoint, val), null, false);










 jumpFn.addFunction(new PathEdge<N, D>(zeroValue, startPoint, zeroValue));










 }










 }



......@@ -230,7 +230,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(N sP: startPointsOf) {










 //create initial self-loop










 D abstractStartPointFact = d3.getFact().cloneWithAccessPath(new AccessPath<FieldRef>());










 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15










 propagate(new PathEdge<>(abstractStartPointFact, sP, abstractStartPointFact), n, false); //line 15










 }










 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>



......@@ -262,7 +262,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //for each target value of the function










 for(AnnotatedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1, retSiteN, d5p_restoredCtx, n, false);










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }










 }










 }



......@@ -275,7 +275,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for (N returnSiteN : returnSiteNs) {










 FlowFunction<FieldRef, D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);










 for(AnnotatedFact<FieldRef, D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))










 propagate(d1, returnSiteN, d3.getFact(), n, false);










 propagate(new PathEdge<>(d1, returnSiteN, d3.getFact()), n, false);










 }










 }














......@@ -287,7 +287,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint)) {










 if(edges.remove(edge)) {










 logger.trace("RESUME-EDGE: {}", edge);










 propagate(edge.factAtSource(), edge.getTarget(), edge.factAtTarget(), null, false);










 propagate(edge, edge instanceof ConcretizationPathEdge ? edge.getTarget() : null, false);










 }










 }










 }



......@@ -309,10 +309,12 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 }










 };










 










 propagateConstrained(constraint, new PathEdge<N,D>(










 propagateConstrained(constraint, new ConcretizationPathEdge<>(










 applyConstraint(constraint, incomingEdge.getCallerSourceFact()), 










 incomingEdge.getCallSite(), 










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact())));










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact()),










 method,










 edge.factAtSource()));










 }










 }










 }



......@@ -386,7 +388,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 // for each incoming-call value










 for (AnnotatedFact<FieldRef, D> callerTargetAnnotatedFact : callerTargetFacts) {










 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());










 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);










 propagate(new PathEdge<>(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact), callSite, false);










 }










 }










 }



......@@ -404,7 +406,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 Set<AnnotatedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(AnnotatedFact<FieldRef, D> d5: targets)










 propagate(zeroValue, retSiteC, d5.getFact(), c, true);










 propagate(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c, true);










 }










 }










 //in cases where there are no callers, the return statement would normally not be processed at all;



......@@ -448,7 +450,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagateConstrained(d3.getConstraint(), new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 }










 else










 propagate(d1, m, d3.getFact(), null, false);










 propagate(new PathEdge<>(d1, m, d3.getFact()), null, false);










 }










 }










 }



......@@ -477,17 +479,19 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixesOf(calleeMethod, pathEdge.factAtSource())) {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 PathEdge<N,D> callerEdge = new PathEdge<>(










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(constraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(constraint, incEdge.getCallerCallSiteFact()));










 applyConstraint(constraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 propagate |= propagateConstrained(constraint, callerEdge);










 }










 }










 }










 










 if(propagate) {










 propagate(pathEdge.factAtSource(), pathEdge.getTarget(), pathEdge.factAtTarget(), null, false);










 propagate(pathEdge, pathEdge instanceof ConcretizationPathEdge ? pathEdge.getTarget() : null, false);










 return true;










 } else {










 pauseEdge(pathEdge);



......@@ -536,28 +540,40 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 /**










	 * Propagates the flow further down the exploded super graph. 










	 * @param sourceVal the source value of the propagated summary edge










	 * @param target the target statement










	 * @param targetVal the target value at the target statement










	 * @param edge the PathEdge that should be propagated










	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IFDSSolver}) 










	 * @param isUnbalancedReturn <code>true</code> if this edge is propagating an unbalanced return










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IFDSSolver})










	 */










 protected void propagate(D sourceVal, N target, D targetVal,










 protected void propagate(PathEdge<N,D> edge,










 /* deliberately exposed to clients */ N relatedCallSite,










 /* deliberately exposed to clients */ boolean isUnbalancedReturn) {










 final PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 










 final D existingVal = jumpFn.addFunction(edge);










 //TODO: Merge d.* and d.*\{x} as d.*










 if (existingVal != null) {










 if (existingVal != targetVal)










 existingVal.addNeighbor(targetVal);










 }










 else {










 scheduleEdgeProcessing(edge);










 if(targetVal!=zeroValue)










 logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);










 










 if(edge instanceof ConcretizationPathEdge) {










 ConcretizationPathEdge<M, N, D> concEdge = (ConcretizationPathEdge<M,N,D>) edge;










 jumpFn.addFunction(concEdge);










 










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(concEdge.getCalleeSourceFact(), 










 concEdge.getTarget(), concEdge.factAtSource(), concEdge.factAtTarget());










 if (!addIncoming(concEdge.getCalleeMethod(), incomingEdge))










 return;










 










 resumeEdges(concEdge.getCalleeMethod(), concEdge.getCalleeSourceFact());










 registerInterestedCaller(concEdge.getCalleeMethod(), incomingEdge);










 } else {










 //TODO: Merge d.* and d.*\{x} as d.*










 if (existingVal != null) {










 if (existingVal != edge.factAtTarget())










 existingVal.addNeighbor(edge.factAtTarget());










 }










 else {










 scheduleEdgeProcessing(edge);










 if(edge.factAtTarget()!=zeroValue)










 logger.trace("EDGE: {}: {}", icfg.getMethodOf(edge.getTarget()), edge);










 }










 }










 }














......














test/heros/alias/FieldSensitiveSolverTest.java








View file @ 05779cea






......@@ -147,7 +147,7 @@ public class FieldSensitiveSolverTest {









 










 helper.method("bar",










 startPoints("c"),










 callSite("c").calls("xyz", flow("2", "3"), flow("2.f", "3.f")));










 callSite("c").calls("xyz", flow("2", "3")));










 










 helper.method("xyz", 










 startPoints("d"),



......@@ -245,7 +245,7 @@ public class FieldSensitiveSolverTest {









 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.f")),










 callSite("b").calls("bar", flow("1.f", "2"), flow("1.f^f", "2^f")));










 callSite("b").calls("bar", flow("1.f", "2")));










 










 helper.method("bar",










 startPoints("c"),



......@@ -283,7 +283,7 @@ public class FieldSensitiveSolverTest {









 










 helper.method("bar",










 startPoints("c"),










 callSite("c").calls("xyz", flow("2", "3"), flow("2^f", "3^f")));










 callSite("c").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),



......@@ -315,12 +315,12 @@ public class FieldSensitiveSolverTest {









 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.f")),










 callSite("b").calls("bar", flow("1.f", "2.f")).retSite("e", kill("1.f")),










 callSite("e").calls("bar", flow("4", "2"), flow("4^f", "2^f")).retSite("f", kill("4"), kill("4^f") /*unwanted call2ret*/));










 callSite("e").calls("bar", flow("4", "2")).retSite("f", kill("4")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("2", writeField("f"), "2^f"), flow("2", "3")),










 exitStmt("d").returns(over("b"), to("e"), flow("3.f", "4")).returns(over("e"), to("f"), kill("3"), kill("3^f"), kill("2^f"))); 










 exitStmt("d").returns(over("b"), to("e"), flow("3.f", "4")).returns(over("e"), to("f"), kill("3"), kill("2^f"))); 










 










 helper.runSolver(false, "a");










 }



......@@ -347,12 +347,12 @@ public class FieldSensitiveSolverTest {









 normalStmt("a").succ("b", flow("0", "1.g")),










 callSite("b").calls("bar", flow("1.g", "1.g")).retSite("e", kill("1.g")),










 normalStmt("e").succ("f", flow("1.g", "3")),










 callSite("f").calls("bar", flow("3", "1"), flow("3.f", "1.f")).retSite("g", kill("3"), kill("3.f") /* TODO: we want to get rid of kill(3.f) */)); //0->3 at f, should generate 0->3.f as well, because 1.f is paused on caller side










 callSite("f").calls("bar", flow("3", "1")).retSite("g", kill("3"))); 










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("1", readField("f"), "2"), flow("1", "1")),










 exitStmt("d").returns(over("b"), to("e"), flow("1.g", "1.g") /* ignore fact 2, not possible with this caller ctx*/).returns(over("f"), to("g"), kill("1"), kill("1.f"), kill("2")));










 exitStmt("d").returns(over("b"), to("e"), flow("1.g", "1.g") /* ignore fact 2, not possible with this caller ctx*/).returns(over("f"), to("g"), kill("1"), kill("2")));










 










 helper.runSolver(false, "a");










 }



......@@ -378,7 +378,7 @@ public class FieldSensitiveSolverTest {









 










 helper.method("bar",










 startPoints("b"),










 callSite("b").calls("xyz", flow("1", "1"), flow("1.f", "1.f"), flow("1.g", "1.g")).retSite("e", kill("1"), kill("1.f"), kill("1.g")),










 callSite("b").calls("xyz", flow("1", "1")).retSite("e", kill("1")),










 exitStmt("e").returns(over("a"), to("f"), flow("2", "2")));










 










 helper.method("xyz",



......














src/heros/alias/ConcretizationPathEdge.java



0 â†’ 100644







View file @ 05779cea













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.solver.PathEdge;





















public class ConcretizationPathEdge<M, N,D> extends PathEdge<N, D> {





















 private M calleeMethod;










 private D calleeSourceFact;





















 public ConcretizationPathEdge(D dSource, N target, D dTarget, M calleeMethod, D calleeSourceFact) {










 super(dSource, target, dTarget);










 this.calleeMethod = calleeMethod;










 this.calleeSourceFact = calleeSourceFact;










 }





















 public M getCalleeMethod() {










 return calleeMethod;










 }





















 public D getCalleeSourceFact() {










 return calleeSourceFact;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = super.hashCode();










 result = prime * result + ((calleeMethod == null) ? 0 : calleeMethod.hashCode());










 result = prime * result + ((calleeSourceFact == null) ? 0 : calleeSourceFact.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (!super.equals(obj))










 return false;










 if (!(obj instanceof ConcretizationPathEdge))










 return false;










 ConcretizationPathEdge other = (ConcretizationPathEdge) obj;










 if (calleeMethod == null) {










 if (other.calleeMethod != null)










 return false;










 } else if (!calleeMethod.equals(other.calleeMethod))










 return false;










 if (calleeSourceFact == null) {










 if (other.calleeSourceFact != null)










 return false;










 } else if (!calleeSourceFact.equals(other.calleeSourceFact))










 return false;










 return true;










 }





















 @Override










 public String toString() {










 return "ConcretizationPathEdge "+super.toString()+ " registers interest at "+calleeMethod+" in "+calleeSourceFact;










 }










}












src/heros/alias/ConcretizationPathEdge.java



0 â†’ 100644







View file @ 05779cea








src/heros/alias/ConcretizationPathEdge.java



0 â†’ 100644









View file @ 05779cea


05779cea










/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.solver.PathEdge;





















public class ConcretizationPathEdge<M, N,D> extends PathEdge<N, D> {





















 private M calleeMethod;










 private D calleeSourceFact;





















 public ConcretizationPathEdge(D dSource, N target, D dTarget, M calleeMethod, D calleeSourceFact) {










 super(dSource, target, dTarget);










 this.calleeMethod = calleeMethod;










 this.calleeSourceFact = calleeSourceFact;










 }





















 public M getCalleeMethod() {










 return calleeMethod;










 }





















 public D getCalleeSourceFact() {










 return calleeSourceFact;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = super.hashCode();










 result = prime * result + ((calleeMethod == null) ? 0 : calleeMethod.hashCode());










 result = prime * result + ((calleeSourceFact == null) ? 0 : calleeSourceFact.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (!super.equals(obj))










 return false;










 if (!(obj instanceof ConcretizationPathEdge))










 return false;










 ConcretizationPathEdge other = (ConcretizationPathEdge) obj;










 if (calleeMethod == null) {










 if (other.calleeMethod != null)










 return false;










 } else if (!calleeMethod.equals(other.calleeMethod))










 return false;










 if (calleeSourceFact == null) {










 if (other.calleeSourceFact != null)










 return false;










 } else if (!calleeSourceFact.equals(other.calleeSourceFact))










 return false;










 return true;










 }





















 @Override










 public String toString() {










 return "ConcretizationPathEdge "+super.toString()+ " registers interest at "+calleeMethod+" in "+calleeSourceFact;










 }










}













/*******************************************************************************










 * Copyright (c) 2015 Johannes Lerch.










 * All rights reserved. This program and the accompanying materials










 * are made available under the terms of the GNU Lesser Public License v2.1










 * which accompanies this distribution, and is available at










 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html










 * 










 * Contributors:










 *     Johannes Lerch - initial API and implementation










 ******************************************************************************/










package heros.alias;





















import heros.solver.PathEdge;





















public class ConcretizationPathEdge<M, N,D> extends PathEdge<N, D> {





















 private M calleeMethod;










 private D calleeSourceFact;





















 public ConcretizationPathEdge(D dSource, N target, D dTarget, M calleeMethod, D calleeSourceFact) {










 super(dSource, target, dTarget);










 this.calleeMethod = calleeMethod;










 this.calleeSourceFact = calleeSourceFact;










 }





















 public M getCalleeMethod() {










 return calleeMethod;










 }





















 public D getCalleeSourceFact() {










 return calleeSourceFact;










 }





















 @Override










 public int hashCode() {










 final int prime = 31;










 int result = super.hashCode();










 result = prime * result + ((calleeMethod == null) ? 0 : calleeMethod.hashCode());










 result = prime * result + ((calleeSourceFact == null) ? 0 : calleeSourceFact.hashCode());










 return result;










 }





















 @Override










 public boolean equals(Object obj) {










 if (this == obj)










 return true;










 if (!super.equals(obj))










 return false;










 if (!(obj instanceof ConcretizationPathEdge))










 return false;










 ConcretizationPathEdge other = (ConcretizationPathEdge) obj;










 if (calleeMethod == null) {










 if (other.calleeMethod != null)










 return false;










 } else if (!calleeMethod.equals(other.calleeMethod))










 return false;










 if (calleeSourceFact == null) {










 if (other.calleeSourceFact != null)










 return false;










 } else if (!calleeSourceFact.equals(other.calleeSourceFact))










 return false;










 return true;










 }





















 @Override










 public String toString() {










 return "ConcretizationPathEdge "+super.toString()+ " registers interest at "+calleeMethod+" in "+calleeSourceFact;










 }










}


/*******************************************************************************/******************************************************************************* * Copyright (c) 2015 Johannes Lerch. * Copyright (c) 2015 Johannes Lerch. * All rights reserved. This program and the accompanying materials * All rights reserved. This program and the accompanying materials * are made available under the terms of the GNU Lesser Public License v2.1 * are made available under the terms of the GNU Lesser Public License v2.1 * which accompanies this distribution, and is available at * which accompanies this distribution, and is available at * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html *  *  * Contributors: * Contributors: *     Johannes Lerch - initial API and implementation *     Johannes Lerch - initial API and implementation ******************************************************************************/ ******************************************************************************/package heros.alias;packageheros.alias;import heros.solver.PathEdge;importheros.solver.PathEdge;public class ConcretizationPathEdge<M, N,D> extends PathEdge<N, D> {publicclassConcretizationPathEdge<M,N,D>extendsPathEdge<N,D>{ private M calleeMethod;privateMcalleeMethod; private D calleeSourceFact;privateDcalleeSourceFact; public ConcretizationPathEdge(D dSource, N target, D dTarget, M calleeMethod, D calleeSourceFact) {publicConcretizationPathEdge(DdSource,Ntarget,DdTarget,McalleeMethod,DcalleeSourceFact){ super(dSource, target, dTarget);super(dSource,target,dTarget); this.calleeMethod = calleeMethod;this.calleeMethod=calleeMethod; this.calleeSourceFact = calleeSourceFact;this.calleeSourceFact=calleeSourceFact; }} public M getCalleeMethod() {publicMgetCalleeMethod(){ return calleeMethod;returncalleeMethod; }} public D getCalleeSourceFact() {publicDgetCalleeSourceFact(){ return calleeSourceFact;returncalleeSourceFact; }} @Override@Override public int hashCode() {publicinthashCode(){ final int prime = 31;finalintprime=31; int result = super.hashCode();intresult=super.hashCode(); result = prime * result + ((calleeMethod == null) ? 0 : calleeMethod.hashCode());result=prime*result+((calleeMethod==null)?0:calleeMethod.hashCode()); result = prime * result + ((calleeSourceFact == null) ? 0 : calleeSourceFact.hashCode());result=prime*result+((calleeSourceFact==null)?0:calleeSourceFact.hashCode()); return result;returnresult; }} @Override@Override public boolean equals(Object obj) {publicbooleanequals(Objectobj){ if (this == obj)if(this==obj) return true;returntrue; if (!super.equals(obj))if(!super.equals(obj)) return false;returnfalse; if (!(obj instanceof ConcretizationPathEdge))if(!(objinstanceofConcretizationPathEdge)) return false;returnfalse; ConcretizationPathEdge other = (ConcretizationPathEdge) obj;ConcretizationPathEdgeother=(ConcretizationPathEdge)obj; if (calleeMethod == null) {if(calleeMethod==null){ if (other.calleeMethod != null)if(other.calleeMethod!=null) return false;returnfalse; } else if (!calleeMethod.equals(other.calleeMethod))}elseif(!calleeMethod.equals(other.calleeMethod)) return false;returnfalse; if (calleeSourceFact == null) {if(calleeSourceFact==null){ if (other.calleeSourceFact != null)if(other.calleeSourceFact!=null) return false;returnfalse; } else if (!calleeSourceFact.equals(other.calleeSourceFact))}elseif(!calleeSourceFact.equals(other.calleeSourceFact)) return false;returnfalse; return true;returntrue; }} @Override@Override public String toString() {publicStringtoString(){ return "ConcretizationPathEdge "+super.toString()+ " registers interest at "+calleeMethod+" in "+calleeSourceFact;return"ConcretizationPathEdge "+super.toString()+" registers interest at "+calleeMethod+" in "+calleeSourceFact; }}}}








src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 05779cea






......@@ -144,7 +144,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue())










 propagate(zeroValue, startPoint, val, null, false);










 propagate(new PathEdge<>(zeroValue, startPoint, val), null, false);










 jumpFn.addFunction(new PathEdge<N, D>(zeroValue, startPoint, zeroValue));










 }










 }



......@@ -230,7 +230,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(N sP: startPointsOf) {










 //create initial self-loop










 D abstractStartPointFact = d3.getFact().cloneWithAccessPath(new AccessPath<FieldRef>());










 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15










 propagate(new PathEdge<>(abstractStartPointFact, sP, abstractStartPointFact), n, false); //line 15










 }










 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>



......@@ -262,7 +262,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //for each target value of the function










 for(AnnotatedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1, retSiteN, d5p_restoredCtx, n, false);










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }










 }










 }



......@@ -275,7 +275,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for (N returnSiteN : returnSiteNs) {










 FlowFunction<FieldRef, D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);










 for(AnnotatedFact<FieldRef, D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))










 propagate(d1, returnSiteN, d3.getFact(), n, false);










 propagate(new PathEdge<>(d1, returnSiteN, d3.getFact()), n, false);










 }










 }














......@@ -287,7 +287,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint)) {










 if(edges.remove(edge)) {










 logger.trace("RESUME-EDGE: {}", edge);










 propagate(edge.factAtSource(), edge.getTarget(), edge.factAtTarget(), null, false);










 propagate(edge, edge instanceof ConcretizationPathEdge ? edge.getTarget() : null, false);










 }










 }










 }



......@@ -309,10 +309,12 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 }










 };










 










 propagateConstrained(constraint, new PathEdge<N,D>(










 propagateConstrained(constraint, new ConcretizationPathEdge<>(










 applyConstraint(constraint, incomingEdge.getCallerSourceFact()), 










 incomingEdge.getCallSite(), 










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact())));










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact()),










 method,










 edge.factAtSource()));










 }










 }










 }



......@@ -386,7 +388,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 // for each incoming-call value










 for (AnnotatedFact<FieldRef, D> callerTargetAnnotatedFact : callerTargetFacts) {










 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());










 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);










 propagate(new PathEdge<>(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact), callSite, false);










 }










 }










 }



......@@ -404,7 +406,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 Set<AnnotatedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(AnnotatedFact<FieldRef, D> d5: targets)










 propagate(zeroValue, retSiteC, d5.getFact(), c, true);










 propagate(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c, true);










 }










 }










 //in cases where there are no callers, the return statement would normally not be processed at all;



......@@ -448,7 +450,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagateConstrained(d3.getConstraint(), new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 }










 else










 propagate(d1, m, d3.getFact(), null, false);










 propagate(new PathEdge<>(d1, m, d3.getFact()), null, false);










 }










 }










 }



......@@ -477,17 +479,19 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixesOf(calleeMethod, pathEdge.factAtSource())) {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 PathEdge<N,D> callerEdge = new PathEdge<>(










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(constraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(constraint, incEdge.getCallerCallSiteFact()));










 applyConstraint(constraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 propagate |= propagateConstrained(constraint, callerEdge);










 }










 }










 }










 










 if(propagate) {










 propagate(pathEdge.factAtSource(), pathEdge.getTarget(), pathEdge.factAtTarget(), null, false);










 propagate(pathEdge, pathEdge instanceof ConcretizationPathEdge ? pathEdge.getTarget() : null, false);










 return true;










 } else {










 pauseEdge(pathEdge);



......@@ -536,28 +540,40 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 /**










	 * Propagates the flow further down the exploded super graph. 










	 * @param sourceVal the source value of the propagated summary edge










	 * @param target the target statement










	 * @param targetVal the target value at the target statement










	 * @param edge the PathEdge that should be propagated










	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IFDSSolver}) 










	 * @param isUnbalancedReturn <code>true</code> if this edge is propagating an unbalanced return










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IFDSSolver})










	 */










 protected void propagate(D sourceVal, N target, D targetVal,










 protected void propagate(PathEdge<N,D> edge,










 /* deliberately exposed to clients */ N relatedCallSite,










 /* deliberately exposed to clients */ boolean isUnbalancedReturn) {










 final PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 










 final D existingVal = jumpFn.addFunction(edge);










 //TODO: Merge d.* and d.*\{x} as d.*










 if (existingVal != null) {










 if (existingVal != targetVal)










 existingVal.addNeighbor(targetVal);










 }










 else {










 scheduleEdgeProcessing(edge);










 if(targetVal!=zeroValue)










 logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);










 










 if(edge instanceof ConcretizationPathEdge) {










 ConcretizationPathEdge<M, N, D> concEdge = (ConcretizationPathEdge<M,N,D>) edge;










 jumpFn.addFunction(concEdge);










 










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(concEdge.getCalleeSourceFact(), 










 concEdge.getTarget(), concEdge.factAtSource(), concEdge.factAtTarget());










 if (!addIncoming(concEdge.getCalleeMethod(), incomingEdge))










 return;










 










 resumeEdges(concEdge.getCalleeMethod(), concEdge.getCalleeSourceFact());










 registerInterestedCaller(concEdge.getCalleeMethod(), incomingEdge);










 } else {










 //TODO: Merge d.* and d.*\{x} as d.*










 if (existingVal != null) {










 if (existingVal != edge.factAtTarget())










 existingVal.addNeighbor(edge.factAtTarget());










 }










 else {










 scheduleEdgeProcessing(edge);










 if(edge.factAtTarget()!=zeroValue)










 logger.trace("EDGE: {}: {}", icfg.getMethodOf(edge.getTarget()), edge);










 }










 }










 }














......












src/heros/alias/FieldSensitiveIFDSSolver.java








View file @ 05779cea








src/heros/alias/FieldSensitiveIFDSSolver.java










View file @ 05779cea


05779cea



......@@ -144,7 +144,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue())










 propagate(zeroValue, startPoint, val, null, false);










 propagate(new PathEdge<>(zeroValue, startPoint, val), null, false);










 jumpFn.addFunction(new PathEdge<N, D>(zeroValue, startPoint, zeroValue));










 }










 }



......@@ -230,7 +230,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(N sP: startPointsOf) {










 //create initial self-loop










 D abstractStartPointFact = d3.getFact().cloneWithAccessPath(new AccessPath<FieldRef>());










 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15










 propagate(new PathEdge<>(abstractStartPointFact, sP, abstractStartPointFact), n, false); //line 15










 }










 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>



......@@ -262,7 +262,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //for each target value of the function










 for(AnnotatedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1, retSiteN, d5p_restoredCtx, n, false);










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }










 }










 }



......@@ -275,7 +275,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for (N returnSiteN : returnSiteNs) {










 FlowFunction<FieldRef, D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);










 for(AnnotatedFact<FieldRef, D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))










 propagate(d1, returnSiteN, d3.getFact(), n, false);










 propagate(new PathEdge<>(d1, returnSiteN, d3.getFact()), n, false);










 }










 }














......@@ -287,7 +287,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint)) {










 if(edges.remove(edge)) {










 logger.trace("RESUME-EDGE: {}", edge);










 propagate(edge.factAtSource(), edge.getTarget(), edge.factAtTarget(), null, false);










 propagate(edge, edge instanceof ConcretizationPathEdge ? edge.getTarget() : null, false);










 }










 }










 }



......@@ -309,10 +309,12 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 }










 };










 










 propagateConstrained(constraint, new PathEdge<N,D>(










 propagateConstrained(constraint, new ConcretizationPathEdge<>(










 applyConstraint(constraint, incomingEdge.getCallerSourceFact()), 










 incomingEdge.getCallSite(), 










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact())));










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact()),










 method,










 edge.factAtSource()));










 }










 }










 }



......@@ -386,7 +388,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 // for each incoming-call value










 for (AnnotatedFact<FieldRef, D> callerTargetAnnotatedFact : callerTargetFacts) {










 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());










 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);










 propagate(new PathEdge<>(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact), callSite, false);










 }










 }










 }



......@@ -404,7 +406,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 Set<AnnotatedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(AnnotatedFact<FieldRef, D> d5: targets)










 propagate(zeroValue, retSiteC, d5.getFact(), c, true);










 propagate(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c, true);










 }










 }










 //in cases where there are no callers, the return statement would normally not be processed at all;



......@@ -448,7 +450,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagateConstrained(d3.getConstraint(), new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 }










 else










 propagate(d1, m, d3.getFact(), null, false);










 propagate(new PathEdge<>(d1, m, d3.getFact()), null, false);










 }










 }










 }



......@@ -477,17 +479,19 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixesOf(calleeMethod, pathEdge.factAtSource())) {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 PathEdge<N,D> callerEdge = new PathEdge<>(










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(constraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(constraint, incEdge.getCallerCallSiteFact()));










 applyConstraint(constraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 propagate |= propagateConstrained(constraint, callerEdge);










 }










 }










 }










 










 if(propagate) {










 propagate(pathEdge.factAtSource(), pathEdge.getTarget(), pathEdge.factAtTarget(), null, false);










 propagate(pathEdge, pathEdge instanceof ConcretizationPathEdge ? pathEdge.getTarget() : null, false);










 return true;










 } else {










 pauseEdge(pathEdge);



......@@ -536,28 +540,40 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 /**










	 * Propagates the flow further down the exploded super graph. 










	 * @param sourceVal the source value of the propagated summary edge










	 * @param target the target statement










	 * @param targetVal the target value at the target statement










	 * @param edge the PathEdge that should be propagated










	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IFDSSolver}) 










	 * @param isUnbalancedReturn <code>true</code> if this edge is propagating an unbalanced return










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IFDSSolver})










	 */










 protected void propagate(D sourceVal, N target, D targetVal,










 protected void propagate(PathEdge<N,D> edge,










 /* deliberately exposed to clients */ N relatedCallSite,










 /* deliberately exposed to clients */ boolean isUnbalancedReturn) {










 final PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 










 final D existingVal = jumpFn.addFunction(edge);










 //TODO: Merge d.* and d.*\{x} as d.*










 if (existingVal != null) {










 if (existingVal != targetVal)










 existingVal.addNeighbor(targetVal);










 }










 else {










 scheduleEdgeProcessing(edge);










 if(targetVal!=zeroValue)










 logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);










 










 if(edge instanceof ConcretizationPathEdge) {










 ConcretizationPathEdge<M, N, D> concEdge = (ConcretizationPathEdge<M,N,D>) edge;










 jumpFn.addFunction(concEdge);










 










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(concEdge.getCalleeSourceFact(), 










 concEdge.getTarget(), concEdge.factAtSource(), concEdge.factAtTarget());










 if (!addIncoming(concEdge.getCalleeMethod(), incomingEdge))










 return;










 










 resumeEdges(concEdge.getCalleeMethod(), concEdge.getCalleeSourceFact());










 registerInterestedCaller(concEdge.getCalleeMethod(), incomingEdge);










 } else {










 //TODO: Merge d.* and d.*\{x} as d.*










 if (existingVal != null) {










 if (existingVal != edge.factAtTarget())










 existingVal.addNeighbor(edge.factAtTarget());










 }










 else {










 scheduleEdgeProcessing(edge);










 if(edge.factAtTarget()!=zeroValue)










 logger.trace("EDGE: {}: {}", icfg.getMethodOf(edge.getTarget()), edge);










 }










 }










 }














......






......@@ -144,7 +144,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {










 N startPoint = seed.getKey();










 for(D val: seed.getValue())










 propagate(zeroValue, startPoint, val, null, false);










 propagate(new PathEdge<>(zeroValue, startPoint, val), null, false);










 jumpFn.addFunction(new PathEdge<N, D>(zeroValue, startPoint, zeroValue));










 }










 }



......@@ -230,7 +230,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(N sP: startPointsOf) {










 //create initial self-loop










 D abstractStartPointFact = d3.getFact().cloneWithAccessPath(new AccessPath<FieldRef>());










 propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15










 propagate(new PathEdge<>(abstractStartPointFact, sP, abstractStartPointFact), n, false); //line 15










 }










 










 //register the fact that <sp,d3> has an incoming edge from <n,d2>



......@@ -262,7 +262,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 //for each target value of the function










 for(AnnotatedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {










 D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());










 propagate(d1, retSiteN, d5p_restoredCtx, n, false);










 propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);










 }










 }










 }



......@@ -275,7 +275,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for (N returnSiteN : returnSiteNs) {










 FlowFunction<FieldRef, D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);










 for(AnnotatedFact<FieldRef, D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))










 propagate(d1, returnSiteN, d3.getFact(), n, false);










 propagate(new PathEdge<>(d1, returnSiteN, d3.getFact()), n, false);










 }










 }














......@@ -287,7 +287,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint)) {










 if(edges.remove(edge)) {










 logger.trace("RESUME-EDGE: {}", edge);










 propagate(edge.factAtSource(), edge.getTarget(), edge.factAtTarget(), null, false);










 propagate(edge, edge instanceof ConcretizationPathEdge ? edge.getTarget() : null, false);










 }










 }










 }



......@@ -309,10 +309,12 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 }










 };










 










 propagateConstrained(constraint, new PathEdge<N,D>(










 propagateConstrained(constraint, new ConcretizationPathEdge<>(










 applyConstraint(constraint, incomingEdge.getCallerSourceFact()), 










 incomingEdge.getCallSite(), 










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact())));










 applyConstraint(constraint, incomingEdge.getCallerCallSiteFact()),










 method,










 edge.factAtSource()));










 }










 }










 }



......@@ -386,7 +388,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 // for each incoming-call value










 for (AnnotatedFact<FieldRef, D> callerTargetAnnotatedFact : callerTargetFacts) {










 D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());










 propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);










 propagate(new PathEdge<>(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact), callSite, false);










 }










 }










 }



......@@ -404,7 +406,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);










 Set<AnnotatedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);










 for(AnnotatedFact<FieldRef, D> d5: targets)










 propagate(zeroValue, retSiteC, d5.getFact(), c, true);










 propagate(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c, true);










 }










 }










 //in cases where there are no callers, the return statement would normally not be processed at all;



......@@ -448,7 +450,7 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 propagateConstrained(d3.getConstraint(), new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));










 }










 else










 propagate(d1, m, d3.getFact(), null, false);










 propagate(new PathEdge<>(d1, m, d3.getFact()), null, false);










 }










 }










 }



......@@ -477,17 +479,19 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixesOf(calleeMethod, pathEdge.factAtSource())) {










 boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for this










 if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {










 PathEdge<N,D> callerEdge = new PathEdge<>(










 PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(










 applyConstraint(constraint, incEdge.getCallerSourceFact()), 










 incEdge.getCallSite(), 










 applyConstraint(constraint, incEdge.getCallerCallSiteFact()));










 applyConstraint(constraint, incEdge.getCallerCallSiteFact()),










 calleeMethod,










 pathEdge.factAtSource());










 propagate |= propagateConstrained(constraint, callerEdge);










 }










 }










 }










 










 if(propagate) {










 propagate(pathEdge.factAtSource(), pathEdge.getTarget(), pathEdge.factAtTarget(), null, false);










 propagate(pathEdge, pathEdge instanceof ConcretizationPathEdge ? pathEdge.getTarget() : null, false);










 return true;










 } else {










 pauseEdge(pathEdge);



......@@ -536,28 +540,40 @@ public class FieldSensitiveIFDSSolver<N, BaseValue, FieldRef, D extends FieldSen









 










 /**










	 * Propagates the flow further down the exploded super graph. 










	 * @param sourceVal the source value of the propagated summary edge










	 * @param target the target statement










	 * @param targetVal the target value at the target statement










	 * @param edge the PathEdge that should be propagated










	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IFDSSolver}) 










	 * @param isUnbalancedReturn <code>true</code> if this edge is propagating an unbalanced return










	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IFDSSolver})










	 */










 protected void propagate(D sourceVal, N target, D targetVal,










 protected void propagate(PathEdge<N,D> edge,










 /* deliberately exposed to clients */ N relatedCallSite,










 /* deliberately exposed to clients */ boolean isUnbalancedReturn) {










 final PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 










 final D existingVal = jumpFn.addFunction(edge);










 //TODO: Merge d.* and d.*\{x} as d.*










 if (existingVal != null) {










 if (existingVal != targetVal)










 existingVal.addNeighbor(targetVal);










 }










 else {










 scheduleEdgeProcessing(edge);










 if(targetVal!=zeroValue)










 logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);










 










 if(edge instanceof ConcretizationPathEdge) {










 ConcretizationPathEdge<M, N, D> concEdge = (ConcretizationPathEdge<M,N,D>) edge;










 jumpFn.addFunction(concEdge);










 










 IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(concEdge.getCalleeSourceFact(), 










 concEdge.getTarget(), concEdge.factAtSource(), concEdge.factAtTarget());










 if (!addIncoming(concEdge.getCalleeMethod(), incomingEdge))










 return;










 










 resumeEdges(concEdge.getCalleeMethod(), concEdge.getCalleeSourceFact());










 registerInterestedCaller(concEdge.getCalleeMethod(), incomingEdge);










 } else {










 //TODO: Merge d.* and d.*\{x} as d.*










 if (existingVal != null) {










 if (existingVal != edge.factAtTarget())










 existingVal.addNeighbor(edge.factAtTarget());










 }










 else {










 scheduleEdgeProcessing(edge);










 if(edge.factAtTarget()!=zeroValue)










 logger.trace("EDGE: {}: {}", icfg.getMethodOf(edge.getTarget()), edge);










 }










 }










 }














......


 for(Entry<N, Set<D>> seed: initialSeeds.entrySet()) {for(Entry<N,Set<D>>seed:initialSeeds.entrySet()){ N startPoint = seed.getKey();NstartPoint=seed.getKey(); for(D val: seed.getValue())for(Dval:seed.getValue()) propagate(zeroValue, startPoint, val, null, false);propagate(zeroValue,startPoint,val,null,false); propagate(new PathEdge<>(zeroValue, startPoint, val), null, false);propagate(newnew PathEdgePathEdge<>(<>(zeroValue,startPoint,val),)null,false); jumpFn.addFunction(new PathEdge<N, D>(zeroValue, startPoint, zeroValue));jumpFn.addFunction(newPathEdge<N,D>(zeroValue,startPoint,zeroValue)); }} }} for(N sP: startPointsOf) {for(NsP:startPointsOf){ //create initial self-loop//create initial self-loop D abstractStartPointFact = d3.getFact().cloneWithAccessPath(new AccessPath<FieldRef>());DabstractStartPointFact=d3.getFact().cloneWithAccessPath(newAccessPath<FieldRef>()); propagate(abstractStartPointFact, sP, abstractStartPointFact, n, false); //line 15propagate(abstractStartPointFact,sP,abstractStartPointFact,n,false);//line 15 propagate(new PathEdge<>(abstractStartPointFact, sP, abstractStartPointFact), n, false); //line 15propagate(newnew PathEdgePathEdge<>(<>(abstractStartPointFact,sP,abstractStartPointFact),)n,false);//line 15 }}  //register the fact that <sp,d3> has an incoming edge from <n,d2>//register the fact that <sp,d3> has an incoming edge from <n,d2> //for each target value of the function//for each target value of the function for(AnnotatedFact<FieldRef, D> d5: computeReturnFlowFunction(retFunction, d4.get(), n)) {for(AnnotatedFact<FieldRef,D>d5:computeReturnFlowFunction(retFunction,d4.get(),n)){ D d5p_restoredCtx = restoreContextOnReturnedFact(d2, d5.getFact());Dd5p_restoredCtx=restoreContextOnReturnedFact(d2,d5.getFact()); propagate(d1, retSiteN, d5p_restoredCtx, n, false);propagate(d1,retSiteN,d5p_restoredCtx,n,false); propagate(new PathEdge<>(d1, retSiteN, d5p_restoredCtx), n, false);propagate(newnew PathEdgePathEdge<>(<>(d1,retSiteN,d5p_restoredCtx),)n,false); }} }} }} for (N returnSiteN : returnSiteNs) {for(NreturnSiteN:returnSiteNs){ FlowFunction<FieldRef, D> callToReturnFlowFunction = flowFunctions.getCallToReturnFlowFunction(n, returnSiteN);FlowFunction<FieldRef,D>callToReturnFlowFunction=flowFunctions.getCallToReturnFlowFunction(n,returnSiteN); for(AnnotatedFact<FieldRef, D> d3: computeCallToReturnFlowFunction(callToReturnFlowFunction, d1, d2))for(AnnotatedFact<FieldRef,D>d3:computeCallToReturnFlowFunction(callToReturnFlowFunction,d1,d2)) propagate(d1, returnSiteN, d3.getFact(), n, false);propagate(d1,returnSiteN,d3.getFact(),n,false); propagate(new PathEdge<>(d1, returnSiteN, d3.getFact()), n, false);propagate(newnew PathEdgePathEdge<>(<>(d1,returnSiteN,d3.getFact()),)n,false); }} }} if(AccessPathUtil.isPrefixOf(edge.factAtSource(), factAtMethodStartPoint)) {if(AccessPathUtil.isPrefixOf(edge.factAtSource(),factAtMethodStartPoint)){ if(edges.remove(edge)) {if(edges.remove(edge)){ logger.trace("RESUME-EDGE: {}", edge);logger.trace("RESUME-EDGE: {}",edge); propagate(edge.factAtSource(), edge.getTarget(), edge.factAtTarget(), null, false);propagate(edge..factAtSourcefactAtSource(),(), edgeedge..getTargetgetTarget(),(),edge.factAtTargetfactA(),,null,false); propagate(edge, edge instanceof ConcretizationPathEdge ? edge.getTarget() : null, false);propagate(edge,, edgeedge instanceofinstanceof ConcretizationPathEdgeConcretizationPathEdge ??edge.getTargetge() ::null,false); }} }} }} }} };};  propagateConstrained(constraint, new PathEdge<N,D>(propagateConstrained(constraint,newPathEdge<NN,,DD>( propagateConstrained(constraint, new ConcretizationPathEdge<>(propagateConstrained(constraint,newConcretizationPathEdgeConcretization<>( applyConstraint(constraint, incomingEdge.getCallerSourceFact()), applyConstraint(constraint,incomingEdge.getCallerSourceFact()), incomingEdge.getCallSite(), incomingEdge.getCallSite(), applyConstraint(constraint, incomingEdge.getCallerCallSiteFact())));applyConstraint(constraint,incomingEdge.getCallerCallSiteFact()))); applyConstraint(constraint, incomingEdge.getCallerCallSiteFact()),applyConstraint(constraint,incomingEdge.getCallerCallSiteFact()), method,method, edge.factAtSource()));edge.factAtSource())); }} }} }} // for each incoming-call value// for each incoming-call value for (AnnotatedFact<FieldRef, D> callerTargetAnnotatedFact : callerTargetFacts) {for(AnnotatedFact<FieldRef,D>callerTargetAnnotatedFact:callerTargetFacts){ D callerTargetFact = restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(), callerTargetAnnotatedFact.getFact());DcallerTargetFact=restoreContextOnReturnedFact(incomingEdge.getCallerCallSiteFact(),callerTargetAnnotatedFact.getFact()); propagate(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact, callSite, false);propagate(incomingEdge.getCallerSourceFact(),retSiteC,callerTargetFact,callSite,false); propagate(new PathEdge<>(incomingEdge.getCallerSourceFact(), retSiteC, callerTargetFact), callSite, false);propagate(newnew PathEdgePathEdge<>(<>(incomingEdge.getCallerSourceFact(),retSiteC,callerTargetFact),)callSite,false); }} }} }} FlowFunction<FieldRef, D> retFunction = flowFunctions.getReturnFlowFunction(c, methodThatNeedsSummary,n,retSiteC);FlowFunction<FieldRef,D>retFunction=flowFunctions.getReturnFlowFunction(c,methodThatNeedsSummary,n,retSiteC); Set<AnnotatedFact<FieldRef, D>> targets = computeReturnFlowFunction(retFunction, d2, c);Set<AnnotatedFact<FieldRef,D>>targets=computeReturnFlowFunction(retFunction,d2,c); for(AnnotatedFact<FieldRef, D> d5: targets)for(AnnotatedFact<FieldRef,D>d5:targets) propagate(zeroValue, retSiteC, d5.getFact(), c, true);propagate(zeroValue,retSiteC,d5.getFact(),c,true); propagate(new PathEdge<>(zeroValue, retSiteC, d5.getFact()), c, true);propagate(newnew PathEdgePathEdge<>(<>(zeroValue,retSiteC,d5.getFact()),)c,true); }} }} //in cases where there are no callers, the return statement would normally not be processed at all;//in cases where there are no callers, the return statement would normally not be processed at all; propagateConstrained(d3.getConstraint(), new PathEdge<>(applyConstraint(d3.getConstraint(), d1), m, d3.getFact()));propagateConstrained(d3.getConstraint(),newPathEdge<>(applyConstraint(d3.getConstraint(),d1),m,d3.getFact())); }} elseelse propagate(d1, m, d3.getFact(), null, false);propagate(d1,m,d3.getFact(),null,false); propagate(new PathEdge<>(d1, m, d3.getFact()), null, false);propagate(newnew PathEdgePathEdge<>(<>(d1,m,d3.getFact()),)null,false); }} }} }} for(IncomingEdge<D, N> incEdge : incomingEdgesPrefixesOf(calleeMethod, pathEdge.factAtSource())) {for(IncomingEdge<D,N>incEdge:incomingEdgesPrefixesOf(calleeMethod,pathEdge.factAtSource())){ boolean equal = incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource()); //TODO: write test case for thisbooleanequal=incEdge.getCalleeSourceFact().equals(pathEdge.factAtSource());//TODO: write test case for this if(!equal && !callSitesWithInterest.contains(incEdge.getCallSite())) {if(!equal&&!callSitesWithInterest.contains(incEdge.getCallSite())){ PathEdge<N,D> callerEdge = new PathEdge<>(PathEdge<N,D>callerEdge=newPathEdge<>( PathEdge<N,D> callerEdge = new ConcretizationPathEdge<>(PathEdge<N,D>callerEdge=newConcretizationPathEdgeConcretization<>( applyConstraint(constraint, incEdge.getCallerSourceFact()), applyConstraint(constraint,incEdge.getCallerSourceFact()), incEdge.getCallSite(), incEdge.getCallSite(), applyConstraint(constraint, incEdge.getCallerCallSiteFact()));applyConstraint(constraint,incEdge.getCallerCallSiteFact())); applyConstraint(constraint, incEdge.getCallerCallSiteFact()),applyConstraint(constraint,incEdge.getCallerCallSiteFact()), calleeMethod,calleeMethod, pathEdge.factAtSource());pathEdge.factAtSource()); propagate |= propagateConstrained(constraint, callerEdge);propagate|=propagateConstrained(constraint,callerEdge); }} }} }}  if(propagate) {if(propagate){ propagate(pathEdge.factAtSource(), pathEdge.getTarget(), pathEdge.factAtTarget(), null, false);propagate(pathEdge..factAtSourcefactAtSource(),(), pathEdgepathEdge..getTargetgetTarget(),(),pathEdge.factAtTargetfactA(),,null,false); propagate(pathEdge, pathEdge instanceof ConcretizationPathEdge ? pathEdge.getTarget() : null, false);propagate(pathEdge,, pathEdgepathEdge instanceofinstanceof ConcretizationPathEdgeConcretizationPathEdge ??pathEdge.getTargetge() ::null,false); return true;returntrue; } else {}else{ pauseEdge(pathEdge);pauseEdge(pathEdge);  /**/**	 * Propagates the flow further down the exploded super graph. 	 * Propagates the flow further down the exploded super graph. 	 * @param sourceVal the source value of the propagated summary edge	 * @param sourceVal the source value of the propagated summary edge	 * @param target the target statement	 * @param target the target statement	 * @param targetVal the target value at the target statement	 * @param targetVal the target value at the target statement	 * @param edge the PathEdge that should be propagated	 * @param edge the PathEdge that should be propagated	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise	 * @param relatedCallSite for call and return flows the related call statement, <code>null</code> otherwise	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IFDSSolver}) 	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IFDSSolver}) 	 * @param isUnbalancedReturn <code>true</code> if this edge is propagating an unbalanced return	 * @param isUnbalancedReturn <code>true</code> if this edge is propagating an unbalanced return	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IFDSSolver})	 *        (this value is not used within this implementation but may be useful for subclasses of {@link IFDSSolver})	 */	 */ protected void propagate(D sourceVal, N target, D targetVal,protectedvoidpropagate(DD sourceValsourceVal,, NN targettarget,, DD targetValtargetVal, protected void propagate(PathEdge<N,D> edge,protectedvoidpropagate(PathEdgePathEdge<<NN,,DD>> edgeedge, /* deliberately exposed to clients */ N relatedCallSite,/* deliberately exposed to clients */NrelatedCallSite, /* deliberately exposed to clients */ boolean isUnbalancedReturn) {/* deliberately exposed to clients */booleanisUnbalancedReturn){ final PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);finalfinal PathEdgePathEdge<<NN,,DD>> edgeedge == newnew PathEdgePathEdge<<NN,,DD>(>(sourceValsourceVal,, targettarget,, targetValtargetVal););  final D existingVal = jumpFn.addFunction(edge);finalDexistingVal=jumpFn.addFunction(edge); //TODO: Merge d.* and d.*\{x} as d.*//TODO: Merge d.* and d.*\{x} as d.* if (existingVal != null) {if(existingVal!=null){ if (existingVal != targetVal)if(existingVal!=targetVal) existingVal.addNeighbor(targetVal);existingVal.addNeighbor(targetVal); }} else {else{ scheduleEdgeProcessing(edge);scheduleEdgeProcessing(edge); if(targetVal!=zeroValue)if(targetVal!=zeroValue) logger.trace("EDGE: <{},{}> -> <{},{}>", icfg.getMethodOf(target), sourceVal, target, targetVal);logger.trace("EDGE: <{},{}> -> <{},{}>",icfg.getMethodOf(target),sourceVal,target,targetVal);  if(edge instanceof ConcretizationPathEdge) {if(edgeinstanceofConcretizationPathEdge){ ConcretizationPathEdge<M, N, D> concEdge = (ConcretizationPathEdge<M,N,D>) edge;ConcretizationPathEdge<M,N,D>concEdge=(ConcretizationPathEdge<M,N,D>)edge; jumpFn.addFunction(concEdge);jumpFn.addFunction(concEdge);  IncomingEdge<D, N> incomingEdge = new IncomingEdge<D, N>(concEdge.getCalleeSourceFact(), IncomingEdge<D,N>incomingEdge=newIncomingEdge<D,N>(concEdge.getCalleeSourceFact(), concEdge.getTarget(), concEdge.factAtSource(), concEdge.factAtTarget());concEdge.getTarget(),concEdge.factAtSource(),concEdge.factAtTarget()); if (!addIncoming(concEdge.getCalleeMethod(), incomingEdge))if(!addIncoming(concEdge.getCalleeMethod(),incomingEdge)) return;return;  resumeEdges(concEdge.getCalleeMethod(), concEdge.getCalleeSourceFact());resumeEdges(concEdge.getCalleeMethod(),concEdge.getCalleeSourceFact()); registerInterestedCaller(concEdge.getCalleeMethod(), incomingEdge);registerInterestedCaller(concEdge.getCalleeMethod(),incomingEdge); } else {}else{ //TODO: Merge d.* and d.*\{x} as d.*//TODO: Merge d.* and d.*\{x} as d.* if (existingVal != null) {if(existingVal!=null){ if (existingVal != edge.factAtTarget())if(existingVal!=edge.factAtTarget()) existingVal.addNeighbor(edge.factAtTarget());existingVal.addNeighbor(edge.factAtTarget()); }} else {else{ scheduleEdgeProcessing(edge);scheduleEdgeProcessing(edge); if(edge.factAtTarget()!=zeroValue)if(edge.factAtTarget()!=zeroValue) logger.trace("EDGE: {}: {}", icfg.getMethodOf(edge.getTarget()), edge);logger.trace("EDGE: {}: {}",icfg.getMethodOf(edge.getTarget()),edge); }} }} }}








test/heros/alias/FieldSensitiveSolverTest.java








View file @ 05779cea






......@@ -147,7 +147,7 @@ public class FieldSensitiveSolverTest {









 










 helper.method("bar",










 startPoints("c"),










 callSite("c").calls("xyz", flow("2", "3"), flow("2.f", "3.f")));










 callSite("c").calls("xyz", flow("2", "3")));










 










 helper.method("xyz", 










 startPoints("d"),



......@@ -245,7 +245,7 @@ public class FieldSensitiveSolverTest {









 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.f")),










 callSite("b").calls("bar", flow("1.f", "2"), flow("1.f^f", "2^f")));










 callSite("b").calls("bar", flow("1.f", "2")));










 










 helper.method("bar",










 startPoints("c"),



......@@ -283,7 +283,7 @@ public class FieldSensitiveSolverTest {









 










 helper.method("bar",










 startPoints("c"),










 callSite("c").calls("xyz", flow("2", "3"), flow("2^f", "3^f")));










 callSite("c").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),



......@@ -315,12 +315,12 @@ public class FieldSensitiveSolverTest {









 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.f")),










 callSite("b").calls("bar", flow("1.f", "2.f")).retSite("e", kill("1.f")),










 callSite("e").calls("bar", flow("4", "2"), flow("4^f", "2^f")).retSite("f", kill("4"), kill("4^f") /*unwanted call2ret*/));










 callSite("e").calls("bar", flow("4", "2")).retSite("f", kill("4")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("2", writeField("f"), "2^f"), flow("2", "3")),










 exitStmt("d").returns(over("b"), to("e"), flow("3.f", "4")).returns(over("e"), to("f"), kill("3"), kill("3^f"), kill("2^f"))); 










 exitStmt("d").returns(over("b"), to("e"), flow("3.f", "4")).returns(over("e"), to("f"), kill("3"), kill("2^f"))); 










 










 helper.runSolver(false, "a");










 }



......@@ -347,12 +347,12 @@ public class FieldSensitiveSolverTest {









 normalStmt("a").succ("b", flow("0", "1.g")),










 callSite("b").calls("bar", flow("1.g", "1.g")).retSite("e", kill("1.g")),










 normalStmt("e").succ("f", flow("1.g", "3")),










 callSite("f").calls("bar", flow("3", "1"), flow("3.f", "1.f")).retSite("g", kill("3"), kill("3.f") /* TODO: we want to get rid of kill(3.f) */)); //0->3 at f, should generate 0->3.f as well, because 1.f is paused on caller side










 callSite("f").calls("bar", flow("3", "1")).retSite("g", kill("3"))); 










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("1", readField("f"), "2"), flow("1", "1")),










 exitStmt("d").returns(over("b"), to("e"), flow("1.g", "1.g") /* ignore fact 2, not possible with this caller ctx*/).returns(over("f"), to("g"), kill("1"), kill("1.f"), kill("2")));










 exitStmt("d").returns(over("b"), to("e"), flow("1.g", "1.g") /* ignore fact 2, not possible with this caller ctx*/).returns(over("f"), to("g"), kill("1"), kill("2")));










 










 helper.runSolver(false, "a");










 }



......@@ -378,7 +378,7 @@ public class FieldSensitiveSolverTest {









 










 helper.method("bar",










 startPoints("b"),










 callSite("b").calls("xyz", flow("1", "1"), flow("1.f", "1.f"), flow("1.g", "1.g")).retSite("e", kill("1"), kill("1.f"), kill("1.g")),










 callSite("b").calls("xyz", flow("1", "1")).retSite("e", kill("1")),










 exitStmt("e").returns(over("a"), to("f"), flow("2", "2")));










 










 helper.method("xyz",



......












test/heros/alias/FieldSensitiveSolverTest.java








View file @ 05779cea








test/heros/alias/FieldSensitiveSolverTest.java










View file @ 05779cea


05779cea



......@@ -147,7 +147,7 @@ public class FieldSensitiveSolverTest {









 










 helper.method("bar",










 startPoints("c"),










 callSite("c").calls("xyz", flow("2", "3"), flow("2.f", "3.f")));










 callSite("c").calls("xyz", flow("2", "3")));










 










 helper.method("xyz", 










 startPoints("d"),



......@@ -245,7 +245,7 @@ public class FieldSensitiveSolverTest {









 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.f")),










 callSite("b").calls("bar", flow("1.f", "2"), flow("1.f^f", "2^f")));










 callSite("b").calls("bar", flow("1.f", "2")));










 










 helper.method("bar",










 startPoints("c"),



......@@ -283,7 +283,7 @@ public class FieldSensitiveSolverTest {









 










 helper.method("bar",










 startPoints("c"),










 callSite("c").calls("xyz", flow("2", "3"), flow("2^f", "3^f")));










 callSite("c").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),



......@@ -315,12 +315,12 @@ public class FieldSensitiveSolverTest {









 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.f")),










 callSite("b").calls("bar", flow("1.f", "2.f")).retSite("e", kill("1.f")),










 callSite("e").calls("bar", flow("4", "2"), flow("4^f", "2^f")).retSite("f", kill("4"), kill("4^f") /*unwanted call2ret*/));










 callSite("e").calls("bar", flow("4", "2")).retSite("f", kill("4")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("2", writeField("f"), "2^f"), flow("2", "3")),










 exitStmt("d").returns(over("b"), to("e"), flow("3.f", "4")).returns(over("e"), to("f"), kill("3"), kill("3^f"), kill("2^f"))); 










 exitStmt("d").returns(over("b"), to("e"), flow("3.f", "4")).returns(over("e"), to("f"), kill("3"), kill("2^f"))); 










 










 helper.runSolver(false, "a");










 }



......@@ -347,12 +347,12 @@ public class FieldSensitiveSolverTest {









 normalStmt("a").succ("b", flow("0", "1.g")),










 callSite("b").calls("bar", flow("1.g", "1.g")).retSite("e", kill("1.g")),










 normalStmt("e").succ("f", flow("1.g", "3")),










 callSite("f").calls("bar", flow("3", "1"), flow("3.f", "1.f")).retSite("g", kill("3"), kill("3.f") /* TODO: we want to get rid of kill(3.f) */)); //0->3 at f, should generate 0->3.f as well, because 1.f is paused on caller side










 callSite("f").calls("bar", flow("3", "1")).retSite("g", kill("3"))); 










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("1", readField("f"), "2"), flow("1", "1")),










 exitStmt("d").returns(over("b"), to("e"), flow("1.g", "1.g") /* ignore fact 2, not possible with this caller ctx*/).returns(over("f"), to("g"), kill("1"), kill("1.f"), kill("2")));










 exitStmt("d").returns(over("b"), to("e"), flow("1.g", "1.g") /* ignore fact 2, not possible with this caller ctx*/).returns(over("f"), to("g"), kill("1"), kill("2")));










 










 helper.runSolver(false, "a");










 }



......@@ -378,7 +378,7 @@ public class FieldSensitiveSolverTest {









 










 helper.method("bar",










 startPoints("b"),










 callSite("b").calls("xyz", flow("1", "1"), flow("1.f", "1.f"), flow("1.g", "1.g")).retSite("e", kill("1"), kill("1.f"), kill("1.g")),










 callSite("b").calls("xyz", flow("1", "1")).retSite("e", kill("1")),










 exitStmt("e").returns(over("a"), to("f"), flow("2", "2")));










 










 helper.method("xyz",



......






......@@ -147,7 +147,7 @@ public class FieldSensitiveSolverTest {









 










 helper.method("bar",










 startPoints("c"),










 callSite("c").calls("xyz", flow("2", "3"), flow("2.f", "3.f")));










 callSite("c").calls("xyz", flow("2", "3")));










 










 helper.method("xyz", 










 startPoints("d"),



......@@ -245,7 +245,7 @@ public class FieldSensitiveSolverTest {









 helper.method("foo",










 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.f")),










 callSite("b").calls("bar", flow("1.f", "2"), flow("1.f^f", "2^f")));










 callSite("b").calls("bar", flow("1.f", "2")));










 










 helper.method("bar",










 startPoints("c"),



......@@ -283,7 +283,7 @@ public class FieldSensitiveSolverTest {









 










 helper.method("bar",










 startPoints("c"),










 callSite("c").calls("xyz", flow("2", "3"), flow("2^f", "3^f")));










 callSite("c").calls("xyz", flow("2", "3")));










 










 helper.method("xyz",










 startPoints("d"),



......@@ -315,12 +315,12 @@ public class FieldSensitiveSolverTest {









 startPoints("a"),










 normalStmt("a").succ("b", flow("0", "1.f")),










 callSite("b").calls("bar", flow("1.f", "2.f")).retSite("e", kill("1.f")),










 callSite("e").calls("bar", flow("4", "2"), flow("4^f", "2^f")).retSite("f", kill("4"), kill("4^f") /*unwanted call2ret*/));










 callSite("e").calls("bar", flow("4", "2")).retSite("f", kill("4")));










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("2", writeField("f"), "2^f"), flow("2", "3")),










 exitStmt("d").returns(over("b"), to("e"), flow("3.f", "4")).returns(over("e"), to("f"), kill("3"), kill("3^f"), kill("2^f"))); 










 exitStmt("d").returns(over("b"), to("e"), flow("3.f", "4")).returns(over("e"), to("f"), kill("3"), kill("2^f"))); 










 










 helper.runSolver(false, "a");










 }



......@@ -347,12 +347,12 @@ public class FieldSensitiveSolverTest {









 normalStmt("a").succ("b", flow("0", "1.g")),










 callSite("b").calls("bar", flow("1.g", "1.g")).retSite("e", kill("1.g")),










 normalStmt("e").succ("f", flow("1.g", "3")),










 callSite("f").calls("bar", flow("3", "1"), flow("3.f", "1.f")).retSite("g", kill("3"), kill("3.f") /* TODO: we want to get rid of kill(3.f) */)); //0->3 at f, should generate 0->3.f as well, because 1.f is paused on caller side










 callSite("f").calls("bar", flow("3", "1")).retSite("g", kill("3"))); 










 










 helper.method("bar",










 startPoints("c"),










 normalStmt("c").succ("d", flow("1", readField("f"), "2"), flow("1", "1")),










 exitStmt("d").returns(over("b"), to("e"), flow("1.g", "1.g") /* ignore fact 2, not possible with this caller ctx*/).returns(over("f"), to("g"), kill("1"), kill("1.f"), kill("2")));










 exitStmt("d").returns(over("b"), to("e"), flow("1.g", "1.g") /* ignore fact 2, not possible with this caller ctx*/).returns(over("f"), to("g"), kill("1"), kill("2")));










 










 helper.runSolver(false, "a");










 }



......@@ -378,7 +378,7 @@ public class FieldSensitiveSolverTest {









 










 helper.method("bar",










 startPoints("b"),










 callSite("b").calls("xyz", flow("1", "1"), flow("1.f", "1.f"), flow("1.g", "1.g")).retSite("e", kill("1"), kill("1.f"), kill("1.g")),










 callSite("b").calls("xyz", flow("1", "1")).retSite("e", kill("1")),










 exitStmt("e").returns(over("a"), to("f"), flow("2", "2")));










 










 helper.method("xyz",



......


  helper.method("bar",helper.method("bar", startPoints("c"),startPoints("c"), callSite("c").calls("xyz", flow("2", "3"), flow("2.f", "3.f")));callSite("c").calls("xyz",flow("2","3"),, flowflow(("2.f""2.f",, "3.f""3.f")));) callSite("c").calls("xyz", flow("2", "3")));callSite("c").calls("xyz",flow("2","3")));  helper.method("xyz", helper.method("xyz", startPoints("d"),startPoints("d"), helper.method("foo",helper.method("foo", startPoints("a"),startPoints("a"), normalStmt("a").succ("b", flow("0", "1.f")),normalStmt("a").succ("b",flow("0","1.f")), callSite("b").calls("bar", flow("1.f", "2"), flow("1.f^f", "2^f")));callSite("b").calls("bar",flow("1.f","2"),, flowflow(("1.f^f""1.f^f",, "2^f""2^f")));) callSite("b").calls("bar", flow("1.f", "2")));callSite("b").calls("bar",flow("1.f","2")));  helper.method("bar",helper.method("bar", startPoints("c"),startPoints("c"),  helper.method("bar",helper.method("bar", startPoints("c"),startPoints("c"), callSite("c").calls("xyz", flow("2", "3"), flow("2^f", "3^f")));callSite("c").calls("xyz",flow("2","3"),, flowflow(("2^f""2^f",, "3^f""3^f")));) callSite("c").calls("xyz", flow("2", "3")));callSite("c").calls("xyz",flow("2","3")));  helper.method("xyz",helper.method("xyz", startPoints("d"),startPoints("d"), startPoints("a"),startPoints("a"), normalStmt("a").succ("b", flow("0", "1.f")),normalStmt("a").succ("b",flow("0","1.f")), callSite("b").calls("bar", flow("1.f", "2.f")).retSite("e", kill("1.f")),callSite("b").calls("bar",flow("1.f","2.f")).retSite("e",kill("1.f")), callSite("e").calls("bar", flow("4", "2"), flow("4^f", "2^f")).retSite("f", kill("4"), kill("4^f") /*unwanted call2ret*/));callSite("e").calls("bar",flow("4","2"),, flowflow(("4^f""4^f",, "2^f""2^f")).)retSite("f",kill("4"),, killkill(("4^f""4^f")) /*unwanted call2ret*//*unwanted call2ret*/)); callSite("e").calls("bar", flow("4", "2")).retSite("f", kill("4")));callSite("e").calls("bar",flow("4","2")).retSite("f",kill("4")));  helper.method("bar",helper.method("bar", startPoints("c"),startPoints("c"), normalStmt("c").succ("d", flow("2", writeField("f"), "2^f"), flow("2", "3")),normalStmt("c").succ("d",flow("2",writeField("f"),"2^f"),flow("2","3")), exitStmt("d").returns(over("b"), to("e"), flow("3.f", "4")).returns(over("e"), to("f"), kill("3"), kill("3^f"), kill("2^f"))); exitStmt("d").returns(over("b"),to("e"),flow("3.f","4")).returns(over("e"),to("f"),kill("3"),killkill(("3^f""3^f"),), kill("2^f"))); exitStmt("d").returns(over("b"), to("e"), flow("3.f", "4")).returns(over("e"), to("f"), kill("3"), kill("2^f"))); exitStmt("d").returns(over("b"),to("e"),flow("3.f","4")).returns(over("e"),to("f"),kill("3"),kill("2^f")));  helper.runSolver(false, "a");helper.runSolver(false,"a"); }} normalStmt("a").succ("b", flow("0", "1.g")),normalStmt("a").succ("b",flow("0","1.g")), callSite("b").calls("bar", flow("1.g", "1.g")).retSite("e", kill("1.g")),callSite("b").calls("bar",flow("1.g","1.g")).retSite("e",kill("1.g")), normalStmt("e").succ("f", flow("1.g", "3")),normalStmt("e").succ("f",flow("1.g","3")), callSite("f").calls("bar", flow("3", "1"), flow("3.f", "1.f")).retSite("g", kill("3"), kill("3.f") /* TODO: we want to get rid of kill(3.f) */)); //0->3 at f, should generate 0->3.f as well, because 1.f is paused on caller sidecallSite("f").calls("bar",flow("3","1"),, flowflow(("3.f""3.f",, "1.f""1.f")).)retSite("g",kill("3"),, killkill(("3.f""3.f")) /* TODO: we want to get rid of kill(3.f) *//* TODO: we want to get rid of kill(3.f) */));)); //0->3 at f, should generate 0->3.f as well, because 1.f is paused on caller side//0->3 at f, should generate 0->3.f as well, because 1.f is paused on caller side callSite("f").calls("bar", flow("3", "1")).retSite("g", kill("3"))); callSite("f").calls("bar",flow("3","1")).retSite("g",kill("3")));));   helper.method("bar",helper.method("bar", startPoints("c"),startPoints("c"), normalStmt("c").succ("d", flow("1", readField("f"), "2"), flow("1", "1")),normalStmt("c").succ("d",flow("1",readField("f"),"2"),flow("1","1")), exitStmt("d").returns(over("b"), to("e"), flow("1.g", "1.g") /* ignore fact 2, not possible with this caller ctx*/).returns(over("f"), to("g"), kill("1"), kill("1.f"), kill("2")));exitStmt("d").returns(over("b"),to("e"),flow("1.g","1.g")/* ignore fact 2, not possible with this caller ctx*/).returns(over("f"),to("g"),kill("1"),killkill(("1.f""1.f"),), kill("2"))); exitStmt("d").returns(over("b"), to("e"), flow("1.g", "1.g") /* ignore fact 2, not possible with this caller ctx*/).returns(over("f"), to("g"), kill("1"), kill("2")));exitStmt("d").returns(over("b"),to("e"),flow("1.g","1.g")/* ignore fact 2, not possible with this caller ctx*/).returns(over("f"),to("g"),kill("1"),kill("2")));  helper.runSolver(false, "a");helper.runSolver(false,"a"); }}  helper.method("bar",helper.method("bar", startPoints("b"),startPoints("b"), callSite("b").calls("xyz", flow("1", "1"), flow("1.f", "1.f"), flow("1.g", "1.g")).retSite("e", kill("1"), kill("1.f"), kill("1.g")),callSite("b").calls("xyz",flow("1","1"),, flowflow(("1.f""1.f",, "1.f""1.f"),), flowflow(("1.g""1.g",, "1.g""1.g")).)).retSiteretSite(("e""e",, killkill(("1""1"),), killkill(("1.f""1.f"),), killkill(("1.g""1.g)), callSite("b").calls("xyz", flow("1", "1")).retSite("e", kill("1")),callSite("b").calls("xyz",flow("1","1")).).retSiteretSite(("e""e",, killkill(("1""1)), exitStmt("e").returns(over("a"), to("f"), flow("2", "2")));exitStmt("e").returns(over("a"),to("f"),flow("2","2")));  helper.method("xyz",helper.method("xyz",









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






