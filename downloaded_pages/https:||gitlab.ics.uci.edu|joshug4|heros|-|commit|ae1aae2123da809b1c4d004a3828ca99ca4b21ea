



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

ae1aae21















Commit
ae1aae21


authored
Nov 29, 2012
by


Eric Bodden



Browse files




moved Soot-specifiv code to soot







parent
f7c0f2f6













Changes
47




Hide whitespace changes

Inline
Side-by-side















.classpath








View file @ ae1aae21













<?xml version="1.0" encoding="UTF-8"?>










<classpath>










 <classpathentry combineaccessrules="false" exported="true" kind="src" path="/soot"/>










 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>










 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src-generic"/>










 <classpathentry kind="src" path="src-soot"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry exported="true" kind="lib" path="guava-13.0.jar"/>










 <classpathentry kind="lib" path="soot-trunk.jar" sourcepath="/soot"/>










 <classpathentry kind="output" path="bin"/>










</classpath>














META-INF/MANIFEST.MF








View file @ ae1aae21






......@@ -22,119 +22,4 @@ Export-Package: com.google.common.annotations,









 de.bodden.ide.edgefunc,










 de.bodden.ide.flowfunc,










 de.bodden.ide.solver,










 de.bodden.ide.template,










 soot,










 soot.JastAddJ,










 soot.baf,










 soot.baf.internal,










 soot.baf.toolkits.base,










 soot.coffi,










 soot.dava,










 soot.dava.internal.AST,










 soot.dava.internal.SET,










 soot.dava.internal.asg,










 soot.dava.internal.javaRep,










 soot.dava.toolkits.base.AST,










 soot.dava.toolkits.base.AST.analysis,










 soot.dava.toolkits.base.AST.interProcedural,










 soot.dava.toolkits.base.AST.structuredAnalysis,










 soot.dava.toolkits.base.AST.transformations,










 soot.dava.toolkits.base.AST.traversals,










 soot.dava.toolkits.base.DavaMonitor,










 soot.dava.toolkits.base.finders,










 soot.dava.toolkits.base.misc,










 soot.dava.toolkits.base.renamer,










 soot.grimp,










 soot.grimp.internal,










 soot.grimp.toolkits.base,










 soot.javaToJimple,










 soot.javaToJimple.jj,










 soot.javaToJimple.jj.ast,










 soot.javaToJimple.jj.types,










 soot.javaToJimple.toolkits,










 soot.jbco,










 soot.jbco.bafTransformations,










 soot.jbco.gui,










 soot.jbco.jimpleTransformations,










 soot.jbco.util,










 soot.jimple,










 soot.jimple.internal,










 soot.jimple.paddle,










 soot.jimple.parser,










 soot.jimple.parser.analysis,










 soot.jimple.parser.lexer,










 soot.jimple.parser.node,










 soot.jimple.parser.parser,










 soot.jimple.spark,










 soot.jimple.spark.builder,










 soot.jimple.spark.fieldrw,










 soot.jimple.spark.geom,










 soot.jimple.spark.geom.geomE,










 soot.jimple.spark.geom.geomPA,










 soot.jimple.spark.geom.heapinsE,










 soot.jimple.spark.geom.ptinsE,










 soot.jimple.spark.internal,










 soot.jimple.spark.ondemand,










 soot.jimple.spark.ondemand.genericutil,










 soot.jimple.spark.ondemand.pautil,










 soot.jimple.spark.pag,










 soot.jimple.spark.sets,










 soot.jimple.spark.solver,










 soot.jimple.toolkits.annotation,










 soot.jimple.toolkits.annotation.arraycheck,










 soot.jimple.toolkits.annotation.callgraph,










 soot.jimple.toolkits.annotation.defs,










 soot.jimple.toolkits.annotation.fields,










 soot.jimple.toolkits.annotation.j5anno,










 soot.jimple.toolkits.annotation.liveness,










 soot.jimple.toolkits.annotation.logic,










 soot.jimple.toolkits.annotation.methods,










 soot.jimple.toolkits.annotation.nullcheck,










 soot.jimple.toolkits.annotation.parity,










 soot.jimple.toolkits.annotation.profiling,










 soot.jimple.toolkits.annotation.purity,










 soot.jimple.toolkits.annotation.qualifiers,










 soot.jimple.toolkits.annotation.tags,










 soot.jimple.toolkits.base,










 soot.jimple.toolkits.callgraph,










 soot.jimple.toolkits.graph,










 soot.jimple.toolkits.infoflow,










 soot.jimple.toolkits.invoke,










 soot.jimple.toolkits.pointer,










 soot.jimple.toolkits.pointer.nativemethods,










 soot.jimple.toolkits.pointer.representations,










 soot.jimple.toolkits.pointer.util,










 soot.jimple.toolkits.reflection,










 soot.jimple.toolkits.scalar,










 soot.jimple.toolkits.scalar.pre,










 soot.jimple.toolkits.thread,










 soot.jimple.toolkits.thread.mhp,










 soot.jimple.toolkits.thread.mhp.findobject,










 soot.jimple.toolkits.thread.mhp.pegcallgraph,










 soot.jimple.toolkits.thread.mhp.stmt,










 soot.jimple.toolkits.thread.synchronization,










 soot.jimple.toolkits.typing,










 soot.jimple.toolkits.typing.fast,










 soot.jimple.toolkits.typing.integer,










 soot.options,










 soot.rtlib.tamiflex,










 soot.shimple,










 soot.shimple.internal,










 soot.shimple.toolkits.graph,










 soot.shimple.toolkits.scalar,










 soot.sootify,










 soot.tagkit,










 soot.toolkits.astmetrics,










 soot.toolkits.astmetrics.DataHandlingApplication,










 soot.toolkits.exceptions,










 soot.toolkits.graph,










 soot.toolkits.graph.interaction,










 soot.toolkits.graph.pdg,










 soot.toolkits.scalar,










 soot.tools,










 soot.util,










 soot.util.cfgcmd,










 soot.util.dot,










 soot.util.queue,










 soot.xml,










 soot.jimple.toolkits.ide.exampleproblems









 de.bodden.ide.template














build.properties








View file @ ae1aae21













source.soot-ifds.jar = src-generic/










source.soot-ifds.jar = src/










bin.includes = META-INF/,\










 soot-ifds.jar,\










 soot-trunk.jar,\



......














src-soot/soot/jimple/toolkits/ide/DefaultJimpleIDETabulationProblem.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import soot.SootMethod;










import soot.Unit;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.template.DefaultIDETabulationProblem;





















/**










 *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods.










 */










public abstract class DefaultJimpleIDETabulationProblem<D,V,I extends InterproceduralCFG<Unit,SootMethod>>










 extends DefaultIDETabulationProblem<Unit,D,SootMethod,V,I> {





















 public DefaultJimpleIDETabulationProblem(I icfg) {










 super(icfg);










 }










 










}














src-soot/soot/jimple/toolkits/ide/DefaultJimpleIFDSTabulationProblem.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import soot.SootMethod;










import soot.Unit;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.template.DefaultIDETabulationProblem;










import de.bodden.ide.template.DefaultIFDSTabulationProblem;





















/**










 *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods.










 */










public abstract class DefaultJimpleIFDSTabulationProblem<D,I extends InterproceduralCFG<Unit,SootMethod>>










 extends DefaultIFDSTabulationProblem<Unit,D,SootMethod,I> {





















 public DefaultJimpleIFDSTabulationProblem(I icfg) {










 super(icfg);










 }










 










}














src-soot/soot/jimple/toolkits/ide/JimpleIDESolver.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IDESolver;





















public class JimpleIDESolver<D, V> extends IDESolver<Unit, D, SootMethod, V, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, V> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}














src-soot/soot/jimple/toolkits/ide/JimpleIFDSSolver.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IFDSSolver;





















public class JimpleIFDSSolver<D, V> extends IFDSSolver<Unit, D, SootMethod, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, ?> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}














src-soot/soot/jimple/toolkits/ide/Main.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.util.Map;





















import de.bodden.ide.IFDSTabulationProblem;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IFDSSolver;





















import soot.Local;










import soot.PackManager;










import soot.Scene;










import soot.SceneTransformer;










import soot.SootMethod;










import soot.Transform;










import soot.Unit;










import soot.jimple.toolkits.ide.exampleproblems.IFDSLocalInfoFlow;










import soot.jimple.toolkits.ide.icfg.JimpleBasedInterproceduralCFG;





















public class Main {





















 /**










	 * @param args










	 */










 public static void main(String[] args) {










 










 










 PackManager.v().getPack("wjtp").add(new Transform("wjtp.ifds", new SceneTransformer() {










 protected void internalTransform(String phaseName, @SuppressWarnings("rawtypes") Map options) {





















 IFDSTabulationProblem<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>> problem = new IFDSLocalInfoFlow(new JimpleBasedInterproceduralCFG());










 










 IFDSSolver<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>> solver = new IFDSSolver<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>>(problem); 










 solver.solve();










 Unit ret = Scene.v().getMainMethod().getActiveBody().getUnits().getLast();










 for(Local l: solver.ifdsResultsAt(ret)) {










 System.err.println(l);










 }










 }










 }));










 










 soot.Main.main(args);










 }





















}














src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSLocalInfoFlow.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Gen;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.Kill;










import de.bodden.ide.flowfunc.KillAll;










import de.bodden.ide.flowfunc.Transfer;





















import soot.Local;










import soot.NullType;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.Value;










import soot.jimple.AssignStmt;










import soot.jimple.DefinitionStmt;










import soot.jimple.IdentityStmt;










import soot.jimple.InvokeExpr;










import soot.jimple.ParameterRef;










import soot.jimple.ReturnStmt;










import soot.jimple.Stmt;










import soot.jimple.internal.JimpleLocal;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;





















public class IFDSLocalInfoFlow extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {










 super(icfg); 










 }





















 public FlowFunctions<Unit, Local, SootMethod> createFlowFunctionsFactory() { 










 return new FlowFunctions<Unit,Local,SootMethod>() {





















 @Override










 public FlowFunction<Local> getNormalFlowFunction(Unit src, Unit dest) {










 if (src instanceof IdentityStmt && interproceduralCFG().getMethodOf(src)==Scene.v().getMainMethod()) {










 IdentityStmt is = (IdentityStmt) src;










 Local leftLocal = (Local) is.getLeftOp();










 Value right = is.getRightOp();










 if (right instanceof ParameterRef) {










 return new Gen<Local>(leftLocal,zeroValue());










 }










 }










 










 if(src instanceof AssignStmt) {










 AssignStmt assignStmt = (AssignStmt) src;










 Value right = assignStmt.getRightOp();










 if(assignStmt.getLeftOp() instanceof Local) {










 final Local leftLocal = (Local) assignStmt.getLeftOp();










 if(right instanceof Local) {










 final Local rightLocal = (Local) right;










 return new Transfer<Local>(leftLocal, rightLocal);










 } else {










 return new Kill<Local>(leftLocal);










 }










 }










 }










 return Identity.v();










 }





















 @Override










 public FlowFunction<Local> getCallFlowFunction(Unit src, final SootMethod dest) {










 Stmt stmt = (Stmt) src;










 InvokeExpr ie = stmt.getInvokeExpr();










 final List<Value> callArgs = ie.getArgs();










 final List<Local> paramLocals = new ArrayList<Local>();










 for(int i=0;i<dest.getParameterCount();i++) {










 paramLocals.add(dest.getActiveBody().getParameterLocal(i));










 }










 return new FlowFunction<Local>() {





















 public Set<Local> computeTargets(Local source) {










 int argIndex = callArgs.indexOf(source);










 if(argIndex>-1) {










 return Collections.singleton(paramLocals.get(argIndex));










 }










 return Collections.emptySet();










 }










 };










 }





















 @Override










 public FlowFunction<Local> getReturnFlowFunction(Unit callSite, SootMethod callee, Unit exitStmt, Unit retSite) {










 if (exitStmt instanceof ReturnStmt) { 










 ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 Value op = returnStmt.getOp();










 if(op instanceof Local) {










 if(callSite instanceof DefinitionStmt) {










 DefinitionStmt defnStmt = (DefinitionStmt) callSite;










 Value leftOp = defnStmt.getLeftOp();










 if(leftOp instanceof Local) {










 final Local tgtLocal = (Local) leftOp;










 final Local retLocal = (Local) op;










 return new FlowFunction<Local>() {





















 public Set<Local> computeTargets(Local source) {










 if(source==retLocal)










 return Collections.singleton(tgtLocal);










 return Collections.emptySet();










 }










 










 };










 }










 }










 }










 } 










 return KillAll.v();










 }





















 @Override










 public FlowFunction<Local> getCallToReturnFlowFunction(Unit call, Unit returnSite) {










 return Identity.v();










 }










 }; 










 }





















 @Override










 public Local createZeroValue() {










 return new JimpleLocal("zero", NullType.v());










 }





















 @Override










 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }










}




\ No newline at end of file














src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSPossibleTypes.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.KillAll;





















import soot.Local;










import soot.PointsToAnalysis;










import soot.PointsToSet;










import soot.PrimType;










import soot.Scene;










import soot.SootMethod;










import soot.Type;










import soot.Unit;










import soot.UnknownType;










import soot.Value;










import soot.jimple.ArrayRef;










import soot.jimple.Constant;










import soot.jimple.DefinitionStmt;










import soot.jimple.InstanceFieldRef;










import soot.jimple.InvokeExpr;










import soot.jimple.Jimple;










import soot.jimple.NewExpr;










import soot.jimple.Ref;










import soot.jimple.ReturnStmt;










import soot.jimple.Stmt;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;










import soot.toolkits.scalar.Pair;





















@SuppressWarnings("serial")










public class IFDSPossibleTypes extends DefaultJimpleIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {










 super(icfg);










 }





















 public FlowFunctions<Unit, Pair<Value,Type>, SootMethod> createFlowFunctionsFactory() {










 return new FlowFunctions<Unit,Pair<Value,Type>,SootMethod>() {





















 public FlowFunction<Pair<Value,Type>> getNormalFlowFunction(Unit src, Unit dest) {










 if(src instanceof DefinitionStmt) {










 DefinitionStmt defnStmt = (DefinitionStmt) src;










 if(defnStmt.containsInvokeExpr()) return Identity.v();










 final Value right = defnStmt.getRightOp();










 final Value left = defnStmt.getLeftOp();










 //won't track primitive-typed variables










 if(right.getType() instanceof PrimType) return Identity.v();










 










 if(right instanceof Constant || right instanceof NewExpr) {










 return new FlowFunction<Pair<Value,Type>>() {










 public Set<Pair<Value, Type>> computeTargets(Pair<Value, Type> source) {










 if(source==new Pair<Value, Type>(Jimple.v().newLocal("<dummy>", UnknownType.v()), UnknownType.v())) {










 Set<Pair<Value, Type>> res = new LinkedHashSet<Pair<Value,Type>>();










 res.add(new Pair<Value,Type>(left,right.getType()));










 res.add(new Pair<Value, Type>(Jimple.v().newLocal("<dummy>", UnknownType.v()), UnknownType.v()));










 return res;










 } else if(source.getO1() instanceof Local && source.getO1().equivTo(left)) {










 //strong update for local variables










 return Collections.emptySet();










 } else {










 return Collections.singleton(source);










 }










 }










 };










 } else if(right instanceof Ref || right instanceof Local) {










 return new FlowFunction<Pair<Value,Type>>() {










 public Set<Pair<Value, Type>> computeTargets(final Pair<Value, Type> source) {










 Value value = source.getO1();










 if(source.getO1() instanceof Local && source.getO1().equivTo(left)) {










 //strong update for local variables










 return Collections.emptySet();










 } else if(maybeSameLocation(value,right)) {










 return new LinkedHashSet<Pair<Value,Type>>() {{










 add(new Pair<Value,Type>(left,source.getO2())); 










 add(source); 










 }};










 } else {










 return Collections.singleton(source);










 }










 }





















 private boolean maybeSameLocation(Value v1, Value v2) {










 if(!(v1 instanceof InstanceFieldRef && v2 instanceof InstanceFieldRef) &&










 !(v1 instanceof ArrayRef && v2 instanceof ArrayRef)) {










 return v1.equivTo(v2);










 }










 if(v1 instanceof InstanceFieldRef && v2 instanceof InstanceFieldRef) {










 InstanceFieldRef ifr1 = (InstanceFieldRef) v1;










 InstanceFieldRef ifr2 = (InstanceFieldRef) v2;










 if(!ifr1.getField().getName().equals(ifr2.getField().getName())) return false;










 










 Local base1 = (Local) ifr1.getBase();










 Local base2 = (Local) ifr2.getBase();










 PointsToAnalysis pta = Scene.v().getPointsToAnalysis();










 PointsToSet pts1 = pta.reachingObjects(base1);










 PointsToSet pts2 = pta.reachingObjects(base2); 










 return pts1.hasNonEmptyIntersection(pts2);










 } else { //v1 instanceof ArrayRef && v2 instanceof ArrayRef










 ArrayRef ar1 = (ArrayRef) v1;










 ArrayRef ar2 = (ArrayRef) v2;





















 Local base1 = (Local) ar1.getBase();










 Local base2 = (Local) ar2.getBase();










 PointsToAnalysis pta = Scene.v().getPointsToAnalysis();










 PointsToSet pts1 = pta.reachingObjects(base1);










 PointsToSet pts2 = pta.reachingObjects(base2); 










 return pts1.hasNonEmptyIntersection(pts2);










 }










 }










 };










 } 










 }










 return Identity.v();










 }





















 public FlowFunction<Pair<Value,Type>> getCallFlowFunction(final Unit src, final SootMethod dest) {










 Stmt stmt = (Stmt) src;










 InvokeExpr ie = stmt.getInvokeExpr();










 final List<Value> callArgs = ie.getArgs();










 final List<Local> paramLocals = new ArrayList<Local>();










 for(int i=0;i<dest.getParameterCount();i++) {










 paramLocals.add(dest.getActiveBody().getParameterLocal(i));










 } 










 return new FlowFunction<Pair<Value,Type>>() {










 public Set<Pair<Value,Type>> computeTargets(Pair<Value,Type> source) {










 Value value = source.getO1();










 int argIndex = callArgs.indexOf(value);










 if(argIndex>-1) {










 return Collections.singleton(new Pair<Value,Type>(paramLocals.get(argIndex), source.getO2()));










 }










 return Collections.emptySet();










 }










 };










 }





















 public FlowFunction<Pair<Value,Type>> getReturnFlowFunction(Unit callSite, SootMethod callee, Unit exitStmt, Unit retSite) {










 if (exitStmt instanceof ReturnStmt) { 










 ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 Value op = returnStmt.getOp();










 if(op instanceof Local) {










 if(callSite instanceof DefinitionStmt) {










 DefinitionStmt defnStmt = (DefinitionStmt) callSite;










 Value leftOp = defnStmt.getLeftOp();










 if(leftOp instanceof Local) {










 final Local tgtLocal = (Local) leftOp;










 final Local retLocal = (Local) op;










 return new FlowFunction<Pair<Value,Type>>() {





















 public Set<Pair<Value,Type>> computeTargets(Pair<Value,Type> source) {










 if(source==retLocal)










 return Collections.singleton(new Pair<Value,Type>(tgtLocal, source.getO2()));










 return Collections.emptySet();










 }










 










 };










 }










 }










 }










 }










 return KillAll.v();










 }





















 public FlowFunction<Pair<Value,Type>> getCallToReturnFlowFunction(Unit call, Unit returnSite) {










 return Identity.v();










 }










 };










 }





















 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }





















 public Pair<Value,Type> createZeroValue() {










 return new Pair<Value, Type>(Jimple.v().newLocal("<dummy>", UnknownType.v()), UnknownType.v());










 }










}




\ No newline at end of file














src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSReachingDefinitions.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.KillAll;





















import soot.EquivalentValue;










import soot.Local;










import soot.NullType;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.Value;










import soot.jimple.DefinitionStmt;










import soot.jimple.InvokeExpr;










import soot.jimple.Jimple;










import soot.jimple.ReturnStmt;










import soot.jimple.ReturnVoidStmt;










import soot.jimple.Stmt;










import soot.jimple.internal.JimpleLocal;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;










import soot.toolkits.scalar.Pair;





















public class IFDSReachingDefinitions extends DefaultJimpleIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {










 public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {










 super(icfg);










 }










 










 @Override










 public FlowFunctions<Unit, Pair<Value, Set<DefinitionStmt>>, SootMethod> createFlowFunctionsFactory() {










 return new FlowFunctions<Unit, Pair<Value, Set<DefinitionStmt>>, SootMethod>() {





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getNormalFlowFunction(final Unit curr, Unit succ) {










 if (curr instanceof DefinitionStmt) {










 final DefinitionStmt assignment = (DefinitionStmt) curr;





















 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {










 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if (source != zeroValue()) {










 if (source.getO1().equivTo(assignment.getLeftOp())) {










 return Collections.emptySet();










 }










 return Collections.singleton(source);










 } else {










 LinkedHashSet<Pair<Value, Set<DefinitionStmt>>> res = new LinkedHashSet<Pair<Value, Set<DefinitionStmt>>>();










 res.add(new Pair<Value, Set<DefinitionStmt>>(assignment.getLeftOp(),










 Collections.<DefinitionStmt> singleton(assignment)));










 return res;










 }










 }










 };










 }





















 return Identity.v();










 }





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getCallFlowFunction(Unit callStmt,










 final SootMethod destinationMethod) {










 Stmt stmt = (Stmt) callStmt;










 InvokeExpr invokeExpr = stmt.getInvokeExpr();










 final List<Value> args = invokeExpr.getArgs();





















 final List<Local> localArguments = new ArrayList<Local>(args.size());










 for (Value value : args) {










 if (value instanceof Local)










 localArguments.add((Local) value);










 else










 localArguments.add(null);










 }





















 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {





















 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if(localArguments.contains(source.getO1())) {










 int paramIndex = args.indexOf(source.getO1());










 Pair<Value, Set<DefinitionStmt>> pair = new Pair<Value, Set<DefinitionStmt>>(










 new EquivalentValue(Jimple.v().newParameterRef(destinationMethod.getParameterType(paramIndex), paramIndex)),










 source.getO2());










 return Collections.singleton(pair);










 }





















 return Collections.emptySet();










 }










 };










 }





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getReturnFlowFunction(final Unit callSite,










 SootMethod calleeMethod, final Unit exitStmt, Unit returnSite) {










 if (!(callSite instanceof DefinitionStmt))










 return KillAll.v();





















 if (exitStmt instanceof ReturnVoidStmt)










 return KillAll.v();





















 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {





















 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if(exitStmt instanceof ReturnStmt) {










 ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 if (returnStmt.getOp().equivTo(source.getO1())) {










 DefinitionStmt definitionStmt = (DefinitionStmt) callSite;










 Pair<Value, Set<DefinitionStmt>> pair = new Pair<Value, Set<DefinitionStmt>>(










 definitionStmt.getLeftOp(), source.getO2());










 return Collections.singleton(pair);










 }










 }










 return Collections.emptySet();










 }










 };










 }





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getCallToReturnFlowFunction(Unit callSite, Unit returnSite) {










 if (!(callSite instanceof DefinitionStmt))










 return Identity.v();










 










 final DefinitionStmt definitionStmt = (DefinitionStmt) callSite;










 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {





















 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if(source.getO1().equivTo(definitionStmt.getLeftOp())) {










 return Collections.emptySet();










 } else {










 return Collections.singleton(source);










 }










 }










 };










 }










 };










 }





















 @Override










 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }





















 public Pair<Value, Set<DefinitionStmt>> createZeroValue() {










 return new Pair<Value, Set<DefinitionStmt>>(new JimpleLocal("<<zero>>", NullType.v()), Collections.<DefinitionStmt> emptySet());










 }





















}














src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSUninitializedVariables.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.Kill;










import de.bodden.ide.flowfunc.KillAll;





















import soot.Local;










import soot.NullType;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.Value;










import soot.ValueBox;










import soot.jimple.DefinitionStmt;










import soot.jimple.InvokeExpr;










import soot.jimple.ReturnStmt;










import soot.jimple.Stmt;










import soot.jimple.ThrowStmt;










import soot.jimple.internal.JimpleLocal;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;










import soot.util.Chain;





















public class IFDSUninitializedVariables extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {










 super(icfg); 










 }





















 @Override










 public FlowFunctions<Unit, Local, SootMethod> createFlowFunctionsFactory() {










 return new FlowFunctions<Unit, Local, SootMethod>() {





















 @Override










 public FlowFunction<Local> getNormalFlowFunction(Unit curr, Unit succ) {










 final SootMethod m = interproceduralCFG().getMethodOf(curr);










 if(Scene.v().getEntryPoints().contains(m) && interproceduralCFG().isStartPoint(curr)) {










 return new FlowFunction<Local>() {










 










 @Override










 public Set<Local> computeTargets(Local source) {










 if (source == zeroValue()) {










 Set<Local> res = new LinkedHashSet<Local>();










 res.addAll(m.getActiveBody().getLocals());










 for(int i=0;i<m.getParameterCount();i++) 










 res.remove(m.getActiveBody().getParameterLocal(i));










 return res;










 }










 return Collections.emptySet();










 }










 };










 }










 










 if (curr instanceof DefinitionStmt) {










 final DefinitionStmt definition = (DefinitionStmt) curr;










 final Value leftOp = definition.getLeftOp();










 if(leftOp instanceof Local) {










 final Local leftOpLocal = (Local) leftOp;










 return new FlowFunction<Local>() {





















 @Override










 public Set<Local> computeTargets(final Local source) {










 List<ValueBox> useBoxes = definition.getUseBoxes();










 for (ValueBox valueBox : useBoxes) {










 if (valueBox.getValue().equivTo(source)) {










 LinkedHashSet<Local> res = new LinkedHashSet<Local>();










 res.add(source);










 res.add(leftOpLocal); 










 return res;










 }










 }





















 if (leftOp.equivTo(source))










 return Collections.emptySet();





















 return Collections.singleton(source);










 }





















 };










 }










 }





















 return Identity.v();










 }





















 @Override










 public FlowFunction<Local> getCallFlowFunction(Unit callStmt, final SootMethod destinationMethod) {










 Stmt stmt = (Stmt) callStmt;










 InvokeExpr invokeExpr = stmt.getInvokeExpr();










 final List<Value> args = invokeExpr.getArgs();





















 final List<Local> localArguments = new ArrayList<Local>();










 for (Value value : args)










 if (value instanceof Local)










 localArguments.add((Local) value);





















 return new FlowFunction<Local>() {





















 @Override










 public Set<Local> computeTargets(final Local source) {










 for (Local localArgument : localArguments) {










 if (source.equivTo(localArgument)) {










 return Collections.<Local>singleton(destinationMethod.getActiveBody().getParameterLocal(args.indexOf(localArgument)));










 }










 }





















 if (source == zeroValue()) {










 //gen all locals that are not parameter locals 










 Chain<Local> locals = destinationMethod.getActiveBody().getLocals();










 LinkedHashSet<Local> uninitializedLocals = new LinkedHashSet<Local>(locals);










 for(int i=0;i<destinationMethod.getParameterCount();i++) { 










 uninitializedLocals.remove(destinationMethod.getActiveBody().getParameterLocal(i));










 }










 return uninitializedLocals;










 }





















 return Collections.emptySet();










 }





















 };










 }





















 @Override










 public FlowFunction<Local> getReturnFlowFunction(final Unit callSite, SootMethod calleeMethod,










 final Unit exitStmt, Unit returnSite) {










 if (callSite instanceof DefinitionStmt) {










 final DefinitionStmt definition = (DefinitionStmt) callSite;










 if(definition.getLeftOp() instanceof Local) {










 final Local leftOpLocal = (Local) definition.getLeftOp(); 










 if (exitStmt instanceof ReturnStmt) {










 final ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 return new FlowFunction<Local>() {










 










 @Override










 public Set<Local> computeTargets(Local source) {










 if (returnStmt.getOp().equivTo(source))










 return Collections.singleton(leftOpLocal);










 return Collections.emptySet();










 }










 










 };










 } else if (exitStmt instanceof ThrowStmt) {










 //if we throw an exception, LHS of call is undefined










 return new FlowFunction<Local>() {










 










 @Override










 public Set<Local> computeTargets(final Local source) {










 if (source == zeroValue())










 return Collections.singleton(leftOpLocal);










 else










 return Collections.emptySet();










 }










 










 };










 }










 }










 }










 










 return KillAll.v();










 }





















 @Override










 public FlowFunction<Local> getCallToReturnFlowFunction(Unit callSite, Unit returnSite) {










 if (callSite instanceof DefinitionStmt) {










 DefinitionStmt definition = (DefinitionStmt) callSite;










 if(definition.getLeftOp() instanceof Local) {










 final Local leftOpLocal = (Local) definition.getLeftOp(); 










 return new Kill<Local>(leftOpLocal);










 }










 }










 return Identity.v();










 }










 };










 }










 @Override










 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }





















 @Override










 public Local createZeroValue() {










 return new JimpleLocal("<<zero>>", NullType.v());










 }





















}














src-soot/soot/jimple/toolkits/ide/icfg/BackwardsInterproceduralCFG.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.icfg;





















import soot.Body;










import soot.Unit;










import soot.toolkits.graph.DirectedGraph;










import soot.toolkits.graph.InverseGraph;





















/**










 * Same as {@link JimpleBasedInterproceduralCFG} but based on inverted unit graphs.










 * This should be used for backward analyses.










 */










public class BackwardsInterproceduralCFG extends JimpleBasedInterproceduralCFG {





















 @Override










 protected DirectedGraph<Unit> makeGraph(Body body) {










 return new InverseGraph<Unit>(super.makeGraph(body));










 }










 










}














src-soot/soot/jimple/toolkits/ide/icfg/JimpleBasedInterproceduralCFG.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.icfg;





















import java.util.ArrayList;










import java.util.HashMap;










import java.util.Iterator;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Map;










import java.util.Set;





















import soot.Body;










import soot.MethodOrMethodContext;










import soot.PatchingChain;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.UnitBox;










import soot.jimple.Stmt;










import soot.jimple.toolkits.callgraph.CallGraph;










import soot.jimple.toolkits.callgraph.Edge;










import soot.jimple.toolkits.callgraph.EdgePredicate;










import soot.jimple.toolkits.callgraph.Filter;










import soot.jimple.toolkits.callgraph.ReachableMethods;










import soot.toolkits.exceptions.UnitThrowAnalysis;










import soot.toolkits.graph.DirectedGraph;










import soot.toolkits.graph.ExceptionalUnitGraph;





















import com.google.common.cache.CacheLoader;










import com.google.common.cache.LoadingCache;





















import de.bodden.ide.DontSynchronize;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.SynchronizedBy;










import de.bodden.ide.ThreadSafe;










import de.bodden.ide.solver.IDESolver;





















/**










 * Default implementation for the {@link InterproceduralCFG} interface.










 * Includes all statements reachable from {@link Scene#getEntryPoints()} through










 * explicit call statements or through calls to {@link Thread#start()}.










 * 










 * This class is designed to be thread safe, and subclasses of this class must be designed










 * in a thread-safe way, too.










 */










@ThreadSafe










public class JimpleBasedInterproceduralCFG implements InterproceduralCFG<Unit,SootMethod> {










 










 //retains only callers that are explicit call sites or Thread.start()










 protected static class EdgeFilter extends Filter { 










 protected EdgeFilter() {










 super(new EdgePredicate() {










 public boolean want(Edge e) { 










 return e.kind().isExplicit() || e.kind().isThread();










 }










 });










 }










 }










 










 @DontSynchronize("readonly")










 protected final CallGraph cg;










 










 @DontSynchronize("written by single thread; read afterwards")










 protected final Map<Unit,Body> unitToOwner = new HashMap<Unit,Body>(); 










 










 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<Body,DirectedGraph<Unit>> bodyToUnitGraph =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<Body,DirectedGraph<Unit>>() {










 public DirectedGraph<Unit> load(Body body) throws Exception {










 return makeGraph(body);










 }










 });










 










 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<Unit,Set<SootMethod>> unitToCallees =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<Unit,Set<SootMethod>>() {










 public Set<SootMethod> load(Unit u) throws Exception {










 Set<SootMethod> res = new LinkedHashSet<SootMethod>();










 //only retain callers that are explicit call sites or Thread.start()










 Iterator<Edge> edgeIter = new EdgeFilter().wrap(cg.edgesOutOf(u)); 










 while(edgeIter.hasNext()) {










 Edge edge = edgeIter.next();










 if(edge.getTgt()==null) {










 System.err.println();










 }










 SootMethod m = edge.getTgt().method();










 if(m.hasActiveBody())










 res.add(m);










 }










 return res; 










 }










 });





















 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<SootMethod,Set<Unit>> methodToCallers =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<SootMethod,Set<Unit>>() {










 public Set<Unit> load(SootMethod m) throws Exception {










 Set<Unit> res = new LinkedHashSet<Unit>(); 










 //only retain callers that are explicit call sites or Thread.start()










 Iterator<Edge> edgeIter = new EdgeFilter().wrap(cg.edgesInto(m)); 










 while(edgeIter.hasNext()) {










 Edge edge = edgeIter.next();










 res.add(edge.srcUnit()); 










 }










 return res;










 }










 });





















 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<SootMethod,Set<Unit>> methodToCallsFromWithin =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<SootMethod,Set<Unit>>() {










 public Set<Unit> load(SootMethod m) throws Exception {










 Set<Unit> res = new LinkedHashSet<Unit>();










 //only retain calls that are explicit call sites or Thread.start()










 Iterator<Edge> edgeIter = new EdgeFilter().wrap(cg.edgesOutOf(m));










 while(edgeIter.hasNext()) {










 Edge edge = edgeIter.next();










 res.add(edge.srcUnit()); 










 }










 return res;










 }










 });





















 










 public JimpleBasedInterproceduralCFG() {










 cg = Scene.v().getCallGraph();










 










 List<MethodOrMethodContext> eps = new ArrayList<MethodOrMethodContext>();










 eps.addAll(Scene.v().getEntryPoints());










 ReachableMethods reachableMethods = new ReachableMethods(cg, eps.iterator(), new EdgeFilter());










 reachableMethods.update();










 










 for(Iterator<MethodOrMethodContext> iter = reachableMethods.listener(); iter.hasNext(); ) {










 SootMethod m = iter.next().method();










 if(m.hasActiveBody()) {










 Body b = m.getActiveBody();










 PatchingChain<Unit> units = b.getUnits();










 for (Unit unit : units) {










 unitToOwner.put(unit, b);










 }










 }










 }










 }





















 @Override










 public SootMethod getMethodOf(Unit u) {










 return unitToOwner.get(u).getMethod();










 }





















 @Override










 public List<Unit> getSuccsOf(Unit u) {










 Body body = unitToOwner.get(u);










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body);










 return unitGraph.getSuccsOf(u);










 }





















 private DirectedGraph<Unit> getOrCreateUnitGraph(Body body) {










 return bodyToUnitGraph.getUnchecked(body);










 }





















 protected synchronized DirectedGraph<Unit> makeGraph(Body body) {










 return new ExceptionalUnitGraph(body, UnitThrowAnalysis.v() ,true);










 }





















 @Override










 public Set<SootMethod> getCalleesOfCallAt(Unit u) {










 return unitToCallees.getUnchecked(u);










 }





















 @Override










 public List<Unit> getReturnSitesOfCallAt(Unit u) {










 return getSuccsOf(u);










 }





















 @Override










 public boolean isCallStmt(Unit u) {










 return ((Stmt)u).containsInvokeExpr();










 }





















 @Override










 public boolean isExitStmt(Unit u) {










 Body body = unitToOwner.get(u);










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body);










 return unitGraph.getTails().contains(u);










 }





















 @Override










 public Set<Unit> getCallersOf(SootMethod m) {










 return methodToCallers.getUnchecked(m);










 }










 










 @Override










 public Set<Unit> getCallsFromWithin(SootMethod m) {










 return methodToCallsFromWithin.getUnchecked(m); 










 }





















 @Override










 public Set<Unit> getStartPointsOf(SootMethod m) {










 if(m.hasActiveBody()) {










 Body body = m.getActiveBody();










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body);










 return new LinkedHashSet<Unit>(unitGraph.getHeads());










 }










 return null;










 }





















 @Override










 public boolean isStartPoint(Unit u) {










 Body body = unitToOwner.get(u);










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body); 










 return unitGraph.getHeads().contains(u);










 }





















 @Override










 //TODO do we need to replace call by return for backwards analysis?










 public Set<Unit> allNonCallStartNodes() {










 Set<Unit> res = new LinkedHashSet<Unit>(unitToOwner.keySet());










 for (Iterator<Unit> iter = res.iterator(); iter.hasNext();) {










 Unit u = iter.next();










 if(isStartPoint(u) || isCallStmt(u)) iter.remove();










 }










 return res;










 }





















 @Override










 public boolean isFallThroughSuccessor(Unit u, Unit succ) {










 assert getSuccsOf(u).contains(succ);










 if(!u.fallsThrough()) return false;










 Body body = unitToOwner.get(u);










 return body.getUnits().getSuccOf(u) == succ;










 }





















 @Override










 public boolean isBranchTarget(Unit u, Unit succ) {










 assert getSuccsOf(u).contains(succ);










 if(!u.branches()) return false;










 for (UnitBox ub : succ.getUnitBoxes()) {










 if(ub.getUnit()==succ) return true;










 }










 return false;










 }










}














src-generic/de/bodden/ide/DontSynchronize.java

→

src/de/bodden/ide/DontSynchronize.java








View file @ ae1aae21





File moved













src-generic/de/bodden/ide/EdgeFunction.java

→

src/de/bodden/ide/EdgeFunction.java








View file @ ae1aae21





File moved













src-generic/de/bodden/ide/EdgeFunctionCache.java

→

src/de/bodden/ide/EdgeFunctionCache.java








View file @ ae1aae21





File moved













src-generic/de/bodden/ide/EdgeFunctions.java

→

src/de/bodden/ide/EdgeFunctions.java








View file @ ae1aae21





File moved













src-generic/de/bodden/ide/FlowFunction.java

→

src/de/bodden/ide/FlowFunction.java








View file @ ae1aae21





File moved













src-generic/de/bodden/ide/FlowFunctionCache.java

→

src/de/bodden/ide/FlowFunctionCache.java








View file @ ae1aae21





File moved








Prev


1


2


3


Next















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

ae1aae21















Commit
ae1aae21


authored
Nov 29, 2012
by


Eric Bodden



Browse files




moved Soot-specifiv code to soot







parent
f7c0f2f6













Changes
47




Hide whitespace changes

Inline
Side-by-side















.classpath








View file @ ae1aae21













<?xml version="1.0" encoding="UTF-8"?>










<classpath>










 <classpathentry combineaccessrules="false" exported="true" kind="src" path="/soot"/>










 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>










 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src-generic"/>










 <classpathentry kind="src" path="src-soot"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry exported="true" kind="lib" path="guava-13.0.jar"/>










 <classpathentry kind="lib" path="soot-trunk.jar" sourcepath="/soot"/>










 <classpathentry kind="output" path="bin"/>










</classpath>














META-INF/MANIFEST.MF








View file @ ae1aae21






......@@ -22,119 +22,4 @@ Export-Package: com.google.common.annotations,









 de.bodden.ide.edgefunc,










 de.bodden.ide.flowfunc,










 de.bodden.ide.solver,










 de.bodden.ide.template,










 soot,










 soot.JastAddJ,










 soot.baf,










 soot.baf.internal,










 soot.baf.toolkits.base,










 soot.coffi,










 soot.dava,










 soot.dava.internal.AST,










 soot.dava.internal.SET,










 soot.dava.internal.asg,










 soot.dava.internal.javaRep,










 soot.dava.toolkits.base.AST,










 soot.dava.toolkits.base.AST.analysis,










 soot.dava.toolkits.base.AST.interProcedural,










 soot.dava.toolkits.base.AST.structuredAnalysis,










 soot.dava.toolkits.base.AST.transformations,










 soot.dava.toolkits.base.AST.traversals,










 soot.dava.toolkits.base.DavaMonitor,










 soot.dava.toolkits.base.finders,










 soot.dava.toolkits.base.misc,










 soot.dava.toolkits.base.renamer,










 soot.grimp,










 soot.grimp.internal,










 soot.grimp.toolkits.base,










 soot.javaToJimple,










 soot.javaToJimple.jj,










 soot.javaToJimple.jj.ast,










 soot.javaToJimple.jj.types,










 soot.javaToJimple.toolkits,










 soot.jbco,










 soot.jbco.bafTransformations,










 soot.jbco.gui,










 soot.jbco.jimpleTransformations,










 soot.jbco.util,










 soot.jimple,










 soot.jimple.internal,










 soot.jimple.paddle,










 soot.jimple.parser,










 soot.jimple.parser.analysis,










 soot.jimple.parser.lexer,










 soot.jimple.parser.node,










 soot.jimple.parser.parser,










 soot.jimple.spark,










 soot.jimple.spark.builder,










 soot.jimple.spark.fieldrw,










 soot.jimple.spark.geom,










 soot.jimple.spark.geom.geomE,










 soot.jimple.spark.geom.geomPA,










 soot.jimple.spark.geom.heapinsE,










 soot.jimple.spark.geom.ptinsE,










 soot.jimple.spark.internal,










 soot.jimple.spark.ondemand,










 soot.jimple.spark.ondemand.genericutil,










 soot.jimple.spark.ondemand.pautil,










 soot.jimple.spark.pag,










 soot.jimple.spark.sets,










 soot.jimple.spark.solver,










 soot.jimple.toolkits.annotation,










 soot.jimple.toolkits.annotation.arraycheck,










 soot.jimple.toolkits.annotation.callgraph,










 soot.jimple.toolkits.annotation.defs,










 soot.jimple.toolkits.annotation.fields,










 soot.jimple.toolkits.annotation.j5anno,










 soot.jimple.toolkits.annotation.liveness,










 soot.jimple.toolkits.annotation.logic,










 soot.jimple.toolkits.annotation.methods,










 soot.jimple.toolkits.annotation.nullcheck,










 soot.jimple.toolkits.annotation.parity,










 soot.jimple.toolkits.annotation.profiling,










 soot.jimple.toolkits.annotation.purity,










 soot.jimple.toolkits.annotation.qualifiers,










 soot.jimple.toolkits.annotation.tags,










 soot.jimple.toolkits.base,










 soot.jimple.toolkits.callgraph,










 soot.jimple.toolkits.graph,










 soot.jimple.toolkits.infoflow,










 soot.jimple.toolkits.invoke,










 soot.jimple.toolkits.pointer,










 soot.jimple.toolkits.pointer.nativemethods,










 soot.jimple.toolkits.pointer.representations,










 soot.jimple.toolkits.pointer.util,










 soot.jimple.toolkits.reflection,










 soot.jimple.toolkits.scalar,










 soot.jimple.toolkits.scalar.pre,










 soot.jimple.toolkits.thread,










 soot.jimple.toolkits.thread.mhp,










 soot.jimple.toolkits.thread.mhp.findobject,










 soot.jimple.toolkits.thread.mhp.pegcallgraph,










 soot.jimple.toolkits.thread.mhp.stmt,










 soot.jimple.toolkits.thread.synchronization,










 soot.jimple.toolkits.typing,










 soot.jimple.toolkits.typing.fast,










 soot.jimple.toolkits.typing.integer,










 soot.options,










 soot.rtlib.tamiflex,










 soot.shimple,










 soot.shimple.internal,










 soot.shimple.toolkits.graph,










 soot.shimple.toolkits.scalar,










 soot.sootify,










 soot.tagkit,










 soot.toolkits.astmetrics,










 soot.toolkits.astmetrics.DataHandlingApplication,










 soot.toolkits.exceptions,










 soot.toolkits.graph,










 soot.toolkits.graph.interaction,










 soot.toolkits.graph.pdg,










 soot.toolkits.scalar,










 soot.tools,










 soot.util,










 soot.util.cfgcmd,










 soot.util.dot,










 soot.util.queue,










 soot.xml,










 soot.jimple.toolkits.ide.exampleproblems









 de.bodden.ide.template














build.properties








View file @ ae1aae21













source.soot-ifds.jar = src-generic/










source.soot-ifds.jar = src/










bin.includes = META-INF/,\










 soot-ifds.jar,\










 soot-trunk.jar,\



......














src-soot/soot/jimple/toolkits/ide/DefaultJimpleIDETabulationProblem.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import soot.SootMethod;










import soot.Unit;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.template.DefaultIDETabulationProblem;





















/**










 *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods.










 */










public abstract class DefaultJimpleIDETabulationProblem<D,V,I extends InterproceduralCFG<Unit,SootMethod>>










 extends DefaultIDETabulationProblem<Unit,D,SootMethod,V,I> {





















 public DefaultJimpleIDETabulationProblem(I icfg) {










 super(icfg);










 }










 










}














src-soot/soot/jimple/toolkits/ide/DefaultJimpleIFDSTabulationProblem.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import soot.SootMethod;










import soot.Unit;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.template.DefaultIDETabulationProblem;










import de.bodden.ide.template.DefaultIFDSTabulationProblem;





















/**










 *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods.










 */










public abstract class DefaultJimpleIFDSTabulationProblem<D,I extends InterproceduralCFG<Unit,SootMethod>>










 extends DefaultIFDSTabulationProblem<Unit,D,SootMethod,I> {





















 public DefaultJimpleIFDSTabulationProblem(I icfg) {










 super(icfg);










 }










 










}














src-soot/soot/jimple/toolkits/ide/JimpleIDESolver.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IDESolver;





















public class JimpleIDESolver<D, V> extends IDESolver<Unit, D, SootMethod, V, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, V> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}














src-soot/soot/jimple/toolkits/ide/JimpleIFDSSolver.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IFDSSolver;





















public class JimpleIFDSSolver<D, V> extends IFDSSolver<Unit, D, SootMethod, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, ?> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}














src-soot/soot/jimple/toolkits/ide/Main.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.util.Map;





















import de.bodden.ide.IFDSTabulationProblem;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IFDSSolver;





















import soot.Local;










import soot.PackManager;










import soot.Scene;










import soot.SceneTransformer;










import soot.SootMethod;










import soot.Transform;










import soot.Unit;










import soot.jimple.toolkits.ide.exampleproblems.IFDSLocalInfoFlow;










import soot.jimple.toolkits.ide.icfg.JimpleBasedInterproceduralCFG;





















public class Main {





















 /**










	 * @param args










	 */










 public static void main(String[] args) {










 










 










 PackManager.v().getPack("wjtp").add(new Transform("wjtp.ifds", new SceneTransformer() {










 protected void internalTransform(String phaseName, @SuppressWarnings("rawtypes") Map options) {





















 IFDSTabulationProblem<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>> problem = new IFDSLocalInfoFlow(new JimpleBasedInterproceduralCFG());










 










 IFDSSolver<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>> solver = new IFDSSolver<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>>(problem); 










 solver.solve();










 Unit ret = Scene.v().getMainMethod().getActiveBody().getUnits().getLast();










 for(Local l: solver.ifdsResultsAt(ret)) {










 System.err.println(l);










 }










 }










 }));










 










 soot.Main.main(args);










 }





















}














src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSLocalInfoFlow.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Gen;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.Kill;










import de.bodden.ide.flowfunc.KillAll;










import de.bodden.ide.flowfunc.Transfer;





















import soot.Local;










import soot.NullType;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.Value;










import soot.jimple.AssignStmt;










import soot.jimple.DefinitionStmt;










import soot.jimple.IdentityStmt;










import soot.jimple.InvokeExpr;










import soot.jimple.ParameterRef;










import soot.jimple.ReturnStmt;










import soot.jimple.Stmt;










import soot.jimple.internal.JimpleLocal;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;





















public class IFDSLocalInfoFlow extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {










 super(icfg); 










 }





















 public FlowFunctions<Unit, Local, SootMethod> createFlowFunctionsFactory() { 










 return new FlowFunctions<Unit,Local,SootMethod>() {





















 @Override










 public FlowFunction<Local> getNormalFlowFunction(Unit src, Unit dest) {










 if (src instanceof IdentityStmt && interproceduralCFG().getMethodOf(src)==Scene.v().getMainMethod()) {










 IdentityStmt is = (IdentityStmt) src;










 Local leftLocal = (Local) is.getLeftOp();










 Value right = is.getRightOp();










 if (right instanceof ParameterRef) {










 return new Gen<Local>(leftLocal,zeroValue());










 }










 }










 










 if(src instanceof AssignStmt) {










 AssignStmt assignStmt = (AssignStmt) src;










 Value right = assignStmt.getRightOp();










 if(assignStmt.getLeftOp() instanceof Local) {










 final Local leftLocal = (Local) assignStmt.getLeftOp();










 if(right instanceof Local) {










 final Local rightLocal = (Local) right;










 return new Transfer<Local>(leftLocal, rightLocal);










 } else {










 return new Kill<Local>(leftLocal);










 }










 }










 }










 return Identity.v();










 }





















 @Override










 public FlowFunction<Local> getCallFlowFunction(Unit src, final SootMethod dest) {










 Stmt stmt = (Stmt) src;










 InvokeExpr ie = stmt.getInvokeExpr();










 final List<Value> callArgs = ie.getArgs();










 final List<Local> paramLocals = new ArrayList<Local>();










 for(int i=0;i<dest.getParameterCount();i++) {










 paramLocals.add(dest.getActiveBody().getParameterLocal(i));










 }










 return new FlowFunction<Local>() {





















 public Set<Local> computeTargets(Local source) {










 int argIndex = callArgs.indexOf(source);










 if(argIndex>-1) {










 return Collections.singleton(paramLocals.get(argIndex));










 }










 return Collections.emptySet();










 }










 };










 }





















 @Override










 public FlowFunction<Local> getReturnFlowFunction(Unit callSite, SootMethod callee, Unit exitStmt, Unit retSite) {










 if (exitStmt instanceof ReturnStmt) { 










 ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 Value op = returnStmt.getOp();










 if(op instanceof Local) {










 if(callSite instanceof DefinitionStmt) {










 DefinitionStmt defnStmt = (DefinitionStmt) callSite;










 Value leftOp = defnStmt.getLeftOp();










 if(leftOp instanceof Local) {










 final Local tgtLocal = (Local) leftOp;










 final Local retLocal = (Local) op;










 return new FlowFunction<Local>() {





















 public Set<Local> computeTargets(Local source) {










 if(source==retLocal)










 return Collections.singleton(tgtLocal);










 return Collections.emptySet();










 }










 










 };










 }










 }










 }










 } 










 return KillAll.v();










 }





















 @Override










 public FlowFunction<Local> getCallToReturnFlowFunction(Unit call, Unit returnSite) {










 return Identity.v();










 }










 }; 










 }





















 @Override










 public Local createZeroValue() {










 return new JimpleLocal("zero", NullType.v());










 }





















 @Override










 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }










}




\ No newline at end of file














src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSPossibleTypes.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.KillAll;





















import soot.Local;










import soot.PointsToAnalysis;










import soot.PointsToSet;










import soot.PrimType;










import soot.Scene;










import soot.SootMethod;










import soot.Type;










import soot.Unit;










import soot.UnknownType;










import soot.Value;










import soot.jimple.ArrayRef;










import soot.jimple.Constant;










import soot.jimple.DefinitionStmt;










import soot.jimple.InstanceFieldRef;










import soot.jimple.InvokeExpr;










import soot.jimple.Jimple;










import soot.jimple.NewExpr;










import soot.jimple.Ref;










import soot.jimple.ReturnStmt;










import soot.jimple.Stmt;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;










import soot.toolkits.scalar.Pair;





















@SuppressWarnings("serial")










public class IFDSPossibleTypes extends DefaultJimpleIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {










 super(icfg);










 }





















 public FlowFunctions<Unit, Pair<Value,Type>, SootMethod> createFlowFunctionsFactory() {










 return new FlowFunctions<Unit,Pair<Value,Type>,SootMethod>() {





















 public FlowFunction<Pair<Value,Type>> getNormalFlowFunction(Unit src, Unit dest) {










 if(src instanceof DefinitionStmt) {










 DefinitionStmt defnStmt = (DefinitionStmt) src;










 if(defnStmt.containsInvokeExpr()) return Identity.v();










 final Value right = defnStmt.getRightOp();










 final Value left = defnStmt.getLeftOp();










 //won't track primitive-typed variables










 if(right.getType() instanceof PrimType) return Identity.v();










 










 if(right instanceof Constant || right instanceof NewExpr) {










 return new FlowFunction<Pair<Value,Type>>() {










 public Set<Pair<Value, Type>> computeTargets(Pair<Value, Type> source) {










 if(source==new Pair<Value, Type>(Jimple.v().newLocal("<dummy>", UnknownType.v()), UnknownType.v())) {










 Set<Pair<Value, Type>> res = new LinkedHashSet<Pair<Value,Type>>();










 res.add(new Pair<Value,Type>(left,right.getType()));










 res.add(new Pair<Value, Type>(Jimple.v().newLocal("<dummy>", UnknownType.v()), UnknownType.v()));










 return res;










 } else if(source.getO1() instanceof Local && source.getO1().equivTo(left)) {










 //strong update for local variables










 return Collections.emptySet();










 } else {










 return Collections.singleton(source);










 }










 }










 };










 } else if(right instanceof Ref || right instanceof Local) {










 return new FlowFunction<Pair<Value,Type>>() {










 public Set<Pair<Value, Type>> computeTargets(final Pair<Value, Type> source) {










 Value value = source.getO1();










 if(source.getO1() instanceof Local && source.getO1().equivTo(left)) {










 //strong update for local variables










 return Collections.emptySet();










 } else if(maybeSameLocation(value,right)) {










 return new LinkedHashSet<Pair<Value,Type>>() {{










 add(new Pair<Value,Type>(left,source.getO2())); 










 add(source); 










 }};










 } else {










 return Collections.singleton(source);










 }










 }





















 private boolean maybeSameLocation(Value v1, Value v2) {










 if(!(v1 instanceof InstanceFieldRef && v2 instanceof InstanceFieldRef) &&










 !(v1 instanceof ArrayRef && v2 instanceof ArrayRef)) {










 return v1.equivTo(v2);










 }










 if(v1 instanceof InstanceFieldRef && v2 instanceof InstanceFieldRef) {










 InstanceFieldRef ifr1 = (InstanceFieldRef) v1;










 InstanceFieldRef ifr2 = (InstanceFieldRef) v2;










 if(!ifr1.getField().getName().equals(ifr2.getField().getName())) return false;










 










 Local base1 = (Local) ifr1.getBase();










 Local base2 = (Local) ifr2.getBase();










 PointsToAnalysis pta = Scene.v().getPointsToAnalysis();










 PointsToSet pts1 = pta.reachingObjects(base1);










 PointsToSet pts2 = pta.reachingObjects(base2); 










 return pts1.hasNonEmptyIntersection(pts2);










 } else { //v1 instanceof ArrayRef && v2 instanceof ArrayRef










 ArrayRef ar1 = (ArrayRef) v1;










 ArrayRef ar2 = (ArrayRef) v2;





















 Local base1 = (Local) ar1.getBase();










 Local base2 = (Local) ar2.getBase();










 PointsToAnalysis pta = Scene.v().getPointsToAnalysis();










 PointsToSet pts1 = pta.reachingObjects(base1);










 PointsToSet pts2 = pta.reachingObjects(base2); 










 return pts1.hasNonEmptyIntersection(pts2);










 }










 }










 };










 } 










 }










 return Identity.v();










 }





















 public FlowFunction<Pair<Value,Type>> getCallFlowFunction(final Unit src, final SootMethod dest) {










 Stmt stmt = (Stmt) src;










 InvokeExpr ie = stmt.getInvokeExpr();










 final List<Value> callArgs = ie.getArgs();










 final List<Local> paramLocals = new ArrayList<Local>();










 for(int i=0;i<dest.getParameterCount();i++) {










 paramLocals.add(dest.getActiveBody().getParameterLocal(i));










 } 










 return new FlowFunction<Pair<Value,Type>>() {










 public Set<Pair<Value,Type>> computeTargets(Pair<Value,Type> source) {










 Value value = source.getO1();










 int argIndex = callArgs.indexOf(value);










 if(argIndex>-1) {










 return Collections.singleton(new Pair<Value,Type>(paramLocals.get(argIndex), source.getO2()));










 }










 return Collections.emptySet();










 }










 };










 }





















 public FlowFunction<Pair<Value,Type>> getReturnFlowFunction(Unit callSite, SootMethod callee, Unit exitStmt, Unit retSite) {










 if (exitStmt instanceof ReturnStmt) { 










 ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 Value op = returnStmt.getOp();










 if(op instanceof Local) {










 if(callSite instanceof DefinitionStmt) {










 DefinitionStmt defnStmt = (DefinitionStmt) callSite;










 Value leftOp = defnStmt.getLeftOp();










 if(leftOp instanceof Local) {










 final Local tgtLocal = (Local) leftOp;










 final Local retLocal = (Local) op;










 return new FlowFunction<Pair<Value,Type>>() {





















 public Set<Pair<Value,Type>> computeTargets(Pair<Value,Type> source) {










 if(source==retLocal)










 return Collections.singleton(new Pair<Value,Type>(tgtLocal, source.getO2()));










 return Collections.emptySet();










 }










 










 };










 }










 }










 }










 }










 return KillAll.v();










 }





















 public FlowFunction<Pair<Value,Type>> getCallToReturnFlowFunction(Unit call, Unit returnSite) {










 return Identity.v();










 }










 };










 }





















 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }





















 public Pair<Value,Type> createZeroValue() {










 return new Pair<Value, Type>(Jimple.v().newLocal("<dummy>", UnknownType.v()), UnknownType.v());










 }










}




\ No newline at end of file














src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSReachingDefinitions.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.KillAll;





















import soot.EquivalentValue;










import soot.Local;










import soot.NullType;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.Value;










import soot.jimple.DefinitionStmt;










import soot.jimple.InvokeExpr;










import soot.jimple.Jimple;










import soot.jimple.ReturnStmt;










import soot.jimple.ReturnVoidStmt;










import soot.jimple.Stmt;










import soot.jimple.internal.JimpleLocal;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;










import soot.toolkits.scalar.Pair;





















public class IFDSReachingDefinitions extends DefaultJimpleIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {










 public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {










 super(icfg);










 }










 










 @Override










 public FlowFunctions<Unit, Pair<Value, Set<DefinitionStmt>>, SootMethod> createFlowFunctionsFactory() {










 return new FlowFunctions<Unit, Pair<Value, Set<DefinitionStmt>>, SootMethod>() {





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getNormalFlowFunction(final Unit curr, Unit succ) {










 if (curr instanceof DefinitionStmt) {










 final DefinitionStmt assignment = (DefinitionStmt) curr;





















 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {










 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if (source != zeroValue()) {










 if (source.getO1().equivTo(assignment.getLeftOp())) {










 return Collections.emptySet();










 }










 return Collections.singleton(source);










 } else {










 LinkedHashSet<Pair<Value, Set<DefinitionStmt>>> res = new LinkedHashSet<Pair<Value, Set<DefinitionStmt>>>();










 res.add(new Pair<Value, Set<DefinitionStmt>>(assignment.getLeftOp(),










 Collections.<DefinitionStmt> singleton(assignment)));










 return res;










 }










 }










 };










 }





















 return Identity.v();










 }





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getCallFlowFunction(Unit callStmt,










 final SootMethod destinationMethod) {










 Stmt stmt = (Stmt) callStmt;










 InvokeExpr invokeExpr = stmt.getInvokeExpr();










 final List<Value> args = invokeExpr.getArgs();





















 final List<Local> localArguments = new ArrayList<Local>(args.size());










 for (Value value : args) {










 if (value instanceof Local)










 localArguments.add((Local) value);










 else










 localArguments.add(null);










 }





















 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {





















 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if(localArguments.contains(source.getO1())) {










 int paramIndex = args.indexOf(source.getO1());










 Pair<Value, Set<DefinitionStmt>> pair = new Pair<Value, Set<DefinitionStmt>>(










 new EquivalentValue(Jimple.v().newParameterRef(destinationMethod.getParameterType(paramIndex), paramIndex)),










 source.getO2());










 return Collections.singleton(pair);










 }





















 return Collections.emptySet();










 }










 };










 }





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getReturnFlowFunction(final Unit callSite,










 SootMethod calleeMethod, final Unit exitStmt, Unit returnSite) {










 if (!(callSite instanceof DefinitionStmt))










 return KillAll.v();





















 if (exitStmt instanceof ReturnVoidStmt)










 return KillAll.v();





















 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {





















 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if(exitStmt instanceof ReturnStmt) {










 ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 if (returnStmt.getOp().equivTo(source.getO1())) {










 DefinitionStmt definitionStmt = (DefinitionStmt) callSite;










 Pair<Value, Set<DefinitionStmt>> pair = new Pair<Value, Set<DefinitionStmt>>(










 definitionStmt.getLeftOp(), source.getO2());










 return Collections.singleton(pair);










 }










 }










 return Collections.emptySet();










 }










 };










 }





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getCallToReturnFlowFunction(Unit callSite, Unit returnSite) {










 if (!(callSite instanceof DefinitionStmt))










 return Identity.v();










 










 final DefinitionStmt definitionStmt = (DefinitionStmt) callSite;










 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {





















 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if(source.getO1().equivTo(definitionStmt.getLeftOp())) {










 return Collections.emptySet();










 } else {










 return Collections.singleton(source);










 }










 }










 };










 }










 };










 }





















 @Override










 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }





















 public Pair<Value, Set<DefinitionStmt>> createZeroValue() {










 return new Pair<Value, Set<DefinitionStmt>>(new JimpleLocal("<<zero>>", NullType.v()), Collections.<DefinitionStmt> emptySet());










 }





















}














src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSUninitializedVariables.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.Kill;










import de.bodden.ide.flowfunc.KillAll;





















import soot.Local;










import soot.NullType;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.Value;










import soot.ValueBox;










import soot.jimple.DefinitionStmt;










import soot.jimple.InvokeExpr;










import soot.jimple.ReturnStmt;










import soot.jimple.Stmt;










import soot.jimple.ThrowStmt;










import soot.jimple.internal.JimpleLocal;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;










import soot.util.Chain;





















public class IFDSUninitializedVariables extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {










 super(icfg); 










 }





















 @Override










 public FlowFunctions<Unit, Local, SootMethod> createFlowFunctionsFactory() {










 return new FlowFunctions<Unit, Local, SootMethod>() {





















 @Override










 public FlowFunction<Local> getNormalFlowFunction(Unit curr, Unit succ) {










 final SootMethod m = interproceduralCFG().getMethodOf(curr);










 if(Scene.v().getEntryPoints().contains(m) && interproceduralCFG().isStartPoint(curr)) {










 return new FlowFunction<Local>() {










 










 @Override










 public Set<Local> computeTargets(Local source) {










 if (source == zeroValue()) {










 Set<Local> res = new LinkedHashSet<Local>();










 res.addAll(m.getActiveBody().getLocals());










 for(int i=0;i<m.getParameterCount();i++) 










 res.remove(m.getActiveBody().getParameterLocal(i));










 return res;










 }










 return Collections.emptySet();










 }










 };










 }










 










 if (curr instanceof DefinitionStmt) {










 final DefinitionStmt definition = (DefinitionStmt) curr;










 final Value leftOp = definition.getLeftOp();










 if(leftOp instanceof Local) {










 final Local leftOpLocal = (Local) leftOp;










 return new FlowFunction<Local>() {





















 @Override










 public Set<Local> computeTargets(final Local source) {










 List<ValueBox> useBoxes = definition.getUseBoxes();










 for (ValueBox valueBox : useBoxes) {










 if (valueBox.getValue().equivTo(source)) {










 LinkedHashSet<Local> res = new LinkedHashSet<Local>();










 res.add(source);










 res.add(leftOpLocal); 










 return res;










 }










 }





















 if (leftOp.equivTo(source))










 return Collections.emptySet();





















 return Collections.singleton(source);










 }





















 };










 }










 }





















 return Identity.v();










 }





















 @Override










 public FlowFunction<Local> getCallFlowFunction(Unit callStmt, final SootMethod destinationMethod) {










 Stmt stmt = (Stmt) callStmt;










 InvokeExpr invokeExpr = stmt.getInvokeExpr();










 final List<Value> args = invokeExpr.getArgs();





















 final List<Local> localArguments = new ArrayList<Local>();










 for (Value value : args)










 if (value instanceof Local)










 localArguments.add((Local) value);





















 return new FlowFunction<Local>() {





















 @Override










 public Set<Local> computeTargets(final Local source) {










 for (Local localArgument : localArguments) {










 if (source.equivTo(localArgument)) {










 return Collections.<Local>singleton(destinationMethod.getActiveBody().getParameterLocal(args.indexOf(localArgument)));










 }










 }





















 if (source == zeroValue()) {










 //gen all locals that are not parameter locals 










 Chain<Local> locals = destinationMethod.getActiveBody().getLocals();










 LinkedHashSet<Local> uninitializedLocals = new LinkedHashSet<Local>(locals);










 for(int i=0;i<destinationMethod.getParameterCount();i++) { 










 uninitializedLocals.remove(destinationMethod.getActiveBody().getParameterLocal(i));










 }










 return uninitializedLocals;










 }





















 return Collections.emptySet();










 }





















 };










 }





















 @Override










 public FlowFunction<Local> getReturnFlowFunction(final Unit callSite, SootMethod calleeMethod,










 final Unit exitStmt, Unit returnSite) {










 if (callSite instanceof DefinitionStmt) {










 final DefinitionStmt definition = (DefinitionStmt) callSite;










 if(definition.getLeftOp() instanceof Local) {










 final Local leftOpLocal = (Local) definition.getLeftOp(); 










 if (exitStmt instanceof ReturnStmt) {










 final ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 return new FlowFunction<Local>() {










 










 @Override










 public Set<Local> computeTargets(Local source) {










 if (returnStmt.getOp().equivTo(source))










 return Collections.singleton(leftOpLocal);










 return Collections.emptySet();










 }










 










 };










 } else if (exitStmt instanceof ThrowStmt) {










 //if we throw an exception, LHS of call is undefined










 return new FlowFunction<Local>() {










 










 @Override










 public Set<Local> computeTargets(final Local source) {










 if (source == zeroValue())










 return Collections.singleton(leftOpLocal);










 else










 return Collections.emptySet();










 }










 










 };










 }










 }










 }










 










 return KillAll.v();










 }





















 @Override










 public FlowFunction<Local> getCallToReturnFlowFunction(Unit callSite, Unit returnSite) {










 if (callSite instanceof DefinitionStmt) {










 DefinitionStmt definition = (DefinitionStmt) callSite;










 if(definition.getLeftOp() instanceof Local) {










 final Local leftOpLocal = (Local) definition.getLeftOp(); 










 return new Kill<Local>(leftOpLocal);










 }










 }










 return Identity.v();










 }










 };










 }










 @Override










 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }





















 @Override










 public Local createZeroValue() {










 return new JimpleLocal("<<zero>>", NullType.v());










 }





















}














src-soot/soot/jimple/toolkits/ide/icfg/BackwardsInterproceduralCFG.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.icfg;





















import soot.Body;










import soot.Unit;










import soot.toolkits.graph.DirectedGraph;










import soot.toolkits.graph.InverseGraph;





















/**










 * Same as {@link JimpleBasedInterproceduralCFG} but based on inverted unit graphs.










 * This should be used for backward analyses.










 */










public class BackwardsInterproceduralCFG extends JimpleBasedInterproceduralCFG {





















 @Override










 protected DirectedGraph<Unit> makeGraph(Body body) {










 return new InverseGraph<Unit>(super.makeGraph(body));










 }










 










}














src-soot/soot/jimple/toolkits/ide/icfg/JimpleBasedInterproceduralCFG.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.icfg;





















import java.util.ArrayList;










import java.util.HashMap;










import java.util.Iterator;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Map;










import java.util.Set;





















import soot.Body;










import soot.MethodOrMethodContext;










import soot.PatchingChain;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.UnitBox;










import soot.jimple.Stmt;










import soot.jimple.toolkits.callgraph.CallGraph;










import soot.jimple.toolkits.callgraph.Edge;










import soot.jimple.toolkits.callgraph.EdgePredicate;










import soot.jimple.toolkits.callgraph.Filter;










import soot.jimple.toolkits.callgraph.ReachableMethods;










import soot.toolkits.exceptions.UnitThrowAnalysis;










import soot.toolkits.graph.DirectedGraph;










import soot.toolkits.graph.ExceptionalUnitGraph;





















import com.google.common.cache.CacheLoader;










import com.google.common.cache.LoadingCache;





















import de.bodden.ide.DontSynchronize;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.SynchronizedBy;










import de.bodden.ide.ThreadSafe;










import de.bodden.ide.solver.IDESolver;





















/**










 * Default implementation for the {@link InterproceduralCFG} interface.










 * Includes all statements reachable from {@link Scene#getEntryPoints()} through










 * explicit call statements or through calls to {@link Thread#start()}.










 * 










 * This class is designed to be thread safe, and subclasses of this class must be designed










 * in a thread-safe way, too.










 */










@ThreadSafe










public class JimpleBasedInterproceduralCFG implements InterproceduralCFG<Unit,SootMethod> {










 










 //retains only callers that are explicit call sites or Thread.start()










 protected static class EdgeFilter extends Filter { 










 protected EdgeFilter() {










 super(new EdgePredicate() {










 public boolean want(Edge e) { 










 return e.kind().isExplicit() || e.kind().isThread();










 }










 });










 }










 }










 










 @DontSynchronize("readonly")










 protected final CallGraph cg;










 










 @DontSynchronize("written by single thread; read afterwards")










 protected final Map<Unit,Body> unitToOwner = new HashMap<Unit,Body>(); 










 










 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<Body,DirectedGraph<Unit>> bodyToUnitGraph =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<Body,DirectedGraph<Unit>>() {










 public DirectedGraph<Unit> load(Body body) throws Exception {










 return makeGraph(body);










 }










 });










 










 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<Unit,Set<SootMethod>> unitToCallees =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<Unit,Set<SootMethod>>() {










 public Set<SootMethod> load(Unit u) throws Exception {










 Set<SootMethod> res = new LinkedHashSet<SootMethod>();










 //only retain callers that are explicit call sites or Thread.start()










 Iterator<Edge> edgeIter = new EdgeFilter().wrap(cg.edgesOutOf(u)); 










 while(edgeIter.hasNext()) {










 Edge edge = edgeIter.next();










 if(edge.getTgt()==null) {










 System.err.println();










 }










 SootMethod m = edge.getTgt().method();










 if(m.hasActiveBody())










 res.add(m);










 }










 return res; 










 }










 });





















 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<SootMethod,Set<Unit>> methodToCallers =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<SootMethod,Set<Unit>>() {










 public Set<Unit> load(SootMethod m) throws Exception {










 Set<Unit> res = new LinkedHashSet<Unit>(); 










 //only retain callers that are explicit call sites or Thread.start()










 Iterator<Edge> edgeIter = new EdgeFilter().wrap(cg.edgesInto(m)); 










 while(edgeIter.hasNext()) {










 Edge edge = edgeIter.next();










 res.add(edge.srcUnit()); 










 }










 return res;










 }










 });





















 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<SootMethod,Set<Unit>> methodToCallsFromWithin =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<SootMethod,Set<Unit>>() {










 public Set<Unit> load(SootMethod m) throws Exception {










 Set<Unit> res = new LinkedHashSet<Unit>();










 //only retain calls that are explicit call sites or Thread.start()










 Iterator<Edge> edgeIter = new EdgeFilter().wrap(cg.edgesOutOf(m));










 while(edgeIter.hasNext()) {










 Edge edge = edgeIter.next();










 res.add(edge.srcUnit()); 










 }










 return res;










 }










 });





















 










 public JimpleBasedInterproceduralCFG() {










 cg = Scene.v().getCallGraph();










 










 List<MethodOrMethodContext> eps = new ArrayList<MethodOrMethodContext>();










 eps.addAll(Scene.v().getEntryPoints());










 ReachableMethods reachableMethods = new ReachableMethods(cg, eps.iterator(), new EdgeFilter());










 reachableMethods.update();










 










 for(Iterator<MethodOrMethodContext> iter = reachableMethods.listener(); iter.hasNext(); ) {










 SootMethod m = iter.next().method();










 if(m.hasActiveBody()) {










 Body b = m.getActiveBody();










 PatchingChain<Unit> units = b.getUnits();










 for (Unit unit : units) {










 unitToOwner.put(unit, b);










 }










 }










 }










 }





















 @Override










 public SootMethod getMethodOf(Unit u) {










 return unitToOwner.get(u).getMethod();










 }





















 @Override










 public List<Unit> getSuccsOf(Unit u) {










 Body body = unitToOwner.get(u);










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body);










 return unitGraph.getSuccsOf(u);










 }





















 private DirectedGraph<Unit> getOrCreateUnitGraph(Body body) {










 return bodyToUnitGraph.getUnchecked(body);










 }





















 protected synchronized DirectedGraph<Unit> makeGraph(Body body) {










 return new ExceptionalUnitGraph(body, UnitThrowAnalysis.v() ,true);










 }





















 @Override










 public Set<SootMethod> getCalleesOfCallAt(Unit u) {










 return unitToCallees.getUnchecked(u);










 }





















 @Override










 public List<Unit> getReturnSitesOfCallAt(Unit u) {










 return getSuccsOf(u);










 }





















 @Override










 public boolean isCallStmt(Unit u) {










 return ((Stmt)u).containsInvokeExpr();










 }





















 @Override










 public boolean isExitStmt(Unit u) {










 Body body = unitToOwner.get(u);










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body);










 return unitGraph.getTails().contains(u);










 }





















 @Override










 public Set<Unit> getCallersOf(SootMethod m) {










 return methodToCallers.getUnchecked(m);










 }










 










 @Override










 public Set<Unit> getCallsFromWithin(SootMethod m) {










 return methodToCallsFromWithin.getUnchecked(m); 










 }





















 @Override










 public Set<Unit> getStartPointsOf(SootMethod m) {










 if(m.hasActiveBody()) {










 Body body = m.getActiveBody();










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body);










 return new LinkedHashSet<Unit>(unitGraph.getHeads());










 }










 return null;










 }





















 @Override










 public boolean isStartPoint(Unit u) {










 Body body = unitToOwner.get(u);










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body); 










 return unitGraph.getHeads().contains(u);










 }





















 @Override










 //TODO do we need to replace call by return for backwards analysis?










 public Set<Unit> allNonCallStartNodes() {










 Set<Unit> res = new LinkedHashSet<Unit>(unitToOwner.keySet());










 for (Iterator<Unit> iter = res.iterator(); iter.hasNext();) {










 Unit u = iter.next();










 if(isStartPoint(u) || isCallStmt(u)) iter.remove();










 }










 return res;










 }





















 @Override










 public boolean isFallThroughSuccessor(Unit u, Unit succ) {










 assert getSuccsOf(u).contains(succ);










 if(!u.fallsThrough()) return false;










 Body body = unitToOwner.get(u);










 return body.getUnits().getSuccOf(u) == succ;










 }





















 @Override










 public boolean isBranchTarget(Unit u, Unit succ) {










 assert getSuccsOf(u).contains(succ);










 if(!u.branches()) return false;










 for (UnitBox ub : succ.getUnitBoxes()) {










 if(ub.getUnit()==succ) return true;










 }










 return false;










 }










}














src-generic/de/bodden/ide/DontSynchronize.java

→

src/de/bodden/ide/DontSynchronize.java








View file @ ae1aae21





File moved













src-generic/de/bodden/ide/EdgeFunction.java

→

src/de/bodden/ide/EdgeFunction.java








View file @ ae1aae21





File moved













src-generic/de/bodden/ide/EdgeFunctionCache.java

→

src/de/bodden/ide/EdgeFunctionCache.java








View file @ ae1aae21





File moved













src-generic/de/bodden/ide/EdgeFunctions.java

→

src/de/bodden/ide/EdgeFunctions.java








View file @ ae1aae21





File moved













src-generic/de/bodden/ide/FlowFunction.java

→

src/de/bodden/ide/FlowFunction.java








View file @ ae1aae21





File moved













src-generic/de/bodden/ide/FlowFunctionCache.java

→

src/de/bodden/ide/FlowFunctionCache.java








View file @ ae1aae21





File moved








Prev


1


2


3


Next















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

ae1aae21







Open sidebar



Joshua Garcia heros
Commits

ae1aae21




Open sidebar

Joshua Garcia heros
Commits

ae1aae21


Joshua GarciaherosherosCommits
ae1aae21








Commit
ae1aae21


authored
Nov 29, 2012
by


Eric Bodden



Browse files




moved Soot-specifiv code to soot







parent
f7c0f2f6













Changes
47




Hide whitespace changes

Inline
Side-by-side















.classpath








View file @ ae1aae21













<?xml version="1.0" encoding="UTF-8"?>










<classpath>










 <classpathentry combineaccessrules="false" exported="true" kind="src" path="/soot"/>










 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>










 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src-generic"/>










 <classpathentry kind="src" path="src-soot"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry exported="true" kind="lib" path="guava-13.0.jar"/>










 <classpathentry kind="lib" path="soot-trunk.jar" sourcepath="/soot"/>










 <classpathentry kind="output" path="bin"/>










</classpath>














META-INF/MANIFEST.MF








View file @ ae1aae21






......@@ -22,119 +22,4 @@ Export-Package: com.google.common.annotations,









 de.bodden.ide.edgefunc,










 de.bodden.ide.flowfunc,










 de.bodden.ide.solver,










 de.bodden.ide.template,










 soot,










 soot.JastAddJ,










 soot.baf,










 soot.baf.internal,










 soot.baf.toolkits.base,










 soot.coffi,










 soot.dava,










 soot.dava.internal.AST,










 soot.dava.internal.SET,










 soot.dava.internal.asg,










 soot.dava.internal.javaRep,










 soot.dava.toolkits.base.AST,










 soot.dava.toolkits.base.AST.analysis,










 soot.dava.toolkits.base.AST.interProcedural,










 soot.dava.toolkits.base.AST.structuredAnalysis,










 soot.dava.toolkits.base.AST.transformations,










 soot.dava.toolkits.base.AST.traversals,










 soot.dava.toolkits.base.DavaMonitor,










 soot.dava.toolkits.base.finders,










 soot.dava.toolkits.base.misc,










 soot.dava.toolkits.base.renamer,










 soot.grimp,










 soot.grimp.internal,










 soot.grimp.toolkits.base,










 soot.javaToJimple,










 soot.javaToJimple.jj,










 soot.javaToJimple.jj.ast,










 soot.javaToJimple.jj.types,










 soot.javaToJimple.toolkits,










 soot.jbco,










 soot.jbco.bafTransformations,










 soot.jbco.gui,










 soot.jbco.jimpleTransformations,










 soot.jbco.util,










 soot.jimple,










 soot.jimple.internal,










 soot.jimple.paddle,










 soot.jimple.parser,










 soot.jimple.parser.analysis,










 soot.jimple.parser.lexer,










 soot.jimple.parser.node,










 soot.jimple.parser.parser,










 soot.jimple.spark,










 soot.jimple.spark.builder,










 soot.jimple.spark.fieldrw,










 soot.jimple.spark.geom,










 soot.jimple.spark.geom.geomE,










 soot.jimple.spark.geom.geomPA,










 soot.jimple.spark.geom.heapinsE,










 soot.jimple.spark.geom.ptinsE,










 soot.jimple.spark.internal,










 soot.jimple.spark.ondemand,










 soot.jimple.spark.ondemand.genericutil,










 soot.jimple.spark.ondemand.pautil,










 soot.jimple.spark.pag,










 soot.jimple.spark.sets,










 soot.jimple.spark.solver,










 soot.jimple.toolkits.annotation,










 soot.jimple.toolkits.annotation.arraycheck,










 soot.jimple.toolkits.annotation.callgraph,










 soot.jimple.toolkits.annotation.defs,










 soot.jimple.toolkits.annotation.fields,










 soot.jimple.toolkits.annotation.j5anno,










 soot.jimple.toolkits.annotation.liveness,










 soot.jimple.toolkits.annotation.logic,










 soot.jimple.toolkits.annotation.methods,










 soot.jimple.toolkits.annotation.nullcheck,










 soot.jimple.toolkits.annotation.parity,










 soot.jimple.toolkits.annotation.profiling,










 soot.jimple.toolkits.annotation.purity,










 soot.jimple.toolkits.annotation.qualifiers,










 soot.jimple.toolkits.annotation.tags,










 soot.jimple.toolkits.base,










 soot.jimple.toolkits.callgraph,










 soot.jimple.toolkits.graph,










 soot.jimple.toolkits.infoflow,










 soot.jimple.toolkits.invoke,










 soot.jimple.toolkits.pointer,










 soot.jimple.toolkits.pointer.nativemethods,










 soot.jimple.toolkits.pointer.representations,










 soot.jimple.toolkits.pointer.util,










 soot.jimple.toolkits.reflection,










 soot.jimple.toolkits.scalar,










 soot.jimple.toolkits.scalar.pre,










 soot.jimple.toolkits.thread,










 soot.jimple.toolkits.thread.mhp,










 soot.jimple.toolkits.thread.mhp.findobject,










 soot.jimple.toolkits.thread.mhp.pegcallgraph,










 soot.jimple.toolkits.thread.mhp.stmt,










 soot.jimple.toolkits.thread.synchronization,










 soot.jimple.toolkits.typing,










 soot.jimple.toolkits.typing.fast,










 soot.jimple.toolkits.typing.integer,










 soot.options,










 soot.rtlib.tamiflex,










 soot.shimple,










 soot.shimple.internal,










 soot.shimple.toolkits.graph,










 soot.shimple.toolkits.scalar,










 soot.sootify,










 soot.tagkit,










 soot.toolkits.astmetrics,










 soot.toolkits.astmetrics.DataHandlingApplication,










 soot.toolkits.exceptions,










 soot.toolkits.graph,










 soot.toolkits.graph.interaction,










 soot.toolkits.graph.pdg,










 soot.toolkits.scalar,










 soot.tools,










 soot.util,










 soot.util.cfgcmd,










 soot.util.dot,










 soot.util.queue,










 soot.xml,










 soot.jimple.toolkits.ide.exampleproblems









 de.bodden.ide.template














build.properties








View file @ ae1aae21













source.soot-ifds.jar = src-generic/










source.soot-ifds.jar = src/










bin.includes = META-INF/,\










 soot-ifds.jar,\










 soot-trunk.jar,\



......














src-soot/soot/jimple/toolkits/ide/DefaultJimpleIDETabulationProblem.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import soot.SootMethod;










import soot.Unit;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.template.DefaultIDETabulationProblem;





















/**










 *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods.










 */










public abstract class DefaultJimpleIDETabulationProblem<D,V,I extends InterproceduralCFG<Unit,SootMethod>>










 extends DefaultIDETabulationProblem<Unit,D,SootMethod,V,I> {





















 public DefaultJimpleIDETabulationProblem(I icfg) {










 super(icfg);










 }










 










}














src-soot/soot/jimple/toolkits/ide/DefaultJimpleIFDSTabulationProblem.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import soot.SootMethod;










import soot.Unit;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.template.DefaultIDETabulationProblem;










import de.bodden.ide.template.DefaultIFDSTabulationProblem;





















/**










 *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods.










 */










public abstract class DefaultJimpleIFDSTabulationProblem<D,I extends InterproceduralCFG<Unit,SootMethod>>










 extends DefaultIFDSTabulationProblem<Unit,D,SootMethod,I> {





















 public DefaultJimpleIFDSTabulationProblem(I icfg) {










 super(icfg);










 }










 










}














src-soot/soot/jimple/toolkits/ide/JimpleIDESolver.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IDESolver;





















public class JimpleIDESolver<D, V> extends IDESolver<Unit, D, SootMethod, V, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, V> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}














src-soot/soot/jimple/toolkits/ide/JimpleIFDSSolver.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IFDSSolver;





















public class JimpleIFDSSolver<D, V> extends IFDSSolver<Unit, D, SootMethod, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, ?> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}














src-soot/soot/jimple/toolkits/ide/Main.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.util.Map;





















import de.bodden.ide.IFDSTabulationProblem;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IFDSSolver;





















import soot.Local;










import soot.PackManager;










import soot.Scene;










import soot.SceneTransformer;










import soot.SootMethod;










import soot.Transform;










import soot.Unit;










import soot.jimple.toolkits.ide.exampleproblems.IFDSLocalInfoFlow;










import soot.jimple.toolkits.ide.icfg.JimpleBasedInterproceduralCFG;





















public class Main {





















 /**










	 * @param args










	 */










 public static void main(String[] args) {










 










 










 PackManager.v().getPack("wjtp").add(new Transform("wjtp.ifds", new SceneTransformer() {










 protected void internalTransform(String phaseName, @SuppressWarnings("rawtypes") Map options) {





















 IFDSTabulationProblem<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>> problem = new IFDSLocalInfoFlow(new JimpleBasedInterproceduralCFG());










 










 IFDSSolver<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>> solver = new IFDSSolver<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>>(problem); 










 solver.solve();










 Unit ret = Scene.v().getMainMethod().getActiveBody().getUnits().getLast();










 for(Local l: solver.ifdsResultsAt(ret)) {










 System.err.println(l);










 }










 }










 }));










 










 soot.Main.main(args);










 }





















}














src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSLocalInfoFlow.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Gen;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.Kill;










import de.bodden.ide.flowfunc.KillAll;










import de.bodden.ide.flowfunc.Transfer;





















import soot.Local;










import soot.NullType;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.Value;










import soot.jimple.AssignStmt;










import soot.jimple.DefinitionStmt;










import soot.jimple.IdentityStmt;










import soot.jimple.InvokeExpr;










import soot.jimple.ParameterRef;










import soot.jimple.ReturnStmt;










import soot.jimple.Stmt;










import soot.jimple.internal.JimpleLocal;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;





















public class IFDSLocalInfoFlow extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {










 super(icfg); 










 }





















 public FlowFunctions<Unit, Local, SootMethod> createFlowFunctionsFactory() { 










 return new FlowFunctions<Unit,Local,SootMethod>() {





















 @Override










 public FlowFunction<Local> getNormalFlowFunction(Unit src, Unit dest) {










 if (src instanceof IdentityStmt && interproceduralCFG().getMethodOf(src)==Scene.v().getMainMethod()) {










 IdentityStmt is = (IdentityStmt) src;










 Local leftLocal = (Local) is.getLeftOp();










 Value right = is.getRightOp();










 if (right instanceof ParameterRef) {










 return new Gen<Local>(leftLocal,zeroValue());










 }










 }










 










 if(src instanceof AssignStmt) {










 AssignStmt assignStmt = (AssignStmt) src;










 Value right = assignStmt.getRightOp();










 if(assignStmt.getLeftOp() instanceof Local) {










 final Local leftLocal = (Local) assignStmt.getLeftOp();










 if(right instanceof Local) {










 final Local rightLocal = (Local) right;










 return new Transfer<Local>(leftLocal, rightLocal);










 } else {










 return new Kill<Local>(leftLocal);










 }










 }










 }










 return Identity.v();










 }





















 @Override










 public FlowFunction<Local> getCallFlowFunction(Unit src, final SootMethod dest) {










 Stmt stmt = (Stmt) src;










 InvokeExpr ie = stmt.getInvokeExpr();










 final List<Value> callArgs = ie.getArgs();










 final List<Local> paramLocals = new ArrayList<Local>();










 for(int i=0;i<dest.getParameterCount();i++) {










 paramLocals.add(dest.getActiveBody().getParameterLocal(i));










 }










 return new FlowFunction<Local>() {





















 public Set<Local> computeTargets(Local source) {










 int argIndex = callArgs.indexOf(source);










 if(argIndex>-1) {










 return Collections.singleton(paramLocals.get(argIndex));










 }










 return Collections.emptySet();










 }










 };










 }





















 @Override










 public FlowFunction<Local> getReturnFlowFunction(Unit callSite, SootMethod callee, Unit exitStmt, Unit retSite) {










 if (exitStmt instanceof ReturnStmt) { 










 ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 Value op = returnStmt.getOp();










 if(op instanceof Local) {










 if(callSite instanceof DefinitionStmt) {










 DefinitionStmt defnStmt = (DefinitionStmt) callSite;










 Value leftOp = defnStmt.getLeftOp();










 if(leftOp instanceof Local) {










 final Local tgtLocal = (Local) leftOp;










 final Local retLocal = (Local) op;










 return new FlowFunction<Local>() {





















 public Set<Local> computeTargets(Local source) {










 if(source==retLocal)










 return Collections.singleton(tgtLocal);










 return Collections.emptySet();










 }










 










 };










 }










 }










 }










 } 










 return KillAll.v();










 }





















 @Override










 public FlowFunction<Local> getCallToReturnFlowFunction(Unit call, Unit returnSite) {










 return Identity.v();










 }










 }; 










 }





















 @Override










 public Local createZeroValue() {










 return new JimpleLocal("zero", NullType.v());










 }





















 @Override










 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }










}




\ No newline at end of file














src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSPossibleTypes.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.KillAll;





















import soot.Local;










import soot.PointsToAnalysis;










import soot.PointsToSet;










import soot.PrimType;










import soot.Scene;










import soot.SootMethod;










import soot.Type;










import soot.Unit;










import soot.UnknownType;










import soot.Value;










import soot.jimple.ArrayRef;










import soot.jimple.Constant;










import soot.jimple.DefinitionStmt;










import soot.jimple.InstanceFieldRef;










import soot.jimple.InvokeExpr;










import soot.jimple.Jimple;










import soot.jimple.NewExpr;










import soot.jimple.Ref;










import soot.jimple.ReturnStmt;










import soot.jimple.Stmt;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;










import soot.toolkits.scalar.Pair;





















@SuppressWarnings("serial")










public class IFDSPossibleTypes extends DefaultJimpleIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {










 super(icfg);










 }





















 public FlowFunctions<Unit, Pair<Value,Type>, SootMethod> createFlowFunctionsFactory() {










 return new FlowFunctions<Unit,Pair<Value,Type>,SootMethod>() {





















 public FlowFunction<Pair<Value,Type>> getNormalFlowFunction(Unit src, Unit dest) {










 if(src instanceof DefinitionStmt) {










 DefinitionStmt defnStmt = (DefinitionStmt) src;










 if(defnStmt.containsInvokeExpr()) return Identity.v();










 final Value right = defnStmt.getRightOp();










 final Value left = defnStmt.getLeftOp();










 //won't track primitive-typed variables










 if(right.getType() instanceof PrimType) return Identity.v();










 










 if(right instanceof Constant || right instanceof NewExpr) {










 return new FlowFunction<Pair<Value,Type>>() {










 public Set<Pair<Value, Type>> computeTargets(Pair<Value, Type> source) {










 if(source==new Pair<Value, Type>(Jimple.v().newLocal("<dummy>", UnknownType.v()), UnknownType.v())) {










 Set<Pair<Value, Type>> res = new LinkedHashSet<Pair<Value,Type>>();










 res.add(new Pair<Value,Type>(left,right.getType()));










 res.add(new Pair<Value, Type>(Jimple.v().newLocal("<dummy>", UnknownType.v()), UnknownType.v()));










 return res;










 } else if(source.getO1() instanceof Local && source.getO1().equivTo(left)) {










 //strong update for local variables










 return Collections.emptySet();










 } else {










 return Collections.singleton(source);










 }










 }










 };










 } else if(right instanceof Ref || right instanceof Local) {










 return new FlowFunction<Pair<Value,Type>>() {










 public Set<Pair<Value, Type>> computeTargets(final Pair<Value, Type> source) {










 Value value = source.getO1();










 if(source.getO1() instanceof Local && source.getO1().equivTo(left)) {










 //strong update for local variables










 return Collections.emptySet();










 } else if(maybeSameLocation(value,right)) {










 return new LinkedHashSet<Pair<Value,Type>>() {{










 add(new Pair<Value,Type>(left,source.getO2())); 










 add(source); 










 }};










 } else {










 return Collections.singleton(source);










 }










 }





















 private boolean maybeSameLocation(Value v1, Value v2) {










 if(!(v1 instanceof InstanceFieldRef && v2 instanceof InstanceFieldRef) &&










 !(v1 instanceof ArrayRef && v2 instanceof ArrayRef)) {










 return v1.equivTo(v2);










 }










 if(v1 instanceof InstanceFieldRef && v2 instanceof InstanceFieldRef) {










 InstanceFieldRef ifr1 = (InstanceFieldRef) v1;










 InstanceFieldRef ifr2 = (InstanceFieldRef) v2;










 if(!ifr1.getField().getName().equals(ifr2.getField().getName())) return false;










 










 Local base1 = (Local) ifr1.getBase();










 Local base2 = (Local) ifr2.getBase();










 PointsToAnalysis pta = Scene.v().getPointsToAnalysis();










 PointsToSet pts1 = pta.reachingObjects(base1);










 PointsToSet pts2 = pta.reachingObjects(base2); 










 return pts1.hasNonEmptyIntersection(pts2);










 } else { //v1 instanceof ArrayRef && v2 instanceof ArrayRef










 ArrayRef ar1 = (ArrayRef) v1;










 ArrayRef ar2 = (ArrayRef) v2;





















 Local base1 = (Local) ar1.getBase();










 Local base2 = (Local) ar2.getBase();










 PointsToAnalysis pta = Scene.v().getPointsToAnalysis();










 PointsToSet pts1 = pta.reachingObjects(base1);










 PointsToSet pts2 = pta.reachingObjects(base2); 










 return pts1.hasNonEmptyIntersection(pts2);










 }










 }










 };










 } 










 }










 return Identity.v();










 }





















 public FlowFunction<Pair<Value,Type>> getCallFlowFunction(final Unit src, final SootMethod dest) {










 Stmt stmt = (Stmt) src;










 InvokeExpr ie = stmt.getInvokeExpr();










 final List<Value> callArgs = ie.getArgs();










 final List<Local> paramLocals = new ArrayList<Local>();










 for(int i=0;i<dest.getParameterCount();i++) {










 paramLocals.add(dest.getActiveBody().getParameterLocal(i));










 } 










 return new FlowFunction<Pair<Value,Type>>() {










 public Set<Pair<Value,Type>> computeTargets(Pair<Value,Type> source) {










 Value value = source.getO1();










 int argIndex = callArgs.indexOf(value);










 if(argIndex>-1) {










 return Collections.singleton(new Pair<Value,Type>(paramLocals.get(argIndex), source.getO2()));










 }










 return Collections.emptySet();










 }










 };










 }





















 public FlowFunction<Pair<Value,Type>> getReturnFlowFunction(Unit callSite, SootMethod callee, Unit exitStmt, Unit retSite) {










 if (exitStmt instanceof ReturnStmt) { 










 ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 Value op = returnStmt.getOp();










 if(op instanceof Local) {










 if(callSite instanceof DefinitionStmt) {










 DefinitionStmt defnStmt = (DefinitionStmt) callSite;










 Value leftOp = defnStmt.getLeftOp();










 if(leftOp instanceof Local) {










 final Local tgtLocal = (Local) leftOp;










 final Local retLocal = (Local) op;










 return new FlowFunction<Pair<Value,Type>>() {





















 public Set<Pair<Value,Type>> computeTargets(Pair<Value,Type> source) {










 if(source==retLocal)










 return Collections.singleton(new Pair<Value,Type>(tgtLocal, source.getO2()));










 return Collections.emptySet();










 }










 










 };










 }










 }










 }










 }










 return KillAll.v();










 }





















 public FlowFunction<Pair<Value,Type>> getCallToReturnFlowFunction(Unit call, Unit returnSite) {










 return Identity.v();










 }










 };










 }





















 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }





















 public Pair<Value,Type> createZeroValue() {










 return new Pair<Value, Type>(Jimple.v().newLocal("<dummy>", UnknownType.v()), UnknownType.v());










 }










}




\ No newline at end of file














src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSReachingDefinitions.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.KillAll;





















import soot.EquivalentValue;










import soot.Local;










import soot.NullType;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.Value;










import soot.jimple.DefinitionStmt;










import soot.jimple.InvokeExpr;










import soot.jimple.Jimple;










import soot.jimple.ReturnStmt;










import soot.jimple.ReturnVoidStmt;










import soot.jimple.Stmt;










import soot.jimple.internal.JimpleLocal;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;










import soot.toolkits.scalar.Pair;





















public class IFDSReachingDefinitions extends DefaultJimpleIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {










 public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {










 super(icfg);










 }










 










 @Override










 public FlowFunctions<Unit, Pair<Value, Set<DefinitionStmt>>, SootMethod> createFlowFunctionsFactory() {










 return new FlowFunctions<Unit, Pair<Value, Set<DefinitionStmt>>, SootMethod>() {





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getNormalFlowFunction(final Unit curr, Unit succ) {










 if (curr instanceof DefinitionStmt) {










 final DefinitionStmt assignment = (DefinitionStmt) curr;





















 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {










 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if (source != zeroValue()) {










 if (source.getO1().equivTo(assignment.getLeftOp())) {










 return Collections.emptySet();










 }










 return Collections.singleton(source);










 } else {










 LinkedHashSet<Pair<Value, Set<DefinitionStmt>>> res = new LinkedHashSet<Pair<Value, Set<DefinitionStmt>>>();










 res.add(new Pair<Value, Set<DefinitionStmt>>(assignment.getLeftOp(),










 Collections.<DefinitionStmt> singleton(assignment)));










 return res;










 }










 }










 };










 }





















 return Identity.v();










 }





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getCallFlowFunction(Unit callStmt,










 final SootMethod destinationMethod) {










 Stmt stmt = (Stmt) callStmt;










 InvokeExpr invokeExpr = stmt.getInvokeExpr();










 final List<Value> args = invokeExpr.getArgs();





















 final List<Local> localArguments = new ArrayList<Local>(args.size());










 for (Value value : args) {










 if (value instanceof Local)










 localArguments.add((Local) value);










 else










 localArguments.add(null);










 }





















 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {





















 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if(localArguments.contains(source.getO1())) {










 int paramIndex = args.indexOf(source.getO1());










 Pair<Value, Set<DefinitionStmt>> pair = new Pair<Value, Set<DefinitionStmt>>(










 new EquivalentValue(Jimple.v().newParameterRef(destinationMethod.getParameterType(paramIndex), paramIndex)),










 source.getO2());










 return Collections.singleton(pair);










 }





















 return Collections.emptySet();










 }










 };










 }





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getReturnFlowFunction(final Unit callSite,










 SootMethod calleeMethod, final Unit exitStmt, Unit returnSite) {










 if (!(callSite instanceof DefinitionStmt))










 return KillAll.v();





















 if (exitStmt instanceof ReturnVoidStmt)










 return KillAll.v();





















 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {





















 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if(exitStmt instanceof ReturnStmt) {










 ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 if (returnStmt.getOp().equivTo(source.getO1())) {










 DefinitionStmt definitionStmt = (DefinitionStmt) callSite;










 Pair<Value, Set<DefinitionStmt>> pair = new Pair<Value, Set<DefinitionStmt>>(










 definitionStmt.getLeftOp(), source.getO2());










 return Collections.singleton(pair);










 }










 }










 return Collections.emptySet();










 }










 };










 }





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getCallToReturnFlowFunction(Unit callSite, Unit returnSite) {










 if (!(callSite instanceof DefinitionStmt))










 return Identity.v();










 










 final DefinitionStmt definitionStmt = (DefinitionStmt) callSite;










 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {





















 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if(source.getO1().equivTo(definitionStmt.getLeftOp())) {










 return Collections.emptySet();










 } else {










 return Collections.singleton(source);










 }










 }










 };










 }










 };










 }





















 @Override










 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }





















 public Pair<Value, Set<DefinitionStmt>> createZeroValue() {










 return new Pair<Value, Set<DefinitionStmt>>(new JimpleLocal("<<zero>>", NullType.v()), Collections.<DefinitionStmt> emptySet());










 }





















}














src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSUninitializedVariables.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.Kill;










import de.bodden.ide.flowfunc.KillAll;





















import soot.Local;










import soot.NullType;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.Value;










import soot.ValueBox;










import soot.jimple.DefinitionStmt;










import soot.jimple.InvokeExpr;










import soot.jimple.ReturnStmt;










import soot.jimple.Stmt;










import soot.jimple.ThrowStmt;










import soot.jimple.internal.JimpleLocal;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;










import soot.util.Chain;





















public class IFDSUninitializedVariables extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {










 super(icfg); 










 }





















 @Override










 public FlowFunctions<Unit, Local, SootMethod> createFlowFunctionsFactory() {










 return new FlowFunctions<Unit, Local, SootMethod>() {





















 @Override










 public FlowFunction<Local> getNormalFlowFunction(Unit curr, Unit succ) {










 final SootMethod m = interproceduralCFG().getMethodOf(curr);










 if(Scene.v().getEntryPoints().contains(m) && interproceduralCFG().isStartPoint(curr)) {










 return new FlowFunction<Local>() {










 










 @Override










 public Set<Local> computeTargets(Local source) {










 if (source == zeroValue()) {










 Set<Local> res = new LinkedHashSet<Local>();










 res.addAll(m.getActiveBody().getLocals());










 for(int i=0;i<m.getParameterCount();i++) 










 res.remove(m.getActiveBody().getParameterLocal(i));










 return res;










 }










 return Collections.emptySet();










 }










 };










 }










 










 if (curr instanceof DefinitionStmt) {










 final DefinitionStmt definition = (DefinitionStmt) curr;










 final Value leftOp = definition.getLeftOp();










 if(leftOp instanceof Local) {










 final Local leftOpLocal = (Local) leftOp;










 return new FlowFunction<Local>() {





















 @Override










 public Set<Local> computeTargets(final Local source) {










 List<ValueBox> useBoxes = definition.getUseBoxes();










 for (ValueBox valueBox : useBoxes) {










 if (valueBox.getValue().equivTo(source)) {










 LinkedHashSet<Local> res = new LinkedHashSet<Local>();










 res.add(source);










 res.add(leftOpLocal); 










 return res;










 }










 }





















 if (leftOp.equivTo(source))










 return Collections.emptySet();





















 return Collections.singleton(source);










 }





















 };










 }










 }





















 return Identity.v();










 }





















 @Override










 public FlowFunction<Local> getCallFlowFunction(Unit callStmt, final SootMethod destinationMethod) {










 Stmt stmt = (Stmt) callStmt;










 InvokeExpr invokeExpr = stmt.getInvokeExpr();










 final List<Value> args = invokeExpr.getArgs();





















 final List<Local> localArguments = new ArrayList<Local>();










 for (Value value : args)










 if (value instanceof Local)










 localArguments.add((Local) value);





















 return new FlowFunction<Local>() {





















 @Override










 public Set<Local> computeTargets(final Local source) {










 for (Local localArgument : localArguments) {










 if (source.equivTo(localArgument)) {










 return Collections.<Local>singleton(destinationMethod.getActiveBody().getParameterLocal(args.indexOf(localArgument)));










 }










 }





















 if (source == zeroValue()) {










 //gen all locals that are not parameter locals 










 Chain<Local> locals = destinationMethod.getActiveBody().getLocals();










 LinkedHashSet<Local> uninitializedLocals = new LinkedHashSet<Local>(locals);










 for(int i=0;i<destinationMethod.getParameterCount();i++) { 










 uninitializedLocals.remove(destinationMethod.getActiveBody().getParameterLocal(i));










 }










 return uninitializedLocals;










 }





















 return Collections.emptySet();










 }





















 };










 }





















 @Override










 public FlowFunction<Local> getReturnFlowFunction(final Unit callSite, SootMethod calleeMethod,










 final Unit exitStmt, Unit returnSite) {










 if (callSite instanceof DefinitionStmt) {










 final DefinitionStmt definition = (DefinitionStmt) callSite;










 if(definition.getLeftOp() instanceof Local) {










 final Local leftOpLocal = (Local) definition.getLeftOp(); 










 if (exitStmt instanceof ReturnStmt) {










 final ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 return new FlowFunction<Local>() {










 










 @Override










 public Set<Local> computeTargets(Local source) {










 if (returnStmt.getOp().equivTo(source))










 return Collections.singleton(leftOpLocal);










 return Collections.emptySet();










 }










 










 };










 } else if (exitStmt instanceof ThrowStmt) {










 //if we throw an exception, LHS of call is undefined










 return new FlowFunction<Local>() {










 










 @Override










 public Set<Local> computeTargets(final Local source) {










 if (source == zeroValue())










 return Collections.singleton(leftOpLocal);










 else










 return Collections.emptySet();










 }










 










 };










 }










 }










 }










 










 return KillAll.v();










 }





















 @Override










 public FlowFunction<Local> getCallToReturnFlowFunction(Unit callSite, Unit returnSite) {










 if (callSite instanceof DefinitionStmt) {










 DefinitionStmt definition = (DefinitionStmt) callSite;










 if(definition.getLeftOp() instanceof Local) {










 final Local leftOpLocal = (Local) definition.getLeftOp(); 










 return new Kill<Local>(leftOpLocal);










 }










 }










 return Identity.v();










 }










 };










 }










 @Override










 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }





















 @Override










 public Local createZeroValue() {










 return new JimpleLocal("<<zero>>", NullType.v());










 }





















}














src-soot/soot/jimple/toolkits/ide/icfg/BackwardsInterproceduralCFG.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.icfg;





















import soot.Body;










import soot.Unit;










import soot.toolkits.graph.DirectedGraph;










import soot.toolkits.graph.InverseGraph;





















/**










 * Same as {@link JimpleBasedInterproceduralCFG} but based on inverted unit graphs.










 * This should be used for backward analyses.










 */










public class BackwardsInterproceduralCFG extends JimpleBasedInterproceduralCFG {





















 @Override










 protected DirectedGraph<Unit> makeGraph(Body body) {










 return new InverseGraph<Unit>(super.makeGraph(body));










 }










 










}














src-soot/soot/jimple/toolkits/ide/icfg/JimpleBasedInterproceduralCFG.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.icfg;





















import java.util.ArrayList;










import java.util.HashMap;










import java.util.Iterator;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Map;










import java.util.Set;





















import soot.Body;










import soot.MethodOrMethodContext;










import soot.PatchingChain;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.UnitBox;










import soot.jimple.Stmt;










import soot.jimple.toolkits.callgraph.CallGraph;










import soot.jimple.toolkits.callgraph.Edge;










import soot.jimple.toolkits.callgraph.EdgePredicate;










import soot.jimple.toolkits.callgraph.Filter;










import soot.jimple.toolkits.callgraph.ReachableMethods;










import soot.toolkits.exceptions.UnitThrowAnalysis;










import soot.toolkits.graph.DirectedGraph;










import soot.toolkits.graph.ExceptionalUnitGraph;





















import com.google.common.cache.CacheLoader;










import com.google.common.cache.LoadingCache;





















import de.bodden.ide.DontSynchronize;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.SynchronizedBy;










import de.bodden.ide.ThreadSafe;










import de.bodden.ide.solver.IDESolver;





















/**










 * Default implementation for the {@link InterproceduralCFG} interface.










 * Includes all statements reachable from {@link Scene#getEntryPoints()} through










 * explicit call statements or through calls to {@link Thread#start()}.










 * 










 * This class is designed to be thread safe, and subclasses of this class must be designed










 * in a thread-safe way, too.










 */










@ThreadSafe










public class JimpleBasedInterproceduralCFG implements InterproceduralCFG<Unit,SootMethod> {










 










 //retains only callers that are explicit call sites or Thread.start()










 protected static class EdgeFilter extends Filter { 










 protected EdgeFilter() {










 super(new EdgePredicate() {










 public boolean want(Edge e) { 










 return e.kind().isExplicit() || e.kind().isThread();










 }










 });










 }










 }










 










 @DontSynchronize("readonly")










 protected final CallGraph cg;










 










 @DontSynchronize("written by single thread; read afterwards")










 protected final Map<Unit,Body> unitToOwner = new HashMap<Unit,Body>(); 










 










 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<Body,DirectedGraph<Unit>> bodyToUnitGraph =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<Body,DirectedGraph<Unit>>() {










 public DirectedGraph<Unit> load(Body body) throws Exception {










 return makeGraph(body);










 }










 });










 










 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<Unit,Set<SootMethod>> unitToCallees =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<Unit,Set<SootMethod>>() {










 public Set<SootMethod> load(Unit u) throws Exception {










 Set<SootMethod> res = new LinkedHashSet<SootMethod>();










 //only retain callers that are explicit call sites or Thread.start()










 Iterator<Edge> edgeIter = new EdgeFilter().wrap(cg.edgesOutOf(u)); 










 while(edgeIter.hasNext()) {










 Edge edge = edgeIter.next();










 if(edge.getTgt()==null) {










 System.err.println();










 }










 SootMethod m = edge.getTgt().method();










 if(m.hasActiveBody())










 res.add(m);










 }










 return res; 










 }










 });





















 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<SootMethod,Set<Unit>> methodToCallers =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<SootMethod,Set<Unit>>() {










 public Set<Unit> load(SootMethod m) throws Exception {










 Set<Unit> res = new LinkedHashSet<Unit>(); 










 //only retain callers that are explicit call sites or Thread.start()










 Iterator<Edge> edgeIter = new EdgeFilter().wrap(cg.edgesInto(m)); 










 while(edgeIter.hasNext()) {










 Edge edge = edgeIter.next();










 res.add(edge.srcUnit()); 










 }










 return res;










 }










 });





















 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<SootMethod,Set<Unit>> methodToCallsFromWithin =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<SootMethod,Set<Unit>>() {










 public Set<Unit> load(SootMethod m) throws Exception {










 Set<Unit> res = new LinkedHashSet<Unit>();










 //only retain calls that are explicit call sites or Thread.start()










 Iterator<Edge> edgeIter = new EdgeFilter().wrap(cg.edgesOutOf(m));










 while(edgeIter.hasNext()) {










 Edge edge = edgeIter.next();










 res.add(edge.srcUnit()); 










 }










 return res;










 }










 });





















 










 public JimpleBasedInterproceduralCFG() {










 cg = Scene.v().getCallGraph();










 










 List<MethodOrMethodContext> eps = new ArrayList<MethodOrMethodContext>();










 eps.addAll(Scene.v().getEntryPoints());










 ReachableMethods reachableMethods = new ReachableMethods(cg, eps.iterator(), new EdgeFilter());










 reachableMethods.update();










 










 for(Iterator<MethodOrMethodContext> iter = reachableMethods.listener(); iter.hasNext(); ) {










 SootMethod m = iter.next().method();










 if(m.hasActiveBody()) {










 Body b = m.getActiveBody();










 PatchingChain<Unit> units = b.getUnits();










 for (Unit unit : units) {










 unitToOwner.put(unit, b);










 }










 }










 }










 }





















 @Override










 public SootMethod getMethodOf(Unit u) {










 return unitToOwner.get(u).getMethod();










 }





















 @Override










 public List<Unit> getSuccsOf(Unit u) {










 Body body = unitToOwner.get(u);










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body);










 return unitGraph.getSuccsOf(u);










 }





















 private DirectedGraph<Unit> getOrCreateUnitGraph(Body body) {










 return bodyToUnitGraph.getUnchecked(body);










 }





















 protected synchronized DirectedGraph<Unit> makeGraph(Body body) {










 return new ExceptionalUnitGraph(body, UnitThrowAnalysis.v() ,true);










 }





















 @Override










 public Set<SootMethod> getCalleesOfCallAt(Unit u) {










 return unitToCallees.getUnchecked(u);










 }





















 @Override










 public List<Unit> getReturnSitesOfCallAt(Unit u) {










 return getSuccsOf(u);










 }





















 @Override










 public boolean isCallStmt(Unit u) {










 return ((Stmt)u).containsInvokeExpr();










 }





















 @Override










 public boolean isExitStmt(Unit u) {










 Body body = unitToOwner.get(u);










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body);










 return unitGraph.getTails().contains(u);










 }





















 @Override










 public Set<Unit> getCallersOf(SootMethod m) {










 return methodToCallers.getUnchecked(m);










 }










 










 @Override










 public Set<Unit> getCallsFromWithin(SootMethod m) {










 return methodToCallsFromWithin.getUnchecked(m); 










 }





















 @Override










 public Set<Unit> getStartPointsOf(SootMethod m) {










 if(m.hasActiveBody()) {










 Body body = m.getActiveBody();










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body);










 return new LinkedHashSet<Unit>(unitGraph.getHeads());










 }










 return null;










 }





















 @Override










 public boolean isStartPoint(Unit u) {










 Body body = unitToOwner.get(u);










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body); 










 return unitGraph.getHeads().contains(u);










 }





















 @Override










 //TODO do we need to replace call by return for backwards analysis?










 public Set<Unit> allNonCallStartNodes() {










 Set<Unit> res = new LinkedHashSet<Unit>(unitToOwner.keySet());










 for (Iterator<Unit> iter = res.iterator(); iter.hasNext();) {










 Unit u = iter.next();










 if(isStartPoint(u) || isCallStmt(u)) iter.remove();










 }










 return res;










 }





















 @Override










 public boolean isFallThroughSuccessor(Unit u, Unit succ) {










 assert getSuccsOf(u).contains(succ);










 if(!u.fallsThrough()) return false;










 Body body = unitToOwner.get(u);










 return body.getUnits().getSuccOf(u) == succ;










 }





















 @Override










 public boolean isBranchTarget(Unit u, Unit succ) {










 assert getSuccsOf(u).contains(succ);










 if(!u.branches()) return false;










 for (UnitBox ub : succ.getUnitBoxes()) {










 if(ub.getUnit()==succ) return true;










 }










 return false;










 }










}














src-generic/de/bodden/ide/DontSynchronize.java

→

src/de/bodden/ide/DontSynchronize.java








View file @ ae1aae21





File moved













src-generic/de/bodden/ide/EdgeFunction.java

→

src/de/bodden/ide/EdgeFunction.java








View file @ ae1aae21





File moved













src-generic/de/bodden/ide/EdgeFunctionCache.java

→

src/de/bodden/ide/EdgeFunctionCache.java








View file @ ae1aae21





File moved













src-generic/de/bodden/ide/EdgeFunctions.java

→

src/de/bodden/ide/EdgeFunctions.java








View file @ ae1aae21





File moved













src-generic/de/bodden/ide/FlowFunction.java

→

src/de/bodden/ide/FlowFunction.java








View file @ ae1aae21





File moved













src-generic/de/bodden/ide/FlowFunctionCache.java

→

src/de/bodden/ide/FlowFunctionCache.java








View file @ ae1aae21





File moved








Prev


1


2


3


Next















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
ae1aae21


authored
Nov 29, 2012
by


Eric Bodden



Browse files




moved Soot-specifiv code to soot







parent
f7c0f2f6













Changes
47




Hide whitespace changes

Inline
Side-by-side















.classpath








View file @ ae1aae21













<?xml version="1.0" encoding="UTF-8"?>










<classpath>










 <classpathentry combineaccessrules="false" exported="true" kind="src" path="/soot"/>










 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>










 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src-generic"/>










 <classpathentry kind="src" path="src-soot"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry exported="true" kind="lib" path="guava-13.0.jar"/>










 <classpathentry kind="lib" path="soot-trunk.jar" sourcepath="/soot"/>










 <classpathentry kind="output" path="bin"/>










</classpath>














META-INF/MANIFEST.MF








View file @ ae1aae21






......@@ -22,119 +22,4 @@ Export-Package: com.google.common.annotations,









 de.bodden.ide.edgefunc,










 de.bodden.ide.flowfunc,










 de.bodden.ide.solver,










 de.bodden.ide.template,










 soot,










 soot.JastAddJ,










 soot.baf,










 soot.baf.internal,










 soot.baf.toolkits.base,










 soot.coffi,










 soot.dava,










 soot.dava.internal.AST,










 soot.dava.internal.SET,










 soot.dava.internal.asg,










 soot.dava.internal.javaRep,










 soot.dava.toolkits.base.AST,










 soot.dava.toolkits.base.AST.analysis,










 soot.dava.toolkits.base.AST.interProcedural,










 soot.dava.toolkits.base.AST.structuredAnalysis,










 soot.dava.toolkits.base.AST.transformations,










 soot.dava.toolkits.base.AST.traversals,










 soot.dava.toolkits.base.DavaMonitor,










 soot.dava.toolkits.base.finders,










 soot.dava.toolkits.base.misc,










 soot.dava.toolkits.base.renamer,










 soot.grimp,










 soot.grimp.internal,










 soot.grimp.toolkits.base,










 soot.javaToJimple,










 soot.javaToJimple.jj,










 soot.javaToJimple.jj.ast,










 soot.javaToJimple.jj.types,










 soot.javaToJimple.toolkits,










 soot.jbco,










 soot.jbco.bafTransformations,










 soot.jbco.gui,










 soot.jbco.jimpleTransformations,










 soot.jbco.util,










 soot.jimple,










 soot.jimple.internal,










 soot.jimple.paddle,










 soot.jimple.parser,










 soot.jimple.parser.analysis,










 soot.jimple.parser.lexer,










 soot.jimple.parser.node,










 soot.jimple.parser.parser,










 soot.jimple.spark,










 soot.jimple.spark.builder,










 soot.jimple.spark.fieldrw,










 soot.jimple.spark.geom,










 soot.jimple.spark.geom.geomE,










 soot.jimple.spark.geom.geomPA,










 soot.jimple.spark.geom.heapinsE,










 soot.jimple.spark.geom.ptinsE,










 soot.jimple.spark.internal,










 soot.jimple.spark.ondemand,










 soot.jimple.spark.ondemand.genericutil,










 soot.jimple.spark.ondemand.pautil,










 soot.jimple.spark.pag,










 soot.jimple.spark.sets,










 soot.jimple.spark.solver,










 soot.jimple.toolkits.annotation,










 soot.jimple.toolkits.annotation.arraycheck,










 soot.jimple.toolkits.annotation.callgraph,










 soot.jimple.toolkits.annotation.defs,










 soot.jimple.toolkits.annotation.fields,










 soot.jimple.toolkits.annotation.j5anno,










 soot.jimple.toolkits.annotation.liveness,










 soot.jimple.toolkits.annotation.logic,










 soot.jimple.toolkits.annotation.methods,










 soot.jimple.toolkits.annotation.nullcheck,










 soot.jimple.toolkits.annotation.parity,










 soot.jimple.toolkits.annotation.profiling,










 soot.jimple.toolkits.annotation.purity,










 soot.jimple.toolkits.annotation.qualifiers,










 soot.jimple.toolkits.annotation.tags,










 soot.jimple.toolkits.base,










 soot.jimple.toolkits.callgraph,










 soot.jimple.toolkits.graph,










 soot.jimple.toolkits.infoflow,










 soot.jimple.toolkits.invoke,










 soot.jimple.toolkits.pointer,










 soot.jimple.toolkits.pointer.nativemethods,










 soot.jimple.toolkits.pointer.representations,










 soot.jimple.toolkits.pointer.util,










 soot.jimple.toolkits.reflection,










 soot.jimple.toolkits.scalar,










 soot.jimple.toolkits.scalar.pre,










 soot.jimple.toolkits.thread,










 soot.jimple.toolkits.thread.mhp,










 soot.jimple.toolkits.thread.mhp.findobject,










 soot.jimple.toolkits.thread.mhp.pegcallgraph,










 soot.jimple.toolkits.thread.mhp.stmt,










 soot.jimple.toolkits.thread.synchronization,










 soot.jimple.toolkits.typing,










 soot.jimple.toolkits.typing.fast,










 soot.jimple.toolkits.typing.integer,










 soot.options,










 soot.rtlib.tamiflex,










 soot.shimple,










 soot.shimple.internal,










 soot.shimple.toolkits.graph,










 soot.shimple.toolkits.scalar,










 soot.sootify,










 soot.tagkit,










 soot.toolkits.astmetrics,










 soot.toolkits.astmetrics.DataHandlingApplication,










 soot.toolkits.exceptions,










 soot.toolkits.graph,










 soot.toolkits.graph.interaction,










 soot.toolkits.graph.pdg,










 soot.toolkits.scalar,










 soot.tools,










 soot.util,










 soot.util.cfgcmd,










 soot.util.dot,










 soot.util.queue,










 soot.xml,










 soot.jimple.toolkits.ide.exampleproblems









 de.bodden.ide.template














build.properties








View file @ ae1aae21













source.soot-ifds.jar = src-generic/










source.soot-ifds.jar = src/










bin.includes = META-INF/,\










 soot-ifds.jar,\










 soot-trunk.jar,\



......














src-soot/soot/jimple/toolkits/ide/DefaultJimpleIDETabulationProblem.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import soot.SootMethod;










import soot.Unit;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.template.DefaultIDETabulationProblem;





















/**










 *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods.










 */










public abstract class DefaultJimpleIDETabulationProblem<D,V,I extends InterproceduralCFG<Unit,SootMethod>>










 extends DefaultIDETabulationProblem<Unit,D,SootMethod,V,I> {





















 public DefaultJimpleIDETabulationProblem(I icfg) {










 super(icfg);










 }










 










}














src-soot/soot/jimple/toolkits/ide/DefaultJimpleIFDSTabulationProblem.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import soot.SootMethod;










import soot.Unit;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.template.DefaultIDETabulationProblem;










import de.bodden.ide.template.DefaultIFDSTabulationProblem;





















/**










 *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods.










 */










public abstract class DefaultJimpleIFDSTabulationProblem<D,I extends InterproceduralCFG<Unit,SootMethod>>










 extends DefaultIFDSTabulationProblem<Unit,D,SootMethod,I> {





















 public DefaultJimpleIFDSTabulationProblem(I icfg) {










 super(icfg);










 }










 










}














src-soot/soot/jimple/toolkits/ide/JimpleIDESolver.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IDESolver;





















public class JimpleIDESolver<D, V> extends IDESolver<Unit, D, SootMethod, V, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, V> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}














src-soot/soot/jimple/toolkits/ide/JimpleIFDSSolver.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IFDSSolver;





















public class JimpleIFDSSolver<D, V> extends IFDSSolver<Unit, D, SootMethod, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, ?> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}














src-soot/soot/jimple/toolkits/ide/Main.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.util.Map;





















import de.bodden.ide.IFDSTabulationProblem;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IFDSSolver;





















import soot.Local;










import soot.PackManager;










import soot.Scene;










import soot.SceneTransformer;










import soot.SootMethod;










import soot.Transform;










import soot.Unit;










import soot.jimple.toolkits.ide.exampleproblems.IFDSLocalInfoFlow;










import soot.jimple.toolkits.ide.icfg.JimpleBasedInterproceduralCFG;





















public class Main {





















 /**










	 * @param args










	 */










 public static void main(String[] args) {










 










 










 PackManager.v().getPack("wjtp").add(new Transform("wjtp.ifds", new SceneTransformer() {










 protected void internalTransform(String phaseName, @SuppressWarnings("rawtypes") Map options) {





















 IFDSTabulationProblem<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>> problem = new IFDSLocalInfoFlow(new JimpleBasedInterproceduralCFG());










 










 IFDSSolver<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>> solver = new IFDSSolver<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>>(problem); 










 solver.solve();










 Unit ret = Scene.v().getMainMethod().getActiveBody().getUnits().getLast();










 for(Local l: solver.ifdsResultsAt(ret)) {










 System.err.println(l);










 }










 }










 }));










 










 soot.Main.main(args);










 }





















}














src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSLocalInfoFlow.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Gen;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.Kill;










import de.bodden.ide.flowfunc.KillAll;










import de.bodden.ide.flowfunc.Transfer;





















import soot.Local;










import soot.NullType;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.Value;










import soot.jimple.AssignStmt;










import soot.jimple.DefinitionStmt;










import soot.jimple.IdentityStmt;










import soot.jimple.InvokeExpr;










import soot.jimple.ParameterRef;










import soot.jimple.ReturnStmt;










import soot.jimple.Stmt;










import soot.jimple.internal.JimpleLocal;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;





















public class IFDSLocalInfoFlow extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {










 super(icfg); 










 }





















 public FlowFunctions<Unit, Local, SootMethod> createFlowFunctionsFactory() { 










 return new FlowFunctions<Unit,Local,SootMethod>() {





















 @Override










 public FlowFunction<Local> getNormalFlowFunction(Unit src, Unit dest) {










 if (src instanceof IdentityStmt && interproceduralCFG().getMethodOf(src)==Scene.v().getMainMethod()) {










 IdentityStmt is = (IdentityStmt) src;










 Local leftLocal = (Local) is.getLeftOp();










 Value right = is.getRightOp();










 if (right instanceof ParameterRef) {










 return new Gen<Local>(leftLocal,zeroValue());










 }










 }










 










 if(src instanceof AssignStmt) {










 AssignStmt assignStmt = (AssignStmt) src;










 Value right = assignStmt.getRightOp();










 if(assignStmt.getLeftOp() instanceof Local) {










 final Local leftLocal = (Local) assignStmt.getLeftOp();










 if(right instanceof Local) {










 final Local rightLocal = (Local) right;










 return new Transfer<Local>(leftLocal, rightLocal);










 } else {










 return new Kill<Local>(leftLocal);










 }










 }










 }










 return Identity.v();










 }





















 @Override










 public FlowFunction<Local> getCallFlowFunction(Unit src, final SootMethod dest) {










 Stmt stmt = (Stmt) src;










 InvokeExpr ie = stmt.getInvokeExpr();










 final List<Value> callArgs = ie.getArgs();










 final List<Local> paramLocals = new ArrayList<Local>();










 for(int i=0;i<dest.getParameterCount();i++) {










 paramLocals.add(dest.getActiveBody().getParameterLocal(i));










 }










 return new FlowFunction<Local>() {





















 public Set<Local> computeTargets(Local source) {










 int argIndex = callArgs.indexOf(source);










 if(argIndex>-1) {










 return Collections.singleton(paramLocals.get(argIndex));










 }










 return Collections.emptySet();










 }










 };










 }





















 @Override










 public FlowFunction<Local> getReturnFlowFunction(Unit callSite, SootMethod callee, Unit exitStmt, Unit retSite) {










 if (exitStmt instanceof ReturnStmt) { 










 ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 Value op = returnStmt.getOp();










 if(op instanceof Local) {










 if(callSite instanceof DefinitionStmt) {










 DefinitionStmt defnStmt = (DefinitionStmt) callSite;










 Value leftOp = defnStmt.getLeftOp();










 if(leftOp instanceof Local) {










 final Local tgtLocal = (Local) leftOp;










 final Local retLocal = (Local) op;










 return new FlowFunction<Local>() {





















 public Set<Local> computeTargets(Local source) {










 if(source==retLocal)










 return Collections.singleton(tgtLocal);










 return Collections.emptySet();










 }










 










 };










 }










 }










 }










 } 










 return KillAll.v();










 }





















 @Override










 public FlowFunction<Local> getCallToReturnFlowFunction(Unit call, Unit returnSite) {










 return Identity.v();










 }










 }; 










 }





















 @Override










 public Local createZeroValue() {










 return new JimpleLocal("zero", NullType.v());










 }





















 @Override










 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }










}




\ No newline at end of file














src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSPossibleTypes.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.KillAll;





















import soot.Local;










import soot.PointsToAnalysis;










import soot.PointsToSet;










import soot.PrimType;










import soot.Scene;










import soot.SootMethod;










import soot.Type;










import soot.Unit;










import soot.UnknownType;










import soot.Value;










import soot.jimple.ArrayRef;










import soot.jimple.Constant;










import soot.jimple.DefinitionStmt;










import soot.jimple.InstanceFieldRef;










import soot.jimple.InvokeExpr;










import soot.jimple.Jimple;










import soot.jimple.NewExpr;










import soot.jimple.Ref;










import soot.jimple.ReturnStmt;










import soot.jimple.Stmt;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;










import soot.toolkits.scalar.Pair;





















@SuppressWarnings("serial")










public class IFDSPossibleTypes extends DefaultJimpleIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {










 super(icfg);










 }





















 public FlowFunctions<Unit, Pair<Value,Type>, SootMethod> createFlowFunctionsFactory() {










 return new FlowFunctions<Unit,Pair<Value,Type>,SootMethod>() {





















 public FlowFunction<Pair<Value,Type>> getNormalFlowFunction(Unit src, Unit dest) {










 if(src instanceof DefinitionStmt) {










 DefinitionStmt defnStmt = (DefinitionStmt) src;










 if(defnStmt.containsInvokeExpr()) return Identity.v();










 final Value right = defnStmt.getRightOp();










 final Value left = defnStmt.getLeftOp();










 //won't track primitive-typed variables










 if(right.getType() instanceof PrimType) return Identity.v();










 










 if(right instanceof Constant || right instanceof NewExpr) {










 return new FlowFunction<Pair<Value,Type>>() {










 public Set<Pair<Value, Type>> computeTargets(Pair<Value, Type> source) {










 if(source==new Pair<Value, Type>(Jimple.v().newLocal("<dummy>", UnknownType.v()), UnknownType.v())) {










 Set<Pair<Value, Type>> res = new LinkedHashSet<Pair<Value,Type>>();










 res.add(new Pair<Value,Type>(left,right.getType()));










 res.add(new Pair<Value, Type>(Jimple.v().newLocal("<dummy>", UnknownType.v()), UnknownType.v()));










 return res;










 } else if(source.getO1() instanceof Local && source.getO1().equivTo(left)) {










 //strong update for local variables










 return Collections.emptySet();










 } else {










 return Collections.singleton(source);










 }










 }










 };










 } else if(right instanceof Ref || right instanceof Local) {










 return new FlowFunction<Pair<Value,Type>>() {










 public Set<Pair<Value, Type>> computeTargets(final Pair<Value, Type> source) {










 Value value = source.getO1();










 if(source.getO1() instanceof Local && source.getO1().equivTo(left)) {










 //strong update for local variables










 return Collections.emptySet();










 } else if(maybeSameLocation(value,right)) {










 return new LinkedHashSet<Pair<Value,Type>>() {{










 add(new Pair<Value,Type>(left,source.getO2())); 










 add(source); 










 }};










 } else {










 return Collections.singleton(source);










 }










 }





















 private boolean maybeSameLocation(Value v1, Value v2) {










 if(!(v1 instanceof InstanceFieldRef && v2 instanceof InstanceFieldRef) &&










 !(v1 instanceof ArrayRef && v2 instanceof ArrayRef)) {










 return v1.equivTo(v2);










 }










 if(v1 instanceof InstanceFieldRef && v2 instanceof InstanceFieldRef) {










 InstanceFieldRef ifr1 = (InstanceFieldRef) v1;










 InstanceFieldRef ifr2 = (InstanceFieldRef) v2;










 if(!ifr1.getField().getName().equals(ifr2.getField().getName())) return false;










 










 Local base1 = (Local) ifr1.getBase();










 Local base2 = (Local) ifr2.getBase();










 PointsToAnalysis pta = Scene.v().getPointsToAnalysis();










 PointsToSet pts1 = pta.reachingObjects(base1);










 PointsToSet pts2 = pta.reachingObjects(base2); 










 return pts1.hasNonEmptyIntersection(pts2);










 } else { //v1 instanceof ArrayRef && v2 instanceof ArrayRef










 ArrayRef ar1 = (ArrayRef) v1;










 ArrayRef ar2 = (ArrayRef) v2;





















 Local base1 = (Local) ar1.getBase();










 Local base2 = (Local) ar2.getBase();










 PointsToAnalysis pta = Scene.v().getPointsToAnalysis();










 PointsToSet pts1 = pta.reachingObjects(base1);










 PointsToSet pts2 = pta.reachingObjects(base2); 










 return pts1.hasNonEmptyIntersection(pts2);










 }










 }










 };










 } 










 }










 return Identity.v();










 }





















 public FlowFunction<Pair<Value,Type>> getCallFlowFunction(final Unit src, final SootMethod dest) {










 Stmt stmt = (Stmt) src;










 InvokeExpr ie = stmt.getInvokeExpr();










 final List<Value> callArgs = ie.getArgs();










 final List<Local> paramLocals = new ArrayList<Local>();










 for(int i=0;i<dest.getParameterCount();i++) {










 paramLocals.add(dest.getActiveBody().getParameterLocal(i));










 } 










 return new FlowFunction<Pair<Value,Type>>() {










 public Set<Pair<Value,Type>> computeTargets(Pair<Value,Type> source) {










 Value value = source.getO1();










 int argIndex = callArgs.indexOf(value);










 if(argIndex>-1) {










 return Collections.singleton(new Pair<Value,Type>(paramLocals.get(argIndex), source.getO2()));










 }










 return Collections.emptySet();










 }










 };










 }





















 public FlowFunction<Pair<Value,Type>> getReturnFlowFunction(Unit callSite, SootMethod callee, Unit exitStmt, Unit retSite) {










 if (exitStmt instanceof ReturnStmt) { 










 ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 Value op = returnStmt.getOp();










 if(op instanceof Local) {










 if(callSite instanceof DefinitionStmt) {










 DefinitionStmt defnStmt = (DefinitionStmt) callSite;










 Value leftOp = defnStmt.getLeftOp();










 if(leftOp instanceof Local) {










 final Local tgtLocal = (Local) leftOp;










 final Local retLocal = (Local) op;










 return new FlowFunction<Pair<Value,Type>>() {





















 public Set<Pair<Value,Type>> computeTargets(Pair<Value,Type> source) {










 if(source==retLocal)










 return Collections.singleton(new Pair<Value,Type>(tgtLocal, source.getO2()));










 return Collections.emptySet();










 }










 










 };










 }










 }










 }










 }










 return KillAll.v();










 }





















 public FlowFunction<Pair<Value,Type>> getCallToReturnFlowFunction(Unit call, Unit returnSite) {










 return Identity.v();










 }










 };










 }





















 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }





















 public Pair<Value,Type> createZeroValue() {










 return new Pair<Value, Type>(Jimple.v().newLocal("<dummy>", UnknownType.v()), UnknownType.v());










 }










}




\ No newline at end of file














src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSReachingDefinitions.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.KillAll;





















import soot.EquivalentValue;










import soot.Local;










import soot.NullType;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.Value;










import soot.jimple.DefinitionStmt;










import soot.jimple.InvokeExpr;










import soot.jimple.Jimple;










import soot.jimple.ReturnStmt;










import soot.jimple.ReturnVoidStmt;










import soot.jimple.Stmt;










import soot.jimple.internal.JimpleLocal;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;










import soot.toolkits.scalar.Pair;





















public class IFDSReachingDefinitions extends DefaultJimpleIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {










 public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {










 super(icfg);










 }










 










 @Override










 public FlowFunctions<Unit, Pair<Value, Set<DefinitionStmt>>, SootMethod> createFlowFunctionsFactory() {










 return new FlowFunctions<Unit, Pair<Value, Set<DefinitionStmt>>, SootMethod>() {





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getNormalFlowFunction(final Unit curr, Unit succ) {










 if (curr instanceof DefinitionStmt) {










 final DefinitionStmt assignment = (DefinitionStmt) curr;





















 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {










 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if (source != zeroValue()) {










 if (source.getO1().equivTo(assignment.getLeftOp())) {










 return Collections.emptySet();










 }










 return Collections.singleton(source);










 } else {










 LinkedHashSet<Pair<Value, Set<DefinitionStmt>>> res = new LinkedHashSet<Pair<Value, Set<DefinitionStmt>>>();










 res.add(new Pair<Value, Set<DefinitionStmt>>(assignment.getLeftOp(),










 Collections.<DefinitionStmt> singleton(assignment)));










 return res;










 }










 }










 };










 }





















 return Identity.v();










 }





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getCallFlowFunction(Unit callStmt,










 final SootMethod destinationMethod) {










 Stmt stmt = (Stmt) callStmt;










 InvokeExpr invokeExpr = stmt.getInvokeExpr();










 final List<Value> args = invokeExpr.getArgs();





















 final List<Local> localArguments = new ArrayList<Local>(args.size());










 for (Value value : args) {










 if (value instanceof Local)










 localArguments.add((Local) value);










 else










 localArguments.add(null);










 }





















 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {





















 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if(localArguments.contains(source.getO1())) {










 int paramIndex = args.indexOf(source.getO1());










 Pair<Value, Set<DefinitionStmt>> pair = new Pair<Value, Set<DefinitionStmt>>(










 new EquivalentValue(Jimple.v().newParameterRef(destinationMethod.getParameterType(paramIndex), paramIndex)),










 source.getO2());










 return Collections.singleton(pair);










 }





















 return Collections.emptySet();










 }










 };










 }





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getReturnFlowFunction(final Unit callSite,










 SootMethod calleeMethod, final Unit exitStmt, Unit returnSite) {










 if (!(callSite instanceof DefinitionStmt))










 return KillAll.v();





















 if (exitStmt instanceof ReturnVoidStmt)










 return KillAll.v();





















 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {





















 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if(exitStmt instanceof ReturnStmt) {










 ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 if (returnStmt.getOp().equivTo(source.getO1())) {










 DefinitionStmt definitionStmt = (DefinitionStmt) callSite;










 Pair<Value, Set<DefinitionStmt>> pair = new Pair<Value, Set<DefinitionStmt>>(










 definitionStmt.getLeftOp(), source.getO2());










 return Collections.singleton(pair);










 }










 }










 return Collections.emptySet();










 }










 };










 }





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getCallToReturnFlowFunction(Unit callSite, Unit returnSite) {










 if (!(callSite instanceof DefinitionStmt))










 return Identity.v();










 










 final DefinitionStmt definitionStmt = (DefinitionStmt) callSite;










 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {





















 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if(source.getO1().equivTo(definitionStmt.getLeftOp())) {










 return Collections.emptySet();










 } else {










 return Collections.singleton(source);










 }










 }










 };










 }










 };










 }





















 @Override










 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }





















 public Pair<Value, Set<DefinitionStmt>> createZeroValue() {










 return new Pair<Value, Set<DefinitionStmt>>(new JimpleLocal("<<zero>>", NullType.v()), Collections.<DefinitionStmt> emptySet());










 }





















}














src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSUninitializedVariables.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.Kill;










import de.bodden.ide.flowfunc.KillAll;





















import soot.Local;










import soot.NullType;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.Value;










import soot.ValueBox;










import soot.jimple.DefinitionStmt;










import soot.jimple.InvokeExpr;










import soot.jimple.ReturnStmt;










import soot.jimple.Stmt;










import soot.jimple.ThrowStmt;










import soot.jimple.internal.JimpleLocal;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;










import soot.util.Chain;





















public class IFDSUninitializedVariables extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {










 super(icfg); 










 }





















 @Override










 public FlowFunctions<Unit, Local, SootMethod> createFlowFunctionsFactory() {










 return new FlowFunctions<Unit, Local, SootMethod>() {





















 @Override










 public FlowFunction<Local> getNormalFlowFunction(Unit curr, Unit succ) {










 final SootMethod m = interproceduralCFG().getMethodOf(curr);










 if(Scene.v().getEntryPoints().contains(m) && interproceduralCFG().isStartPoint(curr)) {










 return new FlowFunction<Local>() {










 










 @Override










 public Set<Local> computeTargets(Local source) {










 if (source == zeroValue()) {










 Set<Local> res = new LinkedHashSet<Local>();










 res.addAll(m.getActiveBody().getLocals());










 for(int i=0;i<m.getParameterCount();i++) 










 res.remove(m.getActiveBody().getParameterLocal(i));










 return res;










 }










 return Collections.emptySet();










 }










 };










 }










 










 if (curr instanceof DefinitionStmt) {










 final DefinitionStmt definition = (DefinitionStmt) curr;










 final Value leftOp = definition.getLeftOp();










 if(leftOp instanceof Local) {










 final Local leftOpLocal = (Local) leftOp;










 return new FlowFunction<Local>() {





















 @Override










 public Set<Local> computeTargets(final Local source) {










 List<ValueBox> useBoxes = definition.getUseBoxes();










 for (ValueBox valueBox : useBoxes) {










 if (valueBox.getValue().equivTo(source)) {










 LinkedHashSet<Local> res = new LinkedHashSet<Local>();










 res.add(source);










 res.add(leftOpLocal); 










 return res;










 }










 }





















 if (leftOp.equivTo(source))










 return Collections.emptySet();





















 return Collections.singleton(source);










 }





















 };










 }










 }





















 return Identity.v();










 }





















 @Override










 public FlowFunction<Local> getCallFlowFunction(Unit callStmt, final SootMethod destinationMethod) {










 Stmt stmt = (Stmt) callStmt;










 InvokeExpr invokeExpr = stmt.getInvokeExpr();










 final List<Value> args = invokeExpr.getArgs();





















 final List<Local> localArguments = new ArrayList<Local>();










 for (Value value : args)










 if (value instanceof Local)










 localArguments.add((Local) value);





















 return new FlowFunction<Local>() {





















 @Override










 public Set<Local> computeTargets(final Local source) {










 for (Local localArgument : localArguments) {










 if (source.equivTo(localArgument)) {










 return Collections.<Local>singleton(destinationMethod.getActiveBody().getParameterLocal(args.indexOf(localArgument)));










 }










 }





















 if (source == zeroValue()) {










 //gen all locals that are not parameter locals 










 Chain<Local> locals = destinationMethod.getActiveBody().getLocals();










 LinkedHashSet<Local> uninitializedLocals = new LinkedHashSet<Local>(locals);










 for(int i=0;i<destinationMethod.getParameterCount();i++) { 










 uninitializedLocals.remove(destinationMethod.getActiveBody().getParameterLocal(i));










 }










 return uninitializedLocals;










 }





















 return Collections.emptySet();










 }





















 };










 }





















 @Override










 public FlowFunction<Local> getReturnFlowFunction(final Unit callSite, SootMethod calleeMethod,










 final Unit exitStmt, Unit returnSite) {










 if (callSite instanceof DefinitionStmt) {










 final DefinitionStmt definition = (DefinitionStmt) callSite;










 if(definition.getLeftOp() instanceof Local) {










 final Local leftOpLocal = (Local) definition.getLeftOp(); 










 if (exitStmt instanceof ReturnStmt) {










 final ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 return new FlowFunction<Local>() {










 










 @Override










 public Set<Local> computeTargets(Local source) {










 if (returnStmt.getOp().equivTo(source))










 return Collections.singleton(leftOpLocal);










 return Collections.emptySet();










 }










 










 };










 } else if (exitStmt instanceof ThrowStmt) {










 //if we throw an exception, LHS of call is undefined










 return new FlowFunction<Local>() {










 










 @Override










 public Set<Local> computeTargets(final Local source) {










 if (source == zeroValue())










 return Collections.singleton(leftOpLocal);










 else










 return Collections.emptySet();










 }










 










 };










 }










 }










 }










 










 return KillAll.v();










 }





















 @Override










 public FlowFunction<Local> getCallToReturnFlowFunction(Unit callSite, Unit returnSite) {










 if (callSite instanceof DefinitionStmt) {










 DefinitionStmt definition = (DefinitionStmt) callSite;










 if(definition.getLeftOp() instanceof Local) {










 final Local leftOpLocal = (Local) definition.getLeftOp(); 










 return new Kill<Local>(leftOpLocal);










 }










 }










 return Identity.v();










 }










 };










 }










 @Override










 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }





















 @Override










 public Local createZeroValue() {










 return new JimpleLocal("<<zero>>", NullType.v());










 }





















}














src-soot/soot/jimple/toolkits/ide/icfg/BackwardsInterproceduralCFG.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.icfg;





















import soot.Body;










import soot.Unit;










import soot.toolkits.graph.DirectedGraph;










import soot.toolkits.graph.InverseGraph;





















/**










 * Same as {@link JimpleBasedInterproceduralCFG} but based on inverted unit graphs.










 * This should be used for backward analyses.










 */










public class BackwardsInterproceduralCFG extends JimpleBasedInterproceduralCFG {





















 @Override










 protected DirectedGraph<Unit> makeGraph(Body body) {










 return new InverseGraph<Unit>(super.makeGraph(body));










 }










 










}














src-soot/soot/jimple/toolkits/ide/icfg/JimpleBasedInterproceduralCFG.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.icfg;





















import java.util.ArrayList;










import java.util.HashMap;










import java.util.Iterator;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Map;










import java.util.Set;





















import soot.Body;










import soot.MethodOrMethodContext;










import soot.PatchingChain;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.UnitBox;










import soot.jimple.Stmt;










import soot.jimple.toolkits.callgraph.CallGraph;










import soot.jimple.toolkits.callgraph.Edge;










import soot.jimple.toolkits.callgraph.EdgePredicate;










import soot.jimple.toolkits.callgraph.Filter;










import soot.jimple.toolkits.callgraph.ReachableMethods;










import soot.toolkits.exceptions.UnitThrowAnalysis;










import soot.toolkits.graph.DirectedGraph;










import soot.toolkits.graph.ExceptionalUnitGraph;





















import com.google.common.cache.CacheLoader;










import com.google.common.cache.LoadingCache;





















import de.bodden.ide.DontSynchronize;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.SynchronizedBy;










import de.bodden.ide.ThreadSafe;










import de.bodden.ide.solver.IDESolver;





















/**










 * Default implementation for the {@link InterproceduralCFG} interface.










 * Includes all statements reachable from {@link Scene#getEntryPoints()} through










 * explicit call statements or through calls to {@link Thread#start()}.










 * 










 * This class is designed to be thread safe, and subclasses of this class must be designed










 * in a thread-safe way, too.










 */










@ThreadSafe










public class JimpleBasedInterproceduralCFG implements InterproceduralCFG<Unit,SootMethod> {










 










 //retains only callers that are explicit call sites or Thread.start()










 protected static class EdgeFilter extends Filter { 










 protected EdgeFilter() {










 super(new EdgePredicate() {










 public boolean want(Edge e) { 










 return e.kind().isExplicit() || e.kind().isThread();










 }










 });










 }










 }










 










 @DontSynchronize("readonly")










 protected final CallGraph cg;










 










 @DontSynchronize("written by single thread; read afterwards")










 protected final Map<Unit,Body> unitToOwner = new HashMap<Unit,Body>(); 










 










 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<Body,DirectedGraph<Unit>> bodyToUnitGraph =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<Body,DirectedGraph<Unit>>() {










 public DirectedGraph<Unit> load(Body body) throws Exception {










 return makeGraph(body);










 }










 });










 










 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<Unit,Set<SootMethod>> unitToCallees =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<Unit,Set<SootMethod>>() {










 public Set<SootMethod> load(Unit u) throws Exception {










 Set<SootMethod> res = new LinkedHashSet<SootMethod>();










 //only retain callers that are explicit call sites or Thread.start()










 Iterator<Edge> edgeIter = new EdgeFilter().wrap(cg.edgesOutOf(u)); 










 while(edgeIter.hasNext()) {










 Edge edge = edgeIter.next();










 if(edge.getTgt()==null) {










 System.err.println();










 }










 SootMethod m = edge.getTgt().method();










 if(m.hasActiveBody())










 res.add(m);










 }










 return res; 










 }










 });





















 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<SootMethod,Set<Unit>> methodToCallers =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<SootMethod,Set<Unit>>() {










 public Set<Unit> load(SootMethod m) throws Exception {










 Set<Unit> res = new LinkedHashSet<Unit>(); 










 //only retain callers that are explicit call sites or Thread.start()










 Iterator<Edge> edgeIter = new EdgeFilter().wrap(cg.edgesInto(m)); 










 while(edgeIter.hasNext()) {










 Edge edge = edgeIter.next();










 res.add(edge.srcUnit()); 










 }










 return res;










 }










 });





















 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<SootMethod,Set<Unit>> methodToCallsFromWithin =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<SootMethod,Set<Unit>>() {










 public Set<Unit> load(SootMethod m) throws Exception {










 Set<Unit> res = new LinkedHashSet<Unit>();










 //only retain calls that are explicit call sites or Thread.start()










 Iterator<Edge> edgeIter = new EdgeFilter().wrap(cg.edgesOutOf(m));










 while(edgeIter.hasNext()) {










 Edge edge = edgeIter.next();










 res.add(edge.srcUnit()); 










 }










 return res;










 }










 });





















 










 public JimpleBasedInterproceduralCFG() {










 cg = Scene.v().getCallGraph();










 










 List<MethodOrMethodContext> eps = new ArrayList<MethodOrMethodContext>();










 eps.addAll(Scene.v().getEntryPoints());










 ReachableMethods reachableMethods = new ReachableMethods(cg, eps.iterator(), new EdgeFilter());










 reachableMethods.update();










 










 for(Iterator<MethodOrMethodContext> iter = reachableMethods.listener(); iter.hasNext(); ) {










 SootMethod m = iter.next().method();










 if(m.hasActiveBody()) {










 Body b = m.getActiveBody();










 PatchingChain<Unit> units = b.getUnits();










 for (Unit unit : units) {










 unitToOwner.put(unit, b);










 }










 }










 }










 }





















 @Override










 public SootMethod getMethodOf(Unit u) {










 return unitToOwner.get(u).getMethod();










 }





















 @Override










 public List<Unit> getSuccsOf(Unit u) {










 Body body = unitToOwner.get(u);










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body);










 return unitGraph.getSuccsOf(u);










 }





















 private DirectedGraph<Unit> getOrCreateUnitGraph(Body body) {










 return bodyToUnitGraph.getUnchecked(body);










 }





















 protected synchronized DirectedGraph<Unit> makeGraph(Body body) {










 return new ExceptionalUnitGraph(body, UnitThrowAnalysis.v() ,true);










 }





















 @Override










 public Set<SootMethod> getCalleesOfCallAt(Unit u) {










 return unitToCallees.getUnchecked(u);










 }





















 @Override










 public List<Unit> getReturnSitesOfCallAt(Unit u) {










 return getSuccsOf(u);










 }





















 @Override










 public boolean isCallStmt(Unit u) {










 return ((Stmt)u).containsInvokeExpr();










 }





















 @Override










 public boolean isExitStmt(Unit u) {










 Body body = unitToOwner.get(u);










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body);










 return unitGraph.getTails().contains(u);










 }





















 @Override










 public Set<Unit> getCallersOf(SootMethod m) {










 return methodToCallers.getUnchecked(m);










 }










 










 @Override










 public Set<Unit> getCallsFromWithin(SootMethod m) {










 return methodToCallsFromWithin.getUnchecked(m); 










 }





















 @Override










 public Set<Unit> getStartPointsOf(SootMethod m) {










 if(m.hasActiveBody()) {










 Body body = m.getActiveBody();










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body);










 return new LinkedHashSet<Unit>(unitGraph.getHeads());










 }










 return null;










 }





















 @Override










 public boolean isStartPoint(Unit u) {










 Body body = unitToOwner.get(u);










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body); 










 return unitGraph.getHeads().contains(u);










 }





















 @Override










 //TODO do we need to replace call by return for backwards analysis?










 public Set<Unit> allNonCallStartNodes() {










 Set<Unit> res = new LinkedHashSet<Unit>(unitToOwner.keySet());










 for (Iterator<Unit> iter = res.iterator(); iter.hasNext();) {










 Unit u = iter.next();










 if(isStartPoint(u) || isCallStmt(u)) iter.remove();










 }










 return res;










 }





















 @Override










 public boolean isFallThroughSuccessor(Unit u, Unit succ) {










 assert getSuccsOf(u).contains(succ);










 if(!u.fallsThrough()) return false;










 Body body = unitToOwner.get(u);










 return body.getUnits().getSuccOf(u) == succ;










 }





















 @Override










 public boolean isBranchTarget(Unit u, Unit succ) {










 assert getSuccsOf(u).contains(succ);










 if(!u.branches()) return false;










 for (UnitBox ub : succ.getUnitBoxes()) {










 if(ub.getUnit()==succ) return true;










 }










 return false;










 }










}














src-generic/de/bodden/ide/DontSynchronize.java

→

src/de/bodden/ide/DontSynchronize.java








View file @ ae1aae21





File moved













src-generic/de/bodden/ide/EdgeFunction.java

→

src/de/bodden/ide/EdgeFunction.java








View file @ ae1aae21





File moved













src-generic/de/bodden/ide/EdgeFunctionCache.java

→

src/de/bodden/ide/EdgeFunctionCache.java








View file @ ae1aae21





File moved













src-generic/de/bodden/ide/EdgeFunctions.java

→

src/de/bodden/ide/EdgeFunctions.java








View file @ ae1aae21





File moved













src-generic/de/bodden/ide/FlowFunction.java

→

src/de/bodden/ide/FlowFunction.java








View file @ ae1aae21





File moved













src-generic/de/bodden/ide/FlowFunctionCache.java

→

src/de/bodden/ide/FlowFunctionCache.java








View file @ ae1aae21





File moved








Prev


1


2


3


Next















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
ae1aae21


authored
Nov 29, 2012
by


Eric Bodden



Browse files



Commit
ae1aae21


authored
Nov 29, 2012
by


Eric Bodden

ae1aae21authoredbyEric Bodden

moved Soot-specifiv code to soot






parent
f7c0f2f6
















parent
f7c0f2f6





parent












Changes
47
47


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










.classpath








View file @ ae1aae21













<?xml version="1.0" encoding="UTF-8"?>










<classpath>










 <classpathentry combineaccessrules="false" exported="true" kind="src" path="/soot"/>










 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>










 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src-generic"/>










 <classpathentry kind="src" path="src-soot"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry exported="true" kind="lib" path="guava-13.0.jar"/>










 <classpathentry kind="lib" path="soot-trunk.jar" sourcepath="/soot"/>










 <classpathentry kind="output" path="bin"/>










</classpath>














META-INF/MANIFEST.MF








View file @ ae1aae21






......@@ -22,119 +22,4 @@ Export-Package: com.google.common.annotations,









 de.bodden.ide.edgefunc,










 de.bodden.ide.flowfunc,










 de.bodden.ide.solver,










 de.bodden.ide.template,










 soot,










 soot.JastAddJ,










 soot.baf,










 soot.baf.internal,










 soot.baf.toolkits.base,










 soot.coffi,










 soot.dava,










 soot.dava.internal.AST,










 soot.dava.internal.SET,










 soot.dava.internal.asg,










 soot.dava.internal.javaRep,










 soot.dava.toolkits.base.AST,










 soot.dava.toolkits.base.AST.analysis,










 soot.dava.toolkits.base.AST.interProcedural,










 soot.dava.toolkits.base.AST.structuredAnalysis,










 soot.dava.toolkits.base.AST.transformations,










 soot.dava.toolkits.base.AST.traversals,










 soot.dava.toolkits.base.DavaMonitor,










 soot.dava.toolkits.base.finders,










 soot.dava.toolkits.base.misc,










 soot.dava.toolkits.base.renamer,










 soot.grimp,










 soot.grimp.internal,










 soot.grimp.toolkits.base,










 soot.javaToJimple,










 soot.javaToJimple.jj,










 soot.javaToJimple.jj.ast,










 soot.javaToJimple.jj.types,










 soot.javaToJimple.toolkits,










 soot.jbco,










 soot.jbco.bafTransformations,










 soot.jbco.gui,










 soot.jbco.jimpleTransformations,










 soot.jbco.util,










 soot.jimple,










 soot.jimple.internal,










 soot.jimple.paddle,










 soot.jimple.parser,










 soot.jimple.parser.analysis,










 soot.jimple.parser.lexer,










 soot.jimple.parser.node,










 soot.jimple.parser.parser,










 soot.jimple.spark,










 soot.jimple.spark.builder,










 soot.jimple.spark.fieldrw,










 soot.jimple.spark.geom,










 soot.jimple.spark.geom.geomE,










 soot.jimple.spark.geom.geomPA,










 soot.jimple.spark.geom.heapinsE,










 soot.jimple.spark.geom.ptinsE,










 soot.jimple.spark.internal,










 soot.jimple.spark.ondemand,










 soot.jimple.spark.ondemand.genericutil,










 soot.jimple.spark.ondemand.pautil,










 soot.jimple.spark.pag,










 soot.jimple.spark.sets,










 soot.jimple.spark.solver,










 soot.jimple.toolkits.annotation,










 soot.jimple.toolkits.annotation.arraycheck,










 soot.jimple.toolkits.annotation.callgraph,










 soot.jimple.toolkits.annotation.defs,










 soot.jimple.toolkits.annotation.fields,










 soot.jimple.toolkits.annotation.j5anno,










 soot.jimple.toolkits.annotation.liveness,










 soot.jimple.toolkits.annotation.logic,










 soot.jimple.toolkits.annotation.methods,










 soot.jimple.toolkits.annotation.nullcheck,










 soot.jimple.toolkits.annotation.parity,










 soot.jimple.toolkits.annotation.profiling,










 soot.jimple.toolkits.annotation.purity,










 soot.jimple.toolkits.annotation.qualifiers,










 soot.jimple.toolkits.annotation.tags,










 soot.jimple.toolkits.base,










 soot.jimple.toolkits.callgraph,










 soot.jimple.toolkits.graph,










 soot.jimple.toolkits.infoflow,










 soot.jimple.toolkits.invoke,










 soot.jimple.toolkits.pointer,










 soot.jimple.toolkits.pointer.nativemethods,










 soot.jimple.toolkits.pointer.representations,










 soot.jimple.toolkits.pointer.util,










 soot.jimple.toolkits.reflection,










 soot.jimple.toolkits.scalar,










 soot.jimple.toolkits.scalar.pre,










 soot.jimple.toolkits.thread,










 soot.jimple.toolkits.thread.mhp,










 soot.jimple.toolkits.thread.mhp.findobject,










 soot.jimple.toolkits.thread.mhp.pegcallgraph,










 soot.jimple.toolkits.thread.mhp.stmt,










 soot.jimple.toolkits.thread.synchronization,










 soot.jimple.toolkits.typing,










 soot.jimple.toolkits.typing.fast,










 soot.jimple.toolkits.typing.integer,










 soot.options,










 soot.rtlib.tamiflex,










 soot.shimple,










 soot.shimple.internal,










 soot.shimple.toolkits.graph,










 soot.shimple.toolkits.scalar,










 soot.sootify,










 soot.tagkit,










 soot.toolkits.astmetrics,










 soot.toolkits.astmetrics.DataHandlingApplication,










 soot.toolkits.exceptions,










 soot.toolkits.graph,










 soot.toolkits.graph.interaction,










 soot.toolkits.graph.pdg,










 soot.toolkits.scalar,










 soot.tools,










 soot.util,










 soot.util.cfgcmd,










 soot.util.dot,










 soot.util.queue,










 soot.xml,










 soot.jimple.toolkits.ide.exampleproblems









 de.bodden.ide.template














build.properties








View file @ ae1aae21













source.soot-ifds.jar = src-generic/










source.soot-ifds.jar = src/










bin.includes = META-INF/,\










 soot-ifds.jar,\










 soot-trunk.jar,\



......














src-soot/soot/jimple/toolkits/ide/DefaultJimpleIDETabulationProblem.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import soot.SootMethod;










import soot.Unit;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.template.DefaultIDETabulationProblem;





















/**










 *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods.










 */










public abstract class DefaultJimpleIDETabulationProblem<D,V,I extends InterproceduralCFG<Unit,SootMethod>>










 extends DefaultIDETabulationProblem<Unit,D,SootMethod,V,I> {





















 public DefaultJimpleIDETabulationProblem(I icfg) {










 super(icfg);










 }










 










}














src-soot/soot/jimple/toolkits/ide/DefaultJimpleIFDSTabulationProblem.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import soot.SootMethod;










import soot.Unit;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.template.DefaultIDETabulationProblem;










import de.bodden.ide.template.DefaultIFDSTabulationProblem;





















/**










 *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods.










 */










public abstract class DefaultJimpleIFDSTabulationProblem<D,I extends InterproceduralCFG<Unit,SootMethod>>










 extends DefaultIFDSTabulationProblem<Unit,D,SootMethod,I> {





















 public DefaultJimpleIFDSTabulationProblem(I icfg) {










 super(icfg);










 }










 










}














src-soot/soot/jimple/toolkits/ide/JimpleIDESolver.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IDESolver;





















public class JimpleIDESolver<D, V> extends IDESolver<Unit, D, SootMethod, V, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, V> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}














src-soot/soot/jimple/toolkits/ide/JimpleIFDSSolver.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IFDSSolver;





















public class JimpleIFDSSolver<D, V> extends IFDSSolver<Unit, D, SootMethod, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, ?> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}














src-soot/soot/jimple/toolkits/ide/Main.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.util.Map;





















import de.bodden.ide.IFDSTabulationProblem;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IFDSSolver;





















import soot.Local;










import soot.PackManager;










import soot.Scene;










import soot.SceneTransformer;










import soot.SootMethod;










import soot.Transform;










import soot.Unit;










import soot.jimple.toolkits.ide.exampleproblems.IFDSLocalInfoFlow;










import soot.jimple.toolkits.ide.icfg.JimpleBasedInterproceduralCFG;





















public class Main {





















 /**










	 * @param args










	 */










 public static void main(String[] args) {










 










 










 PackManager.v().getPack("wjtp").add(new Transform("wjtp.ifds", new SceneTransformer() {










 protected void internalTransform(String phaseName, @SuppressWarnings("rawtypes") Map options) {





















 IFDSTabulationProblem<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>> problem = new IFDSLocalInfoFlow(new JimpleBasedInterproceduralCFG());










 










 IFDSSolver<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>> solver = new IFDSSolver<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>>(problem); 










 solver.solve();










 Unit ret = Scene.v().getMainMethod().getActiveBody().getUnits().getLast();










 for(Local l: solver.ifdsResultsAt(ret)) {










 System.err.println(l);










 }










 }










 }));










 










 soot.Main.main(args);










 }





















}














src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSLocalInfoFlow.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Gen;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.Kill;










import de.bodden.ide.flowfunc.KillAll;










import de.bodden.ide.flowfunc.Transfer;





















import soot.Local;










import soot.NullType;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.Value;










import soot.jimple.AssignStmt;










import soot.jimple.DefinitionStmt;










import soot.jimple.IdentityStmt;










import soot.jimple.InvokeExpr;










import soot.jimple.ParameterRef;










import soot.jimple.ReturnStmt;










import soot.jimple.Stmt;










import soot.jimple.internal.JimpleLocal;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;





















public class IFDSLocalInfoFlow extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {










 super(icfg); 










 }





















 public FlowFunctions<Unit, Local, SootMethod> createFlowFunctionsFactory() { 










 return new FlowFunctions<Unit,Local,SootMethod>() {





















 @Override










 public FlowFunction<Local> getNormalFlowFunction(Unit src, Unit dest) {










 if (src instanceof IdentityStmt && interproceduralCFG().getMethodOf(src)==Scene.v().getMainMethod()) {










 IdentityStmt is = (IdentityStmt) src;










 Local leftLocal = (Local) is.getLeftOp();










 Value right = is.getRightOp();










 if (right instanceof ParameterRef) {










 return new Gen<Local>(leftLocal,zeroValue());










 }










 }










 










 if(src instanceof AssignStmt) {










 AssignStmt assignStmt = (AssignStmt) src;










 Value right = assignStmt.getRightOp();










 if(assignStmt.getLeftOp() instanceof Local) {










 final Local leftLocal = (Local) assignStmt.getLeftOp();










 if(right instanceof Local) {










 final Local rightLocal = (Local) right;










 return new Transfer<Local>(leftLocal, rightLocal);










 } else {










 return new Kill<Local>(leftLocal);










 }










 }










 }










 return Identity.v();










 }





















 @Override










 public FlowFunction<Local> getCallFlowFunction(Unit src, final SootMethod dest) {










 Stmt stmt = (Stmt) src;










 InvokeExpr ie = stmt.getInvokeExpr();










 final List<Value> callArgs = ie.getArgs();










 final List<Local> paramLocals = new ArrayList<Local>();










 for(int i=0;i<dest.getParameterCount();i++) {










 paramLocals.add(dest.getActiveBody().getParameterLocal(i));










 }










 return new FlowFunction<Local>() {





















 public Set<Local> computeTargets(Local source) {










 int argIndex = callArgs.indexOf(source);










 if(argIndex>-1) {










 return Collections.singleton(paramLocals.get(argIndex));










 }










 return Collections.emptySet();










 }










 };










 }





















 @Override










 public FlowFunction<Local> getReturnFlowFunction(Unit callSite, SootMethod callee, Unit exitStmt, Unit retSite) {










 if (exitStmt instanceof ReturnStmt) { 










 ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 Value op = returnStmt.getOp();










 if(op instanceof Local) {










 if(callSite instanceof DefinitionStmt) {










 DefinitionStmt defnStmt = (DefinitionStmt) callSite;










 Value leftOp = defnStmt.getLeftOp();










 if(leftOp instanceof Local) {










 final Local tgtLocal = (Local) leftOp;










 final Local retLocal = (Local) op;










 return new FlowFunction<Local>() {





















 public Set<Local> computeTargets(Local source) {










 if(source==retLocal)










 return Collections.singleton(tgtLocal);










 return Collections.emptySet();










 }










 










 };










 }










 }










 }










 } 










 return KillAll.v();










 }





















 @Override










 public FlowFunction<Local> getCallToReturnFlowFunction(Unit call, Unit returnSite) {










 return Identity.v();










 }










 }; 










 }





















 @Override










 public Local createZeroValue() {










 return new JimpleLocal("zero", NullType.v());










 }





















 @Override










 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }










}




\ No newline at end of file














src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSPossibleTypes.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.KillAll;





















import soot.Local;










import soot.PointsToAnalysis;










import soot.PointsToSet;










import soot.PrimType;










import soot.Scene;










import soot.SootMethod;










import soot.Type;










import soot.Unit;










import soot.UnknownType;










import soot.Value;










import soot.jimple.ArrayRef;










import soot.jimple.Constant;










import soot.jimple.DefinitionStmt;










import soot.jimple.InstanceFieldRef;










import soot.jimple.InvokeExpr;










import soot.jimple.Jimple;










import soot.jimple.NewExpr;










import soot.jimple.Ref;










import soot.jimple.ReturnStmt;










import soot.jimple.Stmt;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;










import soot.toolkits.scalar.Pair;





















@SuppressWarnings("serial")










public class IFDSPossibleTypes extends DefaultJimpleIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {










 super(icfg);










 }





















 public FlowFunctions<Unit, Pair<Value,Type>, SootMethod> createFlowFunctionsFactory() {










 return new FlowFunctions<Unit,Pair<Value,Type>,SootMethod>() {





















 public FlowFunction<Pair<Value,Type>> getNormalFlowFunction(Unit src, Unit dest) {










 if(src instanceof DefinitionStmt) {










 DefinitionStmt defnStmt = (DefinitionStmt) src;










 if(defnStmt.containsInvokeExpr()) return Identity.v();










 final Value right = defnStmt.getRightOp();










 final Value left = defnStmt.getLeftOp();










 //won't track primitive-typed variables










 if(right.getType() instanceof PrimType) return Identity.v();










 










 if(right instanceof Constant || right instanceof NewExpr) {










 return new FlowFunction<Pair<Value,Type>>() {










 public Set<Pair<Value, Type>> computeTargets(Pair<Value, Type> source) {










 if(source==new Pair<Value, Type>(Jimple.v().newLocal("<dummy>", UnknownType.v()), UnknownType.v())) {










 Set<Pair<Value, Type>> res = new LinkedHashSet<Pair<Value,Type>>();










 res.add(new Pair<Value,Type>(left,right.getType()));










 res.add(new Pair<Value, Type>(Jimple.v().newLocal("<dummy>", UnknownType.v()), UnknownType.v()));










 return res;










 } else if(source.getO1() instanceof Local && source.getO1().equivTo(left)) {










 //strong update for local variables










 return Collections.emptySet();










 } else {










 return Collections.singleton(source);










 }










 }










 };










 } else if(right instanceof Ref || right instanceof Local) {










 return new FlowFunction<Pair<Value,Type>>() {










 public Set<Pair<Value, Type>> computeTargets(final Pair<Value, Type> source) {










 Value value = source.getO1();










 if(source.getO1() instanceof Local && source.getO1().equivTo(left)) {










 //strong update for local variables










 return Collections.emptySet();










 } else if(maybeSameLocation(value,right)) {










 return new LinkedHashSet<Pair<Value,Type>>() {{










 add(new Pair<Value,Type>(left,source.getO2())); 










 add(source); 










 }};










 } else {










 return Collections.singleton(source);










 }










 }





















 private boolean maybeSameLocation(Value v1, Value v2) {










 if(!(v1 instanceof InstanceFieldRef && v2 instanceof InstanceFieldRef) &&










 !(v1 instanceof ArrayRef && v2 instanceof ArrayRef)) {










 return v1.equivTo(v2);










 }










 if(v1 instanceof InstanceFieldRef && v2 instanceof InstanceFieldRef) {










 InstanceFieldRef ifr1 = (InstanceFieldRef) v1;










 InstanceFieldRef ifr2 = (InstanceFieldRef) v2;










 if(!ifr1.getField().getName().equals(ifr2.getField().getName())) return false;










 










 Local base1 = (Local) ifr1.getBase();










 Local base2 = (Local) ifr2.getBase();










 PointsToAnalysis pta = Scene.v().getPointsToAnalysis();










 PointsToSet pts1 = pta.reachingObjects(base1);










 PointsToSet pts2 = pta.reachingObjects(base2); 










 return pts1.hasNonEmptyIntersection(pts2);










 } else { //v1 instanceof ArrayRef && v2 instanceof ArrayRef










 ArrayRef ar1 = (ArrayRef) v1;










 ArrayRef ar2 = (ArrayRef) v2;





















 Local base1 = (Local) ar1.getBase();










 Local base2 = (Local) ar2.getBase();










 PointsToAnalysis pta = Scene.v().getPointsToAnalysis();










 PointsToSet pts1 = pta.reachingObjects(base1);










 PointsToSet pts2 = pta.reachingObjects(base2); 










 return pts1.hasNonEmptyIntersection(pts2);










 }










 }










 };










 } 










 }










 return Identity.v();










 }





















 public FlowFunction<Pair<Value,Type>> getCallFlowFunction(final Unit src, final SootMethod dest) {










 Stmt stmt = (Stmt) src;










 InvokeExpr ie = stmt.getInvokeExpr();










 final List<Value> callArgs = ie.getArgs();










 final List<Local> paramLocals = new ArrayList<Local>();










 for(int i=0;i<dest.getParameterCount();i++) {










 paramLocals.add(dest.getActiveBody().getParameterLocal(i));










 } 










 return new FlowFunction<Pair<Value,Type>>() {










 public Set<Pair<Value,Type>> computeTargets(Pair<Value,Type> source) {










 Value value = source.getO1();










 int argIndex = callArgs.indexOf(value);










 if(argIndex>-1) {










 return Collections.singleton(new Pair<Value,Type>(paramLocals.get(argIndex), source.getO2()));










 }










 return Collections.emptySet();










 }










 };










 }





















 public FlowFunction<Pair<Value,Type>> getReturnFlowFunction(Unit callSite, SootMethod callee, Unit exitStmt, Unit retSite) {










 if (exitStmt instanceof ReturnStmt) { 










 ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 Value op = returnStmt.getOp();










 if(op instanceof Local) {










 if(callSite instanceof DefinitionStmt) {










 DefinitionStmt defnStmt = (DefinitionStmt) callSite;










 Value leftOp = defnStmt.getLeftOp();










 if(leftOp instanceof Local) {










 final Local tgtLocal = (Local) leftOp;










 final Local retLocal = (Local) op;










 return new FlowFunction<Pair<Value,Type>>() {





















 public Set<Pair<Value,Type>> computeTargets(Pair<Value,Type> source) {










 if(source==retLocal)










 return Collections.singleton(new Pair<Value,Type>(tgtLocal, source.getO2()));










 return Collections.emptySet();










 }










 










 };










 }










 }










 }










 }










 return KillAll.v();










 }





















 public FlowFunction<Pair<Value,Type>> getCallToReturnFlowFunction(Unit call, Unit returnSite) {










 return Identity.v();










 }










 };










 }





















 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }





















 public Pair<Value,Type> createZeroValue() {










 return new Pair<Value, Type>(Jimple.v().newLocal("<dummy>", UnknownType.v()), UnknownType.v());










 }










}




\ No newline at end of file














src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSReachingDefinitions.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.KillAll;





















import soot.EquivalentValue;










import soot.Local;










import soot.NullType;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.Value;










import soot.jimple.DefinitionStmt;










import soot.jimple.InvokeExpr;










import soot.jimple.Jimple;










import soot.jimple.ReturnStmt;










import soot.jimple.ReturnVoidStmt;










import soot.jimple.Stmt;










import soot.jimple.internal.JimpleLocal;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;










import soot.toolkits.scalar.Pair;





















public class IFDSReachingDefinitions extends DefaultJimpleIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {










 public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {










 super(icfg);










 }










 










 @Override










 public FlowFunctions<Unit, Pair<Value, Set<DefinitionStmt>>, SootMethod> createFlowFunctionsFactory() {










 return new FlowFunctions<Unit, Pair<Value, Set<DefinitionStmt>>, SootMethod>() {





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getNormalFlowFunction(final Unit curr, Unit succ) {










 if (curr instanceof DefinitionStmt) {










 final DefinitionStmt assignment = (DefinitionStmt) curr;





















 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {










 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if (source != zeroValue()) {










 if (source.getO1().equivTo(assignment.getLeftOp())) {










 return Collections.emptySet();










 }










 return Collections.singleton(source);










 } else {










 LinkedHashSet<Pair<Value, Set<DefinitionStmt>>> res = new LinkedHashSet<Pair<Value, Set<DefinitionStmt>>>();










 res.add(new Pair<Value, Set<DefinitionStmt>>(assignment.getLeftOp(),










 Collections.<DefinitionStmt> singleton(assignment)));










 return res;










 }










 }










 };










 }





















 return Identity.v();










 }





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getCallFlowFunction(Unit callStmt,










 final SootMethod destinationMethod) {










 Stmt stmt = (Stmt) callStmt;










 InvokeExpr invokeExpr = stmt.getInvokeExpr();










 final List<Value> args = invokeExpr.getArgs();





















 final List<Local> localArguments = new ArrayList<Local>(args.size());










 for (Value value : args) {










 if (value instanceof Local)










 localArguments.add((Local) value);










 else










 localArguments.add(null);










 }





















 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {





















 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if(localArguments.contains(source.getO1())) {










 int paramIndex = args.indexOf(source.getO1());










 Pair<Value, Set<DefinitionStmt>> pair = new Pair<Value, Set<DefinitionStmt>>(










 new EquivalentValue(Jimple.v().newParameterRef(destinationMethod.getParameterType(paramIndex), paramIndex)),










 source.getO2());










 return Collections.singleton(pair);










 }





















 return Collections.emptySet();










 }










 };










 }





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getReturnFlowFunction(final Unit callSite,










 SootMethod calleeMethod, final Unit exitStmt, Unit returnSite) {










 if (!(callSite instanceof DefinitionStmt))










 return KillAll.v();





















 if (exitStmt instanceof ReturnVoidStmt)










 return KillAll.v();





















 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {





















 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if(exitStmt instanceof ReturnStmt) {










 ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 if (returnStmt.getOp().equivTo(source.getO1())) {










 DefinitionStmt definitionStmt = (DefinitionStmt) callSite;










 Pair<Value, Set<DefinitionStmt>> pair = new Pair<Value, Set<DefinitionStmt>>(










 definitionStmt.getLeftOp(), source.getO2());










 return Collections.singleton(pair);










 }










 }










 return Collections.emptySet();










 }










 };










 }





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getCallToReturnFlowFunction(Unit callSite, Unit returnSite) {










 if (!(callSite instanceof DefinitionStmt))










 return Identity.v();










 










 final DefinitionStmt definitionStmt = (DefinitionStmt) callSite;










 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {





















 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if(source.getO1().equivTo(definitionStmt.getLeftOp())) {










 return Collections.emptySet();










 } else {










 return Collections.singleton(source);










 }










 }










 };










 }










 };










 }





















 @Override










 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }





















 public Pair<Value, Set<DefinitionStmt>> createZeroValue() {










 return new Pair<Value, Set<DefinitionStmt>>(new JimpleLocal("<<zero>>", NullType.v()), Collections.<DefinitionStmt> emptySet());










 }





















}














src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSUninitializedVariables.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.Kill;










import de.bodden.ide.flowfunc.KillAll;





















import soot.Local;










import soot.NullType;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.Value;










import soot.ValueBox;










import soot.jimple.DefinitionStmt;










import soot.jimple.InvokeExpr;










import soot.jimple.ReturnStmt;










import soot.jimple.Stmt;










import soot.jimple.ThrowStmt;










import soot.jimple.internal.JimpleLocal;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;










import soot.util.Chain;





















public class IFDSUninitializedVariables extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {










 super(icfg); 










 }





















 @Override










 public FlowFunctions<Unit, Local, SootMethod> createFlowFunctionsFactory() {










 return new FlowFunctions<Unit, Local, SootMethod>() {





















 @Override










 public FlowFunction<Local> getNormalFlowFunction(Unit curr, Unit succ) {










 final SootMethod m = interproceduralCFG().getMethodOf(curr);










 if(Scene.v().getEntryPoints().contains(m) && interproceduralCFG().isStartPoint(curr)) {










 return new FlowFunction<Local>() {










 










 @Override










 public Set<Local> computeTargets(Local source) {










 if (source == zeroValue()) {










 Set<Local> res = new LinkedHashSet<Local>();










 res.addAll(m.getActiveBody().getLocals());










 for(int i=0;i<m.getParameterCount();i++) 










 res.remove(m.getActiveBody().getParameterLocal(i));










 return res;










 }










 return Collections.emptySet();










 }










 };










 }










 










 if (curr instanceof DefinitionStmt) {










 final DefinitionStmt definition = (DefinitionStmt) curr;










 final Value leftOp = definition.getLeftOp();










 if(leftOp instanceof Local) {










 final Local leftOpLocal = (Local) leftOp;










 return new FlowFunction<Local>() {





















 @Override










 public Set<Local> computeTargets(final Local source) {










 List<ValueBox> useBoxes = definition.getUseBoxes();










 for (ValueBox valueBox : useBoxes) {










 if (valueBox.getValue().equivTo(source)) {










 LinkedHashSet<Local> res = new LinkedHashSet<Local>();










 res.add(source);










 res.add(leftOpLocal); 










 return res;










 }










 }





















 if (leftOp.equivTo(source))










 return Collections.emptySet();





















 return Collections.singleton(source);










 }





















 };










 }










 }





















 return Identity.v();










 }





















 @Override










 public FlowFunction<Local> getCallFlowFunction(Unit callStmt, final SootMethod destinationMethod) {










 Stmt stmt = (Stmt) callStmt;










 InvokeExpr invokeExpr = stmt.getInvokeExpr();










 final List<Value> args = invokeExpr.getArgs();





















 final List<Local> localArguments = new ArrayList<Local>();










 for (Value value : args)










 if (value instanceof Local)










 localArguments.add((Local) value);





















 return new FlowFunction<Local>() {





















 @Override










 public Set<Local> computeTargets(final Local source) {










 for (Local localArgument : localArguments) {










 if (source.equivTo(localArgument)) {










 return Collections.<Local>singleton(destinationMethod.getActiveBody().getParameterLocal(args.indexOf(localArgument)));










 }










 }





















 if (source == zeroValue()) {










 //gen all locals that are not parameter locals 










 Chain<Local> locals = destinationMethod.getActiveBody().getLocals();










 LinkedHashSet<Local> uninitializedLocals = new LinkedHashSet<Local>(locals);










 for(int i=0;i<destinationMethod.getParameterCount();i++) { 










 uninitializedLocals.remove(destinationMethod.getActiveBody().getParameterLocal(i));










 }










 return uninitializedLocals;










 }





















 return Collections.emptySet();










 }





















 };










 }





















 @Override










 public FlowFunction<Local> getReturnFlowFunction(final Unit callSite, SootMethod calleeMethod,










 final Unit exitStmt, Unit returnSite) {










 if (callSite instanceof DefinitionStmt) {










 final DefinitionStmt definition = (DefinitionStmt) callSite;










 if(definition.getLeftOp() instanceof Local) {










 final Local leftOpLocal = (Local) definition.getLeftOp(); 










 if (exitStmt instanceof ReturnStmt) {










 final ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 return new FlowFunction<Local>() {










 










 @Override










 public Set<Local> computeTargets(Local source) {










 if (returnStmt.getOp().equivTo(source))










 return Collections.singleton(leftOpLocal);










 return Collections.emptySet();










 }










 










 };










 } else if (exitStmt instanceof ThrowStmt) {










 //if we throw an exception, LHS of call is undefined










 return new FlowFunction<Local>() {










 










 @Override










 public Set<Local> computeTargets(final Local source) {










 if (source == zeroValue())










 return Collections.singleton(leftOpLocal);










 else










 return Collections.emptySet();










 }










 










 };










 }










 }










 }










 










 return KillAll.v();










 }





















 @Override










 public FlowFunction<Local> getCallToReturnFlowFunction(Unit callSite, Unit returnSite) {










 if (callSite instanceof DefinitionStmt) {










 DefinitionStmt definition = (DefinitionStmt) callSite;










 if(definition.getLeftOp() instanceof Local) {










 final Local leftOpLocal = (Local) definition.getLeftOp(); 










 return new Kill<Local>(leftOpLocal);










 }










 }










 return Identity.v();










 }










 };










 }










 @Override










 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }





















 @Override










 public Local createZeroValue() {










 return new JimpleLocal("<<zero>>", NullType.v());










 }





















}














src-soot/soot/jimple/toolkits/ide/icfg/BackwardsInterproceduralCFG.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.icfg;





















import soot.Body;










import soot.Unit;










import soot.toolkits.graph.DirectedGraph;










import soot.toolkits.graph.InverseGraph;





















/**










 * Same as {@link JimpleBasedInterproceduralCFG} but based on inverted unit graphs.










 * This should be used for backward analyses.










 */










public class BackwardsInterproceduralCFG extends JimpleBasedInterproceduralCFG {





















 @Override










 protected DirectedGraph<Unit> makeGraph(Body body) {










 return new InverseGraph<Unit>(super.makeGraph(body));










 }










 










}














src-soot/soot/jimple/toolkits/ide/icfg/JimpleBasedInterproceduralCFG.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.icfg;





















import java.util.ArrayList;










import java.util.HashMap;










import java.util.Iterator;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Map;










import java.util.Set;





















import soot.Body;










import soot.MethodOrMethodContext;










import soot.PatchingChain;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.UnitBox;










import soot.jimple.Stmt;










import soot.jimple.toolkits.callgraph.CallGraph;










import soot.jimple.toolkits.callgraph.Edge;










import soot.jimple.toolkits.callgraph.EdgePredicate;










import soot.jimple.toolkits.callgraph.Filter;










import soot.jimple.toolkits.callgraph.ReachableMethods;










import soot.toolkits.exceptions.UnitThrowAnalysis;










import soot.toolkits.graph.DirectedGraph;










import soot.toolkits.graph.ExceptionalUnitGraph;





















import com.google.common.cache.CacheLoader;










import com.google.common.cache.LoadingCache;





















import de.bodden.ide.DontSynchronize;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.SynchronizedBy;










import de.bodden.ide.ThreadSafe;










import de.bodden.ide.solver.IDESolver;





















/**










 * Default implementation for the {@link InterproceduralCFG} interface.










 * Includes all statements reachable from {@link Scene#getEntryPoints()} through










 * explicit call statements or through calls to {@link Thread#start()}.










 * 










 * This class is designed to be thread safe, and subclasses of this class must be designed










 * in a thread-safe way, too.










 */










@ThreadSafe










public class JimpleBasedInterproceduralCFG implements InterproceduralCFG<Unit,SootMethod> {










 










 //retains only callers that are explicit call sites or Thread.start()










 protected static class EdgeFilter extends Filter { 










 protected EdgeFilter() {










 super(new EdgePredicate() {










 public boolean want(Edge e) { 










 return e.kind().isExplicit() || e.kind().isThread();










 }










 });










 }










 }










 










 @DontSynchronize("readonly")










 protected final CallGraph cg;










 










 @DontSynchronize("written by single thread; read afterwards")










 protected final Map<Unit,Body> unitToOwner = new HashMap<Unit,Body>(); 










 










 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<Body,DirectedGraph<Unit>> bodyToUnitGraph =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<Body,DirectedGraph<Unit>>() {










 public DirectedGraph<Unit> load(Body body) throws Exception {










 return makeGraph(body);










 }










 });










 










 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<Unit,Set<SootMethod>> unitToCallees =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<Unit,Set<SootMethod>>() {










 public Set<SootMethod> load(Unit u) throws Exception {










 Set<SootMethod> res = new LinkedHashSet<SootMethod>();










 //only retain callers that are explicit call sites or Thread.start()










 Iterator<Edge> edgeIter = new EdgeFilter().wrap(cg.edgesOutOf(u)); 










 while(edgeIter.hasNext()) {










 Edge edge = edgeIter.next();










 if(edge.getTgt()==null) {










 System.err.println();










 }










 SootMethod m = edge.getTgt().method();










 if(m.hasActiveBody())










 res.add(m);










 }










 return res; 










 }










 });





















 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<SootMethod,Set<Unit>> methodToCallers =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<SootMethod,Set<Unit>>() {










 public Set<Unit> load(SootMethod m) throws Exception {










 Set<Unit> res = new LinkedHashSet<Unit>(); 










 //only retain callers that are explicit call sites or Thread.start()










 Iterator<Edge> edgeIter = new EdgeFilter().wrap(cg.edgesInto(m)); 










 while(edgeIter.hasNext()) {










 Edge edge = edgeIter.next();










 res.add(edge.srcUnit()); 










 }










 return res;










 }










 });





















 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<SootMethod,Set<Unit>> methodToCallsFromWithin =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<SootMethod,Set<Unit>>() {










 public Set<Unit> load(SootMethod m) throws Exception {










 Set<Unit> res = new LinkedHashSet<Unit>();










 //only retain calls that are explicit call sites or Thread.start()










 Iterator<Edge> edgeIter = new EdgeFilter().wrap(cg.edgesOutOf(m));










 while(edgeIter.hasNext()) {










 Edge edge = edgeIter.next();










 res.add(edge.srcUnit()); 










 }










 return res;










 }










 });





















 










 public JimpleBasedInterproceduralCFG() {










 cg = Scene.v().getCallGraph();










 










 List<MethodOrMethodContext> eps = new ArrayList<MethodOrMethodContext>();










 eps.addAll(Scene.v().getEntryPoints());










 ReachableMethods reachableMethods = new ReachableMethods(cg, eps.iterator(), new EdgeFilter());










 reachableMethods.update();










 










 for(Iterator<MethodOrMethodContext> iter = reachableMethods.listener(); iter.hasNext(); ) {










 SootMethod m = iter.next().method();










 if(m.hasActiveBody()) {










 Body b = m.getActiveBody();










 PatchingChain<Unit> units = b.getUnits();










 for (Unit unit : units) {










 unitToOwner.put(unit, b);










 }










 }










 }










 }





















 @Override










 public SootMethod getMethodOf(Unit u) {










 return unitToOwner.get(u).getMethod();










 }





















 @Override










 public List<Unit> getSuccsOf(Unit u) {










 Body body = unitToOwner.get(u);










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body);










 return unitGraph.getSuccsOf(u);










 }





















 private DirectedGraph<Unit> getOrCreateUnitGraph(Body body) {










 return bodyToUnitGraph.getUnchecked(body);










 }





















 protected synchronized DirectedGraph<Unit> makeGraph(Body body) {










 return new ExceptionalUnitGraph(body, UnitThrowAnalysis.v() ,true);










 }





















 @Override










 public Set<SootMethod> getCalleesOfCallAt(Unit u) {










 return unitToCallees.getUnchecked(u);










 }





















 @Override










 public List<Unit> getReturnSitesOfCallAt(Unit u) {










 return getSuccsOf(u);










 }





















 @Override










 public boolean isCallStmt(Unit u) {










 return ((Stmt)u).containsInvokeExpr();










 }





















 @Override










 public boolean isExitStmt(Unit u) {










 Body body = unitToOwner.get(u);










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body);










 return unitGraph.getTails().contains(u);










 }





















 @Override










 public Set<Unit> getCallersOf(SootMethod m) {










 return methodToCallers.getUnchecked(m);










 }










 










 @Override










 public Set<Unit> getCallsFromWithin(SootMethod m) {










 return methodToCallsFromWithin.getUnchecked(m); 










 }





















 @Override










 public Set<Unit> getStartPointsOf(SootMethod m) {










 if(m.hasActiveBody()) {










 Body body = m.getActiveBody();










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body);










 return new LinkedHashSet<Unit>(unitGraph.getHeads());










 }










 return null;










 }





















 @Override










 public boolean isStartPoint(Unit u) {










 Body body = unitToOwner.get(u);










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body); 










 return unitGraph.getHeads().contains(u);










 }





















 @Override










 //TODO do we need to replace call by return for backwards analysis?










 public Set<Unit> allNonCallStartNodes() {










 Set<Unit> res = new LinkedHashSet<Unit>(unitToOwner.keySet());










 for (Iterator<Unit> iter = res.iterator(); iter.hasNext();) {










 Unit u = iter.next();










 if(isStartPoint(u) || isCallStmt(u)) iter.remove();










 }










 return res;










 }





















 @Override










 public boolean isFallThroughSuccessor(Unit u, Unit succ) {










 assert getSuccsOf(u).contains(succ);










 if(!u.fallsThrough()) return false;










 Body body = unitToOwner.get(u);










 return body.getUnits().getSuccOf(u) == succ;










 }





















 @Override










 public boolean isBranchTarget(Unit u, Unit succ) {










 assert getSuccsOf(u).contains(succ);










 if(!u.branches()) return false;










 for (UnitBox ub : succ.getUnitBoxes()) {










 if(ub.getUnit()==succ) return true;










 }










 return false;










 }










}














src-generic/de/bodden/ide/DontSynchronize.java

→

src/de/bodden/ide/DontSynchronize.java








View file @ ae1aae21





File moved













src-generic/de/bodden/ide/EdgeFunction.java

→

src/de/bodden/ide/EdgeFunction.java








View file @ ae1aae21





File moved













src-generic/de/bodden/ide/EdgeFunctionCache.java

→

src/de/bodden/ide/EdgeFunctionCache.java








View file @ ae1aae21





File moved













src-generic/de/bodden/ide/EdgeFunctions.java

→

src/de/bodden/ide/EdgeFunctions.java








View file @ ae1aae21





File moved













src-generic/de/bodden/ide/FlowFunction.java

→

src/de/bodden/ide/FlowFunction.java








View file @ ae1aae21





File moved













src-generic/de/bodden/ide/FlowFunctionCache.java

→

src/de/bodden/ide/FlowFunctionCache.java








View file @ ae1aae21





File moved








Prev


1


2


3


Next













.classpath








View file @ ae1aae21













<?xml version="1.0" encoding="UTF-8"?>










<classpath>










 <classpathentry combineaccessrules="false" exported="true" kind="src" path="/soot"/>










 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>










 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src-generic"/>










 <classpathentry kind="src" path="src-soot"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry exported="true" kind="lib" path="guava-13.0.jar"/>










 <classpathentry kind="lib" path="soot-trunk.jar" sourcepath="/soot"/>










 <classpathentry kind="output" path="bin"/>










</classpath>












.classpath








View file @ ae1aae21








.classpath










View file @ ae1aae21


ae1aae21










<?xml version="1.0" encoding="UTF-8"?>










<classpath>










 <classpathentry combineaccessrules="false" exported="true" kind="src" path="/soot"/>










 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>










 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src-generic"/>










 <classpathentry kind="src" path="src-soot"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry exported="true" kind="lib" path="guava-13.0.jar"/>










 <classpathentry kind="lib" path="soot-trunk.jar" sourcepath="/soot"/>










 <classpathentry kind="output" path="bin"/>










</classpath>













<?xml version="1.0" encoding="UTF-8"?>










<classpath>










 <classpathentry combineaccessrules="false" exported="true" kind="src" path="/soot"/>










 <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>










 <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>










 <classpathentry kind="src" path="src-generic"/>










 <classpathentry kind="src" path="src-soot"/>










 <classpathentry kind="src" path="src"/>










 <classpathentry exported="true" kind="lib" path="guava-13.0.jar"/>










 <classpathentry kind="lib" path="soot-trunk.jar" sourcepath="/soot"/>










 <classpathentry kind="output" path="bin"/>










</classpath>


<?xml version="1.0" encoding="UTF-8"?><?xml version="1.0" encoding="UTF-8"?><classpath><classpath> <classpathentry combineaccessrules="false" exported="true" kind="src" path="/soot"/><classpathentrycombineaccessrules="false"exported="true"kind="src"path="/soot"/> <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/><classpathentrykind="con"path="org.eclipse.jdt.launching.JRE_CONTAINER"/> <classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/><classpathentrykind="con"path="org.eclipse.pde.core.requiredPlugins"/> <classpathentry kind="src" path="src-generic"/><classpathentrykind="src"path="src-generic"/> <classpathentry kind="src" path="src-soot"/><classpathentrykind="src"path="src-soot"/> <classpathentry kind="src" path="src"/><classpathentrykind="src"path="src"/> <classpathentry exported="true" kind="lib" path="guava-13.0.jar"/><classpathentryexported="true"kind="lib"path="guava-13.0.jar"/> <classpathentry kind="lib" path="soot-trunk.jar" sourcepath="/soot"/><classpathentrykind="lib"path="soot-trunk.jar"sourcepath="/soot"/> <classpathentry kind="output" path="bin"/><classpathentrykind="output"path="bin"/></classpath></classpath>








META-INF/MANIFEST.MF








View file @ ae1aae21






......@@ -22,119 +22,4 @@ Export-Package: com.google.common.annotations,









 de.bodden.ide.edgefunc,










 de.bodden.ide.flowfunc,










 de.bodden.ide.solver,










 de.bodden.ide.template,










 soot,










 soot.JastAddJ,










 soot.baf,










 soot.baf.internal,










 soot.baf.toolkits.base,










 soot.coffi,










 soot.dava,










 soot.dava.internal.AST,










 soot.dava.internal.SET,










 soot.dava.internal.asg,










 soot.dava.internal.javaRep,










 soot.dava.toolkits.base.AST,










 soot.dava.toolkits.base.AST.analysis,










 soot.dava.toolkits.base.AST.interProcedural,










 soot.dava.toolkits.base.AST.structuredAnalysis,










 soot.dava.toolkits.base.AST.transformations,










 soot.dava.toolkits.base.AST.traversals,










 soot.dava.toolkits.base.DavaMonitor,










 soot.dava.toolkits.base.finders,










 soot.dava.toolkits.base.misc,










 soot.dava.toolkits.base.renamer,










 soot.grimp,










 soot.grimp.internal,










 soot.grimp.toolkits.base,










 soot.javaToJimple,










 soot.javaToJimple.jj,










 soot.javaToJimple.jj.ast,










 soot.javaToJimple.jj.types,










 soot.javaToJimple.toolkits,










 soot.jbco,










 soot.jbco.bafTransformations,










 soot.jbco.gui,










 soot.jbco.jimpleTransformations,










 soot.jbco.util,










 soot.jimple,










 soot.jimple.internal,










 soot.jimple.paddle,










 soot.jimple.parser,










 soot.jimple.parser.analysis,










 soot.jimple.parser.lexer,










 soot.jimple.parser.node,










 soot.jimple.parser.parser,










 soot.jimple.spark,










 soot.jimple.spark.builder,










 soot.jimple.spark.fieldrw,










 soot.jimple.spark.geom,










 soot.jimple.spark.geom.geomE,










 soot.jimple.spark.geom.geomPA,










 soot.jimple.spark.geom.heapinsE,










 soot.jimple.spark.geom.ptinsE,










 soot.jimple.spark.internal,










 soot.jimple.spark.ondemand,










 soot.jimple.spark.ondemand.genericutil,










 soot.jimple.spark.ondemand.pautil,










 soot.jimple.spark.pag,










 soot.jimple.spark.sets,










 soot.jimple.spark.solver,










 soot.jimple.toolkits.annotation,










 soot.jimple.toolkits.annotation.arraycheck,










 soot.jimple.toolkits.annotation.callgraph,










 soot.jimple.toolkits.annotation.defs,










 soot.jimple.toolkits.annotation.fields,










 soot.jimple.toolkits.annotation.j5anno,










 soot.jimple.toolkits.annotation.liveness,










 soot.jimple.toolkits.annotation.logic,










 soot.jimple.toolkits.annotation.methods,










 soot.jimple.toolkits.annotation.nullcheck,










 soot.jimple.toolkits.annotation.parity,










 soot.jimple.toolkits.annotation.profiling,










 soot.jimple.toolkits.annotation.purity,










 soot.jimple.toolkits.annotation.qualifiers,










 soot.jimple.toolkits.annotation.tags,










 soot.jimple.toolkits.base,










 soot.jimple.toolkits.callgraph,










 soot.jimple.toolkits.graph,










 soot.jimple.toolkits.infoflow,










 soot.jimple.toolkits.invoke,










 soot.jimple.toolkits.pointer,










 soot.jimple.toolkits.pointer.nativemethods,










 soot.jimple.toolkits.pointer.representations,










 soot.jimple.toolkits.pointer.util,










 soot.jimple.toolkits.reflection,










 soot.jimple.toolkits.scalar,










 soot.jimple.toolkits.scalar.pre,










 soot.jimple.toolkits.thread,










 soot.jimple.toolkits.thread.mhp,










 soot.jimple.toolkits.thread.mhp.findobject,










 soot.jimple.toolkits.thread.mhp.pegcallgraph,










 soot.jimple.toolkits.thread.mhp.stmt,










 soot.jimple.toolkits.thread.synchronization,










 soot.jimple.toolkits.typing,










 soot.jimple.toolkits.typing.fast,










 soot.jimple.toolkits.typing.integer,










 soot.options,










 soot.rtlib.tamiflex,










 soot.shimple,










 soot.shimple.internal,










 soot.shimple.toolkits.graph,










 soot.shimple.toolkits.scalar,










 soot.sootify,










 soot.tagkit,










 soot.toolkits.astmetrics,










 soot.toolkits.astmetrics.DataHandlingApplication,










 soot.toolkits.exceptions,










 soot.toolkits.graph,










 soot.toolkits.graph.interaction,










 soot.toolkits.graph.pdg,










 soot.toolkits.scalar,










 soot.tools,










 soot.util,










 soot.util.cfgcmd,










 soot.util.dot,










 soot.util.queue,










 soot.xml,










 soot.jimple.toolkits.ide.exampleproblems









 de.bodden.ide.template












META-INF/MANIFEST.MF








View file @ ae1aae21








META-INF/MANIFEST.MF










View file @ ae1aae21


ae1aae21



......@@ -22,119 +22,4 @@ Export-Package: com.google.common.annotations,









 de.bodden.ide.edgefunc,










 de.bodden.ide.flowfunc,










 de.bodden.ide.solver,










 de.bodden.ide.template,










 soot,










 soot.JastAddJ,










 soot.baf,










 soot.baf.internal,










 soot.baf.toolkits.base,










 soot.coffi,










 soot.dava,










 soot.dava.internal.AST,










 soot.dava.internal.SET,










 soot.dava.internal.asg,










 soot.dava.internal.javaRep,










 soot.dava.toolkits.base.AST,










 soot.dava.toolkits.base.AST.analysis,










 soot.dava.toolkits.base.AST.interProcedural,










 soot.dava.toolkits.base.AST.structuredAnalysis,










 soot.dava.toolkits.base.AST.transformations,










 soot.dava.toolkits.base.AST.traversals,










 soot.dava.toolkits.base.DavaMonitor,










 soot.dava.toolkits.base.finders,










 soot.dava.toolkits.base.misc,










 soot.dava.toolkits.base.renamer,










 soot.grimp,










 soot.grimp.internal,










 soot.grimp.toolkits.base,










 soot.javaToJimple,










 soot.javaToJimple.jj,










 soot.javaToJimple.jj.ast,










 soot.javaToJimple.jj.types,










 soot.javaToJimple.toolkits,










 soot.jbco,










 soot.jbco.bafTransformations,










 soot.jbco.gui,










 soot.jbco.jimpleTransformations,










 soot.jbco.util,










 soot.jimple,










 soot.jimple.internal,










 soot.jimple.paddle,










 soot.jimple.parser,










 soot.jimple.parser.analysis,










 soot.jimple.parser.lexer,










 soot.jimple.parser.node,










 soot.jimple.parser.parser,










 soot.jimple.spark,










 soot.jimple.spark.builder,










 soot.jimple.spark.fieldrw,










 soot.jimple.spark.geom,










 soot.jimple.spark.geom.geomE,










 soot.jimple.spark.geom.geomPA,










 soot.jimple.spark.geom.heapinsE,










 soot.jimple.spark.geom.ptinsE,










 soot.jimple.spark.internal,










 soot.jimple.spark.ondemand,










 soot.jimple.spark.ondemand.genericutil,










 soot.jimple.spark.ondemand.pautil,










 soot.jimple.spark.pag,










 soot.jimple.spark.sets,










 soot.jimple.spark.solver,










 soot.jimple.toolkits.annotation,










 soot.jimple.toolkits.annotation.arraycheck,










 soot.jimple.toolkits.annotation.callgraph,










 soot.jimple.toolkits.annotation.defs,










 soot.jimple.toolkits.annotation.fields,










 soot.jimple.toolkits.annotation.j5anno,










 soot.jimple.toolkits.annotation.liveness,










 soot.jimple.toolkits.annotation.logic,










 soot.jimple.toolkits.annotation.methods,










 soot.jimple.toolkits.annotation.nullcheck,










 soot.jimple.toolkits.annotation.parity,










 soot.jimple.toolkits.annotation.profiling,










 soot.jimple.toolkits.annotation.purity,










 soot.jimple.toolkits.annotation.qualifiers,










 soot.jimple.toolkits.annotation.tags,










 soot.jimple.toolkits.base,










 soot.jimple.toolkits.callgraph,










 soot.jimple.toolkits.graph,










 soot.jimple.toolkits.infoflow,










 soot.jimple.toolkits.invoke,










 soot.jimple.toolkits.pointer,










 soot.jimple.toolkits.pointer.nativemethods,










 soot.jimple.toolkits.pointer.representations,










 soot.jimple.toolkits.pointer.util,










 soot.jimple.toolkits.reflection,










 soot.jimple.toolkits.scalar,










 soot.jimple.toolkits.scalar.pre,










 soot.jimple.toolkits.thread,










 soot.jimple.toolkits.thread.mhp,










 soot.jimple.toolkits.thread.mhp.findobject,










 soot.jimple.toolkits.thread.mhp.pegcallgraph,










 soot.jimple.toolkits.thread.mhp.stmt,










 soot.jimple.toolkits.thread.synchronization,










 soot.jimple.toolkits.typing,










 soot.jimple.toolkits.typing.fast,










 soot.jimple.toolkits.typing.integer,










 soot.options,










 soot.rtlib.tamiflex,










 soot.shimple,










 soot.shimple.internal,










 soot.shimple.toolkits.graph,










 soot.shimple.toolkits.scalar,










 soot.sootify,










 soot.tagkit,










 soot.toolkits.astmetrics,










 soot.toolkits.astmetrics.DataHandlingApplication,










 soot.toolkits.exceptions,










 soot.toolkits.graph,










 soot.toolkits.graph.interaction,










 soot.toolkits.graph.pdg,










 soot.toolkits.scalar,










 soot.tools,










 soot.util,










 soot.util.cfgcmd,










 soot.util.dot,










 soot.util.queue,










 soot.xml,










 soot.jimple.toolkits.ide.exampleproblems









 de.bodden.ide.template






......@@ -22,119 +22,4 @@ Export-Package: com.google.common.annotations,









 de.bodden.ide.edgefunc,










 de.bodden.ide.flowfunc,










 de.bodden.ide.solver,










 de.bodden.ide.template,










 soot,










 soot.JastAddJ,










 soot.baf,










 soot.baf.internal,










 soot.baf.toolkits.base,










 soot.coffi,










 soot.dava,










 soot.dava.internal.AST,










 soot.dava.internal.SET,










 soot.dava.internal.asg,










 soot.dava.internal.javaRep,










 soot.dava.toolkits.base.AST,










 soot.dava.toolkits.base.AST.analysis,










 soot.dava.toolkits.base.AST.interProcedural,










 soot.dava.toolkits.base.AST.structuredAnalysis,










 soot.dava.toolkits.base.AST.transformations,










 soot.dava.toolkits.base.AST.traversals,










 soot.dava.toolkits.base.DavaMonitor,










 soot.dava.toolkits.base.finders,










 soot.dava.toolkits.base.misc,










 soot.dava.toolkits.base.renamer,










 soot.grimp,










 soot.grimp.internal,










 soot.grimp.toolkits.base,










 soot.javaToJimple,










 soot.javaToJimple.jj,










 soot.javaToJimple.jj.ast,










 soot.javaToJimple.jj.types,










 soot.javaToJimple.toolkits,










 soot.jbco,










 soot.jbco.bafTransformations,










 soot.jbco.gui,










 soot.jbco.jimpleTransformations,










 soot.jbco.util,










 soot.jimple,










 soot.jimple.internal,










 soot.jimple.paddle,










 soot.jimple.parser,










 soot.jimple.parser.analysis,










 soot.jimple.parser.lexer,










 soot.jimple.parser.node,










 soot.jimple.parser.parser,










 soot.jimple.spark,










 soot.jimple.spark.builder,










 soot.jimple.spark.fieldrw,










 soot.jimple.spark.geom,










 soot.jimple.spark.geom.geomE,










 soot.jimple.spark.geom.geomPA,










 soot.jimple.spark.geom.heapinsE,










 soot.jimple.spark.geom.ptinsE,










 soot.jimple.spark.internal,










 soot.jimple.spark.ondemand,










 soot.jimple.spark.ondemand.genericutil,










 soot.jimple.spark.ondemand.pautil,










 soot.jimple.spark.pag,










 soot.jimple.spark.sets,










 soot.jimple.spark.solver,










 soot.jimple.toolkits.annotation,










 soot.jimple.toolkits.annotation.arraycheck,










 soot.jimple.toolkits.annotation.callgraph,










 soot.jimple.toolkits.annotation.defs,










 soot.jimple.toolkits.annotation.fields,










 soot.jimple.toolkits.annotation.j5anno,










 soot.jimple.toolkits.annotation.liveness,










 soot.jimple.toolkits.annotation.logic,










 soot.jimple.toolkits.annotation.methods,










 soot.jimple.toolkits.annotation.nullcheck,










 soot.jimple.toolkits.annotation.parity,










 soot.jimple.toolkits.annotation.profiling,










 soot.jimple.toolkits.annotation.purity,










 soot.jimple.toolkits.annotation.qualifiers,










 soot.jimple.toolkits.annotation.tags,










 soot.jimple.toolkits.base,










 soot.jimple.toolkits.callgraph,










 soot.jimple.toolkits.graph,










 soot.jimple.toolkits.infoflow,










 soot.jimple.toolkits.invoke,










 soot.jimple.toolkits.pointer,










 soot.jimple.toolkits.pointer.nativemethods,










 soot.jimple.toolkits.pointer.representations,










 soot.jimple.toolkits.pointer.util,










 soot.jimple.toolkits.reflection,










 soot.jimple.toolkits.scalar,










 soot.jimple.toolkits.scalar.pre,










 soot.jimple.toolkits.thread,










 soot.jimple.toolkits.thread.mhp,










 soot.jimple.toolkits.thread.mhp.findobject,










 soot.jimple.toolkits.thread.mhp.pegcallgraph,










 soot.jimple.toolkits.thread.mhp.stmt,










 soot.jimple.toolkits.thread.synchronization,










 soot.jimple.toolkits.typing,










 soot.jimple.toolkits.typing.fast,










 soot.jimple.toolkits.typing.integer,










 soot.options,










 soot.rtlib.tamiflex,










 soot.shimple,










 soot.shimple.internal,










 soot.shimple.toolkits.graph,










 soot.shimple.toolkits.scalar,










 soot.sootify,










 soot.tagkit,










 soot.toolkits.astmetrics,










 soot.toolkits.astmetrics.DataHandlingApplication,










 soot.toolkits.exceptions,










 soot.toolkits.graph,










 soot.toolkits.graph.interaction,










 soot.toolkits.graph.pdg,










 soot.toolkits.scalar,










 soot.tools,










 soot.util,










 soot.util.cfgcmd,










 soot.util.dot,










 soot.util.queue,










 soot.xml,










 soot.jimple.toolkits.ide.exampleproblems









 de.bodden.ide.template


 de.bodden.ide.edgefunc, de.bodden.ide.flowfunc, de.bodden.ide.solver, de.bodden.ide.template, soot, soot.JastAddJ, soot.baf, soot.baf.internal, soot.baf.toolkits.base, soot.coffi, soot.dava, soot.dava.internal.AST, soot.dava.internal.SET, soot.dava.internal.asg, soot.dava.internal.javaRep, soot.dava.toolkits.base.AST, soot.dava.toolkits.base.AST.analysis, soot.dava.toolkits.base.AST.interProcedural, soot.dava.toolkits.base.AST.structuredAnalysis, soot.dava.toolkits.base.AST.transformations, soot.dava.toolkits.base.AST.traversals, soot.dava.toolkits.base.DavaMonitor, soot.dava.toolkits.base.finders, soot.dava.toolkits.base.misc, soot.dava.toolkits.base.renamer, soot.grimp, soot.grimp.internal, soot.grimp.toolkits.base, soot.javaToJimple, soot.javaToJimple.jj, soot.javaToJimple.jj.ast, soot.javaToJimple.jj.types, soot.javaToJimple.toolkits, soot.jbco, soot.jbco.bafTransformations, soot.jbco.gui, soot.jbco.jimpleTransformations, soot.jbco.util, soot.jimple, soot.jimple.internal, soot.jimple.paddle, soot.jimple.parser, soot.jimple.parser.analysis, soot.jimple.parser.lexer, soot.jimple.parser.node, soot.jimple.parser.parser, soot.jimple.spark, soot.jimple.spark.builder, soot.jimple.spark.fieldrw, soot.jimple.spark.geom, soot.jimple.spark.geom.geomE, soot.jimple.spark.geom.geomPA, soot.jimple.spark.geom.heapinsE, soot.jimple.spark.geom.ptinsE, soot.jimple.spark.internal, soot.jimple.spark.ondemand, soot.jimple.spark.ondemand.genericutil, soot.jimple.spark.ondemand.pautil, soot.jimple.spark.pag, soot.jimple.spark.sets, soot.jimple.spark.solver, soot.jimple.toolkits.annotation, soot.jimple.toolkits.annotation.arraycheck, soot.jimple.toolkits.annotation.callgraph, soot.jimple.toolkits.annotation.defs, soot.jimple.toolkits.annotation.fields, soot.jimple.toolkits.annotation.j5anno, soot.jimple.toolkits.annotation.liveness, soot.jimple.toolkits.annotation.logic, soot.jimple.toolkits.annotation.methods, soot.jimple.toolkits.annotation.nullcheck, soot.jimple.toolkits.annotation.parity, soot.jimple.toolkits.annotation.profiling, soot.jimple.toolkits.annotation.purity, soot.jimple.toolkits.annotation.qualifiers, soot.jimple.toolkits.annotation.tags, soot.jimple.toolkits.base, soot.jimple.toolkits.callgraph, soot.jimple.toolkits.graph, soot.jimple.toolkits.infoflow, soot.jimple.toolkits.invoke, soot.jimple.toolkits.pointer, soot.jimple.toolkits.pointer.nativemethods, soot.jimple.toolkits.pointer.representations, soot.jimple.toolkits.pointer.util, soot.jimple.toolkits.reflection, soot.jimple.toolkits.scalar, soot.jimple.toolkits.scalar.pre, soot.jimple.toolkits.thread, soot.jimple.toolkits.thread.mhp, soot.jimple.toolkits.thread.mhp.findobject, soot.jimple.toolkits.thread.mhp.pegcallgraph, soot.jimple.toolkits.thread.mhp.stmt, soot.jimple.toolkits.thread.synchronization, soot.jimple.toolkits.typing, soot.jimple.toolkits.typing.fast, soot.jimple.toolkits.typing.integer, soot.options, soot.rtlib.tamiflex, soot.shimple, soot.shimple.internal, soot.shimple.toolkits.graph, soot.shimple.toolkits.scalar, soot.sootify, soot.tagkit, soot.toolkits.astmetrics, soot.toolkits.astmetrics.DataHandlingApplication, soot.toolkits.exceptions, soot.toolkits.graph, soot.toolkits.graph.interaction, soot.toolkits.graph.pdg, soot.toolkits.scalar, soot.tools, soot.util, soot.util.cfgcmd, soot.util.dot, soot.util.queue, soot.xml, soot.jimple.toolkits.ide.exampleproblems de.bodden.ide.template








build.properties








View file @ ae1aae21













source.soot-ifds.jar = src-generic/










source.soot-ifds.jar = src/










bin.includes = META-INF/,\










 soot-ifds.jar,\










 soot-trunk.jar,\



......












build.properties








View file @ ae1aae21








build.properties










View file @ ae1aae21


ae1aae21










source.soot-ifds.jar = src-generic/










source.soot-ifds.jar = src/










bin.includes = META-INF/,\










 soot-ifds.jar,\










 soot-trunk.jar,\



......













source.soot-ifds.jar = src-generic/










source.soot-ifds.jar = src/










bin.includes = META-INF/,\










 soot-ifds.jar,\










 soot-trunk.jar,\



......


source.soot-ifds.jar = src-generic/source.soot-ifds.jar=src-generic/-genericsource.soot-ifds.jar = src/source.soot-ifds.jar=src/bin.includes = META-INF/,\bin.includes=META-INF/,\ soot-ifds.jar,\soot-ifds.jar,\ soot-trunk.jar,\soot-trunk.jar,\








src-soot/soot/jimple/toolkits/ide/DefaultJimpleIDETabulationProblem.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import soot.SootMethod;










import soot.Unit;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.template.DefaultIDETabulationProblem;





















/**










 *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods.










 */










public abstract class DefaultJimpleIDETabulationProblem<D,V,I extends InterproceduralCFG<Unit,SootMethod>>










 extends DefaultIDETabulationProblem<Unit,D,SootMethod,V,I> {





















 public DefaultJimpleIDETabulationProblem(I icfg) {










 super(icfg);










 }










 










}












src-soot/soot/jimple/toolkits/ide/DefaultJimpleIDETabulationProblem.java

deleted


100644 → 0







View file @ f7c0f2f6








src-soot/soot/jimple/toolkits/ide/DefaultJimpleIDETabulationProblem.java

deleted


100644 → 0









View file @ f7c0f2f6


f7c0f2f6










package soot.jimple.toolkits.ide;





















import soot.SootMethod;










import soot.Unit;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.template.DefaultIDETabulationProblem;





















/**










 *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods.










 */










public abstract class DefaultJimpleIDETabulationProblem<D,V,I extends InterproceduralCFG<Unit,SootMethod>>










 extends DefaultIDETabulationProblem<Unit,D,SootMethod,V,I> {





















 public DefaultJimpleIDETabulationProblem(I icfg) {










 super(icfg);










 }










 










}













package soot.jimple.toolkits.ide;





















import soot.SootMethod;










import soot.Unit;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.template.DefaultIDETabulationProblem;





















/**










 *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods.










 */










public abstract class DefaultJimpleIDETabulationProblem<D,V,I extends InterproceduralCFG<Unit,SootMethod>>










 extends DefaultIDETabulationProblem<Unit,D,SootMethod,V,I> {





















 public DefaultJimpleIDETabulationProblem(I icfg) {










 super(icfg);










 }










 










}


package soot.jimple.toolkits.ide;packagesoot.jimple.toolkits.ide;import soot.SootMethod;importsoot.SootMethod;import soot.Unit;importsoot.Unit;import de.bodden.ide.InterproceduralCFG;importde.bodden.ide.InterproceduralCFG;import de.bodden.ide.template.DefaultIDETabulationProblem;importde.bodden.ide.template.DefaultIDETabulationProblem;/**/** *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods. *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods. */ */public abstract class DefaultJimpleIDETabulationProblem<D,V,I extends InterproceduralCFG<Unit,SootMethod>>publicabstractclassDefaultJimpleIDETabulationProblem<D,V,IextendsInterproceduralCFG<Unit,SootMethod>> extends DefaultIDETabulationProblem<Unit,D,SootMethod,V,I> {extendsDefaultIDETabulationProblem<Unit,D,SootMethod,V,I>{ public DefaultJimpleIDETabulationProblem(I icfg) {publicDefaultJimpleIDETabulationProblem(Iicfg){ super(icfg);super(icfg); }} }}








src-soot/soot/jimple/toolkits/ide/DefaultJimpleIFDSTabulationProblem.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import soot.SootMethod;










import soot.Unit;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.template.DefaultIDETabulationProblem;










import de.bodden.ide.template.DefaultIFDSTabulationProblem;





















/**










 *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods.










 */










public abstract class DefaultJimpleIFDSTabulationProblem<D,I extends InterproceduralCFG<Unit,SootMethod>>










 extends DefaultIFDSTabulationProblem<Unit,D,SootMethod,I> {





















 public DefaultJimpleIFDSTabulationProblem(I icfg) {










 super(icfg);










 }










 










}












src-soot/soot/jimple/toolkits/ide/DefaultJimpleIFDSTabulationProblem.java

deleted


100644 → 0







View file @ f7c0f2f6








src-soot/soot/jimple/toolkits/ide/DefaultJimpleIFDSTabulationProblem.java

deleted


100644 → 0









View file @ f7c0f2f6


f7c0f2f6










package soot.jimple.toolkits.ide;





















import soot.SootMethod;










import soot.Unit;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.template.DefaultIDETabulationProblem;










import de.bodden.ide.template.DefaultIFDSTabulationProblem;





















/**










 *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods.










 */










public abstract class DefaultJimpleIFDSTabulationProblem<D,I extends InterproceduralCFG<Unit,SootMethod>>










 extends DefaultIFDSTabulationProblem<Unit,D,SootMethod,I> {





















 public DefaultJimpleIFDSTabulationProblem(I icfg) {










 super(icfg);










 }










 










}













package soot.jimple.toolkits.ide;





















import soot.SootMethod;










import soot.Unit;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.template.DefaultIDETabulationProblem;










import de.bodden.ide.template.DefaultIFDSTabulationProblem;





















/**










 *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods.










 */










public abstract class DefaultJimpleIFDSTabulationProblem<D,I extends InterproceduralCFG<Unit,SootMethod>>










 extends DefaultIFDSTabulationProblem<Unit,D,SootMethod,I> {





















 public DefaultJimpleIFDSTabulationProblem(I icfg) {










 super(icfg);










 }










 










}


package soot.jimple.toolkits.ide;packagesoot.jimple.toolkits.ide;import soot.SootMethod;importsoot.SootMethod;import soot.Unit;importsoot.Unit;import de.bodden.ide.InterproceduralCFG;importde.bodden.ide.InterproceduralCFG;import de.bodden.ide.template.DefaultIDETabulationProblem;importde.bodden.ide.template.DefaultIDETabulationProblem;import de.bodden.ide.template.DefaultIFDSTabulationProblem;importde.bodden.ide.template.DefaultIFDSTabulationProblem;/**/** *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods. *  A {@link DefaultIDETabulationProblem} with {@link Unit}s as nodes and {@link SootMethod}s as methods. */ */public abstract class DefaultJimpleIFDSTabulationProblem<D,I extends InterproceduralCFG<Unit,SootMethod>>publicabstractclassDefaultJimpleIFDSTabulationProblem<D,IextendsInterproceduralCFG<Unit,SootMethod>> extends DefaultIFDSTabulationProblem<Unit,D,SootMethod,I> {extendsDefaultIFDSTabulationProblem<Unit,D,SootMethod,I>{ public DefaultJimpleIFDSTabulationProblem(I icfg) {publicDefaultJimpleIFDSTabulationProblem(Iicfg){ super(icfg);super(icfg); }} }}








src-soot/soot/jimple/toolkits/ide/JimpleIDESolver.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IDESolver;





















public class JimpleIDESolver<D, V> extends IDESolver<Unit, D, SootMethod, V, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, V> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}












src-soot/soot/jimple/toolkits/ide/JimpleIDESolver.java

deleted


100644 → 0







View file @ f7c0f2f6








src-soot/soot/jimple/toolkits/ide/JimpleIDESolver.java

deleted


100644 → 0









View file @ f7c0f2f6


f7c0f2f6










package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IDESolver;





















public class JimpleIDESolver<D, V> extends IDESolver<Unit, D, SootMethod, V, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, V> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}













package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IDESolver;





















public class JimpleIDESolver<D, V> extends IDESolver<Unit, D, SootMethod, V, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, V> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}


package soot.jimple.toolkits.ide;packagesoot.jimple.toolkits.ide;import java.io.FileNotFoundException;importjava.io.FileNotFoundException;import java.io.FileOutputStream;importjava.io.FileOutputStream;import java.io.PrintWriter;importjava.io.PrintWriter;import java.util.ArrayList;importjava.util.ArrayList;import java.util.Collections;importjava.util.Collections;import java.util.List;importjava.util.List;import soot.PatchingChain;importsoot.PatchingChain;import soot.SootMethod;importsoot.SootMethod;import soot.Unit;importsoot.Unit;import com.google.common.collect.Table.Cell;importcom.google.common.collect.Table.Cell;import de.bodden.ide.InterproceduralCFG;importde.bodden.ide.InterproceduralCFG;import de.bodden.ide.solver.IDESolver;importde.bodden.ide.solver.IDESolver;public class JimpleIDESolver<D, V> extends IDESolver<Unit, D, SootMethod, V, InterproceduralCFG<Unit,SootMethod>> {publicclassJimpleIDESolver<D,V>extendsIDESolver<Unit,D,SootMethod,V,InterproceduralCFG<Unit,SootMethod>>{ private final boolean DUMP_RESULTS;privatefinalbooleanDUMP_RESULTS; public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem) {publicJimpleIDESolver(DefaultJimpleIDETabulationProblem<D,V,InterproceduralCFG<Unit,SootMethod>>problem){ this(problem,false);this(problem,false); }}  public JimpleIDESolver(DefaultJimpleIDETabulationProblem<D, V, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {publicJimpleIDESolver(DefaultJimpleIDETabulationProblem<D,V,InterproceduralCFG<Unit,SootMethod>>problem,booleandumpResults){ super(problem);super(problem); this.DUMP_RESULTS = dumpResults;this.DUMP_RESULTS=dumpResults; }}  @Override@Override public void solve(int numThreads) {publicvoidsolve(intnumThreads){ super.solve(numThreads);super.solve(numThreads); if(DUMP_RESULTS)if(DUMP_RESULTS) dumpResults();dumpResults(); }}  public void dumpResults() {publicvoiddumpResults(){ try {try{ PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));PrintWriterout=newPrintWriter(newFileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv")); List<String> res = new ArrayList<String>();List<String>res=newArrayList<String>(); for(Cell<Unit, D, V> entry: val.cellSet()) {for(Cell<Unit,D,V>entry:val.cellSet()){ SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());SootMethodmethodOf=(SootMethod)icfg.getMethodOf(entry.getRowKey()); PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();PatchingChain<Unit>units=methodOf.getActiveBody().getUnits(); int i=0;inti=0; for (Unit unit : units) {for(Unitunit:units){ if(unit==entry.getRowKey())if(unit==entry.getRowKey()) break;break; i++;i++; }} res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue()); }} Collections.sort(res);Collections.sort(res); for (String string : res) {for(Stringstring:res){ out.println(string);out.println(string); }} out.flush();out.flush(); out.close();out.close(); } catch (FileNotFoundException e) {}catch(FileNotFoundExceptione){ e.printStackTrace();e.printStackTrace(); }} }}}}








src-soot/soot/jimple/toolkits/ide/JimpleIFDSSolver.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IFDSSolver;





















public class JimpleIFDSSolver<D, V> extends IFDSSolver<Unit, D, SootMethod, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, ?> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}












src-soot/soot/jimple/toolkits/ide/JimpleIFDSSolver.java

deleted


100644 → 0







View file @ f7c0f2f6








src-soot/soot/jimple/toolkits/ide/JimpleIFDSSolver.java

deleted


100644 → 0









View file @ f7c0f2f6


f7c0f2f6










package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IFDSSolver;





















public class JimpleIFDSSolver<D, V> extends IFDSSolver<Unit, D, SootMethod, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, ?> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}













package soot.jimple.toolkits.ide;





















import java.io.FileNotFoundException;










import java.io.FileOutputStream;










import java.io.PrintWriter;










import java.util.ArrayList;










import java.util.Collections;










import java.util.List;





















import soot.PatchingChain;










import soot.SootMethod;










import soot.Unit;





















import com.google.common.collect.Table.Cell;





















import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IFDSSolver;





















public class JimpleIFDSSolver<D, V> extends IFDSSolver<Unit, D, SootMethod, InterproceduralCFG<Unit,SootMethod>> {





















 private final boolean DUMP_RESULTS;





















 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem) {










 this(problem,false);










 }










 










 public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {










 super(problem);










 this.DUMP_RESULTS = dumpResults;










 }










 










 @Override










 public void solve(int numThreads) {










 super.solve(numThreads);










 if(DUMP_RESULTS)










 dumpResults();










 }










 










 public void dumpResults() {










 try {










 PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));










 List<String> res = new ArrayList<String>();










 for(Cell<Unit, D, ?> entry: val.cellSet()) {










 SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());










 PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();










 int i=0;










 for (Unit unit : units) {










 if(unit==entry.getRowKey())










 break;










 i++;










 }





















 res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());










 }










 Collections.sort(res);










 for (String string : res) {










 out.println(string);










 }










 out.flush();










 out.close();










 } catch (FileNotFoundException e) {










 e.printStackTrace();










 }










 }





















}


package soot.jimple.toolkits.ide;packagesoot.jimple.toolkits.ide;import java.io.FileNotFoundException;importjava.io.FileNotFoundException;import java.io.FileOutputStream;importjava.io.FileOutputStream;import java.io.PrintWriter;importjava.io.PrintWriter;import java.util.ArrayList;importjava.util.ArrayList;import java.util.Collections;importjava.util.Collections;import java.util.List;importjava.util.List;import soot.PatchingChain;importsoot.PatchingChain;import soot.SootMethod;importsoot.SootMethod;import soot.Unit;importsoot.Unit;import com.google.common.collect.Table.Cell;importcom.google.common.collect.Table.Cell;import de.bodden.ide.InterproceduralCFG;importde.bodden.ide.InterproceduralCFG;import de.bodden.ide.solver.IFDSSolver;importde.bodden.ide.solver.IFDSSolver;public class JimpleIFDSSolver<D, V> extends IFDSSolver<Unit, D, SootMethod, InterproceduralCFG<Unit,SootMethod>> {publicclassJimpleIFDSSolver<D,V>extendsIFDSSolver<Unit,D,SootMethod,InterproceduralCFG<Unit,SootMethod>>{ private final boolean DUMP_RESULTS;privatefinalbooleanDUMP_RESULTS; public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem) {publicJimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D,InterproceduralCFG<Unit,SootMethod>>problem){ this(problem,false);this(problem,false); }}  public JimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D, InterproceduralCFG<Unit,SootMethod>> problem, boolean dumpResults) {publicJimpleIFDSSolver(DefaultJimpleIFDSTabulationProblem<D,InterproceduralCFG<Unit,SootMethod>>problem,booleandumpResults){ super(problem);super(problem); this.DUMP_RESULTS = dumpResults;this.DUMP_RESULTS=dumpResults; }}  @Override@Override public void solve(int numThreads) {publicvoidsolve(intnumThreads){ super.solve(numThreads);super.solve(numThreads); if(DUMP_RESULTS)if(DUMP_RESULTS) dumpResults();dumpResults(); }}  public void dumpResults() {publicvoiddumpResults(){ try {try{ PrintWriter out = new PrintWriter(new FileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv"));PrintWriterout=newPrintWriter(newFileOutputStream("ideSolverDump"+System.currentTimeMillis()+".csv")); List<String> res = new ArrayList<String>();List<String>res=newArrayList<String>(); for(Cell<Unit, D, ?> entry: val.cellSet()) {for(Cell<Unit,D,?>entry:val.cellSet()){ SootMethod methodOf = (SootMethod) icfg.getMethodOf(entry.getRowKey());SootMethodmethodOf=(SootMethod)icfg.getMethodOf(entry.getRowKey()); PatchingChain<Unit> units = methodOf.getActiveBody().getUnits();PatchingChain<Unit>units=methodOf.getActiveBody().getUnits(); int i=0;inti=0; for (Unit unit : units) {for(Unitunit:units){ if(unit==entry.getRowKey())if(unit==entry.getRowKey()) break;break; i++;i++; }} res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue());res.add(methodOf+";"+entry.getRowKey()+"@"+i+";"+entry.getColumnKey()+";"+entry.getValue()); }} Collections.sort(res);Collections.sort(res); for (String string : res) {for(Stringstring:res){ out.println(string);out.println(string); }} out.flush();out.flush(); out.close();out.close(); } catch (FileNotFoundException e) {}catch(FileNotFoundExceptione){ e.printStackTrace();e.printStackTrace(); }} }}}}








src-soot/soot/jimple/toolkits/ide/Main.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide;





















import java.util.Map;





















import de.bodden.ide.IFDSTabulationProblem;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IFDSSolver;





















import soot.Local;










import soot.PackManager;










import soot.Scene;










import soot.SceneTransformer;










import soot.SootMethod;










import soot.Transform;










import soot.Unit;










import soot.jimple.toolkits.ide.exampleproblems.IFDSLocalInfoFlow;










import soot.jimple.toolkits.ide.icfg.JimpleBasedInterproceduralCFG;





















public class Main {





















 /**










	 * @param args










	 */










 public static void main(String[] args) {










 










 










 PackManager.v().getPack("wjtp").add(new Transform("wjtp.ifds", new SceneTransformer() {










 protected void internalTransform(String phaseName, @SuppressWarnings("rawtypes") Map options) {





















 IFDSTabulationProblem<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>> problem = new IFDSLocalInfoFlow(new JimpleBasedInterproceduralCFG());










 










 IFDSSolver<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>> solver = new IFDSSolver<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>>(problem); 










 solver.solve();










 Unit ret = Scene.v().getMainMethod().getActiveBody().getUnits().getLast();










 for(Local l: solver.ifdsResultsAt(ret)) {










 System.err.println(l);










 }










 }










 }));










 










 soot.Main.main(args);










 }





















}












src-soot/soot/jimple/toolkits/ide/Main.java

deleted


100644 → 0







View file @ f7c0f2f6








src-soot/soot/jimple/toolkits/ide/Main.java

deleted


100644 → 0









View file @ f7c0f2f6


f7c0f2f6










package soot.jimple.toolkits.ide;





















import java.util.Map;





















import de.bodden.ide.IFDSTabulationProblem;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IFDSSolver;





















import soot.Local;










import soot.PackManager;










import soot.Scene;










import soot.SceneTransformer;










import soot.SootMethod;










import soot.Transform;










import soot.Unit;










import soot.jimple.toolkits.ide.exampleproblems.IFDSLocalInfoFlow;










import soot.jimple.toolkits.ide.icfg.JimpleBasedInterproceduralCFG;





















public class Main {





















 /**










	 * @param args










	 */










 public static void main(String[] args) {










 










 










 PackManager.v().getPack("wjtp").add(new Transform("wjtp.ifds", new SceneTransformer() {










 protected void internalTransform(String phaseName, @SuppressWarnings("rawtypes") Map options) {





















 IFDSTabulationProblem<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>> problem = new IFDSLocalInfoFlow(new JimpleBasedInterproceduralCFG());










 










 IFDSSolver<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>> solver = new IFDSSolver<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>>(problem); 










 solver.solve();










 Unit ret = Scene.v().getMainMethod().getActiveBody().getUnits().getLast();










 for(Local l: solver.ifdsResultsAt(ret)) {










 System.err.println(l);










 }










 }










 }));










 










 soot.Main.main(args);










 }





















}













package soot.jimple.toolkits.ide;





















import java.util.Map;





















import de.bodden.ide.IFDSTabulationProblem;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.solver.IFDSSolver;





















import soot.Local;










import soot.PackManager;










import soot.Scene;










import soot.SceneTransformer;










import soot.SootMethod;










import soot.Transform;










import soot.Unit;










import soot.jimple.toolkits.ide.exampleproblems.IFDSLocalInfoFlow;










import soot.jimple.toolkits.ide.icfg.JimpleBasedInterproceduralCFG;





















public class Main {





















 /**










	 * @param args










	 */










 public static void main(String[] args) {










 










 










 PackManager.v().getPack("wjtp").add(new Transform("wjtp.ifds", new SceneTransformer() {










 protected void internalTransform(String phaseName, @SuppressWarnings("rawtypes") Map options) {





















 IFDSTabulationProblem<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>> problem = new IFDSLocalInfoFlow(new JimpleBasedInterproceduralCFG());










 










 IFDSSolver<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>> solver = new IFDSSolver<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>>(problem); 










 solver.solve();










 Unit ret = Scene.v().getMainMethod().getActiveBody().getUnits().getLast();










 for(Local l: solver.ifdsResultsAt(ret)) {










 System.err.println(l);










 }










 }










 }));










 










 soot.Main.main(args);










 }





















}


package soot.jimple.toolkits.ide;packagesoot.jimple.toolkits.ide;import java.util.Map;importjava.util.Map;import de.bodden.ide.IFDSTabulationProblem;importde.bodden.ide.IFDSTabulationProblem;import de.bodden.ide.InterproceduralCFG;importde.bodden.ide.InterproceduralCFG;import de.bodden.ide.solver.IFDSSolver;importde.bodden.ide.solver.IFDSSolver;import soot.Local;importsoot.Local;import soot.PackManager;importsoot.PackManager;import soot.Scene;importsoot.Scene;import soot.SceneTransformer;importsoot.SceneTransformer;import soot.SootMethod;importsoot.SootMethod;import soot.Transform;importsoot.Transform;import soot.Unit;importsoot.Unit;import soot.jimple.toolkits.ide.exampleproblems.IFDSLocalInfoFlow;importsoot.jimple.toolkits.ide.exampleproblems.IFDSLocalInfoFlow;import soot.jimple.toolkits.ide.icfg.JimpleBasedInterproceduralCFG;importsoot.jimple.toolkits.ide.icfg.JimpleBasedInterproceduralCFG;public class Main {publicclassMain{ /**/**	 * @param args	 * @param args	 */	 */ public static void main(String[] args) {publicstaticvoidmain(String[]args){   PackManager.v().getPack("wjtp").add(new Transform("wjtp.ifds", new SceneTransformer() {PackManager.v().getPack("wjtp").add(newTransform("wjtp.ifds",newSceneTransformer(){ protected void internalTransform(String phaseName, @SuppressWarnings("rawtypes") Map options) {protectedvoidinternalTransform(StringphaseName,@SuppressWarnings("rawtypes")Mapoptions){ IFDSTabulationProblem<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>> problem = new IFDSLocalInfoFlow(new JimpleBasedInterproceduralCFG());IFDSTabulationProblem<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>>problem=newIFDSLocalInfoFlow(newJimpleBasedInterproceduralCFG());  IFDSSolver<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>> solver = new IFDSSolver<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>>(problem); IFDSSolver<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>>solver=newIFDSSolver<Unit,Local,SootMethod,InterproceduralCFG<Unit,SootMethod>>(problem); solver.solve();solver.solve(); Unit ret = Scene.v().getMainMethod().getActiveBody().getUnits().getLast();Unitret=Scene.v().getMainMethod().getActiveBody().getUnits().getLast(); for(Local l: solver.ifdsResultsAt(ret)) {for(Locall:solver.ifdsResultsAt(ret)){ System.err.println(l);System.err.println(l); }} }} }));}));  soot.Main.main(args);soot.Main.main(args); }}}}








src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSLocalInfoFlow.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Gen;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.Kill;










import de.bodden.ide.flowfunc.KillAll;










import de.bodden.ide.flowfunc.Transfer;





















import soot.Local;










import soot.NullType;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.Value;










import soot.jimple.AssignStmt;










import soot.jimple.DefinitionStmt;










import soot.jimple.IdentityStmt;










import soot.jimple.InvokeExpr;










import soot.jimple.ParameterRef;










import soot.jimple.ReturnStmt;










import soot.jimple.Stmt;










import soot.jimple.internal.JimpleLocal;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;





















public class IFDSLocalInfoFlow extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {










 super(icfg); 










 }





















 public FlowFunctions<Unit, Local, SootMethod> createFlowFunctionsFactory() { 










 return new FlowFunctions<Unit,Local,SootMethod>() {





















 @Override










 public FlowFunction<Local> getNormalFlowFunction(Unit src, Unit dest) {










 if (src instanceof IdentityStmt && interproceduralCFG().getMethodOf(src)==Scene.v().getMainMethod()) {










 IdentityStmt is = (IdentityStmt) src;










 Local leftLocal = (Local) is.getLeftOp();










 Value right = is.getRightOp();










 if (right instanceof ParameterRef) {










 return new Gen<Local>(leftLocal,zeroValue());










 }










 }










 










 if(src instanceof AssignStmt) {










 AssignStmt assignStmt = (AssignStmt) src;










 Value right = assignStmt.getRightOp();










 if(assignStmt.getLeftOp() instanceof Local) {










 final Local leftLocal = (Local) assignStmt.getLeftOp();










 if(right instanceof Local) {










 final Local rightLocal = (Local) right;










 return new Transfer<Local>(leftLocal, rightLocal);










 } else {










 return new Kill<Local>(leftLocal);










 }










 }










 }










 return Identity.v();










 }





















 @Override










 public FlowFunction<Local> getCallFlowFunction(Unit src, final SootMethod dest) {










 Stmt stmt = (Stmt) src;










 InvokeExpr ie = stmt.getInvokeExpr();










 final List<Value> callArgs = ie.getArgs();










 final List<Local> paramLocals = new ArrayList<Local>();










 for(int i=0;i<dest.getParameterCount();i++) {










 paramLocals.add(dest.getActiveBody().getParameterLocal(i));










 }










 return new FlowFunction<Local>() {





















 public Set<Local> computeTargets(Local source) {










 int argIndex = callArgs.indexOf(source);










 if(argIndex>-1) {










 return Collections.singleton(paramLocals.get(argIndex));










 }










 return Collections.emptySet();










 }










 };










 }





















 @Override










 public FlowFunction<Local> getReturnFlowFunction(Unit callSite, SootMethod callee, Unit exitStmt, Unit retSite) {










 if (exitStmt instanceof ReturnStmt) { 










 ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 Value op = returnStmt.getOp();










 if(op instanceof Local) {










 if(callSite instanceof DefinitionStmt) {










 DefinitionStmt defnStmt = (DefinitionStmt) callSite;










 Value leftOp = defnStmt.getLeftOp();










 if(leftOp instanceof Local) {










 final Local tgtLocal = (Local) leftOp;










 final Local retLocal = (Local) op;










 return new FlowFunction<Local>() {





















 public Set<Local> computeTargets(Local source) {










 if(source==retLocal)










 return Collections.singleton(tgtLocal);










 return Collections.emptySet();










 }










 










 };










 }










 }










 }










 } 










 return KillAll.v();










 }





















 @Override










 public FlowFunction<Local> getCallToReturnFlowFunction(Unit call, Unit returnSite) {










 return Identity.v();










 }










 }; 










 }





















 @Override










 public Local createZeroValue() {










 return new JimpleLocal("zero", NullType.v());










 }





















 @Override










 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }










}




\ No newline at end of file












src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSLocalInfoFlow.java

deleted


100644 → 0







View file @ f7c0f2f6








src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSLocalInfoFlow.java

deleted


100644 → 0









View file @ f7c0f2f6


f7c0f2f6










package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Gen;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.Kill;










import de.bodden.ide.flowfunc.KillAll;










import de.bodden.ide.flowfunc.Transfer;





















import soot.Local;










import soot.NullType;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.Value;










import soot.jimple.AssignStmt;










import soot.jimple.DefinitionStmt;










import soot.jimple.IdentityStmt;










import soot.jimple.InvokeExpr;










import soot.jimple.ParameterRef;










import soot.jimple.ReturnStmt;










import soot.jimple.Stmt;










import soot.jimple.internal.JimpleLocal;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;





















public class IFDSLocalInfoFlow extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {










 super(icfg); 










 }





















 public FlowFunctions<Unit, Local, SootMethod> createFlowFunctionsFactory() { 










 return new FlowFunctions<Unit,Local,SootMethod>() {





















 @Override










 public FlowFunction<Local> getNormalFlowFunction(Unit src, Unit dest) {










 if (src instanceof IdentityStmt && interproceduralCFG().getMethodOf(src)==Scene.v().getMainMethod()) {










 IdentityStmt is = (IdentityStmt) src;










 Local leftLocal = (Local) is.getLeftOp();










 Value right = is.getRightOp();










 if (right instanceof ParameterRef) {










 return new Gen<Local>(leftLocal,zeroValue());










 }










 }










 










 if(src instanceof AssignStmt) {










 AssignStmt assignStmt = (AssignStmt) src;










 Value right = assignStmt.getRightOp();










 if(assignStmt.getLeftOp() instanceof Local) {










 final Local leftLocal = (Local) assignStmt.getLeftOp();










 if(right instanceof Local) {










 final Local rightLocal = (Local) right;










 return new Transfer<Local>(leftLocal, rightLocal);










 } else {










 return new Kill<Local>(leftLocal);










 }










 }










 }










 return Identity.v();










 }





















 @Override










 public FlowFunction<Local> getCallFlowFunction(Unit src, final SootMethod dest) {










 Stmt stmt = (Stmt) src;










 InvokeExpr ie = stmt.getInvokeExpr();










 final List<Value> callArgs = ie.getArgs();










 final List<Local> paramLocals = new ArrayList<Local>();










 for(int i=0;i<dest.getParameterCount();i++) {










 paramLocals.add(dest.getActiveBody().getParameterLocal(i));










 }










 return new FlowFunction<Local>() {





















 public Set<Local> computeTargets(Local source) {










 int argIndex = callArgs.indexOf(source);










 if(argIndex>-1) {










 return Collections.singleton(paramLocals.get(argIndex));










 }










 return Collections.emptySet();










 }










 };










 }





















 @Override










 public FlowFunction<Local> getReturnFlowFunction(Unit callSite, SootMethod callee, Unit exitStmt, Unit retSite) {










 if (exitStmt instanceof ReturnStmt) { 










 ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 Value op = returnStmt.getOp();










 if(op instanceof Local) {










 if(callSite instanceof DefinitionStmt) {










 DefinitionStmt defnStmt = (DefinitionStmt) callSite;










 Value leftOp = defnStmt.getLeftOp();










 if(leftOp instanceof Local) {










 final Local tgtLocal = (Local) leftOp;










 final Local retLocal = (Local) op;










 return new FlowFunction<Local>() {





















 public Set<Local> computeTargets(Local source) {










 if(source==retLocal)










 return Collections.singleton(tgtLocal);










 return Collections.emptySet();










 }










 










 };










 }










 }










 }










 } 










 return KillAll.v();










 }





















 @Override










 public FlowFunction<Local> getCallToReturnFlowFunction(Unit call, Unit returnSite) {










 return Identity.v();










 }










 }; 










 }





















 @Override










 public Local createZeroValue() {










 return new JimpleLocal("zero", NullType.v());










 }





















 @Override










 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }










}




\ No newline at end of file













package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Gen;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.Kill;










import de.bodden.ide.flowfunc.KillAll;










import de.bodden.ide.flowfunc.Transfer;





















import soot.Local;










import soot.NullType;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.Value;










import soot.jimple.AssignStmt;










import soot.jimple.DefinitionStmt;










import soot.jimple.IdentityStmt;










import soot.jimple.InvokeExpr;










import soot.jimple.ParameterRef;










import soot.jimple.ReturnStmt;










import soot.jimple.Stmt;










import soot.jimple.internal.JimpleLocal;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;





















public class IFDSLocalInfoFlow extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {










 super(icfg); 










 }





















 public FlowFunctions<Unit, Local, SootMethod> createFlowFunctionsFactory() { 










 return new FlowFunctions<Unit,Local,SootMethod>() {





















 @Override










 public FlowFunction<Local> getNormalFlowFunction(Unit src, Unit dest) {










 if (src instanceof IdentityStmt && interproceduralCFG().getMethodOf(src)==Scene.v().getMainMethod()) {










 IdentityStmt is = (IdentityStmt) src;










 Local leftLocal = (Local) is.getLeftOp();










 Value right = is.getRightOp();










 if (right instanceof ParameterRef) {










 return new Gen<Local>(leftLocal,zeroValue());










 }










 }










 










 if(src instanceof AssignStmt) {










 AssignStmt assignStmt = (AssignStmt) src;










 Value right = assignStmt.getRightOp();










 if(assignStmt.getLeftOp() instanceof Local) {










 final Local leftLocal = (Local) assignStmt.getLeftOp();










 if(right instanceof Local) {










 final Local rightLocal = (Local) right;










 return new Transfer<Local>(leftLocal, rightLocal);










 } else {










 return new Kill<Local>(leftLocal);










 }










 }










 }










 return Identity.v();










 }





















 @Override










 public FlowFunction<Local> getCallFlowFunction(Unit src, final SootMethod dest) {










 Stmt stmt = (Stmt) src;










 InvokeExpr ie = stmt.getInvokeExpr();










 final List<Value> callArgs = ie.getArgs();










 final List<Local> paramLocals = new ArrayList<Local>();










 for(int i=0;i<dest.getParameterCount();i++) {










 paramLocals.add(dest.getActiveBody().getParameterLocal(i));










 }










 return new FlowFunction<Local>() {





















 public Set<Local> computeTargets(Local source) {










 int argIndex = callArgs.indexOf(source);










 if(argIndex>-1) {










 return Collections.singleton(paramLocals.get(argIndex));










 }










 return Collections.emptySet();










 }










 };










 }





















 @Override










 public FlowFunction<Local> getReturnFlowFunction(Unit callSite, SootMethod callee, Unit exitStmt, Unit retSite) {










 if (exitStmt instanceof ReturnStmt) { 










 ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 Value op = returnStmt.getOp();










 if(op instanceof Local) {










 if(callSite instanceof DefinitionStmt) {










 DefinitionStmt defnStmt = (DefinitionStmt) callSite;










 Value leftOp = defnStmt.getLeftOp();










 if(leftOp instanceof Local) {










 final Local tgtLocal = (Local) leftOp;










 final Local retLocal = (Local) op;










 return new FlowFunction<Local>() {





















 public Set<Local> computeTargets(Local source) {










 if(source==retLocal)










 return Collections.singleton(tgtLocal);










 return Collections.emptySet();










 }










 










 };










 }










 }










 }










 } 










 return KillAll.v();










 }





















 @Override










 public FlowFunction<Local> getCallToReturnFlowFunction(Unit call, Unit returnSite) {










 return Identity.v();










 }










 }; 










 }





















 @Override










 public Local createZeroValue() {










 return new JimpleLocal("zero", NullType.v());










 }





















 @Override










 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }










}




\ No newline at end of file


package soot.jimple.toolkits.ide.exampleproblems;packagesoot.jimple.toolkits.ide.exampleproblems;import java.util.ArrayList;importjava.util.ArrayList;import java.util.Collections;importjava.util.Collections;import java.util.List;importjava.util.List;import java.util.Set;importjava.util.Set;import de.bodden.ide.FlowFunction;importde.bodden.ide.FlowFunction;import de.bodden.ide.FlowFunctions;importde.bodden.ide.FlowFunctions;import de.bodden.ide.InterproceduralCFG;importde.bodden.ide.InterproceduralCFG;import de.bodden.ide.flowfunc.Gen;importde.bodden.ide.flowfunc.Gen;import de.bodden.ide.flowfunc.Identity;importde.bodden.ide.flowfunc.Identity;import de.bodden.ide.flowfunc.Kill;importde.bodden.ide.flowfunc.Kill;import de.bodden.ide.flowfunc.KillAll;importde.bodden.ide.flowfunc.KillAll;import de.bodden.ide.flowfunc.Transfer;importde.bodden.ide.flowfunc.Transfer;import soot.Local;importsoot.Local;import soot.NullType;importsoot.NullType;import soot.Scene;importsoot.Scene;import soot.SootMethod;importsoot.SootMethod;import soot.Unit;importsoot.Unit;import soot.Value;importsoot.Value;import soot.jimple.AssignStmt;importsoot.jimple.AssignStmt;import soot.jimple.DefinitionStmt;importsoot.jimple.DefinitionStmt;import soot.jimple.IdentityStmt;importsoot.jimple.IdentityStmt;import soot.jimple.InvokeExpr;importsoot.jimple.InvokeExpr;import soot.jimple.ParameterRef;importsoot.jimple.ParameterRef;import soot.jimple.ReturnStmt;importsoot.jimple.ReturnStmt;import soot.jimple.Stmt;importsoot.jimple.Stmt;import soot.jimple.internal.JimpleLocal;importsoot.jimple.internal.JimpleLocal;import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;importsoot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;public class IFDSLocalInfoFlow extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {publicclassIFDSLocalInfoFlowextendsDefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit,SootMethod>>{ public IFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod> icfg) {publicIFDSLocalInfoFlow(InterproceduralCFG<Unit,SootMethod>icfg){ super(icfg); super(icfg); }} public FlowFunctions<Unit, Local, SootMethod> createFlowFunctionsFactory() { publicFlowFunctions<Unit,Local,SootMethod>createFlowFunctionsFactory(){ return new FlowFunctions<Unit,Local,SootMethod>() {returnnewFlowFunctions<Unit,Local,SootMethod>(){ @Override@Override public FlowFunction<Local> getNormalFlowFunction(Unit src, Unit dest) {publicFlowFunction<Local>getNormalFlowFunction(Unitsrc,Unitdest){ if (src instanceof IdentityStmt && interproceduralCFG().getMethodOf(src)==Scene.v().getMainMethod()) {if(srcinstanceofIdentityStmt&&interproceduralCFG().getMethodOf(src)==Scene.v().getMainMethod()){ IdentityStmt is = (IdentityStmt) src;IdentityStmtis=(IdentityStmt)src; Local leftLocal = (Local) is.getLeftOp();LocalleftLocal=(Local)is.getLeftOp(); Value right = is.getRightOp();Valueright=is.getRightOp(); if (right instanceof ParameterRef) {if(rightinstanceofParameterRef){ return new Gen<Local>(leftLocal,zeroValue());returnnewGen<Local>(leftLocal,zeroValue()); }} }}  if(src instanceof AssignStmt) {if(srcinstanceofAssignStmt){ AssignStmt assignStmt = (AssignStmt) src;AssignStmtassignStmt=(AssignStmt)src; Value right = assignStmt.getRightOp();Valueright=assignStmt.getRightOp(); if(assignStmt.getLeftOp() instanceof Local) {if(assignStmt.getLeftOp()instanceofLocal){ final Local leftLocal = (Local) assignStmt.getLeftOp();finalLocalleftLocal=(Local)assignStmt.getLeftOp(); if(right instanceof Local) {if(rightinstanceofLocal){ final Local rightLocal = (Local) right;finalLocalrightLocal=(Local)right; return new Transfer<Local>(leftLocal, rightLocal);returnnewTransfer<Local>(leftLocal,rightLocal); } else {}else{ return new Kill<Local>(leftLocal);returnnewKill<Local>(leftLocal); }} }} }} return Identity.v();returnIdentity.v(); }} @Override@Override public FlowFunction<Local> getCallFlowFunction(Unit src, final SootMethod dest) {publicFlowFunction<Local>getCallFlowFunction(Unitsrc,finalSootMethoddest){ Stmt stmt = (Stmt) src;Stmtstmt=(Stmt)src; InvokeExpr ie = stmt.getInvokeExpr();InvokeExprie=stmt.getInvokeExpr(); final List<Value> callArgs = ie.getArgs();finalList<Value>callArgs=ie.getArgs(); final List<Local> paramLocals = new ArrayList<Local>();finalList<Local>paramLocals=newArrayList<Local>(); for(int i=0;i<dest.getParameterCount();i++) {for(inti=0;i<dest.getParameterCount();i++){ paramLocals.add(dest.getActiveBody().getParameterLocal(i));paramLocals.add(dest.getActiveBody().getParameterLocal(i)); }} return new FlowFunction<Local>() {returnnewFlowFunction<Local>(){ public Set<Local> computeTargets(Local source) {publicSet<Local>computeTargets(Localsource){ int argIndex = callArgs.indexOf(source);intargIndex=callArgs.indexOf(source); if(argIndex>-1) {if(argIndex>-1){ return Collections.singleton(paramLocals.get(argIndex));returnCollections.singleton(paramLocals.get(argIndex)); }} return Collections.emptySet();returnCollections.emptySet(); }} };}; }} @Override@Override public FlowFunction<Local> getReturnFlowFunction(Unit callSite, SootMethod callee, Unit exitStmt, Unit retSite) {publicFlowFunction<Local>getReturnFlowFunction(UnitcallSite,SootMethodcallee,UnitexitStmt,UnitretSite){ if (exitStmt instanceof ReturnStmt) { if(exitStmtinstanceofReturnStmt){ ReturnStmt returnStmt = (ReturnStmt) exitStmt;ReturnStmtreturnStmt=(ReturnStmt)exitStmt; Value op = returnStmt.getOp();Valueop=returnStmt.getOp(); if(op instanceof Local) {if(opinstanceofLocal){ if(callSite instanceof DefinitionStmt) {if(callSiteinstanceofDefinitionStmt){ DefinitionStmt defnStmt = (DefinitionStmt) callSite;DefinitionStmtdefnStmt=(DefinitionStmt)callSite; Value leftOp = defnStmt.getLeftOp();ValueleftOp=defnStmt.getLeftOp(); if(leftOp instanceof Local) {if(leftOpinstanceofLocal){ final Local tgtLocal = (Local) leftOp;finalLocaltgtLocal=(Local)leftOp; final Local retLocal = (Local) op;finalLocalretLocal=(Local)op; return new FlowFunction<Local>() {returnnewFlowFunction<Local>(){ public Set<Local> computeTargets(Local source) {publicSet<Local>computeTargets(Localsource){ if(source==retLocal)if(source==retLocal) return Collections.singleton(tgtLocal);returnCollections.singleton(tgtLocal); return Collections.emptySet();returnCollections.emptySet(); }}  };}; }} }} }} } } return KillAll.v();returnKillAll.v(); }} @Override@Override public FlowFunction<Local> getCallToReturnFlowFunction(Unit call, Unit returnSite) {publicFlowFunction<Local>getCallToReturnFlowFunction(Unitcall,UnitreturnSite){ return Identity.v();returnIdentity.v(); }} }; }; }} @Override@Override public Local createZeroValue() {publicLocalcreateZeroValue(){ return new JimpleLocal("zero", NullType.v());returnnewJimpleLocal("zero",NullType.v()); }} @Override@Override public Set<Unit> initialSeeds() {publicSet<Unit>initialSeeds(){ return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());returnCollections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst()); }}}}








src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSPossibleTypes.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.KillAll;





















import soot.Local;










import soot.PointsToAnalysis;










import soot.PointsToSet;










import soot.PrimType;










import soot.Scene;










import soot.SootMethod;










import soot.Type;










import soot.Unit;










import soot.UnknownType;










import soot.Value;










import soot.jimple.ArrayRef;










import soot.jimple.Constant;










import soot.jimple.DefinitionStmt;










import soot.jimple.InstanceFieldRef;










import soot.jimple.InvokeExpr;










import soot.jimple.Jimple;










import soot.jimple.NewExpr;










import soot.jimple.Ref;










import soot.jimple.ReturnStmt;










import soot.jimple.Stmt;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;










import soot.toolkits.scalar.Pair;





















@SuppressWarnings("serial")










public class IFDSPossibleTypes extends DefaultJimpleIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {










 super(icfg);










 }





















 public FlowFunctions<Unit, Pair<Value,Type>, SootMethod> createFlowFunctionsFactory() {










 return new FlowFunctions<Unit,Pair<Value,Type>,SootMethod>() {





















 public FlowFunction<Pair<Value,Type>> getNormalFlowFunction(Unit src, Unit dest) {










 if(src instanceof DefinitionStmt) {










 DefinitionStmt defnStmt = (DefinitionStmt) src;










 if(defnStmt.containsInvokeExpr()) return Identity.v();










 final Value right = defnStmt.getRightOp();










 final Value left = defnStmt.getLeftOp();










 //won't track primitive-typed variables










 if(right.getType() instanceof PrimType) return Identity.v();










 










 if(right instanceof Constant || right instanceof NewExpr) {










 return new FlowFunction<Pair<Value,Type>>() {










 public Set<Pair<Value, Type>> computeTargets(Pair<Value, Type> source) {










 if(source==new Pair<Value, Type>(Jimple.v().newLocal("<dummy>", UnknownType.v()), UnknownType.v())) {










 Set<Pair<Value, Type>> res = new LinkedHashSet<Pair<Value,Type>>();










 res.add(new Pair<Value,Type>(left,right.getType()));










 res.add(new Pair<Value, Type>(Jimple.v().newLocal("<dummy>", UnknownType.v()), UnknownType.v()));










 return res;










 } else if(source.getO1() instanceof Local && source.getO1().equivTo(left)) {










 //strong update for local variables










 return Collections.emptySet();










 } else {










 return Collections.singleton(source);










 }










 }










 };










 } else if(right instanceof Ref || right instanceof Local) {










 return new FlowFunction<Pair<Value,Type>>() {










 public Set<Pair<Value, Type>> computeTargets(final Pair<Value, Type> source) {










 Value value = source.getO1();










 if(source.getO1() instanceof Local && source.getO1().equivTo(left)) {










 //strong update for local variables










 return Collections.emptySet();










 } else if(maybeSameLocation(value,right)) {










 return new LinkedHashSet<Pair<Value,Type>>() {{










 add(new Pair<Value,Type>(left,source.getO2())); 










 add(source); 










 }};










 } else {










 return Collections.singleton(source);










 }










 }





















 private boolean maybeSameLocation(Value v1, Value v2) {










 if(!(v1 instanceof InstanceFieldRef && v2 instanceof InstanceFieldRef) &&










 !(v1 instanceof ArrayRef && v2 instanceof ArrayRef)) {










 return v1.equivTo(v2);










 }










 if(v1 instanceof InstanceFieldRef && v2 instanceof InstanceFieldRef) {










 InstanceFieldRef ifr1 = (InstanceFieldRef) v1;










 InstanceFieldRef ifr2 = (InstanceFieldRef) v2;










 if(!ifr1.getField().getName().equals(ifr2.getField().getName())) return false;










 










 Local base1 = (Local) ifr1.getBase();










 Local base2 = (Local) ifr2.getBase();










 PointsToAnalysis pta = Scene.v().getPointsToAnalysis();










 PointsToSet pts1 = pta.reachingObjects(base1);










 PointsToSet pts2 = pta.reachingObjects(base2); 










 return pts1.hasNonEmptyIntersection(pts2);










 } else { //v1 instanceof ArrayRef && v2 instanceof ArrayRef










 ArrayRef ar1 = (ArrayRef) v1;










 ArrayRef ar2 = (ArrayRef) v2;





















 Local base1 = (Local) ar1.getBase();










 Local base2 = (Local) ar2.getBase();










 PointsToAnalysis pta = Scene.v().getPointsToAnalysis();










 PointsToSet pts1 = pta.reachingObjects(base1);










 PointsToSet pts2 = pta.reachingObjects(base2); 










 return pts1.hasNonEmptyIntersection(pts2);










 }










 }










 };










 } 










 }










 return Identity.v();










 }





















 public FlowFunction<Pair<Value,Type>> getCallFlowFunction(final Unit src, final SootMethod dest) {










 Stmt stmt = (Stmt) src;










 InvokeExpr ie = stmt.getInvokeExpr();










 final List<Value> callArgs = ie.getArgs();










 final List<Local> paramLocals = new ArrayList<Local>();










 for(int i=0;i<dest.getParameterCount();i++) {










 paramLocals.add(dest.getActiveBody().getParameterLocal(i));










 } 










 return new FlowFunction<Pair<Value,Type>>() {










 public Set<Pair<Value,Type>> computeTargets(Pair<Value,Type> source) {










 Value value = source.getO1();










 int argIndex = callArgs.indexOf(value);










 if(argIndex>-1) {










 return Collections.singleton(new Pair<Value,Type>(paramLocals.get(argIndex), source.getO2()));










 }










 return Collections.emptySet();










 }










 };










 }





















 public FlowFunction<Pair<Value,Type>> getReturnFlowFunction(Unit callSite, SootMethod callee, Unit exitStmt, Unit retSite) {










 if (exitStmt instanceof ReturnStmt) { 










 ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 Value op = returnStmt.getOp();










 if(op instanceof Local) {










 if(callSite instanceof DefinitionStmt) {










 DefinitionStmt defnStmt = (DefinitionStmt) callSite;










 Value leftOp = defnStmt.getLeftOp();










 if(leftOp instanceof Local) {










 final Local tgtLocal = (Local) leftOp;










 final Local retLocal = (Local) op;










 return new FlowFunction<Pair<Value,Type>>() {





















 public Set<Pair<Value,Type>> computeTargets(Pair<Value,Type> source) {










 if(source==retLocal)










 return Collections.singleton(new Pair<Value,Type>(tgtLocal, source.getO2()));










 return Collections.emptySet();










 }










 










 };










 }










 }










 }










 }










 return KillAll.v();










 }





















 public FlowFunction<Pair<Value,Type>> getCallToReturnFlowFunction(Unit call, Unit returnSite) {










 return Identity.v();










 }










 };










 }





















 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }





















 public Pair<Value,Type> createZeroValue() {










 return new Pair<Value, Type>(Jimple.v().newLocal("<dummy>", UnknownType.v()), UnknownType.v());










 }










}




\ No newline at end of file












src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSPossibleTypes.java

deleted


100644 → 0







View file @ f7c0f2f6








src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSPossibleTypes.java

deleted


100644 → 0









View file @ f7c0f2f6


f7c0f2f6










package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.KillAll;





















import soot.Local;










import soot.PointsToAnalysis;










import soot.PointsToSet;










import soot.PrimType;










import soot.Scene;










import soot.SootMethod;










import soot.Type;










import soot.Unit;










import soot.UnknownType;










import soot.Value;










import soot.jimple.ArrayRef;










import soot.jimple.Constant;










import soot.jimple.DefinitionStmt;










import soot.jimple.InstanceFieldRef;










import soot.jimple.InvokeExpr;










import soot.jimple.Jimple;










import soot.jimple.NewExpr;










import soot.jimple.Ref;










import soot.jimple.ReturnStmt;










import soot.jimple.Stmt;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;










import soot.toolkits.scalar.Pair;





















@SuppressWarnings("serial")










public class IFDSPossibleTypes extends DefaultJimpleIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {










 super(icfg);










 }





















 public FlowFunctions<Unit, Pair<Value,Type>, SootMethod> createFlowFunctionsFactory() {










 return new FlowFunctions<Unit,Pair<Value,Type>,SootMethod>() {





















 public FlowFunction<Pair<Value,Type>> getNormalFlowFunction(Unit src, Unit dest) {










 if(src instanceof DefinitionStmt) {










 DefinitionStmt defnStmt = (DefinitionStmt) src;










 if(defnStmt.containsInvokeExpr()) return Identity.v();










 final Value right = defnStmt.getRightOp();










 final Value left = defnStmt.getLeftOp();










 //won't track primitive-typed variables










 if(right.getType() instanceof PrimType) return Identity.v();










 










 if(right instanceof Constant || right instanceof NewExpr) {










 return new FlowFunction<Pair<Value,Type>>() {










 public Set<Pair<Value, Type>> computeTargets(Pair<Value, Type> source) {










 if(source==new Pair<Value, Type>(Jimple.v().newLocal("<dummy>", UnknownType.v()), UnknownType.v())) {










 Set<Pair<Value, Type>> res = new LinkedHashSet<Pair<Value,Type>>();










 res.add(new Pair<Value,Type>(left,right.getType()));










 res.add(new Pair<Value, Type>(Jimple.v().newLocal("<dummy>", UnknownType.v()), UnknownType.v()));










 return res;










 } else if(source.getO1() instanceof Local && source.getO1().equivTo(left)) {










 //strong update for local variables










 return Collections.emptySet();










 } else {










 return Collections.singleton(source);










 }










 }










 };










 } else if(right instanceof Ref || right instanceof Local) {










 return new FlowFunction<Pair<Value,Type>>() {










 public Set<Pair<Value, Type>> computeTargets(final Pair<Value, Type> source) {










 Value value = source.getO1();










 if(source.getO1() instanceof Local && source.getO1().equivTo(left)) {










 //strong update for local variables










 return Collections.emptySet();










 } else if(maybeSameLocation(value,right)) {










 return new LinkedHashSet<Pair<Value,Type>>() {{










 add(new Pair<Value,Type>(left,source.getO2())); 










 add(source); 










 }};










 } else {










 return Collections.singleton(source);










 }










 }





















 private boolean maybeSameLocation(Value v1, Value v2) {










 if(!(v1 instanceof InstanceFieldRef && v2 instanceof InstanceFieldRef) &&










 !(v1 instanceof ArrayRef && v2 instanceof ArrayRef)) {










 return v1.equivTo(v2);










 }










 if(v1 instanceof InstanceFieldRef && v2 instanceof InstanceFieldRef) {










 InstanceFieldRef ifr1 = (InstanceFieldRef) v1;










 InstanceFieldRef ifr2 = (InstanceFieldRef) v2;










 if(!ifr1.getField().getName().equals(ifr2.getField().getName())) return false;










 










 Local base1 = (Local) ifr1.getBase();










 Local base2 = (Local) ifr2.getBase();










 PointsToAnalysis pta = Scene.v().getPointsToAnalysis();










 PointsToSet pts1 = pta.reachingObjects(base1);










 PointsToSet pts2 = pta.reachingObjects(base2); 










 return pts1.hasNonEmptyIntersection(pts2);










 } else { //v1 instanceof ArrayRef && v2 instanceof ArrayRef










 ArrayRef ar1 = (ArrayRef) v1;










 ArrayRef ar2 = (ArrayRef) v2;





















 Local base1 = (Local) ar1.getBase();










 Local base2 = (Local) ar2.getBase();










 PointsToAnalysis pta = Scene.v().getPointsToAnalysis();










 PointsToSet pts1 = pta.reachingObjects(base1);










 PointsToSet pts2 = pta.reachingObjects(base2); 










 return pts1.hasNonEmptyIntersection(pts2);










 }










 }










 };










 } 










 }










 return Identity.v();










 }





















 public FlowFunction<Pair<Value,Type>> getCallFlowFunction(final Unit src, final SootMethod dest) {










 Stmt stmt = (Stmt) src;










 InvokeExpr ie = stmt.getInvokeExpr();










 final List<Value> callArgs = ie.getArgs();










 final List<Local> paramLocals = new ArrayList<Local>();










 for(int i=0;i<dest.getParameterCount();i++) {










 paramLocals.add(dest.getActiveBody().getParameterLocal(i));










 } 










 return new FlowFunction<Pair<Value,Type>>() {










 public Set<Pair<Value,Type>> computeTargets(Pair<Value,Type> source) {










 Value value = source.getO1();










 int argIndex = callArgs.indexOf(value);










 if(argIndex>-1) {










 return Collections.singleton(new Pair<Value,Type>(paramLocals.get(argIndex), source.getO2()));










 }










 return Collections.emptySet();










 }










 };










 }





















 public FlowFunction<Pair<Value,Type>> getReturnFlowFunction(Unit callSite, SootMethod callee, Unit exitStmt, Unit retSite) {










 if (exitStmt instanceof ReturnStmt) { 










 ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 Value op = returnStmt.getOp();










 if(op instanceof Local) {










 if(callSite instanceof DefinitionStmt) {










 DefinitionStmt defnStmt = (DefinitionStmt) callSite;










 Value leftOp = defnStmt.getLeftOp();










 if(leftOp instanceof Local) {










 final Local tgtLocal = (Local) leftOp;










 final Local retLocal = (Local) op;










 return new FlowFunction<Pair<Value,Type>>() {





















 public Set<Pair<Value,Type>> computeTargets(Pair<Value,Type> source) {










 if(source==retLocal)










 return Collections.singleton(new Pair<Value,Type>(tgtLocal, source.getO2()));










 return Collections.emptySet();










 }










 










 };










 }










 }










 }










 }










 return KillAll.v();










 }





















 public FlowFunction<Pair<Value,Type>> getCallToReturnFlowFunction(Unit call, Unit returnSite) {










 return Identity.v();










 }










 };










 }





















 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }





















 public Pair<Value,Type> createZeroValue() {










 return new Pair<Value, Type>(Jimple.v().newLocal("<dummy>", UnknownType.v()), UnknownType.v());










 }










}




\ No newline at end of file













package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.KillAll;





















import soot.Local;










import soot.PointsToAnalysis;










import soot.PointsToSet;










import soot.PrimType;










import soot.Scene;










import soot.SootMethod;










import soot.Type;










import soot.Unit;










import soot.UnknownType;










import soot.Value;










import soot.jimple.ArrayRef;










import soot.jimple.Constant;










import soot.jimple.DefinitionStmt;










import soot.jimple.InstanceFieldRef;










import soot.jimple.InvokeExpr;










import soot.jimple.Jimple;










import soot.jimple.NewExpr;










import soot.jimple.Ref;










import soot.jimple.ReturnStmt;










import soot.jimple.Stmt;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;










import soot.toolkits.scalar.Pair;





















@SuppressWarnings("serial")










public class IFDSPossibleTypes extends DefaultJimpleIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {










 super(icfg);










 }





















 public FlowFunctions<Unit, Pair<Value,Type>, SootMethod> createFlowFunctionsFactory() {










 return new FlowFunctions<Unit,Pair<Value,Type>,SootMethod>() {





















 public FlowFunction<Pair<Value,Type>> getNormalFlowFunction(Unit src, Unit dest) {










 if(src instanceof DefinitionStmt) {










 DefinitionStmt defnStmt = (DefinitionStmt) src;










 if(defnStmt.containsInvokeExpr()) return Identity.v();










 final Value right = defnStmt.getRightOp();










 final Value left = defnStmt.getLeftOp();










 //won't track primitive-typed variables










 if(right.getType() instanceof PrimType) return Identity.v();










 










 if(right instanceof Constant || right instanceof NewExpr) {










 return new FlowFunction<Pair<Value,Type>>() {










 public Set<Pair<Value, Type>> computeTargets(Pair<Value, Type> source) {










 if(source==new Pair<Value, Type>(Jimple.v().newLocal("<dummy>", UnknownType.v()), UnknownType.v())) {










 Set<Pair<Value, Type>> res = new LinkedHashSet<Pair<Value,Type>>();










 res.add(new Pair<Value,Type>(left,right.getType()));










 res.add(new Pair<Value, Type>(Jimple.v().newLocal("<dummy>", UnknownType.v()), UnknownType.v()));










 return res;










 } else if(source.getO1() instanceof Local && source.getO1().equivTo(left)) {










 //strong update for local variables










 return Collections.emptySet();










 } else {










 return Collections.singleton(source);










 }










 }










 };










 } else if(right instanceof Ref || right instanceof Local) {










 return new FlowFunction<Pair<Value,Type>>() {










 public Set<Pair<Value, Type>> computeTargets(final Pair<Value, Type> source) {










 Value value = source.getO1();










 if(source.getO1() instanceof Local && source.getO1().equivTo(left)) {










 //strong update for local variables










 return Collections.emptySet();










 } else if(maybeSameLocation(value,right)) {










 return new LinkedHashSet<Pair<Value,Type>>() {{










 add(new Pair<Value,Type>(left,source.getO2())); 










 add(source); 










 }};










 } else {










 return Collections.singleton(source);










 }










 }





















 private boolean maybeSameLocation(Value v1, Value v2) {










 if(!(v1 instanceof InstanceFieldRef && v2 instanceof InstanceFieldRef) &&










 !(v1 instanceof ArrayRef && v2 instanceof ArrayRef)) {










 return v1.equivTo(v2);










 }










 if(v1 instanceof InstanceFieldRef && v2 instanceof InstanceFieldRef) {










 InstanceFieldRef ifr1 = (InstanceFieldRef) v1;










 InstanceFieldRef ifr2 = (InstanceFieldRef) v2;










 if(!ifr1.getField().getName().equals(ifr2.getField().getName())) return false;










 










 Local base1 = (Local) ifr1.getBase();










 Local base2 = (Local) ifr2.getBase();










 PointsToAnalysis pta = Scene.v().getPointsToAnalysis();










 PointsToSet pts1 = pta.reachingObjects(base1);










 PointsToSet pts2 = pta.reachingObjects(base2); 










 return pts1.hasNonEmptyIntersection(pts2);










 } else { //v1 instanceof ArrayRef && v2 instanceof ArrayRef










 ArrayRef ar1 = (ArrayRef) v1;










 ArrayRef ar2 = (ArrayRef) v2;





















 Local base1 = (Local) ar1.getBase();










 Local base2 = (Local) ar2.getBase();










 PointsToAnalysis pta = Scene.v().getPointsToAnalysis();










 PointsToSet pts1 = pta.reachingObjects(base1);










 PointsToSet pts2 = pta.reachingObjects(base2); 










 return pts1.hasNonEmptyIntersection(pts2);










 }










 }










 };










 } 










 }










 return Identity.v();










 }





















 public FlowFunction<Pair<Value,Type>> getCallFlowFunction(final Unit src, final SootMethod dest) {










 Stmt stmt = (Stmt) src;










 InvokeExpr ie = stmt.getInvokeExpr();










 final List<Value> callArgs = ie.getArgs();










 final List<Local> paramLocals = new ArrayList<Local>();










 for(int i=0;i<dest.getParameterCount();i++) {










 paramLocals.add(dest.getActiveBody().getParameterLocal(i));










 } 










 return new FlowFunction<Pair<Value,Type>>() {










 public Set<Pair<Value,Type>> computeTargets(Pair<Value,Type> source) {










 Value value = source.getO1();










 int argIndex = callArgs.indexOf(value);










 if(argIndex>-1) {










 return Collections.singleton(new Pair<Value,Type>(paramLocals.get(argIndex), source.getO2()));










 }










 return Collections.emptySet();










 }










 };










 }





















 public FlowFunction<Pair<Value,Type>> getReturnFlowFunction(Unit callSite, SootMethod callee, Unit exitStmt, Unit retSite) {










 if (exitStmt instanceof ReturnStmt) { 










 ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 Value op = returnStmt.getOp();










 if(op instanceof Local) {










 if(callSite instanceof DefinitionStmt) {










 DefinitionStmt defnStmt = (DefinitionStmt) callSite;










 Value leftOp = defnStmt.getLeftOp();










 if(leftOp instanceof Local) {










 final Local tgtLocal = (Local) leftOp;










 final Local retLocal = (Local) op;










 return new FlowFunction<Pair<Value,Type>>() {





















 public Set<Pair<Value,Type>> computeTargets(Pair<Value,Type> source) {










 if(source==retLocal)










 return Collections.singleton(new Pair<Value,Type>(tgtLocal, source.getO2()));










 return Collections.emptySet();










 }










 










 };










 }










 }










 }










 }










 return KillAll.v();










 }





















 public FlowFunction<Pair<Value,Type>> getCallToReturnFlowFunction(Unit call, Unit returnSite) {










 return Identity.v();










 }










 };










 }





















 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }





















 public Pair<Value,Type> createZeroValue() {










 return new Pair<Value, Type>(Jimple.v().newLocal("<dummy>", UnknownType.v()), UnknownType.v());










 }










}




\ No newline at end of file


package soot.jimple.toolkits.ide.exampleproblems;packagesoot.jimple.toolkits.ide.exampleproblems;import java.util.ArrayList;importjava.util.ArrayList;import java.util.Collections;importjava.util.Collections;import java.util.LinkedHashSet;importjava.util.LinkedHashSet;import java.util.List;importjava.util.List;import java.util.Set;importjava.util.Set;import de.bodden.ide.FlowFunction;importde.bodden.ide.FlowFunction;import de.bodden.ide.FlowFunctions;importde.bodden.ide.FlowFunctions;import de.bodden.ide.InterproceduralCFG;importde.bodden.ide.InterproceduralCFG;import de.bodden.ide.flowfunc.Identity;importde.bodden.ide.flowfunc.Identity;import de.bodden.ide.flowfunc.KillAll;importde.bodden.ide.flowfunc.KillAll;import soot.Local;importsoot.Local;import soot.PointsToAnalysis;importsoot.PointsToAnalysis;import soot.PointsToSet;importsoot.PointsToSet;import soot.PrimType;importsoot.PrimType;import soot.Scene;importsoot.Scene;import soot.SootMethod;importsoot.SootMethod;import soot.Type;importsoot.Type;import soot.Unit;importsoot.Unit;import soot.UnknownType;importsoot.UnknownType;import soot.Value;importsoot.Value;import soot.jimple.ArrayRef;importsoot.jimple.ArrayRef;import soot.jimple.Constant;importsoot.jimple.Constant;import soot.jimple.DefinitionStmt;importsoot.jimple.DefinitionStmt;import soot.jimple.InstanceFieldRef;importsoot.jimple.InstanceFieldRef;import soot.jimple.InvokeExpr;importsoot.jimple.InvokeExpr;import soot.jimple.Jimple;importsoot.jimple.Jimple;import soot.jimple.NewExpr;importsoot.jimple.NewExpr;import soot.jimple.Ref;importsoot.jimple.Ref;import soot.jimple.ReturnStmt;importsoot.jimple.ReturnStmt;import soot.jimple.Stmt;importsoot.jimple.Stmt;import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;importsoot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;import soot.toolkits.scalar.Pair;importsoot.toolkits.scalar.Pair;@SuppressWarnings("serial")@SuppressWarnings("serial")public class IFDSPossibleTypes extends DefaultJimpleIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit, SootMethod>> {publicclassIFDSPossibleTypesextendsDefaultJimpleIFDSTabulationProblem<Pair<Value,Type>,InterproceduralCFG<Unit,SootMethod>>{ public IFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod> icfg) {publicIFDSPossibleTypes(InterproceduralCFG<Unit,SootMethod>icfg){ super(icfg);super(icfg); }} public FlowFunctions<Unit, Pair<Value,Type>, SootMethod> createFlowFunctionsFactory() {publicFlowFunctions<Unit,Pair<Value,Type>,SootMethod>createFlowFunctionsFactory(){ return new FlowFunctions<Unit,Pair<Value,Type>,SootMethod>() {returnnewFlowFunctions<Unit,Pair<Value,Type>,SootMethod>(){ public FlowFunction<Pair<Value,Type>> getNormalFlowFunction(Unit src, Unit dest) {publicFlowFunction<Pair<Value,Type>>getNormalFlowFunction(Unitsrc,Unitdest){ if(src instanceof DefinitionStmt) {if(srcinstanceofDefinitionStmt){ DefinitionStmt defnStmt = (DefinitionStmt) src;DefinitionStmtdefnStmt=(DefinitionStmt)src; if(defnStmt.containsInvokeExpr()) return Identity.v();if(defnStmt.containsInvokeExpr())returnIdentity.v(); final Value right = defnStmt.getRightOp();finalValueright=defnStmt.getRightOp(); final Value left = defnStmt.getLeftOp();finalValueleft=defnStmt.getLeftOp(); //won't track primitive-typed variables//won't track primitive-typed variables if(right.getType() instanceof PrimType) return Identity.v();if(right.getType()instanceofPrimType)returnIdentity.v();  if(right instanceof Constant || right instanceof NewExpr) {if(rightinstanceofConstant||rightinstanceofNewExpr){ return new FlowFunction<Pair<Value,Type>>() {returnnewFlowFunction<Pair<Value,Type>>(){ public Set<Pair<Value, Type>> computeTargets(Pair<Value, Type> source) {publicSet<Pair<Value,Type>>computeTargets(Pair<Value,Type>source){ if(source==new Pair<Value, Type>(Jimple.v().newLocal("<dummy>", UnknownType.v()), UnknownType.v())) {if(source==newPair<Value,Type>(Jimple.v().newLocal("<dummy>",UnknownType.v()),UnknownType.v())){ Set<Pair<Value, Type>> res = new LinkedHashSet<Pair<Value,Type>>();Set<Pair<Value,Type>>res=newLinkedHashSet<Pair<Value,Type>>(); res.add(new Pair<Value,Type>(left,right.getType()));res.add(newPair<Value,Type>(left,right.getType())); res.add(new Pair<Value, Type>(Jimple.v().newLocal("<dummy>", UnknownType.v()), UnknownType.v()));res.add(newPair<Value,Type>(Jimple.v().newLocal("<dummy>",UnknownType.v()),UnknownType.v())); return res;returnres; } else if(source.getO1() instanceof Local && source.getO1().equivTo(left)) {}elseif(source.getO1()instanceofLocal&&source.getO1().equivTo(left)){ //strong update for local variables//strong update for local variables return Collections.emptySet();returnCollections.emptySet(); } else {}else{ return Collections.singleton(source);returnCollections.singleton(source); }} }} };}; } else if(right instanceof Ref || right instanceof Local) {}elseif(rightinstanceofRef||rightinstanceofLocal){ return new FlowFunction<Pair<Value,Type>>() {returnnewFlowFunction<Pair<Value,Type>>(){ public Set<Pair<Value, Type>> computeTargets(final Pair<Value, Type> source) {publicSet<Pair<Value,Type>>computeTargets(finalPair<Value,Type>source){ Value value = source.getO1();Valuevalue=source.getO1(); if(source.getO1() instanceof Local && source.getO1().equivTo(left)) {if(source.getO1()instanceofLocal&&source.getO1().equivTo(left)){ //strong update for local variables//strong update for local variables return Collections.emptySet();returnCollections.emptySet(); } else if(maybeSameLocation(value,right)) {}elseif(maybeSameLocation(value,right)){ return new LinkedHashSet<Pair<Value,Type>>() {{returnnewLinkedHashSet<Pair<Value,Type>>(){{ add(new Pair<Value,Type>(left,source.getO2())); add(newPair<Value,Type>(left,source.getO2())); add(source); add(source); }};}}; } else {}else{ return Collections.singleton(source);returnCollections.singleton(source); }} }} private boolean maybeSameLocation(Value v1, Value v2) {privatebooleanmaybeSameLocation(Valuev1,Valuev2){ if(!(v1 instanceof InstanceFieldRef && v2 instanceof InstanceFieldRef) &&if(!(v1instanceofInstanceFieldRef&&v2instanceofInstanceFieldRef)&& !(v1 instanceof ArrayRef && v2 instanceof ArrayRef)) {!(v1instanceofArrayRef&&v2instanceofArrayRef)){ return v1.equivTo(v2);returnv1.equivTo(v2); }} if(v1 instanceof InstanceFieldRef && v2 instanceof InstanceFieldRef) {if(v1instanceofInstanceFieldRef&&v2instanceofInstanceFieldRef){ InstanceFieldRef ifr1 = (InstanceFieldRef) v1;InstanceFieldRefifr1=(InstanceFieldRef)v1; InstanceFieldRef ifr2 = (InstanceFieldRef) v2;InstanceFieldRefifr2=(InstanceFieldRef)v2; if(!ifr1.getField().getName().equals(ifr2.getField().getName())) return false;if(!ifr1.getField().getName().equals(ifr2.getField().getName()))returnfalse;  Local base1 = (Local) ifr1.getBase();Localbase1=(Local)ifr1.getBase(); Local base2 = (Local) ifr2.getBase();Localbase2=(Local)ifr2.getBase(); PointsToAnalysis pta = Scene.v().getPointsToAnalysis();PointsToAnalysispta=Scene.v().getPointsToAnalysis(); PointsToSet pts1 = pta.reachingObjects(base1);PointsToSetpts1=pta.reachingObjects(base1); PointsToSet pts2 = pta.reachingObjects(base2); PointsToSetpts2=pta.reachingObjects(base2); return pts1.hasNonEmptyIntersection(pts2);returnpts1.hasNonEmptyIntersection(pts2); } else { //v1 instanceof ArrayRef && v2 instanceof ArrayRef}else{//v1 instanceof ArrayRef && v2 instanceof ArrayRef ArrayRef ar1 = (ArrayRef) v1;ArrayRefar1=(ArrayRef)v1; ArrayRef ar2 = (ArrayRef) v2;ArrayRefar2=(ArrayRef)v2; Local base1 = (Local) ar1.getBase();Localbase1=(Local)ar1.getBase(); Local base2 = (Local) ar2.getBase();Localbase2=(Local)ar2.getBase(); PointsToAnalysis pta = Scene.v().getPointsToAnalysis();PointsToAnalysispta=Scene.v().getPointsToAnalysis(); PointsToSet pts1 = pta.reachingObjects(base1);PointsToSetpts1=pta.reachingObjects(base1); PointsToSet pts2 = pta.reachingObjects(base2); PointsToSetpts2=pta.reachingObjects(base2); return pts1.hasNonEmptyIntersection(pts2);returnpts1.hasNonEmptyIntersection(pts2); }} }} };}; } } }} return Identity.v();returnIdentity.v(); }} public FlowFunction<Pair<Value,Type>> getCallFlowFunction(final Unit src, final SootMethod dest) {publicFlowFunction<Pair<Value,Type>>getCallFlowFunction(finalUnitsrc,finalSootMethoddest){ Stmt stmt = (Stmt) src;Stmtstmt=(Stmt)src; InvokeExpr ie = stmt.getInvokeExpr();InvokeExprie=stmt.getInvokeExpr(); final List<Value> callArgs = ie.getArgs();finalList<Value>callArgs=ie.getArgs(); final List<Local> paramLocals = new ArrayList<Local>();finalList<Local>paramLocals=newArrayList<Local>(); for(int i=0;i<dest.getParameterCount();i++) {for(inti=0;i<dest.getParameterCount();i++){ paramLocals.add(dest.getActiveBody().getParameterLocal(i));paramLocals.add(dest.getActiveBody().getParameterLocal(i)); } } return new FlowFunction<Pair<Value,Type>>() {returnnewFlowFunction<Pair<Value,Type>>(){ public Set<Pair<Value,Type>> computeTargets(Pair<Value,Type> source) {publicSet<Pair<Value,Type>>computeTargets(Pair<Value,Type>source){ Value value = source.getO1();Valuevalue=source.getO1(); int argIndex = callArgs.indexOf(value);intargIndex=callArgs.indexOf(value); if(argIndex>-1) {if(argIndex>-1){ return Collections.singleton(new Pair<Value,Type>(paramLocals.get(argIndex), source.getO2()));returnCollections.singleton(newPair<Value,Type>(paramLocals.get(argIndex),source.getO2())); }} return Collections.emptySet();returnCollections.emptySet(); }} };}; }} public FlowFunction<Pair<Value,Type>> getReturnFlowFunction(Unit callSite, SootMethod callee, Unit exitStmt, Unit retSite) {publicFlowFunction<Pair<Value,Type>>getReturnFlowFunction(UnitcallSite,SootMethodcallee,UnitexitStmt,UnitretSite){ if (exitStmt instanceof ReturnStmt) { if(exitStmtinstanceofReturnStmt){ ReturnStmt returnStmt = (ReturnStmt) exitStmt;ReturnStmtreturnStmt=(ReturnStmt)exitStmt; Value op = returnStmt.getOp();Valueop=returnStmt.getOp(); if(op instanceof Local) {if(opinstanceofLocal){ if(callSite instanceof DefinitionStmt) {if(callSiteinstanceofDefinitionStmt){ DefinitionStmt defnStmt = (DefinitionStmt) callSite;DefinitionStmtdefnStmt=(DefinitionStmt)callSite; Value leftOp = defnStmt.getLeftOp();ValueleftOp=defnStmt.getLeftOp(); if(leftOp instanceof Local) {if(leftOpinstanceofLocal){ final Local tgtLocal = (Local) leftOp;finalLocaltgtLocal=(Local)leftOp; final Local retLocal = (Local) op;finalLocalretLocal=(Local)op; return new FlowFunction<Pair<Value,Type>>() {returnnewFlowFunction<Pair<Value,Type>>(){ public Set<Pair<Value,Type>> computeTargets(Pair<Value,Type> source) {publicSet<Pair<Value,Type>>computeTargets(Pair<Value,Type>source){ if(source==retLocal)if(source==retLocal) return Collections.singleton(new Pair<Value,Type>(tgtLocal, source.getO2()));returnCollections.singleton(newPair<Value,Type>(tgtLocal,source.getO2())); return Collections.emptySet();returnCollections.emptySet(); }}  };}; }} }} }} }} return KillAll.v();returnKillAll.v(); }} public FlowFunction<Pair<Value,Type>> getCallToReturnFlowFunction(Unit call, Unit returnSite) {publicFlowFunction<Pair<Value,Type>>getCallToReturnFlowFunction(Unitcall,UnitreturnSite){ return Identity.v();returnIdentity.v(); }} };}; }} public Set<Unit> initialSeeds() {publicSet<Unit>initialSeeds(){ return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());returnCollections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst()); }} public Pair<Value,Type> createZeroValue() {publicPair<Value,Type>createZeroValue(){ return new Pair<Value, Type>(Jimple.v().newLocal("<dummy>", UnknownType.v()), UnknownType.v());returnnewPair<Value,Type>(Jimple.v().newLocal("<dummy>",UnknownType.v()),UnknownType.v()); }}}}








src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSReachingDefinitions.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.KillAll;





















import soot.EquivalentValue;










import soot.Local;










import soot.NullType;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.Value;










import soot.jimple.DefinitionStmt;










import soot.jimple.InvokeExpr;










import soot.jimple.Jimple;










import soot.jimple.ReturnStmt;










import soot.jimple.ReturnVoidStmt;










import soot.jimple.Stmt;










import soot.jimple.internal.JimpleLocal;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;










import soot.toolkits.scalar.Pair;





















public class IFDSReachingDefinitions extends DefaultJimpleIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {










 public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {










 super(icfg);










 }










 










 @Override










 public FlowFunctions<Unit, Pair<Value, Set<DefinitionStmt>>, SootMethod> createFlowFunctionsFactory() {










 return new FlowFunctions<Unit, Pair<Value, Set<DefinitionStmt>>, SootMethod>() {





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getNormalFlowFunction(final Unit curr, Unit succ) {










 if (curr instanceof DefinitionStmt) {










 final DefinitionStmt assignment = (DefinitionStmt) curr;





















 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {










 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if (source != zeroValue()) {










 if (source.getO1().equivTo(assignment.getLeftOp())) {










 return Collections.emptySet();










 }










 return Collections.singleton(source);










 } else {










 LinkedHashSet<Pair<Value, Set<DefinitionStmt>>> res = new LinkedHashSet<Pair<Value, Set<DefinitionStmt>>>();










 res.add(new Pair<Value, Set<DefinitionStmt>>(assignment.getLeftOp(),










 Collections.<DefinitionStmt> singleton(assignment)));










 return res;










 }










 }










 };










 }





















 return Identity.v();










 }





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getCallFlowFunction(Unit callStmt,










 final SootMethod destinationMethod) {










 Stmt stmt = (Stmt) callStmt;










 InvokeExpr invokeExpr = stmt.getInvokeExpr();










 final List<Value> args = invokeExpr.getArgs();





















 final List<Local> localArguments = new ArrayList<Local>(args.size());










 for (Value value : args) {










 if (value instanceof Local)










 localArguments.add((Local) value);










 else










 localArguments.add(null);










 }





















 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {





















 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if(localArguments.contains(source.getO1())) {










 int paramIndex = args.indexOf(source.getO1());










 Pair<Value, Set<DefinitionStmt>> pair = new Pair<Value, Set<DefinitionStmt>>(










 new EquivalentValue(Jimple.v().newParameterRef(destinationMethod.getParameterType(paramIndex), paramIndex)),










 source.getO2());










 return Collections.singleton(pair);










 }





















 return Collections.emptySet();










 }










 };










 }





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getReturnFlowFunction(final Unit callSite,










 SootMethod calleeMethod, final Unit exitStmt, Unit returnSite) {










 if (!(callSite instanceof DefinitionStmt))










 return KillAll.v();





















 if (exitStmt instanceof ReturnVoidStmt)










 return KillAll.v();





















 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {





















 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if(exitStmt instanceof ReturnStmt) {










 ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 if (returnStmt.getOp().equivTo(source.getO1())) {










 DefinitionStmt definitionStmt = (DefinitionStmt) callSite;










 Pair<Value, Set<DefinitionStmt>> pair = new Pair<Value, Set<DefinitionStmt>>(










 definitionStmt.getLeftOp(), source.getO2());










 return Collections.singleton(pair);










 }










 }










 return Collections.emptySet();










 }










 };










 }





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getCallToReturnFlowFunction(Unit callSite, Unit returnSite) {










 if (!(callSite instanceof DefinitionStmt))










 return Identity.v();










 










 final DefinitionStmt definitionStmt = (DefinitionStmt) callSite;










 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {





















 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if(source.getO1().equivTo(definitionStmt.getLeftOp())) {










 return Collections.emptySet();










 } else {










 return Collections.singleton(source);










 }










 }










 };










 }










 };










 }





















 @Override










 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }





















 public Pair<Value, Set<DefinitionStmt>> createZeroValue() {










 return new Pair<Value, Set<DefinitionStmt>>(new JimpleLocal("<<zero>>", NullType.v()), Collections.<DefinitionStmt> emptySet());










 }





















}












src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSReachingDefinitions.java

deleted


100644 → 0







View file @ f7c0f2f6








src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSReachingDefinitions.java

deleted


100644 → 0









View file @ f7c0f2f6


f7c0f2f6










package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.KillAll;





















import soot.EquivalentValue;










import soot.Local;










import soot.NullType;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.Value;










import soot.jimple.DefinitionStmt;










import soot.jimple.InvokeExpr;










import soot.jimple.Jimple;










import soot.jimple.ReturnStmt;










import soot.jimple.ReturnVoidStmt;










import soot.jimple.Stmt;










import soot.jimple.internal.JimpleLocal;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;










import soot.toolkits.scalar.Pair;





















public class IFDSReachingDefinitions extends DefaultJimpleIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {










 public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {










 super(icfg);










 }










 










 @Override










 public FlowFunctions<Unit, Pair<Value, Set<DefinitionStmt>>, SootMethod> createFlowFunctionsFactory() {










 return new FlowFunctions<Unit, Pair<Value, Set<DefinitionStmt>>, SootMethod>() {





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getNormalFlowFunction(final Unit curr, Unit succ) {










 if (curr instanceof DefinitionStmt) {










 final DefinitionStmt assignment = (DefinitionStmt) curr;





















 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {










 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if (source != zeroValue()) {










 if (source.getO1().equivTo(assignment.getLeftOp())) {










 return Collections.emptySet();










 }










 return Collections.singleton(source);










 } else {










 LinkedHashSet<Pair<Value, Set<DefinitionStmt>>> res = new LinkedHashSet<Pair<Value, Set<DefinitionStmt>>>();










 res.add(new Pair<Value, Set<DefinitionStmt>>(assignment.getLeftOp(),










 Collections.<DefinitionStmt> singleton(assignment)));










 return res;










 }










 }










 };










 }





















 return Identity.v();










 }





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getCallFlowFunction(Unit callStmt,










 final SootMethod destinationMethod) {










 Stmt stmt = (Stmt) callStmt;










 InvokeExpr invokeExpr = stmt.getInvokeExpr();










 final List<Value> args = invokeExpr.getArgs();





















 final List<Local> localArguments = new ArrayList<Local>(args.size());










 for (Value value : args) {










 if (value instanceof Local)










 localArguments.add((Local) value);










 else










 localArguments.add(null);










 }





















 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {





















 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if(localArguments.contains(source.getO1())) {










 int paramIndex = args.indexOf(source.getO1());










 Pair<Value, Set<DefinitionStmt>> pair = new Pair<Value, Set<DefinitionStmt>>(










 new EquivalentValue(Jimple.v().newParameterRef(destinationMethod.getParameterType(paramIndex), paramIndex)),










 source.getO2());










 return Collections.singleton(pair);










 }





















 return Collections.emptySet();










 }










 };










 }





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getReturnFlowFunction(final Unit callSite,










 SootMethod calleeMethod, final Unit exitStmt, Unit returnSite) {










 if (!(callSite instanceof DefinitionStmt))










 return KillAll.v();





















 if (exitStmt instanceof ReturnVoidStmt)










 return KillAll.v();





















 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {





















 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if(exitStmt instanceof ReturnStmt) {










 ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 if (returnStmt.getOp().equivTo(source.getO1())) {










 DefinitionStmt definitionStmt = (DefinitionStmt) callSite;










 Pair<Value, Set<DefinitionStmt>> pair = new Pair<Value, Set<DefinitionStmt>>(










 definitionStmt.getLeftOp(), source.getO2());










 return Collections.singleton(pair);










 }










 }










 return Collections.emptySet();










 }










 };










 }





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getCallToReturnFlowFunction(Unit callSite, Unit returnSite) {










 if (!(callSite instanceof DefinitionStmt))










 return Identity.v();










 










 final DefinitionStmt definitionStmt = (DefinitionStmt) callSite;










 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {





















 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if(source.getO1().equivTo(definitionStmt.getLeftOp())) {










 return Collections.emptySet();










 } else {










 return Collections.singleton(source);










 }










 }










 };










 }










 };










 }





















 @Override










 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }





















 public Pair<Value, Set<DefinitionStmt>> createZeroValue() {










 return new Pair<Value, Set<DefinitionStmt>>(new JimpleLocal("<<zero>>", NullType.v()), Collections.<DefinitionStmt> emptySet());










 }





















}













package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.KillAll;





















import soot.EquivalentValue;










import soot.Local;










import soot.NullType;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.Value;










import soot.jimple.DefinitionStmt;










import soot.jimple.InvokeExpr;










import soot.jimple.Jimple;










import soot.jimple.ReturnStmt;










import soot.jimple.ReturnVoidStmt;










import soot.jimple.Stmt;










import soot.jimple.internal.JimpleLocal;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;










import soot.toolkits.scalar.Pair;





















public class IFDSReachingDefinitions extends DefaultJimpleIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {










 public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {










 super(icfg);










 }










 










 @Override










 public FlowFunctions<Unit, Pair<Value, Set<DefinitionStmt>>, SootMethod> createFlowFunctionsFactory() {










 return new FlowFunctions<Unit, Pair<Value, Set<DefinitionStmt>>, SootMethod>() {





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getNormalFlowFunction(final Unit curr, Unit succ) {










 if (curr instanceof DefinitionStmt) {










 final DefinitionStmt assignment = (DefinitionStmt) curr;





















 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {










 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if (source != zeroValue()) {










 if (source.getO1().equivTo(assignment.getLeftOp())) {










 return Collections.emptySet();










 }










 return Collections.singleton(source);










 } else {










 LinkedHashSet<Pair<Value, Set<DefinitionStmt>>> res = new LinkedHashSet<Pair<Value, Set<DefinitionStmt>>>();










 res.add(new Pair<Value, Set<DefinitionStmt>>(assignment.getLeftOp(),










 Collections.<DefinitionStmt> singleton(assignment)));










 return res;










 }










 }










 };










 }





















 return Identity.v();










 }





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getCallFlowFunction(Unit callStmt,










 final SootMethod destinationMethod) {










 Stmt stmt = (Stmt) callStmt;










 InvokeExpr invokeExpr = stmt.getInvokeExpr();










 final List<Value> args = invokeExpr.getArgs();





















 final List<Local> localArguments = new ArrayList<Local>(args.size());










 for (Value value : args) {










 if (value instanceof Local)










 localArguments.add((Local) value);










 else










 localArguments.add(null);










 }





















 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {





















 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if(localArguments.contains(source.getO1())) {










 int paramIndex = args.indexOf(source.getO1());










 Pair<Value, Set<DefinitionStmt>> pair = new Pair<Value, Set<DefinitionStmt>>(










 new EquivalentValue(Jimple.v().newParameterRef(destinationMethod.getParameterType(paramIndex), paramIndex)),










 source.getO2());










 return Collections.singleton(pair);










 }





















 return Collections.emptySet();










 }










 };










 }





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getReturnFlowFunction(final Unit callSite,










 SootMethod calleeMethod, final Unit exitStmt, Unit returnSite) {










 if (!(callSite instanceof DefinitionStmt))










 return KillAll.v();





















 if (exitStmt instanceof ReturnVoidStmt)










 return KillAll.v();





















 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {





















 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if(exitStmt instanceof ReturnStmt) {










 ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 if (returnStmt.getOp().equivTo(source.getO1())) {










 DefinitionStmt definitionStmt = (DefinitionStmt) callSite;










 Pair<Value, Set<DefinitionStmt>> pair = new Pair<Value, Set<DefinitionStmt>>(










 definitionStmt.getLeftOp(), source.getO2());










 return Collections.singleton(pair);










 }










 }










 return Collections.emptySet();










 }










 };










 }





















 @Override










 public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getCallToReturnFlowFunction(Unit callSite, Unit returnSite) {










 if (!(callSite instanceof DefinitionStmt))










 return Identity.v();










 










 final DefinitionStmt definitionStmt = (DefinitionStmt) callSite;










 return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {





















 @Override










 public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {










 if(source.getO1().equivTo(definitionStmt.getLeftOp())) {










 return Collections.emptySet();










 } else {










 return Collections.singleton(source);










 }










 }










 };










 }










 };










 }





















 @Override










 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }





















 public Pair<Value, Set<DefinitionStmt>> createZeroValue() {










 return new Pair<Value, Set<DefinitionStmt>>(new JimpleLocal("<<zero>>", NullType.v()), Collections.<DefinitionStmt> emptySet());










 }





















}


package soot.jimple.toolkits.ide.exampleproblems;packagesoot.jimple.toolkits.ide.exampleproblems;import java.util.ArrayList;importjava.util.ArrayList;import java.util.Collections;importjava.util.Collections;import java.util.LinkedHashSet;importjava.util.LinkedHashSet;import java.util.List;importjava.util.List;import java.util.Set;importjava.util.Set;import de.bodden.ide.FlowFunction;importde.bodden.ide.FlowFunction;import de.bodden.ide.FlowFunctions;importde.bodden.ide.FlowFunctions;import de.bodden.ide.InterproceduralCFG;importde.bodden.ide.InterproceduralCFG;import de.bodden.ide.flowfunc.Identity;importde.bodden.ide.flowfunc.Identity;import de.bodden.ide.flowfunc.KillAll;importde.bodden.ide.flowfunc.KillAll;import soot.EquivalentValue;importsoot.EquivalentValue;import soot.Local;importsoot.Local;import soot.NullType;importsoot.NullType;import soot.Scene;importsoot.Scene;import soot.SootMethod;importsoot.SootMethod;import soot.Unit;importsoot.Unit;import soot.Value;importsoot.Value;import soot.jimple.DefinitionStmt;importsoot.jimple.DefinitionStmt;import soot.jimple.InvokeExpr;importsoot.jimple.InvokeExpr;import soot.jimple.Jimple;importsoot.jimple.Jimple;import soot.jimple.ReturnStmt;importsoot.jimple.ReturnStmt;import soot.jimple.ReturnVoidStmt;importsoot.jimple.ReturnVoidStmt;import soot.jimple.Stmt;importsoot.jimple.Stmt;import soot.jimple.internal.JimpleLocal;importsoot.jimple.internal.JimpleLocal;import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;importsoot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;import soot.toolkits.scalar.Pair;importsoot.toolkits.scalar.Pair;public class IFDSReachingDefinitions extends DefaultJimpleIFDSTabulationProblem<Pair<Value, Set<DefinitionStmt>>,InterproceduralCFG<Unit, SootMethod>> {publicclassIFDSReachingDefinitionsextendsDefaultJimpleIFDSTabulationProblem<Pair<Value,Set<DefinitionStmt>>,InterproceduralCFG<Unit,SootMethod>>{ public IFDSReachingDefinitions(InterproceduralCFG<Unit, SootMethod> icfg) {publicIFDSReachingDefinitions(InterproceduralCFG<Unit,SootMethod>icfg){ super(icfg);super(icfg); }}  @Override@Override public FlowFunctions<Unit, Pair<Value, Set<DefinitionStmt>>, SootMethod> createFlowFunctionsFactory() {publicFlowFunctions<Unit,Pair<Value,Set<DefinitionStmt>>,SootMethod>createFlowFunctionsFactory(){ return new FlowFunctions<Unit, Pair<Value, Set<DefinitionStmt>>, SootMethod>() {returnnewFlowFunctions<Unit,Pair<Value,Set<DefinitionStmt>>,SootMethod>(){ @Override@Override public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getNormalFlowFunction(final Unit curr, Unit succ) {publicFlowFunction<Pair<Value,Set<DefinitionStmt>>>getNormalFlowFunction(finalUnitcurr,Unitsucc){ if (curr instanceof DefinitionStmt) {if(currinstanceofDefinitionStmt){ final DefinitionStmt assignment = (DefinitionStmt) curr;finalDefinitionStmtassignment=(DefinitionStmt)curr; return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {returnnewFlowFunction<Pair<Value,Set<DefinitionStmt>>>(){ @Override@Override public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {publicSet<Pair<Value,Set<DefinitionStmt>>>computeTargets(Pair<Value,Set<DefinitionStmt>>source){ if (source != zeroValue()) {if(source!=zeroValue()){ if (source.getO1().equivTo(assignment.getLeftOp())) {if(source.getO1().equivTo(assignment.getLeftOp())){ return Collections.emptySet();returnCollections.emptySet(); }} return Collections.singleton(source);returnCollections.singleton(source); } else {}else{ LinkedHashSet<Pair<Value, Set<DefinitionStmt>>> res = new LinkedHashSet<Pair<Value, Set<DefinitionStmt>>>();LinkedHashSet<Pair<Value,Set<DefinitionStmt>>>res=newLinkedHashSet<Pair<Value,Set<DefinitionStmt>>>(); res.add(new Pair<Value, Set<DefinitionStmt>>(assignment.getLeftOp(),res.add(newPair<Value,Set<DefinitionStmt>>(assignment.getLeftOp(), Collections.<DefinitionStmt> singleton(assignment)));Collections.<DefinitionStmt>singleton(assignment))); return res;returnres; }} }} };}; }} return Identity.v();returnIdentity.v(); }} @Override@Override public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getCallFlowFunction(Unit callStmt,publicFlowFunction<Pair<Value,Set<DefinitionStmt>>>getCallFlowFunction(UnitcallStmt, final SootMethod destinationMethod) {finalSootMethoddestinationMethod){ Stmt stmt = (Stmt) callStmt;Stmtstmt=(Stmt)callStmt; InvokeExpr invokeExpr = stmt.getInvokeExpr();InvokeExprinvokeExpr=stmt.getInvokeExpr(); final List<Value> args = invokeExpr.getArgs();finalList<Value>args=invokeExpr.getArgs(); final List<Local> localArguments = new ArrayList<Local>(args.size());finalList<Local>localArguments=newArrayList<Local>(args.size()); for (Value value : args) {for(Valuevalue:args){ if (value instanceof Local)if(valueinstanceofLocal) localArguments.add((Local) value);localArguments.add((Local)value); elseelse localArguments.add(null);localArguments.add(null); }} return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {returnnewFlowFunction<Pair<Value,Set<DefinitionStmt>>>(){ @Override@Override public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {publicSet<Pair<Value,Set<DefinitionStmt>>>computeTargets(Pair<Value,Set<DefinitionStmt>>source){ if(localArguments.contains(source.getO1())) {if(localArguments.contains(source.getO1())){ int paramIndex = args.indexOf(source.getO1());intparamIndex=args.indexOf(source.getO1()); Pair<Value, Set<DefinitionStmt>> pair = new Pair<Value, Set<DefinitionStmt>>(Pair<Value,Set<DefinitionStmt>>pair=newPair<Value,Set<DefinitionStmt>>( new EquivalentValue(Jimple.v().newParameterRef(destinationMethod.getParameterType(paramIndex), paramIndex)),newEquivalentValue(Jimple.v().newParameterRef(destinationMethod.getParameterType(paramIndex),paramIndex)), source.getO2());source.getO2()); return Collections.singleton(pair);returnCollections.singleton(pair); }} return Collections.emptySet();returnCollections.emptySet(); }} };}; }} @Override@Override public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getReturnFlowFunction(final Unit callSite,publicFlowFunction<Pair<Value,Set<DefinitionStmt>>>getReturnFlowFunction(finalUnitcallSite, SootMethod calleeMethod, final Unit exitStmt, Unit returnSite) {SootMethodcalleeMethod,finalUnitexitStmt,UnitreturnSite){ if (!(callSite instanceof DefinitionStmt))if(!(callSiteinstanceofDefinitionStmt)) return KillAll.v();returnKillAll.v(); if (exitStmt instanceof ReturnVoidStmt)if(exitStmtinstanceofReturnVoidStmt) return KillAll.v();returnKillAll.v(); return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {returnnewFlowFunction<Pair<Value,Set<DefinitionStmt>>>(){ @Override@Override public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {publicSet<Pair<Value,Set<DefinitionStmt>>>computeTargets(Pair<Value,Set<DefinitionStmt>>source){ if(exitStmt instanceof ReturnStmt) {if(exitStmtinstanceofReturnStmt){ ReturnStmt returnStmt = (ReturnStmt) exitStmt;ReturnStmtreturnStmt=(ReturnStmt)exitStmt; if (returnStmt.getOp().equivTo(source.getO1())) {if(returnStmt.getOp().equivTo(source.getO1())){ DefinitionStmt definitionStmt = (DefinitionStmt) callSite;DefinitionStmtdefinitionStmt=(DefinitionStmt)callSite; Pair<Value, Set<DefinitionStmt>> pair = new Pair<Value, Set<DefinitionStmt>>(Pair<Value,Set<DefinitionStmt>>pair=newPair<Value,Set<DefinitionStmt>>( definitionStmt.getLeftOp(), source.getO2());definitionStmt.getLeftOp(),source.getO2()); return Collections.singleton(pair);returnCollections.singleton(pair); }} }} return Collections.emptySet();returnCollections.emptySet(); }} };}; }} @Override@Override public FlowFunction<Pair<Value, Set<DefinitionStmt>>> getCallToReturnFlowFunction(Unit callSite, Unit returnSite) {publicFlowFunction<Pair<Value,Set<DefinitionStmt>>>getCallToReturnFlowFunction(UnitcallSite,UnitreturnSite){ if (!(callSite instanceof DefinitionStmt))if(!(callSiteinstanceofDefinitionStmt)) return Identity.v();returnIdentity.v();  final DefinitionStmt definitionStmt = (DefinitionStmt) callSite;finalDefinitionStmtdefinitionStmt=(DefinitionStmt)callSite; return new FlowFunction<Pair<Value, Set<DefinitionStmt>>>() {returnnewFlowFunction<Pair<Value,Set<DefinitionStmt>>>(){ @Override@Override public Set<Pair<Value, Set<DefinitionStmt>>> computeTargets(Pair<Value, Set<DefinitionStmt>> source) {publicSet<Pair<Value,Set<DefinitionStmt>>>computeTargets(Pair<Value,Set<DefinitionStmt>>source){ if(source.getO1().equivTo(definitionStmt.getLeftOp())) {if(source.getO1().equivTo(definitionStmt.getLeftOp())){ return Collections.emptySet();returnCollections.emptySet(); } else {}else{ return Collections.singleton(source);returnCollections.singleton(source); }} }} };}; }} };}; }} @Override@Override public Set<Unit> initialSeeds() {publicSet<Unit>initialSeeds(){ return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());returnCollections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst()); }} public Pair<Value, Set<DefinitionStmt>> createZeroValue() {publicPair<Value,Set<DefinitionStmt>>createZeroValue(){ return new Pair<Value, Set<DefinitionStmt>>(new JimpleLocal("<<zero>>", NullType.v()), Collections.<DefinitionStmt> emptySet());returnnewPair<Value,Set<DefinitionStmt>>(newJimpleLocal("<<zero>>",NullType.v()),Collections.<DefinitionStmt>emptySet()); }}}}








src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSUninitializedVariables.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.Kill;










import de.bodden.ide.flowfunc.KillAll;





















import soot.Local;










import soot.NullType;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.Value;










import soot.ValueBox;










import soot.jimple.DefinitionStmt;










import soot.jimple.InvokeExpr;










import soot.jimple.ReturnStmt;










import soot.jimple.Stmt;










import soot.jimple.ThrowStmt;










import soot.jimple.internal.JimpleLocal;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;










import soot.util.Chain;





















public class IFDSUninitializedVariables extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {










 super(icfg); 










 }





















 @Override










 public FlowFunctions<Unit, Local, SootMethod> createFlowFunctionsFactory() {










 return new FlowFunctions<Unit, Local, SootMethod>() {





















 @Override










 public FlowFunction<Local> getNormalFlowFunction(Unit curr, Unit succ) {










 final SootMethod m = interproceduralCFG().getMethodOf(curr);










 if(Scene.v().getEntryPoints().contains(m) && interproceduralCFG().isStartPoint(curr)) {










 return new FlowFunction<Local>() {










 










 @Override










 public Set<Local> computeTargets(Local source) {










 if (source == zeroValue()) {










 Set<Local> res = new LinkedHashSet<Local>();










 res.addAll(m.getActiveBody().getLocals());










 for(int i=0;i<m.getParameterCount();i++) 










 res.remove(m.getActiveBody().getParameterLocal(i));










 return res;










 }










 return Collections.emptySet();










 }










 };










 }










 










 if (curr instanceof DefinitionStmt) {










 final DefinitionStmt definition = (DefinitionStmt) curr;










 final Value leftOp = definition.getLeftOp();










 if(leftOp instanceof Local) {










 final Local leftOpLocal = (Local) leftOp;










 return new FlowFunction<Local>() {





















 @Override










 public Set<Local> computeTargets(final Local source) {










 List<ValueBox> useBoxes = definition.getUseBoxes();










 for (ValueBox valueBox : useBoxes) {










 if (valueBox.getValue().equivTo(source)) {










 LinkedHashSet<Local> res = new LinkedHashSet<Local>();










 res.add(source);










 res.add(leftOpLocal); 










 return res;










 }










 }





















 if (leftOp.equivTo(source))










 return Collections.emptySet();





















 return Collections.singleton(source);










 }





















 };










 }










 }





















 return Identity.v();










 }





















 @Override










 public FlowFunction<Local> getCallFlowFunction(Unit callStmt, final SootMethod destinationMethod) {










 Stmt stmt = (Stmt) callStmt;










 InvokeExpr invokeExpr = stmt.getInvokeExpr();










 final List<Value> args = invokeExpr.getArgs();





















 final List<Local> localArguments = new ArrayList<Local>();










 for (Value value : args)










 if (value instanceof Local)










 localArguments.add((Local) value);





















 return new FlowFunction<Local>() {





















 @Override










 public Set<Local> computeTargets(final Local source) {










 for (Local localArgument : localArguments) {










 if (source.equivTo(localArgument)) {










 return Collections.<Local>singleton(destinationMethod.getActiveBody().getParameterLocal(args.indexOf(localArgument)));










 }










 }





















 if (source == zeroValue()) {










 //gen all locals that are not parameter locals 










 Chain<Local> locals = destinationMethod.getActiveBody().getLocals();










 LinkedHashSet<Local> uninitializedLocals = new LinkedHashSet<Local>(locals);










 for(int i=0;i<destinationMethod.getParameterCount();i++) { 










 uninitializedLocals.remove(destinationMethod.getActiveBody().getParameterLocal(i));










 }










 return uninitializedLocals;










 }





















 return Collections.emptySet();










 }





















 };










 }





















 @Override










 public FlowFunction<Local> getReturnFlowFunction(final Unit callSite, SootMethod calleeMethod,










 final Unit exitStmt, Unit returnSite) {










 if (callSite instanceof DefinitionStmt) {










 final DefinitionStmt definition = (DefinitionStmt) callSite;










 if(definition.getLeftOp() instanceof Local) {










 final Local leftOpLocal = (Local) definition.getLeftOp(); 










 if (exitStmt instanceof ReturnStmt) {










 final ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 return new FlowFunction<Local>() {










 










 @Override










 public Set<Local> computeTargets(Local source) {










 if (returnStmt.getOp().equivTo(source))










 return Collections.singleton(leftOpLocal);










 return Collections.emptySet();










 }










 










 };










 } else if (exitStmt instanceof ThrowStmt) {










 //if we throw an exception, LHS of call is undefined










 return new FlowFunction<Local>() {










 










 @Override










 public Set<Local> computeTargets(final Local source) {










 if (source == zeroValue())










 return Collections.singleton(leftOpLocal);










 else










 return Collections.emptySet();










 }










 










 };










 }










 }










 }










 










 return KillAll.v();










 }





















 @Override










 public FlowFunction<Local> getCallToReturnFlowFunction(Unit callSite, Unit returnSite) {










 if (callSite instanceof DefinitionStmt) {










 DefinitionStmt definition = (DefinitionStmt) callSite;










 if(definition.getLeftOp() instanceof Local) {










 final Local leftOpLocal = (Local) definition.getLeftOp(); 










 return new Kill<Local>(leftOpLocal);










 }










 }










 return Identity.v();










 }










 };










 }










 @Override










 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }





















 @Override










 public Local createZeroValue() {










 return new JimpleLocal("<<zero>>", NullType.v());










 }





















}












src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSUninitializedVariables.java

deleted


100644 → 0







View file @ f7c0f2f6








src-soot/soot/jimple/toolkits/ide/exampleproblems/IFDSUninitializedVariables.java

deleted


100644 → 0









View file @ f7c0f2f6


f7c0f2f6










package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.Kill;










import de.bodden.ide.flowfunc.KillAll;





















import soot.Local;










import soot.NullType;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.Value;










import soot.ValueBox;










import soot.jimple.DefinitionStmt;










import soot.jimple.InvokeExpr;










import soot.jimple.ReturnStmt;










import soot.jimple.Stmt;










import soot.jimple.ThrowStmt;










import soot.jimple.internal.JimpleLocal;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;










import soot.util.Chain;





















public class IFDSUninitializedVariables extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {










 super(icfg); 










 }





















 @Override










 public FlowFunctions<Unit, Local, SootMethod> createFlowFunctionsFactory() {










 return new FlowFunctions<Unit, Local, SootMethod>() {





















 @Override










 public FlowFunction<Local> getNormalFlowFunction(Unit curr, Unit succ) {










 final SootMethod m = interproceduralCFG().getMethodOf(curr);










 if(Scene.v().getEntryPoints().contains(m) && interproceduralCFG().isStartPoint(curr)) {










 return new FlowFunction<Local>() {










 










 @Override










 public Set<Local> computeTargets(Local source) {










 if (source == zeroValue()) {










 Set<Local> res = new LinkedHashSet<Local>();










 res.addAll(m.getActiveBody().getLocals());










 for(int i=0;i<m.getParameterCount();i++) 










 res.remove(m.getActiveBody().getParameterLocal(i));










 return res;










 }










 return Collections.emptySet();










 }










 };










 }










 










 if (curr instanceof DefinitionStmt) {










 final DefinitionStmt definition = (DefinitionStmt) curr;










 final Value leftOp = definition.getLeftOp();










 if(leftOp instanceof Local) {










 final Local leftOpLocal = (Local) leftOp;










 return new FlowFunction<Local>() {





















 @Override










 public Set<Local> computeTargets(final Local source) {










 List<ValueBox> useBoxes = definition.getUseBoxes();










 for (ValueBox valueBox : useBoxes) {










 if (valueBox.getValue().equivTo(source)) {










 LinkedHashSet<Local> res = new LinkedHashSet<Local>();










 res.add(source);










 res.add(leftOpLocal); 










 return res;










 }










 }





















 if (leftOp.equivTo(source))










 return Collections.emptySet();





















 return Collections.singleton(source);










 }





















 };










 }










 }





















 return Identity.v();










 }





















 @Override










 public FlowFunction<Local> getCallFlowFunction(Unit callStmt, final SootMethod destinationMethod) {










 Stmt stmt = (Stmt) callStmt;










 InvokeExpr invokeExpr = stmt.getInvokeExpr();










 final List<Value> args = invokeExpr.getArgs();





















 final List<Local> localArguments = new ArrayList<Local>();










 for (Value value : args)










 if (value instanceof Local)










 localArguments.add((Local) value);





















 return new FlowFunction<Local>() {





















 @Override










 public Set<Local> computeTargets(final Local source) {










 for (Local localArgument : localArguments) {










 if (source.equivTo(localArgument)) {










 return Collections.<Local>singleton(destinationMethod.getActiveBody().getParameterLocal(args.indexOf(localArgument)));










 }










 }





















 if (source == zeroValue()) {










 //gen all locals that are not parameter locals 










 Chain<Local> locals = destinationMethod.getActiveBody().getLocals();










 LinkedHashSet<Local> uninitializedLocals = new LinkedHashSet<Local>(locals);










 for(int i=0;i<destinationMethod.getParameterCount();i++) { 










 uninitializedLocals.remove(destinationMethod.getActiveBody().getParameterLocal(i));










 }










 return uninitializedLocals;










 }





















 return Collections.emptySet();










 }





















 };










 }





















 @Override










 public FlowFunction<Local> getReturnFlowFunction(final Unit callSite, SootMethod calleeMethod,










 final Unit exitStmt, Unit returnSite) {










 if (callSite instanceof DefinitionStmt) {










 final DefinitionStmt definition = (DefinitionStmt) callSite;










 if(definition.getLeftOp() instanceof Local) {










 final Local leftOpLocal = (Local) definition.getLeftOp(); 










 if (exitStmt instanceof ReturnStmt) {










 final ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 return new FlowFunction<Local>() {










 










 @Override










 public Set<Local> computeTargets(Local source) {










 if (returnStmt.getOp().equivTo(source))










 return Collections.singleton(leftOpLocal);










 return Collections.emptySet();










 }










 










 };










 } else if (exitStmt instanceof ThrowStmt) {










 //if we throw an exception, LHS of call is undefined










 return new FlowFunction<Local>() {










 










 @Override










 public Set<Local> computeTargets(final Local source) {










 if (source == zeroValue())










 return Collections.singleton(leftOpLocal);










 else










 return Collections.emptySet();










 }










 










 };










 }










 }










 }










 










 return KillAll.v();










 }





















 @Override










 public FlowFunction<Local> getCallToReturnFlowFunction(Unit callSite, Unit returnSite) {










 if (callSite instanceof DefinitionStmt) {










 DefinitionStmt definition = (DefinitionStmt) callSite;










 if(definition.getLeftOp() instanceof Local) {










 final Local leftOpLocal = (Local) definition.getLeftOp(); 










 return new Kill<Local>(leftOpLocal);










 }










 }










 return Identity.v();










 }










 };










 }










 @Override










 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }





















 @Override










 public Local createZeroValue() {










 return new JimpleLocal("<<zero>>", NullType.v());










 }





















}













package soot.jimple.toolkits.ide.exampleproblems;





















import java.util.ArrayList;










import java.util.Collections;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Set;





















import de.bodden.ide.FlowFunction;










import de.bodden.ide.FlowFunctions;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.flowfunc.Identity;










import de.bodden.ide.flowfunc.Kill;










import de.bodden.ide.flowfunc.KillAll;





















import soot.Local;










import soot.NullType;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.Value;










import soot.ValueBox;










import soot.jimple.DefinitionStmt;










import soot.jimple.InvokeExpr;










import soot.jimple.ReturnStmt;










import soot.jimple.Stmt;










import soot.jimple.ThrowStmt;










import soot.jimple.internal.JimpleLocal;










import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;










import soot.util.Chain;





















public class IFDSUninitializedVariables extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {





















 public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {










 super(icfg); 










 }





















 @Override










 public FlowFunctions<Unit, Local, SootMethod> createFlowFunctionsFactory() {










 return new FlowFunctions<Unit, Local, SootMethod>() {





















 @Override










 public FlowFunction<Local> getNormalFlowFunction(Unit curr, Unit succ) {










 final SootMethod m = interproceduralCFG().getMethodOf(curr);










 if(Scene.v().getEntryPoints().contains(m) && interproceduralCFG().isStartPoint(curr)) {










 return new FlowFunction<Local>() {










 










 @Override










 public Set<Local> computeTargets(Local source) {










 if (source == zeroValue()) {










 Set<Local> res = new LinkedHashSet<Local>();










 res.addAll(m.getActiveBody().getLocals());










 for(int i=0;i<m.getParameterCount();i++) 










 res.remove(m.getActiveBody().getParameterLocal(i));










 return res;










 }










 return Collections.emptySet();










 }










 };










 }










 










 if (curr instanceof DefinitionStmt) {










 final DefinitionStmt definition = (DefinitionStmt) curr;










 final Value leftOp = definition.getLeftOp();










 if(leftOp instanceof Local) {










 final Local leftOpLocal = (Local) leftOp;










 return new FlowFunction<Local>() {





















 @Override










 public Set<Local> computeTargets(final Local source) {










 List<ValueBox> useBoxes = definition.getUseBoxes();










 for (ValueBox valueBox : useBoxes) {










 if (valueBox.getValue().equivTo(source)) {










 LinkedHashSet<Local> res = new LinkedHashSet<Local>();










 res.add(source);










 res.add(leftOpLocal); 










 return res;










 }










 }





















 if (leftOp.equivTo(source))










 return Collections.emptySet();





















 return Collections.singleton(source);










 }





















 };










 }










 }





















 return Identity.v();










 }





















 @Override










 public FlowFunction<Local> getCallFlowFunction(Unit callStmt, final SootMethod destinationMethod) {










 Stmt stmt = (Stmt) callStmt;










 InvokeExpr invokeExpr = stmt.getInvokeExpr();










 final List<Value> args = invokeExpr.getArgs();





















 final List<Local> localArguments = new ArrayList<Local>();










 for (Value value : args)










 if (value instanceof Local)










 localArguments.add((Local) value);





















 return new FlowFunction<Local>() {





















 @Override










 public Set<Local> computeTargets(final Local source) {










 for (Local localArgument : localArguments) {










 if (source.equivTo(localArgument)) {










 return Collections.<Local>singleton(destinationMethod.getActiveBody().getParameterLocal(args.indexOf(localArgument)));










 }










 }





















 if (source == zeroValue()) {










 //gen all locals that are not parameter locals 










 Chain<Local> locals = destinationMethod.getActiveBody().getLocals();










 LinkedHashSet<Local> uninitializedLocals = new LinkedHashSet<Local>(locals);










 for(int i=0;i<destinationMethod.getParameterCount();i++) { 










 uninitializedLocals.remove(destinationMethod.getActiveBody().getParameterLocal(i));










 }










 return uninitializedLocals;










 }





















 return Collections.emptySet();










 }





















 };










 }





















 @Override










 public FlowFunction<Local> getReturnFlowFunction(final Unit callSite, SootMethod calleeMethod,










 final Unit exitStmt, Unit returnSite) {










 if (callSite instanceof DefinitionStmt) {










 final DefinitionStmt definition = (DefinitionStmt) callSite;










 if(definition.getLeftOp() instanceof Local) {










 final Local leftOpLocal = (Local) definition.getLeftOp(); 










 if (exitStmt instanceof ReturnStmt) {










 final ReturnStmt returnStmt = (ReturnStmt) exitStmt;










 return new FlowFunction<Local>() {










 










 @Override










 public Set<Local> computeTargets(Local source) {










 if (returnStmt.getOp().equivTo(source))










 return Collections.singleton(leftOpLocal);










 return Collections.emptySet();










 }










 










 };










 } else if (exitStmt instanceof ThrowStmt) {










 //if we throw an exception, LHS of call is undefined










 return new FlowFunction<Local>() {










 










 @Override










 public Set<Local> computeTargets(final Local source) {










 if (source == zeroValue())










 return Collections.singleton(leftOpLocal);










 else










 return Collections.emptySet();










 }










 










 };










 }










 }










 }










 










 return KillAll.v();










 }





















 @Override










 public FlowFunction<Local> getCallToReturnFlowFunction(Unit callSite, Unit returnSite) {










 if (callSite instanceof DefinitionStmt) {










 DefinitionStmt definition = (DefinitionStmt) callSite;










 if(definition.getLeftOp() instanceof Local) {










 final Local leftOpLocal = (Local) definition.getLeftOp(); 










 return new Kill<Local>(leftOpLocal);










 }










 }










 return Identity.v();










 }










 };










 }










 @Override










 public Set<Unit> initialSeeds() {










 return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());










 }





















 @Override










 public Local createZeroValue() {










 return new JimpleLocal("<<zero>>", NullType.v());










 }





















}


package soot.jimple.toolkits.ide.exampleproblems;packagesoot.jimple.toolkits.ide.exampleproblems;import java.util.ArrayList;importjava.util.ArrayList;import java.util.Collections;importjava.util.Collections;import java.util.LinkedHashSet;importjava.util.LinkedHashSet;import java.util.List;importjava.util.List;import java.util.Set;importjava.util.Set;import de.bodden.ide.FlowFunction;importde.bodden.ide.FlowFunction;import de.bodden.ide.FlowFunctions;importde.bodden.ide.FlowFunctions;import de.bodden.ide.InterproceduralCFG;importde.bodden.ide.InterproceduralCFG;import de.bodden.ide.flowfunc.Identity;importde.bodden.ide.flowfunc.Identity;import de.bodden.ide.flowfunc.Kill;importde.bodden.ide.flowfunc.Kill;import de.bodden.ide.flowfunc.KillAll;importde.bodden.ide.flowfunc.KillAll;import soot.Local;importsoot.Local;import soot.NullType;importsoot.NullType;import soot.Scene;importsoot.Scene;import soot.SootMethod;importsoot.SootMethod;import soot.Unit;importsoot.Unit;import soot.Value;importsoot.Value;import soot.ValueBox;importsoot.ValueBox;import soot.jimple.DefinitionStmt;importsoot.jimple.DefinitionStmt;import soot.jimple.InvokeExpr;importsoot.jimple.InvokeExpr;import soot.jimple.ReturnStmt;importsoot.jimple.ReturnStmt;import soot.jimple.Stmt;importsoot.jimple.Stmt;import soot.jimple.ThrowStmt;importsoot.jimple.ThrowStmt;import soot.jimple.internal.JimpleLocal;importsoot.jimple.internal.JimpleLocal;import soot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;importsoot.jimple.toolkits.ide.DefaultJimpleIFDSTabulationProblem;import soot.util.Chain;importsoot.util.Chain;public class IFDSUninitializedVariables extends DefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit, SootMethod>> {publicclassIFDSUninitializedVariablesextendsDefaultJimpleIFDSTabulationProblem<Local,InterproceduralCFG<Unit,SootMethod>>{ public IFDSUninitializedVariables(InterproceduralCFG<Unit, SootMethod> icfg) {publicIFDSUninitializedVariables(InterproceduralCFG<Unit,SootMethod>icfg){ super(icfg); super(icfg); }} @Override@Override public FlowFunctions<Unit, Local, SootMethod> createFlowFunctionsFactory() {publicFlowFunctions<Unit,Local,SootMethod>createFlowFunctionsFactory(){ return new FlowFunctions<Unit, Local, SootMethod>() {returnnewFlowFunctions<Unit,Local,SootMethod>(){ @Override@Override public FlowFunction<Local> getNormalFlowFunction(Unit curr, Unit succ) {publicFlowFunction<Local>getNormalFlowFunction(Unitcurr,Unitsucc){ final SootMethod m = interproceduralCFG().getMethodOf(curr);finalSootMethodm=interproceduralCFG().getMethodOf(curr); if(Scene.v().getEntryPoints().contains(m) && interproceduralCFG().isStartPoint(curr)) {if(Scene.v().getEntryPoints().contains(m)&&interproceduralCFG().isStartPoint(curr)){ return new FlowFunction<Local>() {returnnewFlowFunction<Local>(){  @Override@Override public Set<Local> computeTargets(Local source) {publicSet<Local>computeTargets(Localsource){ if (source == zeroValue()) {if(source==zeroValue()){ Set<Local> res = new LinkedHashSet<Local>();Set<Local>res=newLinkedHashSet<Local>(); res.addAll(m.getActiveBody().getLocals());res.addAll(m.getActiveBody().getLocals()); for(int i=0;i<m.getParameterCount();i++) for(inti=0;i<m.getParameterCount();i++) res.remove(m.getActiveBody().getParameterLocal(i));res.remove(m.getActiveBody().getParameterLocal(i)); return res;returnres; }} return Collections.emptySet();returnCollections.emptySet(); }} };}; }}  if (curr instanceof DefinitionStmt) {if(currinstanceofDefinitionStmt){ final DefinitionStmt definition = (DefinitionStmt) curr;finalDefinitionStmtdefinition=(DefinitionStmt)curr; final Value leftOp = definition.getLeftOp();finalValueleftOp=definition.getLeftOp(); if(leftOp instanceof Local) {if(leftOpinstanceofLocal){ final Local leftOpLocal = (Local) leftOp;finalLocalleftOpLocal=(Local)leftOp; return new FlowFunction<Local>() {returnnewFlowFunction<Local>(){ @Override@Override public Set<Local> computeTargets(final Local source) {publicSet<Local>computeTargets(finalLocalsource){ List<ValueBox> useBoxes = definition.getUseBoxes();List<ValueBox>useBoxes=definition.getUseBoxes(); for (ValueBox valueBox : useBoxes) {for(ValueBoxvalueBox:useBoxes){ if (valueBox.getValue().equivTo(source)) {if(valueBox.getValue().equivTo(source)){ LinkedHashSet<Local> res = new LinkedHashSet<Local>();LinkedHashSet<Local>res=newLinkedHashSet<Local>(); res.add(source);res.add(source); res.add(leftOpLocal); res.add(leftOpLocal); return res;returnres; }} }} if (leftOp.equivTo(source))if(leftOp.equivTo(source)) return Collections.emptySet();returnCollections.emptySet(); return Collections.singleton(source);returnCollections.singleton(source); }} };}; }} }} return Identity.v();returnIdentity.v(); }} @Override@Override public FlowFunction<Local> getCallFlowFunction(Unit callStmt, final SootMethod destinationMethod) {publicFlowFunction<Local>getCallFlowFunction(UnitcallStmt,finalSootMethoddestinationMethod){ Stmt stmt = (Stmt) callStmt;Stmtstmt=(Stmt)callStmt; InvokeExpr invokeExpr = stmt.getInvokeExpr();InvokeExprinvokeExpr=stmt.getInvokeExpr(); final List<Value> args = invokeExpr.getArgs();finalList<Value>args=invokeExpr.getArgs(); final List<Local> localArguments = new ArrayList<Local>();finalList<Local>localArguments=newArrayList<Local>(); for (Value value : args)for(Valuevalue:args) if (value instanceof Local)if(valueinstanceofLocal) localArguments.add((Local) value);localArguments.add((Local)value); return new FlowFunction<Local>() {returnnewFlowFunction<Local>(){ @Override@Override public Set<Local> computeTargets(final Local source) {publicSet<Local>computeTargets(finalLocalsource){ for (Local localArgument : localArguments) {for(LocallocalArgument:localArguments){ if (source.equivTo(localArgument)) {if(source.equivTo(localArgument)){ return Collections.<Local>singleton(destinationMethod.getActiveBody().getParameterLocal(args.indexOf(localArgument)));returnCollections.<Local>singleton(destinationMethod.getActiveBody().getParameterLocal(args.indexOf(localArgument))); }} }} if (source == zeroValue()) {if(source==zeroValue()){ //gen all locals that are not parameter locals //gen all locals that are not parameter locals  Chain<Local> locals = destinationMethod.getActiveBody().getLocals();Chain<Local>locals=destinationMethod.getActiveBody().getLocals(); LinkedHashSet<Local> uninitializedLocals = new LinkedHashSet<Local>(locals);LinkedHashSet<Local>uninitializedLocals=newLinkedHashSet<Local>(locals); for(int i=0;i<destinationMethod.getParameterCount();i++) { for(inti=0;i<destinationMethod.getParameterCount();i++){ uninitializedLocals.remove(destinationMethod.getActiveBody().getParameterLocal(i));uninitializedLocals.remove(destinationMethod.getActiveBody().getParameterLocal(i)); }} return uninitializedLocals;returnuninitializedLocals; }} return Collections.emptySet();returnCollections.emptySet(); }} };}; }} @Override@Override public FlowFunction<Local> getReturnFlowFunction(final Unit callSite, SootMethod calleeMethod,publicFlowFunction<Local>getReturnFlowFunction(finalUnitcallSite,SootMethodcalleeMethod, final Unit exitStmt, Unit returnSite) {finalUnitexitStmt,UnitreturnSite){ if (callSite instanceof DefinitionStmt) {if(callSiteinstanceofDefinitionStmt){ final DefinitionStmt definition = (DefinitionStmt) callSite;finalDefinitionStmtdefinition=(DefinitionStmt)callSite; if(definition.getLeftOp() instanceof Local) {if(definition.getLeftOp()instanceofLocal){ final Local leftOpLocal = (Local) definition.getLeftOp(); finalLocalleftOpLocal=(Local)definition.getLeftOp(); if (exitStmt instanceof ReturnStmt) {if(exitStmtinstanceofReturnStmt){ final ReturnStmt returnStmt = (ReturnStmt) exitStmt;finalReturnStmtreturnStmt=(ReturnStmt)exitStmt; return new FlowFunction<Local>() {returnnewFlowFunction<Local>(){  @Override@Override public Set<Local> computeTargets(Local source) {publicSet<Local>computeTargets(Localsource){ if (returnStmt.getOp().equivTo(source))if(returnStmt.getOp().equivTo(source)) return Collections.singleton(leftOpLocal);returnCollections.singleton(leftOpLocal); return Collections.emptySet();returnCollections.emptySet(); }}  };}; } else if (exitStmt instanceof ThrowStmt) {}elseif(exitStmtinstanceofThrowStmt){ //if we throw an exception, LHS of call is undefined//if we throw an exception, LHS of call is undefined return new FlowFunction<Local>() {returnnewFlowFunction<Local>(){  @Override@Override public Set<Local> computeTargets(final Local source) {publicSet<Local>computeTargets(finalLocalsource){ if (source == zeroValue())if(source==zeroValue()) return Collections.singleton(leftOpLocal);returnCollections.singleton(leftOpLocal); elseelse return Collections.emptySet();returnCollections.emptySet(); }}  };}; }} }} }}  return KillAll.v();returnKillAll.v(); }} @Override@Override public FlowFunction<Local> getCallToReturnFlowFunction(Unit callSite, Unit returnSite) {publicFlowFunction<Local>getCallToReturnFlowFunction(UnitcallSite,UnitreturnSite){ if (callSite instanceof DefinitionStmt) {if(callSiteinstanceofDefinitionStmt){ DefinitionStmt definition = (DefinitionStmt) callSite;DefinitionStmtdefinition=(DefinitionStmt)callSite; if(definition.getLeftOp() instanceof Local) {if(definition.getLeftOp()instanceofLocal){ final Local leftOpLocal = (Local) definition.getLeftOp(); finalLocalleftOpLocal=(Local)definition.getLeftOp(); return new Kill<Local>(leftOpLocal);returnnewKill<Local>(leftOpLocal); }} }} return Identity.v();returnIdentity.v(); }} };}; }} @Override@Override public Set<Unit> initialSeeds() {publicSet<Unit>initialSeeds(){ return Collections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst());returnCollections.singleton(Scene.v().getMainMethod().getActiveBody().getUnits().getFirst()); }} @Override@Override public Local createZeroValue() {publicLocalcreateZeroValue(){ return new JimpleLocal("<<zero>>", NullType.v());returnnewJimpleLocal("<<zero>>",NullType.v()); }}}}








src-soot/soot/jimple/toolkits/ide/icfg/BackwardsInterproceduralCFG.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.icfg;





















import soot.Body;










import soot.Unit;










import soot.toolkits.graph.DirectedGraph;










import soot.toolkits.graph.InverseGraph;





















/**










 * Same as {@link JimpleBasedInterproceduralCFG} but based on inverted unit graphs.










 * This should be used for backward analyses.










 */










public class BackwardsInterproceduralCFG extends JimpleBasedInterproceduralCFG {





















 @Override










 protected DirectedGraph<Unit> makeGraph(Body body) {










 return new InverseGraph<Unit>(super.makeGraph(body));










 }










 










}












src-soot/soot/jimple/toolkits/ide/icfg/BackwardsInterproceduralCFG.java

deleted


100644 → 0







View file @ f7c0f2f6








src-soot/soot/jimple/toolkits/ide/icfg/BackwardsInterproceduralCFG.java

deleted


100644 → 0









View file @ f7c0f2f6


f7c0f2f6










package soot.jimple.toolkits.ide.icfg;





















import soot.Body;










import soot.Unit;










import soot.toolkits.graph.DirectedGraph;










import soot.toolkits.graph.InverseGraph;





















/**










 * Same as {@link JimpleBasedInterproceduralCFG} but based on inverted unit graphs.










 * This should be used for backward analyses.










 */










public class BackwardsInterproceduralCFG extends JimpleBasedInterproceduralCFG {





















 @Override










 protected DirectedGraph<Unit> makeGraph(Body body) {










 return new InverseGraph<Unit>(super.makeGraph(body));










 }










 










}













package soot.jimple.toolkits.ide.icfg;





















import soot.Body;










import soot.Unit;










import soot.toolkits.graph.DirectedGraph;










import soot.toolkits.graph.InverseGraph;





















/**










 * Same as {@link JimpleBasedInterproceduralCFG} but based on inverted unit graphs.










 * This should be used for backward analyses.










 */










public class BackwardsInterproceduralCFG extends JimpleBasedInterproceduralCFG {





















 @Override










 protected DirectedGraph<Unit> makeGraph(Body body) {










 return new InverseGraph<Unit>(super.makeGraph(body));










 }










 










}


package soot.jimple.toolkits.ide.icfg;packagesoot.jimple.toolkits.ide.icfg;import soot.Body;importsoot.Body;import soot.Unit;importsoot.Unit;import soot.toolkits.graph.DirectedGraph;importsoot.toolkits.graph.DirectedGraph;import soot.toolkits.graph.InverseGraph;importsoot.toolkits.graph.InverseGraph;/**/** * Same as {@link JimpleBasedInterproceduralCFG} but based on inverted unit graphs. * Same as {@link JimpleBasedInterproceduralCFG} but based on inverted unit graphs. * This should be used for backward analyses. * This should be used for backward analyses. */ */public class BackwardsInterproceduralCFG extends JimpleBasedInterproceduralCFG {publicclassBackwardsInterproceduralCFGextendsJimpleBasedInterproceduralCFG{ @Override@Override protected DirectedGraph<Unit> makeGraph(Body body) {protectedDirectedGraph<Unit>makeGraph(Bodybody){ return new InverseGraph<Unit>(super.makeGraph(body));returnnewInverseGraph<Unit>(super.makeGraph(body)); }} }}








src-soot/soot/jimple/toolkits/ide/icfg/JimpleBasedInterproceduralCFG.java

deleted


100644 → 0







View file @ f7c0f2f6













package soot.jimple.toolkits.ide.icfg;





















import java.util.ArrayList;










import java.util.HashMap;










import java.util.Iterator;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Map;










import java.util.Set;





















import soot.Body;










import soot.MethodOrMethodContext;










import soot.PatchingChain;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.UnitBox;










import soot.jimple.Stmt;










import soot.jimple.toolkits.callgraph.CallGraph;










import soot.jimple.toolkits.callgraph.Edge;










import soot.jimple.toolkits.callgraph.EdgePredicate;










import soot.jimple.toolkits.callgraph.Filter;










import soot.jimple.toolkits.callgraph.ReachableMethods;










import soot.toolkits.exceptions.UnitThrowAnalysis;










import soot.toolkits.graph.DirectedGraph;










import soot.toolkits.graph.ExceptionalUnitGraph;





















import com.google.common.cache.CacheLoader;










import com.google.common.cache.LoadingCache;





















import de.bodden.ide.DontSynchronize;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.SynchronizedBy;










import de.bodden.ide.ThreadSafe;










import de.bodden.ide.solver.IDESolver;





















/**










 * Default implementation for the {@link InterproceduralCFG} interface.










 * Includes all statements reachable from {@link Scene#getEntryPoints()} through










 * explicit call statements or through calls to {@link Thread#start()}.










 * 










 * This class is designed to be thread safe, and subclasses of this class must be designed










 * in a thread-safe way, too.










 */










@ThreadSafe










public class JimpleBasedInterproceduralCFG implements InterproceduralCFG<Unit,SootMethod> {










 










 //retains only callers that are explicit call sites or Thread.start()










 protected static class EdgeFilter extends Filter { 










 protected EdgeFilter() {










 super(new EdgePredicate() {










 public boolean want(Edge e) { 










 return e.kind().isExplicit() || e.kind().isThread();










 }










 });










 }










 }










 










 @DontSynchronize("readonly")










 protected final CallGraph cg;










 










 @DontSynchronize("written by single thread; read afterwards")










 protected final Map<Unit,Body> unitToOwner = new HashMap<Unit,Body>(); 










 










 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<Body,DirectedGraph<Unit>> bodyToUnitGraph =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<Body,DirectedGraph<Unit>>() {










 public DirectedGraph<Unit> load(Body body) throws Exception {










 return makeGraph(body);










 }










 });










 










 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<Unit,Set<SootMethod>> unitToCallees =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<Unit,Set<SootMethod>>() {










 public Set<SootMethod> load(Unit u) throws Exception {










 Set<SootMethod> res = new LinkedHashSet<SootMethod>();










 //only retain callers that are explicit call sites or Thread.start()










 Iterator<Edge> edgeIter = new EdgeFilter().wrap(cg.edgesOutOf(u)); 










 while(edgeIter.hasNext()) {










 Edge edge = edgeIter.next();










 if(edge.getTgt()==null) {










 System.err.println();










 }










 SootMethod m = edge.getTgt().method();










 if(m.hasActiveBody())










 res.add(m);










 }










 return res; 










 }










 });





















 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<SootMethod,Set<Unit>> methodToCallers =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<SootMethod,Set<Unit>>() {










 public Set<Unit> load(SootMethod m) throws Exception {










 Set<Unit> res = new LinkedHashSet<Unit>(); 










 //only retain callers that are explicit call sites or Thread.start()










 Iterator<Edge> edgeIter = new EdgeFilter().wrap(cg.edgesInto(m)); 










 while(edgeIter.hasNext()) {










 Edge edge = edgeIter.next();










 res.add(edge.srcUnit()); 










 }










 return res;










 }










 });





















 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<SootMethod,Set<Unit>> methodToCallsFromWithin =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<SootMethod,Set<Unit>>() {










 public Set<Unit> load(SootMethod m) throws Exception {










 Set<Unit> res = new LinkedHashSet<Unit>();










 //only retain calls that are explicit call sites or Thread.start()










 Iterator<Edge> edgeIter = new EdgeFilter().wrap(cg.edgesOutOf(m));










 while(edgeIter.hasNext()) {










 Edge edge = edgeIter.next();










 res.add(edge.srcUnit()); 










 }










 return res;










 }










 });





















 










 public JimpleBasedInterproceduralCFG() {










 cg = Scene.v().getCallGraph();










 










 List<MethodOrMethodContext> eps = new ArrayList<MethodOrMethodContext>();










 eps.addAll(Scene.v().getEntryPoints());










 ReachableMethods reachableMethods = new ReachableMethods(cg, eps.iterator(), new EdgeFilter());










 reachableMethods.update();










 










 for(Iterator<MethodOrMethodContext> iter = reachableMethods.listener(); iter.hasNext(); ) {










 SootMethod m = iter.next().method();










 if(m.hasActiveBody()) {










 Body b = m.getActiveBody();










 PatchingChain<Unit> units = b.getUnits();










 for (Unit unit : units) {










 unitToOwner.put(unit, b);










 }










 }










 }










 }





















 @Override










 public SootMethod getMethodOf(Unit u) {










 return unitToOwner.get(u).getMethod();










 }





















 @Override










 public List<Unit> getSuccsOf(Unit u) {










 Body body = unitToOwner.get(u);










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body);










 return unitGraph.getSuccsOf(u);










 }





















 private DirectedGraph<Unit> getOrCreateUnitGraph(Body body) {










 return bodyToUnitGraph.getUnchecked(body);










 }





















 protected synchronized DirectedGraph<Unit> makeGraph(Body body) {










 return new ExceptionalUnitGraph(body, UnitThrowAnalysis.v() ,true);










 }





















 @Override










 public Set<SootMethod> getCalleesOfCallAt(Unit u) {










 return unitToCallees.getUnchecked(u);










 }





















 @Override










 public List<Unit> getReturnSitesOfCallAt(Unit u) {










 return getSuccsOf(u);










 }





















 @Override










 public boolean isCallStmt(Unit u) {










 return ((Stmt)u).containsInvokeExpr();










 }





















 @Override










 public boolean isExitStmt(Unit u) {










 Body body = unitToOwner.get(u);










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body);










 return unitGraph.getTails().contains(u);










 }





















 @Override










 public Set<Unit> getCallersOf(SootMethod m) {










 return methodToCallers.getUnchecked(m);










 }










 










 @Override










 public Set<Unit> getCallsFromWithin(SootMethod m) {










 return methodToCallsFromWithin.getUnchecked(m); 










 }





















 @Override










 public Set<Unit> getStartPointsOf(SootMethod m) {










 if(m.hasActiveBody()) {










 Body body = m.getActiveBody();










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body);










 return new LinkedHashSet<Unit>(unitGraph.getHeads());










 }










 return null;










 }





















 @Override










 public boolean isStartPoint(Unit u) {










 Body body = unitToOwner.get(u);










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body); 










 return unitGraph.getHeads().contains(u);










 }





















 @Override










 //TODO do we need to replace call by return for backwards analysis?










 public Set<Unit> allNonCallStartNodes() {










 Set<Unit> res = new LinkedHashSet<Unit>(unitToOwner.keySet());










 for (Iterator<Unit> iter = res.iterator(); iter.hasNext();) {










 Unit u = iter.next();










 if(isStartPoint(u) || isCallStmt(u)) iter.remove();










 }










 return res;










 }





















 @Override










 public boolean isFallThroughSuccessor(Unit u, Unit succ) {










 assert getSuccsOf(u).contains(succ);










 if(!u.fallsThrough()) return false;










 Body body = unitToOwner.get(u);










 return body.getUnits().getSuccOf(u) == succ;










 }





















 @Override










 public boolean isBranchTarget(Unit u, Unit succ) {










 assert getSuccsOf(u).contains(succ);










 if(!u.branches()) return false;










 for (UnitBox ub : succ.getUnitBoxes()) {










 if(ub.getUnit()==succ) return true;










 }










 return false;










 }










}












src-soot/soot/jimple/toolkits/ide/icfg/JimpleBasedInterproceduralCFG.java

deleted


100644 → 0







View file @ f7c0f2f6








src-soot/soot/jimple/toolkits/ide/icfg/JimpleBasedInterproceduralCFG.java

deleted


100644 → 0









View file @ f7c0f2f6


f7c0f2f6










package soot.jimple.toolkits.ide.icfg;





















import java.util.ArrayList;










import java.util.HashMap;










import java.util.Iterator;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Map;










import java.util.Set;





















import soot.Body;










import soot.MethodOrMethodContext;










import soot.PatchingChain;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.UnitBox;










import soot.jimple.Stmt;










import soot.jimple.toolkits.callgraph.CallGraph;










import soot.jimple.toolkits.callgraph.Edge;










import soot.jimple.toolkits.callgraph.EdgePredicate;










import soot.jimple.toolkits.callgraph.Filter;










import soot.jimple.toolkits.callgraph.ReachableMethods;










import soot.toolkits.exceptions.UnitThrowAnalysis;










import soot.toolkits.graph.DirectedGraph;










import soot.toolkits.graph.ExceptionalUnitGraph;





















import com.google.common.cache.CacheLoader;










import com.google.common.cache.LoadingCache;





















import de.bodden.ide.DontSynchronize;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.SynchronizedBy;










import de.bodden.ide.ThreadSafe;










import de.bodden.ide.solver.IDESolver;





















/**










 * Default implementation for the {@link InterproceduralCFG} interface.










 * Includes all statements reachable from {@link Scene#getEntryPoints()} through










 * explicit call statements or through calls to {@link Thread#start()}.










 * 










 * This class is designed to be thread safe, and subclasses of this class must be designed










 * in a thread-safe way, too.










 */










@ThreadSafe










public class JimpleBasedInterproceduralCFG implements InterproceduralCFG<Unit,SootMethod> {










 










 //retains only callers that are explicit call sites or Thread.start()










 protected static class EdgeFilter extends Filter { 










 protected EdgeFilter() {










 super(new EdgePredicate() {










 public boolean want(Edge e) { 










 return e.kind().isExplicit() || e.kind().isThread();










 }










 });










 }










 }










 










 @DontSynchronize("readonly")










 protected final CallGraph cg;










 










 @DontSynchronize("written by single thread; read afterwards")










 protected final Map<Unit,Body> unitToOwner = new HashMap<Unit,Body>(); 










 










 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<Body,DirectedGraph<Unit>> bodyToUnitGraph =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<Body,DirectedGraph<Unit>>() {










 public DirectedGraph<Unit> load(Body body) throws Exception {










 return makeGraph(body);










 }










 });










 










 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<Unit,Set<SootMethod>> unitToCallees =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<Unit,Set<SootMethod>>() {










 public Set<SootMethod> load(Unit u) throws Exception {










 Set<SootMethod> res = new LinkedHashSet<SootMethod>();










 //only retain callers that are explicit call sites or Thread.start()










 Iterator<Edge> edgeIter = new EdgeFilter().wrap(cg.edgesOutOf(u)); 










 while(edgeIter.hasNext()) {










 Edge edge = edgeIter.next();










 if(edge.getTgt()==null) {










 System.err.println();










 }










 SootMethod m = edge.getTgt().method();










 if(m.hasActiveBody())










 res.add(m);










 }










 return res; 










 }










 });





















 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<SootMethod,Set<Unit>> methodToCallers =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<SootMethod,Set<Unit>>() {










 public Set<Unit> load(SootMethod m) throws Exception {










 Set<Unit> res = new LinkedHashSet<Unit>(); 










 //only retain callers that are explicit call sites or Thread.start()










 Iterator<Edge> edgeIter = new EdgeFilter().wrap(cg.edgesInto(m)); 










 while(edgeIter.hasNext()) {










 Edge edge = edgeIter.next();










 res.add(edge.srcUnit()); 










 }










 return res;










 }










 });





















 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<SootMethod,Set<Unit>> methodToCallsFromWithin =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<SootMethod,Set<Unit>>() {










 public Set<Unit> load(SootMethod m) throws Exception {










 Set<Unit> res = new LinkedHashSet<Unit>();










 //only retain calls that are explicit call sites or Thread.start()










 Iterator<Edge> edgeIter = new EdgeFilter().wrap(cg.edgesOutOf(m));










 while(edgeIter.hasNext()) {










 Edge edge = edgeIter.next();










 res.add(edge.srcUnit()); 










 }










 return res;










 }










 });





















 










 public JimpleBasedInterproceduralCFG() {










 cg = Scene.v().getCallGraph();










 










 List<MethodOrMethodContext> eps = new ArrayList<MethodOrMethodContext>();










 eps.addAll(Scene.v().getEntryPoints());










 ReachableMethods reachableMethods = new ReachableMethods(cg, eps.iterator(), new EdgeFilter());










 reachableMethods.update();










 










 for(Iterator<MethodOrMethodContext> iter = reachableMethods.listener(); iter.hasNext(); ) {










 SootMethod m = iter.next().method();










 if(m.hasActiveBody()) {










 Body b = m.getActiveBody();










 PatchingChain<Unit> units = b.getUnits();










 for (Unit unit : units) {










 unitToOwner.put(unit, b);










 }










 }










 }










 }





















 @Override










 public SootMethod getMethodOf(Unit u) {










 return unitToOwner.get(u).getMethod();










 }





















 @Override










 public List<Unit> getSuccsOf(Unit u) {










 Body body = unitToOwner.get(u);










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body);










 return unitGraph.getSuccsOf(u);










 }





















 private DirectedGraph<Unit> getOrCreateUnitGraph(Body body) {










 return bodyToUnitGraph.getUnchecked(body);










 }





















 protected synchronized DirectedGraph<Unit> makeGraph(Body body) {










 return new ExceptionalUnitGraph(body, UnitThrowAnalysis.v() ,true);










 }





















 @Override










 public Set<SootMethod> getCalleesOfCallAt(Unit u) {










 return unitToCallees.getUnchecked(u);










 }





















 @Override










 public List<Unit> getReturnSitesOfCallAt(Unit u) {










 return getSuccsOf(u);










 }





















 @Override










 public boolean isCallStmt(Unit u) {










 return ((Stmt)u).containsInvokeExpr();










 }





















 @Override










 public boolean isExitStmt(Unit u) {










 Body body = unitToOwner.get(u);










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body);










 return unitGraph.getTails().contains(u);










 }





















 @Override










 public Set<Unit> getCallersOf(SootMethod m) {










 return methodToCallers.getUnchecked(m);










 }










 










 @Override










 public Set<Unit> getCallsFromWithin(SootMethod m) {










 return methodToCallsFromWithin.getUnchecked(m); 










 }





















 @Override










 public Set<Unit> getStartPointsOf(SootMethod m) {










 if(m.hasActiveBody()) {










 Body body = m.getActiveBody();










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body);










 return new LinkedHashSet<Unit>(unitGraph.getHeads());










 }










 return null;










 }





















 @Override










 public boolean isStartPoint(Unit u) {










 Body body = unitToOwner.get(u);










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body); 










 return unitGraph.getHeads().contains(u);










 }





















 @Override










 //TODO do we need to replace call by return for backwards analysis?










 public Set<Unit> allNonCallStartNodes() {










 Set<Unit> res = new LinkedHashSet<Unit>(unitToOwner.keySet());










 for (Iterator<Unit> iter = res.iterator(); iter.hasNext();) {










 Unit u = iter.next();










 if(isStartPoint(u) || isCallStmt(u)) iter.remove();










 }










 return res;










 }





















 @Override










 public boolean isFallThroughSuccessor(Unit u, Unit succ) {










 assert getSuccsOf(u).contains(succ);










 if(!u.fallsThrough()) return false;










 Body body = unitToOwner.get(u);










 return body.getUnits().getSuccOf(u) == succ;










 }





















 @Override










 public boolean isBranchTarget(Unit u, Unit succ) {










 assert getSuccsOf(u).contains(succ);










 if(!u.branches()) return false;










 for (UnitBox ub : succ.getUnitBoxes()) {










 if(ub.getUnit()==succ) return true;










 }










 return false;










 }










}













package soot.jimple.toolkits.ide.icfg;





















import java.util.ArrayList;










import java.util.HashMap;










import java.util.Iterator;










import java.util.LinkedHashSet;










import java.util.List;










import java.util.Map;










import java.util.Set;





















import soot.Body;










import soot.MethodOrMethodContext;










import soot.PatchingChain;










import soot.Scene;










import soot.SootMethod;










import soot.Unit;










import soot.UnitBox;










import soot.jimple.Stmt;










import soot.jimple.toolkits.callgraph.CallGraph;










import soot.jimple.toolkits.callgraph.Edge;










import soot.jimple.toolkits.callgraph.EdgePredicate;










import soot.jimple.toolkits.callgraph.Filter;










import soot.jimple.toolkits.callgraph.ReachableMethods;










import soot.toolkits.exceptions.UnitThrowAnalysis;










import soot.toolkits.graph.DirectedGraph;










import soot.toolkits.graph.ExceptionalUnitGraph;





















import com.google.common.cache.CacheLoader;










import com.google.common.cache.LoadingCache;





















import de.bodden.ide.DontSynchronize;










import de.bodden.ide.InterproceduralCFG;










import de.bodden.ide.SynchronizedBy;










import de.bodden.ide.ThreadSafe;










import de.bodden.ide.solver.IDESolver;





















/**










 * Default implementation for the {@link InterproceduralCFG} interface.










 * Includes all statements reachable from {@link Scene#getEntryPoints()} through










 * explicit call statements or through calls to {@link Thread#start()}.










 * 










 * This class is designed to be thread safe, and subclasses of this class must be designed










 * in a thread-safe way, too.










 */










@ThreadSafe










public class JimpleBasedInterproceduralCFG implements InterproceduralCFG<Unit,SootMethod> {










 










 //retains only callers that are explicit call sites or Thread.start()










 protected static class EdgeFilter extends Filter { 










 protected EdgeFilter() {










 super(new EdgePredicate() {










 public boolean want(Edge e) { 










 return e.kind().isExplicit() || e.kind().isThread();










 }










 });










 }










 }










 










 @DontSynchronize("readonly")










 protected final CallGraph cg;










 










 @DontSynchronize("written by single thread; read afterwards")










 protected final Map<Unit,Body> unitToOwner = new HashMap<Unit,Body>(); 










 










 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<Body,DirectedGraph<Unit>> bodyToUnitGraph =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<Body,DirectedGraph<Unit>>() {










 public DirectedGraph<Unit> load(Body body) throws Exception {










 return makeGraph(body);










 }










 });










 










 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<Unit,Set<SootMethod>> unitToCallees =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<Unit,Set<SootMethod>>() {










 public Set<SootMethod> load(Unit u) throws Exception {










 Set<SootMethod> res = new LinkedHashSet<SootMethod>();










 //only retain callers that are explicit call sites or Thread.start()










 Iterator<Edge> edgeIter = new EdgeFilter().wrap(cg.edgesOutOf(u)); 










 while(edgeIter.hasNext()) {










 Edge edge = edgeIter.next();










 if(edge.getTgt()==null) {










 System.err.println();










 }










 SootMethod m = edge.getTgt().method();










 if(m.hasActiveBody())










 res.add(m);










 }










 return res; 










 }










 });





















 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<SootMethod,Set<Unit>> methodToCallers =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<SootMethod,Set<Unit>>() {










 public Set<Unit> load(SootMethod m) throws Exception {










 Set<Unit> res = new LinkedHashSet<Unit>(); 










 //only retain callers that are explicit call sites or Thread.start()










 Iterator<Edge> edgeIter = new EdgeFilter().wrap(cg.edgesInto(m)); 










 while(edgeIter.hasNext()) {










 Edge edge = edgeIter.next();










 res.add(edge.srcUnit()); 










 }










 return res;










 }










 });





















 @SynchronizedBy("by use of synchronized LoadingCache class")










 protected final LoadingCache<SootMethod,Set<Unit>> methodToCallsFromWithin =










 IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<SootMethod,Set<Unit>>() {










 public Set<Unit> load(SootMethod m) throws Exception {










 Set<Unit> res = new LinkedHashSet<Unit>();










 //only retain calls that are explicit call sites or Thread.start()










 Iterator<Edge> edgeIter = new EdgeFilter().wrap(cg.edgesOutOf(m));










 while(edgeIter.hasNext()) {










 Edge edge = edgeIter.next();










 res.add(edge.srcUnit()); 










 }










 return res;










 }










 });





















 










 public JimpleBasedInterproceduralCFG() {










 cg = Scene.v().getCallGraph();










 










 List<MethodOrMethodContext> eps = new ArrayList<MethodOrMethodContext>();










 eps.addAll(Scene.v().getEntryPoints());










 ReachableMethods reachableMethods = new ReachableMethods(cg, eps.iterator(), new EdgeFilter());










 reachableMethods.update();










 










 for(Iterator<MethodOrMethodContext> iter = reachableMethods.listener(); iter.hasNext(); ) {










 SootMethod m = iter.next().method();










 if(m.hasActiveBody()) {










 Body b = m.getActiveBody();










 PatchingChain<Unit> units = b.getUnits();










 for (Unit unit : units) {










 unitToOwner.put(unit, b);










 }










 }










 }










 }





















 @Override










 public SootMethod getMethodOf(Unit u) {










 return unitToOwner.get(u).getMethod();










 }





















 @Override










 public List<Unit> getSuccsOf(Unit u) {










 Body body = unitToOwner.get(u);










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body);










 return unitGraph.getSuccsOf(u);










 }





















 private DirectedGraph<Unit> getOrCreateUnitGraph(Body body) {










 return bodyToUnitGraph.getUnchecked(body);










 }





















 protected synchronized DirectedGraph<Unit> makeGraph(Body body) {










 return new ExceptionalUnitGraph(body, UnitThrowAnalysis.v() ,true);










 }





















 @Override










 public Set<SootMethod> getCalleesOfCallAt(Unit u) {










 return unitToCallees.getUnchecked(u);










 }





















 @Override










 public List<Unit> getReturnSitesOfCallAt(Unit u) {










 return getSuccsOf(u);










 }





















 @Override










 public boolean isCallStmt(Unit u) {










 return ((Stmt)u).containsInvokeExpr();










 }





















 @Override










 public boolean isExitStmt(Unit u) {










 Body body = unitToOwner.get(u);










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body);










 return unitGraph.getTails().contains(u);










 }





















 @Override










 public Set<Unit> getCallersOf(SootMethod m) {










 return methodToCallers.getUnchecked(m);










 }










 










 @Override










 public Set<Unit> getCallsFromWithin(SootMethod m) {










 return methodToCallsFromWithin.getUnchecked(m); 










 }





















 @Override










 public Set<Unit> getStartPointsOf(SootMethod m) {










 if(m.hasActiveBody()) {










 Body body = m.getActiveBody();










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body);










 return new LinkedHashSet<Unit>(unitGraph.getHeads());










 }










 return null;










 }





















 @Override










 public boolean isStartPoint(Unit u) {










 Body body = unitToOwner.get(u);










 DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body); 










 return unitGraph.getHeads().contains(u);










 }





















 @Override










 //TODO do we need to replace call by return for backwards analysis?










 public Set<Unit> allNonCallStartNodes() {










 Set<Unit> res = new LinkedHashSet<Unit>(unitToOwner.keySet());










 for (Iterator<Unit> iter = res.iterator(); iter.hasNext();) {










 Unit u = iter.next();










 if(isStartPoint(u) || isCallStmt(u)) iter.remove();










 }










 return res;










 }





















 @Override










 public boolean isFallThroughSuccessor(Unit u, Unit succ) {










 assert getSuccsOf(u).contains(succ);










 if(!u.fallsThrough()) return false;










 Body body = unitToOwner.get(u);










 return body.getUnits().getSuccOf(u) == succ;










 }





















 @Override










 public boolean isBranchTarget(Unit u, Unit succ) {










 assert getSuccsOf(u).contains(succ);










 if(!u.branches()) return false;










 for (UnitBox ub : succ.getUnitBoxes()) {










 if(ub.getUnit()==succ) return true;










 }










 return false;










 }










}


package soot.jimple.toolkits.ide.icfg;packagesoot.jimple.toolkits.ide.icfg;import java.util.ArrayList;importjava.util.ArrayList;import java.util.HashMap;importjava.util.HashMap;import java.util.Iterator;importjava.util.Iterator;import java.util.LinkedHashSet;importjava.util.LinkedHashSet;import java.util.List;importjava.util.List;import java.util.Map;importjava.util.Map;import java.util.Set;importjava.util.Set;import soot.Body;importsoot.Body;import soot.MethodOrMethodContext;importsoot.MethodOrMethodContext;import soot.PatchingChain;importsoot.PatchingChain;import soot.Scene;importsoot.Scene;import soot.SootMethod;importsoot.SootMethod;import soot.Unit;importsoot.Unit;import soot.UnitBox;importsoot.UnitBox;import soot.jimple.Stmt;importsoot.jimple.Stmt;import soot.jimple.toolkits.callgraph.CallGraph;importsoot.jimple.toolkits.callgraph.CallGraph;import soot.jimple.toolkits.callgraph.Edge;importsoot.jimple.toolkits.callgraph.Edge;import soot.jimple.toolkits.callgraph.EdgePredicate;importsoot.jimple.toolkits.callgraph.EdgePredicate;import soot.jimple.toolkits.callgraph.Filter;importsoot.jimple.toolkits.callgraph.Filter;import soot.jimple.toolkits.callgraph.ReachableMethods;importsoot.jimple.toolkits.callgraph.ReachableMethods;import soot.toolkits.exceptions.UnitThrowAnalysis;importsoot.toolkits.exceptions.UnitThrowAnalysis;import soot.toolkits.graph.DirectedGraph;importsoot.toolkits.graph.DirectedGraph;import soot.toolkits.graph.ExceptionalUnitGraph;importsoot.toolkits.graph.ExceptionalUnitGraph;import com.google.common.cache.CacheLoader;importcom.google.common.cache.CacheLoader;import com.google.common.cache.LoadingCache;importcom.google.common.cache.LoadingCache;import de.bodden.ide.DontSynchronize;importde.bodden.ide.DontSynchronize;import de.bodden.ide.InterproceduralCFG;importde.bodden.ide.InterproceduralCFG;import de.bodden.ide.SynchronizedBy;importde.bodden.ide.SynchronizedBy;import de.bodden.ide.ThreadSafe;importde.bodden.ide.ThreadSafe;import de.bodden.ide.solver.IDESolver;importde.bodden.ide.solver.IDESolver;/**/** * Default implementation for the {@link InterproceduralCFG} interface. * Default implementation for the {@link InterproceduralCFG} interface. * Includes all statements reachable from {@link Scene#getEntryPoints()} through * Includes all statements reachable from {@link Scene#getEntryPoints()} through * explicit call statements or through calls to {@link Thread#start()}. * explicit call statements or through calls to {@link Thread#start()}. *  *  * This class is designed to be thread safe, and subclasses of this class must be designed * This class is designed to be thread safe, and subclasses of this class must be designed * in a thread-safe way, too. * in a thread-safe way, too. */ */@ThreadSafe@ThreadSafepublic class JimpleBasedInterproceduralCFG implements InterproceduralCFG<Unit,SootMethod> {publicclassJimpleBasedInterproceduralCFGimplementsInterproceduralCFG<Unit,SootMethod>{  //retains only callers that are explicit call sites or Thread.start()//retains only callers that are explicit call sites or Thread.start() protected static class EdgeFilter extends Filter { protectedstaticclassEdgeFilterextendsFilter{ protected EdgeFilter() {protectedEdgeFilter(){ super(new EdgePredicate() {super(newEdgePredicate(){ public boolean want(Edge e) { publicbooleanwant(Edgee){ return e.kind().isExplicit() || e.kind().isThread();returne.kind().isExplicit()||e.kind().isThread(); }} });}); }} }}  @DontSynchronize("readonly")@DontSynchronize("readonly") protected final CallGraph cg;protectedfinalCallGraphcg;  @DontSynchronize("written by single thread; read afterwards")@DontSynchronize("written by single thread; read afterwards") protected final Map<Unit,Body> unitToOwner = new HashMap<Unit,Body>(); protectedfinalMap<Unit,Body>unitToOwner=newHashMap<Unit,Body>();  @SynchronizedBy("by use of synchronized LoadingCache class")@SynchronizedBy("by use of synchronized LoadingCache class") protected final LoadingCache<Body,DirectedGraph<Unit>> bodyToUnitGraph =protectedfinalLoadingCache<Body,DirectedGraph<Unit>>bodyToUnitGraph= IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<Body,DirectedGraph<Unit>>() {IDESolver.DEFAULT_CACHE_BUILDER.build(newCacheLoader<Body,DirectedGraph<Unit>>(){ public DirectedGraph<Unit> load(Body body) throws Exception {publicDirectedGraph<Unit>load(Bodybody)throwsException{ return makeGraph(body);returnmakeGraph(body); }} });});  @SynchronizedBy("by use of synchronized LoadingCache class")@SynchronizedBy("by use of synchronized LoadingCache class") protected final LoadingCache<Unit,Set<SootMethod>> unitToCallees =protectedfinalLoadingCache<Unit,Set<SootMethod>>unitToCallees= IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<Unit,Set<SootMethod>>() {IDESolver.DEFAULT_CACHE_BUILDER.build(newCacheLoader<Unit,Set<SootMethod>>(){ public Set<SootMethod> load(Unit u) throws Exception {publicSet<SootMethod>load(Unitu)throwsException{ Set<SootMethod> res = new LinkedHashSet<SootMethod>();Set<SootMethod>res=newLinkedHashSet<SootMethod>(); //only retain callers that are explicit call sites or Thread.start()//only retain callers that are explicit call sites or Thread.start() Iterator<Edge> edgeIter = new EdgeFilter().wrap(cg.edgesOutOf(u)); Iterator<Edge>edgeIter=newEdgeFilter().wrap(cg.edgesOutOf(u)); while(edgeIter.hasNext()) {while(edgeIter.hasNext()){ Edge edge = edgeIter.next();Edgeedge=edgeIter.next(); if(edge.getTgt()==null) {if(edge.getTgt()==null){ System.err.println();System.err.println(); }} SootMethod m = edge.getTgt().method();SootMethodm=edge.getTgt().method(); if(m.hasActiveBody())if(m.hasActiveBody()) res.add(m);res.add(m); }} return res; returnres; }} });}); @SynchronizedBy("by use of synchronized LoadingCache class")@SynchronizedBy("by use of synchronized LoadingCache class") protected final LoadingCache<SootMethod,Set<Unit>> methodToCallers =protectedfinalLoadingCache<SootMethod,Set<Unit>>methodToCallers= IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<SootMethod,Set<Unit>>() {IDESolver.DEFAULT_CACHE_BUILDER.build(newCacheLoader<SootMethod,Set<Unit>>(){ public Set<Unit> load(SootMethod m) throws Exception {publicSet<Unit>load(SootMethodm)throwsException{ Set<Unit> res = new LinkedHashSet<Unit>(); Set<Unit>res=newLinkedHashSet<Unit>(); //only retain callers that are explicit call sites or Thread.start()//only retain callers that are explicit call sites or Thread.start() Iterator<Edge> edgeIter = new EdgeFilter().wrap(cg.edgesInto(m)); Iterator<Edge>edgeIter=newEdgeFilter().wrap(cg.edgesInto(m)); while(edgeIter.hasNext()) {while(edgeIter.hasNext()){ Edge edge = edgeIter.next();Edgeedge=edgeIter.next(); res.add(edge.srcUnit()); res.add(edge.srcUnit()); }} return res;returnres; }} });}); @SynchronizedBy("by use of synchronized LoadingCache class")@SynchronizedBy("by use of synchronized LoadingCache class") protected final LoadingCache<SootMethod,Set<Unit>> methodToCallsFromWithin =protectedfinalLoadingCache<SootMethod,Set<Unit>>methodToCallsFromWithin= IDESolver.DEFAULT_CACHE_BUILDER.build( new CacheLoader<SootMethod,Set<Unit>>() {IDESolver.DEFAULT_CACHE_BUILDER.build(newCacheLoader<SootMethod,Set<Unit>>(){ public Set<Unit> load(SootMethod m) throws Exception {publicSet<Unit>load(SootMethodm)throwsException{ Set<Unit> res = new LinkedHashSet<Unit>();Set<Unit>res=newLinkedHashSet<Unit>(); //only retain calls that are explicit call sites or Thread.start()//only retain calls that are explicit call sites or Thread.start() Iterator<Edge> edgeIter = new EdgeFilter().wrap(cg.edgesOutOf(m));Iterator<Edge>edgeIter=newEdgeFilter().wrap(cg.edgesOutOf(m)); while(edgeIter.hasNext()) {while(edgeIter.hasNext()){ Edge edge = edgeIter.next();Edgeedge=edgeIter.next(); res.add(edge.srcUnit()); res.add(edge.srcUnit()); }} return res;returnres; }} });});  public JimpleBasedInterproceduralCFG() {publicJimpleBasedInterproceduralCFG(){ cg = Scene.v().getCallGraph();cg=Scene.v().getCallGraph();  List<MethodOrMethodContext> eps = new ArrayList<MethodOrMethodContext>();List<MethodOrMethodContext>eps=newArrayList<MethodOrMethodContext>(); eps.addAll(Scene.v().getEntryPoints());eps.addAll(Scene.v().getEntryPoints()); ReachableMethods reachableMethods = new ReachableMethods(cg, eps.iterator(), new EdgeFilter());ReachableMethodsreachableMethods=newReachableMethods(cg,eps.iterator(),newEdgeFilter()); reachableMethods.update();reachableMethods.update();  for(Iterator<MethodOrMethodContext> iter = reachableMethods.listener(); iter.hasNext(); ) {for(Iterator<MethodOrMethodContext>iter=reachableMethods.listener();iter.hasNext();){ SootMethod m = iter.next().method();SootMethodm=iter.next().method(); if(m.hasActiveBody()) {if(m.hasActiveBody()){ Body b = m.getActiveBody();Bodyb=m.getActiveBody(); PatchingChain<Unit> units = b.getUnits();PatchingChain<Unit>units=b.getUnits(); for (Unit unit : units) {for(Unitunit:units){ unitToOwner.put(unit, b);unitToOwner.put(unit,b); }} }} }} }} @Override@Override public SootMethod getMethodOf(Unit u) {publicSootMethodgetMethodOf(Unitu){ return unitToOwner.get(u).getMethod();returnunitToOwner.get(u).getMethod(); }} @Override@Override public List<Unit> getSuccsOf(Unit u) {publicList<Unit>getSuccsOf(Unitu){ Body body = unitToOwner.get(u);Bodybody=unitToOwner.get(u); DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body);DirectedGraph<Unit>unitGraph=getOrCreateUnitGraph(body); return unitGraph.getSuccsOf(u);returnunitGraph.getSuccsOf(u); }} private DirectedGraph<Unit> getOrCreateUnitGraph(Body body) {privateDirectedGraph<Unit>getOrCreateUnitGraph(Bodybody){ return bodyToUnitGraph.getUnchecked(body);returnbodyToUnitGraph.getUnchecked(body); }} protected synchronized DirectedGraph<Unit> makeGraph(Body body) {protectedsynchronizedDirectedGraph<Unit>makeGraph(Bodybody){ return new ExceptionalUnitGraph(body, UnitThrowAnalysis.v() ,true);returnnewExceptionalUnitGraph(body,UnitThrowAnalysis.v(),true); }} @Override@Override public Set<SootMethod> getCalleesOfCallAt(Unit u) {publicSet<SootMethod>getCalleesOfCallAt(Unitu){ return unitToCallees.getUnchecked(u);returnunitToCallees.getUnchecked(u); }} @Override@Override public List<Unit> getReturnSitesOfCallAt(Unit u) {publicList<Unit>getReturnSitesOfCallAt(Unitu){ return getSuccsOf(u);returngetSuccsOf(u); }} @Override@Override public boolean isCallStmt(Unit u) {publicbooleanisCallStmt(Unitu){ return ((Stmt)u).containsInvokeExpr();return((Stmt)u).containsInvokeExpr(); }} @Override@Override public boolean isExitStmt(Unit u) {publicbooleanisExitStmt(Unitu){ Body body = unitToOwner.get(u);Bodybody=unitToOwner.get(u); DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body);DirectedGraph<Unit>unitGraph=getOrCreateUnitGraph(body); return unitGraph.getTails().contains(u);returnunitGraph.getTails().contains(u); }} @Override@Override public Set<Unit> getCallersOf(SootMethod m) {publicSet<Unit>getCallersOf(SootMethodm){ return methodToCallers.getUnchecked(m);returnmethodToCallers.getUnchecked(m); }}  @Override@Override public Set<Unit> getCallsFromWithin(SootMethod m) {publicSet<Unit>getCallsFromWithin(SootMethodm){ return methodToCallsFromWithin.getUnchecked(m); returnmethodToCallsFromWithin.getUnchecked(m); }} @Override@Override public Set<Unit> getStartPointsOf(SootMethod m) {publicSet<Unit>getStartPointsOf(SootMethodm){ if(m.hasActiveBody()) {if(m.hasActiveBody()){ Body body = m.getActiveBody();Bodybody=m.getActiveBody(); DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body);DirectedGraph<Unit>unitGraph=getOrCreateUnitGraph(body); return new LinkedHashSet<Unit>(unitGraph.getHeads());returnnewLinkedHashSet<Unit>(unitGraph.getHeads()); }} return null;returnnull; }} @Override@Override public boolean isStartPoint(Unit u) {publicbooleanisStartPoint(Unitu){ Body body = unitToOwner.get(u);Bodybody=unitToOwner.get(u); DirectedGraph<Unit> unitGraph = getOrCreateUnitGraph(body); DirectedGraph<Unit>unitGraph=getOrCreateUnitGraph(body); return unitGraph.getHeads().contains(u);returnunitGraph.getHeads().contains(u); }} @Override@Override //TODO do we need to replace call by return for backwards analysis?//TODO do we need to replace call by return for backwards analysis? public Set<Unit> allNonCallStartNodes() {publicSet<Unit>allNonCallStartNodes(){ Set<Unit> res = new LinkedHashSet<Unit>(unitToOwner.keySet());Set<Unit>res=newLinkedHashSet<Unit>(unitToOwner.keySet()); for (Iterator<Unit> iter = res.iterator(); iter.hasNext();) {for(Iterator<Unit>iter=res.iterator();iter.hasNext();){ Unit u = iter.next();Unitu=iter.next(); if(isStartPoint(u) || isCallStmt(u)) iter.remove();if(isStartPoint(u)||isCallStmt(u))iter.remove(); }} return res;returnres; }} @Override@Override public boolean isFallThroughSuccessor(Unit u, Unit succ) {publicbooleanisFallThroughSuccessor(Unitu,Unitsucc){ assert getSuccsOf(u).contains(succ);assertgetSuccsOf(u).contains(succ); if(!u.fallsThrough()) return false;if(!u.fallsThrough())returnfalse; Body body = unitToOwner.get(u);Bodybody=unitToOwner.get(u); return body.getUnits().getSuccOf(u) == succ;returnbody.getUnits().getSuccOf(u)==succ; }} @Override@Override public boolean isBranchTarget(Unit u, Unit succ) {publicbooleanisBranchTarget(Unitu,Unitsucc){ assert getSuccsOf(u).contains(succ);assertgetSuccsOf(u).contains(succ); if(!u.branches()) return false;if(!u.branches())returnfalse; for (UnitBox ub : succ.getUnitBoxes()) {for(UnitBoxub:succ.getUnitBoxes()){ if(ub.getUnit()==succ) return true;if(ub.getUnit()==succ)returntrue; }} return false;returnfalse; }}}}








src-generic/de/bodden/ide/DontSynchronize.java

→

src/de/bodden/ide/DontSynchronize.java








View file @ ae1aae21





File moved











src-generic/de/bodden/ide/DontSynchronize.java

→

src/de/bodden/ide/DontSynchronize.java








View file @ ae1aae21








src-generic/de/bodden/ide/DontSynchronize.java

→

src/de/bodden/ide/DontSynchronize.java





-generic




View file @ ae1aae21


ae1aae21


File moved




File moved


File moved









src-generic/de/bodden/ide/EdgeFunction.java

→

src/de/bodden/ide/EdgeFunction.java








View file @ ae1aae21





File moved











src-generic/de/bodden/ide/EdgeFunction.java

→

src/de/bodden/ide/EdgeFunction.java








View file @ ae1aae21








src-generic/de/bodden/ide/EdgeFunction.java

→

src/de/bodden/ide/EdgeFunction.java





-generic




View file @ ae1aae21


ae1aae21


File moved




File moved


File moved









src-generic/de/bodden/ide/EdgeFunctionCache.java

→

src/de/bodden/ide/EdgeFunctionCache.java








View file @ ae1aae21





File moved











src-generic/de/bodden/ide/EdgeFunctionCache.java

→

src/de/bodden/ide/EdgeFunctionCache.java








View file @ ae1aae21








src-generic/de/bodden/ide/EdgeFunctionCache.java

→

src/de/bodden/ide/EdgeFunctionCache.java





-generic




View file @ ae1aae21


ae1aae21


File moved




File moved


File moved









src-generic/de/bodden/ide/EdgeFunctions.java

→

src/de/bodden/ide/EdgeFunctions.java








View file @ ae1aae21





File moved











src-generic/de/bodden/ide/EdgeFunctions.java

→

src/de/bodden/ide/EdgeFunctions.java








View file @ ae1aae21








src-generic/de/bodden/ide/EdgeFunctions.java

→

src/de/bodden/ide/EdgeFunctions.java





-generic




View file @ ae1aae21


ae1aae21


File moved




File moved


File moved









src-generic/de/bodden/ide/FlowFunction.java

→

src/de/bodden/ide/FlowFunction.java








View file @ ae1aae21





File moved











src-generic/de/bodden/ide/FlowFunction.java

→

src/de/bodden/ide/FlowFunction.java








View file @ ae1aae21








src-generic/de/bodden/ide/FlowFunction.java

→

src/de/bodden/ide/FlowFunction.java





-generic




View file @ ae1aae21


ae1aae21


File moved




File moved


File moved









src-generic/de/bodden/ide/FlowFunctionCache.java

→

src/de/bodden/ide/FlowFunctionCache.java








View file @ ae1aae21





File moved











src-generic/de/bodden/ide/FlowFunctionCache.java

→

src/de/bodden/ide/FlowFunctionCache.java








View file @ ae1aae21








src-generic/de/bodden/ide/FlowFunctionCache.java

→

src/de/bodden/ide/FlowFunctionCache.java





-generic




View file @ ae1aae21


ae1aae21


File moved




File moved


File moved




Prev


1


2


3


Next





Prev

1

2

3

Next











Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






