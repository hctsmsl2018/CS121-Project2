



GitLab












Menu




Projects
Groups
Snippets


















/








Help







Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab












Menu




Projects
Groups
Snippets


















/








Help







Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab












Menu




Projects
Groups
Snippets



GitLab






GitLab




Menu




Projects
Groups
Snippets




Menu


Projects
Groups
Snippets















/








Help







Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in
















/














/








Help







Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help



Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab




Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


haskell






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Yu Liu haskell
Commits

c8207c2f















Commit
c8207c2f


authored
Feb 26, 2015
by


darlliu



Browse files




clean up







parent
d4338cf8













Changes
7




Hide whitespace changes

Inline
Side-by-side















.gitignore








View file @ c8207c2f






......@@ -8,5 +8,5 @@ cabal-dev









*.txt










test_*










.virthualenv










*










*/*










!*.*














cybert/Cybert.hs








View file @ c8207c2f






......@@ -23,6 +23,7 @@ module Cybert









 entriesBySym,










 entriesByUpDown,










 entriesBySecondaryRef,










 showEitherF,










 cybertToSet,










 loadCybert,










 exportCybert,



......














cybert/cd271ex

deleted


100755 → 0




View file @ d4338cf8





File deleted













cybert/cd271ex.hs








View file @ c8207c2f






......@@ -13,23 +13,30 @@ countln = foldr (\z acc -> acc + (length z)) 0









 -- count cross lists num










loadCybert' = loadCybert cybert_header










main = do










 {-all_combined <- loadCybert' "./CyberT_Output/paired_2/CD271_all_together0.txt"-}










 {-let all_up = (entriesByPval 0.05) $ (entriesByUpDown True)  (extract all_combined)-}










 {-all_down = (entriesByPval 0.05) $ (entriesByUpDown False)  (extract all_combined)-}










 {-; exportCybert all_up "all_up_refs.txt"-}










 {-; exportCybert all_down "all_down_refs.txt"-}










 {-; onesM <- mapM loadCybert' $ map ("./CyberT_Output/paired_2/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]-}










 {-; pairsM <- mapM loadCybert' ["./CyberT_Output/paired_2/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]-}










 {-let ones = map extract (all_combined:onesM)-}










 {-pairs = map extract (all_combined:pairsM)-}










 {-let up = map  (entriesByPval 0.05)  (map (entriesByUpDown True) pairs)-}










 {-down = map  (entriesByPval 0.05)  (map (entriesByUpDown False) pairs)-}










 {-five_up = map (filter (\x ->  countln (pfind x up) >= 5 )) up-}










 {-five_down =map (filter (\x -> countln (pfind x down) >= 5 )) down-}










 {-five_ups = foldl union empty (map cybertToSet five_up)-}










 {-five_downs = foldl union empty (map cybertToSet five_down)-}










 {-;  exportCybert (toList five_ups) "five_up_refs.txt" -}










 {-;  exportCybert (toList five_downs) "five_down_refs.txt" -}










 all_combined <- loadCybert' "./CyberT_Output/paired_2/CD271_all_together0.txt"










 let all_up = (entriesByPval 0.05) $ (entriesByUpDown True) (extract all_combined)










 all_down = (entriesByPval 0.05) $ (entriesByUpDown False) (extract all_combined)










 ; exportCybert (extract all_combined) "all_probes_refs.txt"










 ; exportCybert all_up "all_up_refs.txt"










 ; exportCybert all_down "all_down_refs.txt"










 ; onesM <- mapM loadCybert' $ map ("./CyberT_Output/paired_2/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert' ["./CyberT_Output/paired_2/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 let ones = map extract (all_combined:onesM)










 pairs = map extract (all_combined:pairsM)










 let up = map (entriesByPval 0.05) (map (entriesByUpDown True) pairs)










 down = map (entriesByPval 0.05) (map (entriesByUpDown False) pairs)










 five_up = map (filter (\x -> countln (pfind x up) >= 5 )) up










 five_down =map (filter (\x -> countln (pfind x down) >= 5 )) down










 five_ups = foldl union empty (map cybertToSet five_up)










 five_downs = foldl union empty (map cybertToSet five_down)










 seven_up = map (filter (\x -> countln (pfind x up) >= 7 )) up










 seven_down =map (filter (\x -> countln (pfind x down) >=7 )) down










 seven_ups = foldl union empty (map cybertToSet seven_up)










 seven_downs = foldl union empty (map cybertToSet seven_down)










 ; exportCybert (toList five_ups) "five_up_refs.txt" 










 ; exportCybert (toList five_downs) "five_down_refs.txt" 










 ; exportCybert (toList seven_ups) "seven_up_refs.txt" 










 ; exportCybert (toList seven_downs) "seven_down_refs.txt" 










 ; older' <- loadCybert' "./CyberT_Output/paired_2/CD271_two_two_13.txt"










 ; xeno' <- loadCybert' "./CyberT_Output/paired_2/CD271_one_one4.txt"










 let older = extract older'



......














cybert/huanganalysis

deleted


100755 → 0




View file @ d4338cf8





File deleted













cybert/huanganalysis.hs








View file @ c8207c2f






......@@ -6,6 +6,7 @@ import Control.Monad









import qualified Control.Exception as E










import System.Directory










import System.IO










import qualified Control.Monad.Parallel as P










{-import Data.Set(fromList, toList, union, empty)-}





















cheader' = M.fromList [("Secondary_Data_FDR","fdr"), ("Secondary_Data_FPR","fpr"),("Secondary_Data_Pval1","pval1")]



......@@ -49,35 +50,38 @@ exportTargets fname xs = do









 exportProbes xs ("../ontargets/" ++ fname)










 let ss = map (\x-> let d = secondaryData x










 in stringify "\t"










 [probe x, show (mean x), show (d M.! "pval1"),










 [probe x, showEitherF (mean x), show (d M.! "pval1"),










 show (d M.! "fpr"), show (d M.! "fdr")]) xs










 writeString ("../targetdetails/"++ fname) $ 










 stringify "\n" (["accession\tmean\tpvalue(one-tail)\tFPR\tFDR"]++ss)










exportAVG fname fn xs = do










exportAVG fn xs = do










 let xxs = map fn xs










 let avg = (foldl1 (+) xxs) / (fromIntegral (length xxs))










 let avg = if length xs >=2 then (foldl1 (+) xxs) / (fromIntegral (length xxs))










 else 1.0










 let gname = if length xs == 0 then "Unknown"










 else fromMaybe "Unknown" (collection $ (xs !! 0))










 let ss = gname ++ "\t" ++ (show avg) ++ "\n"










 withFile fname AppendMode (\handle -> do










 hPutStr handle ss)










subroutine:: (Maybe [Cybert_entry]) -> IO()










 return ss










subroutine:: (Maybe [Cybert_entry]) -> IO ([String])










subroutine xs = do










 let xxs'= fromMaybe [] xs










 let fname = if length xxs' == 0 then "Nill.dummy"










 else fromMaybe "Nill.dummy" (collection $ xxs' !! 0)










 ; exportScatter fname xxs'










 ; exportAVG "../avgs/Total_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Total_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 {-; exportAVG "../avgs/Total_AVG_mean.tsv" mean xxs'-}










 let xxs = filter (\x -> let d = (secondaryData x)










 in if (d M.! "fdr") < 0.0 then (pval x) < 0.05










 {-in case where beta fitting fails-}










 else (d M.! "pval1") <0.05 && (d M.! "fdr") < 0.1










 ) xxs'










 else (d M.! "pval1") <0.05 










 {-&& (d M.! "fdr") < 0.1-}










 ) (entriesByUpDown True xxs')










 ; putStrLn (fname ++" , "++(show $ length xxs))










 ; exportTargets fname xxs










 ; exportAVG "../avgs/Targets_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Targets_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 ; tot_p <- exportAVG pval xxs'










 ; tot_f <- exportAVG (\x->let d = secondaryData x in d M.! "fdr") xxs'










 ; tar_p <- exportAVG pval xxs










 ; tar_f <- exportAVG (\x->let d = secondaryData x in d M.! "fdr") xxs










 return [tot_p,tot_f,tar_p,tar_f]










 {-; exportAVG "../avgs/Targets_AVG_mean.tsv"  xxs'-}





















routine :: FilePath -> FilePath -> IO()



......@@ -87,8 +91,16 @@ routine root cur = do









 filenames' <- getDirectoryContents "."










 let filenames = filter (\x -> "_cybert_result.tsv" `isInfixOf` x) filenames'










 collections <- mapM loadCybert' filenames










 putStrLn $ show filenames










 {-acquire cybert entries -}










 mapM subroutine collections










 avgs <- P.mapM subroutine collections










 writeString "../avgs/Total_AVG_pval.tsv" (stringify "\n" (map (\x->x!!0) avgs))










 writeString "../avgs/Total_AVG_fdr.tsv" (stringify "\n" (map (\x->x!!1) avgs))










 writeString "../avgs/Targets_AVG_pval.tsv" (stringify "\n" (map (\x->x!!2) avgs))










 writeString "../avgs/Targets_AVG_fdr.tsv" (stringify "\n" (map (\x->x!!3) avgs))










 {-E.evaluate $ runEval $ do-}










 {-parMap (rpar.subroutine) collections-}










 {-parMap rseq parTasks-}










 {-use pval of 0.05 and fpr of 0.1 to filter-}










 putStr $ "\nHandled" ++ cur ++"\n"










 setCurrentDirectory root



......














stm/test.hs








View file @ c8207c2f













module Main where










import Control.Monad










import Control.Concurrent










import Control.Concurrent.STM





















arrayRed::Int-> Int -> STM ()










arrayRed t th = do










 --allocate t arrays










 ; arr <- atomically $ newTVar (take t [1 ..])










 --parallel divide of 1 over










 ; forkIO $ th `timesDo` (appV (\x-> 1/x ) arr)










 milliSleep 800










 ; after <- atomically . readTVar arr










 --reduction(atomic)










 where timesDo = replicateM_










 milliSleep = theadDelay . (*) 1000










 










main = do shared <- atomically $ newTVar 0










 before <- atomRead shared










 putStrLn $ "Before: " ++ show before










 forkIO $ 25 `timesDo` (dispVar shared >> milliSleep 20)










 forkIO $ 10 `timesDo` (appV ((+) 2) shared >> milliSleep 50)










 forkIO $ 20 `timesDo` (appV pred shared >> milliSleep 25)










 milliSleep 800










 after <- atomRead shared










 putStrLn $ "After: " ++ show after










 where timesDo = replicateM_










 milliSleep = threadDelay . (*) 1000










 










atomRead = atomically . readTVar










dispVar x = atomRead x >>= print










appV fn x = atomically $ readTVar x >>= writeTVar x . fn
















Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


haskell






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


haskell


H
H
haskell




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Yu Liu haskell
Commits

c8207c2f















Commit
c8207c2f


authored
Feb 26, 2015
by


darlliu



Browse files




clean up







parent
d4338cf8













Changes
7




Hide whitespace changes

Inline
Side-by-side















.gitignore








View file @ c8207c2f






......@@ -8,5 +8,5 @@ cabal-dev









*.txt










test_*










.virthualenv










*










*/*










!*.*














cybert/Cybert.hs








View file @ c8207c2f






......@@ -23,6 +23,7 @@ module Cybert









 entriesBySym,










 entriesByUpDown,










 entriesBySecondaryRef,










 showEitherF,










 cybertToSet,










 loadCybert,










 exportCybert,



......














cybert/cd271ex

deleted


100755 → 0




View file @ d4338cf8





File deleted













cybert/cd271ex.hs








View file @ c8207c2f






......@@ -13,23 +13,30 @@ countln = foldr (\z acc -> acc + (length z)) 0









 -- count cross lists num










loadCybert' = loadCybert cybert_header










main = do










 {-all_combined <- loadCybert' "./CyberT_Output/paired_2/CD271_all_together0.txt"-}










 {-let all_up = (entriesByPval 0.05) $ (entriesByUpDown True)  (extract all_combined)-}










 {-all_down = (entriesByPval 0.05) $ (entriesByUpDown False)  (extract all_combined)-}










 {-; exportCybert all_up "all_up_refs.txt"-}










 {-; exportCybert all_down "all_down_refs.txt"-}










 {-; onesM <- mapM loadCybert' $ map ("./CyberT_Output/paired_2/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]-}










 {-; pairsM <- mapM loadCybert' ["./CyberT_Output/paired_2/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]-}










 {-let ones = map extract (all_combined:onesM)-}










 {-pairs = map extract (all_combined:pairsM)-}










 {-let up = map  (entriesByPval 0.05)  (map (entriesByUpDown True) pairs)-}










 {-down = map  (entriesByPval 0.05)  (map (entriesByUpDown False) pairs)-}










 {-five_up = map (filter (\x ->  countln (pfind x up) >= 5 )) up-}










 {-five_down =map (filter (\x -> countln (pfind x down) >= 5 )) down-}










 {-five_ups = foldl union empty (map cybertToSet five_up)-}










 {-five_downs = foldl union empty (map cybertToSet five_down)-}










 {-;  exportCybert (toList five_ups) "five_up_refs.txt" -}










 {-;  exportCybert (toList five_downs) "five_down_refs.txt" -}










 all_combined <- loadCybert' "./CyberT_Output/paired_2/CD271_all_together0.txt"










 let all_up = (entriesByPval 0.05) $ (entriesByUpDown True) (extract all_combined)










 all_down = (entriesByPval 0.05) $ (entriesByUpDown False) (extract all_combined)










 ; exportCybert (extract all_combined) "all_probes_refs.txt"










 ; exportCybert all_up "all_up_refs.txt"










 ; exportCybert all_down "all_down_refs.txt"










 ; onesM <- mapM loadCybert' $ map ("./CyberT_Output/paired_2/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert' ["./CyberT_Output/paired_2/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 let ones = map extract (all_combined:onesM)










 pairs = map extract (all_combined:pairsM)










 let up = map (entriesByPval 0.05) (map (entriesByUpDown True) pairs)










 down = map (entriesByPval 0.05) (map (entriesByUpDown False) pairs)










 five_up = map (filter (\x -> countln (pfind x up) >= 5 )) up










 five_down =map (filter (\x -> countln (pfind x down) >= 5 )) down










 five_ups = foldl union empty (map cybertToSet five_up)










 five_downs = foldl union empty (map cybertToSet five_down)










 seven_up = map (filter (\x -> countln (pfind x up) >= 7 )) up










 seven_down =map (filter (\x -> countln (pfind x down) >=7 )) down










 seven_ups = foldl union empty (map cybertToSet seven_up)










 seven_downs = foldl union empty (map cybertToSet seven_down)










 ; exportCybert (toList five_ups) "five_up_refs.txt" 










 ; exportCybert (toList five_downs) "five_down_refs.txt" 










 ; exportCybert (toList seven_ups) "seven_up_refs.txt" 










 ; exportCybert (toList seven_downs) "seven_down_refs.txt" 










 ; older' <- loadCybert' "./CyberT_Output/paired_2/CD271_two_two_13.txt"










 ; xeno' <- loadCybert' "./CyberT_Output/paired_2/CD271_one_one4.txt"










 let older = extract older'



......














cybert/huanganalysis

deleted


100755 → 0




View file @ d4338cf8





File deleted













cybert/huanganalysis.hs








View file @ c8207c2f






......@@ -6,6 +6,7 @@ import Control.Monad









import qualified Control.Exception as E










import System.Directory










import System.IO










import qualified Control.Monad.Parallel as P










{-import Data.Set(fromList, toList, union, empty)-}





















cheader' = M.fromList [("Secondary_Data_FDR","fdr"), ("Secondary_Data_FPR","fpr"),("Secondary_Data_Pval1","pval1")]



......@@ -49,35 +50,38 @@ exportTargets fname xs = do









 exportProbes xs ("../ontargets/" ++ fname)










 let ss = map (\x-> let d = secondaryData x










 in stringify "\t"










 [probe x, show (mean x), show (d M.! "pval1"),










 [probe x, showEitherF (mean x), show (d M.! "pval1"),










 show (d M.! "fpr"), show (d M.! "fdr")]) xs










 writeString ("../targetdetails/"++ fname) $ 










 stringify "\n" (["accession\tmean\tpvalue(one-tail)\tFPR\tFDR"]++ss)










exportAVG fname fn xs = do










exportAVG fn xs = do










 let xxs = map fn xs










 let avg = (foldl1 (+) xxs) / (fromIntegral (length xxs))










 let avg = if length xs >=2 then (foldl1 (+) xxs) / (fromIntegral (length xxs))










 else 1.0










 let gname = if length xs == 0 then "Unknown"










 else fromMaybe "Unknown" (collection $ (xs !! 0))










 let ss = gname ++ "\t" ++ (show avg) ++ "\n"










 withFile fname AppendMode (\handle -> do










 hPutStr handle ss)










subroutine:: (Maybe [Cybert_entry]) -> IO()










 return ss










subroutine:: (Maybe [Cybert_entry]) -> IO ([String])










subroutine xs = do










 let xxs'= fromMaybe [] xs










 let fname = if length xxs' == 0 then "Nill.dummy"










 else fromMaybe "Nill.dummy" (collection $ xxs' !! 0)










 ; exportScatter fname xxs'










 ; exportAVG "../avgs/Total_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Total_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 {-; exportAVG "../avgs/Total_AVG_mean.tsv" mean xxs'-}










 let xxs = filter (\x -> let d = (secondaryData x)










 in if (d M.! "fdr") < 0.0 then (pval x) < 0.05










 {-in case where beta fitting fails-}










 else (d M.! "pval1") <0.05 && (d M.! "fdr") < 0.1










 ) xxs'










 else (d M.! "pval1") <0.05 










 {-&& (d M.! "fdr") < 0.1-}










 ) (entriesByUpDown True xxs')










 ; putStrLn (fname ++" , "++(show $ length xxs))










 ; exportTargets fname xxs










 ; exportAVG "../avgs/Targets_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Targets_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 ; tot_p <- exportAVG pval xxs'










 ; tot_f <- exportAVG (\x->let d = secondaryData x in d M.! "fdr") xxs'










 ; tar_p <- exportAVG pval xxs










 ; tar_f <- exportAVG (\x->let d = secondaryData x in d M.! "fdr") xxs










 return [tot_p,tot_f,tar_p,tar_f]










 {-; exportAVG "../avgs/Targets_AVG_mean.tsv"  xxs'-}





















routine :: FilePath -> FilePath -> IO()



......@@ -87,8 +91,16 @@ routine root cur = do









 filenames' <- getDirectoryContents "."










 let filenames = filter (\x -> "_cybert_result.tsv" `isInfixOf` x) filenames'










 collections <- mapM loadCybert' filenames










 putStrLn $ show filenames










 {-acquire cybert entries -}










 mapM subroutine collections










 avgs <- P.mapM subroutine collections










 writeString "../avgs/Total_AVG_pval.tsv" (stringify "\n" (map (\x->x!!0) avgs))










 writeString "../avgs/Total_AVG_fdr.tsv" (stringify "\n" (map (\x->x!!1) avgs))










 writeString "../avgs/Targets_AVG_pval.tsv" (stringify "\n" (map (\x->x!!2) avgs))










 writeString "../avgs/Targets_AVG_fdr.tsv" (stringify "\n" (map (\x->x!!3) avgs))










 {-E.evaluate $ runEval $ do-}










 {-parMap (rpar.subroutine) collections-}










 {-parMap rseq parTasks-}










 {-use pval of 0.05 and fpr of 0.1 to filter-}










 putStr $ "\nHandled" ++ cur ++"\n"










 setCurrentDirectory root



......














stm/test.hs








View file @ c8207c2f













module Main where










import Control.Monad










import Control.Concurrent










import Control.Concurrent.STM





















arrayRed::Int-> Int -> STM ()










arrayRed t th = do










 --allocate t arrays










 ; arr <- atomically $ newTVar (take t [1 ..])










 --parallel divide of 1 over










 ; forkIO $ th `timesDo` (appV (\x-> 1/x ) arr)










 milliSleep 800










 ; after <- atomically . readTVar arr










 --reduction(atomic)










 where timesDo = replicateM_










 milliSleep = theadDelay . (*) 1000










 










main = do shared <- atomically $ newTVar 0










 before <- atomRead shared










 putStrLn $ "Before: " ++ show before










 forkIO $ 25 `timesDo` (dispVar shared >> milliSleep 20)










 forkIO $ 10 `timesDo` (appV ((+) 2) shared >> milliSleep 50)










 forkIO $ 20 `timesDo` (appV pred shared >> milliSleep 25)










 milliSleep 800










 after <- atomRead shared










 putStrLn $ "After: " ++ show after










 where timesDo = replicateM_










 milliSleep = threadDelay . (*) 1000










 










atomRead = atomically . readTVar










dispVar x = atomRead x >>= print










appV fn x = atomically $ readTVar x >>= writeTVar x . fn
















Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Yu Liu haskell
Commits

c8207c2f







Open sidebar



Yu Liu haskell
Commits

c8207c2f




Open sidebar

Yu Liu haskell
Commits

c8207c2f


Yu LiuhaskellhaskellCommits
c8207c2f








Commit
c8207c2f


authored
Feb 26, 2015
by


darlliu



Browse files




clean up







parent
d4338cf8













Changes
7




Hide whitespace changes

Inline
Side-by-side















.gitignore








View file @ c8207c2f






......@@ -8,5 +8,5 @@ cabal-dev









*.txt










test_*










.virthualenv










*










*/*










!*.*














cybert/Cybert.hs








View file @ c8207c2f






......@@ -23,6 +23,7 @@ module Cybert









 entriesBySym,










 entriesByUpDown,










 entriesBySecondaryRef,










 showEitherF,










 cybertToSet,










 loadCybert,










 exportCybert,



......














cybert/cd271ex

deleted


100755 → 0




View file @ d4338cf8





File deleted













cybert/cd271ex.hs








View file @ c8207c2f






......@@ -13,23 +13,30 @@ countln = foldr (\z acc -> acc + (length z)) 0









 -- count cross lists num










loadCybert' = loadCybert cybert_header










main = do










 {-all_combined <- loadCybert' "./CyberT_Output/paired_2/CD271_all_together0.txt"-}










 {-let all_up = (entriesByPval 0.05) $ (entriesByUpDown True)  (extract all_combined)-}










 {-all_down = (entriesByPval 0.05) $ (entriesByUpDown False)  (extract all_combined)-}










 {-; exportCybert all_up "all_up_refs.txt"-}










 {-; exportCybert all_down "all_down_refs.txt"-}










 {-; onesM <- mapM loadCybert' $ map ("./CyberT_Output/paired_2/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]-}










 {-; pairsM <- mapM loadCybert' ["./CyberT_Output/paired_2/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]-}










 {-let ones = map extract (all_combined:onesM)-}










 {-pairs = map extract (all_combined:pairsM)-}










 {-let up = map  (entriesByPval 0.05)  (map (entriesByUpDown True) pairs)-}










 {-down = map  (entriesByPval 0.05)  (map (entriesByUpDown False) pairs)-}










 {-five_up = map (filter (\x ->  countln (pfind x up) >= 5 )) up-}










 {-five_down =map (filter (\x -> countln (pfind x down) >= 5 )) down-}










 {-five_ups = foldl union empty (map cybertToSet five_up)-}










 {-five_downs = foldl union empty (map cybertToSet five_down)-}










 {-;  exportCybert (toList five_ups) "five_up_refs.txt" -}










 {-;  exportCybert (toList five_downs) "five_down_refs.txt" -}










 all_combined <- loadCybert' "./CyberT_Output/paired_2/CD271_all_together0.txt"










 let all_up = (entriesByPval 0.05) $ (entriesByUpDown True) (extract all_combined)










 all_down = (entriesByPval 0.05) $ (entriesByUpDown False) (extract all_combined)










 ; exportCybert (extract all_combined) "all_probes_refs.txt"










 ; exportCybert all_up "all_up_refs.txt"










 ; exportCybert all_down "all_down_refs.txt"










 ; onesM <- mapM loadCybert' $ map ("./CyberT_Output/paired_2/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert' ["./CyberT_Output/paired_2/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 let ones = map extract (all_combined:onesM)










 pairs = map extract (all_combined:pairsM)










 let up = map (entriesByPval 0.05) (map (entriesByUpDown True) pairs)










 down = map (entriesByPval 0.05) (map (entriesByUpDown False) pairs)










 five_up = map (filter (\x -> countln (pfind x up) >= 5 )) up










 five_down =map (filter (\x -> countln (pfind x down) >= 5 )) down










 five_ups = foldl union empty (map cybertToSet five_up)










 five_downs = foldl union empty (map cybertToSet five_down)










 seven_up = map (filter (\x -> countln (pfind x up) >= 7 )) up










 seven_down =map (filter (\x -> countln (pfind x down) >=7 )) down










 seven_ups = foldl union empty (map cybertToSet seven_up)










 seven_downs = foldl union empty (map cybertToSet seven_down)










 ; exportCybert (toList five_ups) "five_up_refs.txt" 










 ; exportCybert (toList five_downs) "five_down_refs.txt" 










 ; exportCybert (toList seven_ups) "seven_up_refs.txt" 










 ; exportCybert (toList seven_downs) "seven_down_refs.txt" 










 ; older' <- loadCybert' "./CyberT_Output/paired_2/CD271_two_two_13.txt"










 ; xeno' <- loadCybert' "./CyberT_Output/paired_2/CD271_one_one4.txt"










 let older = extract older'



......














cybert/huanganalysis

deleted


100755 → 0




View file @ d4338cf8





File deleted













cybert/huanganalysis.hs








View file @ c8207c2f






......@@ -6,6 +6,7 @@ import Control.Monad









import qualified Control.Exception as E










import System.Directory










import System.IO










import qualified Control.Monad.Parallel as P










{-import Data.Set(fromList, toList, union, empty)-}





















cheader' = M.fromList [("Secondary_Data_FDR","fdr"), ("Secondary_Data_FPR","fpr"),("Secondary_Data_Pval1","pval1")]



......@@ -49,35 +50,38 @@ exportTargets fname xs = do









 exportProbes xs ("../ontargets/" ++ fname)










 let ss = map (\x-> let d = secondaryData x










 in stringify "\t"










 [probe x, show (mean x), show (d M.! "pval1"),










 [probe x, showEitherF (mean x), show (d M.! "pval1"),










 show (d M.! "fpr"), show (d M.! "fdr")]) xs










 writeString ("../targetdetails/"++ fname) $ 










 stringify "\n" (["accession\tmean\tpvalue(one-tail)\tFPR\tFDR"]++ss)










exportAVG fname fn xs = do










exportAVG fn xs = do










 let xxs = map fn xs










 let avg = (foldl1 (+) xxs) / (fromIntegral (length xxs))










 let avg = if length xs >=2 then (foldl1 (+) xxs) / (fromIntegral (length xxs))










 else 1.0










 let gname = if length xs == 0 then "Unknown"










 else fromMaybe "Unknown" (collection $ (xs !! 0))










 let ss = gname ++ "\t" ++ (show avg) ++ "\n"










 withFile fname AppendMode (\handle -> do










 hPutStr handle ss)










subroutine:: (Maybe [Cybert_entry]) -> IO()










 return ss










subroutine:: (Maybe [Cybert_entry]) -> IO ([String])










subroutine xs = do










 let xxs'= fromMaybe [] xs










 let fname = if length xxs' == 0 then "Nill.dummy"










 else fromMaybe "Nill.dummy" (collection $ xxs' !! 0)










 ; exportScatter fname xxs'










 ; exportAVG "../avgs/Total_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Total_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 {-; exportAVG "../avgs/Total_AVG_mean.tsv" mean xxs'-}










 let xxs = filter (\x -> let d = (secondaryData x)










 in if (d M.! "fdr") < 0.0 then (pval x) < 0.05










 {-in case where beta fitting fails-}










 else (d M.! "pval1") <0.05 && (d M.! "fdr") < 0.1










 ) xxs'










 else (d M.! "pval1") <0.05 










 {-&& (d M.! "fdr") < 0.1-}










 ) (entriesByUpDown True xxs')










 ; putStrLn (fname ++" , "++(show $ length xxs))










 ; exportTargets fname xxs










 ; exportAVG "../avgs/Targets_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Targets_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 ; tot_p <- exportAVG pval xxs'










 ; tot_f <- exportAVG (\x->let d = secondaryData x in d M.! "fdr") xxs'










 ; tar_p <- exportAVG pval xxs










 ; tar_f <- exportAVG (\x->let d = secondaryData x in d M.! "fdr") xxs










 return [tot_p,tot_f,tar_p,tar_f]










 {-; exportAVG "../avgs/Targets_AVG_mean.tsv"  xxs'-}





















routine :: FilePath -> FilePath -> IO()



......@@ -87,8 +91,16 @@ routine root cur = do









 filenames' <- getDirectoryContents "."










 let filenames = filter (\x -> "_cybert_result.tsv" `isInfixOf` x) filenames'










 collections <- mapM loadCybert' filenames










 putStrLn $ show filenames










 {-acquire cybert entries -}










 mapM subroutine collections










 avgs <- P.mapM subroutine collections










 writeString "../avgs/Total_AVG_pval.tsv" (stringify "\n" (map (\x->x!!0) avgs))










 writeString "../avgs/Total_AVG_fdr.tsv" (stringify "\n" (map (\x->x!!1) avgs))










 writeString "../avgs/Targets_AVG_pval.tsv" (stringify "\n" (map (\x->x!!2) avgs))










 writeString "../avgs/Targets_AVG_fdr.tsv" (stringify "\n" (map (\x->x!!3) avgs))










 {-E.evaluate $ runEval $ do-}










 {-parMap (rpar.subroutine) collections-}










 {-parMap rseq parTasks-}










 {-use pval of 0.05 and fpr of 0.1 to filter-}










 putStr $ "\nHandled" ++ cur ++"\n"










 setCurrentDirectory root



......














stm/test.hs








View file @ c8207c2f













module Main where










import Control.Monad










import Control.Concurrent










import Control.Concurrent.STM





















arrayRed::Int-> Int -> STM ()










arrayRed t th = do










 --allocate t arrays










 ; arr <- atomically $ newTVar (take t [1 ..])










 --parallel divide of 1 over










 ; forkIO $ th `timesDo` (appV (\x-> 1/x ) arr)










 milliSleep 800










 ; after <- atomically . readTVar arr










 --reduction(atomic)










 where timesDo = replicateM_










 milliSleep = theadDelay . (*) 1000










 










main = do shared <- atomically $ newTVar 0










 before <- atomRead shared










 putStrLn $ "Before: " ++ show before










 forkIO $ 25 `timesDo` (dispVar shared >> milliSleep 20)










 forkIO $ 10 `timesDo` (appV ((+) 2) shared >> milliSleep 50)










 forkIO $ 20 `timesDo` (appV pred shared >> milliSleep 25)










 milliSleep 800










 after <- atomRead shared










 putStrLn $ "After: " ++ show after










 where timesDo = replicateM_










 milliSleep = threadDelay . (*) 1000










 










atomRead = atomically . readTVar










dispVar x = atomRead x >>= print










appV fn x = atomically $ readTVar x >>= writeTVar x . fn
















Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
c8207c2f


authored
Feb 26, 2015
by


darlliu



Browse files




clean up







parent
d4338cf8













Changes
7




Hide whitespace changes

Inline
Side-by-side















.gitignore








View file @ c8207c2f






......@@ -8,5 +8,5 @@ cabal-dev









*.txt










test_*










.virthualenv










*










*/*










!*.*














cybert/Cybert.hs








View file @ c8207c2f






......@@ -23,6 +23,7 @@ module Cybert









 entriesBySym,










 entriesByUpDown,










 entriesBySecondaryRef,










 showEitherF,










 cybertToSet,










 loadCybert,










 exportCybert,



......














cybert/cd271ex

deleted


100755 → 0




View file @ d4338cf8





File deleted













cybert/cd271ex.hs








View file @ c8207c2f






......@@ -13,23 +13,30 @@ countln = foldr (\z acc -> acc + (length z)) 0









 -- count cross lists num










loadCybert' = loadCybert cybert_header










main = do










 {-all_combined <- loadCybert' "./CyberT_Output/paired_2/CD271_all_together0.txt"-}










 {-let all_up = (entriesByPval 0.05) $ (entriesByUpDown True)  (extract all_combined)-}










 {-all_down = (entriesByPval 0.05) $ (entriesByUpDown False)  (extract all_combined)-}










 {-; exportCybert all_up "all_up_refs.txt"-}










 {-; exportCybert all_down "all_down_refs.txt"-}










 {-; onesM <- mapM loadCybert' $ map ("./CyberT_Output/paired_2/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]-}










 {-; pairsM <- mapM loadCybert' ["./CyberT_Output/paired_2/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]-}










 {-let ones = map extract (all_combined:onesM)-}










 {-pairs = map extract (all_combined:pairsM)-}










 {-let up = map  (entriesByPval 0.05)  (map (entriesByUpDown True) pairs)-}










 {-down = map  (entriesByPval 0.05)  (map (entriesByUpDown False) pairs)-}










 {-five_up = map (filter (\x ->  countln (pfind x up) >= 5 )) up-}










 {-five_down =map (filter (\x -> countln (pfind x down) >= 5 )) down-}










 {-five_ups = foldl union empty (map cybertToSet five_up)-}










 {-five_downs = foldl union empty (map cybertToSet five_down)-}










 {-;  exportCybert (toList five_ups) "five_up_refs.txt" -}










 {-;  exportCybert (toList five_downs) "five_down_refs.txt" -}










 all_combined <- loadCybert' "./CyberT_Output/paired_2/CD271_all_together0.txt"










 let all_up = (entriesByPval 0.05) $ (entriesByUpDown True) (extract all_combined)










 all_down = (entriesByPval 0.05) $ (entriesByUpDown False) (extract all_combined)










 ; exportCybert (extract all_combined) "all_probes_refs.txt"










 ; exportCybert all_up "all_up_refs.txt"










 ; exportCybert all_down "all_down_refs.txt"










 ; onesM <- mapM loadCybert' $ map ("./CyberT_Output/paired_2/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert' ["./CyberT_Output/paired_2/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 let ones = map extract (all_combined:onesM)










 pairs = map extract (all_combined:pairsM)










 let up = map (entriesByPval 0.05) (map (entriesByUpDown True) pairs)










 down = map (entriesByPval 0.05) (map (entriesByUpDown False) pairs)










 five_up = map (filter (\x -> countln (pfind x up) >= 5 )) up










 five_down =map (filter (\x -> countln (pfind x down) >= 5 )) down










 five_ups = foldl union empty (map cybertToSet five_up)










 five_downs = foldl union empty (map cybertToSet five_down)










 seven_up = map (filter (\x -> countln (pfind x up) >= 7 )) up










 seven_down =map (filter (\x -> countln (pfind x down) >=7 )) down










 seven_ups = foldl union empty (map cybertToSet seven_up)










 seven_downs = foldl union empty (map cybertToSet seven_down)










 ; exportCybert (toList five_ups) "five_up_refs.txt" 










 ; exportCybert (toList five_downs) "five_down_refs.txt" 










 ; exportCybert (toList seven_ups) "seven_up_refs.txt" 










 ; exportCybert (toList seven_downs) "seven_down_refs.txt" 










 ; older' <- loadCybert' "./CyberT_Output/paired_2/CD271_two_two_13.txt"










 ; xeno' <- loadCybert' "./CyberT_Output/paired_2/CD271_one_one4.txt"










 let older = extract older'



......














cybert/huanganalysis

deleted


100755 → 0




View file @ d4338cf8





File deleted













cybert/huanganalysis.hs








View file @ c8207c2f






......@@ -6,6 +6,7 @@ import Control.Monad









import qualified Control.Exception as E










import System.Directory










import System.IO










import qualified Control.Monad.Parallel as P










{-import Data.Set(fromList, toList, union, empty)-}





















cheader' = M.fromList [("Secondary_Data_FDR","fdr"), ("Secondary_Data_FPR","fpr"),("Secondary_Data_Pval1","pval1")]



......@@ -49,35 +50,38 @@ exportTargets fname xs = do









 exportProbes xs ("../ontargets/" ++ fname)










 let ss = map (\x-> let d = secondaryData x










 in stringify "\t"










 [probe x, show (mean x), show (d M.! "pval1"),










 [probe x, showEitherF (mean x), show (d M.! "pval1"),










 show (d M.! "fpr"), show (d M.! "fdr")]) xs










 writeString ("../targetdetails/"++ fname) $ 










 stringify "\n" (["accession\tmean\tpvalue(one-tail)\tFPR\tFDR"]++ss)










exportAVG fname fn xs = do










exportAVG fn xs = do










 let xxs = map fn xs










 let avg = (foldl1 (+) xxs) / (fromIntegral (length xxs))










 let avg = if length xs >=2 then (foldl1 (+) xxs) / (fromIntegral (length xxs))










 else 1.0










 let gname = if length xs == 0 then "Unknown"










 else fromMaybe "Unknown" (collection $ (xs !! 0))










 let ss = gname ++ "\t" ++ (show avg) ++ "\n"










 withFile fname AppendMode (\handle -> do










 hPutStr handle ss)










subroutine:: (Maybe [Cybert_entry]) -> IO()










 return ss










subroutine:: (Maybe [Cybert_entry]) -> IO ([String])










subroutine xs = do










 let xxs'= fromMaybe [] xs










 let fname = if length xxs' == 0 then "Nill.dummy"










 else fromMaybe "Nill.dummy" (collection $ xxs' !! 0)










 ; exportScatter fname xxs'










 ; exportAVG "../avgs/Total_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Total_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 {-; exportAVG "../avgs/Total_AVG_mean.tsv" mean xxs'-}










 let xxs = filter (\x -> let d = (secondaryData x)










 in if (d M.! "fdr") < 0.0 then (pval x) < 0.05










 {-in case where beta fitting fails-}










 else (d M.! "pval1") <0.05 && (d M.! "fdr") < 0.1










 ) xxs'










 else (d M.! "pval1") <0.05 










 {-&& (d M.! "fdr") < 0.1-}










 ) (entriesByUpDown True xxs')










 ; putStrLn (fname ++" , "++(show $ length xxs))










 ; exportTargets fname xxs










 ; exportAVG "../avgs/Targets_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Targets_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 ; tot_p <- exportAVG pval xxs'










 ; tot_f <- exportAVG (\x->let d = secondaryData x in d M.! "fdr") xxs'










 ; tar_p <- exportAVG pval xxs










 ; tar_f <- exportAVG (\x->let d = secondaryData x in d M.! "fdr") xxs










 return [tot_p,tot_f,tar_p,tar_f]










 {-; exportAVG "../avgs/Targets_AVG_mean.tsv"  xxs'-}





















routine :: FilePath -> FilePath -> IO()



......@@ -87,8 +91,16 @@ routine root cur = do









 filenames' <- getDirectoryContents "."










 let filenames = filter (\x -> "_cybert_result.tsv" `isInfixOf` x) filenames'










 collections <- mapM loadCybert' filenames










 putStrLn $ show filenames










 {-acquire cybert entries -}










 mapM subroutine collections










 avgs <- P.mapM subroutine collections










 writeString "../avgs/Total_AVG_pval.tsv" (stringify "\n" (map (\x->x!!0) avgs))










 writeString "../avgs/Total_AVG_fdr.tsv" (stringify "\n" (map (\x->x!!1) avgs))










 writeString "../avgs/Targets_AVG_pval.tsv" (stringify "\n" (map (\x->x!!2) avgs))










 writeString "../avgs/Targets_AVG_fdr.tsv" (stringify "\n" (map (\x->x!!3) avgs))










 {-E.evaluate $ runEval $ do-}










 {-parMap (rpar.subroutine) collections-}










 {-parMap rseq parTasks-}










 {-use pval of 0.05 and fpr of 0.1 to filter-}










 putStr $ "\nHandled" ++ cur ++"\n"










 setCurrentDirectory root



......














stm/test.hs








View file @ c8207c2f













module Main where










import Control.Monad










import Control.Concurrent










import Control.Concurrent.STM





















arrayRed::Int-> Int -> STM ()










arrayRed t th = do










 --allocate t arrays










 ; arr <- atomically $ newTVar (take t [1 ..])










 --parallel divide of 1 over










 ; forkIO $ th `timesDo` (appV (\x-> 1/x ) arr)










 milliSleep 800










 ; after <- atomically . readTVar arr










 --reduction(atomic)










 where timesDo = replicateM_










 milliSleep = theadDelay . (*) 1000










 










main = do shared <- atomically $ newTVar 0










 before <- atomRead shared










 putStrLn $ "Before: " ++ show before










 forkIO $ 25 `timesDo` (dispVar shared >> milliSleep 20)










 forkIO $ 10 `timesDo` (appV ((+) 2) shared >> milliSleep 50)










 forkIO $ 20 `timesDo` (appV pred shared >> milliSleep 25)










 milliSleep 800










 after <- atomRead shared










 putStrLn $ "After: " ++ show after










 where timesDo = replicateM_










 milliSleep = threadDelay . (*) 1000










 










atomRead = atomically . readTVar










dispVar x = atomRead x >>= print










appV fn x = atomically $ readTVar x >>= writeTVar x . fn
















Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
c8207c2f


authored
Feb 26, 2015
by


darlliu



Browse files



Commit
c8207c2f


authored
Feb 26, 2015
by


darlliu

c8207c2fauthoredbydarlliu

clean up






parent
d4338cf8
















parent
d4338cf8





parent












Changes
7
7


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










.gitignore








View file @ c8207c2f






......@@ -8,5 +8,5 @@ cabal-dev









*.txt










test_*










.virthualenv










*










*/*










!*.*














cybert/Cybert.hs








View file @ c8207c2f






......@@ -23,6 +23,7 @@ module Cybert









 entriesBySym,










 entriesByUpDown,










 entriesBySecondaryRef,










 showEitherF,










 cybertToSet,










 loadCybert,










 exportCybert,



......














cybert/cd271ex

deleted


100755 → 0




View file @ d4338cf8





File deleted













cybert/cd271ex.hs








View file @ c8207c2f






......@@ -13,23 +13,30 @@ countln = foldr (\z acc -> acc + (length z)) 0









 -- count cross lists num










loadCybert' = loadCybert cybert_header










main = do










 {-all_combined <- loadCybert' "./CyberT_Output/paired_2/CD271_all_together0.txt"-}










 {-let all_up = (entriesByPval 0.05) $ (entriesByUpDown True)  (extract all_combined)-}










 {-all_down = (entriesByPval 0.05) $ (entriesByUpDown False)  (extract all_combined)-}










 {-; exportCybert all_up "all_up_refs.txt"-}










 {-; exportCybert all_down "all_down_refs.txt"-}










 {-; onesM <- mapM loadCybert' $ map ("./CyberT_Output/paired_2/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]-}










 {-; pairsM <- mapM loadCybert' ["./CyberT_Output/paired_2/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]-}










 {-let ones = map extract (all_combined:onesM)-}










 {-pairs = map extract (all_combined:pairsM)-}










 {-let up = map  (entriesByPval 0.05)  (map (entriesByUpDown True) pairs)-}










 {-down = map  (entriesByPval 0.05)  (map (entriesByUpDown False) pairs)-}










 {-five_up = map (filter (\x ->  countln (pfind x up) >= 5 )) up-}










 {-five_down =map (filter (\x -> countln (pfind x down) >= 5 )) down-}










 {-five_ups = foldl union empty (map cybertToSet five_up)-}










 {-five_downs = foldl union empty (map cybertToSet five_down)-}










 {-;  exportCybert (toList five_ups) "five_up_refs.txt" -}










 {-;  exportCybert (toList five_downs) "five_down_refs.txt" -}










 all_combined <- loadCybert' "./CyberT_Output/paired_2/CD271_all_together0.txt"










 let all_up = (entriesByPval 0.05) $ (entriesByUpDown True) (extract all_combined)










 all_down = (entriesByPval 0.05) $ (entriesByUpDown False) (extract all_combined)










 ; exportCybert (extract all_combined) "all_probes_refs.txt"










 ; exportCybert all_up "all_up_refs.txt"










 ; exportCybert all_down "all_down_refs.txt"










 ; onesM <- mapM loadCybert' $ map ("./CyberT_Output/paired_2/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert' ["./CyberT_Output/paired_2/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 let ones = map extract (all_combined:onesM)










 pairs = map extract (all_combined:pairsM)










 let up = map (entriesByPval 0.05) (map (entriesByUpDown True) pairs)










 down = map (entriesByPval 0.05) (map (entriesByUpDown False) pairs)










 five_up = map (filter (\x -> countln (pfind x up) >= 5 )) up










 five_down =map (filter (\x -> countln (pfind x down) >= 5 )) down










 five_ups = foldl union empty (map cybertToSet five_up)










 five_downs = foldl union empty (map cybertToSet five_down)










 seven_up = map (filter (\x -> countln (pfind x up) >= 7 )) up










 seven_down =map (filter (\x -> countln (pfind x down) >=7 )) down










 seven_ups = foldl union empty (map cybertToSet seven_up)










 seven_downs = foldl union empty (map cybertToSet seven_down)










 ; exportCybert (toList five_ups) "five_up_refs.txt" 










 ; exportCybert (toList five_downs) "five_down_refs.txt" 










 ; exportCybert (toList seven_ups) "seven_up_refs.txt" 










 ; exportCybert (toList seven_downs) "seven_down_refs.txt" 










 ; older' <- loadCybert' "./CyberT_Output/paired_2/CD271_two_two_13.txt"










 ; xeno' <- loadCybert' "./CyberT_Output/paired_2/CD271_one_one4.txt"










 let older = extract older'



......














cybert/huanganalysis

deleted


100755 → 0




View file @ d4338cf8





File deleted













cybert/huanganalysis.hs








View file @ c8207c2f






......@@ -6,6 +6,7 @@ import Control.Monad









import qualified Control.Exception as E










import System.Directory










import System.IO










import qualified Control.Monad.Parallel as P










{-import Data.Set(fromList, toList, union, empty)-}





















cheader' = M.fromList [("Secondary_Data_FDR","fdr"), ("Secondary_Data_FPR","fpr"),("Secondary_Data_Pval1","pval1")]



......@@ -49,35 +50,38 @@ exportTargets fname xs = do









 exportProbes xs ("../ontargets/" ++ fname)










 let ss = map (\x-> let d = secondaryData x










 in stringify "\t"










 [probe x, show (mean x), show (d M.! "pval1"),










 [probe x, showEitherF (mean x), show (d M.! "pval1"),










 show (d M.! "fpr"), show (d M.! "fdr")]) xs










 writeString ("../targetdetails/"++ fname) $ 










 stringify "\n" (["accession\tmean\tpvalue(one-tail)\tFPR\tFDR"]++ss)










exportAVG fname fn xs = do










exportAVG fn xs = do










 let xxs = map fn xs










 let avg = (foldl1 (+) xxs) / (fromIntegral (length xxs))










 let avg = if length xs >=2 then (foldl1 (+) xxs) / (fromIntegral (length xxs))










 else 1.0










 let gname = if length xs == 0 then "Unknown"










 else fromMaybe "Unknown" (collection $ (xs !! 0))










 let ss = gname ++ "\t" ++ (show avg) ++ "\n"










 withFile fname AppendMode (\handle -> do










 hPutStr handle ss)










subroutine:: (Maybe [Cybert_entry]) -> IO()










 return ss










subroutine:: (Maybe [Cybert_entry]) -> IO ([String])










subroutine xs = do










 let xxs'= fromMaybe [] xs










 let fname = if length xxs' == 0 then "Nill.dummy"










 else fromMaybe "Nill.dummy" (collection $ xxs' !! 0)










 ; exportScatter fname xxs'










 ; exportAVG "../avgs/Total_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Total_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 {-; exportAVG "../avgs/Total_AVG_mean.tsv" mean xxs'-}










 let xxs = filter (\x -> let d = (secondaryData x)










 in if (d M.! "fdr") < 0.0 then (pval x) < 0.05










 {-in case where beta fitting fails-}










 else (d M.! "pval1") <0.05 && (d M.! "fdr") < 0.1










 ) xxs'










 else (d M.! "pval1") <0.05 










 {-&& (d M.! "fdr") < 0.1-}










 ) (entriesByUpDown True xxs')










 ; putStrLn (fname ++" , "++(show $ length xxs))










 ; exportTargets fname xxs










 ; exportAVG "../avgs/Targets_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Targets_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 ; tot_p <- exportAVG pval xxs'










 ; tot_f <- exportAVG (\x->let d = secondaryData x in d M.! "fdr") xxs'










 ; tar_p <- exportAVG pval xxs










 ; tar_f <- exportAVG (\x->let d = secondaryData x in d M.! "fdr") xxs










 return [tot_p,tot_f,tar_p,tar_f]










 {-; exportAVG "../avgs/Targets_AVG_mean.tsv"  xxs'-}





















routine :: FilePath -> FilePath -> IO()



......@@ -87,8 +91,16 @@ routine root cur = do









 filenames' <- getDirectoryContents "."










 let filenames = filter (\x -> "_cybert_result.tsv" `isInfixOf` x) filenames'










 collections <- mapM loadCybert' filenames










 putStrLn $ show filenames










 {-acquire cybert entries -}










 mapM subroutine collections










 avgs <- P.mapM subroutine collections










 writeString "../avgs/Total_AVG_pval.tsv" (stringify "\n" (map (\x->x!!0) avgs))










 writeString "../avgs/Total_AVG_fdr.tsv" (stringify "\n" (map (\x->x!!1) avgs))










 writeString "../avgs/Targets_AVG_pval.tsv" (stringify "\n" (map (\x->x!!2) avgs))










 writeString "../avgs/Targets_AVG_fdr.tsv" (stringify "\n" (map (\x->x!!3) avgs))










 {-E.evaluate $ runEval $ do-}










 {-parMap (rpar.subroutine) collections-}










 {-parMap rseq parTasks-}










 {-use pval of 0.05 and fpr of 0.1 to filter-}










 putStr $ "\nHandled" ++ cur ++"\n"










 setCurrentDirectory root



......














stm/test.hs








View file @ c8207c2f













module Main where










import Control.Monad










import Control.Concurrent










import Control.Concurrent.STM





















arrayRed::Int-> Int -> STM ()










arrayRed t th = do










 --allocate t arrays










 ; arr <- atomically $ newTVar (take t [1 ..])










 --parallel divide of 1 over










 ; forkIO $ th `timesDo` (appV (\x-> 1/x ) arr)










 milliSleep 800










 ; after <- atomically . readTVar arr










 --reduction(atomic)










 where timesDo = replicateM_










 milliSleep = theadDelay . (*) 1000










 










main = do shared <- atomically $ newTVar 0










 before <- atomRead shared










 putStrLn $ "Before: " ++ show before










 forkIO $ 25 `timesDo` (dispVar shared >> milliSleep 20)










 forkIO $ 10 `timesDo` (appV ((+) 2) shared >> milliSleep 50)










 forkIO $ 20 `timesDo` (appV pred shared >> milliSleep 25)










 milliSleep 800










 after <- atomRead shared










 putStrLn $ "After: " ++ show after










 where timesDo = replicateM_










 milliSleep = threadDelay . (*) 1000










 










atomRead = atomically . readTVar










dispVar x = atomRead x >>= print










appV fn x = atomically $ readTVar x >>= writeTVar x . fn














.gitignore








View file @ c8207c2f






......@@ -8,5 +8,5 @@ cabal-dev









*.txt










test_*










.virthualenv










*










*/*










!*.*












.gitignore








View file @ c8207c2f








.gitignore










View file @ c8207c2f


c8207c2f



......@@ -8,5 +8,5 @@ cabal-dev









*.txt










test_*










.virthualenv










*










*/*










!*.*






......@@ -8,5 +8,5 @@ cabal-dev









*.txt










test_*










.virthualenv










*










*/*










!*.*


*.txttest_*.virthualenv**/*/*!*.*








cybert/Cybert.hs








View file @ c8207c2f






......@@ -23,6 +23,7 @@ module Cybert









 entriesBySym,










 entriesByUpDown,










 entriesBySecondaryRef,










 showEitherF,










 cybertToSet,










 loadCybert,










 exportCybert,



......












cybert/Cybert.hs








View file @ c8207c2f








cybert/Cybert.hs










View file @ c8207c2f


c8207c2f



......@@ -23,6 +23,7 @@ module Cybert









 entriesBySym,










 entriesByUpDown,










 entriesBySecondaryRef,










 showEitherF,










 cybertToSet,










 loadCybert,










 exportCybert,



......






......@@ -23,6 +23,7 @@ module Cybert









 entriesBySym,










 entriesByUpDown,










 entriesBySecondaryRef,










 showEitherF,










 cybertToSet,










 loadCybert,










 exportCybert,



......


 entriesBySym,entriesBySym, entriesByUpDown,entriesByUpDown, entriesBySecondaryRef,entriesBySecondaryRef, showEitherF,showEitherF, cybertToSet,cybertToSet, loadCybert,loadCybert, exportCybert,exportCybert,








cybert/cd271ex

deleted


100755 → 0




View file @ d4338cf8





File deleted











cybert/cd271ex

deleted


100755 → 0




View file @ d4338cf8








cybert/cd271ex

deleted


100755 → 0






View file @ d4338cf8
d4338cf8


File deleted




File deleted


File deleted









cybert/cd271ex.hs








View file @ c8207c2f






......@@ -13,23 +13,30 @@ countln = foldr (\z acc -> acc + (length z)) 0









 -- count cross lists num










loadCybert' = loadCybert cybert_header










main = do










 {-all_combined <- loadCybert' "./CyberT_Output/paired_2/CD271_all_together0.txt"-}










 {-let all_up = (entriesByPval 0.05) $ (entriesByUpDown True)  (extract all_combined)-}










 {-all_down = (entriesByPval 0.05) $ (entriesByUpDown False)  (extract all_combined)-}










 {-; exportCybert all_up "all_up_refs.txt"-}










 {-; exportCybert all_down "all_down_refs.txt"-}










 {-; onesM <- mapM loadCybert' $ map ("./CyberT_Output/paired_2/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]-}










 {-; pairsM <- mapM loadCybert' ["./CyberT_Output/paired_2/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]-}










 {-let ones = map extract (all_combined:onesM)-}










 {-pairs = map extract (all_combined:pairsM)-}










 {-let up = map  (entriesByPval 0.05)  (map (entriesByUpDown True) pairs)-}










 {-down = map  (entriesByPval 0.05)  (map (entriesByUpDown False) pairs)-}










 {-five_up = map (filter (\x ->  countln (pfind x up) >= 5 )) up-}










 {-five_down =map (filter (\x -> countln (pfind x down) >= 5 )) down-}










 {-five_ups = foldl union empty (map cybertToSet five_up)-}










 {-five_downs = foldl union empty (map cybertToSet five_down)-}










 {-;  exportCybert (toList five_ups) "five_up_refs.txt" -}










 {-;  exportCybert (toList five_downs) "five_down_refs.txt" -}










 all_combined <- loadCybert' "./CyberT_Output/paired_2/CD271_all_together0.txt"










 let all_up = (entriesByPval 0.05) $ (entriesByUpDown True) (extract all_combined)










 all_down = (entriesByPval 0.05) $ (entriesByUpDown False) (extract all_combined)










 ; exportCybert (extract all_combined) "all_probes_refs.txt"










 ; exportCybert all_up "all_up_refs.txt"










 ; exportCybert all_down "all_down_refs.txt"










 ; onesM <- mapM loadCybert' $ map ("./CyberT_Output/paired_2/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert' ["./CyberT_Output/paired_2/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 let ones = map extract (all_combined:onesM)










 pairs = map extract (all_combined:pairsM)










 let up = map (entriesByPval 0.05) (map (entriesByUpDown True) pairs)










 down = map (entriesByPval 0.05) (map (entriesByUpDown False) pairs)










 five_up = map (filter (\x -> countln (pfind x up) >= 5 )) up










 five_down =map (filter (\x -> countln (pfind x down) >= 5 )) down










 five_ups = foldl union empty (map cybertToSet five_up)










 five_downs = foldl union empty (map cybertToSet five_down)










 seven_up = map (filter (\x -> countln (pfind x up) >= 7 )) up










 seven_down =map (filter (\x -> countln (pfind x down) >=7 )) down










 seven_ups = foldl union empty (map cybertToSet seven_up)










 seven_downs = foldl union empty (map cybertToSet seven_down)










 ; exportCybert (toList five_ups) "five_up_refs.txt" 










 ; exportCybert (toList five_downs) "five_down_refs.txt" 










 ; exportCybert (toList seven_ups) "seven_up_refs.txt" 










 ; exportCybert (toList seven_downs) "seven_down_refs.txt" 










 ; older' <- loadCybert' "./CyberT_Output/paired_2/CD271_two_two_13.txt"










 ; xeno' <- loadCybert' "./CyberT_Output/paired_2/CD271_one_one4.txt"










 let older = extract older'



......












cybert/cd271ex.hs








View file @ c8207c2f








cybert/cd271ex.hs










View file @ c8207c2f


c8207c2f



......@@ -13,23 +13,30 @@ countln = foldr (\z acc -> acc + (length z)) 0









 -- count cross lists num










loadCybert' = loadCybert cybert_header










main = do










 {-all_combined <- loadCybert' "./CyberT_Output/paired_2/CD271_all_together0.txt"-}










 {-let all_up = (entriesByPval 0.05) $ (entriesByUpDown True)  (extract all_combined)-}










 {-all_down = (entriesByPval 0.05) $ (entriesByUpDown False)  (extract all_combined)-}










 {-; exportCybert all_up "all_up_refs.txt"-}










 {-; exportCybert all_down "all_down_refs.txt"-}










 {-; onesM <- mapM loadCybert' $ map ("./CyberT_Output/paired_2/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]-}










 {-; pairsM <- mapM loadCybert' ["./CyberT_Output/paired_2/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]-}










 {-let ones = map extract (all_combined:onesM)-}










 {-pairs = map extract (all_combined:pairsM)-}










 {-let up = map  (entriesByPval 0.05)  (map (entriesByUpDown True) pairs)-}










 {-down = map  (entriesByPval 0.05)  (map (entriesByUpDown False) pairs)-}










 {-five_up = map (filter (\x ->  countln (pfind x up) >= 5 )) up-}










 {-five_down =map (filter (\x -> countln (pfind x down) >= 5 )) down-}










 {-five_ups = foldl union empty (map cybertToSet five_up)-}










 {-five_downs = foldl union empty (map cybertToSet five_down)-}










 {-;  exportCybert (toList five_ups) "five_up_refs.txt" -}










 {-;  exportCybert (toList five_downs) "five_down_refs.txt" -}










 all_combined <- loadCybert' "./CyberT_Output/paired_2/CD271_all_together0.txt"










 let all_up = (entriesByPval 0.05) $ (entriesByUpDown True) (extract all_combined)










 all_down = (entriesByPval 0.05) $ (entriesByUpDown False) (extract all_combined)










 ; exportCybert (extract all_combined) "all_probes_refs.txt"










 ; exportCybert all_up "all_up_refs.txt"










 ; exportCybert all_down "all_down_refs.txt"










 ; onesM <- mapM loadCybert' $ map ("./CyberT_Output/paired_2/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert' ["./CyberT_Output/paired_2/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 let ones = map extract (all_combined:onesM)










 pairs = map extract (all_combined:pairsM)










 let up = map (entriesByPval 0.05) (map (entriesByUpDown True) pairs)










 down = map (entriesByPval 0.05) (map (entriesByUpDown False) pairs)










 five_up = map (filter (\x -> countln (pfind x up) >= 5 )) up










 five_down =map (filter (\x -> countln (pfind x down) >= 5 )) down










 five_ups = foldl union empty (map cybertToSet five_up)










 five_downs = foldl union empty (map cybertToSet five_down)










 seven_up = map (filter (\x -> countln (pfind x up) >= 7 )) up










 seven_down =map (filter (\x -> countln (pfind x down) >=7 )) down










 seven_ups = foldl union empty (map cybertToSet seven_up)










 seven_downs = foldl union empty (map cybertToSet seven_down)










 ; exportCybert (toList five_ups) "five_up_refs.txt" 










 ; exportCybert (toList five_downs) "five_down_refs.txt" 










 ; exportCybert (toList seven_ups) "seven_up_refs.txt" 










 ; exportCybert (toList seven_downs) "seven_down_refs.txt" 










 ; older' <- loadCybert' "./CyberT_Output/paired_2/CD271_two_two_13.txt"










 ; xeno' <- loadCybert' "./CyberT_Output/paired_2/CD271_one_one4.txt"










 let older = extract older'



......






......@@ -13,23 +13,30 @@ countln = foldr (\z acc -> acc + (length z)) 0









 -- count cross lists num










loadCybert' = loadCybert cybert_header










main = do










 {-all_combined <- loadCybert' "./CyberT_Output/paired_2/CD271_all_together0.txt"-}










 {-let all_up = (entriesByPval 0.05) $ (entriesByUpDown True)  (extract all_combined)-}










 {-all_down = (entriesByPval 0.05) $ (entriesByUpDown False)  (extract all_combined)-}










 {-; exportCybert all_up "all_up_refs.txt"-}










 {-; exportCybert all_down "all_down_refs.txt"-}










 {-; onesM <- mapM loadCybert' $ map ("./CyberT_Output/paired_2/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]-}










 {-; pairsM <- mapM loadCybert' ["./CyberT_Output/paired_2/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]-}










 {-let ones = map extract (all_combined:onesM)-}










 {-pairs = map extract (all_combined:pairsM)-}










 {-let up = map  (entriesByPval 0.05)  (map (entriesByUpDown True) pairs)-}










 {-down = map  (entriesByPval 0.05)  (map (entriesByUpDown False) pairs)-}










 {-five_up = map (filter (\x ->  countln (pfind x up) >= 5 )) up-}










 {-five_down =map (filter (\x -> countln (pfind x down) >= 5 )) down-}










 {-five_ups = foldl union empty (map cybertToSet five_up)-}










 {-five_downs = foldl union empty (map cybertToSet five_down)-}










 {-;  exportCybert (toList five_ups) "five_up_refs.txt" -}










 {-;  exportCybert (toList five_downs) "five_down_refs.txt" -}










 all_combined <- loadCybert' "./CyberT_Output/paired_2/CD271_all_together0.txt"










 let all_up = (entriesByPval 0.05) $ (entriesByUpDown True) (extract all_combined)










 all_down = (entriesByPval 0.05) $ (entriesByUpDown False) (extract all_combined)










 ; exportCybert (extract all_combined) "all_probes_refs.txt"










 ; exportCybert all_up "all_up_refs.txt"










 ; exportCybert all_down "all_down_refs.txt"










 ; onesM <- mapM loadCybert' $ map ("./CyberT_Output/paired_2/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]










 ; pairsM <- mapM loadCybert' ["./CyberT_Output/paired_2/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]










 let ones = map extract (all_combined:onesM)










 pairs = map extract (all_combined:pairsM)










 let up = map (entriesByPval 0.05) (map (entriesByUpDown True) pairs)










 down = map (entriesByPval 0.05) (map (entriesByUpDown False) pairs)










 five_up = map (filter (\x -> countln (pfind x up) >= 5 )) up










 five_down =map (filter (\x -> countln (pfind x down) >= 5 )) down










 five_ups = foldl union empty (map cybertToSet five_up)










 five_downs = foldl union empty (map cybertToSet five_down)










 seven_up = map (filter (\x -> countln (pfind x up) >= 7 )) up










 seven_down =map (filter (\x -> countln (pfind x down) >=7 )) down










 seven_ups = foldl union empty (map cybertToSet seven_up)










 seven_downs = foldl union empty (map cybertToSet seven_down)










 ; exportCybert (toList five_ups) "five_up_refs.txt" 










 ; exportCybert (toList five_downs) "five_down_refs.txt" 










 ; exportCybert (toList seven_ups) "seven_up_refs.txt" 










 ; exportCybert (toList seven_downs) "seven_down_refs.txt" 










 ; older' <- loadCybert' "./CyberT_Output/paired_2/CD271_two_two_13.txt"










 ; xeno' <- loadCybert' "./CyberT_Output/paired_2/CD271_one_one4.txt"










 let older = extract older'



......


 -- count cross lists num-- count cross lists numloadCybert' = loadCybert cybert_headerloadCybert'=loadCybertcybert_headermain = domain=do {-all_combined <- loadCybert' "./CyberT_Output/paired_2/CD271_all_together0.txt"-}{-all_combined <- loadCybert' "./CyberT_Output/paired_2/CD271_all_together0.txt"-} {-let all_up = (entriesByPval 0.05) $ (entriesByUpDown True)  (extract all_combined)-}{-let all_up = (entriesByPval 0.05) $ (entriesByUpDown True)  (extract all_combined)-} {-all_down = (entriesByPval 0.05) $ (entriesByUpDown False)  (extract all_combined)-}{-all_down = (entriesByPval 0.05) $ (entriesByUpDown False)  (extract all_combined)-} {-; exportCybert all_up "all_up_refs.txt"-}{-; exportCybert all_up "all_up_refs.txt"-} {-; exportCybert all_down "all_down_refs.txt"-}{-; exportCybert all_down "all_down_refs.txt"-} {-; onesM <- mapM loadCybert' $ map ("./CyberT_Output/paired_2/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]-}{-; onesM <- mapM loadCybert' $ map ("./CyberT_Output/paired_2/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"]-} {-; pairsM <- mapM loadCybert' ["./CyberT_Output/paired_2/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]-}{-; pairsM <- mapM loadCybert' ["./CyberT_Output/paired_2/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ]-} {-let ones = map extract (all_combined:onesM)-}{-let ones = map extract (all_combined:onesM)-} {-pairs = map extract (all_combined:pairsM)-}{-pairs = map extract (all_combined:pairsM)-} {-let up = map  (entriesByPval 0.05)  (map (entriesByUpDown True) pairs)-}{-let up = map  (entriesByPval 0.05)  (map (entriesByUpDown True) pairs)-} {-down = map  (entriesByPval 0.05)  (map (entriesByUpDown False) pairs)-}{-down = map  (entriesByPval 0.05)  (map (entriesByUpDown False) pairs)-} {-five_up = map (filter (\x ->  countln (pfind x up) >= 5 )) up-}{-five_up = map (filter (\x ->  countln (pfind x up) >= 5 )) up-} {-five_down =map (filter (\x -> countln (pfind x down) >= 5 )) down-}{-five_down =map (filter (\x -> countln (pfind x down) >= 5 )) down-} {-five_ups = foldl union empty (map cybertToSet five_up)-}{-five_ups = foldl union empty (map cybertToSet five_up)-} {-five_downs = foldl union empty (map cybertToSet five_down)-}{-five_downs = foldl union empty (map cybertToSet five_down)-} {-;  exportCybert (toList five_ups) "five_up_refs.txt" -}{-;  exportCybert (toList five_ups) "five_up_refs.txt" -} {-;  exportCybert (toList five_downs) "five_down_refs.txt" -}{-;  exportCybert (toList five_downs) "five_down_refs.txt" -} all_combined <- loadCybert' "./CyberT_Output/paired_2/CD271_all_together0.txt"all_combined<-loadCybert'"./CyberT_Output/paired_2/CD271_all_together0.txt" let all_up = (entriesByPval 0.05) $ (entriesByUpDown True) (extract all_combined)letall_up=(entriesByPval0.05)$(entriesByUpDownTrue)(extractall_combined) all_down = (entriesByPval 0.05) $ (entriesByUpDown False) (extract all_combined)all_down=(entriesByPval0.05)$(entriesByUpDownFalse)(extractall_combined) ; exportCybert (extract all_combined) "all_probes_refs.txt";exportCybert(extractall_combined)"all_probes_refs.txt" ; exportCybert all_up "all_up_refs.txt";exportCybertall_up"all_up_refs.txt" ; exportCybert all_down "all_down_refs.txt";exportCybertall_down"all_down_refs.txt" ; onesM <- mapM loadCybert' $ map ("./CyberT_Output/paired_2/CD271_one_one" ++ ) ["0.txt","1.txt","2.txt","3.txt"];onesM<-mapMloadCybert'$map("./CyberT_Output/paired_2/CD271_one_one"++)["0.txt","1.txt","2.txt","3.txt"] ; pairsM <- mapM loadCybert' ["./CyberT_Output/paired_2/CD271_two_two_" ++i ++ j ++ ".txt" | i <- ["1","2","3"], j<-["0","1"] ];pairsM<-mapMloadCybert'["./CyberT_Output/paired_2/CD271_two_two_"++i++j++".txt"|i<-["1","2","3"],j<-["0","1"]] let ones = map extract (all_combined:onesM)letones=mapextract(all_combined:onesM) pairs = map extract (all_combined:pairsM)pairs=mapextract(all_combined:pairsM) let up = map (entriesByPval 0.05) (map (entriesByUpDown True) pairs)letup=map(entriesByPval0.05)(map(entriesByUpDownTrue)pairs) down = map (entriesByPval 0.05) (map (entriesByUpDown False) pairs)down=map(entriesByPval0.05)(map(entriesByUpDownFalse)pairs) five_up = map (filter (\x -> countln (pfind x up) >= 5 )) upfive_up=map(filter(\x->countln(pfindxup)>=5))up five_down =map (filter (\x -> countln (pfind x down) >= 5 )) downfive_down=map(filter(\x->countln(pfindxdown)>=5))down five_ups = foldl union empty (map cybertToSet five_up)five_ups=foldlunionempty(mapcybertToSetfive_up) five_downs = foldl union empty (map cybertToSet five_down)five_downs=foldlunionempty(mapcybertToSetfive_down) seven_up = map (filter (\x -> countln (pfind x up) >= 7 )) upseven_up=map(filter(\x->countln(pfindxup)>=7))up seven_down =map (filter (\x -> countln (pfind x down) >=7 )) downseven_down=map(filter(\x->countln(pfindxdown)>=7))down seven_ups = foldl union empty (map cybertToSet seven_up)seven_ups=foldlunionempty(mapcybertToSetseven_up) seven_downs = foldl union empty (map cybertToSet seven_down)seven_downs=foldlunionempty(mapcybertToSetseven_down) ; exportCybert (toList five_ups) "five_up_refs.txt" ;exportCybert(toListfive_ups)"five_up_refs.txt" ; exportCybert (toList five_downs) "five_down_refs.txt" ;exportCybert(toListfive_downs)"five_down_refs.txt" ; exportCybert (toList seven_ups) "seven_up_refs.txt" ;exportCybert(toListseven_ups)"seven_up_refs.txt" ; exportCybert (toList seven_downs) "seven_down_refs.txt" ;exportCybert(toListseven_downs)"seven_down_refs.txt" ; older' <- loadCybert' "./CyberT_Output/paired_2/CD271_two_two_13.txt";older'<-loadCybert'"./CyberT_Output/paired_2/CD271_two_two_13.txt" ; xeno' <- loadCybert' "./CyberT_Output/paired_2/CD271_one_one4.txt";xeno'<-loadCybert'"./CyberT_Output/paired_2/CD271_one_one4.txt" let older = extract older'letolder=extractolder'








cybert/huanganalysis

deleted


100755 → 0




View file @ d4338cf8





File deleted











cybert/huanganalysis

deleted


100755 → 0




View file @ d4338cf8








cybert/huanganalysis

deleted


100755 → 0






View file @ d4338cf8
d4338cf8


File deleted




File deleted


File deleted









cybert/huanganalysis.hs








View file @ c8207c2f






......@@ -6,6 +6,7 @@ import Control.Monad









import qualified Control.Exception as E










import System.Directory










import System.IO










import qualified Control.Monad.Parallel as P










{-import Data.Set(fromList, toList, union, empty)-}





















cheader' = M.fromList [("Secondary_Data_FDR","fdr"), ("Secondary_Data_FPR","fpr"),("Secondary_Data_Pval1","pval1")]



......@@ -49,35 +50,38 @@ exportTargets fname xs = do









 exportProbes xs ("../ontargets/" ++ fname)










 let ss = map (\x-> let d = secondaryData x










 in stringify "\t"










 [probe x, show (mean x), show (d M.! "pval1"),










 [probe x, showEitherF (mean x), show (d M.! "pval1"),










 show (d M.! "fpr"), show (d M.! "fdr")]) xs










 writeString ("../targetdetails/"++ fname) $ 










 stringify "\n" (["accession\tmean\tpvalue(one-tail)\tFPR\tFDR"]++ss)










exportAVG fname fn xs = do










exportAVG fn xs = do










 let xxs = map fn xs










 let avg = (foldl1 (+) xxs) / (fromIntegral (length xxs))










 let avg = if length xs >=2 then (foldl1 (+) xxs) / (fromIntegral (length xxs))










 else 1.0










 let gname = if length xs == 0 then "Unknown"










 else fromMaybe "Unknown" (collection $ (xs !! 0))










 let ss = gname ++ "\t" ++ (show avg) ++ "\n"










 withFile fname AppendMode (\handle -> do










 hPutStr handle ss)










subroutine:: (Maybe [Cybert_entry]) -> IO()










 return ss










subroutine:: (Maybe [Cybert_entry]) -> IO ([String])










subroutine xs = do










 let xxs'= fromMaybe [] xs










 let fname = if length xxs' == 0 then "Nill.dummy"










 else fromMaybe "Nill.dummy" (collection $ xxs' !! 0)










 ; exportScatter fname xxs'










 ; exportAVG "../avgs/Total_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Total_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 {-; exportAVG "../avgs/Total_AVG_mean.tsv" mean xxs'-}










 let xxs = filter (\x -> let d = (secondaryData x)










 in if (d M.! "fdr") < 0.0 then (pval x) < 0.05










 {-in case where beta fitting fails-}










 else (d M.! "pval1") <0.05 && (d M.! "fdr") < 0.1










 ) xxs'










 else (d M.! "pval1") <0.05 










 {-&& (d M.! "fdr") < 0.1-}










 ) (entriesByUpDown True xxs')










 ; putStrLn (fname ++" , "++(show $ length xxs))










 ; exportTargets fname xxs










 ; exportAVG "../avgs/Targets_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Targets_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 ; tot_p <- exportAVG pval xxs'










 ; tot_f <- exportAVG (\x->let d = secondaryData x in d M.! "fdr") xxs'










 ; tar_p <- exportAVG pval xxs










 ; tar_f <- exportAVG (\x->let d = secondaryData x in d M.! "fdr") xxs










 return [tot_p,tot_f,tar_p,tar_f]










 {-; exportAVG "../avgs/Targets_AVG_mean.tsv"  xxs'-}





















routine :: FilePath -> FilePath -> IO()



......@@ -87,8 +91,16 @@ routine root cur = do









 filenames' <- getDirectoryContents "."










 let filenames = filter (\x -> "_cybert_result.tsv" `isInfixOf` x) filenames'










 collections <- mapM loadCybert' filenames










 putStrLn $ show filenames










 {-acquire cybert entries -}










 mapM subroutine collections










 avgs <- P.mapM subroutine collections










 writeString "../avgs/Total_AVG_pval.tsv" (stringify "\n" (map (\x->x!!0) avgs))










 writeString "../avgs/Total_AVG_fdr.tsv" (stringify "\n" (map (\x->x!!1) avgs))










 writeString "../avgs/Targets_AVG_pval.tsv" (stringify "\n" (map (\x->x!!2) avgs))










 writeString "../avgs/Targets_AVG_fdr.tsv" (stringify "\n" (map (\x->x!!3) avgs))










 {-E.evaluate $ runEval $ do-}










 {-parMap (rpar.subroutine) collections-}










 {-parMap rseq parTasks-}










 {-use pval of 0.05 and fpr of 0.1 to filter-}










 putStr $ "\nHandled" ++ cur ++"\n"










 setCurrentDirectory root



......












cybert/huanganalysis.hs








View file @ c8207c2f








cybert/huanganalysis.hs










View file @ c8207c2f


c8207c2f



......@@ -6,6 +6,7 @@ import Control.Monad









import qualified Control.Exception as E










import System.Directory










import System.IO










import qualified Control.Monad.Parallel as P










{-import Data.Set(fromList, toList, union, empty)-}





















cheader' = M.fromList [("Secondary_Data_FDR","fdr"), ("Secondary_Data_FPR","fpr"),("Secondary_Data_Pval1","pval1")]



......@@ -49,35 +50,38 @@ exportTargets fname xs = do









 exportProbes xs ("../ontargets/" ++ fname)










 let ss = map (\x-> let d = secondaryData x










 in stringify "\t"










 [probe x, show (mean x), show (d M.! "pval1"),










 [probe x, showEitherF (mean x), show (d M.! "pval1"),










 show (d M.! "fpr"), show (d M.! "fdr")]) xs










 writeString ("../targetdetails/"++ fname) $ 










 stringify "\n" (["accession\tmean\tpvalue(one-tail)\tFPR\tFDR"]++ss)










exportAVG fname fn xs = do










exportAVG fn xs = do










 let xxs = map fn xs










 let avg = (foldl1 (+) xxs) / (fromIntegral (length xxs))










 let avg = if length xs >=2 then (foldl1 (+) xxs) / (fromIntegral (length xxs))










 else 1.0










 let gname = if length xs == 0 then "Unknown"










 else fromMaybe "Unknown" (collection $ (xs !! 0))










 let ss = gname ++ "\t" ++ (show avg) ++ "\n"










 withFile fname AppendMode (\handle -> do










 hPutStr handle ss)










subroutine:: (Maybe [Cybert_entry]) -> IO()










 return ss










subroutine:: (Maybe [Cybert_entry]) -> IO ([String])










subroutine xs = do










 let xxs'= fromMaybe [] xs










 let fname = if length xxs' == 0 then "Nill.dummy"










 else fromMaybe "Nill.dummy" (collection $ xxs' !! 0)










 ; exportScatter fname xxs'










 ; exportAVG "../avgs/Total_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Total_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 {-; exportAVG "../avgs/Total_AVG_mean.tsv" mean xxs'-}










 let xxs = filter (\x -> let d = (secondaryData x)










 in if (d M.! "fdr") < 0.0 then (pval x) < 0.05










 {-in case where beta fitting fails-}










 else (d M.! "pval1") <0.05 && (d M.! "fdr") < 0.1










 ) xxs'










 else (d M.! "pval1") <0.05 










 {-&& (d M.! "fdr") < 0.1-}










 ) (entriesByUpDown True xxs')










 ; putStrLn (fname ++" , "++(show $ length xxs))










 ; exportTargets fname xxs










 ; exportAVG "../avgs/Targets_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Targets_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 ; tot_p <- exportAVG pval xxs'










 ; tot_f <- exportAVG (\x->let d = secondaryData x in d M.! "fdr") xxs'










 ; tar_p <- exportAVG pval xxs










 ; tar_f <- exportAVG (\x->let d = secondaryData x in d M.! "fdr") xxs










 return [tot_p,tot_f,tar_p,tar_f]










 {-; exportAVG "../avgs/Targets_AVG_mean.tsv"  xxs'-}





















routine :: FilePath -> FilePath -> IO()



......@@ -87,8 +91,16 @@ routine root cur = do









 filenames' <- getDirectoryContents "."










 let filenames = filter (\x -> "_cybert_result.tsv" `isInfixOf` x) filenames'










 collections <- mapM loadCybert' filenames










 putStrLn $ show filenames










 {-acquire cybert entries -}










 mapM subroutine collections










 avgs <- P.mapM subroutine collections










 writeString "../avgs/Total_AVG_pval.tsv" (stringify "\n" (map (\x->x!!0) avgs))










 writeString "../avgs/Total_AVG_fdr.tsv" (stringify "\n" (map (\x->x!!1) avgs))










 writeString "../avgs/Targets_AVG_pval.tsv" (stringify "\n" (map (\x->x!!2) avgs))










 writeString "../avgs/Targets_AVG_fdr.tsv" (stringify "\n" (map (\x->x!!3) avgs))










 {-E.evaluate $ runEval $ do-}










 {-parMap (rpar.subroutine) collections-}










 {-parMap rseq parTasks-}










 {-use pval of 0.05 and fpr of 0.1 to filter-}










 putStr $ "\nHandled" ++ cur ++"\n"










 setCurrentDirectory root



......






......@@ -6,6 +6,7 @@ import Control.Monad









import qualified Control.Exception as E










import System.Directory










import System.IO










import qualified Control.Monad.Parallel as P










{-import Data.Set(fromList, toList, union, empty)-}





















cheader' = M.fromList [("Secondary_Data_FDR","fdr"), ("Secondary_Data_FPR","fpr"),("Secondary_Data_Pval1","pval1")]



......@@ -49,35 +50,38 @@ exportTargets fname xs = do









 exportProbes xs ("../ontargets/" ++ fname)










 let ss = map (\x-> let d = secondaryData x










 in stringify "\t"










 [probe x, show (mean x), show (d M.! "pval1"),










 [probe x, showEitherF (mean x), show (d M.! "pval1"),










 show (d M.! "fpr"), show (d M.! "fdr")]) xs










 writeString ("../targetdetails/"++ fname) $ 










 stringify "\n" (["accession\tmean\tpvalue(one-tail)\tFPR\tFDR"]++ss)










exportAVG fname fn xs = do










exportAVG fn xs = do










 let xxs = map fn xs










 let avg = (foldl1 (+) xxs) / (fromIntegral (length xxs))










 let avg = if length xs >=2 then (foldl1 (+) xxs) / (fromIntegral (length xxs))










 else 1.0










 let gname = if length xs == 0 then "Unknown"










 else fromMaybe "Unknown" (collection $ (xs !! 0))










 let ss = gname ++ "\t" ++ (show avg) ++ "\n"










 withFile fname AppendMode (\handle -> do










 hPutStr handle ss)










subroutine:: (Maybe [Cybert_entry]) -> IO()










 return ss










subroutine:: (Maybe [Cybert_entry]) -> IO ([String])










subroutine xs = do










 let xxs'= fromMaybe [] xs










 let fname = if length xxs' == 0 then "Nill.dummy"










 else fromMaybe "Nill.dummy" (collection $ xxs' !! 0)










 ; exportScatter fname xxs'










 ; exportAVG "../avgs/Total_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Total_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 {-; exportAVG "../avgs/Total_AVG_mean.tsv" mean xxs'-}










 let xxs = filter (\x -> let d = (secondaryData x)










 in if (d M.! "fdr") < 0.0 then (pval x) < 0.05










 {-in case where beta fitting fails-}










 else (d M.! "pval1") <0.05 && (d M.! "fdr") < 0.1










 ) xxs'










 else (d M.! "pval1") <0.05 










 {-&& (d M.! "fdr") < 0.1-}










 ) (entriesByUpDown True xxs')










 ; putStrLn (fname ++" , "++(show $ length xxs))










 ; exportTargets fname xxs










 ; exportAVG "../avgs/Targets_AVG_pval.tsv" pval xxs'










 ; exportAVG "../avgs/Targets_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs'










 ; tot_p <- exportAVG pval xxs'










 ; tot_f <- exportAVG (\x->let d = secondaryData x in d M.! "fdr") xxs'










 ; tar_p <- exportAVG pval xxs










 ; tar_f <- exportAVG (\x->let d = secondaryData x in d M.! "fdr") xxs










 return [tot_p,tot_f,tar_p,tar_f]










 {-; exportAVG "../avgs/Targets_AVG_mean.tsv"  xxs'-}





















routine :: FilePath -> FilePath -> IO()



......@@ -87,8 +91,16 @@ routine root cur = do









 filenames' <- getDirectoryContents "."










 let filenames = filter (\x -> "_cybert_result.tsv" `isInfixOf` x) filenames'










 collections <- mapM loadCybert' filenames










 putStrLn $ show filenames










 {-acquire cybert entries -}










 mapM subroutine collections










 avgs <- P.mapM subroutine collections










 writeString "../avgs/Total_AVG_pval.tsv" (stringify "\n" (map (\x->x!!0) avgs))










 writeString "../avgs/Total_AVG_fdr.tsv" (stringify "\n" (map (\x->x!!1) avgs))










 writeString "../avgs/Targets_AVG_pval.tsv" (stringify "\n" (map (\x->x!!2) avgs))










 writeString "../avgs/Targets_AVG_fdr.tsv" (stringify "\n" (map (\x->x!!3) avgs))










 {-E.evaluate $ runEval $ do-}










 {-parMap (rpar.subroutine) collections-}










 {-parMap rseq parTasks-}










 {-use pval of 0.05 and fpr of 0.1 to filter-}










 putStr $ "\nHandled" ++ cur ++"\n"










 setCurrentDirectory root



......


import qualified Control.Exception as EimportqualifiedControl.ExceptionasEimport System.DirectoryimportSystem.Directoryimport System.IOimportSystem.IOimport qualified Control.Monad.Parallel as PimportqualifiedControl.Monad.ParallelasP{-import Data.Set(fromList, toList, union, empty)-}{-import Data.Set(fromList, toList, union, empty)-}cheader' = M.fromList [("Secondary_Data_FDR","fdr"), ("Secondary_Data_FPR","fpr"),("Secondary_Data_Pval1","pval1")]cheader'=M.fromList[("Secondary_Data_FDR","fdr"),("Secondary_Data_FPR","fpr"),("Secondary_Data_Pval1","pval1")] exportProbes xs ("../ontargets/" ++ fname)exportProbesxs("../ontargets/"++fname) let ss = map (\x-> let d = secondaryData xletss=map(\x->letd=secondaryDatax in stringify "\t"instringify"\t" [probe x, show (mean x), show (d M.! "pval1"),[probex,show(meanx),show(dM.!"pval1"), [probe x, showEitherF (mean x), show (d M.! "pval1"),[probex,showEitherFEitherF(meanx),show(dM.!"pval1"), show (d M.! "fpr"), show (d M.! "fdr")]) xsshow(dM.!"fpr"),show(dM.!"fdr")])xs writeString ("../targetdetails/"++ fname) $ writeString("../targetdetails/"++fname)$ stringify "\n" (["accession\tmean\tpvalue(one-tail)\tFPR\tFDR"]++ss)stringify"\n"(["accession\tmean\tpvalue(one-tail)\tFPR\tFDR"]++ss)exportAVG fname fn xs = doexportAVGfnamefname fnxs=doexportAVG fn xs = doexportAVGfnxs=do let xxs = map fn xsletxxs=mapfnxs let avg = (foldl1 (+) xxs) / (fromIntegral (length xxs))letavg=(foldl1(+)xxs)/(fromIntegral(lengthxxs)) let avg = if length xs >=2 then (foldl1 (+) xxs) / (fromIntegral (length xxs))letavg=iflengthxs>=2then(foldl1(+)xxs)/(fromIntegral(lengthxxs)) else 1.0else1.0 let gname = if length xs == 0 then "Unknown"letgname=iflengthxs==0then"Unknown" else fromMaybe "Unknown" (collection $ (xs !! 0))elsefromMaybe"Unknown"(collection$(xs!!0)) let ss = gname ++ "\t" ++ (show avg) ++ "\n"letss=gname++"\t"++(showavg)++"\n" withFile fname AppendMode (\handle -> dowithFilefnameAppendMode(\handle->do hPutStr handle ss)hPutStrhandless)subroutine:: (Maybe [Cybert_entry]) -> IO()subroutine::(Maybe[Cybert_entry])->IO() return ssreturnsssubroutine:: (Maybe [Cybert_entry]) -> IO ([String])subroutine::(Maybe[Cybert_entry])->IO([String])subroutine xs = dosubroutinexs=do let xxs'= fromMaybe [] xsletxxs'=fromMaybe[]xs let fname = if length xxs' == 0 then "Nill.dummy"letfname=iflengthxxs'==0then"Nill.dummy" else fromMaybe "Nill.dummy" (collection $ xxs' !! 0)elsefromMaybe"Nill.dummy"(collection$xxs'!!0) ; exportScatter fname xxs';exportScatterfnamexxs' ; exportAVG "../avgs/Total_AVG_pval.tsv" pval xxs';exportAVG"../avgs/Total_AVG_pval.tsv"pvalxxs' ; exportAVG "../avgs/Total_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs';exportAVG"../avgs/Total_AVG_fdr.tsv"(\x->letd=secondaryDataxindM.!"fdr")xxs' {-; exportAVG "../avgs/Total_AVG_mean.tsv" mean xxs'-}{-; exportAVG "../avgs/Total_AVG_mean.tsv" mean xxs'-} let xxs = filter (\x -> let d = (secondaryData x)letxxs=filter(\x->letd=(secondaryDatax) in if (d M.! "fdr") < 0.0 then (pval x) < 0.05inif(dM.!"fdr")<0.0then(pvalx)<0.05 {-in case where beta fitting fails-}{-in case where beta fitting fails-} else (d M.! "pval1") <0.05 && (d M.! "fdr") < 0.1else(dM.!"pval1")<0.05&&(dM.!"fdr")<0.1 ) xxs')xxs' else (d M.! "pval1") <0.05 else(dM.!"pval1")<0.05 {-&& (d M.! "fdr") < 0.1-}{-&& (d M.! "fdr") < 0.1-} ) (entriesByUpDown True xxs'))(entriesByUpDownTruexxs') ; putStrLn (fname ++" , "++(show $ length xxs));putStrLn(fname++" , "++(show$lengthxxs)) ; exportTargets fname xxs;exportTargetsfnamexxs ; exportAVG "../avgs/Targets_AVG_pval.tsv" pval xxs';exportAVG"../avgs/Targets_AVG_pval.tsv"pvalxxs' ; exportAVG "../avgs/Targets_AVG_fdr.tsv" (\x->let d = secondaryData x in d M.! "fdr") xxs';exportAVG"../avgs/Targets_AVG_fdr.tsv"(\x->letd=secondaryDataxindM.!"fdr")xxs' ; tot_p <- exportAVG pval xxs';tot_p<-exportAVGpvalxxs' ; tot_f <- exportAVG (\x->let d = secondaryData x in d M.! "fdr") xxs';tot_f<-exportAVG(\x->letd=secondaryDataxindM.!"fdr")xxs' ; tar_p <- exportAVG pval xxs;tar_p<-exportAVGpvalxxs ; tar_f <- exportAVG (\x->let d = secondaryData x in d M.! "fdr") xxs;tar_f<-exportAVG(\x->letd=secondaryDataxindM.!"fdr")xxs return [tot_p,tot_f,tar_p,tar_f]return[tot_p,tot_f,tar_p,tar_f] {-; exportAVG "../avgs/Targets_AVG_mean.tsv"  xxs'-}{-; exportAVG "../avgs/Targets_AVG_mean.tsv"  xxs'-}routine :: FilePath -> FilePath -> IO()routine::FilePath->FilePath->IO() filenames' <- getDirectoryContents "."filenames'<-getDirectoryContents"." let filenames = filter (\x -> "_cybert_result.tsv" `isInfixOf` x) filenames'letfilenames=filter(\x->"_cybert_result.tsv"`isInfixOf`x)filenames' collections <- mapM loadCybert' filenamescollections<-mapMloadCybert'filenames putStrLn $ show filenamesputStrLn$showfilenames {-acquire cybert entries -}{-acquire cybert entries -} mapM subroutine collectionsmapMsubroutinecollections avgs <- P.mapM subroutine collectionsavgs<-P.mapMsubroutinecollections writeString "../avgs/Total_AVG_pval.tsv" (stringify "\n" (map (\x->x!!0) avgs))writeString"../avgs/Total_AVG_pval.tsv"(stringify"\n"(map(\x->x!!0)avgs)) writeString "../avgs/Total_AVG_fdr.tsv" (stringify "\n" (map (\x->x!!1) avgs))writeString"../avgs/Total_AVG_fdr.tsv"(stringify"\n"(map(\x->x!!1)avgs)) writeString "../avgs/Targets_AVG_pval.tsv" (stringify "\n" (map (\x->x!!2) avgs))writeString"../avgs/Targets_AVG_pval.tsv"(stringify"\n"(map(\x->x!!2)avgs)) writeString "../avgs/Targets_AVG_fdr.tsv" (stringify "\n" (map (\x->x!!3) avgs))writeString"../avgs/Targets_AVG_fdr.tsv"(stringify"\n"(map(\x->x!!3)avgs)) {-E.evaluate $ runEval $ do-}{-E.evaluate $ runEval $ do-} {-parMap (rpar.subroutine) collections-}{-parMap (rpar.subroutine) collections-} {-parMap rseq parTasks-}{-parMap rseq parTasks-} {-use pval of 0.05 and fpr of 0.1 to filter-}{-use pval of 0.05 and fpr of 0.1 to filter-} putStr $ "\nHandled" ++ cur ++"\n"putStr$"\nHandled"++cur++"\n" setCurrentDirectory rootsetCurrentDirectoryroot








stm/test.hs








View file @ c8207c2f













module Main where










import Control.Monad










import Control.Concurrent










import Control.Concurrent.STM





















arrayRed::Int-> Int -> STM ()










arrayRed t th = do










 --allocate t arrays










 ; arr <- atomically $ newTVar (take t [1 ..])










 --parallel divide of 1 over










 ; forkIO $ th `timesDo` (appV (\x-> 1/x ) arr)










 milliSleep 800










 ; after <- atomically . readTVar arr










 --reduction(atomic)










 where timesDo = replicateM_










 milliSleep = theadDelay . (*) 1000










 










main = do shared <- atomically $ newTVar 0










 before <- atomRead shared










 putStrLn $ "Before: " ++ show before










 forkIO $ 25 `timesDo` (dispVar shared >> milliSleep 20)










 forkIO $ 10 `timesDo` (appV ((+) 2) shared >> milliSleep 50)










 forkIO $ 20 `timesDo` (appV pred shared >> milliSleep 25)










 milliSleep 800










 after <- atomRead shared










 putStrLn $ "After: " ++ show after










 where timesDo = replicateM_










 milliSleep = threadDelay . (*) 1000










 










atomRead = atomically . readTVar










dispVar x = atomRead x >>= print










appV fn x = atomically $ readTVar x >>= writeTVar x . fn












stm/test.hs








View file @ c8207c2f








stm/test.hs










View file @ c8207c2f


c8207c2f










module Main where










import Control.Monad










import Control.Concurrent










import Control.Concurrent.STM





















arrayRed::Int-> Int -> STM ()










arrayRed t th = do










 --allocate t arrays










 ; arr <- atomically $ newTVar (take t [1 ..])










 --parallel divide of 1 over










 ; forkIO $ th `timesDo` (appV (\x-> 1/x ) arr)










 milliSleep 800










 ; after <- atomically . readTVar arr










 --reduction(atomic)










 where timesDo = replicateM_










 milliSleep = theadDelay . (*) 1000










 










main = do shared <- atomically $ newTVar 0










 before <- atomRead shared










 putStrLn $ "Before: " ++ show before










 forkIO $ 25 `timesDo` (dispVar shared >> milliSleep 20)










 forkIO $ 10 `timesDo` (appV ((+) 2) shared >> milliSleep 50)










 forkIO $ 20 `timesDo` (appV pred shared >> milliSleep 25)










 milliSleep 800










 after <- atomRead shared










 putStrLn $ "After: " ++ show after










 where timesDo = replicateM_










 milliSleep = threadDelay . (*) 1000










 










atomRead = atomically . readTVar










dispVar x = atomRead x >>= print










appV fn x = atomically $ readTVar x >>= writeTVar x . fn













module Main where










import Control.Monad










import Control.Concurrent










import Control.Concurrent.STM





















arrayRed::Int-> Int -> STM ()










arrayRed t th = do










 --allocate t arrays










 ; arr <- atomically $ newTVar (take t [1 ..])










 --parallel divide of 1 over










 ; forkIO $ th `timesDo` (appV (\x-> 1/x ) arr)










 milliSleep 800










 ; after <- atomically . readTVar arr










 --reduction(atomic)










 where timesDo = replicateM_










 milliSleep = theadDelay . (*) 1000










 










main = do shared <- atomically $ newTVar 0










 before <- atomRead shared










 putStrLn $ "Before: " ++ show before










 forkIO $ 25 `timesDo` (dispVar shared >> milliSleep 20)










 forkIO $ 10 `timesDo` (appV ((+) 2) shared >> milliSleep 50)










 forkIO $ 20 `timesDo` (appV pred shared >> milliSleep 25)










 milliSleep 800










 after <- atomRead shared










 putStrLn $ "After: " ++ show after










 where timesDo = replicateM_










 milliSleep = threadDelay . (*) 1000










 










atomRead = atomically . readTVar










dispVar x = atomRead x >>= print










appV fn x = atomically $ readTVar x >>= writeTVar x . fn


module Main wheremoduleMainwhereimport Control.MonadimportControl.Monadimport Control.ConcurrentimportControl.Concurrentimport Control.Concurrent.STMimportControl.Concurrent.STMarrayRed::Int-> Int -> STM ()arrayRed::Int->Int->STM()arrayRed t th = doarrayRedtth=do --allocate t arrays--allocate t arrays ; arr <- atomically $ newTVar (take t [1 ..]);arr<-atomically$newTVar(taket[1..]) --parallel divide of 1 over--parallel divide of 1 over ; forkIO $ th `timesDo` (appV (\x-> 1/x ) arr);forkIO$th`timesDo`(appV(\x->1/x)arr) milliSleep 800milliSleep800 ; after <- atomically . readTVar arr;after<-atomically.readTVararr --reduction(atomic)--reduction(atomic) where timesDo = replicateM_wheretimesDo=replicateM_ milliSleep = theadDelay . (*) 1000milliSleep=theadDelay.(*)1000 main = do shared <- atomically $ newTVar 0main=doshared<-atomically$newTVar0 before <- atomRead sharedbefore<-atomReadshared putStrLn $ "Before: " ++ show beforeputStrLn$"Before: "++showbefore forkIO $ 25 `timesDo` (dispVar shared >> milliSleep 20)forkIO$25`timesDo`(dispVarshared>>milliSleep20) forkIO $ 10 `timesDo` (appV ((+) 2) shared >> milliSleep 50)forkIO$10`timesDo`(appV((+)2)shared>>milliSleep50) forkIO $ 20 `timesDo` (appV pred shared >> milliSleep 25)forkIO$20`timesDo`(appVpredshared>>milliSleep25) milliSleep 800milliSleep800 after <- atomRead sharedafter<-atomReadshared putStrLn $ "After: " ++ show afterputStrLn$"After: "++showafter where timesDo = replicateM_wheretimesDo=replicateM_ milliSleep = threadDelay . (*) 1000milliSleep=threadDelay.(*)1000 atomRead = atomically . readTVaratomRead=atomically.readTVardispVar x = atomRead x >>= printdispVarx=atomReadx>>=printappV fn x = atomically $ readTVar x >>= writeTVar x . fnappVfnx=atomically$readTVarx>>=writeTVarx.fn









Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview






















Write



Preview











































Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel












Supports Markdown






0%










Try again


or


attach a new file


.




Attach a file




Cancel




Supports Markdown





0%










Try again


or


attach a new file


.




Attach a file




Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Attach a file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






