



GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu








GitLab


















Projects
Groups
Snippets


















/












Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Toggle navigation

Menu






GitLab


















Projects
Groups
Snippets



GitLab






GitLab









Projects
Groups
Snippets






Projects
Groups
Snippets















/




















/














/










Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab







Sign in





Help









Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help





Help


Support


Community forum



Keyboard shortcuts
?




Submit feedback


Contribute to GitLab





Help

Support

Community forum


Keyboard shortcuts
?


Submit feedback

Contribute to GitLab



Sign in


Sign in
Toggle navigation
Menu

Menu




H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar








Open sidebar



Joshua Garcia heros
Commits

eec2141c















Commit
eec2141c


authored
Jul 06, 2013
by


Eric Bodden



Browse files




Merge branch 'develop' into forks/java-fw-bw


Conflicts:
	src/heros/solver/IDESolver.java






parents
fef14535
336790c7













Changes
3




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ eec2141c






......@@ -59,8 +59,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>,M>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>,M>>>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();





















 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);



......@@ -68,14 +68,14 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 










 @Override










 protected void processExit(PathEdge<N, AbstractionWithSourceStmt<N, D>, M> edge) {










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 if(otherSolver.hasLeaked(sourceStmt)) {










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>, M>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>,M>>();










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();










 pausedEdges.add(edge);










 } 










 }



......@@ -85,9 +85,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>, M>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>, M> pausedEdge: pausedEdges) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 super.processExit(pausedEdge);










 }










 }



......














src/heros/solver/IDESolver.java








View file @ eec2141c






......@@ -204,7 +204,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v());










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, val));










 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));










 }










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }



......@@ -250,7 +250,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * Dispatch the processing of a given edge. It may be executed in a different thread.










     * @param edge the edge to process










     */










 protected void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -279,7 +279,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method call










	 */










 protected void processCall(PathEdge<N,D,M> edge) {










 private void processCall(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); // a call node; line 14...










 final D d2 = edge.factAtTarget();



......@@ -361,7 +361,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method exits










	 */










 protected void processExit(PathEdge<N,D,M> edge) {










 protected void processExit(PathEdge<N,D> edge) {










 final N n = edge.getTarget(); // an exit node; line 21...










 EdgeFunction<V> f = jumpFunction(edge);










 M methodThatNeedsSummary = icfg.getMethodOf(n);



......@@ -456,7 +456,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * Simply propagate normal, intra-procedural flows.










	 * @param edge










	 */










 protected void processNormalFlow(PathEdge<N,D,M> edge) {










 private void processNormalFlow(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); 










 final D d2 = edge.factAtTarget();



......@@ -487,7 +487,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 if(newFunction) {










 PathEdge<N,D,M> edge = new PathEdge<N,D,M>(sourceVal, target, targetVal);










 PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {



......@@ -620,7 +620,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 private EdgeFunction<V> jumpFunction(PathEdge<N,D> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper



......@@ -718,9 +718,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 private class PathEdgeProcessingTask implements Runnable {










 private final PathEdge<N, D, M> edge;










 private final PathEdge<N,D> edge;





















 public PathEdgeProcessingTask(PathEdge<N, D, M> edge) {










 public PathEdgeProcessingTask(PathEdge<N,D> edge) {










 this.edge = edge;










 }














......














src/heros/solver/PathEdge.java








View file @ eec2141c






......@@ -19,9 +19,8 @@ import heros.InterproceduralCFG;









 *










 * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}.










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.










 */










public class PathEdge<N,D,M> {










public class PathEdge<N,D> {





















 protected final N target;










 protected final D dSource, dTarget;



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










H


heros






Project information




Project information




Activity


Labels


Members







Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare







Issues

0



Issues

0



List


Boards


Service Desk


Milestones







Merge requests

0



Merge requests

0






CI/CD




CI/CD




Pipelines


Jobs


Schedules







Deployments




Deployments




Environments


Releases







Monitor




Monitor




Incidents







Analytics




Analytics




Value stream


CI/CD


Repository







Wiki




Wiki





Activity


Graph


Create a new issue


Jobs


Commits


Issue Boards




Collapse sidebar


Close sidebar


H


heros


H
H
heros




Project information




Project information




Activity


Labels


Members






Project information


Project information




Project information


Activity


Activity

Labels


Labels

Members


Members




Repository




Repository




Files


Commits


Branches


Tags


Contributors


Graph


Compare






Repository


Repository




Repository


Files


Files

Commits


Commits

Branches


Branches

Tags


Tags

Contributors


Contributors

Graph


Graph

Compare


Compare




Issues

0



Issues

0



List


Boards


Service Desk


Milestones






Issues
0


Issues

0



Issues

0
0

List


List

Boards


Boards

Service Desk


Service Desk

Milestones


Milestones




Merge requests

0



Merge requests

0





Merge requests
0


Merge requests

0



Merge requests

0
0




CI/CD




CI/CD




Pipelines


Jobs


Schedules






CI/CD


CI/CD




CI/CD


Pipelines


Pipelines

Jobs


Jobs

Schedules


Schedules




Deployments




Deployments




Environments


Releases






Deployments


Deployments




Deployments


Environments


Environments

Releases


Releases




Monitor




Monitor




Incidents






Monitor


Monitor




Monitor


Incidents


Incidents




Analytics




Analytics




Value stream


CI/CD


Repository






Analytics


Analytics




Analytics


Value stream


Value stream

CI/CD


CI/CD

Repository


Repository




Wiki




Wiki






Wiki


Wiki




Wiki


Activity

Graph

Create a new issue

Jobs

Commits

Issue Boards
Collapse sidebarClose sidebar




Open sidebar



Joshua Garcia heros
Commits

eec2141c















Commit
eec2141c


authored
Jul 06, 2013
by


Eric Bodden



Browse files




Merge branch 'develop' into forks/java-fw-bw


Conflicts:
	src/heros/solver/IDESolver.java






parents
fef14535
336790c7













Changes
3




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ eec2141c






......@@ -59,8 +59,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>,M>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>,M>>>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();





















 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);



......@@ -68,14 +68,14 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 










 @Override










 protected void processExit(PathEdge<N, AbstractionWithSourceStmt<N, D>, M> edge) {










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 if(otherSolver.hasLeaked(sourceStmt)) {










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>, M>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>,M>>();










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();










 pausedEdges.add(edge);










 } 










 }



......@@ -85,9 +85,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>, M>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>, M> pausedEdge: pausedEdges) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 super.processExit(pausedEdge);










 }










 }



......














src/heros/solver/IDESolver.java








View file @ eec2141c






......@@ -204,7 +204,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v());










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, val));










 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));










 }










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }



......@@ -250,7 +250,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * Dispatch the processing of a given edge. It may be executed in a different thread.










     * @param edge the edge to process










     */










 protected void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -279,7 +279,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method call










	 */










 protected void processCall(PathEdge<N,D,M> edge) {










 private void processCall(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); // a call node; line 14...










 final D d2 = edge.factAtTarget();



......@@ -361,7 +361,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method exits










	 */










 protected void processExit(PathEdge<N,D,M> edge) {










 protected void processExit(PathEdge<N,D> edge) {










 final N n = edge.getTarget(); // an exit node; line 21...










 EdgeFunction<V> f = jumpFunction(edge);










 M methodThatNeedsSummary = icfg.getMethodOf(n);



......@@ -456,7 +456,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * Simply propagate normal, intra-procedural flows.










	 * @param edge










	 */










 protected void processNormalFlow(PathEdge<N,D,M> edge) {










 private void processNormalFlow(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); 










 final D d2 = edge.factAtTarget();



......@@ -487,7 +487,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 if(newFunction) {










 PathEdge<N,D,M> edge = new PathEdge<N,D,M>(sourceVal, target, targetVal);










 PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {



......@@ -620,7 +620,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 private EdgeFunction<V> jumpFunction(PathEdge<N,D> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper



......@@ -718,9 +718,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 private class PathEdgeProcessingTask implements Runnable {










 private final PathEdge<N, D, M> edge;










 private final PathEdge<N,D> edge;





















 public PathEdgeProcessingTask(PathEdge<N, D, M> edge) {










 public PathEdgeProcessingTask(PathEdge<N,D> edge) {










 this.edge = edge;










 }














......














src/heros/solver/PathEdge.java








View file @ eec2141c






......@@ -19,9 +19,8 @@ import heros.InterproceduralCFG;









 *










 * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}.










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.










 */










public class PathEdge<N,D,M> {










public class PathEdge<N,D> {





















 protected final N target;










 protected final D dSource, dTarget;



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Open sidebar



Joshua Garcia heros
Commits

eec2141c







Open sidebar



Joshua Garcia heros
Commits

eec2141c




Open sidebar

Joshua Garcia heros
Commits

eec2141c


Joshua GarciaherosherosCommits
eec2141c








Commit
eec2141c


authored
Jul 06, 2013
by


Eric Bodden



Browse files




Merge branch 'develop' into forks/java-fw-bw


Conflicts:
	src/heros/solver/IDESolver.java






parents
fef14535
336790c7













Changes
3




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ eec2141c






......@@ -59,8 +59,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>,M>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>,M>>>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();





















 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);



......@@ -68,14 +68,14 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 










 @Override










 protected void processExit(PathEdge<N, AbstractionWithSourceStmt<N, D>, M> edge) {










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 if(otherSolver.hasLeaked(sourceStmt)) {










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>, M>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>,M>>();










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();










 pausedEdges.add(edge);










 } 










 }



......@@ -85,9 +85,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>, M>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>, M> pausedEdge: pausedEdges) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 super.processExit(pausedEdge);










 }










 }



......














src/heros/solver/IDESolver.java








View file @ eec2141c






......@@ -204,7 +204,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v());










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, val));










 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));










 }










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }



......@@ -250,7 +250,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * Dispatch the processing of a given edge. It may be executed in a different thread.










     * @param edge the edge to process










     */










 protected void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -279,7 +279,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method call










	 */










 protected void processCall(PathEdge<N,D,M> edge) {










 private void processCall(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); // a call node; line 14...










 final D d2 = edge.factAtTarget();



......@@ -361,7 +361,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method exits










	 */










 protected void processExit(PathEdge<N,D,M> edge) {










 protected void processExit(PathEdge<N,D> edge) {










 final N n = edge.getTarget(); // an exit node; line 21...










 EdgeFunction<V> f = jumpFunction(edge);










 M methodThatNeedsSummary = icfg.getMethodOf(n);



......@@ -456,7 +456,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * Simply propagate normal, intra-procedural flows.










	 * @param edge










	 */










 protected void processNormalFlow(PathEdge<N,D,M> edge) {










 private void processNormalFlow(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); 










 final D d2 = edge.factAtTarget();



......@@ -487,7 +487,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 if(newFunction) {










 PathEdge<N,D,M> edge = new PathEdge<N,D,M>(sourceVal, target, targetVal);










 PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {



......@@ -620,7 +620,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 private EdgeFunction<V> jumpFunction(PathEdge<N,D> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper



......@@ -718,9 +718,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 private class PathEdgeProcessingTask implements Runnable {










 private final PathEdge<N, D, M> edge;










 private final PathEdge<N,D> edge;





















 public PathEdgeProcessingTask(PathEdge<N, D, M> edge) {










 public PathEdgeProcessingTask(PathEdge<N,D> edge) {










 this.edge = edge;










 }














......














src/heros/solver/PathEdge.java








View file @ eec2141c






......@@ -19,9 +19,8 @@ import heros.InterproceduralCFG;









 *










 * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}.










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.










 */










public class PathEdge<N,D,M> {










public class PathEdge<N,D> {





















 protected final N target;










 protected final D dSource, dTarget;



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment










Commit
eec2141c


authored
Jul 06, 2013
by


Eric Bodden



Browse files




Merge branch 'develop' into forks/java-fw-bw


Conflicts:
	src/heros/solver/IDESolver.java






parents
fef14535
336790c7













Changes
3




Hide whitespace changes

Inline
Side-by-side















src/heros/solver/BiDiIFDSSolver.java








View file @ eec2141c






......@@ -59,8 +59,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>,M>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>,M>>>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();





















 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);



......@@ -68,14 +68,14 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 










 @Override










 protected void processExit(PathEdge<N, AbstractionWithSourceStmt<N, D>, M> edge) {










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 if(otherSolver.hasLeaked(sourceStmt)) {










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>, M>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>,M>>();










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();










 pausedEdges.add(edge);










 } 










 }



......@@ -85,9 +85,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>, M>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>, M> pausedEdge: pausedEdges) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 super.processExit(pausedEdge);










 }










 }



......














src/heros/solver/IDESolver.java








View file @ eec2141c






......@@ -204,7 +204,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v());










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, val));










 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));










 }










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }



......@@ -250,7 +250,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * Dispatch the processing of a given edge. It may be executed in a different thread.










     * @param edge the edge to process










     */










 protected void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -279,7 +279,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method call










	 */










 protected void processCall(PathEdge<N,D,M> edge) {










 private void processCall(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); // a call node; line 14...










 final D d2 = edge.factAtTarget();



......@@ -361,7 +361,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method exits










	 */










 protected void processExit(PathEdge<N,D,M> edge) {










 protected void processExit(PathEdge<N,D> edge) {










 final N n = edge.getTarget(); // an exit node; line 21...










 EdgeFunction<V> f = jumpFunction(edge);










 M methodThatNeedsSummary = icfg.getMethodOf(n);



......@@ -456,7 +456,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * Simply propagate normal, intra-procedural flows.










	 * @param edge










	 */










 protected void processNormalFlow(PathEdge<N,D,M> edge) {










 private void processNormalFlow(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); 










 final D d2 = edge.factAtTarget();



......@@ -487,7 +487,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 if(newFunction) {










 PathEdge<N,D,M> edge = new PathEdge<N,D,M>(sourceVal, target, targetVal);










 PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {



......@@ -620,7 +620,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 private EdgeFunction<V> jumpFunction(PathEdge<N,D> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper



......@@ -718,9 +718,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 private class PathEdgeProcessingTask implements Runnable {










 private final PathEdge<N, D, M> edge;










 private final PathEdge<N,D> edge;





















 public PathEdgeProcessingTask(PathEdge<N, D, M> edge) {










 public PathEdgeProcessingTask(PathEdge<N,D> edge) {










 this.edge = edge;










 }














......














src/heros/solver/PathEdge.java








View file @ eec2141c






......@@ -19,9 +19,8 @@ import heros.InterproceduralCFG;









 *










 * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}.










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.










 */










public class PathEdge<N,D,M> {










public class PathEdge<N,D> {





















 protected final N target;










 protected final D dSource, dTarget;



......
















Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment






Commit
eec2141c


authored
Jul 06, 2013
by


Eric Bodden



Browse files



Commit
eec2141c


authored
Jul 06, 2013
by


Eric Bodden

eec2141cauthoredbyEric Bodden

Merge branch 'develop' into forks/java-fw-bw


Conflicts:
	src/heros/solver/IDESolver.java





parents
fef14535
336790c7
















parents
fef14535
336790c7





parents












Changes
3
3


Hide whitespace changes

Inline
Side-by-side






Hide whitespace changes

Inline
Side-by-side




Hide whitespace changes

Inline
Side-by-side


Inline
Side-by-side










src/heros/solver/BiDiIFDSSolver.java








View file @ eec2141c






......@@ -59,8 +59,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>,M>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>,M>>>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();





















 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);



......@@ -68,14 +68,14 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 










 @Override










 protected void processExit(PathEdge<N, AbstractionWithSourceStmt<N, D>, M> edge) {










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 if(otherSolver.hasLeaked(sourceStmt)) {










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>, M>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>,M>>();










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();










 pausedEdges.add(edge);










 } 










 }



......@@ -85,9 +85,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>, M>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>, M> pausedEdge: pausedEdges) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 super.processExit(pausedEdge);










 }










 }



......














src/heros/solver/IDESolver.java








View file @ eec2141c






......@@ -204,7 +204,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v());










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, val));










 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));










 }










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }



......@@ -250,7 +250,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * Dispatch the processing of a given edge. It may be executed in a different thread.










     * @param edge the edge to process










     */










 protected void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -279,7 +279,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method call










	 */










 protected void processCall(PathEdge<N,D,M> edge) {










 private void processCall(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); // a call node; line 14...










 final D d2 = edge.factAtTarget();



......@@ -361,7 +361,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method exits










	 */










 protected void processExit(PathEdge<N,D,M> edge) {










 protected void processExit(PathEdge<N,D> edge) {










 final N n = edge.getTarget(); // an exit node; line 21...










 EdgeFunction<V> f = jumpFunction(edge);










 M methodThatNeedsSummary = icfg.getMethodOf(n);



......@@ -456,7 +456,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * Simply propagate normal, intra-procedural flows.










	 * @param edge










	 */










 protected void processNormalFlow(PathEdge<N,D,M> edge) {










 private void processNormalFlow(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); 










 final D d2 = edge.factAtTarget();



......@@ -487,7 +487,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 if(newFunction) {










 PathEdge<N,D,M> edge = new PathEdge<N,D,M>(sourceVal, target, targetVal);










 PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {



......@@ -620,7 +620,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 private EdgeFunction<V> jumpFunction(PathEdge<N,D> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper



......@@ -718,9 +718,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 private class PathEdgeProcessingTask implements Runnable {










 private final PathEdge<N, D, M> edge;










 private final PathEdge<N,D> edge;





















 public PathEdgeProcessingTask(PathEdge<N, D, M> edge) {










 public PathEdgeProcessingTask(PathEdge<N,D> edge) {










 this.edge = edge;










 }














......














src/heros/solver/PathEdge.java








View file @ eec2141c






......@@ -19,9 +19,8 @@ import heros.InterproceduralCFG;









 *










 * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}.










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.










 */










public class PathEdge<N,D,M> {










public class PathEdge<N,D> {





















 protected final N target;










 protected final D dSource, dTarget;



......














src/heros/solver/BiDiIFDSSolver.java








View file @ eec2141c






......@@ -59,8 +59,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>,M>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>,M>>>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();





















 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);



......@@ -68,14 +68,14 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 










 @Override










 protected void processExit(PathEdge<N, AbstractionWithSourceStmt<N, D>, M> edge) {










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 if(otherSolver.hasLeaked(sourceStmt)) {










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>, M>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>,M>>();










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();










 pausedEdges.add(edge);










 } 










 }



......@@ -85,9 +85,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>, M>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>, M> pausedEdge: pausedEdges) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 super.processExit(pausedEdge);










 }










 }



......












src/heros/solver/BiDiIFDSSolver.java








View file @ eec2141c








src/heros/solver/BiDiIFDSSolver.java










View file @ eec2141c


eec2141c



......@@ -59,8 +59,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>,M>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>,M>>>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();





















 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);



......@@ -68,14 +68,14 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 










 @Override










 protected void processExit(PathEdge<N, AbstractionWithSourceStmt<N, D>, M> edge) {










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 if(otherSolver.hasLeaked(sourceStmt)) {










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>, M>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>,M>>();










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();










 pausedEdges.add(edge);










 } 










 }



......@@ -85,9 +85,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>, M>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>, M> pausedEdge: pausedEdges) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 super.processExit(pausedEdge);










 }










 }



......






......@@ -59,8 +59,8 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 private final String debugName;










 private SingleDirectionSolver otherSolver;










 private Set<N> leakedSources = new HashSet<N>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>,M>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>,M>>>();










 private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =










 new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();





















 private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {










 super(ifdsProblem);



......@@ -68,14 +68,14 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 










 @Override










 protected void processExit(PathEdge<N, AbstractionWithSourceStmt<N, D>, M> edge) {










 protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {










 N sourceStmt = edge.factAtTarget().getSourceStmt();










 if(otherSolver.hasLeaked(sourceStmt)) {










 otherSolver.unpausePathEdgesForSource(sourceStmt);










 super.processExit(edge);










 } else {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>, M>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>,M>>();










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges==null) pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();










 pausedEdges.add(edge);










 } 










 }



......@@ -85,9 +85,9 @@ public class BiDiIFDSSolver<N, D, M, I extends InterproceduralCFG<N, M>> {









 }










 










 private void unpausePathEdgesForSource(N sourceStmt) {










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>, M>> pausedEdges = pausedPathEdges.get(sourceStmt);










 Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);










 if(pausedEdges!=null) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>, M> pausedEdge: pausedEdges) {










 for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {










 super.processExit(pausedEdge);










 }










 }



......


 private final String debugName;privatefinalStringdebugName; private SingleDirectionSolver otherSolver;privateSingleDirectionSolverotherSolver; private Set<N> leakedSources = new HashSet<N>();privateSet<N>leakedSources=newHashSet<N>(); private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>,M>>> pausedPathEdges =privateMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>,,MM>>>pausedPathEdges= new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>,M>>>();newHashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>,,MM>>>(); private Map<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>> pausedPathEdges =privateMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>pausedPathEdges= new HashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>();newHashMap<N,Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>>(); private SingleDirectionSolver(IFDSTabulationProblem<N, AbstractionWithSourceStmt<N, D>, M, I> ifdsProblem, String debugName) {privateSingleDirectionSolver(IFDSTabulationProblem<N,AbstractionWithSourceStmt<N,D>,M,I>ifdsProblem,StringdebugName){ super(ifdsProblem);super(ifdsProblem); }}  @Override@Override protected void processExit(PathEdge<N, AbstractionWithSourceStmt<N, D>, M> edge) {protectedvoidprocessExit(PathEdge<N, AbstractionWithSourceStmt<N, D>,, MM>edge){ protected void processExit(PathEdge<N,AbstractionWithSourceStmt<N,D>> edge) {protectedvoidprocessExit(PathEdge<N,AbstractionWithSourceStmt<N,D>>edge){ N sourceStmt = edge.factAtTarget().getSourceStmt();NsourceStmt=edge.factAtTarget().getSourceStmt(); if(otherSolver.hasLeaked(sourceStmt)) {if(otherSolver.hasLeaked(sourceStmt)){ otherSolver.unpausePathEdgesForSource(sourceStmt);otherSolver.unpausePathEdgesForSource(sourceStmt); super.processExit(edge);super.processExit(edge); } else {}else{ Set<PathEdge<N, AbstractionWithSourceStmt<N, D>, M>> pausedEdges = pausedPathEdges.get(sourceStmt);Set<PathEdge<N,AbstractionWithSourceStmt<N,D>,, MM>>pausedEdges=pausedPathEdges.get(sourceStmt); if(pausedEdges==null) pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>,M>>();if(pausedEdges==null)pausedEdges=newHashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>,,MM>>(); Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>pausedEdges=pausedPathEdges.get(sourceStmt); if(pausedEdges==null) pausedEdges = new HashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>();if(pausedEdges==null)pausedEdges=newHashSet<PathEdge<N,AbstractionWithSourceStmt<N,D>>>(); pausedEdges.add(edge);pausedEdges.add(edge); } } }} }}  private void unpausePathEdgesForSource(N sourceStmt) {privatevoidunpausePathEdgesForSource(NsourceStmt){ Set<PathEdge<N, AbstractionWithSourceStmt<N, D>, M>> pausedEdges = pausedPathEdges.get(sourceStmt);Set<PathEdge<N,AbstractionWithSourceStmt<N,D>,, MM>>pausedEdges=pausedPathEdges.get(sourceStmt); Set<PathEdge<N, AbstractionWithSourceStmt<N, D>>> pausedEdges = pausedPathEdges.get(sourceStmt);Set<PathEdge<N,AbstractionWithSourceStmt<N,D>>>pausedEdges=pausedPathEdges.get(sourceStmt); if(pausedEdges!=null) {if(pausedEdges!=null){ for(PathEdge<N, AbstractionWithSourceStmt<N, D>, M> pausedEdge: pausedEdges) {for(PathEdge<N,AbstractionWithSourceStmt<N,D>,, MM>pausedEdge:pausedEdges){ for(PathEdge<N, AbstractionWithSourceStmt<N, D>> pausedEdge: pausedEdges) {for(PathEdge<N,AbstractionWithSourceStmt<N,D>>pausedEdge:pausedEdges){ super.processExit(pausedEdge);super.processExit(pausedEdge); }} }}








src/heros/solver/IDESolver.java








View file @ eec2141c






......@@ -204,7 +204,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v());










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, val));










 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));










 }










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }



......@@ -250,7 +250,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * Dispatch the processing of a given edge. It may be executed in a different thread.










     * @param edge the edge to process










     */










 protected void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -279,7 +279,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method call










	 */










 protected void processCall(PathEdge<N,D,M> edge) {










 private void processCall(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); // a call node; line 14...










 final D d2 = edge.factAtTarget();



......@@ -361,7 +361,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method exits










	 */










 protected void processExit(PathEdge<N,D,M> edge) {










 protected void processExit(PathEdge<N,D> edge) {










 final N n = edge.getTarget(); // an exit node; line 21...










 EdgeFunction<V> f = jumpFunction(edge);










 M methodThatNeedsSummary = icfg.getMethodOf(n);



......@@ -456,7 +456,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * Simply propagate normal, intra-procedural flows.










	 * @param edge










	 */










 protected void processNormalFlow(PathEdge<N,D,M> edge) {










 private void processNormalFlow(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); 










 final D d2 = edge.factAtTarget();



......@@ -487,7 +487,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 if(newFunction) {










 PathEdge<N,D,M> edge = new PathEdge<N,D,M>(sourceVal, target, targetVal);










 PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {



......@@ -620,7 +620,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 private EdgeFunction<V> jumpFunction(PathEdge<N,D> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper



......@@ -718,9 +718,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 private class PathEdgeProcessingTask implements Runnable {










 private final PathEdge<N, D, M> edge;










 private final PathEdge<N,D> edge;





















 public PathEdgeProcessingTask(PathEdge<N, D, M> edge) {










 public PathEdgeProcessingTask(PathEdge<N,D> edge) {










 this.edge = edge;










 }














......












src/heros/solver/IDESolver.java








View file @ eec2141c








src/heros/solver/IDESolver.java










View file @ eec2141c


eec2141c



......@@ -204,7 +204,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v());










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, val));










 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));










 }










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }



......@@ -250,7 +250,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * Dispatch the processing of a given edge. It may be executed in a different thread.










     * @param edge the edge to process










     */










 protected void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -279,7 +279,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method call










	 */










 protected void processCall(PathEdge<N,D,M> edge) {










 private void processCall(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); // a call node; line 14...










 final D d2 = edge.factAtTarget();



......@@ -361,7 +361,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method exits










	 */










 protected void processExit(PathEdge<N,D,M> edge) {










 protected void processExit(PathEdge<N,D> edge) {










 final N n = edge.getTarget(); // an exit node; line 21...










 EdgeFunction<V> f = jumpFunction(edge);










 M methodThatNeedsSummary = icfg.getMethodOf(n);



......@@ -456,7 +456,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * Simply propagate normal, intra-procedural flows.










	 * @param edge










	 */










 protected void processNormalFlow(PathEdge<N,D,M> edge) {










 private void processNormalFlow(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); 










 final D d2 = edge.factAtTarget();



......@@ -487,7 +487,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 if(newFunction) {










 PathEdge<N,D,M> edge = new PathEdge<N,D,M>(sourceVal, target, targetVal);










 PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {



......@@ -620,7 +620,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 private EdgeFunction<V> jumpFunction(PathEdge<N,D> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper



......@@ -718,9 +718,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 private class PathEdgeProcessingTask implements Runnable {










 private final PathEdge<N, D, M> edge;










 private final PathEdge<N,D> edge;





















 public PathEdgeProcessingTask(PathEdge<N, D, M> edge) {










 public PathEdgeProcessingTask(PathEdge<N,D> edge) {










 this.edge = edge;










 }














......






......@@ -204,7 +204,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 N startPoint = seed.getKey();










 for(D val: seed.getValue()) {










 propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v());










 scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, val));










 scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));










 }










 jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());










 }



......@@ -250,7 +250,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









     * Dispatch the processing of a given edge. It may be executed in a different thread.










     * @param edge the edge to process










     */










 protected void scheduleEdgeProcessing(PathEdge<N,D,M> edge){










 protected void scheduleEdgeProcessing(PathEdge<N,D> edge){










 executor.execute(new PathEdgeProcessingTask(edge));










 propagationCount++;










 }



......@@ -279,7 +279,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method call










	 */










 protected void processCall(PathEdge<N,D,M> edge) {










 private void processCall(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); // a call node; line 14...










 final D d2 = edge.factAtTarget();



......@@ -361,7 +361,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * 










	 * @param edge an edge whose target node resembles a method exits










	 */










 protected void processExit(PathEdge<N,D,M> edge) {










 protected void processExit(PathEdge<N,D> edge) {










 final N n = edge.getTarget(); // an exit node; line 21...










 EdgeFunction<V> f = jumpFunction(edge);










 M methodThatNeedsSummary = icfg.getMethodOf(n);



......@@ -456,7 +456,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









	 * Simply propagate normal, intra-procedural flows.










	 * @param edge










	 */










 protected void processNormalFlow(PathEdge<N,D,M> edge) {










 private void processNormalFlow(PathEdge<N,D> edge) {










 final D d1 = edge.factAtSource();










 final N n = edge.getTarget(); 










 final D d2 = edge.factAtTarget();



......@@ -487,7 +487,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }





















 if(newFunction) {










 PathEdge<N,D,M> edge = new PathEdge<N,D,M>(sourceVal, target, targetVal);










 PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);










 scheduleEdgeProcessing(edge);





















 if(DEBUG) {



......@@ -620,7 +620,7 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);










 }





















 private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {










 private EdgeFunction<V> jumpFunction(PathEdge<N,D> edge) {










 synchronized (jumpFn) {










 EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());










 if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paper



......@@ -718,9 +718,9 @@ public class IDESolver<N,D,M,V,I extends InterproceduralCFG<N, M>> {









 }










 










 private class PathEdgeProcessingTask implements Runnable {










 private final PathEdge<N, D, M> edge;










 private final PathEdge<N,D> edge;





















 public PathEdgeProcessingTask(PathEdge<N, D, M> edge) {










 public PathEdgeProcessingTask(PathEdge<N,D> edge) {










 this.edge = edge;










 }














......


 N startPoint = seed.getKey();NstartPoint=seed.getKey(); for(D val: seed.getValue()) {for(Dval:seed.getValue()){ propagate(zeroValue, startPoint, val, EdgeIdentity.<V>v());propagate(zeroValue,startPoint,val,EdgeIdentity.<V>v()); scheduleEdgeProcessing(new PathEdge<N,D,M>(zeroValue, startPoint, val));scheduleEdgeProcessing(newPathEdge<N,D,,MM>(zeroValue,startPoint,val)); scheduleEdgeProcessing(new PathEdge<N,D>(zeroValue, startPoint, val));scheduleEdgeProcessing(newPathEdge<N,D>(zeroValue,startPoint,val)); }} jumpFn.addFunction(zeroValue, startPoint, zeroValue, EdgeIdentity.<V>v());jumpFn.addFunction(zeroValue,startPoint,zeroValue,EdgeIdentity.<V>v()); }}     * Dispatch the processing of a given edge. It may be executed in a different thread.     * Dispatch the processing of a given edge. It may be executed in a different thread.     * @param edge the edge to process     * @param edge the edge to process     */     */ protected void scheduleEdgeProcessing(PathEdge<N,D,M> edge){protectedvoidscheduleEdgeProcessing(PathEdge<N,D,,MM>edge){ protected void scheduleEdgeProcessing(PathEdge<N,D> edge){protectedvoidscheduleEdgeProcessing(PathEdge<N,D>edge){ executor.execute(new PathEdgeProcessingTask(edge));executor.execute(newPathEdgeProcessingTask(edge)); propagationCount++;propagationCount++; }}	 * 	 * 	 * @param edge an edge whose target node resembles a method call	 * @param edge an edge whose target node resembles a method call	 */	 */ protected void processCall(PathEdge<N,D,M> edge) {protectedotecdvoidprocessCall(PathEdge<N,D,,MM>edge){ private void processCall(PathEdge<N,D> edge) {privateivavoidprocessCall(PathEdge<N,D>edge){ final D d1 = edge.factAtSource();finalDd1=edge.factAtSource(); final N n = edge.getTarget(); // a call node; line 14...finalNn=edge.getTarget();// a call node; line 14... final D d2 = edge.factAtTarget();finalDd2=edge.factAtTarget();	 * 	 * 	 * @param edge an edge whose target node resembles a method exits	 * @param edge an edge whose target node resembles a method exits	 */	 */ protected void processExit(PathEdge<N,D,M> edge) {protectedvoidprocessExit(PathEdge<N,D,,MM>edge){ protected void processExit(PathEdge<N,D> edge) {protectedvoidprocessExit(PathEdge<N,D>edge){ final N n = edge.getTarget(); // an exit node; line 21...finalNn=edge.getTarget();// an exit node; line 21... EdgeFunction<V> f = jumpFunction(edge);EdgeFunction<V>f=jumpFunction(edge); M methodThatNeedsSummary = icfg.getMethodOf(n);MmethodThatNeedsSummary=icfg.getMethodOf(n);	 * Simply propagate normal, intra-procedural flows.	 * Simply propagate normal, intra-procedural flows.	 * @param edge	 * @param edge	 */	 */ protected void processNormalFlow(PathEdge<N,D,M> edge) {protectedotecdvoidprocessNormalFlow(PathEdge<N,D,,MM>edge){ private void processNormalFlow(PathEdge<N,D> edge) {privateivavoidprocessNormalFlow(PathEdge<N,D>edge){ final D d1 = edge.factAtSource();finalDd1=edge.factAtSource(); final N n = edge.getTarget(); finalNn=edge.getTarget(); final D d2 = edge.factAtTarget();finalDd2=edge.factAtTarget(); }} if(newFunction) {if(newFunction){ PathEdge<N,D,M> edge = new PathEdge<N,D,M>(sourceVal, target, targetVal);PathEdge<N,D,,MM>edge=newPathEdge<N,D,,MM>(sourceVal,target,targetVal); PathEdge<N,D> edge = new PathEdge<N,D>(sourceVal, target, targetVal);PathEdge<N,D>edge=newPathEdge<N,D>(sourceVal,target,targetVal); scheduleEdgeProcessing(edge);scheduleEdgeProcessing(edge); if(DEBUG) {if(DEBUG){ System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+ " " + l);System.err.println("VALUE: "+icfg.getMethodOf(nHashN)+" "+nHashN+" "+nHashD+" "+l); }} private EdgeFunction<V> jumpFunction(PathEdge<N, D, M> edge) {privateEdgeFunction<V>jumpFunction(PathEdge<N, DD,, MM>edge){ private EdgeFunction<V> jumpFunction(PathEdge<N,D> edge) {privateEdgeFunction<V>jumpFunction(PathEdge<N,DD>edge){ synchronized (jumpFn) {synchronized(jumpFn){ EdgeFunction<V> function = jumpFn.forwardLookup(edge.factAtSource(), edge.getTarget()).get(edge.factAtTarget());EdgeFunction<V>function=jumpFn.forwardLookup(edge.factAtSource(),edge.getTarget()).get(edge.factAtTarget()); if(function==null) return allTop; //JumpFn initialized to all-top, see line [2] in SRH96 paperif(function==null)returnallTop;//JumpFn initialized to all-top, see line [2] in SRH96 paper }}  private class PathEdgeProcessingTask implements Runnable {privateclassPathEdgeProcessingTaskimplementsRunnable{ private final PathEdge<N, D, M> edge;privatefinalPathEdge<N, DD,, MM>edge; private final PathEdge<N,D> edge;privatefinalPathEdge<N,DD>edge; public PathEdgeProcessingTask(PathEdge<N, D, M> edge) {publicPathEdgeProcessingTask(PathEdge<N, DD,, MM>edge){ public PathEdgeProcessingTask(PathEdge<N,D> edge) {publicPathEdgeProcessingTask(PathEdge<N,DD>edge){ this.edge = edge;this.edge=edge; }}








src/heros/solver/PathEdge.java








View file @ eec2141c






......@@ -19,9 +19,8 @@ import heros.InterproceduralCFG;









 *










 * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}.










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.










 */










public class PathEdge<N,D,M> {










public class PathEdge<N,D> {





















 protected final N target;










 protected final D dSource, dTarget;



......












src/heros/solver/PathEdge.java








View file @ eec2141c








src/heros/solver/PathEdge.java










View file @ eec2141c


eec2141c



......@@ -19,9 +19,8 @@ import heros.InterproceduralCFG;









 *










 * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}.










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.










 */










public class PathEdge<N,D,M> {










public class PathEdge<N,D> {





















 protected final N target;










 protected final D dSource, dTarget;



......






......@@ -19,9 +19,8 @@ import heros.InterproceduralCFG;









 *










 * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}.










 * @param <D> The type of data-flow facts to be computed by the tabulation problem.










 * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}.










 */










public class PathEdge<N,D,M> {










public class PathEdge<N,D> {





















 protected final N target;










 protected final D dSource, dTarget;



......


 * * * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}. * @param <N> The type of nodes in the interprocedural control-flow graph. Typically {@link Unit}. * @param <D> The type of data-flow facts to be computed by the tabulation problem. * @param <D> The type of data-flow facts to be computed by the tabulation problem. * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}. * @param <M> The type of objects used to represent methods. Typically {@link SootMethod}. */ */public class PathEdge<N,D,M> {publicclassPathEdge<N,D,,MM>{public class PathEdge<N,D> {publicclassPathEdge<N,D>{ protected final N target;protectedfinalNtarget; protected final D dSource, dTarget;protectedfinalDdSource,dTarget;









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel





Please register or sign in to comment









Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Finish editing this message first!



Cancel







Write




Preview


































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel










You are about to add

0
people

to the discussion. Proceed with caution.





Write




Preview

























Write



Preview

















































Supports Markdown






0%










Try again


or


attach a new file


.



Cancel












Supports Markdown






0%










Try again


or


attach a new file


.



Cancel




Supports Markdown





0%










Try again


or


attach a new file


.



Cancel






0%


0%







Try again


or


attach a new file


.




Try again

attach a new file

Cancel



You are about to add

0
people

to the discussion. Proceed with caution.



You are about to add

0
people

to the discussion. Proceed with caution.
0

Finish editing this message first!



Cancel



Finish editing this message first!

Cancel


Please register or sign in to comment






